// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type QueryIncidentTracingSubNodesCountRequest struct {
	VertexIdAndTypeList [][]*string `json:"VertexIdAndTypeList,omitempty" xml:"VertexIdAndTypeList,omitempty" type:"Repeated"`
}

func (s QueryIncidentTracingSubNodesCountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIncidentTracingSubNodesCountRequest) GoString() string {
	return s.String()
}

func (s *QueryIncidentTracingSubNodesCountRequest) SetVertexIdAndTypeList(v [][]*string) *QueryIncidentTracingSubNodesCountRequest {
	s.VertexIdAndTypeList = v
	return s
}

type AddCheckInstanceResultWhiteListRequest struct {
	CheckGroupId *string   `json:"CheckGroupId,omitempty" xml:"CheckGroupId,omitempty"`
	CheckId      *int64    `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	InstanceIds  []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
}

func (s AddCheckInstanceResultWhiteListRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCheckInstanceResultWhiteListRequest) GoString() string {
	return s.String()
}

func (s *AddCheckInstanceResultWhiteListRequest) SetCheckGroupId(v string) *AddCheckInstanceResultWhiteListRequest {
	s.CheckGroupId = &v
	return s
}

func (s *AddCheckInstanceResultWhiteListRequest) SetCheckId(v int64) *AddCheckInstanceResultWhiteListRequest {
	s.CheckId = &v
	return s
}

func (s *AddCheckInstanceResultWhiteListRequest) SetInstanceIds(v []*string) *AddCheckInstanceResultWhiteListRequest {
	s.InstanceIds = v
	return s
}

type AddCheckInstanceResultWhiteListResponseBody struct {
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCheckInstanceResultWhiteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCheckInstanceResultWhiteListResponseBody) GoString() string {
	return s.String()
}

func (s *AddCheckInstanceResultWhiteListResponseBody) SetData(v map[string]interface{}) *AddCheckInstanceResultWhiteListResponseBody {
	s.Data = v
	return s
}

func (s *AddCheckInstanceResultWhiteListResponseBody) SetRequestId(v string) *AddCheckInstanceResultWhiteListResponseBody {
	s.RequestId = &v
	return s
}

type AddCheckInstanceResultWhiteListResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddCheckInstanceResultWhiteListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCheckInstanceResultWhiteListResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCheckInstanceResultWhiteListResponse) GoString() string {
	return s.String()
}

func (s *AddCheckInstanceResultWhiteListResponse) SetHeaders(v map[string]*string) *AddCheckInstanceResultWhiteListResponse {
	s.Headers = v
	return s
}

func (s *AddCheckInstanceResultWhiteListResponse) SetStatusCode(v int32) *AddCheckInstanceResultWhiteListResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCheckInstanceResultWhiteListResponse) SetBody(v *AddCheckInstanceResultWhiteListResponseBody) *AddCheckInstanceResultWhiteListResponse {
	s.Body = v
	return s
}

type AddCheckResultWhiteListRequest struct {
	CheckIds []*int64 `json:"CheckIds,omitempty" xml:"CheckIds,omitempty" type:"Repeated"`
}

func (s AddCheckResultWhiteListRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCheckResultWhiteListRequest) GoString() string {
	return s.String()
}

func (s *AddCheckResultWhiteListRequest) SetCheckIds(v []*int64) *AddCheckResultWhiteListRequest {
	s.CheckIds = v
	return s
}

type AddCheckResultWhiteListResponseBody struct {
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCheckResultWhiteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCheckResultWhiteListResponseBody) GoString() string {
	return s.String()
}

func (s *AddCheckResultWhiteListResponseBody) SetData(v map[string]interface{}) *AddCheckResultWhiteListResponseBody {
	s.Data = v
	return s
}

func (s *AddCheckResultWhiteListResponseBody) SetRequestId(v string) *AddCheckResultWhiteListResponseBody {
	s.RequestId = &v
	return s
}

type AddCheckResultWhiteListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddCheckResultWhiteListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCheckResultWhiteListResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCheckResultWhiteListResponse) GoString() string {
	return s.String()
}

func (s *AddCheckResultWhiteListResponse) SetHeaders(v map[string]*string) *AddCheckResultWhiteListResponse {
	s.Headers = v
	return s
}

func (s *AddCheckResultWhiteListResponse) SetStatusCode(v int32) *AddCheckResultWhiteListResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCheckResultWhiteListResponse) SetBody(v *AddCheckResultWhiteListResponseBody) *AddCheckResultWhiteListResponse {
	s.Body = v
	return s
}

type AddClientUserDefineRuleRequest struct {
	ActionType      *int32  `json:"ActionType,omitempty" xml:"ActionType,omitempty"`
	Cmdline         *string `json:"Cmdline,omitempty" xml:"Cmdline,omitempty"`
	FilePath        *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	IP              *string `json:"IP,omitempty" xml:"IP,omitempty"`
	Md5List         *string `json:"Md5List,omitempty" xml:"Md5List,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NewFilePath     *string `json:"NewFilePath,omitempty" xml:"NewFilePath,omitempty"`
	ParentCmdline   *string `json:"ParentCmdline,omitempty" xml:"ParentCmdline,omitempty"`
	ParentProcPath  *string `json:"ParentProcPath,omitempty" xml:"ParentProcPath,omitempty"`
	Platform        *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Port            *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	PortStr         *string `json:"PortStr,omitempty" xml:"PortStr,omitempty"`
	ProcPath        *string `json:"ProcPath,omitempty" xml:"ProcPath,omitempty"`
	RegistryContent *string `json:"RegistryContent,omitempty" xml:"RegistryContent,omitempty"`
	RegistryKey     *string `json:"RegistryKey,omitempty" xml:"RegistryKey,omitempty"`
	Type            *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddClientUserDefineRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s AddClientUserDefineRuleRequest) GoString() string {
	return s.String()
}

func (s *AddClientUserDefineRuleRequest) SetActionType(v int32) *AddClientUserDefineRuleRequest {
	s.ActionType = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetCmdline(v string) *AddClientUserDefineRuleRequest {
	s.Cmdline = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetFilePath(v string) *AddClientUserDefineRuleRequest {
	s.FilePath = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetIP(v string) *AddClientUserDefineRuleRequest {
	s.IP = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetMd5List(v string) *AddClientUserDefineRuleRequest {
	s.Md5List = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetName(v string) *AddClientUserDefineRuleRequest {
	s.Name = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetNewFilePath(v string) *AddClientUserDefineRuleRequest {
	s.NewFilePath = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetParentCmdline(v string) *AddClientUserDefineRuleRequest {
	s.ParentCmdline = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetParentProcPath(v string) *AddClientUserDefineRuleRequest {
	s.ParentProcPath = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetPlatform(v string) *AddClientUserDefineRuleRequest {
	s.Platform = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetPort(v int32) *AddClientUserDefineRuleRequest {
	s.Port = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetPortStr(v string) *AddClientUserDefineRuleRequest {
	s.PortStr = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetProcPath(v string) *AddClientUserDefineRuleRequest {
	s.ProcPath = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetRegistryContent(v string) *AddClientUserDefineRuleRequest {
	s.RegistryContent = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetRegistryKey(v string) *AddClientUserDefineRuleRequest {
	s.RegistryKey = &v
	return s
}

func (s *AddClientUserDefineRuleRequest) SetType(v int32) *AddClientUserDefineRuleRequest {
	s.Type = &v
	return s
}

type AddClientUserDefineRuleResponseBody struct {
	RequestId               *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserDefineRuleAddResult *AddClientUserDefineRuleResponseBodyUserDefineRuleAddResult `json:"UserDefineRuleAddResult,omitempty" xml:"UserDefineRuleAddResult,omitempty" type:"Struct"`
}

func (s AddClientUserDefineRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddClientUserDefineRuleResponseBody) GoString() string {
	return s.String()
}

func (s *AddClientUserDefineRuleResponseBody) SetRequestId(v string) *AddClientUserDefineRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddClientUserDefineRuleResponseBody) SetUserDefineRuleAddResult(v *AddClientUserDefineRuleResponseBodyUserDefineRuleAddResult) *AddClientUserDefineRuleResponseBody {
	s.UserDefineRuleAddResult = v
	return s
}

type AddClientUserDefineRuleResponseBodyUserDefineRuleAddResult struct {
	Id       *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Platform *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	SwitchId *string `json:"SwitchId,omitempty" xml:"SwitchId,omitempty"`
}

func (s AddClientUserDefineRuleResponseBodyUserDefineRuleAddResult) String() string {
	return tea.Prettify(s)
}

func (s AddClientUserDefineRuleResponseBodyUserDefineRuleAddResult) GoString() string {
	return s.String()
}

func (s *AddClientUserDefineRuleResponseBodyUserDefineRuleAddResult) SetId(v int64) *AddClientUserDefineRuleResponseBodyUserDefineRuleAddResult {
	s.Id = &v
	return s
}

func (s *AddClientUserDefineRuleResponseBodyUserDefineRuleAddResult) SetPlatform(v string) *AddClientUserDefineRuleResponseBodyUserDefineRuleAddResult {
	s.Platform = &v
	return s
}

func (s *AddClientUserDefineRuleResponseBodyUserDefineRuleAddResult) SetSwitchId(v string) *AddClientUserDefineRuleResponseBodyUserDefineRuleAddResult {
	s.SwitchId = &v
	return s
}

type AddClientUserDefineRuleResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddClientUserDefineRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddClientUserDefineRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s AddClientUserDefineRuleResponse) GoString() string {
	return s.String()
}

func (s *AddClientUserDefineRuleResponse) SetHeaders(v map[string]*string) *AddClientUserDefineRuleResponse {
	s.Headers = v
	return s
}

func (s *AddClientUserDefineRuleResponse) SetStatusCode(v int32) *AddClientUserDefineRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *AddClientUserDefineRuleResponse) SetBody(v *AddClientUserDefineRuleResponseBody) *AddClientUserDefineRuleResponse {
	s.Body = v
	return s
}

type AddInstallCodeRequest struct {
	// The validity period of the installation command. The value is a 13-digit timestamp.
	//
	// >  The installation command is valid only within the validity period. An expired installation command cannot be used to install the Security Center agent.
	ExpiredDate *int64 `json:"ExpiredDate,omitempty" xml:"ExpiredDate,omitempty"`
	// The ID of the asset group to which the you want to add the asset.
	//
	// >  You can call the [DescribeAllGroups](~~describeallgroups~~) operation to query the IDs of asset groups.
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// Specifies whether to create an image. Default value: **false**. Valid values:
	//
	// *   **false**: does not create an image.
	// *   **true**: creates an image.
	OnlyImage *bool `json:"OnlyImage,omitempty" xml:"OnlyImage,omitempty"`
	// The operating system of the instance. Default value: **linux**. Valid values:
	//
	// *   **linux**
	// *   **windows**
	// *   **windows-2003**
	Os *string `json:"Os,omitempty" xml:"Os,omitempty"`
	// The name of the service provider for the asset. Default value: **ALIYUN**.
	//
	// >  You can call the [DescribeVendorList](~~DescribeVendorList~~) operation to query the names of service providers.
	VendorName *string `json:"VendorName,omitempty" xml:"VendorName,omitempty"`
}

func (s AddInstallCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddInstallCodeRequest) GoString() string {
	return s.String()
}

func (s *AddInstallCodeRequest) SetExpiredDate(v int64) *AddInstallCodeRequest {
	s.ExpiredDate = &v
	return s
}

func (s *AddInstallCodeRequest) SetGroupId(v int64) *AddInstallCodeRequest {
	s.GroupId = &v
	return s
}

func (s *AddInstallCodeRequest) SetOnlyImage(v bool) *AddInstallCodeRequest {
	s.OnlyImage = &v
	return s
}

func (s *AddInstallCodeRequest) SetOs(v string) *AddInstallCodeRequest {
	s.Os = &v
	return s
}

func (s *AddInstallCodeRequest) SetVendorName(v string) *AddInstallCodeRequest {
	s.VendorName = &v
	return s
}

type AddInstallCodeResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddInstallCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddInstallCodeResponseBody) GoString() string {
	return s.String()
}

func (s *AddInstallCodeResponseBody) SetRequestId(v string) *AddInstallCodeResponseBody {
	s.RequestId = &v
	return s
}

type AddInstallCodeResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddInstallCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddInstallCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddInstallCodeResponse) GoString() string {
	return s.String()
}

func (s *AddInstallCodeResponse) SetHeaders(v map[string]*string) *AddInstallCodeResponse {
	s.Headers = v
	return s
}

func (s *AddInstallCodeResponse) SetStatusCode(v int32) *AddInstallCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *AddInstallCodeResponse) SetBody(v *AddInstallCodeResponseBody) *AddInstallCodeResponse {
	s.Body = v
	return s
}

type AddPrivateRegistryRequest struct {
	DomainName       *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	ExtraParam       *string `json:"ExtraParam,omitempty" xml:"ExtraParam,omitempty"`
	NetType          *int64  `json:"NetType,omitempty" xml:"NetType,omitempty"`
	Password         *string `json:"Password,omitempty" xml:"Password,omitempty"`
	ProtocolType     *int64  `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	RegistryHostIp   *string `json:"RegistryHostIp,omitempty" xml:"RegistryHostIp,omitempty"`
	RegistryRegionId *string `json:"RegistryRegionId,omitempty" xml:"RegistryRegionId,omitempty"`
	RegistryType     *string `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
	RegistryVersion  *string `json:"RegistryVersion,omitempty" xml:"RegistryVersion,omitempty"`
	TransPerHour     *int32  `json:"TransPerHour,omitempty" xml:"TransPerHour,omitempty"`
	UserName         *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	VpcId            *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s AddPrivateRegistryRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPrivateRegistryRequest) GoString() string {
	return s.String()
}

func (s *AddPrivateRegistryRequest) SetDomainName(v string) *AddPrivateRegistryRequest {
	s.DomainName = &v
	return s
}

func (s *AddPrivateRegistryRequest) SetExtraParam(v string) *AddPrivateRegistryRequest {
	s.ExtraParam = &v
	return s
}

func (s *AddPrivateRegistryRequest) SetNetType(v int64) *AddPrivateRegistryRequest {
	s.NetType = &v
	return s
}

func (s *AddPrivateRegistryRequest) SetPassword(v string) *AddPrivateRegistryRequest {
	s.Password = &v
	return s
}

func (s *AddPrivateRegistryRequest) SetProtocolType(v int64) *AddPrivateRegistryRequest {
	s.ProtocolType = &v
	return s
}

func (s *AddPrivateRegistryRequest) SetRegistryHostIp(v string) *AddPrivateRegistryRequest {
	s.RegistryHostIp = &v
	return s
}

func (s *AddPrivateRegistryRequest) SetRegistryRegionId(v string) *AddPrivateRegistryRequest {
	s.RegistryRegionId = &v
	return s
}

func (s *AddPrivateRegistryRequest) SetRegistryType(v string) *AddPrivateRegistryRequest {
	s.RegistryType = &v
	return s
}

func (s *AddPrivateRegistryRequest) SetRegistryVersion(v string) *AddPrivateRegistryRequest {
	s.RegistryVersion = &v
	return s
}

func (s *AddPrivateRegistryRequest) SetTransPerHour(v int32) *AddPrivateRegistryRequest {
	s.TransPerHour = &v
	return s
}

func (s *AddPrivateRegistryRequest) SetUserName(v string) *AddPrivateRegistryRequest {
	s.UserName = &v
	return s
}

func (s *AddPrivateRegistryRequest) SetVpcId(v string) *AddPrivateRegistryRequest {
	s.VpcId = &v
	return s
}

type AddPrivateRegistryResponseBody struct {
	Data      *AddPrivateRegistryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddPrivateRegistryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPrivateRegistryResponseBody) GoString() string {
	return s.String()
}

func (s *AddPrivateRegistryResponseBody) SetData(v *AddPrivateRegistryResponseBodyData) *AddPrivateRegistryResponseBody {
	s.Data = v
	return s
}

func (s *AddPrivateRegistryResponseBody) SetRequestId(v string) *AddPrivateRegistryResponseBody {
	s.RequestId = &v
	return s
}

type AddPrivateRegistryResponseBodyData struct {
	AliUid          *int64  `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	NetType         *int64  `json:"NetType,omitempty" xml:"NetType,omitempty"`
	Password        *string `json:"Password,omitempty" xml:"Password,omitempty"`
	ProtocolType    *int64  `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegistryHostIp  *string `json:"RegistryHostIp,omitempty" xml:"RegistryHostIp,omitempty"`
	RegistryType    *string `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
	RegistryVersion *string `json:"RegistryVersion,omitempty" xml:"RegistryVersion,omitempty"`
	Token           *string `json:"Token,omitempty" xml:"Token,omitempty"`
	TransPerHour    *int32  `json:"TransPerHour,omitempty" xml:"TransPerHour,omitempty"`
	UserName        *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s AddPrivateRegistryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddPrivateRegistryResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddPrivateRegistryResponseBodyData) SetAliUid(v int64) *AddPrivateRegistryResponseBodyData {
	s.AliUid = &v
	return s
}

func (s *AddPrivateRegistryResponseBodyData) SetDomainName(v string) *AddPrivateRegistryResponseBodyData {
	s.DomainName = &v
	return s
}

func (s *AddPrivateRegistryResponseBodyData) SetId(v int64) *AddPrivateRegistryResponseBodyData {
	s.Id = &v
	return s
}

func (s *AddPrivateRegistryResponseBodyData) SetNetType(v int64) *AddPrivateRegistryResponseBodyData {
	s.NetType = &v
	return s
}

func (s *AddPrivateRegistryResponseBodyData) SetPassword(v string) *AddPrivateRegistryResponseBodyData {
	s.Password = &v
	return s
}

func (s *AddPrivateRegistryResponseBodyData) SetProtocolType(v int64) *AddPrivateRegistryResponseBodyData {
	s.ProtocolType = &v
	return s
}

func (s *AddPrivateRegistryResponseBodyData) SetRegionId(v string) *AddPrivateRegistryResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *AddPrivateRegistryResponseBodyData) SetRegistryHostIp(v string) *AddPrivateRegistryResponseBodyData {
	s.RegistryHostIp = &v
	return s
}

func (s *AddPrivateRegistryResponseBodyData) SetRegistryType(v string) *AddPrivateRegistryResponseBodyData {
	s.RegistryType = &v
	return s
}

func (s *AddPrivateRegistryResponseBodyData) SetRegistryVersion(v string) *AddPrivateRegistryResponseBodyData {
	s.RegistryVersion = &v
	return s
}

func (s *AddPrivateRegistryResponseBodyData) SetToken(v string) *AddPrivateRegistryResponseBodyData {
	s.Token = &v
	return s
}

func (s *AddPrivateRegistryResponseBodyData) SetTransPerHour(v int32) *AddPrivateRegistryResponseBodyData {
	s.TransPerHour = &v
	return s
}

func (s *AddPrivateRegistryResponseBodyData) SetUserName(v string) *AddPrivateRegistryResponseBodyData {
	s.UserName = &v
	return s
}

func (s *AddPrivateRegistryResponseBodyData) SetVpcId(v string) *AddPrivateRegistryResponseBodyData {
	s.VpcId = &v
	return s
}

type AddPrivateRegistryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddPrivateRegistryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddPrivateRegistryResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPrivateRegistryResponse) GoString() string {
	return s.String()
}

func (s *AddPrivateRegistryResponse) SetHeaders(v map[string]*string) *AddPrivateRegistryResponse {
	s.Headers = v
	return s
}

func (s *AddPrivateRegistryResponse) SetStatusCode(v int32) *AddPrivateRegistryResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPrivateRegistryResponse) SetBody(v *AddPrivateRegistryResponseBody) *AddPrivateRegistryResponse {
	s.Body = v
	return s
}

type AddTagWithUuidRequest struct {
	TagName  *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	UuidList *string `json:"UuidList,omitempty" xml:"UuidList,omitempty"`
}

func (s AddTagWithUuidRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTagWithUuidRequest) GoString() string {
	return s.String()
}

func (s *AddTagWithUuidRequest) SetTagName(v string) *AddTagWithUuidRequest {
	s.TagName = &v
	return s
}

func (s *AddTagWithUuidRequest) SetUuidList(v string) *AddTagWithUuidRequest {
	s.UuidList = &v
	return s
}

type AddTagWithUuidResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddTagWithUuidResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTagWithUuidResponseBody) GoString() string {
	return s.String()
}

func (s *AddTagWithUuidResponseBody) SetRequestId(v string) *AddTagWithUuidResponseBody {
	s.RequestId = &v
	return s
}

type AddTagWithUuidResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddTagWithUuidResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddTagWithUuidResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTagWithUuidResponse) GoString() string {
	return s.String()
}

func (s *AddTagWithUuidResponse) SetHeaders(v map[string]*string) *AddTagWithUuidResponse {
	s.Headers = v
	return s
}

func (s *AddTagWithUuidResponse) SetStatusCode(v int32) *AddTagWithUuidResponse {
	s.StatusCode = &v
	return s
}

func (s *AddTagWithUuidResponse) SetBody(v *AddTagWithUuidResponseBody) *AddTagWithUuidResponse {
	s.Body = v
	return s
}

type AddUninstallClientsByUuidsRequest struct {
	CallMethod *string `json:"CallMethod,omitempty" xml:"CallMethod,omitempty"`
	Feedback   *string `json:"Feedback,omitempty" xml:"Feedback,omitempty"`
	Region     *string `json:"Region,omitempty" xml:"Region,omitempty"`
	SourceIp   *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	Uuids      *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s AddUninstallClientsByUuidsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddUninstallClientsByUuidsRequest) GoString() string {
	return s.String()
}

func (s *AddUninstallClientsByUuidsRequest) SetCallMethod(v string) *AddUninstallClientsByUuidsRequest {
	s.CallMethod = &v
	return s
}

func (s *AddUninstallClientsByUuidsRequest) SetFeedback(v string) *AddUninstallClientsByUuidsRequest {
	s.Feedback = &v
	return s
}

func (s *AddUninstallClientsByUuidsRequest) SetRegion(v string) *AddUninstallClientsByUuidsRequest {
	s.Region = &v
	return s
}

func (s *AddUninstallClientsByUuidsRequest) SetSourceIp(v string) *AddUninstallClientsByUuidsRequest {
	s.SourceIp = &v
	return s
}

func (s *AddUninstallClientsByUuidsRequest) SetUuids(v string) *AddUninstallClientsByUuidsRequest {
	s.Uuids = &v
	return s
}

type AddUninstallClientsByUuidsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddUninstallClientsByUuidsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddUninstallClientsByUuidsResponseBody) GoString() string {
	return s.String()
}

func (s *AddUninstallClientsByUuidsResponseBody) SetRequestId(v string) *AddUninstallClientsByUuidsResponseBody {
	s.RequestId = &v
	return s
}

type AddUninstallClientsByUuidsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddUninstallClientsByUuidsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddUninstallClientsByUuidsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddUninstallClientsByUuidsResponse) GoString() string {
	return s.String()
}

func (s *AddUninstallClientsByUuidsResponse) SetHeaders(v map[string]*string) *AddUninstallClientsByUuidsResponse {
	s.Headers = v
	return s
}

func (s *AddUninstallClientsByUuidsResponse) SetStatusCode(v int32) *AddUninstallClientsByUuidsResponse {
	s.StatusCode = &v
	return s
}

func (s *AddUninstallClientsByUuidsResponse) SetBody(v *AddUninstallClientsByUuidsResponseBody) *AddUninstallClientsByUuidsResponse {
	s.Body = v
	return s
}

type AddVpcHoneyPotRequest struct {
	// The ID of the virtual private cloud (VPC) in which you want to create a honeypot.
	//
	// >  You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to obtain the VPC ID. The VPC ID is the value of the InstanceId parameter.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s AddVpcHoneyPotRequest) String() string {
	return tea.Prettify(s)
}

func (s AddVpcHoneyPotRequest) GoString() string {
	return s.String()
}

func (s *AddVpcHoneyPotRequest) SetVpcId(v string) *AddVpcHoneyPotRequest {
	s.VpcId = &v
	return s
}

type AddVpcHoneyPotResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddVpcHoneyPotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddVpcHoneyPotResponseBody) GoString() string {
	return s.String()
}

func (s *AddVpcHoneyPotResponseBody) SetRequestId(v string) *AddVpcHoneyPotResponseBody {
	s.RequestId = &v
	return s
}

type AddVpcHoneyPotResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddVpcHoneyPotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddVpcHoneyPotResponse) String() string {
	return tea.Prettify(s)
}

func (s AddVpcHoneyPotResponse) GoString() string {
	return s.String()
}

func (s *AddVpcHoneyPotResponse) SetHeaders(v map[string]*string) *AddVpcHoneyPotResponse {
	s.Headers = v
	return s
}

func (s *AddVpcHoneyPotResponse) SetStatusCode(v int32) *AddVpcHoneyPotResponse {
	s.StatusCode = &v
	return s
}

func (s *AddVpcHoneyPotResponse) SetBody(v *AddVpcHoneyPotResponseBody) *AddVpcHoneyPotResponse {
	s.Body = v
	return s
}

type AdvanceSecurityEventOperationsRequest struct {
	EventName       *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	EventType       *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RuleId          *int32  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s AdvanceSecurityEventOperationsRequest) String() string {
	return tea.Prettify(s)
}

func (s AdvanceSecurityEventOperationsRequest) GoString() string {
	return s.String()
}

func (s *AdvanceSecurityEventOperationsRequest) SetEventName(v string) *AdvanceSecurityEventOperationsRequest {
	s.EventName = &v
	return s
}

func (s *AdvanceSecurityEventOperationsRequest) SetEventType(v string) *AdvanceSecurityEventOperationsRequest {
	s.EventType = &v
	return s
}

func (s *AdvanceSecurityEventOperationsRequest) SetResourceOwnerId(v int64) *AdvanceSecurityEventOperationsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AdvanceSecurityEventOperationsRequest) SetRuleId(v int32) *AdvanceSecurityEventOperationsRequest {
	s.RuleId = &v
	return s
}

type AdvanceSecurityEventOperationsResponseBody struct {
	RequestId                       *string                                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecurityEventOperationsResponse []*AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse `json:"SecurityEventOperationsResponse,omitempty" xml:"SecurityEventOperationsResponse,omitempty" type:"Repeated"`
}

func (s AdvanceSecurityEventOperationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AdvanceSecurityEventOperationsResponseBody) GoString() string {
	return s.String()
}

func (s *AdvanceSecurityEventOperationsResponseBody) SetRequestId(v string) *AdvanceSecurityEventOperationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *AdvanceSecurityEventOperationsResponseBody) SetSecurityEventOperationsResponse(v []*AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse) *AdvanceSecurityEventOperationsResponseBody {
	s.SecurityEventOperationsResponse = v
	return s
}

type AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse struct {
	MarkField        []*AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField        `json:"MarkField,omitempty" xml:"MarkField,omitempty" type:"Repeated"`
	MarkFieldsSource []*AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource `json:"MarkFieldsSource,omitempty" xml:"MarkFieldsSource,omitempty" type:"Repeated"`
	OperationCode    *string                                                                                      `json:"OperationCode,omitempty" xml:"OperationCode,omitempty"`
	OperationParams  *string                                                                                      `json:"OperationParams,omitempty" xml:"OperationParams,omitempty"`
	UserCanOperate   *bool                                                                                        `json:"UserCanOperate,omitempty" xml:"UserCanOperate,omitempty"`
}

func (s AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse) String() string {
	return tea.Prettify(s)
}

func (s AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse) GoString() string {
	return s.String()
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse) SetMarkField(v []*AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse {
	s.MarkField = v
	return s
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse) SetMarkFieldsSource(v []*AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse {
	s.MarkFieldsSource = v
	return s
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse) SetOperationCode(v string) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse {
	s.OperationCode = &v
	return s
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse) SetOperationParams(v string) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse {
	s.OperationParams = &v
	return s
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse) SetUserCanOperate(v bool) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponse {
	s.UserCanOperate = &v
	return s
}

type AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField struct {
	FiledAliasName   *string   `json:"FiledAliasName,omitempty" xml:"FiledAliasName,omitempty"`
	FiledName        *string   `json:"FiledName,omitempty" xml:"FiledName,omitempty"`
	MarkMisType      *string   `json:"MarkMisType,omitempty" xml:"MarkMisType,omitempty"`
	MarkMisValue     *string   `json:"MarkMisValue,omitempty" xml:"MarkMisValue,omitempty"`
	SupportedMisType []*string `json:"SupportedMisType,omitempty" xml:"SupportedMisType,omitempty" type:"Repeated"`
}

func (s AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) String() string {
	return tea.Prettify(s)
}

func (s AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) GoString() string {
	return s.String()
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) SetFiledAliasName(v string) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField {
	s.FiledAliasName = &v
	return s
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) SetFiledName(v string) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField {
	s.FiledName = &v
	return s
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) SetMarkMisType(v string) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField {
	s.MarkMisType = &v
	return s
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) SetMarkMisValue(v string) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField {
	s.MarkMisValue = &v
	return s
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) SetSupportedMisType(v []*string) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField {
	s.SupportedMisType = v
	return s
}

type AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource struct {
	FiledAliasName   *string   `json:"FiledAliasName,omitempty" xml:"FiledAliasName,omitempty"`
	FiledName        *string   `json:"FiledName,omitempty" xml:"FiledName,omitempty"`
	MarkMisValue     *string   `json:"MarkMisValue,omitempty" xml:"MarkMisValue,omitempty"`
	SupportedMisType []*string `json:"SupportedMisType,omitempty" xml:"SupportedMisType,omitempty" type:"Repeated"`
}

func (s AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) String() string {
	return tea.Prettify(s)
}

func (s AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) GoString() string {
	return s.String()
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) SetFiledAliasName(v string) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource {
	s.FiledAliasName = &v
	return s
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) SetFiledName(v string) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource {
	s.FiledName = &v
	return s
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) SetMarkMisValue(v string) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource {
	s.MarkMisValue = &v
	return s
}

func (s *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) SetSupportedMisType(v []*string) *AdvanceSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource {
	s.SupportedMisType = v
	return s
}

type AdvanceSecurityEventOperationsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AdvanceSecurityEventOperationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AdvanceSecurityEventOperationsResponse) String() string {
	return tea.Prettify(s)
}

func (s AdvanceSecurityEventOperationsResponse) GoString() string {
	return s.String()
}

func (s *AdvanceSecurityEventOperationsResponse) SetHeaders(v map[string]*string) *AdvanceSecurityEventOperationsResponse {
	s.Headers = v
	return s
}

func (s *AdvanceSecurityEventOperationsResponse) SetStatusCode(v int32) *AdvanceSecurityEventOperationsResponse {
	s.StatusCode = &v
	return s
}

func (s *AdvanceSecurityEventOperationsResponse) SetBody(v *AdvanceSecurityEventOperationsResponseBody) *AdvanceSecurityEventOperationsResponse {
	s.Body = v
	return s
}

type BatchOperateCommonOverallConfigRequest struct {
	Config   *string   `json:"Config,omitempty" xml:"Config,omitempty"`
	TypeList []*string `json:"TypeList,omitempty" xml:"TypeList,omitempty" type:"Repeated"`
}

func (s BatchOperateCommonOverallConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchOperateCommonOverallConfigRequest) GoString() string {
	return s.String()
}

func (s *BatchOperateCommonOverallConfigRequest) SetConfig(v string) *BatchOperateCommonOverallConfigRequest {
	s.Config = &v
	return s
}

func (s *BatchOperateCommonOverallConfigRequest) SetTypeList(v []*string) *BatchOperateCommonOverallConfigRequest {
	s.TypeList = v
	return s
}

type BatchOperateCommonOverallConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchOperateCommonOverallConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchOperateCommonOverallConfigResponseBody) GoString() string {
	return s.String()
}

func (s *BatchOperateCommonOverallConfigResponseBody) SetRequestId(v string) *BatchOperateCommonOverallConfigResponseBody {
	s.RequestId = &v
	return s
}

type BatchOperateCommonOverallConfigResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *BatchOperateCommonOverallConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchOperateCommonOverallConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchOperateCommonOverallConfigResponse) GoString() string {
	return s.String()
}

func (s *BatchOperateCommonOverallConfigResponse) SetHeaders(v map[string]*string) *BatchOperateCommonOverallConfigResponse {
	s.Headers = v
	return s
}

func (s *BatchOperateCommonOverallConfigResponse) SetStatusCode(v int32) *BatchOperateCommonOverallConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchOperateCommonOverallConfigResponse) SetBody(v *BatchOperateCommonOverallConfigResponseBody) *BatchOperateCommonOverallConfigResponse {
	s.Body = v
	return s
}

type BindAuthToMachineRequest struct {
	// The edition of Security Center. Valid values:
	//
	// *   **6**: Anti-virus edition
	// *   **5**: Advanced edition
	// *   **3**: Enterprise edition
	// *   **7**: Ultimate edition
	// *   **10**: Value-added Plan edition
	AuthVersion *int32 `json:"AuthVersion,omitempty" xml:"AuthVersion,omitempty"`
	// Specifies whether to automatically bind servers to Security Center. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	AutoBind *int32 `json:"AutoBind,omitempty" xml:"AutoBind,omitempty"`
	// The UUIDs of the servers that you want to bind to Security Center.
	//
	// >  You must specify at least one of the **Bind** and **UnBind** parameters.
	Bind []*string `json:"Bind,omitempty" xml:"Bind,omitempty" type:"Repeated"`
	// Specifies whether to bind all servers to Security Center. Default value: **false**. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	BindAll *bool `json:"BindAll,omitempty" xml:"BindAll,omitempty"`
	// The search conditions that are used to filter servers. The value of this parameter is in the JSON format and is case-sensitive.
	//
	// >  A search condition can be an instance ID, instance name, virtual private cloud (VPC) ID, region, or public IP address. You can call the [DescribeCriteria](~~DescribeCriteria~~) operation to query the supported search conditions.
	Criteria *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	// The logical relationship among multiple search conditions. Valid values:
	//
	// *   **OR**: Search conditions are evaluated by using a logical **OR**.
	// *   **AND**: Search conditions are evaluated by using a logical **AND**.
	LogicalExp *string `json:"LogicalExp,omitempty" xml:"LogicalExp,omitempty"`
	// The UUIDs of the servers that you want to unbind from Security Center.
	//
	// >  You must specify at least one of the **Bind** and **UnBind** parameters.
	UnBind []*string `json:"UnBind,omitempty" xml:"UnBind,omitempty" type:"Repeated"`
}

func (s BindAuthToMachineRequest) String() string {
	return tea.Prettify(s)
}

func (s BindAuthToMachineRequest) GoString() string {
	return s.String()
}

func (s *BindAuthToMachineRequest) SetAuthVersion(v int32) *BindAuthToMachineRequest {
	s.AuthVersion = &v
	return s
}

func (s *BindAuthToMachineRequest) SetAutoBind(v int32) *BindAuthToMachineRequest {
	s.AutoBind = &v
	return s
}

func (s *BindAuthToMachineRequest) SetBind(v []*string) *BindAuthToMachineRequest {
	s.Bind = v
	return s
}

func (s *BindAuthToMachineRequest) SetBindAll(v bool) *BindAuthToMachineRequest {
	s.BindAll = &v
	return s
}

func (s *BindAuthToMachineRequest) SetCriteria(v string) *BindAuthToMachineRequest {
	s.Criteria = &v
	return s
}

func (s *BindAuthToMachineRequest) SetLogicalExp(v string) *BindAuthToMachineRequest {
	s.LogicalExp = &v
	return s
}

func (s *BindAuthToMachineRequest) SetUnBind(v []*string) *BindAuthToMachineRequest {
	s.UnBind = v
	return s
}

type BindAuthToMachineResponseBody struct {
	// The number of bound servers.
	BindCount *int32 `json:"BindCount,omitempty" xml:"BindCount,omitempty"`
	// The shortage in the quota for cores of servers that can be protected.
	InsufficientCoreCount *int32 `json:"InsufficientCoreCount,omitempty" xml:"InsufficientCoreCount,omitempty"`
	// The shortage in the quota for servers that can be protected.
	InsufficientEcsCount *int32 `json:"InsufficientEcsCount,omitempty" xml:"InsufficientEcsCount,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status code that indicates the result. Valid values:
	//
	// *   **0**: The servers are bound to or unbound from Security Center.
	// *   **1**: The values that you specified for the parameters are invalid.
	// *   **2**: The quota for servers that can be protected is insufficient.
	// *   **3**: The quota for cores of servers that can be protected is insufficient.
	ResultCode *int32 `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	// The number of unbound servers.
	UnBindCount *int32 `json:"UnBindCount,omitempty" xml:"UnBindCount,omitempty"`
}

func (s BindAuthToMachineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindAuthToMachineResponseBody) GoString() string {
	return s.String()
}

func (s *BindAuthToMachineResponseBody) SetBindCount(v int32) *BindAuthToMachineResponseBody {
	s.BindCount = &v
	return s
}

func (s *BindAuthToMachineResponseBody) SetInsufficientCoreCount(v int32) *BindAuthToMachineResponseBody {
	s.InsufficientCoreCount = &v
	return s
}

func (s *BindAuthToMachineResponseBody) SetInsufficientEcsCount(v int32) *BindAuthToMachineResponseBody {
	s.InsufficientEcsCount = &v
	return s
}

func (s *BindAuthToMachineResponseBody) SetRequestId(v string) *BindAuthToMachineResponseBody {
	s.RequestId = &v
	return s
}

func (s *BindAuthToMachineResponseBody) SetResultCode(v int32) *BindAuthToMachineResponseBody {
	s.ResultCode = &v
	return s
}

func (s *BindAuthToMachineResponseBody) SetUnBindCount(v int32) *BindAuthToMachineResponseBody {
	s.UnBindCount = &v
	return s
}

type BindAuthToMachineResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *BindAuthToMachineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindAuthToMachineResponse) String() string {
	return tea.Prettify(s)
}

func (s BindAuthToMachineResponse) GoString() string {
	return s.String()
}

func (s *BindAuthToMachineResponse) SetHeaders(v map[string]*string) *BindAuthToMachineResponse {
	s.Headers = v
	return s
}

func (s *BindAuthToMachineResponse) SetStatusCode(v int32) *BindAuthToMachineResponse {
	s.StatusCode = &v
	return s
}

func (s *BindAuthToMachineResponse) SetBody(v *BindAuthToMachineResponseBody) *BindAuthToMachineResponse {
	s.Body = v
	return s
}

type CancelOnceTaskRequest struct {
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CancelOnceTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelOnceTaskRequest) GoString() string {
	return s.String()
}

func (s *CancelOnceTaskRequest) SetTaskId(v string) *CancelOnceTaskRequest {
	s.TaskId = &v
	return s
}

type CancelOnceTaskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelOnceTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelOnceTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CancelOnceTaskResponseBody) SetRequestId(v string) *CancelOnceTaskResponseBody {
	s.RequestId = &v
	return s
}

type CancelOnceTaskResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CancelOnceTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelOnceTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelOnceTaskResponse) GoString() string {
	return s.String()
}

func (s *CancelOnceTaskResponse) SetHeaders(v map[string]*string) *CancelOnceTaskResponse {
	s.Headers = v
	return s
}

func (s *CancelOnceTaskResponse) SetStatusCode(v int32) *CancelOnceTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelOnceTaskResponse) SetBody(v *CancelOnceTaskResponseBody) *CancelOnceTaskResponse {
	s.Body = v
	return s
}

type ChangeCheckConfigRequest struct {
	CycleDays   []*int32 `json:"CycleDays,omitempty" xml:"CycleDays,omitempty" type:"Repeated"`
	EndTime     *int32   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StandardIds []*int64 `json:"StandardIds,omitempty" xml:"StandardIds,omitempty" type:"Repeated"`
	StartTime   *int32   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ChangeCheckConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ChangeCheckConfigRequest) GoString() string {
	return s.String()
}

func (s *ChangeCheckConfigRequest) SetCycleDays(v []*int32) *ChangeCheckConfigRequest {
	s.CycleDays = v
	return s
}

func (s *ChangeCheckConfigRequest) SetEndTime(v int32) *ChangeCheckConfigRequest {
	s.EndTime = &v
	return s
}

func (s *ChangeCheckConfigRequest) SetStandardIds(v []*int64) *ChangeCheckConfigRequest {
	s.StandardIds = v
	return s
}

func (s *ChangeCheckConfigRequest) SetStartTime(v int32) *ChangeCheckConfigRequest {
	s.StartTime = &v
	return s
}

type ChangeCheckConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ChangeCheckConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ChangeCheckConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ChangeCheckConfigResponseBody) SetRequestId(v string) *ChangeCheckConfigResponseBody {
	s.RequestId = &v
	return s
}

type ChangeCheckConfigResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ChangeCheckConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ChangeCheckConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ChangeCheckConfigResponse) GoString() string {
	return s.String()
}

func (s *ChangeCheckConfigResponse) SetHeaders(v map[string]*string) *ChangeCheckConfigResponse {
	s.Headers = v
	return s
}

func (s *ChangeCheckConfigResponse) SetStatusCode(v int32) *ChangeCheckConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ChangeCheckConfigResponse) SetBody(v *ChangeCheckConfigResponseBody) *ChangeCheckConfigResponse {
	s.Body = v
	return s
}

type CheckQuaraFileIdRequest struct {
	// The IDs of quarantined files that you want to check.
	//
	// >  You can call the [DescribeSuspEventQuaraFiles](~~DescribeSuspEventQuaraFiles~~) operation to query the IDs of quarantined files.
	QuaraFileIds []*string `json:"QuaraFileIds,omitempty" xml:"QuaraFileIds,omitempty" type:"Repeated"`
	// The UUID of the server on which you want to check quarantined files.
	//
	// >  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s CheckQuaraFileIdRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckQuaraFileIdRequest) GoString() string {
	return s.String()
}

func (s *CheckQuaraFileIdRequest) SetQuaraFileIds(v []*string) *CheckQuaraFileIdRequest {
	s.QuaraFileIds = v
	return s
}

func (s *CheckQuaraFileIdRequest) SetUuid(v string) *CheckQuaraFileIdRequest {
	s.Uuid = &v
	return s
}

type CheckQuaraFileIdResponseBody struct {
	// Indicates whether the ID of the quarantined file is valid. Valid values:
	//
	// *   **true**: The ID of the quarantined file is valid.
	// *   **false**: The ID of the quarantined file is invalid.
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckQuaraFileIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckQuaraFileIdResponseBody) GoString() string {
	return s.String()
}

func (s *CheckQuaraFileIdResponseBody) SetData(v bool) *CheckQuaraFileIdResponseBody {
	s.Data = &v
	return s
}

func (s *CheckQuaraFileIdResponseBody) SetRequestId(v string) *CheckQuaraFileIdResponseBody {
	s.RequestId = &v
	return s
}

type CheckQuaraFileIdResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CheckQuaraFileIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckQuaraFileIdResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckQuaraFileIdResponse) GoString() string {
	return s.String()
}

func (s *CheckQuaraFileIdResponse) SetHeaders(v map[string]*string) *CheckQuaraFileIdResponse {
	s.Headers = v
	return s
}

func (s *CheckQuaraFileIdResponse) SetStatusCode(v int32) *CheckQuaraFileIdResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckQuaraFileIdResponse) SetBody(v *CheckQuaraFileIdResponseBody) *CheckQuaraFileIdResponse {
	s.Body = v
	return s
}

type CheckSecurityEventIdRequest struct {
	// The IDs of alert events. You can specify up to 100 IDs. If you do not specify this parameter, the value of the response parameter **Data** is **false**. The value false indicates that no alert events are generated on the server.
	//
	// >  You can call the [DescribeAlarmEventList](~~DescribeAlarmEventList~~) operation to query the IDs of alert events.
	SecurityEventIds []*string `json:"SecurityEventIds,omitempty" xml:"SecurityEventIds,omitempty" type:"Repeated"`
	// The UUID of the server.
	//
	// >  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s CheckSecurityEventIdRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckSecurityEventIdRequest) GoString() string {
	return s.String()
}

func (s *CheckSecurityEventIdRequest) SetSecurityEventIds(v []*string) *CheckSecurityEventIdRequest {
	s.SecurityEventIds = v
	return s
}

func (s *CheckSecurityEventIdRequest) SetUuid(v string) *CheckSecurityEventIdRequest {
	s.Uuid = &v
	return s
}

type CheckSecurityEventIdResponseBody struct {
	// Indicates whether the alert events are generated on the server. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckSecurityEventIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckSecurityEventIdResponseBody) GoString() string {
	return s.String()
}

func (s *CheckSecurityEventIdResponseBody) SetData(v bool) *CheckSecurityEventIdResponseBody {
	s.Data = &v
	return s
}

func (s *CheckSecurityEventIdResponseBody) SetRequestId(v string) *CheckSecurityEventIdResponseBody {
	s.RequestId = &v
	return s
}

type CheckSecurityEventIdResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CheckSecurityEventIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckSecurityEventIdResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckSecurityEventIdResponse) GoString() string {
	return s.String()
}

func (s *CheckSecurityEventIdResponse) SetHeaders(v map[string]*string) *CheckSecurityEventIdResponse {
	s.Headers = v
	return s
}

func (s *CheckSecurityEventIdResponse) SetStatusCode(v int32) *CheckSecurityEventIdResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckSecurityEventIdResponse) SetBody(v *CheckSecurityEventIdResponseBody) *CheckSecurityEventIdResponse {
	s.Body = v
	return s
}

type CheckUserHasEcsRequest struct {
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s CheckUserHasEcsRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckUserHasEcsRequest) GoString() string {
	return s.String()
}

func (s *CheckUserHasEcsRequest) SetLang(v string) *CheckUserHasEcsRequest {
	s.Lang = &v
	return s
}

type CheckUserHasEcsResponseBody struct {
	// The status code returned. The status code **200** indicates that the request is successful. Other status codes indicate that the request fails. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether ECS instances exist. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the request. Valid values:
	//
	// *   **true**: The request is successful.
	// *   **false**: The request fails.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CheckUserHasEcsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckUserHasEcsResponseBody) GoString() string {
	return s.String()
}

func (s *CheckUserHasEcsResponseBody) SetCode(v string) *CheckUserHasEcsResponseBody {
	s.Code = &v
	return s
}

func (s *CheckUserHasEcsResponseBody) SetData(v bool) *CheckUserHasEcsResponseBody {
	s.Data = &v
	return s
}

func (s *CheckUserHasEcsResponseBody) SetMessage(v string) *CheckUserHasEcsResponseBody {
	s.Message = &v
	return s
}

func (s *CheckUserHasEcsResponseBody) SetRequestId(v string) *CheckUserHasEcsResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckUserHasEcsResponseBody) SetSuccess(v bool) *CheckUserHasEcsResponseBody {
	s.Success = &v
	return s
}

type CheckUserHasEcsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CheckUserHasEcsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckUserHasEcsResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckUserHasEcsResponse) GoString() string {
	return s.String()
}

func (s *CheckUserHasEcsResponse) SetHeaders(v map[string]*string) *CheckUserHasEcsResponse {
	s.Headers = v
	return s
}

func (s *CheckUserHasEcsResponse) SetStatusCode(v int32) *CheckUserHasEcsResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckUserHasEcsResponse) SetBody(v *CheckUserHasEcsResponseBody) *CheckUserHasEcsResponse {
	s.Body = v
	return s
}

type ConfirmVirusEventsRequest struct {
	OperationAll   *int32  `json:"OperationAll,omitempty" xml:"OperationAll,omitempty"`
	OperationCode  *string `json:"OperationCode,omitempty" xml:"OperationCode,omitempty"`
	OperationRange *string `json:"OperationRange,omitempty" xml:"OperationRange,omitempty"`
}

func (s ConfirmVirusEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmVirusEventsRequest) GoString() string {
	return s.String()
}

func (s *ConfirmVirusEventsRequest) SetOperationAll(v int32) *ConfirmVirusEventsRequest {
	s.OperationAll = &v
	return s
}

func (s *ConfirmVirusEventsRequest) SetOperationCode(v string) *ConfirmVirusEventsRequest {
	s.OperationCode = &v
	return s
}

func (s *ConfirmVirusEventsRequest) SetOperationRange(v string) *ConfirmVirusEventsRequest {
	s.OperationRange = &v
	return s
}

type ConfirmVirusEventsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ConfirmVirusEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfirmVirusEventsResponseBody) GoString() string {
	return s.String()
}

func (s *ConfirmVirusEventsResponseBody) SetRequestId(v string) *ConfirmVirusEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfirmVirusEventsResponseBody) SetResult(v bool) *ConfirmVirusEventsResponseBody {
	s.Result = &v
	return s
}

type ConfirmVirusEventsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfirmVirusEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfirmVirusEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmVirusEventsResponse) GoString() string {
	return s.String()
}

func (s *ConfirmVirusEventsResponse) SetHeaders(v map[string]*string) *ConfirmVirusEventsResponse {
	s.Headers = v
	return s
}

func (s *ConfirmVirusEventsResponse) SetStatusCode(v int32) *ConfirmVirusEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfirmVirusEventsResponse) SetBody(v *ConfirmVirusEventsResponseBody) *ConfirmVirusEventsResponse {
	s.Body = v
	return s
}

type CreateAntiBruteForceRuleRequest struct {
	// Specifies whether to set the defense rule as the default rule. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	//
	// >  If no defense rule is created for a server, the default rule is applied to the server.
	DefaultRule *bool `json:"DefaultRule,omitempty" xml:"DefaultRule,omitempty"`
	// The maximum number of failed logon attempts from an account. Valid values: 2, 3, 4, 5, 10, 50, 80, and 100.
	FailCount *int32 `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	// The period of time during which logons from an account are not allowed. Unit: minutes. Valid values:
	//
	// *   **5**: 5 minutes
	// *   **15**: 15 minutes
	// *   **30**: 30 minutes
	// *   **60**: 1 hour
	// *   **120**: 2 hours
	// *   **360**: 6 hours
	// *   **720**: 12 hours
	// *   **1440**: 24 hours
	// *   **10080**: 7 days
	// *   **52560000**: permanent
	ForbiddenTime *int32 `json:"ForbiddenTime,omitempty" xml:"ForbiddenTime,omitempty"`
	// The name of the defense rule.
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The maximum period of time during which failed logon attempts from an account can occur. Unit: minutes. Valid values:
	//
	// *   **1**
	// *   **2**
	// *   **5**
	// *   **10**
	// *   **15**
	//
	// >  To configure a defense rule, you must specify the Span, FailCount, and ForbiddenTime parameters. If the number of failed logon attempts from an account within the minutes specified by Span exceeds the value specified by FailCount, the account cannot be used for logons within the minutes specified by ForbiddenTime.
	Span *int32 `json:"Span,omitempty" xml:"Span,omitempty"`
	// The UUIDs of the servers to which you want to apply the defense rule.
	UuidList []*string `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s CreateAntiBruteForceRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAntiBruteForceRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateAntiBruteForceRuleRequest) SetDefaultRule(v bool) *CreateAntiBruteForceRuleRequest {
	s.DefaultRule = &v
	return s
}

func (s *CreateAntiBruteForceRuleRequest) SetFailCount(v int32) *CreateAntiBruteForceRuleRequest {
	s.FailCount = &v
	return s
}

func (s *CreateAntiBruteForceRuleRequest) SetForbiddenTime(v int32) *CreateAntiBruteForceRuleRequest {
	s.ForbiddenTime = &v
	return s
}

func (s *CreateAntiBruteForceRuleRequest) SetName(v string) *CreateAntiBruteForceRuleRequest {
	s.Name = &v
	return s
}

func (s *CreateAntiBruteForceRuleRequest) SetResourceOwnerId(v int64) *CreateAntiBruteForceRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateAntiBruteForceRuleRequest) SetSourceIp(v string) *CreateAntiBruteForceRuleRequest {
	s.SourceIp = &v
	return s
}

func (s *CreateAntiBruteForceRuleRequest) SetSpan(v int32) *CreateAntiBruteForceRuleRequest {
	s.Span = &v
	return s
}

func (s *CreateAntiBruteForceRuleRequest) SetUuidList(v []*string) *CreateAntiBruteForceRuleRequest {
	s.UuidList = v
	return s
}

type CreateAntiBruteForceRuleResponseBody struct {
	// The information about the defense rule.
	CreateAntiBruteForceRule *CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule `json:"CreateAntiBruteForceRule,omitempty" xml:"CreateAntiBruteForceRule,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAntiBruteForceRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAntiBruteForceRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAntiBruteForceRuleResponseBody) SetCreateAntiBruteForceRule(v *CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule) *CreateAntiBruteForceRuleResponseBody {
	s.CreateAntiBruteForceRule = v
	return s
}

func (s *CreateAntiBruteForceRuleResponseBody) SetRequestId(v string) *CreateAntiBruteForceRuleResponseBody {
	s.RequestId = &v
	return s
}

type CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule struct {
	// The ID of the defense rule.
	RuleId *int64 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule) String() string {
	return tea.Prettify(s)
}

func (s CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule) GoString() string {
	return s.String()
}

func (s *CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule) SetRuleId(v int64) *CreateAntiBruteForceRuleResponseBodyCreateAntiBruteForceRule {
	s.RuleId = &v
	return s
}

type CreateAntiBruteForceRuleResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateAntiBruteForceRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateAntiBruteForceRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAntiBruteForceRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateAntiBruteForceRuleResponse) SetHeaders(v map[string]*string) *CreateAntiBruteForceRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateAntiBruteForceRuleResponse) SetStatusCode(v int32) *CreateAntiBruteForceRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAntiBruteForceRuleResponse) SetBody(v *CreateAntiBruteForceRuleResponseBody) *CreateAntiBruteForceRuleResponse {
	s.Body = v
	return s
}

type CreateBackupPolicyRequest struct {
	// The name of the anti-ransomware policy.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// *   **IsDefault**: the type of the anti-ransomware policy. Valid values:
	//
	//     *   **1**: recommended policy
	//     *   **0**: custom policy
	//
	// *   **Include**: the format of the files that you want to protect. If you want to protect the files in all formats, set this field to \[].
	//
	// *   **Source**: the directory that you want to protect. If you want to protect all directories, set this field to \[].
	//
	// *   **ExcludeSystemPath**: specifies whether to exclude a specific directory from the anti-ransomware policy. If you want to exclude a directory, set this field to **true**. If you do not want to exclude a directory, leave this field empty.
	//
	// *   **Exclude**: the directory that you want to exclude from the anti-ransomware policy. If you do not want to exclude a directory, set this field to \[].
	//
	// *   **Schedule**: the start time and interval of a data backup task. We recommend that you specify a start time that begins during off-peak hours but does not start on the hour. Examples:
	//
	//     *   If you set this field to I|1583216092|P21D, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of three weeks.
	//     *   If you set this field to I|1583216092|PT24H, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of 24 hours.
	//
	// *   **Retention**: the period during which backup data is retained. Unit: days. If you set this field to 7, backup data is retained for a week. If you set this field to 365, backup data is retained for a year. If you set this field to -1, backup data is permanently retained.
	//
	// *   **SpeedLimiter**: the limit on the network bandwidth for data backup tasks. If you set this field to 0:24:30720, the maximum bandwidth for a data backup task is 30 MB/s from 00:00 to 24:00.
	//
	// *   **UseVss**: specifies whether to enable the VSS feature. The feature is available only for Windows servers. Valid values:
	//
	//     *   **true**: yes
	//     *   **false**: no
	//
	// >  The VSS feature is available only if you create the anti-ransomware policy for Windows servers. After you enable the feature, the number of backup failures due to running processes is significantly reduced. We recommend that you enable the VSS feature. After you enable the feature, the data of disks that are in the exFAT and FAT32 formats cannot be backed up.
	Policy map[string]interface{} `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The region ID of the server that is not deployed on Alibaba Cloud.
	//
	// >  We recommend that you specify the ID of the supported region that is the nearest to the location of the server. You can call the [DescribeSupportRegion](~~DescribeSupportRegion~~) operation to query the supported regions of the anti-ransomware feature.
	PolicyRegionId *string `json:"PolicyRegionId,omitempty" xml:"PolicyRegionId,omitempty"`
	// The version of the anti-ransomware policy. Set the value to **2.0.0**.
	PolicyVersion *string `json:"PolicyVersion,omitempty" xml:"PolicyVersion,omitempty"`
	// The UUIDs of the servers that you want to protect.
	UuidList []*string `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s CreateBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *CreateBackupPolicyRequest) SetName(v string) *CreateBackupPolicyRequest {
	s.Name = &v
	return s
}

func (s *CreateBackupPolicyRequest) SetPolicy(v map[string]interface{}) *CreateBackupPolicyRequest {
	s.Policy = v
	return s
}

func (s *CreateBackupPolicyRequest) SetPolicyRegionId(v string) *CreateBackupPolicyRequest {
	s.PolicyRegionId = &v
	return s
}

func (s *CreateBackupPolicyRequest) SetPolicyVersion(v string) *CreateBackupPolicyRequest {
	s.PolicyVersion = &v
	return s
}

func (s *CreateBackupPolicyRequest) SetUuidList(v []*string) *CreateBackupPolicyRequest {
	s.UuidList = v
	return s
}

type CreateBackupPolicyShrinkRequest struct {
	// The name of the anti-ransomware policy.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// *   **IsDefault**: the type of the anti-ransomware policy. Valid values:
	//
	//     *   **1**: recommended policy
	//     *   **0**: custom policy
	//
	// *   **Include**: the format of the files that you want to protect. If you want to protect the files in all formats, set this field to \[].
	//
	// *   **Source**: the directory that you want to protect. If you want to protect all directories, set this field to \[].
	//
	// *   **ExcludeSystemPath**: specifies whether to exclude a specific directory from the anti-ransomware policy. If you want to exclude a directory, set this field to **true**. If you do not want to exclude a directory, leave this field empty.
	//
	// *   **Exclude**: the directory that you want to exclude from the anti-ransomware policy. If you do not want to exclude a directory, set this field to \[].
	//
	// *   **Schedule**: the start time and interval of a data backup task. We recommend that you specify a start time that begins during off-peak hours but does not start on the hour. Examples:
	//
	//     *   If you set this field to I|1583216092|P21D, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of three weeks.
	//     *   If you set this field to I|1583216092|PT24H, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of 24 hours.
	//
	// *   **Retention**: the period during which backup data is retained. Unit: days. If you set this field to 7, backup data is retained for a week. If you set this field to 365, backup data is retained for a year. If you set this field to -1, backup data is permanently retained.
	//
	// *   **SpeedLimiter**: the limit on the network bandwidth for data backup tasks. If you set this field to 0:24:30720, the maximum bandwidth for a data backup task is 30 MB/s from 00:00 to 24:00.
	//
	// *   **UseVss**: specifies whether to enable the VSS feature. The feature is available only for Windows servers. Valid values:
	//
	//     *   **true**: yes
	//     *   **false**: no
	//
	// >  The VSS feature is available only if you create the anti-ransomware policy for Windows servers. After you enable the feature, the number of backup failures due to running processes is significantly reduced. We recommend that you enable the VSS feature. After you enable the feature, the data of disks that are in the exFAT and FAT32 formats cannot be backed up.
	PolicyShrink *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The region ID of the server that is not deployed on Alibaba Cloud.
	//
	// >  We recommend that you specify the ID of the supported region that is the nearest to the location of the server. You can call the [DescribeSupportRegion](~~DescribeSupportRegion~~) operation to query the supported regions of the anti-ransomware feature.
	PolicyRegionId *string `json:"PolicyRegionId,omitempty" xml:"PolicyRegionId,omitempty"`
	// The version of the anti-ransomware policy. Set the value to **2.0.0**.
	PolicyVersion *string `json:"PolicyVersion,omitempty" xml:"PolicyVersion,omitempty"`
	// The UUIDs of the servers that you want to protect.
	UuidList []*string `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s CreateBackupPolicyShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupPolicyShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateBackupPolicyShrinkRequest) SetName(v string) *CreateBackupPolicyShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateBackupPolicyShrinkRequest) SetPolicyShrink(v string) *CreateBackupPolicyShrinkRequest {
	s.PolicyShrink = &v
	return s
}

func (s *CreateBackupPolicyShrinkRequest) SetPolicyRegionId(v string) *CreateBackupPolicyShrinkRequest {
	s.PolicyRegionId = &v
	return s
}

func (s *CreateBackupPolicyShrinkRequest) SetPolicyVersion(v string) *CreateBackupPolicyShrinkRequest {
	s.PolicyVersion = &v
	return s
}

func (s *CreateBackupPolicyShrinkRequest) SetUuidList(v []*string) *CreateBackupPolicyShrinkRequest {
	s.UuidList = v
	return s
}

type CreateBackupPolicyResponseBody struct {
	// The information about the anti-ransomware policy.
	BackupPolicy *CreateBackupPolicyResponseBodyBackupPolicy `json:"BackupPolicy,omitempty" xml:"BackupPolicy,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateBackupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBackupPolicyResponseBody) SetBackupPolicy(v *CreateBackupPolicyResponseBodyBackupPolicy) *CreateBackupPolicyResponseBody {
	s.BackupPolicy = v
	return s
}

func (s *CreateBackupPolicyResponseBody) SetRequestId(v string) *CreateBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

type CreateBackupPolicyResponseBodyBackupPolicy struct {
	// The ID of the anti-ransomware policy.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The status of the anti-ransomware policy. Valid values:
	//
	// *   **enabled**
	// *   **disabled**
	//
	// >  After you create an anti-ransomware policy, the policy is enabled by default.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateBackupPolicyResponseBodyBackupPolicy) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupPolicyResponseBodyBackupPolicy) GoString() string {
	return s.String()
}

func (s *CreateBackupPolicyResponseBodyBackupPolicy) SetId(v string) *CreateBackupPolicyResponseBodyBackupPolicy {
	s.Id = &v
	return s
}

func (s *CreateBackupPolicyResponseBodyBackupPolicy) SetStatus(v string) *CreateBackupPolicyResponseBodyBackupPolicy {
	s.Status = &v
	return s
}

type CreateBackupPolicyResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *CreateBackupPolicyResponse) SetHeaders(v map[string]*string) *CreateBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *CreateBackupPolicyResponse) SetStatusCode(v int32) *CreateBackupPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBackupPolicyResponse) SetBody(v *CreateBackupPolicyResponseBody) *CreateBackupPolicyResponse {
	s.Body = v
	return s
}

type CreateContainerScanTaskRequest struct {
	ClusterId    *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ContainerIds *string `json:"ContainerIds,omitempty" xml:"ContainerIds,omitempty"`
	Lang         *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s CreateContainerScanTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContainerScanTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateContainerScanTaskRequest) SetClusterId(v string) *CreateContainerScanTaskRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateContainerScanTaskRequest) SetContainerIds(v string) *CreateContainerScanTaskRequest {
	s.ContainerIds = &v
	return s
}

func (s *CreateContainerScanTaskRequest) SetLang(v string) *CreateContainerScanTaskRequest {
	s.Lang = &v
	return s
}

type CreateContainerScanTaskResponseBody struct {
	Data           *CreateContainerScanTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateContainerScanTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateContainerScanTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateContainerScanTaskResponseBody) SetData(v *CreateContainerScanTaskResponseBodyData) *CreateContainerScanTaskResponseBody {
	s.Data = v
	return s
}

func (s *CreateContainerScanTaskResponseBody) SetHttpStatusCode(v int32) *CreateContainerScanTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateContainerScanTaskResponseBody) SetRequestId(v string) *CreateContainerScanTaskResponseBody {
	s.RequestId = &v
	return s
}

type CreateContainerScanTaskResponseBodyData struct {
	CanCreate   *bool   `json:"CanCreate,omitempty" xml:"CanCreate,omitempty"`
	CollectTime *int64  `json:"CollectTime,omitempty" xml:"CollectTime,omitempty"`
	ExecTime    *int64  `json:"ExecTime,omitempty" xml:"ExecTime,omitempty"`
	FinishCount *int32  `json:"FinishCount,omitempty" xml:"FinishCount,omitempty"`
	Progress    *int32  `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Result      *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TotalCount  *int32  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s CreateContainerScanTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateContainerScanTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateContainerScanTaskResponseBodyData) SetCanCreate(v bool) *CreateContainerScanTaskResponseBodyData {
	s.CanCreate = &v
	return s
}

func (s *CreateContainerScanTaskResponseBodyData) SetCollectTime(v int64) *CreateContainerScanTaskResponseBodyData {
	s.CollectTime = &v
	return s
}

func (s *CreateContainerScanTaskResponseBodyData) SetExecTime(v int64) *CreateContainerScanTaskResponseBodyData {
	s.ExecTime = &v
	return s
}

func (s *CreateContainerScanTaskResponseBodyData) SetFinishCount(v int32) *CreateContainerScanTaskResponseBodyData {
	s.FinishCount = &v
	return s
}

func (s *CreateContainerScanTaskResponseBodyData) SetProgress(v int32) *CreateContainerScanTaskResponseBodyData {
	s.Progress = &v
	return s
}

func (s *CreateContainerScanTaskResponseBodyData) SetResult(v string) *CreateContainerScanTaskResponseBodyData {
	s.Result = &v
	return s
}

func (s *CreateContainerScanTaskResponseBodyData) SetStatus(v string) *CreateContainerScanTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *CreateContainerScanTaskResponseBodyData) SetTaskId(v string) *CreateContainerScanTaskResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *CreateContainerScanTaskResponseBodyData) SetTotalCount(v int32) *CreateContainerScanTaskResponseBodyData {
	s.TotalCount = &v
	return s
}

type CreateContainerScanTaskResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateContainerScanTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateContainerScanTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContainerScanTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateContainerScanTaskResponse) SetHeaders(v map[string]*string) *CreateContainerScanTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateContainerScanTaskResponse) SetStatusCode(v int32) *CreateContainerScanTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateContainerScanTaskResponse) SetBody(v *CreateContainerScanTaskResponseBody) *CreateContainerScanTaskResponse {
	s.Body = v
	return s
}

type CreateCustomBlockRecordRequest struct {
	BlockIp         *string `json:"BlockIp,omitempty" xml:"BlockIp,omitempty"`
	Bound           *string `json:"Bound,omitempty" xml:"Bound,omitempty"`
	ExpireTime      *int64  `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Uuids           *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s CreateCustomBlockRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomBlockRecordRequest) GoString() string {
	return s.String()
}

func (s *CreateCustomBlockRecordRequest) SetBlockIp(v string) *CreateCustomBlockRecordRequest {
	s.BlockIp = &v
	return s
}

func (s *CreateCustomBlockRecordRequest) SetBound(v string) *CreateCustomBlockRecordRequest {
	s.Bound = &v
	return s
}

func (s *CreateCustomBlockRecordRequest) SetExpireTime(v int64) *CreateCustomBlockRecordRequest {
	s.ExpireTime = &v
	return s
}

func (s *CreateCustomBlockRecordRequest) SetResourceOwnerId(v int64) *CreateCustomBlockRecordRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateCustomBlockRecordRequest) SetUuids(v string) *CreateCustomBlockRecordRequest {
	s.Uuids = &v
	return s
}

type CreateCustomBlockRecordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCustomBlockRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomBlockRecordResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCustomBlockRecordResponseBody) SetRequestId(v string) *CreateCustomBlockRecordResponseBody {
	s.RequestId = &v
	return s
}

type CreateCustomBlockRecordResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateCustomBlockRecordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCustomBlockRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomBlockRecordResponse) GoString() string {
	return s.String()
}

func (s *CreateCustomBlockRecordResponse) SetHeaders(v map[string]*string) *CreateCustomBlockRecordResponse {
	s.Headers = v
	return s
}

func (s *CreateCustomBlockRecordResponse) SetStatusCode(v int32) *CreateCustomBlockRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCustomBlockRecordResponse) SetBody(v *CreateCustomBlockRecordResponseBody) *CreateCustomBlockRecordResponse {
	s.Body = v
	return s
}

type CreateCycleTaskRequest struct {
	Enable          *int32  `json:"Enable,omitempty" xml:"Enable,omitempty"`
	FirstDateStr    *int64  `json:"FirstDateStr,omitempty" xml:"FirstDateStr,omitempty"`
	IntervalPeriod  *int32  `json:"IntervalPeriod,omitempty" xml:"IntervalPeriod,omitempty"`
	Param           *string `json:"Param,omitempty" xml:"Param,omitempty"`
	PeriodUnit      *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty"`
	TargetEndTime   *int32  `json:"TargetEndTime,omitempty" xml:"TargetEndTime,omitempty"`
	TargetStartTime *int32  `json:"TargetStartTime,omitempty" xml:"TargetStartTime,omitempty"`
	TaskName        *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskType        *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s CreateCycleTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCycleTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateCycleTaskRequest) SetEnable(v int32) *CreateCycleTaskRequest {
	s.Enable = &v
	return s
}

func (s *CreateCycleTaskRequest) SetFirstDateStr(v int64) *CreateCycleTaskRequest {
	s.FirstDateStr = &v
	return s
}

func (s *CreateCycleTaskRequest) SetIntervalPeriod(v int32) *CreateCycleTaskRequest {
	s.IntervalPeriod = &v
	return s
}

func (s *CreateCycleTaskRequest) SetParam(v string) *CreateCycleTaskRequest {
	s.Param = &v
	return s
}

func (s *CreateCycleTaskRequest) SetPeriodUnit(v string) *CreateCycleTaskRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateCycleTaskRequest) SetSource(v string) *CreateCycleTaskRequest {
	s.Source = &v
	return s
}

func (s *CreateCycleTaskRequest) SetTargetEndTime(v int32) *CreateCycleTaskRequest {
	s.TargetEndTime = &v
	return s
}

func (s *CreateCycleTaskRequest) SetTargetStartTime(v int32) *CreateCycleTaskRequest {
	s.TargetStartTime = &v
	return s
}

func (s *CreateCycleTaskRequest) SetTaskName(v string) *CreateCycleTaskRequest {
	s.TaskName = &v
	return s
}

func (s *CreateCycleTaskRequest) SetTaskType(v string) *CreateCycleTaskRequest {
	s.TaskType = &v
	return s
}

type CreateCycleTaskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCycleTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCycleTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCycleTaskResponseBody) SetRequestId(v string) *CreateCycleTaskResponseBody {
	s.RequestId = &v
	return s
}

type CreateCycleTaskResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateCycleTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCycleTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCycleTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateCycleTaskResponse) SetHeaders(v map[string]*string) *CreateCycleTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateCycleTaskResponse) SetStatusCode(v int32) *CreateCycleTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCycleTaskResponse) SetBody(v *CreateCycleTaskResponseBody) *CreateCycleTaskResponse {
	s.Body = v
	return s
}

type CreateFileDetectRequest struct {
	// The identifier of the file. Only MD5 hash values are supported.
	HashKey *string `json:"HashKey,omitempty" xml:"HashKey,omitempty"`
	// The key of the file that is stored in the Object Storage Service (OSS) bucket. You can call the [CreateFileDetectUploadUrl](~~CreateFileDetectUploadUrl~~) operation to query the keys of files.
	OssKey *string `json:"OssKey,omitempty" xml:"OssKey,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The type of the file. Valid values:
	//
	// *   **0**: unknown files
	// *   **1**: binary files
	// *   **2**: webshell files
	// *   **4**: script files
	//
	// >  If you do not know the type of the file, set this parameter to 0.
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateFileDetectRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFileDetectRequest) GoString() string {
	return s.String()
}

func (s *CreateFileDetectRequest) SetHashKey(v string) *CreateFileDetectRequest {
	s.HashKey = &v
	return s
}

func (s *CreateFileDetectRequest) SetOssKey(v string) *CreateFileDetectRequest {
	s.OssKey = &v
	return s
}

func (s *CreateFileDetectRequest) SetSourceIp(v string) *CreateFileDetectRequest {
	s.SourceIp = &v
	return s
}

func (s *CreateFileDetectRequest) SetType(v int32) *CreateFileDetectRequest {
	s.Type = &v
	return s
}

type CreateFileDetectResponseBody struct {
	// The identifier of the file.
	HashKey *string `json:"HashKey,omitempty" xml:"HashKey,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFileDetectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFileDetectResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFileDetectResponseBody) SetHashKey(v string) *CreateFileDetectResponseBody {
	s.HashKey = &v
	return s
}

func (s *CreateFileDetectResponseBody) SetRequestId(v string) *CreateFileDetectResponseBody {
	s.RequestId = &v
	return s
}

type CreateFileDetectResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateFileDetectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFileDetectResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFileDetectResponse) GoString() string {
	return s.String()
}

func (s *CreateFileDetectResponse) SetHeaders(v map[string]*string) *CreateFileDetectResponse {
	s.Headers = v
	return s
}

func (s *CreateFileDetectResponse) SetStatusCode(v int32) *CreateFileDetectResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFileDetectResponse) SetBody(v *CreateFileDetectResponseBody) *CreateFileDetectResponse {
	s.Body = v
	return s
}

type CreateFileDetectUploadUrlRequest struct {
	// The hash values of files.
	//
	// >  You must specify at least one of the **HashKeyList** and **HashKeyContextList** parameters.
	HashKeyContextList []*CreateFileDetectUploadUrlRequestHashKeyContextList `json:"HashKeyContextList,omitempty" xml:"HashKeyContextList,omitempty" type:"Repeated"`
	// The identifier of the file. Only MD5 hash values are supported.
	//
	// >  You must specify at least one of the **HashKeyList** and **HashKeyContextList** parameters.
	HashKeyList []*string `json:"HashKeyList,omitempty" xml:"HashKeyList,omitempty" type:"Repeated"`
	// The type of the file. Valid values:
	//
	// *   **0**: unknown files
	// *   **1**: binary files
	// *   **2**: webshell files
	// *   **4**: script files
	//
	// >  If you do not know the type of the file, set this parameter to **0**.
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateFileDetectUploadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFileDetectUploadUrlRequest) GoString() string {
	return s.String()
}

func (s *CreateFileDetectUploadUrlRequest) SetHashKeyContextList(v []*CreateFileDetectUploadUrlRequestHashKeyContextList) *CreateFileDetectUploadUrlRequest {
	s.HashKeyContextList = v
	return s
}

func (s *CreateFileDetectUploadUrlRequest) SetHashKeyList(v []*string) *CreateFileDetectUploadUrlRequest {
	s.HashKeyList = v
	return s
}

func (s *CreateFileDetectUploadUrlRequest) SetType(v int32) *CreateFileDetectUploadUrlRequest {
	s.Type = &v
	return s
}

type CreateFileDetectUploadUrlRequestHashKeyContextList struct {
	// The size of the file. Unit: bytes.
	FileSize *int32 `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// The hash value of the file.
	HashKey *string `json:"HashKey,omitempty" xml:"HashKey,omitempty"`
}

func (s CreateFileDetectUploadUrlRequestHashKeyContextList) String() string {
	return tea.Prettify(s)
}

func (s CreateFileDetectUploadUrlRequestHashKeyContextList) GoString() string {
	return s.String()
}

func (s *CreateFileDetectUploadUrlRequestHashKeyContextList) SetFileSize(v int32) *CreateFileDetectUploadUrlRequestHashKeyContextList {
	s.FileSize = &v
	return s
}

func (s *CreateFileDetectUploadUrlRequestHashKeyContextList) SetHashKey(v string) *CreateFileDetectUploadUrlRequestHashKeyContextList {
	s.HashKey = &v
	return s
}

type CreateFileDetectUploadUrlResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array consisting of the parameters that are required to upload a file.
	UploadUrlList []*CreateFileDetectUploadUrlResponseBodyUploadUrlList `json:"UploadUrlList,omitempty" xml:"UploadUrlList,omitempty" type:"Repeated"`
}

func (s CreateFileDetectUploadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFileDetectUploadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFileDetectUploadUrlResponseBody) SetRequestId(v string) *CreateFileDetectUploadUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFileDetectUploadUrlResponseBody) SetUploadUrlList(v []*CreateFileDetectUploadUrlResponseBodyUploadUrlList) *CreateFileDetectUploadUrlResponseBody {
	s.UploadUrlList = v
	return s
}

type CreateFileDetectUploadUrlResponseBodyUploadUrlList struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The signature information.
	Context *CreateFileDetectUploadUrlResponseBodyUploadUrlListContext `json:"Context,omitempty" xml:"Context,omitempty" type:"Struct"`
	// The timestamp when the values of the parameters expire. Unit: milliseconds.
	Expire *string `json:"Expire,omitempty" xml:"Expire,omitempty"`
	// Indicates whether the file exists in the cloud. Valid values:
	//
	// *   **true**: The file exists in the cloud. You do not need to upload the file.
	// *   **false**: The file does not exist in the cloud. You must upload the file.
	FileExist *bool `json:"FileExist,omitempty" xml:"FileExist,omitempty"`
	// The identifier of the file.
	HashKey *string `json:"HashKey,omitempty" xml:"HashKey,omitempty"`
	// The internal endpoint of the URL to which the file is uploaded.
	InternalUrl *string `json:"InternalUrl,omitempty" xml:"InternalUrl,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The public endpoint of the URL to which the file is uploaded.
	PublicUrl *string `json:"PublicUrl,omitempty" xml:"PublicUrl,omitempty"`
}

func (s CreateFileDetectUploadUrlResponseBodyUploadUrlList) String() string {
	return tea.Prettify(s)
}

func (s CreateFileDetectUploadUrlResponseBodyUploadUrlList) GoString() string {
	return s.String()
}

func (s *CreateFileDetectUploadUrlResponseBodyUploadUrlList) SetCode(v string) *CreateFileDetectUploadUrlResponseBodyUploadUrlList {
	s.Code = &v
	return s
}

func (s *CreateFileDetectUploadUrlResponseBodyUploadUrlList) SetContext(v *CreateFileDetectUploadUrlResponseBodyUploadUrlListContext) *CreateFileDetectUploadUrlResponseBodyUploadUrlList {
	s.Context = v
	return s
}

func (s *CreateFileDetectUploadUrlResponseBodyUploadUrlList) SetExpire(v string) *CreateFileDetectUploadUrlResponseBodyUploadUrlList {
	s.Expire = &v
	return s
}

func (s *CreateFileDetectUploadUrlResponseBodyUploadUrlList) SetFileExist(v bool) *CreateFileDetectUploadUrlResponseBodyUploadUrlList {
	s.FileExist = &v
	return s
}

func (s *CreateFileDetectUploadUrlResponseBodyUploadUrlList) SetHashKey(v string) *CreateFileDetectUploadUrlResponseBodyUploadUrlList {
	s.HashKey = &v
	return s
}

func (s *CreateFileDetectUploadUrlResponseBodyUploadUrlList) SetInternalUrl(v string) *CreateFileDetectUploadUrlResponseBodyUploadUrlList {
	s.InternalUrl = &v
	return s
}

func (s *CreateFileDetectUploadUrlResponseBodyUploadUrlList) SetMessage(v string) *CreateFileDetectUploadUrlResponseBodyUploadUrlList {
	s.Message = &v
	return s
}

func (s *CreateFileDetectUploadUrlResponseBodyUploadUrlList) SetPublicUrl(v string) *CreateFileDetectUploadUrlResponseBodyUploadUrlList {
	s.PublicUrl = &v
	return s
}

type CreateFileDetectUploadUrlResponseBodyUploadUrlListContext struct {
	// The AccessKey ID that is used to access the OSS bucket.
	AccessId *string `json:"AccessId,omitempty" xml:"AccessId,omitempty"`
	// The key of the file that is used after the file is uploaded to the OSS bucket.
	OssKey *string `json:"OssKey,omitempty" xml:"OssKey,omitempty"`
	// The policy that poses limits on file upload. For example, the policy limits the size of the file.
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The signature that is used to upload the file.
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
}

func (s CreateFileDetectUploadUrlResponseBodyUploadUrlListContext) String() string {
	return tea.Prettify(s)
}

func (s CreateFileDetectUploadUrlResponseBodyUploadUrlListContext) GoString() string {
	return s.String()
}

func (s *CreateFileDetectUploadUrlResponseBodyUploadUrlListContext) SetAccessId(v string) *CreateFileDetectUploadUrlResponseBodyUploadUrlListContext {
	s.AccessId = &v
	return s
}

func (s *CreateFileDetectUploadUrlResponseBodyUploadUrlListContext) SetOssKey(v string) *CreateFileDetectUploadUrlResponseBodyUploadUrlListContext {
	s.OssKey = &v
	return s
}

func (s *CreateFileDetectUploadUrlResponseBodyUploadUrlListContext) SetPolicy(v string) *CreateFileDetectUploadUrlResponseBodyUploadUrlListContext {
	s.Policy = &v
	return s
}

func (s *CreateFileDetectUploadUrlResponseBodyUploadUrlListContext) SetSignature(v string) *CreateFileDetectUploadUrlResponseBodyUploadUrlListContext {
	s.Signature = &v
	return s
}

type CreateFileDetectUploadUrlResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateFileDetectUploadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFileDetectUploadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFileDetectUploadUrlResponse) GoString() string {
	return s.String()
}

func (s *CreateFileDetectUploadUrlResponse) SetHeaders(v map[string]*string) *CreateFileDetectUploadUrlResponse {
	s.Headers = v
	return s
}

func (s *CreateFileDetectUploadUrlResponse) SetStatusCode(v int32) *CreateFileDetectUploadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFileDetectUploadUrlResponse) SetBody(v *CreateFileDetectUploadUrlResponseBody) *CreateFileDetectUploadUrlResponse {
	s.Body = v
	return s
}

type CreateHoneypotRequest struct {
	// The ID of the image that is used for the honeypot.
	//
	// >  You can call the [ListAvailableHoneypot](~~ListAvailableHoneypot~~) operation to obtain the IDs of images from the **HoneypotImageId** response parameter.
	HoneypotImageId *string `json:"HoneypotImageId,omitempty" xml:"HoneypotImageId,omitempty"`
	// The name of the image that is used for the honeypot.
	//
	// >  You can call the [ListAvailableHoneypot](~~ListAvailableHoneypot~~) operation to obtain the names of images from the **HoneypotImageName** response parameter.
	HoneypotImageName *string `json:"HoneypotImageName,omitempty" xml:"HoneypotImageName,omitempty"`
	// The custom name of the honeypot.
	HoneypotName *string `json:"HoneypotName,omitempty" xml:"HoneypotName,omitempty"`
	// The custom configuration of the honeypot in the JSON format. The value contains the following fields:
	//
	// *   **trojan_git**: Git-specific Defense. Valid values:
	//
	//     *   **zip**: Git Source Code Package
	//     *   **web**: Git Directory Leak
	//     *   **close**: Disabled
	//
	// *   **trojan\_git_addr**: Git Trojan Address.
	//
	// *   **trojan_git.zip**: Git Trojan.
	//
	// *   **burp**: Burp-specific Defense. Valid values:
	//
	//     *   **open**: Enabled
	//     *   **close**: Disabled
	//
	// *   **portrait_option**: Source Tracing Configuration. Valid values:
	//
	//     *   **false**: Disable
	//     *   **true**: Enable
	Meta *string `json:"Meta,omitempty" xml:"Meta,omitempty"`
	// The ID of the management node to which you want to deploy the honeypot.
	//
	// >  You can call the [ListHoneypotNode](~~ListHoneypotNode~~) operation to obtain the IDs of management nodes.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s CreateHoneypotRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotRequest) GoString() string {
	return s.String()
}

func (s *CreateHoneypotRequest) SetHoneypotImageId(v string) *CreateHoneypotRequest {
	s.HoneypotImageId = &v
	return s
}

func (s *CreateHoneypotRequest) SetHoneypotImageName(v string) *CreateHoneypotRequest {
	s.HoneypotImageName = &v
	return s
}

func (s *CreateHoneypotRequest) SetHoneypotName(v string) *CreateHoneypotRequest {
	s.HoneypotName = &v
	return s
}

func (s *CreateHoneypotRequest) SetMeta(v string) *CreateHoneypotRequest {
	s.Meta = &v
	return s
}

func (s *CreateHoneypotRequest) SetNodeId(v string) *CreateHoneypotRequest {
	s.NodeId = &v
	return s
}

type CreateHoneypotResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was is successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the honeypot.
	Data *CreateHoneypotResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateHoneypotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHoneypotResponseBody) SetCode(v string) *CreateHoneypotResponseBody {
	s.Code = &v
	return s
}

func (s *CreateHoneypotResponseBody) SetData(v *CreateHoneypotResponseBodyData) *CreateHoneypotResponseBody {
	s.Data = v
	return s
}

func (s *CreateHoneypotResponseBody) SetHttpStatusCode(v int32) *CreateHoneypotResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateHoneypotResponseBody) SetMessage(v string) *CreateHoneypotResponseBody {
	s.Message = &v
	return s
}

func (s *CreateHoneypotResponseBody) SetRequestId(v string) *CreateHoneypotResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateHoneypotResponseBody) SetSuccess(v bool) *CreateHoneypotResponseBody {
	s.Success = &v
	return s
}

type CreateHoneypotResponseBodyData struct {
	// The name of the management node to which the honeypot is deployed.
	ControlNodeName *string `json:"ControlNodeName,omitempty" xml:"ControlNodeName,omitempty"`
	// The ID of the honeypot.
	HoneypotId *string `json:"HoneypotId,omitempty" xml:"HoneypotId,omitempty"`
	// The display name of the image that is used for the honeypot.
	HoneypotImageDisplayName *string `json:"HoneypotImageDisplayName,omitempty" xml:"HoneypotImageDisplayName,omitempty"`
	// The name of the image that is used for the honeypot.
	HoneypotImageName *string `json:"HoneypotImageName,omitempty" xml:"HoneypotImageName,omitempty"`
	// The custom name of the honeypot.
	HoneypotName *string `json:"HoneypotName,omitempty" xml:"HoneypotName,omitempty"`
	// The ID of the management node.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The ID of the custom configuration for the honeypot.
	PresetId *string `json:"PresetId,omitempty" xml:"PresetId,omitempty"`
	// The status of the honeypot.
	State []*string `json:"State,omitempty" xml:"State,omitempty" type:"Repeated"`
}

func (s CreateHoneypotResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateHoneypotResponseBodyData) SetControlNodeName(v string) *CreateHoneypotResponseBodyData {
	s.ControlNodeName = &v
	return s
}

func (s *CreateHoneypotResponseBodyData) SetHoneypotId(v string) *CreateHoneypotResponseBodyData {
	s.HoneypotId = &v
	return s
}

func (s *CreateHoneypotResponseBodyData) SetHoneypotImageDisplayName(v string) *CreateHoneypotResponseBodyData {
	s.HoneypotImageDisplayName = &v
	return s
}

func (s *CreateHoneypotResponseBodyData) SetHoneypotImageName(v string) *CreateHoneypotResponseBodyData {
	s.HoneypotImageName = &v
	return s
}

func (s *CreateHoneypotResponseBodyData) SetHoneypotName(v string) *CreateHoneypotResponseBodyData {
	s.HoneypotName = &v
	return s
}

func (s *CreateHoneypotResponseBodyData) SetNodeId(v string) *CreateHoneypotResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *CreateHoneypotResponseBodyData) SetPresetId(v string) *CreateHoneypotResponseBodyData {
	s.PresetId = &v
	return s
}

func (s *CreateHoneypotResponseBodyData) SetState(v []*string) *CreateHoneypotResponseBodyData {
	s.State = v
	return s
}

type CreateHoneypotResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateHoneypotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateHoneypotResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotResponse) GoString() string {
	return s.String()
}

func (s *CreateHoneypotResponse) SetHeaders(v map[string]*string) *CreateHoneypotResponse {
	s.Headers = v
	return s
}

func (s *CreateHoneypotResponse) SetStatusCode(v int32) *CreateHoneypotResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHoneypotResponse) SetBody(v *CreateHoneypotResponseBody) *CreateHoneypotResponse {
	s.Body = v
	return s
}

type CreateHoneypotNodeRequest struct {
	// Specifies whether to allow the honeypots to access the Internet. Valid values:
	//
	// *   **true**: allows the honeypots to access the Internet.
	// *   **false**: does not allow the honeypots to access the Internet.
	AllowHoneypotAccessInternet *bool `json:"AllowHoneypotAccessInternet,omitempty" xml:"AllowHoneypotAccessInternet,omitempty"`
	// The number of probes that you want to allocate for the management node.
	AvailableProbeNum *int32 `json:"AvailableProbeNum,omitempty" xml:"AvailableProbeNum,omitempty"`
	// The name of the management node.
	NodeName *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	// The CIDR blocks that are allowed to access the management node.
	SecurityGroupProbeIpList []*string `json:"SecurityGroupProbeIpList,omitempty" xml:"SecurityGroupProbeIpList,omitempty" type:"Repeated"`
}

func (s CreateHoneypotNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotNodeRequest) GoString() string {
	return s.String()
}

func (s *CreateHoneypotNodeRequest) SetAllowHoneypotAccessInternet(v bool) *CreateHoneypotNodeRequest {
	s.AllowHoneypotAccessInternet = &v
	return s
}

func (s *CreateHoneypotNodeRequest) SetAvailableProbeNum(v int32) *CreateHoneypotNodeRequest {
	s.AvailableProbeNum = &v
	return s
}

func (s *CreateHoneypotNodeRequest) SetNodeName(v string) *CreateHoneypotNodeRequest {
	s.NodeName = &v
	return s
}

func (s *CreateHoneypotNodeRequest) SetSecurityGroupProbeIpList(v []*string) *CreateHoneypotNodeRequest {
	s.SecurityGroupProbeIpList = v
	return s
}

type CreateHoneypotNodeResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code         *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	HoneypotNode *CreateHoneypotNodeResponseBodyHoneypotNode `json:"HoneypotNode,omitempty" xml:"HoneypotNode,omitempty" type:"Struct"`
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateHoneypotNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotNodeResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHoneypotNodeResponseBody) SetCode(v string) *CreateHoneypotNodeResponseBody {
	s.Code = &v
	return s
}

func (s *CreateHoneypotNodeResponseBody) SetHoneypotNode(v *CreateHoneypotNodeResponseBodyHoneypotNode) *CreateHoneypotNodeResponseBody {
	s.HoneypotNode = v
	return s
}

func (s *CreateHoneypotNodeResponseBody) SetHttpStatusCode(v int32) *CreateHoneypotNodeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateHoneypotNodeResponseBody) SetMessage(v string) *CreateHoneypotNodeResponseBody {
	s.Message = &v
	return s
}

func (s *CreateHoneypotNodeResponseBody) SetRequestId(v string) *CreateHoneypotNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateHoneypotNodeResponseBody) SetSuccess(v bool) *CreateHoneypotNodeResponseBody {
	s.Success = &v
	return s
}

type CreateHoneypotNodeResponseBodyHoneypotNode struct {
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s CreateHoneypotNodeResponseBodyHoneypotNode) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotNodeResponseBodyHoneypotNode) GoString() string {
	return s.String()
}

func (s *CreateHoneypotNodeResponseBodyHoneypotNode) SetNodeId(v string) *CreateHoneypotNodeResponseBodyHoneypotNode {
	s.NodeId = &v
	return s
}

type CreateHoneypotNodeResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateHoneypotNodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateHoneypotNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotNodeResponse) GoString() string {
	return s.String()
}

func (s *CreateHoneypotNodeResponse) SetHeaders(v map[string]*string) *CreateHoneypotNodeResponse {
	s.Headers = v
	return s
}

func (s *CreateHoneypotNodeResponse) SetStatusCode(v int32) *CreateHoneypotNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHoneypotNodeResponse) SetBody(v *CreateHoneypotNodeResponseBody) *CreateHoneypotNodeResponse {
	s.Body = v
	return s
}

type CreateHoneypotPresetRequest struct {
	HoneypotImageName *string `json:"HoneypotImageName,omitempty" xml:"HoneypotImageName,omitempty"`
	Meta              *string `json:"Meta,omitempty" xml:"Meta,omitempty"`
	NodeId            *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	PresetName        *string `json:"PresetName,omitempty" xml:"PresetName,omitempty"`
}

func (s CreateHoneypotPresetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotPresetRequest) GoString() string {
	return s.String()
}

func (s *CreateHoneypotPresetRequest) SetHoneypotImageName(v string) *CreateHoneypotPresetRequest {
	s.HoneypotImageName = &v
	return s
}

func (s *CreateHoneypotPresetRequest) SetMeta(v string) *CreateHoneypotPresetRequest {
	s.Meta = &v
	return s
}

func (s *CreateHoneypotPresetRequest) SetNodeId(v string) *CreateHoneypotPresetRequest {
	s.NodeId = &v
	return s
}

func (s *CreateHoneypotPresetRequest) SetPresetName(v string) *CreateHoneypotPresetRequest {
	s.PresetName = &v
	return s
}

type CreateHoneypotPresetResponseBody struct {
	Code           *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	HoneypotPreset *CreateHoneypotPresetResponseBodyHoneypotPreset `json:"HoneypotPreset,omitempty" xml:"HoneypotPreset,omitempty" type:"Struct"`
	HttpStatusCode *int32                                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateHoneypotPresetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotPresetResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHoneypotPresetResponseBody) SetCode(v string) *CreateHoneypotPresetResponseBody {
	s.Code = &v
	return s
}

func (s *CreateHoneypotPresetResponseBody) SetHoneypotPreset(v *CreateHoneypotPresetResponseBodyHoneypotPreset) *CreateHoneypotPresetResponseBody {
	s.HoneypotPreset = v
	return s
}

func (s *CreateHoneypotPresetResponseBody) SetHttpStatusCode(v int32) *CreateHoneypotPresetResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateHoneypotPresetResponseBody) SetMessage(v string) *CreateHoneypotPresetResponseBody {
	s.Message = &v
	return s
}

func (s *CreateHoneypotPresetResponseBody) SetRequestId(v string) *CreateHoneypotPresetResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateHoneypotPresetResponseBody) SetSuccess(v bool) *CreateHoneypotPresetResponseBody {
	s.Success = &v
	return s
}

type CreateHoneypotPresetResponseBodyHoneypotPreset struct {
	HoneypotPresetId *string `json:"HoneypotPresetId,omitempty" xml:"HoneypotPresetId,omitempty"`
}

func (s CreateHoneypotPresetResponseBodyHoneypotPreset) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotPresetResponseBodyHoneypotPreset) GoString() string {
	return s.String()
}

func (s *CreateHoneypotPresetResponseBodyHoneypotPreset) SetHoneypotPresetId(v string) *CreateHoneypotPresetResponseBodyHoneypotPreset {
	s.HoneypotPresetId = &v
	return s
}

type CreateHoneypotPresetResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateHoneypotPresetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateHoneypotPresetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotPresetResponse) GoString() string {
	return s.String()
}

func (s *CreateHoneypotPresetResponse) SetHeaders(v map[string]*string) *CreateHoneypotPresetResponse {
	s.Headers = v
	return s
}

func (s *CreateHoneypotPresetResponse) SetStatusCode(v int32) *CreateHoneypotPresetResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHoneypotPresetResponse) SetBody(v *CreateHoneypotPresetResponseBody) *CreateHoneypotPresetResponse {
	s.Body = v
	return s
}

type CreateHoneypotProbeRequest struct {
	// Specifies whether to enable Address Resolution Protocol (ARP) spoofing. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Arp *bool `json:"Arp,omitempty" xml:"Arp,omitempty"`
	// The ID of the business group.
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	// The ID of the management node.
	//
	// >  You can call the [ListHoneypotNode](~~ListHoneypotNode~~) operation to query the IDs of management nodes.
	ControlNodeId *string `json:"ControlNodeId,omitempty" xml:"ControlNodeId,omitempty"`
	// The name of the probe.
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The honeypot configurations.
	HoneypotBindList []*CreateHoneypotProbeRequestHoneypotBindList `json:"HoneypotBindList,omitempty" xml:"HoneypotBindList,omitempty" type:"Repeated"`
	// Specifies whether to enable ping scan. Valid values:
	//
	// *   **false**: yes
	// *   **false**: no
	Ping *bool `json:"Ping,omitempty" xml:"Ping,omitempty"`
	// The type of the probe. Valid values:
	//
	// *   **host_probe**: host probe
	// *   **vpc_black_hole_probe**: virtual private cloud (VPC) probe
	ProbeType *string `json:"ProbeType,omitempty" xml:"ProbeType,omitempty"`
	// The version of the probe.
	ProbeVersion *string `json:"ProbeVersion,omitempty" xml:"ProbeVersion,omitempty"`
	// The IP address of the proxy.
	ProxyIp *string `json:"ProxyIp,omitempty" xml:"ProxyIp,omitempty"`
	// The UUID of the instance.
	//
	// >  If **ProbeType** is set to **host_probe**, this parameter is required.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The ID of the VPC.
	//
	// >  If **ProbeType** is set to **vpc_black_hole_probe**, this parameter is required. You can call the DescribeVpcHoneyPotList operation to query the IDs of VPCs.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s CreateHoneypotProbeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotProbeRequest) GoString() string {
	return s.String()
}

func (s *CreateHoneypotProbeRequest) SetArp(v bool) *CreateHoneypotProbeRequest {
	s.Arp = &v
	return s
}

func (s *CreateHoneypotProbeRequest) SetBusinessGroupId(v string) *CreateHoneypotProbeRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *CreateHoneypotProbeRequest) SetControlNodeId(v string) *CreateHoneypotProbeRequest {
	s.ControlNodeId = &v
	return s
}

func (s *CreateHoneypotProbeRequest) SetDisplayName(v string) *CreateHoneypotProbeRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateHoneypotProbeRequest) SetHoneypotBindList(v []*CreateHoneypotProbeRequestHoneypotBindList) *CreateHoneypotProbeRequest {
	s.HoneypotBindList = v
	return s
}

func (s *CreateHoneypotProbeRequest) SetPing(v bool) *CreateHoneypotProbeRequest {
	s.Ping = &v
	return s
}

func (s *CreateHoneypotProbeRequest) SetProbeType(v string) *CreateHoneypotProbeRequest {
	s.ProbeType = &v
	return s
}

func (s *CreateHoneypotProbeRequest) SetProbeVersion(v string) *CreateHoneypotProbeRequest {
	s.ProbeVersion = &v
	return s
}

func (s *CreateHoneypotProbeRequest) SetProxyIp(v string) *CreateHoneypotProbeRequest {
	s.ProxyIp = &v
	return s
}

func (s *CreateHoneypotProbeRequest) SetUuid(v string) *CreateHoneypotProbeRequest {
	s.Uuid = &v
	return s
}

func (s *CreateHoneypotProbeRequest) SetVpcId(v string) *CreateHoneypotProbeRequest {
	s.VpcId = &v
	return s
}

type CreateHoneypotProbeRequestHoneypotBindList struct {
	// The listener ports.
	BindPortList []*CreateHoneypotProbeRequestHoneypotBindListBindPortList `json:"BindPortList,omitempty" xml:"BindPortList,omitempty" type:"Repeated"`
	// The ID of the honeypot.
	//
	// >  You can call the [ListHoneypot](~~ListHoneypot~~) operation to query the IDs of honeypots.
	HoneypotId *string `json:"HoneypotId,omitempty" xml:"HoneypotId,omitempty"`
}

func (s CreateHoneypotProbeRequestHoneypotBindList) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotProbeRequestHoneypotBindList) GoString() string {
	return s.String()
}

func (s *CreateHoneypotProbeRequestHoneypotBindList) SetBindPortList(v []*CreateHoneypotProbeRequestHoneypotBindListBindPortList) *CreateHoneypotProbeRequestHoneypotBindList {
	s.BindPortList = v
	return s
}

func (s *CreateHoneypotProbeRequestHoneypotBindList) SetHoneypotId(v string) *CreateHoneypotProbeRequestHoneypotBindList {
	s.HoneypotId = &v
	return s
}

type CreateHoneypotProbeRequestHoneypotBindListBindPortList struct {
	// Specifies whether to bind a port. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	BindPort *bool `json:"BindPort,omitempty" xml:"BindPort,omitempty"`
	// The end of the port range.
	EndPort *int32 `json:"EndPort,omitempty" xml:"EndPort,omitempty"`
	// Specifies whether the port is fixed. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	Fixed *bool `json:"Fixed,omitempty" xml:"Fixed,omitempty"`
	// The start of the port range.
	StartPort *int32 `json:"StartPort,omitempty" xml:"StartPort,omitempty"`
	// The destination port.
	//
	// >  If **HoneypotId** is specified, this parameter is required.
	TargetPort *int32 `json:"TargetPort,omitempty" xml:"TargetPort,omitempty"`
}

func (s CreateHoneypotProbeRequestHoneypotBindListBindPortList) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotProbeRequestHoneypotBindListBindPortList) GoString() string {
	return s.String()
}

func (s *CreateHoneypotProbeRequestHoneypotBindListBindPortList) SetBindPort(v bool) *CreateHoneypotProbeRequestHoneypotBindListBindPortList {
	s.BindPort = &v
	return s
}

func (s *CreateHoneypotProbeRequestHoneypotBindListBindPortList) SetEndPort(v int32) *CreateHoneypotProbeRequestHoneypotBindListBindPortList {
	s.EndPort = &v
	return s
}

func (s *CreateHoneypotProbeRequestHoneypotBindListBindPortList) SetFixed(v bool) *CreateHoneypotProbeRequestHoneypotBindListBindPortList {
	s.Fixed = &v
	return s
}

func (s *CreateHoneypotProbeRequestHoneypotBindListBindPortList) SetStartPort(v int32) *CreateHoneypotProbeRequestHoneypotBindListBindPortList {
	s.StartPort = &v
	return s
}

func (s *CreateHoneypotProbeRequestHoneypotBindListBindPortList) SetTargetPort(v int32) *CreateHoneypotProbeRequestHoneypotBindListBindPortList {
	s.TargetPort = &v
	return s
}

type CreateHoneypotProbeResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code          *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	HoneypotProbe *CreateHoneypotProbeResponseBodyHoneypotProbe `json:"HoneypotProbe,omitempty" xml:"HoneypotProbe,omitempty" type:"Struct"`
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateHoneypotProbeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotProbeResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHoneypotProbeResponseBody) SetCode(v string) *CreateHoneypotProbeResponseBody {
	s.Code = &v
	return s
}

func (s *CreateHoneypotProbeResponseBody) SetHoneypotProbe(v *CreateHoneypotProbeResponseBodyHoneypotProbe) *CreateHoneypotProbeResponseBody {
	s.HoneypotProbe = v
	return s
}

func (s *CreateHoneypotProbeResponseBody) SetHttpStatusCode(v int32) *CreateHoneypotProbeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateHoneypotProbeResponseBody) SetMessage(v string) *CreateHoneypotProbeResponseBody {
	s.Message = &v
	return s
}

func (s *CreateHoneypotProbeResponseBody) SetRequestId(v string) *CreateHoneypotProbeResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateHoneypotProbeResponseBody) SetSuccess(v bool) *CreateHoneypotProbeResponseBody {
	s.Success = &v
	return s
}

type CreateHoneypotProbeResponseBodyHoneypotProbe struct {
	ProbeId *string `json:"ProbeId,omitempty" xml:"ProbeId,omitempty"`
}

func (s CreateHoneypotProbeResponseBodyHoneypotProbe) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotProbeResponseBodyHoneypotProbe) GoString() string {
	return s.String()
}

func (s *CreateHoneypotProbeResponseBodyHoneypotProbe) SetProbeId(v string) *CreateHoneypotProbeResponseBodyHoneypotProbe {
	s.ProbeId = &v
	return s
}

type CreateHoneypotProbeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateHoneypotProbeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateHoneypotProbeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHoneypotProbeResponse) GoString() string {
	return s.String()
}

func (s *CreateHoneypotProbeResponse) SetHeaders(v map[string]*string) *CreateHoneypotProbeResponse {
	s.Headers = v
	return s
}

func (s *CreateHoneypotProbeResponse) SetStatusCode(v int32) *CreateHoneypotProbeResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHoneypotProbeResponse) SetBody(v *CreateHoneypotProbeResponseBody) *CreateHoneypotProbeResponse {
	s.Body = v
	return s
}

type CreateInterceptionRuleRequest struct {
	ClusterId     *string                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName   *string                `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	DstTargetList map[string]interface{} `json:"DstTargetList,omitempty" xml:"DstTargetList,omitempty"`
	InterceptType *int64                 `json:"InterceptType,omitempty" xml:"InterceptType,omitempty"`
	OrderIndex    *int64                 `json:"OrderIndex,omitempty" xml:"OrderIndex,omitempty"`
	RuleName      *string                `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleSwitch    *int32                 `json:"RuleSwitch,omitempty" xml:"RuleSwitch,omitempty"`
	RuleType      *string                `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	SrcTarget     map[string]interface{} `json:"SrcTarget,omitempty" xml:"SrcTarget,omitempty"`
}

func (s CreateInterceptionRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInterceptionRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateInterceptionRuleRequest) SetClusterId(v string) *CreateInterceptionRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateInterceptionRuleRequest) SetClusterName(v string) *CreateInterceptionRuleRequest {
	s.ClusterName = &v
	return s
}

func (s *CreateInterceptionRuleRequest) SetDstTargetList(v map[string]interface{}) *CreateInterceptionRuleRequest {
	s.DstTargetList = v
	return s
}

func (s *CreateInterceptionRuleRequest) SetInterceptType(v int64) *CreateInterceptionRuleRequest {
	s.InterceptType = &v
	return s
}

func (s *CreateInterceptionRuleRequest) SetOrderIndex(v int64) *CreateInterceptionRuleRequest {
	s.OrderIndex = &v
	return s
}

func (s *CreateInterceptionRuleRequest) SetRuleName(v string) *CreateInterceptionRuleRequest {
	s.RuleName = &v
	return s
}

func (s *CreateInterceptionRuleRequest) SetRuleSwitch(v int32) *CreateInterceptionRuleRequest {
	s.RuleSwitch = &v
	return s
}

func (s *CreateInterceptionRuleRequest) SetRuleType(v string) *CreateInterceptionRuleRequest {
	s.RuleType = &v
	return s
}

func (s *CreateInterceptionRuleRequest) SetSrcTarget(v map[string]interface{}) *CreateInterceptionRuleRequest {
	s.SrcTarget = v
	return s
}

type CreateInterceptionRuleShrinkRequest struct {
	ClusterId           *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName         *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	DstTargetListShrink *string `json:"DstTargetList,omitempty" xml:"DstTargetList,omitempty"`
	InterceptType       *int64  `json:"InterceptType,omitempty" xml:"InterceptType,omitempty"`
	OrderIndex          *int64  `json:"OrderIndex,omitempty" xml:"OrderIndex,omitempty"`
	RuleName            *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleSwitch          *int32  `json:"RuleSwitch,omitempty" xml:"RuleSwitch,omitempty"`
	RuleType            *string `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	SrcTargetShrink     *string `json:"SrcTarget,omitempty" xml:"SrcTarget,omitempty"`
}

func (s CreateInterceptionRuleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInterceptionRuleShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateInterceptionRuleShrinkRequest) SetClusterId(v string) *CreateInterceptionRuleShrinkRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateInterceptionRuleShrinkRequest) SetClusterName(v string) *CreateInterceptionRuleShrinkRequest {
	s.ClusterName = &v
	return s
}

func (s *CreateInterceptionRuleShrinkRequest) SetDstTargetListShrink(v string) *CreateInterceptionRuleShrinkRequest {
	s.DstTargetListShrink = &v
	return s
}

func (s *CreateInterceptionRuleShrinkRequest) SetInterceptType(v int64) *CreateInterceptionRuleShrinkRequest {
	s.InterceptType = &v
	return s
}

func (s *CreateInterceptionRuleShrinkRequest) SetOrderIndex(v int64) *CreateInterceptionRuleShrinkRequest {
	s.OrderIndex = &v
	return s
}

func (s *CreateInterceptionRuleShrinkRequest) SetRuleName(v string) *CreateInterceptionRuleShrinkRequest {
	s.RuleName = &v
	return s
}

func (s *CreateInterceptionRuleShrinkRequest) SetRuleSwitch(v int32) *CreateInterceptionRuleShrinkRequest {
	s.RuleSwitch = &v
	return s
}

func (s *CreateInterceptionRuleShrinkRequest) SetRuleType(v string) *CreateInterceptionRuleShrinkRequest {
	s.RuleType = &v
	return s
}

func (s *CreateInterceptionRuleShrinkRequest) SetSrcTargetShrink(v string) *CreateInterceptionRuleShrinkRequest {
	s.SrcTargetShrink = &v
	return s
}

type CreateInterceptionRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateInterceptionRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInterceptionRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInterceptionRuleResponseBody) SetRequestId(v string) *CreateInterceptionRuleResponseBody {
	s.RequestId = &v
	return s
}

type CreateInterceptionRuleResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateInterceptionRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateInterceptionRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInterceptionRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateInterceptionRuleResponse) SetHeaders(v map[string]*string) *CreateInterceptionRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateInterceptionRuleResponse) SetStatusCode(v int32) *CreateInterceptionRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInterceptionRuleResponse) SetBody(v *CreateInterceptionRuleResponseBody) *CreateInterceptionRuleResponse {
	s.Body = v
	return s
}

type CreateInterceptionTargetRequest struct {
	AppName     *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ClusterId   *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName *string   `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ImageList   []*string `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	Namespace   *string   `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	TagList     []*string `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	TargetName  *string   `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	TargetType  *string   `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s CreateInterceptionTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInterceptionTargetRequest) GoString() string {
	return s.String()
}

func (s *CreateInterceptionTargetRequest) SetAppName(v string) *CreateInterceptionTargetRequest {
	s.AppName = &v
	return s
}

func (s *CreateInterceptionTargetRequest) SetClusterId(v string) *CreateInterceptionTargetRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateInterceptionTargetRequest) SetClusterName(v string) *CreateInterceptionTargetRequest {
	s.ClusterName = &v
	return s
}

func (s *CreateInterceptionTargetRequest) SetImageList(v []*string) *CreateInterceptionTargetRequest {
	s.ImageList = v
	return s
}

func (s *CreateInterceptionTargetRequest) SetNamespace(v string) *CreateInterceptionTargetRequest {
	s.Namespace = &v
	return s
}

func (s *CreateInterceptionTargetRequest) SetTagList(v []*string) *CreateInterceptionTargetRequest {
	s.TagList = v
	return s
}

func (s *CreateInterceptionTargetRequest) SetTargetName(v string) *CreateInterceptionTargetRequest {
	s.TargetName = &v
	return s
}

func (s *CreateInterceptionTargetRequest) SetTargetType(v string) *CreateInterceptionTargetRequest {
	s.TargetType = &v
	return s
}

type CreateInterceptionTargetResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateInterceptionTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInterceptionTargetResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInterceptionTargetResponseBody) SetRequestId(v string) *CreateInterceptionTargetResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateInterceptionTargetResponseBody) SetResult(v bool) *CreateInterceptionTargetResponseBody {
	s.Result = &v
	return s
}

type CreateInterceptionTargetResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateInterceptionTargetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateInterceptionTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInterceptionTargetResponse) GoString() string {
	return s.String()
}

func (s *CreateInterceptionTargetResponse) SetHeaders(v map[string]*string) *CreateInterceptionTargetResponse {
	s.Headers = v
	return s
}

func (s *CreateInterceptionTargetResponse) SetStatusCode(v int32) *CreateInterceptionTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInterceptionTargetResponse) SetBody(v *CreateInterceptionTargetResponseBody) *CreateInterceptionTargetResponse {
	s.Body = v
	return s
}

type CreateJenkinsImageRegistryRequest struct {
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	ExtraParam      *string `json:"ExtraParam,omitempty" xml:"ExtraParam,omitempty"`
	NetType         *int32  `json:"NetType,omitempty" xml:"NetType,omitempty"`
	Password        *string `json:"Password,omitempty" xml:"Password,omitempty"`
	PersistenceDay  *int32  `json:"PersistenceDay,omitempty" xml:"PersistenceDay,omitempty"`
	ProtocolType    *int32  `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegistryHostIp  *string `json:"RegistryHostIp,omitempty" xml:"RegistryHostIp,omitempty"`
	RegistryName    *string `json:"RegistryName,omitempty" xml:"RegistryName,omitempty"`
	RegistryType    *string `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
	RegistryVersion *string `json:"RegistryVersion,omitempty" xml:"RegistryVersion,omitempty"`
	SourceIp        *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	TransPerHour    *int32  `json:"TransPerHour,omitempty" xml:"TransPerHour,omitempty"`
	UserName        *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	WhiteList       *string `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s CreateJenkinsImageRegistryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJenkinsImageRegistryRequest) GoString() string {
	return s.String()
}

func (s *CreateJenkinsImageRegistryRequest) SetDomainName(v string) *CreateJenkinsImageRegistryRequest {
	s.DomainName = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetExtraParam(v string) *CreateJenkinsImageRegistryRequest {
	s.ExtraParam = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetNetType(v int32) *CreateJenkinsImageRegistryRequest {
	s.NetType = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetPassword(v string) *CreateJenkinsImageRegistryRequest {
	s.Password = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetPersistenceDay(v int32) *CreateJenkinsImageRegistryRequest {
	s.PersistenceDay = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetProtocolType(v int32) *CreateJenkinsImageRegistryRequest {
	s.ProtocolType = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetRegionId(v string) *CreateJenkinsImageRegistryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetRegistryHostIp(v string) *CreateJenkinsImageRegistryRequest {
	s.RegistryHostIp = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetRegistryName(v string) *CreateJenkinsImageRegistryRequest {
	s.RegistryName = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetRegistryType(v string) *CreateJenkinsImageRegistryRequest {
	s.RegistryType = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetRegistryVersion(v string) *CreateJenkinsImageRegistryRequest {
	s.RegistryVersion = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetSourceIp(v string) *CreateJenkinsImageRegistryRequest {
	s.SourceIp = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetTransPerHour(v int32) *CreateJenkinsImageRegistryRequest {
	s.TransPerHour = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetUserName(v string) *CreateJenkinsImageRegistryRequest {
	s.UserName = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetVpcId(v string) *CreateJenkinsImageRegistryRequest {
	s.VpcId = &v
	return s
}

func (s *CreateJenkinsImageRegistryRequest) SetWhiteList(v string) *CreateJenkinsImageRegistryRequest {
	s.WhiteList = &v
	return s
}

type CreateJenkinsImageRegistryResponseBody struct {
	Data           *CreateJenkinsImageRegistryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TimeCost       *int64                                      `json:"TimeCost,omitempty" xml:"TimeCost,omitempty"`
}

func (s CreateJenkinsImageRegistryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateJenkinsImageRegistryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateJenkinsImageRegistryResponseBody) SetData(v *CreateJenkinsImageRegistryResponseBodyData) *CreateJenkinsImageRegistryResponseBody {
	s.Data = v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBody) SetHttpStatusCode(v int32) *CreateJenkinsImageRegistryResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBody) SetRequestId(v string) *CreateJenkinsImageRegistryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBody) SetTimeCost(v int64) *CreateJenkinsImageRegistryResponseBody {
	s.TimeCost = &v
	return s
}

type CreateJenkinsImageRegistryResponseBodyData struct {
	BlackList      *string `json:"BlackList,omitempty" xml:"BlackList,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GmtCreate      *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified    *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	NetType        *int32  `json:"NetType,omitempty" xml:"NetType,omitempty"`
	Password       *string `json:"Password,omitempty" xml:"Password,omitempty"`
	PersistenceDay *int32  `json:"PersistenceDay,omitempty" xml:"PersistenceDay,omitempty"`
	ProtocolType   *int32  `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegistryHostIp *string `json:"RegistryHostIp,omitempty" xml:"RegistryHostIp,omitempty"`
	RegistryName   *string `json:"RegistryName,omitempty" xml:"RegistryName,omitempty"`
	RegistryType   *string `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
	Token          *string `json:"Token,omitempty" xml:"Token,omitempty"`
	TransPerHour   *int32  `json:"TransPerHour,omitempty" xml:"TransPerHour,omitempty"`
	UserName       *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	VpcId          *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	WhiteList      *string `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s CreateJenkinsImageRegistryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateJenkinsImageRegistryResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetBlackList(v string) *CreateJenkinsImageRegistryResponseBodyData {
	s.BlackList = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetDomainName(v string) *CreateJenkinsImageRegistryResponseBodyData {
	s.DomainName = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetGmtCreate(v string) *CreateJenkinsImageRegistryResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetGmtModified(v string) *CreateJenkinsImageRegistryResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetId(v int64) *CreateJenkinsImageRegistryResponseBodyData {
	s.Id = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetNetType(v int32) *CreateJenkinsImageRegistryResponseBodyData {
	s.NetType = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetPassword(v string) *CreateJenkinsImageRegistryResponseBodyData {
	s.Password = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetPersistenceDay(v int32) *CreateJenkinsImageRegistryResponseBodyData {
	s.PersistenceDay = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetProtocolType(v int32) *CreateJenkinsImageRegistryResponseBodyData {
	s.ProtocolType = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetRegionId(v string) *CreateJenkinsImageRegistryResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetRegistryHostIp(v string) *CreateJenkinsImageRegistryResponseBodyData {
	s.RegistryHostIp = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetRegistryName(v string) *CreateJenkinsImageRegistryResponseBodyData {
	s.RegistryName = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetRegistryType(v string) *CreateJenkinsImageRegistryResponseBodyData {
	s.RegistryType = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetToken(v string) *CreateJenkinsImageRegistryResponseBodyData {
	s.Token = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetTransPerHour(v int32) *CreateJenkinsImageRegistryResponseBodyData {
	s.TransPerHour = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetUserName(v string) *CreateJenkinsImageRegistryResponseBodyData {
	s.UserName = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetVpcId(v string) *CreateJenkinsImageRegistryResponseBodyData {
	s.VpcId = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponseBodyData) SetWhiteList(v string) *CreateJenkinsImageRegistryResponseBodyData {
	s.WhiteList = &v
	return s
}

type CreateJenkinsImageRegistryResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateJenkinsImageRegistryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateJenkinsImageRegistryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJenkinsImageRegistryResponse) GoString() string {
	return s.String()
}

func (s *CreateJenkinsImageRegistryResponse) SetHeaders(v map[string]*string) *CreateJenkinsImageRegistryResponse {
	s.Headers = v
	return s
}

func (s *CreateJenkinsImageRegistryResponse) SetStatusCode(v int32) *CreateJenkinsImageRegistryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateJenkinsImageRegistryResponse) SetBody(v *CreateJenkinsImageRegistryResponseBody) *CreateJenkinsImageRegistryResponse {
	s.Body = v
	return s
}

type CreateOrUpdateAssetGroupRequest struct {
	// The ID of the server group for which you want to add to or remove servers.
	//
	// >  To modify the mapping between an asset and an asset group, you must provide the ID of the asset group. You can call the [DescribeAllGroups](~~DescribeAllGroups~~) to query the IDs of asset groups. If you do not configure this parameter when you call this operation, an asset group is created.
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the server group that you want to create or the server group for which you want to add or remove a server.
	//
	// >  To modify the mapping between a server and a server group, you must provide the name of the server group. You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the names of server groups. If you do not configure GroupID when you call this operation, a server group is created. In this case, you must configure GroupName.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The UUID of the server in the server group that you want to create or the server group for which you want to add or remove servers. Separate multiple UUIDs with commas (,).
	//
	// >  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s CreateOrUpdateAssetGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAssetGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAssetGroupRequest) SetGroupId(v int64) *CreateOrUpdateAssetGroupRequest {
	s.GroupId = &v
	return s
}

func (s *CreateOrUpdateAssetGroupRequest) SetGroupName(v string) *CreateOrUpdateAssetGroupRequest {
	s.GroupName = &v
	return s
}

func (s *CreateOrUpdateAssetGroupRequest) SetUuids(v string) *CreateOrUpdateAssetGroupRequest {
	s.Uuids = &v
	return s
}

type CreateOrUpdateAssetGroupResponseBody struct {
	// The ID of the server group.
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateOrUpdateAssetGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAssetGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAssetGroupResponseBody) SetGroupId(v int64) *CreateOrUpdateAssetGroupResponseBody {
	s.GroupId = &v
	return s
}

func (s *CreateOrUpdateAssetGroupResponseBody) SetRequestId(v string) *CreateOrUpdateAssetGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateOrUpdateAssetGroupResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateOrUpdateAssetGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateOrUpdateAssetGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateAssetGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateAssetGroupResponse) SetHeaders(v map[string]*string) *CreateOrUpdateAssetGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateOrUpdateAssetGroupResponse) SetStatusCode(v int32) *CreateOrUpdateAssetGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrUpdateAssetGroupResponse) SetBody(v *CreateOrUpdateAssetGroupResponseBody) *CreateOrUpdateAssetGroupResponse {
	s.Body = v
	return s
}

type CreateRestoreJobRequest struct {
	Includes        *string `json:"Includes,omitempty" xml:"Includes,omitempty"`
	SnapshotHash    *string `json:"SnapshotHash,omitempty" xml:"SnapshotHash,omitempty"`
	SnapshotId      *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	SnapshotVersion *string `json:"SnapshotVersion,omitempty" xml:"SnapshotVersion,omitempty"`
	SourceType      *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Target          *string `json:"Target,omitempty" xml:"Target,omitempty"`
	Uuid            *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	VaultId         *string `json:"VaultId,omitempty" xml:"VaultId,omitempty"`
}

func (s CreateRestoreJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRestoreJobRequest) GoString() string {
	return s.String()
}

func (s *CreateRestoreJobRequest) SetIncludes(v string) *CreateRestoreJobRequest {
	s.Includes = &v
	return s
}

func (s *CreateRestoreJobRequest) SetSnapshotHash(v string) *CreateRestoreJobRequest {
	s.SnapshotHash = &v
	return s
}

func (s *CreateRestoreJobRequest) SetSnapshotId(v string) *CreateRestoreJobRequest {
	s.SnapshotId = &v
	return s
}

func (s *CreateRestoreJobRequest) SetSnapshotVersion(v string) *CreateRestoreJobRequest {
	s.SnapshotVersion = &v
	return s
}

func (s *CreateRestoreJobRequest) SetSourceType(v string) *CreateRestoreJobRequest {
	s.SourceType = &v
	return s
}

func (s *CreateRestoreJobRequest) SetTarget(v string) *CreateRestoreJobRequest {
	s.Target = &v
	return s
}

func (s *CreateRestoreJobRequest) SetUuid(v string) *CreateRestoreJobRequest {
	s.Uuid = &v
	return s
}

func (s *CreateRestoreJobRequest) SetVaultId(v string) *CreateRestoreJobRequest {
	s.VaultId = &v
	return s
}

type CreateRestoreJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateRestoreJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRestoreJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRestoreJobResponseBody) SetRequestId(v string) *CreateRestoreJobResponseBody {
	s.RequestId = &v
	return s
}

type CreateRestoreJobResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateRestoreJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateRestoreJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRestoreJobResponse) GoString() string {
	return s.String()
}

func (s *CreateRestoreJobResponse) SetHeaders(v map[string]*string) *CreateRestoreJobResponse {
	s.Headers = v
	return s
}

func (s *CreateRestoreJobResponse) SetStatusCode(v int32) *CreateRestoreJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRestoreJobResponse) SetBody(v *CreateRestoreJobResponseBody) *CreateRestoreJobResponse {
	s.Body = v
	return s
}

type CreateServiceLinkedRoleRequest struct {
	// The service-linked role. Default value: **AliyunServiceRoleForSas**. Valid values:
	//
	// *   **AliyunServiceRoleForSas**: the service-linked role of Security Center. Security Center assumes this role to access the resources of other cloud services within your account.
	// *   **AliyunServiceRoleForSasCspm**: the service-linked role of Security Center-CSPM. Security Center-CSPM assumes this role to access the resources of other cloud services within your account.
	ServiceLinkedRole *string `json:"ServiceLinkedRole,omitempty" xml:"ServiceLinkedRole,omitempty"`
}

func (s CreateServiceLinkedRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceLinkedRoleRequest) GoString() string {
	return s.String()
}

func (s *CreateServiceLinkedRoleRequest) SetServiceLinkedRole(v string) *CreateServiceLinkedRoleRequest {
	s.ServiceLinkedRole = &v
	return s
}

type CreateServiceLinkedRoleResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateServiceLinkedRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceLinkedRoleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateServiceLinkedRoleResponseBody) SetRequestId(v string) *CreateServiceLinkedRoleResponseBody {
	s.RequestId = &v
	return s
}

type CreateServiceLinkedRoleResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateServiceLinkedRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateServiceLinkedRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceLinkedRoleResponse) GoString() string {
	return s.String()
}

func (s *CreateServiceLinkedRoleResponse) SetHeaders(v map[string]*string) *CreateServiceLinkedRoleResponse {
	s.Headers = v
	return s
}

func (s *CreateServiceLinkedRoleResponse) SetStatusCode(v int32) *CreateServiceLinkedRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateServiceLinkedRoleResponse) SetBody(v *CreateServiceLinkedRoleResponseBody) *CreateServiceLinkedRoleResponse {
	s.Body = v
	return s
}

type CreateSimilarSecurityEventsQueryTaskRequest struct {
	ResourceOwnerId *int64 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The ID of the alert event.
	//
	// >  You must specify at least one of the SecurityEventId and SimilarEventScenarioCode parameters.
	SecurityEventId *int64 `json:"SecurityEventId,omitempty" xml:"SecurityEventId,omitempty"`
	// The codes of alert events that are triggered by the same rule or of the same alert type.
	//
	// >  You must specify at least one of the SecurityEventId and SimilarEventScenarioCode parameters.
	SimilarEventScenarioCode *string `json:"SimilarEventScenarioCode,omitempty" xml:"SimilarEventScenarioCode,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s CreateSimilarSecurityEventsQueryTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSimilarSecurityEventsQueryTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateSimilarSecurityEventsQueryTaskRequest) SetResourceOwnerId(v int64) *CreateSimilarSecurityEventsQueryTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSimilarSecurityEventsQueryTaskRequest) SetSecurityEventId(v int64) *CreateSimilarSecurityEventsQueryTaskRequest {
	s.SecurityEventId = &v
	return s
}

func (s *CreateSimilarSecurityEventsQueryTaskRequest) SetSimilarEventScenarioCode(v string) *CreateSimilarSecurityEventsQueryTaskRequest {
	s.SimilarEventScenarioCode = &v
	return s
}

func (s *CreateSimilarSecurityEventsQueryTaskRequest) SetSourceIp(v string) *CreateSimilarSecurityEventsQueryTaskRequest {
	s.SourceIp = &v
	return s
}

type CreateSimilarSecurityEventsQueryTaskResponseBody struct {
	// The information about the task that queries alert events of the same alert type.
	CreateSimilarSecurityEventsQueryTaskResponse *CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse `json:"CreateSimilarSecurityEventsQueryTaskResponse,omitempty" xml:"CreateSimilarSecurityEventsQueryTaskResponse,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateSimilarSecurityEventsQueryTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSimilarSecurityEventsQueryTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSimilarSecurityEventsQueryTaskResponseBody) SetCreateSimilarSecurityEventsQueryTaskResponse(v *CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse) *CreateSimilarSecurityEventsQueryTaskResponseBody {
	s.CreateSimilarSecurityEventsQueryTaskResponse = v
	return s
}

func (s *CreateSimilarSecurityEventsQueryTaskResponseBody) SetRequestId(v string) *CreateSimilarSecurityEventsQueryTaskResponseBody {
	s.RequestId = &v
	return s
}

type CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse struct {
	// The status of the task. Valid values:
	//
	// *   **New**: The task is created.
	// *   **RetrievingData**: Data is being retrieved.
	// *   **DataRetrieved**: Data is retrieved.
	// *   **Processing**: The task is running.
	// *   **Success**: The task is successful.
	// *   **Failed**: The task failed.
	// *   **PartialFailed**: The task partially failed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the task.
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse) SetStatus(v string) *CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse {
	s.Status = &v
	return s
}

func (s *CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse) SetTaskId(v int64) *CreateSimilarSecurityEventsQueryTaskResponseBodyCreateSimilarSecurityEventsQueryTaskResponse {
	s.TaskId = &v
	return s
}

type CreateSimilarSecurityEventsQueryTaskResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateSimilarSecurityEventsQueryTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSimilarSecurityEventsQueryTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSimilarSecurityEventsQueryTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateSimilarSecurityEventsQueryTaskResponse) SetHeaders(v map[string]*string) *CreateSimilarSecurityEventsQueryTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateSimilarSecurityEventsQueryTaskResponse) SetStatusCode(v int32) *CreateSimilarSecurityEventsQueryTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSimilarSecurityEventsQueryTaskResponse) SetBody(v *CreateSimilarSecurityEventsQueryTaskResponseBody) *CreateSimilarSecurityEventsQueryTaskResponse {
	s.Body = v
	return s
}

type CreateSuspEventNoteRequest struct {
	// The ID of the alert event to which you want to add remarks. You can call the [DescribeSuspEvents](~~251497~~) operation to query the IDs of alert events.
	EventId *int64 `json:"EventId,omitempty" xml:"EventId,omitempty"`
	// The remarks that you want to add.
	Note *string `json:"Note,omitempty" xml:"Note,omitempty"`
}

func (s CreateSuspEventNoteRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSuspEventNoteRequest) GoString() string {
	return s.String()
}

func (s *CreateSuspEventNoteRequest) SetEventId(v int64) *CreateSuspEventNoteRequest {
	s.EventId = &v
	return s
}

func (s *CreateSuspEventNoteRequest) SetNote(v string) *CreateSuspEventNoteRequest {
	s.Note = &v
	return s
}

type CreateSuspEventNoteResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether exceptions are handled. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateSuspEventNoteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSuspEventNoteResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSuspEventNoteResponseBody) SetCode(v string) *CreateSuspEventNoteResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSuspEventNoteResponseBody) SetHttpStatusCode(v int32) *CreateSuspEventNoteResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateSuspEventNoteResponseBody) SetMessage(v string) *CreateSuspEventNoteResponseBody {
	s.Message = &v
	return s
}

func (s *CreateSuspEventNoteResponseBody) SetRequestId(v string) *CreateSuspEventNoteResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSuspEventNoteResponseBody) SetSuccess(v bool) *CreateSuspEventNoteResponseBody {
	s.Success = &v
	return s
}

type CreateSuspEventNoteResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateSuspEventNoteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSuspEventNoteResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSuspEventNoteResponse) GoString() string {
	return s.String()
}

func (s *CreateSuspEventNoteResponse) SetHeaders(v map[string]*string) *CreateSuspEventNoteResponse {
	s.Headers = v
	return s
}

func (s *CreateSuspEventNoteResponse) SetStatusCode(v int32) *CreateSuspEventNoteResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSuspEventNoteResponse) SetBody(v *CreateSuspEventNoteResponseBody) *CreateSuspEventNoteResponse {
	s.Body = v
	return s
}

type CreateUniBackupPolicyRequest struct {
	AccountName       *string                `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	AccountPassword   *string                `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	DatabaseAddByUser *string                `json:"DatabaseAddByUser,omitempty" xml:"DatabaseAddByUser,omitempty"`
	DatabaseType      *string                `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	FullPlan          map[string]interface{} `json:"FullPlan,omitempty" xml:"FullPlan,omitempty"`
	IncPlan           map[string]interface{} `json:"IncPlan,omitempty" xml:"IncPlan,omitempty"`
	InstanceId        *string                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PolicyName        *string                `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	Retention         *int32                 `json:"Retention,omitempty" xml:"Retention,omitempty"`
	SpeedLimiter      *int64                 `json:"SpeedLimiter,omitempty" xml:"SpeedLimiter,omitempty"`
	UniRegionId       *string                `json:"UniRegionId,omitempty" xml:"UniRegionId,omitempty"`
	Uuid              *string                `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s CreateUniBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUniBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *CreateUniBackupPolicyRequest) SetAccountName(v string) *CreateUniBackupPolicyRequest {
	s.AccountName = &v
	return s
}

func (s *CreateUniBackupPolicyRequest) SetAccountPassword(v string) *CreateUniBackupPolicyRequest {
	s.AccountPassword = &v
	return s
}

func (s *CreateUniBackupPolicyRequest) SetDatabaseAddByUser(v string) *CreateUniBackupPolicyRequest {
	s.DatabaseAddByUser = &v
	return s
}

func (s *CreateUniBackupPolicyRequest) SetDatabaseType(v string) *CreateUniBackupPolicyRequest {
	s.DatabaseType = &v
	return s
}

func (s *CreateUniBackupPolicyRequest) SetFullPlan(v map[string]interface{}) *CreateUniBackupPolicyRequest {
	s.FullPlan = v
	return s
}

func (s *CreateUniBackupPolicyRequest) SetIncPlan(v map[string]interface{}) *CreateUniBackupPolicyRequest {
	s.IncPlan = v
	return s
}

func (s *CreateUniBackupPolicyRequest) SetInstanceId(v string) *CreateUniBackupPolicyRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateUniBackupPolicyRequest) SetPolicyName(v string) *CreateUniBackupPolicyRequest {
	s.PolicyName = &v
	return s
}

func (s *CreateUniBackupPolicyRequest) SetRetention(v int32) *CreateUniBackupPolicyRequest {
	s.Retention = &v
	return s
}

func (s *CreateUniBackupPolicyRequest) SetSpeedLimiter(v int64) *CreateUniBackupPolicyRequest {
	s.SpeedLimiter = &v
	return s
}

func (s *CreateUniBackupPolicyRequest) SetUniRegionId(v string) *CreateUniBackupPolicyRequest {
	s.UniRegionId = &v
	return s
}

func (s *CreateUniBackupPolicyRequest) SetUuid(v string) *CreateUniBackupPolicyRequest {
	s.Uuid = &v
	return s
}

type CreateUniBackupPolicyShrinkRequest struct {
	AccountName       *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	AccountPassword   *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	DatabaseAddByUser *string `json:"DatabaseAddByUser,omitempty" xml:"DatabaseAddByUser,omitempty"`
	DatabaseType      *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	FullPlanShrink    *string `json:"FullPlan,omitempty" xml:"FullPlan,omitempty"`
	IncPlanShrink     *string `json:"IncPlan,omitempty" xml:"IncPlan,omitempty"`
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PolicyName        *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	Retention         *int32  `json:"Retention,omitempty" xml:"Retention,omitempty"`
	SpeedLimiter      *int64  `json:"SpeedLimiter,omitempty" xml:"SpeedLimiter,omitempty"`
	UniRegionId       *string `json:"UniRegionId,omitempty" xml:"UniRegionId,omitempty"`
	Uuid              *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s CreateUniBackupPolicyShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUniBackupPolicyShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateUniBackupPolicyShrinkRequest) SetAccountName(v string) *CreateUniBackupPolicyShrinkRequest {
	s.AccountName = &v
	return s
}

func (s *CreateUniBackupPolicyShrinkRequest) SetAccountPassword(v string) *CreateUniBackupPolicyShrinkRequest {
	s.AccountPassword = &v
	return s
}

func (s *CreateUniBackupPolicyShrinkRequest) SetDatabaseAddByUser(v string) *CreateUniBackupPolicyShrinkRequest {
	s.DatabaseAddByUser = &v
	return s
}

func (s *CreateUniBackupPolicyShrinkRequest) SetDatabaseType(v string) *CreateUniBackupPolicyShrinkRequest {
	s.DatabaseType = &v
	return s
}

func (s *CreateUniBackupPolicyShrinkRequest) SetFullPlanShrink(v string) *CreateUniBackupPolicyShrinkRequest {
	s.FullPlanShrink = &v
	return s
}

func (s *CreateUniBackupPolicyShrinkRequest) SetIncPlanShrink(v string) *CreateUniBackupPolicyShrinkRequest {
	s.IncPlanShrink = &v
	return s
}

func (s *CreateUniBackupPolicyShrinkRequest) SetInstanceId(v string) *CreateUniBackupPolicyShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateUniBackupPolicyShrinkRequest) SetPolicyName(v string) *CreateUniBackupPolicyShrinkRequest {
	s.PolicyName = &v
	return s
}

func (s *CreateUniBackupPolicyShrinkRequest) SetRetention(v int32) *CreateUniBackupPolicyShrinkRequest {
	s.Retention = &v
	return s
}

func (s *CreateUniBackupPolicyShrinkRequest) SetSpeedLimiter(v int64) *CreateUniBackupPolicyShrinkRequest {
	s.SpeedLimiter = &v
	return s
}

func (s *CreateUniBackupPolicyShrinkRequest) SetUniRegionId(v string) *CreateUniBackupPolicyShrinkRequest {
	s.UniRegionId = &v
	return s
}

func (s *CreateUniBackupPolicyShrinkRequest) SetUuid(v string) *CreateUniBackupPolicyShrinkRequest {
	s.Uuid = &v
	return s
}

type CreateUniBackupPolicyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateUniBackupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUniBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUniBackupPolicyResponseBody) SetRequestId(v string) *CreateUniBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

type CreateUniBackupPolicyResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateUniBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateUniBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUniBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *CreateUniBackupPolicyResponse) SetHeaders(v map[string]*string) *CreateUniBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *CreateUniBackupPolicyResponse) SetStatusCode(v int32) *CreateUniBackupPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUniBackupPolicyResponse) SetBody(v *CreateUniBackupPolicyResponseBody) *CreateUniBackupPolicyResponse {
	s.Body = v
	return s
}

type CreateUniRestorePlanRequest struct {
	Database     *string `json:"Database,omitempty" xml:"Database,omitempty"`
	InstanceUuid *string `json:"InstanceUuid,omitempty" xml:"InstanceUuid,omitempty"`
	PolicyId     *int64  `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	ResetScn     *string `json:"ResetScn,omitempty" xml:"ResetScn,omitempty"`
	ResetTime    *string `json:"ResetTime,omitempty" xml:"ResetTime,omitempty"`
	RestoreInfo  *string `json:"RestoreInfo,omitempty" xml:"RestoreInfo,omitempty"`
	TimePoint    *int64  `json:"TimePoint,omitempty" xml:"TimePoint,omitempty"`
}

func (s CreateUniRestorePlanRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUniRestorePlanRequest) GoString() string {
	return s.String()
}

func (s *CreateUniRestorePlanRequest) SetDatabase(v string) *CreateUniRestorePlanRequest {
	s.Database = &v
	return s
}

func (s *CreateUniRestorePlanRequest) SetInstanceUuid(v string) *CreateUniRestorePlanRequest {
	s.InstanceUuid = &v
	return s
}

func (s *CreateUniRestorePlanRequest) SetPolicyId(v int64) *CreateUniRestorePlanRequest {
	s.PolicyId = &v
	return s
}

func (s *CreateUniRestorePlanRequest) SetResetScn(v string) *CreateUniRestorePlanRequest {
	s.ResetScn = &v
	return s
}

func (s *CreateUniRestorePlanRequest) SetResetTime(v string) *CreateUniRestorePlanRequest {
	s.ResetTime = &v
	return s
}

func (s *CreateUniRestorePlanRequest) SetRestoreInfo(v string) *CreateUniRestorePlanRequest {
	s.RestoreInfo = &v
	return s
}

func (s *CreateUniRestorePlanRequest) SetTimePoint(v int64) *CreateUniRestorePlanRequest {
	s.TimePoint = &v
	return s
}

type CreateUniRestorePlanResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateUniRestorePlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUniRestorePlanResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUniRestorePlanResponseBody) SetRequestId(v string) *CreateUniRestorePlanResponseBody {
	s.RequestId = &v
	return s
}

type CreateUniRestorePlanResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateUniRestorePlanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateUniRestorePlanResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUniRestorePlanResponse) GoString() string {
	return s.String()
}

func (s *CreateUniRestorePlanResponse) SetHeaders(v map[string]*string) *CreateUniRestorePlanResponse {
	s.Headers = v
	return s
}

func (s *CreateUniRestorePlanResponse) SetStatusCode(v int32) *CreateUniRestorePlanResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUniRestorePlanResponse) SetBody(v *CreateUniRestorePlanResponseBody) *CreateUniRestorePlanResponse {
	s.Body = v
	return s
}

type CreateVulAutoRepairConfigRequest struct {
	// The reason why the vulnerability can be automatically fixed.
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	// The type of the vulnerability. Valid values:
	// - **cve**: Linux software vulnerability.
	// - **sys**: Windows system vulnerability.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The vulnerabilities that can be automatically fixed.
	VulAutoRepairConfigList []*CreateVulAutoRepairConfigRequestVulAutoRepairConfigList `json:"VulAutoRepairConfigList,omitempty" xml:"VulAutoRepairConfigList,omitempty" type:"Repeated"`
}

func (s CreateVulAutoRepairConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVulAutoRepairConfigRequest) GoString() string {
	return s.String()
}

func (s *CreateVulAutoRepairConfigRequest) SetReason(v string) *CreateVulAutoRepairConfigRequest {
	s.Reason = &v
	return s
}

func (s *CreateVulAutoRepairConfigRequest) SetType(v string) *CreateVulAutoRepairConfigRequest {
	s.Type = &v
	return s
}

func (s *CreateVulAutoRepairConfigRequest) SetVulAutoRepairConfigList(v []*CreateVulAutoRepairConfigRequestVulAutoRepairConfigList) *CreateVulAutoRepairConfigRequest {
	s.VulAutoRepairConfigList = v
	return s
}

type CreateVulAutoRepairConfigRequestVulAutoRepairConfigList struct {
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The name of the vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateVulAutoRepairConfigRequestVulAutoRepairConfigList) String() string {
	return tea.Prettify(s)
}

func (s CreateVulAutoRepairConfigRequestVulAutoRepairConfigList) GoString() string {
	return s.String()
}

func (s *CreateVulAutoRepairConfigRequestVulAutoRepairConfigList) SetAliasName(v string) *CreateVulAutoRepairConfigRequestVulAutoRepairConfigList {
	s.AliasName = &v
	return s
}

func (s *CreateVulAutoRepairConfigRequestVulAutoRepairConfigList) SetName(v string) *CreateVulAutoRepairConfigRequestVulAutoRepairConfigList {
	s.Name = &v
	return s
}

type CreateVulAutoRepairConfigResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was is successful. Other status codes indicate that the request fails. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateVulAutoRepairConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVulAutoRepairConfigResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVulAutoRepairConfigResponseBody) SetCode(v string) *CreateVulAutoRepairConfigResponseBody {
	s.Code = &v
	return s
}

func (s *CreateVulAutoRepairConfigResponseBody) SetHttpStatusCode(v int32) *CreateVulAutoRepairConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateVulAutoRepairConfigResponseBody) SetMessage(v string) *CreateVulAutoRepairConfigResponseBody {
	s.Message = &v
	return s
}

func (s *CreateVulAutoRepairConfigResponseBody) SetRequestId(v string) *CreateVulAutoRepairConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateVulAutoRepairConfigResponseBody) SetSuccess(v bool) *CreateVulAutoRepairConfigResponseBody {
	s.Success = &v
	return s
}

type CreateVulAutoRepairConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateVulAutoRepairConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateVulAutoRepairConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVulAutoRepairConfigResponse) GoString() string {
	return s.String()
}

func (s *CreateVulAutoRepairConfigResponse) SetHeaders(v map[string]*string) *CreateVulAutoRepairConfigResponse {
	s.Headers = v
	return s
}

func (s *CreateVulAutoRepairConfigResponse) SetStatusCode(v int32) *CreateVulAutoRepairConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateVulAutoRepairConfigResponse) SetBody(v *CreateVulAutoRepairConfigResponseBody) *CreateVulAutoRepairConfigResponse {
	s.Body = v
	return s
}

type DeleteAntiBruteForceRuleRequest struct {
	// An array that consists of the IDs of the defense rules against brute-force attacks to delete.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
}

func (s DeleteAntiBruteForceRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntiBruteForceRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteAntiBruteForceRuleRequest) SetIds(v []*int64) *DeleteAntiBruteForceRuleRequest {
	s.Ids = v
	return s
}

type DeleteAntiBruteForceRuleResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAntiBruteForceRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntiBruteForceRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAntiBruteForceRuleResponseBody) SetRequestId(v string) *DeleteAntiBruteForceRuleResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAntiBruteForceRuleResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteAntiBruteForceRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteAntiBruteForceRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntiBruteForceRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteAntiBruteForceRuleResponse) SetHeaders(v map[string]*string) *DeleteAntiBruteForceRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteAntiBruteForceRuleResponse) SetStatusCode(v int32) *DeleteAntiBruteForceRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAntiBruteForceRuleResponse) SetBody(v *DeleteAntiBruteForceRuleResponseBody) *DeleteAntiBruteForceRuleResponse {
	s.Body = v
	return s
}

type DeleteBackupPolicyRequest struct {
	// The ID of the anti-ransomware policy that you want to delete.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The version of the anti-ransomware policy that you want to delete. You can call the [DescribeBackupPolicies](~~322795~~) operation to query the versions of anti-ransomware policies. Valid values:
	//
	// *   **1.0.0**
	// *   **2.0.0**
	PolicyVersion *string `json:"PolicyVersion,omitempty" xml:"PolicyVersion,omitempty"`
}

func (s DeleteBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *DeleteBackupPolicyRequest) SetId(v int64) *DeleteBackupPolicyRequest {
	s.Id = &v
	return s
}

func (s *DeleteBackupPolicyRequest) SetPolicyVersion(v string) *DeleteBackupPolicyRequest {
	s.PolicyVersion = &v
	return s
}

type DeleteBackupPolicyResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBackupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBackupPolicyResponseBody) SetRequestId(v string) *DeleteBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

type DeleteBackupPolicyResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *DeleteBackupPolicyResponse) SetHeaders(v map[string]*string) *DeleteBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *DeleteBackupPolicyResponse) SetStatusCode(v int32) *DeleteBackupPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBackupPolicyResponse) SetBody(v *DeleteBackupPolicyResponseBody) *DeleteBackupPolicyResponse {
	s.Body = v
	return s
}

type DeleteBackupPolicyMachineRequest struct {
	// The ID of the anti-ransomware policy.
	// >  You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the **Id** of anti-ransomware policies.
	PolicyId *int64 `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The version of the anti-ransomware policy. Valid values:
	//
	// *   **1.0.0**
	// *   **2.0.0**
	//
	// >  You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the versions of anti-ransomware policies.
	PolicyVersion *string `json:"PolicyVersion,omitempty" xml:"PolicyVersion,omitempty"`
	// The UUID of the server to which the anti-ransomware policy is applied.
	//
	// >  You must specify at least one of the `UuidList` and `Uuid` parameters.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The UUIDs of the servers to which the anti-ransomware policy is applied.
	//
	// >  You must specify at least one of the `UuidList` and `Uuid` parameters.
	UuidList []*string `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s DeleteBackupPolicyMachineRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupPolicyMachineRequest) GoString() string {
	return s.String()
}

func (s *DeleteBackupPolicyMachineRequest) SetPolicyId(v int64) *DeleteBackupPolicyMachineRequest {
	s.PolicyId = &v
	return s
}

func (s *DeleteBackupPolicyMachineRequest) SetPolicyVersion(v string) *DeleteBackupPolicyMachineRequest {
	s.PolicyVersion = &v
	return s
}

func (s *DeleteBackupPolicyMachineRequest) SetUuid(v string) *DeleteBackupPolicyMachineRequest {
	s.Uuid = &v
	return s
}

func (s *DeleteBackupPolicyMachineRequest) SetUuidList(v []*string) *DeleteBackupPolicyMachineRequest {
	s.UuidList = v
	return s
}

type DeleteBackupPolicyMachineResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBackupPolicyMachineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupPolicyMachineResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBackupPolicyMachineResponseBody) SetRequestId(v string) *DeleteBackupPolicyMachineResponseBody {
	s.RequestId = &v
	return s
}

type DeleteBackupPolicyMachineResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteBackupPolicyMachineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteBackupPolicyMachineResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupPolicyMachineResponse) GoString() string {
	return s.String()
}

func (s *DeleteBackupPolicyMachineResponse) SetHeaders(v map[string]*string) *DeleteBackupPolicyMachineResponse {
	s.Headers = v
	return s
}

func (s *DeleteBackupPolicyMachineResponse) SetStatusCode(v int32) *DeleteBackupPolicyMachineResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBackupPolicyMachineResponse) SetBody(v *DeleteBackupPolicyMachineResponseBody) *DeleteBackupPolicyMachineResponse {
	s.Body = v
	return s
}

type DeleteClientUserDefineRuleRequest struct {
	IdList []*int64 `json:"IdList,omitempty" xml:"IdList,omitempty" type:"Repeated"`
}

func (s DeleteClientUserDefineRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteClientUserDefineRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteClientUserDefineRuleRequest) SetIdList(v []*int64) *DeleteClientUserDefineRuleRequest {
	s.IdList = v
	return s
}

type DeleteClientUserDefineRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteClientUserDefineRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteClientUserDefineRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteClientUserDefineRuleResponseBody) SetRequestId(v string) *DeleteClientUserDefineRuleResponseBody {
	s.RequestId = &v
	return s
}

type DeleteClientUserDefineRuleResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteClientUserDefineRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteClientUserDefineRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteClientUserDefineRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteClientUserDefineRuleResponse) SetHeaders(v map[string]*string) *DeleteClientUserDefineRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteClientUserDefineRuleResponse) SetStatusCode(v int32) *DeleteClientUserDefineRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteClientUserDefineRuleResponse) SetBody(v *DeleteClientUserDefineRuleResponseBody) *DeleteClientUserDefineRuleResponse {
	s.Body = v
	return s
}

type DeleteCustomBlockRecordRequest struct {
	Id              *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	ResourceOwnerId *int64 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteCustomBlockRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomBlockRecordRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomBlockRecordRequest) SetId(v int64) *DeleteCustomBlockRecordRequest {
	s.Id = &v
	return s
}

func (s *DeleteCustomBlockRecordRequest) SetResourceOwnerId(v int64) *DeleteCustomBlockRecordRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteCustomBlockRecordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCustomBlockRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomBlockRecordResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomBlockRecordResponseBody) SetRequestId(v string) *DeleteCustomBlockRecordResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCustomBlockRecordResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCustomBlockRecordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCustomBlockRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomBlockRecordResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomBlockRecordResponse) SetHeaders(v map[string]*string) *DeleteCustomBlockRecordResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomBlockRecordResponse) SetStatusCode(v int32) *DeleteCustomBlockRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomBlockRecordResponse) SetBody(v *DeleteCustomBlockRecordResponseBody) *DeleteCustomBlockRecordResponse {
	s.Body = v
	return s
}

type DeleteCycleTaskRequest struct {
	ConfigId *string `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
}

func (s DeleteCycleTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCycleTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteCycleTaskRequest) SetConfigId(v string) *DeleteCycleTaskRequest {
	s.ConfigId = &v
	return s
}

type DeleteCycleTaskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCycleTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCycleTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCycleTaskResponseBody) SetRequestId(v string) *DeleteCycleTaskResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCycleTaskResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCycleTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCycleTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCycleTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteCycleTaskResponse) SetHeaders(v map[string]*string) *DeleteCycleTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteCycleTaskResponse) SetStatusCode(v int32) *DeleteCycleTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCycleTaskResponse) SetBody(v *DeleteCycleTaskResponseBody) *DeleteCycleTaskResponse {
	s.Body = v
	return s
}

type DeleteGroupRequest struct {
	// The ID of the server group that you want to delete.
	//
	// >  To delete a server group, you must provide the ID of the server group. You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the ID.
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DeleteGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteGroupRequest) SetGroupId(v int64) *DeleteGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteGroupRequest) SetSourceIp(v string) *DeleteGroupRequest {
	s.SourceIp = &v
	return s
}

type DeleteGroupResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteGroupResponseBody) SetCode(v string) *DeleteGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteGroupResponseBody) SetRequestId(v string) *DeleteGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteGroupResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteGroupResponse) SetHeaders(v map[string]*string) *DeleteGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteGroupResponse) SetStatusCode(v int32) *DeleteGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteGroupResponse) SetBody(v *DeleteGroupResponseBody) *DeleteGroupResponse {
	s.Body = v
	return s
}

type DeleteHoneypotRequest struct {
	HoneypotId *string `json:"HoneypotId,omitempty" xml:"HoneypotId,omitempty"`
}

func (s DeleteHoneypotRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHoneypotRequest) GoString() string {
	return s.String()
}

func (s *DeleteHoneypotRequest) SetHoneypotId(v string) *DeleteHoneypotRequest {
	s.HoneypotId = &v
	return s
}

type DeleteHoneypotResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteHoneypotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHoneypotResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHoneypotResponseBody) SetCode(v string) *DeleteHoneypotResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteHoneypotResponseBody) SetHttpStatusCode(v int32) *DeleteHoneypotResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteHoneypotResponseBody) SetMessage(v string) *DeleteHoneypotResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteHoneypotResponseBody) SetRequestId(v string) *DeleteHoneypotResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteHoneypotResponseBody) SetSuccess(v bool) *DeleteHoneypotResponseBody {
	s.Success = &v
	return s
}

type DeleteHoneypotResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteHoneypotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteHoneypotResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHoneypotResponse) GoString() string {
	return s.String()
}

func (s *DeleteHoneypotResponse) SetHeaders(v map[string]*string) *DeleteHoneypotResponse {
	s.Headers = v
	return s
}

func (s *DeleteHoneypotResponse) SetStatusCode(v int32) *DeleteHoneypotResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHoneypotResponse) SetBody(v *DeleteHoneypotResponseBody) *DeleteHoneypotResponse {
	s.Body = v
	return s
}

type DeleteHoneypotNodeRequest struct {
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DeleteHoneypotNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHoneypotNodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteHoneypotNodeRequest) SetNodeId(v string) *DeleteHoneypotNodeRequest {
	s.NodeId = &v
	return s
}

type DeleteHoneypotNodeResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteHoneypotNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHoneypotNodeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHoneypotNodeResponseBody) SetCode(v string) *DeleteHoneypotNodeResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteHoneypotNodeResponseBody) SetHttpStatusCode(v int32) *DeleteHoneypotNodeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteHoneypotNodeResponseBody) SetMessage(v string) *DeleteHoneypotNodeResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteHoneypotNodeResponseBody) SetRequestId(v string) *DeleteHoneypotNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteHoneypotNodeResponseBody) SetSuccess(v bool) *DeleteHoneypotNodeResponseBody {
	s.Success = &v
	return s
}

type DeleteHoneypotNodeResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteHoneypotNodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteHoneypotNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHoneypotNodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteHoneypotNodeResponse) SetHeaders(v map[string]*string) *DeleteHoneypotNodeResponse {
	s.Headers = v
	return s
}

func (s *DeleteHoneypotNodeResponse) SetStatusCode(v int32) *DeleteHoneypotNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHoneypotNodeResponse) SetBody(v *DeleteHoneypotNodeResponseBody) *DeleteHoneypotNodeResponse {
	s.Body = v
	return s
}

type DeleteHoneypotPresetRequest struct {
	HoneypotPresetId *string `json:"HoneypotPresetId,omitempty" xml:"HoneypotPresetId,omitempty"`
}

func (s DeleteHoneypotPresetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHoneypotPresetRequest) GoString() string {
	return s.String()
}

func (s *DeleteHoneypotPresetRequest) SetHoneypotPresetId(v string) *DeleteHoneypotPresetRequest {
	s.HoneypotPresetId = &v
	return s
}

type DeleteHoneypotPresetResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteHoneypotPresetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHoneypotPresetResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHoneypotPresetResponseBody) SetCode(v string) *DeleteHoneypotPresetResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteHoneypotPresetResponseBody) SetHttpStatusCode(v int32) *DeleteHoneypotPresetResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteHoneypotPresetResponseBody) SetMessage(v string) *DeleteHoneypotPresetResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteHoneypotPresetResponseBody) SetRequestId(v string) *DeleteHoneypotPresetResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteHoneypotPresetResponseBody) SetSuccess(v bool) *DeleteHoneypotPresetResponseBody {
	s.Success = &v
	return s
}

type DeleteHoneypotPresetResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteHoneypotPresetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteHoneypotPresetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHoneypotPresetResponse) GoString() string {
	return s.String()
}

func (s *DeleteHoneypotPresetResponse) SetHeaders(v map[string]*string) *DeleteHoneypotPresetResponse {
	s.Headers = v
	return s
}

func (s *DeleteHoneypotPresetResponse) SetStatusCode(v int32) *DeleteHoneypotPresetResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHoneypotPresetResponse) SetBody(v *DeleteHoneypotPresetResponseBody) *DeleteHoneypotPresetResponse {
	s.Body = v
	return s
}

type DeleteHoneypotProbeRequest struct {
	ProbeId *string `json:"ProbeId,omitempty" xml:"ProbeId,omitempty"`
}

func (s DeleteHoneypotProbeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHoneypotProbeRequest) GoString() string {
	return s.String()
}

func (s *DeleteHoneypotProbeRequest) SetProbeId(v string) *DeleteHoneypotProbeRequest {
	s.ProbeId = &v
	return s
}

type DeleteHoneypotProbeResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteHoneypotProbeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHoneypotProbeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHoneypotProbeResponseBody) SetCode(v string) *DeleteHoneypotProbeResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteHoneypotProbeResponseBody) SetHttpStatusCode(v int32) *DeleteHoneypotProbeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteHoneypotProbeResponseBody) SetMessage(v string) *DeleteHoneypotProbeResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteHoneypotProbeResponseBody) SetRequestId(v string) *DeleteHoneypotProbeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteHoneypotProbeResponseBody) SetSuccess(v bool) *DeleteHoneypotProbeResponseBody {
	s.Success = &v
	return s
}

type DeleteHoneypotProbeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteHoneypotProbeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteHoneypotProbeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHoneypotProbeResponse) GoString() string {
	return s.String()
}

func (s *DeleteHoneypotProbeResponse) SetHeaders(v map[string]*string) *DeleteHoneypotProbeResponse {
	s.Headers = v
	return s
}

func (s *DeleteHoneypotProbeResponse) SetStatusCode(v int32) *DeleteHoneypotProbeResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHoneypotProbeResponse) SetBody(v *DeleteHoneypotProbeResponseBody) *DeleteHoneypotProbeResponse {
	s.Body = v
	return s
}

type DeleteInstallCodeRequest struct {
	CaptchaCode *string `json:"CaptchaCode,omitempty" xml:"CaptchaCode,omitempty"`
}

func (s DeleteInstallCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstallCodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteInstallCodeRequest) SetCaptchaCode(v string) *DeleteInstallCodeRequest {
	s.CaptchaCode = &v
	return s
}

type DeleteInstallCodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteInstallCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstallCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInstallCodeResponseBody) SetRequestId(v string) *DeleteInstallCodeResponseBody {
	s.RequestId = &v
	return s
}

type DeleteInstallCodeResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteInstallCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteInstallCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstallCodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteInstallCodeResponse) SetHeaders(v map[string]*string) *DeleteInstallCodeResponse {
	s.Headers = v
	return s
}

func (s *DeleteInstallCodeResponse) SetStatusCode(v int32) *DeleteInstallCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteInstallCodeResponse) SetBody(v *DeleteInstallCodeResponseBody) *DeleteInstallCodeResponse {
	s.Body = v
	return s
}

type DeleteInterceptionRuleRequest struct {
	ClusterId *string  `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RuleIds   []*int64 `json:"RuleIds,omitempty" xml:"RuleIds,omitempty" type:"Repeated"`
}

func (s DeleteInterceptionRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInterceptionRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteInterceptionRuleRequest) SetClusterId(v string) *DeleteInterceptionRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteInterceptionRuleRequest) SetRuleIds(v []*int64) *DeleteInterceptionRuleRequest {
	s.RuleIds = v
	return s
}

type DeleteInterceptionRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteInterceptionRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteInterceptionRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInterceptionRuleResponseBody) SetRequestId(v string) *DeleteInterceptionRuleResponseBody {
	s.RequestId = &v
	return s
}

type DeleteInterceptionRuleResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteInterceptionRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteInterceptionRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInterceptionRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteInterceptionRuleResponse) SetHeaders(v map[string]*string) *DeleteInterceptionRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteInterceptionRuleResponse) SetStatusCode(v int32) *DeleteInterceptionRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteInterceptionRuleResponse) SetBody(v *DeleteInterceptionRuleResponseBody) *DeleteInterceptionRuleResponse {
	s.Body = v
	return s
}

type DeleteInterceptionTargetRequest struct {
	TargetIds *string `json:"TargetIds,omitempty" xml:"TargetIds,omitempty"`
}

func (s DeleteInterceptionTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInterceptionTargetRequest) GoString() string {
	return s.String()
}

func (s *DeleteInterceptionTargetRequest) SetTargetIds(v string) *DeleteInterceptionTargetRequest {
	s.TargetIds = &v
	return s
}

type DeleteInterceptionTargetResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteInterceptionTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteInterceptionTargetResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInterceptionTargetResponseBody) SetRequestId(v string) *DeleteInterceptionTargetResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteInterceptionTargetResponseBody) SetResult(v bool) *DeleteInterceptionTargetResponseBody {
	s.Result = &v
	return s
}

type DeleteInterceptionTargetResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteInterceptionTargetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteInterceptionTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInterceptionTargetResponse) GoString() string {
	return s.String()
}

func (s *DeleteInterceptionTargetResponse) SetHeaders(v map[string]*string) *DeleteInterceptionTargetResponse {
	s.Headers = v
	return s
}

func (s *DeleteInterceptionTargetResponse) SetStatusCode(v int32) *DeleteInterceptionTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteInterceptionTargetResponse) SetBody(v *DeleteInterceptionTargetResponseBody) *DeleteInterceptionTargetResponse {
	s.Body = v
	return s
}

type DeleteLoginBaseConfigRequest struct {
	// The configuration item that you want to delete. The items vary based on the type of logon configurations. Valid values:
	//
	// *   **login\_common_ip**: approved logon IP addresses
	//
	// Example: {"ip":"10.23.23.23"}.
	//
	// *   **login\_common_time**: approved logon time ranges
	//
	// Example: {"startTime":"06:00:00","endTime":"16:00:00"}.
	//
	// *   **login\_common_account**: approved logon accounts
	//
	// Example: {"account":"test_account\_001"}.
	//
	// *   **login\_common_location**: approved logon locations
	//
	// Example: {"location":"Shanghai"}.
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The UUID of the server whose logon configurations you want to delete.
	//
	// > You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The type of logon configurations to delete. Valid values:
	//
	// *   **login\_common_ip**: approved logon IP addresses
	// *   **login\_common_time**: approved logon time ranges
	// *   **login\_common_account**: approved logon accounts
	// *   **login\_common_location**: approved logon locations
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DeleteLoginBaseConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoginBaseConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLoginBaseConfigRequest) SetConfig(v string) *DeleteLoginBaseConfigRequest {
	s.Config = &v
	return s
}

func (s *DeleteLoginBaseConfigRequest) SetTarget(v string) *DeleteLoginBaseConfigRequest {
	s.Target = &v
	return s
}

func (s *DeleteLoginBaseConfigRequest) SetType(v string) *DeleteLoginBaseConfigRequest {
	s.Type = &v
	return s
}

type DeleteLoginBaseConfigResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLoginBaseConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoginBaseConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLoginBaseConfigResponseBody) SetRequestId(v string) *DeleteLoginBaseConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLoginBaseConfigResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLoginBaseConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLoginBaseConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoginBaseConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLoginBaseConfigResponse) SetHeaders(v map[string]*string) *DeleteLoginBaseConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLoginBaseConfigResponse) SetStatusCode(v int32) *DeleteLoginBaseConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLoginBaseConfigResponse) SetBody(v *DeleteLoginBaseConfigResponseBody) *DeleteLoginBaseConfigResponse {
	s.Body = v
	return s
}

type DeletePrivateRegistryRequest struct {
	RegistryId *int64 `json:"RegistryId,omitempty" xml:"RegistryId,omitempty"`
}

func (s DeletePrivateRegistryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePrivateRegistryRequest) GoString() string {
	return s.String()
}

func (s *DeletePrivateRegistryRequest) SetRegistryId(v int64) *DeletePrivateRegistryRequest {
	s.RegistryId = &v
	return s
}

type DeletePrivateRegistryResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePrivateRegistryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePrivateRegistryResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePrivateRegistryResponseBody) SetData(v bool) *DeletePrivateRegistryResponseBody {
	s.Data = &v
	return s
}

func (s *DeletePrivateRegistryResponseBody) SetRequestId(v string) *DeletePrivateRegistryResponseBody {
	s.RequestId = &v
	return s
}

type DeletePrivateRegistryResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeletePrivateRegistryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeletePrivateRegistryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePrivateRegistryResponse) GoString() string {
	return s.String()
}

func (s *DeletePrivateRegistryResponse) SetHeaders(v map[string]*string) *DeletePrivateRegistryResponse {
	s.Headers = v
	return s
}

func (s *DeletePrivateRegistryResponse) SetStatusCode(v int32) *DeletePrivateRegistryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePrivateRegistryResponse) SetBody(v *DeletePrivateRegistryResponseBody) *DeletePrivateRegistryResponse {
	s.Body = v
	return s
}

type DeleteSecurityEventMarkMissListRequest struct {
	Ids             []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	ResourceOwnerId *int64   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteSecurityEventMarkMissListRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityEventMarkMissListRequest) GoString() string {
	return s.String()
}

func (s *DeleteSecurityEventMarkMissListRequest) SetIds(v []*int64) *DeleteSecurityEventMarkMissListRequest {
	s.Ids = v
	return s
}

func (s *DeleteSecurityEventMarkMissListRequest) SetResourceOwnerId(v int64) *DeleteSecurityEventMarkMissListRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteSecurityEventMarkMissListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSecurityEventMarkMissListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityEventMarkMissListResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSecurityEventMarkMissListResponseBody) SetRequestId(v string) *DeleteSecurityEventMarkMissListResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSecurityEventMarkMissListResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSecurityEventMarkMissListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSecurityEventMarkMissListResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityEventMarkMissListResponse) GoString() string {
	return s.String()
}

func (s *DeleteSecurityEventMarkMissListResponse) SetHeaders(v map[string]*string) *DeleteSecurityEventMarkMissListResponse {
	s.Headers = v
	return s
}

func (s *DeleteSecurityEventMarkMissListResponse) SetStatusCode(v int32) *DeleteSecurityEventMarkMissListResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSecurityEventMarkMissListResponse) SetBody(v *DeleteSecurityEventMarkMissListResponseBody) *DeleteSecurityEventMarkMissListResponse {
	s.Body = v
	return s
}

type DeleteStrategyRequest struct {
	// The ID of the baseline check policy that you want to delete.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DeleteStrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteStrategyRequest) GoString() string {
	return s.String()
}

func (s *DeleteStrategyRequest) SetId(v string) *DeleteStrategyRequest {
	s.Id = &v
	return s
}

func (s *DeleteStrategyRequest) SetLang(v string) *DeleteStrategyRequest {
	s.Lang = &v
	return s
}

func (s *DeleteStrategyRequest) SetSourceIp(v string) *DeleteStrategyRequest {
	s.SourceIp = &v
	return s
}

type DeleteStrategyResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteStrategyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteStrategyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStrategyResponseBody) SetRequestId(v string) *DeleteStrategyResponseBody {
	s.RequestId = &v
	return s
}

type DeleteStrategyResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteStrategyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteStrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteStrategyResponse) GoString() string {
	return s.String()
}

func (s *DeleteStrategyResponse) SetHeaders(v map[string]*string) *DeleteStrategyResponse {
	s.Headers = v
	return s
}

func (s *DeleteStrategyResponse) SetStatusCode(v int32) *DeleteStrategyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteStrategyResponse) SetBody(v *DeleteStrategyResponseBody) *DeleteStrategyResponse {
	s.Body = v
	return s
}

type DeleteSuspEventNodeRequest struct {
	NoteId *int64 `json:"NoteId,omitempty" xml:"NoteId,omitempty"`
}

func (s DeleteSuspEventNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSuspEventNodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteSuspEventNodeRequest) SetNoteId(v int64) *DeleteSuspEventNodeRequest {
	s.NoteId = &v
	return s
}

type DeleteSuspEventNodeResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteSuspEventNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSuspEventNodeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSuspEventNodeResponseBody) SetCode(v string) *DeleteSuspEventNodeResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSuspEventNodeResponseBody) SetMessage(v string) *DeleteSuspEventNodeResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSuspEventNodeResponseBody) SetRequestId(v string) *DeleteSuspEventNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSuspEventNodeResponseBody) SetSuccess(v bool) *DeleteSuspEventNodeResponseBody {
	s.Success = &v
	return s
}

type DeleteSuspEventNodeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSuspEventNodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSuspEventNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSuspEventNodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteSuspEventNodeResponse) SetHeaders(v map[string]*string) *DeleteSuspEventNodeResponse {
	s.Headers = v
	return s
}

func (s *DeleteSuspEventNodeResponse) SetStatusCode(v int32) *DeleteSuspEventNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSuspEventNodeResponse) SetBody(v *DeleteSuspEventNodeResponseBody) *DeleteSuspEventNodeResponse {
	s.Body = v
	return s
}

type DeleteTagWithUuidRequest struct {
	// The name of the tag.
	TagName *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	// The list of server UUIDs.
	//
	// >  If the UuidList parameter is configured, Security Center removes the tag only from the servers whose UUIDs are specified by UuidList. If the UuidList parameter is not configured, Security Center removes the tag from all servers.
	UuidList *string `json:"UuidList,omitempty" xml:"UuidList,omitempty"`
}

func (s DeleteTagWithUuidRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTagWithUuidRequest) GoString() string {
	return s.String()
}

func (s *DeleteTagWithUuidRequest) SetTagName(v string) *DeleteTagWithUuidRequest {
	s.TagName = &v
	return s
}

func (s *DeleteTagWithUuidRequest) SetUuidList(v string) *DeleteTagWithUuidRequest {
	s.UuidList = &v
	return s
}

type DeleteTagWithUuidResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTagWithUuidResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTagWithUuidResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTagWithUuidResponseBody) SetRequestId(v string) *DeleteTagWithUuidResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTagWithUuidResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteTagWithUuidResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteTagWithUuidResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTagWithUuidResponse) GoString() string {
	return s.String()
}

func (s *DeleteTagWithUuidResponse) SetHeaders(v map[string]*string) *DeleteTagWithUuidResponse {
	s.Headers = v
	return s
}

func (s *DeleteTagWithUuidResponse) SetStatusCode(v int32) *DeleteTagWithUuidResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTagWithUuidResponse) SetBody(v *DeleteTagWithUuidResponseBody) *DeleteTagWithUuidResponse {
	s.Body = v
	return s
}

type DeleteUniBackupPolicyRequest struct {
	PolicyId  *int64  `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	PolicyIds *string `json:"PolicyIds,omitempty" xml:"PolicyIds,omitempty"`
}

func (s DeleteUniBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUniBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *DeleteUniBackupPolicyRequest) SetPolicyId(v int64) *DeleteUniBackupPolicyRequest {
	s.PolicyId = &v
	return s
}

func (s *DeleteUniBackupPolicyRequest) SetPolicyIds(v string) *DeleteUniBackupPolicyRequest {
	s.PolicyIds = &v
	return s
}

type DeleteUniBackupPolicyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteUniBackupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteUniBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteUniBackupPolicyResponseBody) SetRequestId(v string) *DeleteUniBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

type DeleteUniBackupPolicyResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteUniBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteUniBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUniBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *DeleteUniBackupPolicyResponse) SetHeaders(v map[string]*string) *DeleteUniBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *DeleteUniBackupPolicyResponse) SetStatusCode(v int32) *DeleteUniBackupPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteUniBackupPolicyResponse) SetBody(v *DeleteUniBackupPolicyResponseBody) *DeleteUniBackupPolicyResponse {
	s.Body = v
	return s
}

type DeleteVpcHoneyPotRequest struct {
	// The ID of the virtual private cloud (VPC) on which the honeypot is deployed.
	//
	// >  You can call the [DescribeVpcHoneyPotList](~~DescribeVpcHoneyPotList~~) operation to query the IDs of VPCs.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DeleteVpcHoneyPotRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcHoneyPotRequest) GoString() string {
	return s.String()
}

func (s *DeleteVpcHoneyPotRequest) SetVpcId(v string) *DeleteVpcHoneyPotRequest {
	s.VpcId = &v
	return s
}

type DeleteVpcHoneyPotResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVpcHoneyPotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcHoneyPotResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVpcHoneyPotResponseBody) SetRequestId(v string) *DeleteVpcHoneyPotResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVpcHoneyPotResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteVpcHoneyPotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteVpcHoneyPotResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVpcHoneyPotResponse) GoString() string {
	return s.String()
}

func (s *DeleteVpcHoneyPotResponse) SetHeaders(v map[string]*string) *DeleteVpcHoneyPotResponse {
	s.Headers = v
	return s
}

func (s *DeleteVpcHoneyPotResponse) SetStatusCode(v int32) *DeleteVpcHoneyPotResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteVpcHoneyPotResponse) SetBody(v *DeleteVpcHoneyPotResponseBody) *DeleteVpcHoneyPotResponse {
	s.Body = v
	return s
}

type DeleteVulWhitelistRequest struct {
	// The ID of the whitelist.
	//
	// >  To delete a vulnerability whitelist, you must provide the ID of the whitelist. You can call the [DescribeVulWhitelist](~~DescribeVulWhitelist~~) operation to query the IDs of whitelists.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The information about the whitelist. The value is a JSON string that contains the following fields:
	//
	// *   **Name**: the name of the vulnerability.
	//
	// *   **Type**: the type of the vulnerability. Valid values:
	//
	//     *   **cve**: Linux software vulnerability
	//     *   **sys**: Windows system vulnerability
	//     *   **cms**: Web-CMS vulnerability
	//     *   **app**: application vulnerability
	//     *   **emg**: urgent vulnerability
	//
	// *   **AliasName**: the alias of the vulnerability.
	Whitelist *string `json:"Whitelist,omitempty" xml:"Whitelist,omitempty"`
}

func (s DeleteVulWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVulWhitelistRequest) GoString() string {
	return s.String()
}

func (s *DeleteVulWhitelistRequest) SetId(v string) *DeleteVulWhitelistRequest {
	s.Id = &v
	return s
}

func (s *DeleteVulWhitelistRequest) SetWhitelist(v string) *DeleteVulWhitelistRequest {
	s.Whitelist = &v
	return s
}

type DeleteVulWhitelistResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVulWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVulWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVulWhitelistResponseBody) SetRequestId(v string) *DeleteVulWhitelistResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVulWhitelistResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteVulWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteVulWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVulWhitelistResponse) GoString() string {
	return s.String()
}

func (s *DeleteVulWhitelistResponse) SetHeaders(v map[string]*string) *DeleteVulWhitelistResponse {
	s.Headers = v
	return s
}

func (s *DeleteVulWhitelistResponse) SetStatusCode(v int32) *DeleteVulWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteVulWhitelistResponse) SetBody(v *DeleteVulWhitelistResponseBody) *DeleteVulWhitelistResponse {
	s.Body = v
	return s
}

type DescribeAccessKeyLeakDetailRequest struct {
	// The ID of the AccessKey pair leak.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeAccessKeyLeakDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessKeyLeakDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccessKeyLeakDetailRequest) SetId(v int64) *DescribeAccessKeyLeakDetailRequest {
	s.Id = &v
	return s
}

type DescribeAccessKeyLeakDetailResponseBody struct {
	// The ID of the AccessKey pair that is leaked.
	AccesskeyId *string `json:"AccesskeyId,omitempty" xml:"AccesskeyId,omitempty"`
	// The platform to which the asset belongs. The value is fixed as **Cloud platform**.
	Asset *string `json:"Asset,omitempty" xml:"Asset,omitempty"`
	// The code snippet that is leaked.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The time when the AccessKey pair leak was handled.
	DealTime *string `json:"DealTime,omitempty" xml:"DealTime,omitempty"`
	// The solution to the AccessKey pair leak. Valid values:
	//
	// *   **manual**: manually deleted
	// *   **disable**: manually disabled
	// *   **add-whitelist**: added to the whitelist
	// *   **pending**: unhandled
	DealType *string `json:"DealType,omitempty" xml:"DealType,omitempty"`
	// The name of the GitHub file.
	GithubFileName *string `json:"GithubFileName,omitempty" xml:"GithubFileName,omitempty"`
	// The type of the GitHub file. Valid values:
	//
	// *   Python
	// *   XML
	// *   GO
	// *   Javascript
	// *   INI
	// *   JSON
	// *   C++
	GithubFileType *string `json:"GithubFileType,omitempty" xml:"GithubFileType,omitempty"`
	// The time when the GitHub file was updated.
	GithubFileUpdateTime *string `json:"GithubFileUpdateTime,omitempty" xml:"GithubFileUpdateTime,omitempty"`
	// The URL of the GitHub file.
	GithubFileUrl *string `json:"GithubFileUrl,omitempty" xml:"GithubFileUrl,omitempty"`
	// The name of the GitHub repository.
	GithubRepoName *string `json:"GithubRepoName,omitempty" xml:"GithubRepoName,omitempty"`
	// The URL of the GitHub repository.
	GithubRepoUrl *string `json:"GithubRepoUrl,omitempty" xml:"GithubRepoUrl,omitempty"`
	// The username of the GitHub user.
	GithubUser *string `json:"GithubUser,omitempty" xml:"GithubUser,omitempty"`
	// The URL of the profile picture for the GitHub user.
	GithubUserPicUrl *string `json:"GithubUserPicUrl,omitempty" xml:"GithubUserPicUrl,omitempty"`
	// The first time when the AccessKey pair leak was detected.
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The last time when the AccessKey pair leak was detected.
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// The remarks of the AccessKey pair leak.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The platform on which the AccessKey pair leak is detected.
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The type of the leak. The value is fixed as **AccessKey**.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// Indicates whether the AccessKey pair leak is added to the whitelist. Valid values:
	//
	// *   **no**: The AccessKey pair leak is not added to the whitelist.
	// *   **yes**: The AccessKey pair leak is added to the whitelist.
	WhitelistStatus *string `json:"WhitelistStatus,omitempty" xml:"WhitelistStatus,omitempty"`
}

func (s DescribeAccessKeyLeakDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessKeyLeakDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetAccesskeyId(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.AccesskeyId = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetAsset(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.Asset = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetCode(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetDealTime(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.DealTime = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetDealType(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.DealType = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetGithubFileName(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.GithubFileName = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetGithubFileType(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.GithubFileType = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetGithubFileUpdateTime(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.GithubFileUpdateTime = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetGithubFileUrl(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.GithubFileUrl = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetGithubRepoName(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.GithubRepoName = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetGithubRepoUrl(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.GithubRepoUrl = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetGithubUser(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.GithubUser = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetGithubUserPicUrl(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.GithubUserPicUrl = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetGmtCreate(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetGmtModified(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetRemark(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.Remark = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetRequestId(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetSource(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.Source = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetType(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.Type = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponseBody) SetWhitelistStatus(v string) *DescribeAccessKeyLeakDetailResponseBody {
	s.WhitelistStatus = &v
	return s
}

type DescribeAccessKeyLeakDetailResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAccessKeyLeakDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAccessKeyLeakDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessKeyLeakDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccessKeyLeakDetailResponse) SetHeaders(v map[string]*string) *DescribeAccessKeyLeakDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponse) SetStatusCode(v int32) *DescribeAccessKeyLeakDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAccessKeyLeakDetailResponse) SetBody(v *DescribeAccessKeyLeakDetailResponseBody) *DescribeAccessKeyLeakDetailResponse {
	s.Body = v
	return s
}

type DescribeAccesskeyLeakListRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries to return on each page.\
	// Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// > : We recommend that you do not leave this parameter empty.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The AccessKey ID that you want to query. Only exact match is supported.
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// The beginning of the time range to query. You can query all AccessKey pair leaks that are detected later than this time point. The value of this parameter is a UNIX timestamp. Unit: milliseconds.
	StartTs *int64 `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
	// Specifies whether an AccessKey pair leak is handled. Valid values:
	//
	// *   **pending**: unhandled
	// *   **dealed**: handled
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAccesskeyLeakListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccesskeyLeakListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccesskeyLeakListRequest) SetCurrentPage(v int32) *DescribeAccesskeyLeakListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAccesskeyLeakListRequest) SetPageSize(v int32) *DescribeAccesskeyLeakListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAccesskeyLeakListRequest) SetQuery(v string) *DescribeAccesskeyLeakListRequest {
	s.Query = &v
	return s
}

func (s *DescribeAccesskeyLeakListRequest) SetStartTs(v int64) *DescribeAccesskeyLeakListRequest {
	s.StartTs = &v
	return s
}

func (s *DescribeAccesskeyLeakListRequest) SetStatus(v string) *DescribeAccesskeyLeakListRequest {
	s.Status = &v
	return s
}

type DescribeAccesskeyLeakListResponseBody struct {
	// An array that consists of the details about AccessKey pair leaks.
	AccessKeyLeakList []*DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList `json:"AccessKeyLeakList,omitempty" xml:"AccessKeyLeakList,omitempty" type:"Repeated"`
	// The number of AccessKey pair leaks that are unhandled.
	AkLeakCount *int32 `json:"AkLeakCount,omitempty" xml:"AkLeakCount,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// This parameter is deprecated.
	GmtLast *int64 `json:"GmtLast,omitempty" xml:"GmtLast,omitempty"`
	// The number of entries returned on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of AccessKey pair leaks.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAccesskeyLeakListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccesskeyLeakListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccesskeyLeakListResponseBody) SetAccessKeyLeakList(v []*DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) *DescribeAccesskeyLeakListResponseBody {
	s.AccessKeyLeakList = v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBody) SetAkLeakCount(v int32) *DescribeAccesskeyLeakListResponseBody {
	s.AkLeakCount = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBody) SetCurrentPage(v int32) *DescribeAccesskeyLeakListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBody) SetGmtLast(v int64) *DescribeAccesskeyLeakListResponseBody {
	s.GmtLast = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBody) SetPageSize(v int32) *DescribeAccesskeyLeakListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBody) SetRequestId(v string) *DescribeAccesskeyLeakListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBody) SetTotalCount(v int32) *DescribeAccesskeyLeakListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList struct {
	// The ID of the AccessKey pair that is leaked.
	AccesskeyId *string `json:"AccesskeyId,omitempty" xml:"AccesskeyId,omitempty"`
	// The name of the Alibaba Cloud account that is affected.
	AliUserName *string `json:"AliUserName,omitempty" xml:"AliUserName,omitempty"`
	// The platform to which the asset belongs. The value is fixed as **Cloud platform**.
	Asset *string `json:"Asset,omitempty" xml:"Asset,omitempty"`
	// The time when the AccessKey pair leak is handled.
	DealTime *string `json:"DealTime,omitempty" xml:"DealTime,omitempty"`
	// The method to handle the AccessKey pair leak. Valid values:
	//
	// *   **pending**: The AccessKey pair leak is unhandled.
	// *   **manual**: The AccessKey pair leak is manually handled.
	// *   **disable**: The AccessKey pair leak is disabled.
	// *   **add-whitelist**: The AccessKey pair leak is added to the whitelist.
	DealType *string `json:"DealType,omitempty" xml:"DealType,omitempty"`
	// The time when the AccessKey pair leak is first detected. The value of this parameter is a UNIX timestamp. Unit: milliseconds.
	GmtModified *int64 `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// The primary key ID of the database.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Indicates whether the AccessKey pair leak is handled. Valid values:
	//
	// *   **pending**: unhandled
	// *   **dealed**: handled
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the leak. The value is fixed as **AccessKey**.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The URL of the platform on which the AccessKey pair leak is detected.
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// The type of the account to which the leaked AccessKey pair belongs. Valid values:
	//
	// *   **master**: Alibaba Cloud account
	// *   **ram**: RAM user
	UserType *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
}

func (s DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) GoString() string {
	return s.String()
}

func (s *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) SetAccesskeyId(v string) *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList {
	s.AccesskeyId = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) SetAliUserName(v string) *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList {
	s.AliUserName = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) SetAsset(v string) *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList {
	s.Asset = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) SetDealTime(v string) *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList {
	s.DealTime = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) SetDealType(v string) *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList {
	s.DealType = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) SetGmtModified(v int64) *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList {
	s.GmtModified = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) SetId(v int64) *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList {
	s.Id = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) SetStatus(v string) *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList {
	s.Status = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) SetType(v string) *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList {
	s.Type = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) SetUrl(v string) *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList {
	s.Url = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList) SetUserType(v string) *DescribeAccesskeyLeakListResponseBodyAccessKeyLeakList {
	s.UserType = &v
	return s
}

type DescribeAccesskeyLeakListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAccesskeyLeakListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAccesskeyLeakListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccesskeyLeakListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccesskeyLeakListResponse) SetHeaders(v map[string]*string) *DescribeAccesskeyLeakListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccesskeyLeakListResponse) SetStatusCode(v int32) *DescribeAccesskeyLeakListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAccesskeyLeakListResponse) SetBody(v *DescribeAccesskeyLeakListResponseBody) *DescribeAccesskeyLeakListResponse {
	s.Body = v
	return s
}

type DescribeAffectedAssetsRequest struct {
	Current  *string `json:"Current,omitempty" xml:"Current,omitempty"`
	Levels   *string `json:"Levels,omitempty" xml:"Levels,omitempty"`
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAffectedAssetsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAffectedAssetsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAffectedAssetsRequest) SetCurrent(v string) *DescribeAffectedAssetsRequest {
	s.Current = &v
	return s
}

func (s *DescribeAffectedAssetsRequest) SetLevels(v string) *DescribeAffectedAssetsRequest {
	s.Levels = &v
	return s
}

func (s *DescribeAffectedAssetsRequest) SetPageSize(v string) *DescribeAffectedAssetsRequest {
	s.PageSize = &v
	return s
}

type DescribeAffectedAssetsResponseBody struct {
	AssetList []*DescribeAffectedAssetsResponseBodyAssetList `json:"AssetList,omitempty" xml:"AssetList,omitempty" type:"Repeated"`
	PageInfo  *DescribeAffectedAssetsResponseBodyPageInfo    `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAffectedAssetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAffectedAssetsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAffectedAssetsResponseBody) SetAssetList(v []*DescribeAffectedAssetsResponseBodyAssetList) *DescribeAffectedAssetsResponseBody {
	s.AssetList = v
	return s
}

func (s *DescribeAffectedAssetsResponseBody) SetPageInfo(v *DescribeAffectedAssetsResponseBodyPageInfo) *DescribeAffectedAssetsResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeAffectedAssetsResponseBody) SetRequestId(v string) *DescribeAffectedAssetsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAffectedAssetsResponseBodyAssetList struct {
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InternetIp   *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	IntranetIp   *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	RiskNum      *int32  `json:"RiskNum,omitempty" xml:"RiskNum,omitempty"`
	Uuid         *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeAffectedAssetsResponseBodyAssetList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAffectedAssetsResponseBodyAssetList) GoString() string {
	return s.String()
}

func (s *DescribeAffectedAssetsResponseBodyAssetList) SetInstanceId(v string) *DescribeAffectedAssetsResponseBodyAssetList {
	s.InstanceId = &v
	return s
}

func (s *DescribeAffectedAssetsResponseBodyAssetList) SetInstanceName(v string) *DescribeAffectedAssetsResponseBodyAssetList {
	s.InstanceName = &v
	return s
}

func (s *DescribeAffectedAssetsResponseBodyAssetList) SetInternetIp(v string) *DescribeAffectedAssetsResponseBodyAssetList {
	s.InternetIp = &v
	return s
}

func (s *DescribeAffectedAssetsResponseBodyAssetList) SetIntranetIp(v string) *DescribeAffectedAssetsResponseBodyAssetList {
	s.IntranetIp = &v
	return s
}

func (s *DescribeAffectedAssetsResponseBodyAssetList) SetRiskNum(v int32) *DescribeAffectedAssetsResponseBodyAssetList {
	s.RiskNum = &v
	return s
}

func (s *DescribeAffectedAssetsResponseBodyAssetList) SetUuid(v string) *DescribeAffectedAssetsResponseBodyAssetList {
	s.Uuid = &v
	return s
}

type DescribeAffectedAssetsResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAffectedAssetsResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeAffectedAssetsResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeAffectedAssetsResponseBodyPageInfo) SetCount(v int32) *DescribeAffectedAssetsResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeAffectedAssetsResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeAffectedAssetsResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAffectedAssetsResponseBodyPageInfo) SetPageSize(v int32) *DescribeAffectedAssetsResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeAffectedAssetsResponseBodyPageInfo) SetTotalCount(v int32) *DescribeAffectedAssetsResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeAffectedAssetsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAffectedAssetsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAffectedAssetsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAffectedAssetsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAffectedAssetsResponse) SetHeaders(v map[string]*string) *DescribeAffectedAssetsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAffectedAssetsResponse) SetStatusCode(v int32) *DescribeAffectedAssetsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAffectedAssetsResponse) SetBody(v *DescribeAffectedAssetsResponseBody) *DescribeAffectedAssetsResponse {
	s.Body = v
	return s
}

type DescribeAffectedMaliciousFileImagesRequest struct {
	// The ID of the container cluster.
	//
	// >  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the cluster.
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	// The ID of the container.
	ContainerId *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	// The number of the page to return. Pages start from page **1**. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The name of the container image.
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The image digest.
	ImageDigest *string `json:"ImageDigest,omitempty" xml:"ImageDigest,omitempty"`
	// The image layer.
	ImageLayer *string `json:"ImageLayer,omitempty" xml:"ImageLayer,omitempty"`
	// The tag that is added to the image.
	ImageTag *string `json:"ImageTag,omitempty" xml:"ImageTag,omitempty"`
	// The language of the content within the request and the response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The severity of the malicious image sample. Separate multiple severities with commas (,). Valid values: serious suspicious remind
	Levels *string `json:"Levels,omitempty" xml:"Levels,omitempty"`
	// The MD5 hash value of the malicious image sample.
	//
	// >  You can call the [DescribeGroupedMaliciousFiles](~~DescribeGroupedMaliciousFiles~~) operation to query the MD5 hash values of malicious image samples.
	MaliciousMd5 *string `json:"MaliciousMd5,omitempty" xml:"MaliciousMd5,omitempty"`
	// The namespace.
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The pod.
	Pod *string `json:"Pod,omitempty" xml:"Pod,omitempty"`
	// The ID of the image repository.
	//
	// >  You can call the [ListRepository](~~ListRepository~~) operation to query the IDs of image repositories from the value of the **RepoId** response parameter.
	RepoId *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	// The ID of the container image.
	//
	// >  You can call the [ListRepository](~~ListRepository~~) operation to query the IDs of container images from the value of the **InstanceId** response parameter.
	RepoInstanceId *string `json:"RepoInstanceId,omitempty" xml:"RepoInstanceId,omitempty"`
	// The name of the image repository.
	//
	// >  Fuzzy match is supported.
	RepoName *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	// The namespace to which the image repository belongs.
	//
	// >  Fuzzy match is supported.
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	// The region ID of the image repository. Valid values:
	//
	// *   **cn-beijing**: China (Beijing)
	// *   **cn-zhangjiakou**: China (Zhangjiakou)
	// *   **cn-hangzhou**: China (Hangzhou)
	// *   **cn-shanghai**: China (Shanghai)
	// *   **cn-shenzhen**: China (Shenzhen)
	// *   **cn-hongkong**: China (Hong Kong)
	// *   **ap-southeast-1**: Singapore
	// *   **ap-southeast-5**: Indonesia (Jakarta)
	// *   **us-east-1**: US (Virginia)
	// *   **us-west-1**: US (Silicon Valley)
	// *   **eu-central-1**: Germany (Frankfurt)
	// *   **eu-west-1**: UK (London)
	// *   **ap-south-1**: India (Mumbai)
	RepoRegionId *string `json:"RepoRegionId,omitempty" xml:"RepoRegionId,omitempty"`
	// The types of the assets that you want to scan.
	ScanRange []*string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty" type:"Repeated"`
}

func (s DescribeAffectedMaliciousFileImagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAffectedMaliciousFileImagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetClusterId(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetClusterName(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.ClusterName = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetContainerId(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.ContainerId = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetCurrentPage(v int32) *DescribeAffectedMaliciousFileImagesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetImage(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.Image = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetImageDigest(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.ImageDigest = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetImageLayer(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.ImageLayer = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetImageTag(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.ImageTag = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetLang(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetLevels(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.Levels = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetMaliciousMd5(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.MaliciousMd5 = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetNamespace(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetPageSize(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetPod(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.Pod = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetRepoId(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.RepoId = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetRepoInstanceId(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.RepoInstanceId = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetRepoName(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.RepoName = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetRepoNamespace(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetRepoRegionId(v string) *DescribeAffectedMaliciousFileImagesRequest {
	s.RepoRegionId = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesRequest) SetScanRange(v []*string) *DescribeAffectedMaliciousFileImagesRequest {
	s.ScanRange = v
	return s
}

type DescribeAffectedMaliciousFileImagesResponseBody struct {
	// An array consisting of the images that have malicious image samples.
	AffectedMaliciousFileImagesResponse []*DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse `json:"AffectedMaliciousFileImagesResponse,omitempty" xml:"AffectedMaliciousFileImagesResponse,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *DescribeAffectedMaliciousFileImagesResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAffectedMaliciousFileImagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAffectedMaliciousFileImagesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAffectedMaliciousFileImagesResponseBody) SetAffectedMaliciousFileImagesResponse(v []*DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) *DescribeAffectedMaliciousFileImagesResponseBody {
	s.AffectedMaliciousFileImagesResponse = v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBody) SetPageInfo(v *DescribeAffectedMaliciousFileImagesResponseBodyPageInfo) *DescribeAffectedMaliciousFileImagesResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBody) SetRequestId(v string) *DescribeAffectedMaliciousFileImagesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse struct {
	// The ID of the cluster.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the cluster.
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	// The ID of the container.
	ContainerId *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	// The image digest.
	Digest *string `json:"Digest,omitempty" xml:"Digest,omitempty"`
	// The URL to download the malicious image sample.
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	// The path to the image file.
	FilePath *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	// The timestamp of the first scan.
	FirstScanTimestamp *int64 `json:"FirstScanTimestamp,omitempty" xml:"FirstScanTimestamp,omitempty"`
	// The text that is highlighted.
	HighLight *string `json:"HighLight,omitempty" xml:"HighLight,omitempty"`
	// The name of the image.
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The UUID of the image.
	ImageUuid    *string `json:"ImageUuid,omitempty" xml:"ImageUuid,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InternetIp   *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	IntranetIp   *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The timestamp of the last scan.
	LatestScanTimestamp *int64 `json:"LatestScanTimestamp,omitempty" xml:"LatestScanTimestamp,omitempty"`
	// The timestamp of the last verification.
	LatestVerifyTimestamp *int64 `json:"LatestVerifyTimestamp,omitempty" xml:"LatestVerifyTimestamp,omitempty"`
	// The image layer.
	Layer *string `json:"Layer,omitempty" xml:"Layer,omitempty"`
	// The severity of the malicious image sample. Valid values:
	//
	// *   **serious**
	// *   **suspicious**
	// *   **remind**
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The MD5 hash value of the malicious image sample.
	MaliciousMd5 *string `json:"MaliciousMd5,omitempty" xml:"MaliciousMd5,omitempty"`
	// The namespace to which the image repository belongs.
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The pod.
	Pod *string `json:"Pod,omitempty" xml:"Pod,omitempty"`
	// The ID of the image repository.
	RepoId *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	// The ID of the container image.
	RepoInstanceId *string `json:"RepoInstanceId,omitempty" xml:"RepoInstanceId,omitempty"`
	// The name of the image repository.
	RepoName *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	// The region ID of the image repository.
	RepoRegionId *string `json:"RepoRegionId,omitempty" xml:"RepoRegionId,omitempty"`
	// The handling status of the malicious image sample. Valid values:
	//
	// *   **0**: unhandled
	// *   **1**: handled
	// *   **2**: verifying
	// *   **3**: added to the whitelist
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tag that is added to the image.
	Tag        *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	TargetId   *string `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	TargetName *string `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	Uuid       *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetClusterId(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.ClusterId = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetClusterName(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.ClusterName = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetContainerId(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.ContainerId = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetDigest(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.Digest = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetDownloadUrl(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.DownloadUrl = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetFilePath(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.FilePath = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetFirstScanTimestamp(v int64) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.FirstScanTimestamp = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetHighLight(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.HighLight = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetImage(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.Image = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetImageUuid(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.ImageUuid = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetInstanceName(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.InstanceName = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetInternetIp(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.InternetIp = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetIntranetIp(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.IntranetIp = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetLatestScanTimestamp(v int64) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.LatestScanTimestamp = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetLatestVerifyTimestamp(v int64) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.LatestVerifyTimestamp = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetLayer(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.Layer = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetLevel(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.Level = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetMaliciousMd5(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.MaliciousMd5 = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetNamespace(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.Namespace = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetPod(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.Pod = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetRepoId(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.RepoId = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetRepoInstanceId(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.RepoInstanceId = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetRepoName(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.RepoName = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetRepoRegionId(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.RepoRegionId = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetStatus(v int32) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.Status = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetTag(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.Tag = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetTargetId(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.TargetId = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetTargetName(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.TargetName = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetTargetType(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.TargetType = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse) SetUuid(v string) *DescribeAffectedMaliciousFileImagesResponseBodyAffectedMaliciousFileImagesResponse {
	s.Uuid = &v
	return s
}

type DescribeAffectedMaliciousFileImagesResponseBodyPageInfo struct {
	// The number of images that have malicious image samples returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page. Pages start from page **1**. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of images that have malicious image samples.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAffectedMaliciousFileImagesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeAffectedMaliciousFileImagesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyPageInfo) SetCount(v int32) *DescribeAffectedMaliciousFileImagesResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeAffectedMaliciousFileImagesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyPageInfo) SetPageSize(v int32) *DescribeAffectedMaliciousFileImagesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponseBodyPageInfo) SetTotalCount(v int32) *DescribeAffectedMaliciousFileImagesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeAffectedMaliciousFileImagesResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAffectedMaliciousFileImagesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAffectedMaliciousFileImagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAffectedMaliciousFileImagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAffectedMaliciousFileImagesResponse) SetHeaders(v map[string]*string) *DescribeAffectedMaliciousFileImagesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponse) SetStatusCode(v int32) *DescribeAffectedMaliciousFileImagesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAffectedMaliciousFileImagesResponse) SetBody(v *DescribeAffectedMaliciousFileImagesResponseBody) *DescribeAffectedMaliciousFileImagesResponse {
	s.Body = v
	return s
}

type DescribeAgentInstallStatusRequest struct {
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	Uuids    *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeAgentInstallStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAgentInstallStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeAgentInstallStatusRequest) SetLang(v string) *DescribeAgentInstallStatusRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAgentInstallStatusRequest) SetSourceIp(v string) *DescribeAgentInstallStatusRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeAgentInstallStatusRequest) SetUuids(v string) *DescribeAgentInstallStatusRequest {
	s.Uuids = &v
	return s
}

type DescribeAgentInstallStatusResponseBody struct {
	AegisClientInvokeStatusResponseList []*DescribeAgentInstallStatusResponseBodyAegisClientInvokeStatusResponseList `json:"AegisClientInvokeStatusResponseList,omitempty" xml:"AegisClientInvokeStatusResponseList,omitempty" type:"Repeated"`
	RequestId                           *string                                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAgentInstallStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAgentInstallStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAgentInstallStatusResponseBody) SetAegisClientInvokeStatusResponseList(v []*DescribeAgentInstallStatusResponseBodyAegisClientInvokeStatusResponseList) *DescribeAgentInstallStatusResponseBody {
	s.AegisClientInvokeStatusResponseList = v
	return s
}

func (s *DescribeAgentInstallStatusResponseBody) SetRequestId(v string) *DescribeAgentInstallStatusResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAgentInstallStatusResponseBodyAegisClientInvokeStatusResponseList struct {
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
	ResuleCode *string `json:"ResuleCode,omitempty" xml:"ResuleCode,omitempty"`
	Result     *int32  `json:"Result,omitempty" xml:"Result,omitempty"`
	Uuid       *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeAgentInstallStatusResponseBodyAegisClientInvokeStatusResponseList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAgentInstallStatusResponseBodyAegisClientInvokeStatusResponseList) GoString() string {
	return s.String()
}

func (s *DescribeAgentInstallStatusResponseBodyAegisClientInvokeStatusResponseList) SetMessage(v string) *DescribeAgentInstallStatusResponseBodyAegisClientInvokeStatusResponseList {
	s.Message = &v
	return s
}

func (s *DescribeAgentInstallStatusResponseBodyAegisClientInvokeStatusResponseList) SetResuleCode(v string) *DescribeAgentInstallStatusResponseBodyAegisClientInvokeStatusResponseList {
	s.ResuleCode = &v
	return s
}

func (s *DescribeAgentInstallStatusResponseBodyAegisClientInvokeStatusResponseList) SetResult(v int32) *DescribeAgentInstallStatusResponseBodyAegisClientInvokeStatusResponseList {
	s.Result = &v
	return s
}

func (s *DescribeAgentInstallStatusResponseBodyAegisClientInvokeStatusResponseList) SetUuid(v string) *DescribeAgentInstallStatusResponseBodyAegisClientInvokeStatusResponseList {
	s.Uuid = &v
	return s
}

type DescribeAgentInstallStatusResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAgentInstallStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAgentInstallStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAgentInstallStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeAgentInstallStatusResponse) SetHeaders(v map[string]*string) *DescribeAgentInstallStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeAgentInstallStatusResponse) SetStatusCode(v int32) *DescribeAgentInstallStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAgentInstallStatusResponse) SetBody(v *DescribeAgentInstallStatusResponseBody) *DescribeAgentInstallStatusResponse {
	s.Body = v
	return s
}

type DescribeAlarmEventDetailRequest struct {
	// The unique ID of the alert event.
	//
	// >  To query the details of an alert event, you must specify the unique ID of the alert event. You can call the [DescribeAlarmEventList](~~DescribeAlarmEventList~~) operation to query the unique IDs of alert events.
	AlarmUniqueInfo *string `json:"AlarmUniqueInfo,omitempty" xml:"AlarmUniqueInfo,omitempty"`
	// The ID of the request source. Set the value to **sas**.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeAlarmEventDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventDetailRequest) SetAlarmUniqueInfo(v string) *DescribeAlarmEventDetailRequest {
	s.AlarmUniqueInfo = &v
	return s
}

func (s *DescribeAlarmEventDetailRequest) SetFrom(v string) *DescribeAlarmEventDetailRequest {
	s.From = &v
	return s
}

func (s *DescribeAlarmEventDetailRequest) SetLang(v string) *DescribeAlarmEventDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAlarmEventDetailRequest) SetSourceIp(v string) *DescribeAlarmEventDetailRequest {
	s.SourceIp = &v
	return s
}

type DescribeAlarmEventDetailResponseBody struct {
	// The details about the alert event.
	Data *DescribeAlarmEventDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAlarmEventDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventDetailResponseBody) SetData(v *DescribeAlarmEventDetailResponseBodyData) *DescribeAlarmEventDetailResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAlarmEventDetailResponseBody) SetRequestId(v string) *DescribeAlarmEventDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAlarmEventDetailResponseBodyData struct {
	// The name of the alert event.
	AlarmEventAliasName *string `json:"AlarmEventAliasName,omitempty" xml:"AlarmEventAliasName,omitempty"`
	// The description of the alert event.
	AlarmEventDesc *string `json:"AlarmEventDesc,omitempty" xml:"AlarmEventDesc,omitempty"`
	// The unique ID of the alert event.
	//
	// >  To query the details about an alert event, you must specify the unique ID of the alert event. You can call the [DescribeAlarmEventList](~~DescribeAlarmEventList~~) operation to query the unique IDs of alert events.
	AlarmUniqueInfo *string `json:"AlarmUniqueInfo,omitempty" xml:"AlarmUniqueInfo,omitempty"`
	// The name of the container application.
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// Indicates whether the online handling of the alert event is supported. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	CanBeDealOnLine *bool `json:"CanBeDealOnLine,omitempty" xml:"CanBeDealOnLine,omitempty"`
	// Indicates whether you can cancel marking the alert event as a false positive. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	CanCancelFault *bool `json:"CanCancelFault,omitempty" xml:"CanCancelFault,omitempty"`
	// An array consisting of the cause of the alert event, which can be used to trace the alert event.
	CauseDetails []*DescribeAlarmEventDetailResponseBodyDataCauseDetails `json:"CauseDetails,omitempty" xml:"CauseDetails,omitempty" type:"Repeated"`
	// Indicates whether the Safeguard Mode For Major Activities mode is enabled.
	ContainHwMode *bool `json:"ContainHwMode,omitempty" xml:"ContainHwMode,omitempty"`
	// The ID of the container application.
	ContainerId *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	// The ID of the image to which the container belongs.
	ContainerImageId *string `json:"ContainerImageId,omitempty" xml:"ContainerImageId,omitempty"`
	// The name of the image to which the container belongs.
	ContainerImageName *string `json:"ContainerImageName,omitempty" xml:"ContainerImageName,omitempty"`
	// The data source of the alert event.
	DataSource *string `json:"DataSource,omitempty" xml:"DataSource,omitempty"`
	// The timestamp when the alert event ends. Unit: milliseconds.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The name of the instance.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the associated instance.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the associated instance.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The ID of the Kubernetes cluster.
	K8sClusterId *string `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	// The name of the Kubernetes cluster.
	K8sClusterName *string `json:"K8sClusterName,omitempty" xml:"K8sClusterName,omitempty"`
	// The namespace of the Kubernetes cluster.
	K8sNamespace *string `json:"K8sNamespace,omitempty" xml:"K8sNamespace,omitempty"`
	// The ID of the Kubernetes cluster node.
	K8sNodeId *string `json:"K8sNodeId,omitempty" xml:"K8sNodeId,omitempty"`
	// The name of the Kubernetes cluster node.
	K8sNodeName *string `json:"K8sNodeName,omitempty" xml:"K8sNodeName,omitempty"`
	// The name of the Kubernetes pod.
	K8sPodName *string `json:"K8sPodName,omitempty" xml:"K8sPodName,omitempty"`
	// The severity of the alert event. Valid values:
	//
	// *   **serious**
	// *   **suspicious**
	// *   **remind**
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The solution to the alert event.
	Solution *string `json:"Solution,omitempty" xml:"Solution,omitempty"`
	// The timestamp when the alert event starts. Unit: milliseconds.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The alert type of the alert event. Valid values:
	//
	// *   Suspicious process
	// *   Webshell
	// *   Unusual logon
	// *   Exception
	// *   Sensitive file tampering
	// *   Malicious process (cloud threat detection)
	// *   Suspicious network connection
	// *   Other
	// *   Abnormal account
	// *   Application intrusion event
	// *   Cloud threat detection
	// *   Precise defense
	// *   Application whitelist
	// *   Persistent webshell
	// *   Web application threat detection
	// *   Malicious script
	// *   Threat intelligence
	// *   Malicious network activity
	// *   Cluster exception
	// *   Webshell (on-premises threat detection)
	// *   Vulnerability exploitation
	// *   Malicious process (on-premises threat detection)
	// *   Trusted exception
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The instance UUID of the asset.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeAlarmEventDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetAlarmEventAliasName(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.AlarmEventAliasName = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetAlarmEventDesc(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.AlarmEventDesc = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetAlarmUniqueInfo(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.AlarmUniqueInfo = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetAppName(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.AppName = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetCanBeDealOnLine(v bool) *DescribeAlarmEventDetailResponseBodyData {
	s.CanBeDealOnLine = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetCanCancelFault(v bool) *DescribeAlarmEventDetailResponseBodyData {
	s.CanCancelFault = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetCauseDetails(v []*DescribeAlarmEventDetailResponseBodyDataCauseDetails) *DescribeAlarmEventDetailResponseBodyData {
	s.CauseDetails = v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetContainHwMode(v bool) *DescribeAlarmEventDetailResponseBodyData {
	s.ContainHwMode = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetContainerId(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.ContainerId = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetContainerImageId(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.ContainerImageId = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetContainerImageName(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.ContainerImageName = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetDataSource(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.DataSource = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetEndTime(v int64) *DescribeAlarmEventDetailResponseBodyData {
	s.EndTime = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetInstanceName(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.InstanceName = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetInternetIp(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.InternetIp = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetIntranetIp(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.IntranetIp = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetK8sClusterId(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.K8sClusterId = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetK8sClusterName(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.K8sClusterName = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetK8sNamespace(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.K8sNamespace = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetK8sNodeId(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.K8sNodeId = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetK8sNodeName(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.K8sNodeName = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetK8sPodName(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.K8sPodName = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetLevel(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.Level = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetSolution(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.Solution = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetStartTime(v int64) *DescribeAlarmEventDetailResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetType(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.Type = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyData) SetUuid(v string) *DescribeAlarmEventDetailResponseBodyData {
	s.Uuid = &v
	return s
}

type DescribeAlarmEventDetailResponseBodyDataCauseDetails struct {
	// The key that is used to trace the alert event.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// An array consisting of the value that is used to trace the alert event.
	Value []*DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribeAlarmEventDetailResponseBodyDataCauseDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventDetailResponseBodyDataCauseDetails) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventDetailResponseBodyDataCauseDetails) SetKey(v string) *DescribeAlarmEventDetailResponseBodyDataCauseDetails {
	s.Key = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyDataCauseDetails) SetValue(v []*DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue) *DescribeAlarmEventDetailResponseBodyDataCauseDetails {
	s.Value = v
	return s
}

type DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue struct {
	// The name of the field that displays tracing information.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the field that displays tracing information. Valid values:
	//
	// *   **text**
	// *   **html**
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the field that displays tracing information.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue) SetName(v string) *DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue {
	s.Name = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue) SetType(v string) *DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue {
	s.Type = &v
	return s
}

func (s *DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue) SetValue(v string) *DescribeAlarmEventDetailResponseBodyDataCauseDetailsValue {
	s.Value = &v
	return s
}

type DescribeAlarmEventDetailResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAlarmEventDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAlarmEventDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventDetailResponse) SetHeaders(v map[string]*string) *DescribeAlarmEventDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlarmEventDetailResponse) SetStatusCode(v int32) *DescribeAlarmEventDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlarmEventDetailResponse) SetBody(v *DescribeAlarmEventDetailResponseBody) *DescribeAlarmEventDetailResponse {
	s.Body = v
	return s
}

type DescribeAlarmEventListRequest struct {
	// The name of the alert event.
	//
	// >  You can call the [DescribeNsasSuspEventType](~~DescribeNsasSuspEventType~~) operation to query the names of alert events.
	AlarmEventName *string `json:"AlarmEventName,omitempty" xml:"AlarmEventName,omitempty"`
	// The type of the alert event.
	//
	// >  You can call the [DescribeNsasSuspEventType](~~DescribeNsasSuspEventType~~) operation to query the types of alert events.
	AlarmEventType *string `json:"AlarmEventType,omitempty" xml:"AlarmEventType,omitempty"`
	// The number of the page to return. Pages start from page **1**. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether the alert event is handled. Valid values:
	//
	// *   **N**: unhandled
	// *   **Y**: handled
	Dealed *string `json:"Dealed,omitempty" xml:"Dealed,omitempty"`
	// The ID of the request source. Set the value to **sas**, which indicates that the request is sent from Security Center.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// The ID of the asset group to which the affected asset belongs.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the alert event.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The severity of the alert event. Separate multiple severities with commas (,). Valid values:
	//
	// *   **serious**
	// *   **suspicious**
	// *   **remind**
	Levels *string `json:"Levels,omitempty" xml:"Levels,omitempty"`
	// An array that consists of the handling result codes of alert events.
	OperateErrorCodeList []*string `json:"OperateErrorCodeList,omitempty" xml:"OperateErrorCodeList,omitempty" type:"Repeated"`
	// The time when the handling operation ends.
	OperateTimeEnd *string `json:"OperateTimeEnd,omitempty" xml:"OperateTimeEnd,omitempty"`
	// The time when the handing operation starts.
	OperateTimeStart *string `json:"OperateTimeStart,omitempty" xml:"OperateTimeStart,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The name of the alert or the information about the asset.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The custom sorting field. Default value: **operateTime**. Valid values:
	//
	// *   **lastTime**: the latest occurrence time
	// *   **operateTime**: the handling time
	//
	// >  This parameter takes effect if you set the **Dealed** parameter to Y.
	SortColumn *string `json:"SortColumn,omitempty" xml:"SortColumn,omitempty"`
	// The custom sorting order. Default value: **desc**. Valid values:
	//
	// *   **asc**: the ascending order
	// *   **desc**: the descending order
	//
	// >  This parameter takes effect if you set the **Dealed** parameter to Y.
	SortType *string `json:"SortType,omitempty" xml:"SortType,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The tactic ID of ATT\&CK.
	TacticId *string `json:"TacticId,omitempty" xml:"TacticId,omitempty"`
	// The end time when the alert event was last detected.
	TimeEnd *string `json:"TimeEnd,omitempty" xml:"TimeEnd,omitempty"`
	// The start time when the alert event was last detected.
	TimeStart *string `json:"TimeStart,omitempty" xml:"TimeStart,omitempty"`
	// The ID of the alert event.
	UniqueInfo *string `json:"UniqueInfo,omitempty" xml:"UniqueInfo,omitempty"`
	// The UUIDs of the assets. Separate multiple UUIDs with commas (,).
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeAlarmEventListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventListRequest) SetAlarmEventName(v string) *DescribeAlarmEventListRequest {
	s.AlarmEventName = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetAlarmEventType(v string) *DescribeAlarmEventListRequest {
	s.AlarmEventType = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetCurrentPage(v int32) *DescribeAlarmEventListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetDealed(v string) *DescribeAlarmEventListRequest {
	s.Dealed = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetFrom(v string) *DescribeAlarmEventListRequest {
	s.From = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetGroupId(v string) *DescribeAlarmEventListRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetId(v int64) *DescribeAlarmEventListRequest {
	s.Id = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetLang(v string) *DescribeAlarmEventListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetLevels(v string) *DescribeAlarmEventListRequest {
	s.Levels = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetOperateErrorCodeList(v []*string) *DescribeAlarmEventListRequest {
	s.OperateErrorCodeList = v
	return s
}

func (s *DescribeAlarmEventListRequest) SetOperateTimeEnd(v string) *DescribeAlarmEventListRequest {
	s.OperateTimeEnd = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetOperateTimeStart(v string) *DescribeAlarmEventListRequest {
	s.OperateTimeStart = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetPageSize(v string) *DescribeAlarmEventListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetRemark(v string) *DescribeAlarmEventListRequest {
	s.Remark = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetSortColumn(v string) *DescribeAlarmEventListRequest {
	s.SortColumn = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetSortType(v string) *DescribeAlarmEventListRequest {
	s.SortType = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetSourceIp(v string) *DescribeAlarmEventListRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetTacticId(v string) *DescribeAlarmEventListRequest {
	s.TacticId = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetTimeEnd(v string) *DescribeAlarmEventListRequest {
	s.TimeEnd = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetTimeStart(v string) *DescribeAlarmEventListRequest {
	s.TimeStart = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetUniqueInfo(v string) *DescribeAlarmEventListRequest {
	s.UniqueInfo = &v
	return s
}

func (s *DescribeAlarmEventListRequest) SetUuids(v string) *DescribeAlarmEventListRequest {
	s.Uuids = &v
	return s
}

type DescribeAlarmEventListResponseBody struct {
	// The pagination information.
	PageInfo *DescribeAlarmEventListResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of the alert events.
	SuspEvents []*DescribeAlarmEventListResponseBodySuspEvents `json:"SuspEvents,omitempty" xml:"SuspEvents,omitempty" type:"Repeated"`
}

func (s DescribeAlarmEventListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventListResponseBody) SetPageInfo(v *DescribeAlarmEventListResponseBodyPageInfo) *DescribeAlarmEventListResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeAlarmEventListResponseBody) SetRequestId(v string) *DescribeAlarmEventListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlarmEventListResponseBody) SetSuspEvents(v []*DescribeAlarmEventListResponseBodySuspEvents) *DescribeAlarmEventListResponseBody {
	s.SuspEvents = v
	return s
}

type DescribeAlarmEventListResponseBodyPageInfo struct {
	// The number of entries returned per page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAlarmEventListResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventListResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventListResponseBodyPageInfo) SetCount(v int32) *DescribeAlarmEventListResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeAlarmEventListResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodyPageInfo) SetPageSize(v int32) *DescribeAlarmEventListResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodyPageInfo) SetTotalCount(v int32) *DescribeAlarmEventListResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeAlarmEventListResponseBodySuspEvents struct {
	// The name of the alert event.
	AlarmEventName *string `json:"AlarmEventName,omitempty" xml:"AlarmEventName,omitempty"`
	// The original parent name of the alert event.
	AlarmEventNameOriginal *string `json:"AlarmEventNameOriginal,omitempty" xml:"AlarmEventNameOriginal,omitempty"`
	// The type of the alert event.
	AlarmEventType *string `json:"AlarmEventType,omitempty" xml:"AlarmEventType,omitempty"`
	// The ID of the alert event.
	AlarmUniqueInfo *string `json:"AlarmUniqueInfo,omitempty" xml:"AlarmUniqueInfo,omitempty"`
	// Indicates whether the online processing of the alert event is supported, such as quarantining the source file of the malicious process, adding the alert event to the whitelist, and ignoring the alert event. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	CanBeDealOnLine *bool `json:"CanBeDealOnLine,omitempty" xml:"CanBeDealOnLine,omitempty"`
	// Indicates whether you can cancel marking the alert event as a false positive. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	CanCancelFault *bool `json:"CanCancelFault,omitempty" xml:"CanCancelFault,omitempty"`
	// The data source of the alert event.
	DataSource *string `json:"DataSource,omitempty" xml:"DataSource,omitempty"`
	// Indicates whether the alert event is handled. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Dealed *bool `json:"Dealed,omitempty" xml:"Dealed,omitempty"`
	// The description of the alert event.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The timestamp when the alert event was last detected. Unit: milliseconds.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The timestamp when the alert event was last modified. Unit: milliseconds.
	GmtModified *int64 `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// Indicates whether the alert event has tracing information. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	HasTraceInfo *bool `json:"HasTraceInfo,omitempty" xml:"HasTraceInfo,omitempty"`
	// The ID of the affected asset.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the affected asset.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the affected asset.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the affected asset.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The risk level of the alert event. Valid values:
	//
	// *   **serious**
	// *   **suspicious**
	// *   **remind**
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The handling result code of the alert event.
	OperateErrorCode *string `json:"OperateErrorCode,omitempty" xml:"OperateErrorCode,omitempty"`
	// The timestamp when the alert event was handled. Unit: milliseconds.
	OperateTime *int64 `json:"OperateTime,omitempty" xml:"OperateTime,omitempty"`
	// The edition of Security Center in which the alert event can be detected. Valid values:
	//
	// *   **0**: Basic edition
	// *   **1**: Advanced edition
	// *   **2**: Enterprise edition
	SaleVersion *string `json:"SaleVersion,omitempty" xml:"SaleVersion,omitempty"`
	// The IDs of the associated exceptions.
	SecurityEventIds *string `json:"SecurityEventIds,omitempty" xml:"SecurityEventIds,omitempty"`
	// The solution to the alert event.
	Solution *string `json:"Solution,omitempty" xml:"Solution,omitempty"`
	// The stage at which the attack or intrusion is detected.
	Stages *string `json:"Stages,omitempty" xml:"Stages,omitempty"`
	// The timestamp when the alert event starts. Unit: milliseconds.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The number of associated exceptions.
	SuspiciousEventCount *int32 `json:"SuspiciousEventCount,omitempty" xml:"SuspiciousEventCount,omitempty"`
	// An array that consists of the stage information about ATT\&CK.
	TacticItems []*DescribeAlarmEventListResponseBodySuspEventsTacticItems `json:"TacticItems,omitempty" xml:"TacticItems,omitempty" type:"Repeated"`
	// The ID of the associated instance.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeAlarmEventListResponseBodySuspEvents) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventListResponseBodySuspEvents) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetAlarmEventName(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.AlarmEventName = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetAlarmEventNameOriginal(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.AlarmEventNameOriginal = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetAlarmEventType(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.AlarmEventType = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetAlarmUniqueInfo(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.AlarmUniqueInfo = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetCanBeDealOnLine(v bool) *DescribeAlarmEventListResponseBodySuspEvents {
	s.CanBeDealOnLine = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetCanCancelFault(v bool) *DescribeAlarmEventListResponseBodySuspEvents {
	s.CanCancelFault = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetDataSource(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.DataSource = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetDealed(v bool) *DescribeAlarmEventListResponseBodySuspEvents {
	s.Dealed = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetDescription(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.Description = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetEndTime(v int64) *DescribeAlarmEventListResponseBodySuspEvents {
	s.EndTime = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetGmtModified(v int64) *DescribeAlarmEventListResponseBodySuspEvents {
	s.GmtModified = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetHasTraceInfo(v bool) *DescribeAlarmEventListResponseBodySuspEvents {
	s.HasTraceInfo = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetInstanceId(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.InstanceId = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetInstanceName(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.InstanceName = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetInternetIp(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.InternetIp = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetIntranetIp(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.IntranetIp = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetLevel(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.Level = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetOperateErrorCode(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.OperateErrorCode = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetOperateTime(v int64) *DescribeAlarmEventListResponseBodySuspEvents {
	s.OperateTime = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetSaleVersion(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.SaleVersion = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetSecurityEventIds(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.SecurityEventIds = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetSolution(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.Solution = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetStages(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.Stages = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetStartTime(v int64) *DescribeAlarmEventListResponseBodySuspEvents {
	s.StartTime = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetSuspiciousEventCount(v int32) *DescribeAlarmEventListResponseBodySuspEvents {
	s.SuspiciousEventCount = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetTacticItems(v []*DescribeAlarmEventListResponseBodySuspEventsTacticItems) *DescribeAlarmEventListResponseBodySuspEvents {
	s.TacticItems = v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEvents) SetUuid(v string) *DescribeAlarmEventListResponseBodySuspEvents {
	s.Uuid = &v
	return s
}

type DescribeAlarmEventListResponseBodySuspEventsTacticItems struct {
	// The tactic name of ATT\&CK.
	TacticDisplayName *string `json:"TacticDisplayName,omitempty" xml:"TacticDisplayName,omitempty"`
	// The tactic ID of ATT\&CK.
	TacticId *string `json:"TacticId,omitempty" xml:"TacticId,omitempty"`
}

func (s DescribeAlarmEventListResponseBodySuspEventsTacticItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventListResponseBodySuspEventsTacticItems) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventListResponseBodySuspEventsTacticItems) SetTacticDisplayName(v string) *DescribeAlarmEventListResponseBodySuspEventsTacticItems {
	s.TacticDisplayName = &v
	return s
}

func (s *DescribeAlarmEventListResponseBodySuspEventsTacticItems) SetTacticId(v string) *DescribeAlarmEventListResponseBodySuspEventsTacticItems {
	s.TacticId = &v
	return s
}

type DescribeAlarmEventListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAlarmEventListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAlarmEventListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventListResponse) SetHeaders(v map[string]*string) *DescribeAlarmEventListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlarmEventListResponse) SetStatusCode(v int32) *DescribeAlarmEventListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlarmEventListResponse) SetBody(v *DescribeAlarmEventListResponseBody) *DescribeAlarmEventListResponse {
	s.Body = v
	return s
}

type DescribeAlarmEventStackInfoRequest struct {
	// The name of the event.
	//
	// >  You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the names of events.
	EventName *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The ID of the alert event.
	UniqueInfo *string `json:"UniqueInfo,omitempty" xml:"UniqueInfo,omitempty"`
	// The UUID of the server to query.
	//
	// >  You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the UUIDs of servers.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeAlarmEventStackInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventStackInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventStackInfoRequest) SetEventName(v string) *DescribeAlarmEventStackInfoRequest {
	s.EventName = &v
	return s
}

func (s *DescribeAlarmEventStackInfoRequest) SetLang(v string) *DescribeAlarmEventStackInfoRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAlarmEventStackInfoRequest) SetSourceIp(v string) *DescribeAlarmEventStackInfoRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeAlarmEventStackInfoRequest) SetUniqueInfo(v string) *DescribeAlarmEventStackInfoRequest {
	s.UniqueInfo = &v
	return s
}

func (s *DescribeAlarmEventStackInfoRequest) SetUuid(v string) *DescribeAlarmEventStackInfoRequest {
	s.Uuid = &v
	return s
}

type DescribeAlarmEventStackInfoResponseBody struct {
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The stack information of the alert details.
	StackInfo *string `json:"StackInfo,omitempty" xml:"StackInfo,omitempty"`
}

func (s DescribeAlarmEventStackInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventStackInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventStackInfoResponseBody) SetRequestId(v string) *DescribeAlarmEventStackInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlarmEventStackInfoResponseBody) SetStackInfo(v string) *DescribeAlarmEventStackInfoResponseBody {
	s.StackInfo = &v
	return s
}

type DescribeAlarmEventStackInfoResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAlarmEventStackInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAlarmEventStackInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlarmEventStackInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlarmEventStackInfoResponse) SetHeaders(v map[string]*string) *DescribeAlarmEventStackInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlarmEventStackInfoResponse) SetStatusCode(v int32) *DescribeAlarmEventStackInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlarmEventStackInfoResponse) SetBody(v *DescribeAlarmEventStackInfoResponseBody) *DescribeAlarmEventStackInfoResponse {
	s.Body = v
	return s
}

type DescribeAllEntityResponseBody struct {
	// An array that consists of servers.
	EntityList []*DescribeAllEntityResponseBodyEntityList `json:"EntityList,omitempty" xml:"EntityList,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAllEntityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllEntityResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAllEntityResponseBody) SetEntityList(v []*DescribeAllEntityResponseBodyEntityList) *DescribeAllEntityResponseBody {
	s.EntityList = v
	return s
}

func (s *DescribeAllEntityResponseBody) SetRequestId(v string) *DescribeAllEntityResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAllEntityResponseBodyEntityList struct {
	// The ID of the asset group.
	GroupId *int32 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The IP address of the server.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The operating system of the server. Valid values:
	//
	// *   **linux**
	// *   **windows**
	Os *string `json:"Os,omitempty" xml:"Os,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeAllEntityResponseBodyEntityList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllEntityResponseBodyEntityList) GoString() string {
	return s.String()
}

func (s *DescribeAllEntityResponseBodyEntityList) SetGroupId(v int32) *DescribeAllEntityResponseBodyEntityList {
	s.GroupId = &v
	return s
}

func (s *DescribeAllEntityResponseBodyEntityList) SetInstanceName(v string) *DescribeAllEntityResponseBodyEntityList {
	s.InstanceName = &v
	return s
}

func (s *DescribeAllEntityResponseBodyEntityList) SetInternetIp(v string) *DescribeAllEntityResponseBodyEntityList {
	s.InternetIp = &v
	return s
}

func (s *DescribeAllEntityResponseBodyEntityList) SetIntranetIp(v string) *DescribeAllEntityResponseBodyEntityList {
	s.IntranetIp = &v
	return s
}

func (s *DescribeAllEntityResponseBodyEntityList) SetIp(v string) *DescribeAllEntityResponseBodyEntityList {
	s.Ip = &v
	return s
}

func (s *DescribeAllEntityResponseBodyEntityList) SetOs(v string) *DescribeAllEntityResponseBodyEntityList {
	s.Os = &v
	return s
}

func (s *DescribeAllEntityResponseBodyEntityList) SetUuid(v string) *DescribeAllEntityResponseBodyEntityList {
	s.Uuid = &v
	return s
}

type DescribeAllEntityResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAllEntityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAllEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllEntityResponse) GoString() string {
	return s.String()
}

func (s *DescribeAllEntityResponse) SetHeaders(v map[string]*string) *DescribeAllEntityResponse {
	s.Headers = v
	return s
}

func (s *DescribeAllEntityResponse) SetStatusCode(v int32) *DescribeAllEntityResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAllEntityResponse) SetBody(v *DescribeAllEntityResponseBody) *DescribeAllEntityResponse {
	s.Body = v
	return s
}

type DescribeAllGroupsRequest struct {
	// The language of the content within the request and the response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s DescribeAllGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAllGroupsRequest) SetLang(v string) *DescribeAllGroupsRequest {
	s.Lang = &v
	return s
}

type DescribeAllGroupsResponseBody struct {
	// The total number of server groups.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// An array that consists of the information about server groups.
	Groups []*DescribeAllGroupsResponseBodyGroups `json:"Groups,omitempty" xml:"Groups,omitempty" type:"Repeated"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAllGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAllGroupsResponseBody) SetCount(v int32) *DescribeAllGroupsResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeAllGroupsResponseBody) SetGroups(v []*DescribeAllGroupsResponseBodyGroups) *DescribeAllGroupsResponseBody {
	s.Groups = v
	return s
}

func (s *DescribeAllGroupsResponseBody) SetRequestId(v string) *DescribeAllGroupsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAllGroupsResponseBodyGroups struct {
	// The type of the server group. Valid values:
	//
	// *   **0**: the default group
	// *   **1**: other groups
	GroupFlag *int32 `json:"GroupFlag,omitempty" xml:"GroupFlag,omitempty"`
	// The ID of the server group.
	GroupId *int32 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the server group.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s DescribeAllGroupsResponseBodyGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllGroupsResponseBodyGroups) GoString() string {
	return s.String()
}

func (s *DescribeAllGroupsResponseBodyGroups) SetGroupFlag(v int32) *DescribeAllGroupsResponseBodyGroups {
	s.GroupFlag = &v
	return s
}

func (s *DescribeAllGroupsResponseBodyGroups) SetGroupId(v int32) *DescribeAllGroupsResponseBodyGroups {
	s.GroupId = &v
	return s
}

func (s *DescribeAllGroupsResponseBodyGroups) SetGroupName(v string) *DescribeAllGroupsResponseBodyGroups {
	s.GroupName = &v
	return s
}

type DescribeAllGroupsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAllGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAllGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAllGroupsResponse) SetHeaders(v map[string]*string) *DescribeAllGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAllGroupsResponse) SetStatusCode(v int32) *DescribeAllGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAllGroupsResponse) SetBody(v *DescribeAllGroupsResponseBody) *DescribeAllGroupsResponse {
	s.Body = v
	return s
}

type DescribeAllImageBaselineRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s DescribeAllImageBaselineRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllImageBaselineRequest) GoString() string {
	return s.String()
}

func (s *DescribeAllImageBaselineRequest) SetLang(v string) *DescribeAllImageBaselineRequest {
	s.Lang = &v
	return s
}

type DescribeAllImageBaselineResponseBody struct {
	ImageBaselines *DescribeAllImageBaselineResponseBodyImageBaselines `json:"ImageBaselines,omitempty" xml:"ImageBaselines,omitempty" type:"Struct"`
	RequestId      *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAllImageBaselineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllImageBaselineResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAllImageBaselineResponseBody) SetImageBaselines(v *DescribeAllImageBaselineResponseBodyImageBaselines) *DescribeAllImageBaselineResponseBody {
	s.ImageBaselines = v
	return s
}

func (s *DescribeAllImageBaselineResponseBody) SetRequestId(v string) *DescribeAllImageBaselineResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAllImageBaselineResponseBodyImageBaselines struct {
	BaselineClassList []*DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassList `json:"BaselineClassList,omitempty" xml:"BaselineClassList,omitempty" type:"Repeated"`
}

func (s DescribeAllImageBaselineResponseBodyImageBaselines) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllImageBaselineResponseBodyImageBaselines) GoString() string {
	return s.String()
}

func (s *DescribeAllImageBaselineResponseBodyImageBaselines) SetBaselineClassList(v []*DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassList) *DescribeAllImageBaselineResponseBodyImageBaselines {
	s.BaselineClassList = v
	return s
}

type DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassList struct {
	Alias            *string                                                                                `json:"Alias,omitempty" xml:"Alias,omitempty"`
	BaselineNameList []*DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameList `json:"BaselineNameList,omitempty" xml:"BaselineNameList,omitempty" type:"Repeated"`
	ClassKey         *string                                                                                `json:"ClassKey,omitempty" xml:"ClassKey,omitempty"`
}

func (s DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassList) GoString() string {
	return s.String()
}

func (s *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassList) SetAlias(v string) *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassList {
	s.Alias = &v
	return s
}

func (s *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassList) SetBaselineNameList(v []*DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameList) *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassList {
	s.BaselineNameList = v
	return s
}

func (s *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassList) SetClassKey(v string) *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassList {
	s.ClassKey = &v
	return s
}

type DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameList struct {
	Alias            *string                                                                                                `json:"Alias,omitempty" xml:"Alias,omitempty"`
	BaselineItemList []*DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameListBaselineItemList `json:"BaselineItemList,omitempty" xml:"BaselineItemList,omitempty" type:"Repeated"`
	ClassKey         *string                                                                                                `json:"ClassKey,omitempty" xml:"ClassKey,omitempty"`
	NameKey          *string                                                                                                `json:"NameKey,omitempty" xml:"NameKey,omitempty"`
}

func (s DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameList) GoString() string {
	return s.String()
}

func (s *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameList) SetAlias(v string) *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameList {
	s.Alias = &v
	return s
}

func (s *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameList) SetBaselineItemList(v []*DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameListBaselineItemList) *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameList {
	s.BaselineItemList = v
	return s
}

func (s *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameList) SetClassKey(v string) *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameList {
	s.ClassKey = &v
	return s
}

func (s *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameList) SetNameKey(v string) *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameList {
	s.NameKey = &v
	return s
}

type DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameListBaselineItemList struct {
	Alias    *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	ClassKey *string `json:"ClassKey,omitempty" xml:"ClassKey,omitempty"`
	ItemKey  *string `json:"ItemKey,omitempty" xml:"ItemKey,omitempty"`
	NameKey  *string `json:"NameKey,omitempty" xml:"NameKey,omitempty"`
}

func (s DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameListBaselineItemList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameListBaselineItemList) GoString() string {
	return s.String()
}

func (s *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameListBaselineItemList) SetAlias(v string) *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameListBaselineItemList {
	s.Alias = &v
	return s
}

func (s *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameListBaselineItemList) SetClassKey(v string) *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameListBaselineItemList {
	s.ClassKey = &v
	return s
}

func (s *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameListBaselineItemList) SetItemKey(v string) *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameListBaselineItemList {
	s.ItemKey = &v
	return s
}

func (s *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameListBaselineItemList) SetNameKey(v string) *DescribeAllImageBaselineResponseBodyImageBaselinesBaselineClassListBaselineNameListBaselineItemList {
	s.NameKey = &v
	return s
}

type DescribeAllImageBaselineResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAllImageBaselineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAllImageBaselineResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllImageBaselineResponse) GoString() string {
	return s.String()
}

func (s *DescribeAllImageBaselineResponse) SetHeaders(v map[string]*string) *DescribeAllImageBaselineResponse {
	s.Headers = v
	return s
}

func (s *DescribeAllImageBaselineResponse) SetStatusCode(v int32) *DescribeAllImageBaselineResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAllImageBaselineResponse) SetBody(v *DescribeAllImageBaselineResponseBody) *DescribeAllImageBaselineResponse {
	s.Body = v
	return s
}

type DescribeAntiBruteForceRulesRequest struct {
	// The ID of the defense rule.
	// >  You can call the [DescribeAntiBruteForceRules](~~DescribeAntiBruteForceRules~~) operation to obtain the ID of the defense rule against brute-force attacks.
	Id              *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	ResourceOwnerId *int64 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeAntiBruteForceRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntiBruteForceRulesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntiBruteForceRulesRequest) SetId(v int64) *DescribeAntiBruteForceRulesRequest {
	s.Id = &v
	return s
}

func (s *DescribeAntiBruteForceRulesRequest) SetResourceOwnerId(v int64) *DescribeAntiBruteForceRulesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAntiBruteForceRulesRequest) SetSourceIp(v string) *DescribeAntiBruteForceRulesRequest {
	s.SourceIp = &v
	return s
}

type DescribeAntiBruteForceRulesResponseBody struct {
	// The pagination information.
	PageInfo *DescribeAntiBruteForceRulesResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of the defense rules returned.
	Rules []*DescribeAntiBruteForceRulesResponseBodyRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s DescribeAntiBruteForceRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntiBruteForceRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntiBruteForceRulesResponseBody) SetPageInfo(v *DescribeAntiBruteForceRulesResponseBodyPageInfo) *DescribeAntiBruteForceRulesResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeAntiBruteForceRulesResponseBody) SetRequestId(v string) *DescribeAntiBruteForceRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntiBruteForceRulesResponseBody) SetRules(v []*DescribeAntiBruteForceRulesResponseBodyRules) *DescribeAntiBruteForceRulesResponseBody {
	s.Rules = v
	return s
}

type DescribeAntiBruteForceRulesResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntiBruteForceRulesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntiBruteForceRulesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeAntiBruteForceRulesResponseBodyPageInfo) SetCount(v int32) *DescribeAntiBruteForceRulesResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeAntiBruteForceRulesResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeAntiBruteForceRulesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAntiBruteForceRulesResponseBodyPageInfo) SetPageSize(v int32) *DescribeAntiBruteForceRulesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeAntiBruteForceRulesResponseBodyPageInfo) SetTotalCount(v int32) *DescribeAntiBruteForceRulesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeAntiBruteForceRulesResponseBodyRules struct {
	// Indicates whether the defense rule is the default rule. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	//
	// >  The default rule takes effect on all servers that are not protected by defense rules against brute-force attacks.
	DefaultRule *bool `json:"DefaultRule,omitempty" xml:"DefaultRule,omitempty"`
	// This parameter is deprecated.
	EnableSmartRule *bool `json:"EnableSmartRule,omitempty" xml:"EnableSmartRule,omitempty"`
	// The threshold of logon failures that you specify.
	FailCount *int32 `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	// The period of time during which logons from an account are not allowed. Unit: minutes.
	ForbiddenTime *int32 `json:"ForbiddenTime,omitempty" xml:"ForbiddenTime,omitempty"`
	// The ID of the defense rule.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The number of servers to which the defense rule is applied.
	MachineCount *int32 `json:"MachineCount,omitempty" xml:"MachineCount,omitempty"`
	// The name of the defense rule.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The period of time during which logon failures from an account are measured. Unit: minutes. If **Span** is set to 10, the defense rule takes effect when the logon failures measured within 10 minutes reaches the specified threshold. The IP address of attackers cannot be used to log on to the server in the specified period of time.
	Span *int32 `json:"Span,omitempty" xml:"Span,omitempty"`
	// An array consisting of the UUIDs of servers to which the defense rule is applied.
	UuidList []*string `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s DescribeAntiBruteForceRulesResponseBodyRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntiBruteForceRulesResponseBodyRules) GoString() string {
	return s.String()
}

func (s *DescribeAntiBruteForceRulesResponseBodyRules) SetDefaultRule(v bool) *DescribeAntiBruteForceRulesResponseBodyRules {
	s.DefaultRule = &v
	return s
}

func (s *DescribeAntiBruteForceRulesResponseBodyRules) SetEnableSmartRule(v bool) *DescribeAntiBruteForceRulesResponseBodyRules {
	s.EnableSmartRule = &v
	return s
}

func (s *DescribeAntiBruteForceRulesResponseBodyRules) SetFailCount(v int32) *DescribeAntiBruteForceRulesResponseBodyRules {
	s.FailCount = &v
	return s
}

func (s *DescribeAntiBruteForceRulesResponseBodyRules) SetForbiddenTime(v int32) *DescribeAntiBruteForceRulesResponseBodyRules {
	s.ForbiddenTime = &v
	return s
}

func (s *DescribeAntiBruteForceRulesResponseBodyRules) SetId(v int64) *DescribeAntiBruteForceRulesResponseBodyRules {
	s.Id = &v
	return s
}

func (s *DescribeAntiBruteForceRulesResponseBodyRules) SetMachineCount(v int32) *DescribeAntiBruteForceRulesResponseBodyRules {
	s.MachineCount = &v
	return s
}

func (s *DescribeAntiBruteForceRulesResponseBodyRules) SetName(v string) *DescribeAntiBruteForceRulesResponseBodyRules {
	s.Name = &v
	return s
}

func (s *DescribeAntiBruteForceRulesResponseBodyRules) SetSpan(v int32) *DescribeAntiBruteForceRulesResponseBodyRules {
	s.Span = &v
	return s
}

func (s *DescribeAntiBruteForceRulesResponseBodyRules) SetUuidList(v []*string) *DescribeAntiBruteForceRulesResponseBodyRules {
	s.UuidList = v
	return s
}

type DescribeAntiBruteForceRulesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAntiBruteForceRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAntiBruteForceRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntiBruteForceRulesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntiBruteForceRulesResponse) SetHeaders(v map[string]*string) *DescribeAntiBruteForceRulesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntiBruteForceRulesResponse) SetStatusCode(v int32) *DescribeAntiBruteForceRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntiBruteForceRulesResponse) SetBody(v *DescribeAntiBruteForceRulesResponseBody) *DescribeAntiBruteForceRulesResponse {
	s.Body = v
	return s
}

type DescribeAppVulScanCycleResponseBody struct {
	Cycle     *string `json:"Cycle,omitempty" xml:"Cycle,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAppVulScanCycleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppVulScanCycleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppVulScanCycleResponseBody) SetCycle(v string) *DescribeAppVulScanCycleResponseBody {
	s.Cycle = &v
	return s
}

func (s *DescribeAppVulScanCycleResponseBody) SetRequestId(v string) *DescribeAppVulScanCycleResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAppVulScanCycleResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAppVulScanCycleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAppVulScanCycleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppVulScanCycleResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppVulScanCycleResponse) SetHeaders(v map[string]*string) *DescribeAppVulScanCycleResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppVulScanCycleResponse) SetStatusCode(v int32) *DescribeAppVulScanCycleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAppVulScanCycleResponse) SetBody(v *DescribeAppVulScanCycleResponseBody) *DescribeAppVulScanCycleResponse {
	s.Body = v
	return s
}

type DescribeAssetDetailByUuidRequest struct {
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The UUID of the server to query.
	//
	// >  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeAssetDetailByUuidRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetDetailByUuidRequest) GoString() string {
	return s.String()
}

func (s *DescribeAssetDetailByUuidRequest) SetLang(v string) *DescribeAssetDetailByUuidRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAssetDetailByUuidRequest) SetSourceIp(v string) *DescribeAssetDetailByUuidRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeAssetDetailByUuidRequest) SetUuid(v string) *DescribeAssetDetailByUuidRequest {
	s.Uuid = &v
	return s
}

type DescribeAssetDetailByUuidResponseBody struct {
	// The details of the server.
	AssetDetail *DescribeAssetDetailByUuidResponseBodyAssetDetail `json:"AssetDetail,omitempty" xml:"AssetDetail,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAssetDetailByUuidResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetDetailByUuidResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAssetDetailByUuidResponseBody) SetAssetDetail(v *DescribeAssetDetailByUuidResponseBodyAssetDetail) *DescribeAssetDetailByUuidResponseBody {
	s.AssetDetail = v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBody) SetRequestId(v string) *DescribeAssetDetailByUuidResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAssetDetailByUuidResponseBodyAssetDetail struct {
	// The type of the asset. Valid values:
	//
	// *   **0**: ECS instance
	// *   **1**: Server Load Balancer (SLB) instance
	// *   **2**: NAT gateway
	// *   **3**: ApsaraDB RDS database
	// *   **4**: ApsaraDB for MongoDB database
	// *   **5**: ApsaraDB for Redis database
	// *   **6**: image
	// *   **7**: container
	AssetType *string `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
	// The timestamp when Security Center is authorized to protect the asset. Unit: milliseconds.
	AuthModifyTime *int64 `json:"AuthModifyTime,omitempty" xml:"AuthModifyTime,omitempty"`
	// The edition of Security Center that is authorized to protect the asset. Valid values:
	//
	// *   **1**: Basic edition (Unauthorized)
	// *   **6**: Anti-virus edition
	// *   **5**: Advanced edition
	// *   **3**: Enterprise edition
	// *   **7**: Ultimate edition
	// *   **10**: Value-added Plan edition
	AuthVersion *int32 `json:"AuthVersion,omitempty" xml:"AuthVersion,omitempty"`
	// Indicates whether Security Center is authorized to protect the asset. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Bind *bool `json:"Bind,omitempty" xml:"Bind,omitempty"`
	// The status of the Security Center agent. Valid values:
	//
	// *   **pause**: The Security Center agent suspends protection for your server.
	// *   **online**: The Security Center agent is protecting your server.
	// *   **offline**: The Security Center agent does not protect your server.
	ClientStatus *string `json:"ClientStatus,omitempty" xml:"ClientStatus,omitempty"`
	// The version of the Security Center agent.
	ClientVersion *string `json:"ClientVersion,omitempty" xml:"ClientVersion,omitempty"`
	// The number of CPU cores.
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The details of the CPU.
	CpuInfo *string `json:"CpuInfo,omitempty" xml:"CpuInfo,omitempty"`
	// The timestamp when Security Center records the details of the server. Unit: milliseconds.
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// An array that consists of the information about the disk.
	DiskInfoList []*string `json:"DiskInfoList,omitempty" xml:"DiskInfoList,omitempty" type:"Repeated"`
	// Indicates whether the asset is provided by Alibaba Cloud. Valid values:
	//
	// *   **0**: yes
	// *   **1**: no
	Flag *int32 `json:"Flag,omitempty" xml:"Flag,omitempty"`
	// The group to which the server belongs. By default, the servers that are not grouped belong to the **Default** group.
	GroupTrace *string `json:"GroupTrace,omitempty" xml:"GroupTrace,omitempty"`
	// The name of the host.
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The IP address that is assigned to the Elastic Compute Service (ECS) instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The IP addresses of the server.
	IpList []*string `json:"IpList,omitempty" xml:"IpList,omitempty" type:"Repeated"`
	// The kernel version of the operating system.
	Kernel *string `json:"Kernel,omitempty" xml:"Kernel,omitempty"`
	// The media access control (MAC) addresses of the server.
	MacList []*string `json:"MacList,omitempty" xml:"MacList,omitempty" type:"Repeated"`
	// The memory size of the server. Unit: GB.
	Mem *int32 `json:"Mem,omitempty" xml:"Mem,omitempty"`
	// The memory size of the server. Unit: MB.
	Memory *int64 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The operating system type of the server.
	Os *string `json:"Os,omitempty" xml:"Os,omitempty"`
	// The operating system version of the server.
	OsDetail *string `json:"OsDetail,omitempty" xml:"OsDetail,omitempty"`
	// The name of the operating system.
	OsName *string `json:"OsName,omitempty" xml:"OsName,omitempty"`
	// The region in which the server resides.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The ID of the region in which the asset resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the region in which the server resides.
	RegionName *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	// The operating system information about the server.
	SysInfo *string `json:"SysInfo,omitempty" xml:"SysInfo,omitempty"`
	// The tag that is added to the server.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The ID of the virtual private cloud (VPC) in which the server resides.
	VpcInstanceId *string `json:"VpcInstanceId,omitempty" xml:"VpcInstanceId,omitempty"`
}

func (s DescribeAssetDetailByUuidResponseBodyAssetDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetDetailByUuidResponseBodyAssetDetail) GoString() string {
	return s.String()
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetAssetType(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.AssetType = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetAuthModifyTime(v int64) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.AuthModifyTime = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetAuthVersion(v int32) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.AuthVersion = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetBind(v bool) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.Bind = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetClientStatus(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.ClientStatus = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetClientVersion(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.ClientVersion = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetCpu(v int32) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.Cpu = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetCpuInfo(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.CpuInfo = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetCreateTime(v int64) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.CreateTime = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetDiskInfoList(v []*string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.DiskInfoList = v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetFlag(v int32) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.Flag = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetGroupTrace(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.GroupTrace = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetHostName(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.HostName = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetInstanceId(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.InstanceId = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetInstanceName(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.InstanceName = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetInternetIp(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.InternetIp = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetIntranetIp(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.IntranetIp = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetIp(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.Ip = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetIpList(v []*string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.IpList = v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetKernel(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.Kernel = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetMacList(v []*string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.MacList = v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetMem(v int32) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.Mem = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetMemory(v int64) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.Memory = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetOs(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.Os = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetOsDetail(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.OsDetail = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetOsName(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.OsName = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetRegion(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.Region = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetRegionId(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.RegionId = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetRegionName(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.RegionName = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetSysInfo(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.SysInfo = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetTag(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.Tag = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetUuid(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.Uuid = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponseBodyAssetDetail) SetVpcInstanceId(v string) *DescribeAssetDetailByUuidResponseBodyAssetDetail {
	s.VpcInstanceId = &v
	return s
}

type DescribeAssetDetailByUuidResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAssetDetailByUuidResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAssetDetailByUuidResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetDetailByUuidResponse) GoString() string {
	return s.String()
}

func (s *DescribeAssetDetailByUuidResponse) SetHeaders(v map[string]*string) *DescribeAssetDetailByUuidResponse {
	s.Headers = v
	return s
}

func (s *DescribeAssetDetailByUuidResponse) SetStatusCode(v int32) *DescribeAssetDetailByUuidResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAssetDetailByUuidResponse) SetBody(v *DescribeAssetDetailByUuidResponseBody) *DescribeAssetDetailByUuidResponse {
	s.Body = v
	return s
}

type DescribeAssetDetailByUuidsRequest struct {
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The UUIDs of the ECS instances. Separate multiple UUIDs with commas (,).
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeAssetDetailByUuidsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetDetailByUuidsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAssetDetailByUuidsRequest) SetLang(v string) *DescribeAssetDetailByUuidsRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAssetDetailByUuidsRequest) SetUuids(v string) *DescribeAssetDetailByUuidsRequest {
	s.Uuids = &v
	return s
}

type DescribeAssetDetailByUuidsResponseBody struct {
	// An array that consists of the details of the ECS instances.
	AssetList []*DescribeAssetDetailByUuidsResponseBodyAssetList `json:"AssetList,omitempty" xml:"AssetList,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAssetDetailByUuidsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetDetailByUuidsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAssetDetailByUuidsResponseBody) SetAssetList(v []*DescribeAssetDetailByUuidsResponseBodyAssetList) *DescribeAssetDetailByUuidsResponseBody {
	s.AssetList = v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBody) SetRequestId(v string) *DescribeAssetDetailByUuidsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAssetDetailByUuidsResponseBodyAssetList struct {
	// The type of the asset.
	//
	// The value is fixed as **0**, which indicates ECS instances.
	AssetType *string `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
	// The status of the Security Center agent. Valid values:
	//
	// *   **online**
	// *   **offline**
	ClientStatus *string `json:"ClientStatus,omitempty" xml:"ClientStatus,omitempty"`
	// The type of the asset by source. Valid values:
	//
	// *   **0**: The asset is provided by Alibaba Cloud.
	// *   **1**: The asset is not provided by Alibaba Cloud.
	// *   **2**: The asset resides in a data center.
	// *   **3**, **4**, **5**, and **7**: other cloud asset.
	// *   **8**: light-weight assets.
	Flag *int32 `json:"Flag,omitempty" xml:"Flag,omitempty"`
	// The ID of the ECS instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the ECS instance.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the ECS instance.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the ECS instance.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The IP address of the ECS instance.
	//
	// >  If the ECS instance has a public IP address, the value of this parameter is the public IP address of the ECS instance. If the ECS instance does not have a public IP address, the value of this parameter is the private IP address of the ECS instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The operating system of the ECS instance.
	Os *string `json:"Os,omitempty" xml:"Os,omitempty"`
	// The name of the operating system run by the ECS instance.
	OsName *string `json:"OsName,omitempty" xml:"OsName,omitempty"`
	// The region in which the ECS instance resides.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The region in which the ECS instance resides.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the region in which the ECS instance resides.
	RegionName *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	// The UUID of the ECS instance.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The ID of the virtual private cloud (VPC).
	VpcInstanceId *string `json:"VpcInstanceId,omitempty" xml:"VpcInstanceId,omitempty"`
}

func (s DescribeAssetDetailByUuidsResponseBodyAssetList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetDetailByUuidsResponseBodyAssetList) GoString() string {
	return s.String()
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetAssetType(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.AssetType = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetClientStatus(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.ClientStatus = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetFlag(v int32) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.Flag = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetInstanceId(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.InstanceId = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetInstanceName(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.InstanceName = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetInternetIp(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.InternetIp = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetIntranetIp(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.IntranetIp = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetIp(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.Ip = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetOs(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.Os = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetOsName(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.OsName = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetRegion(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.Region = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetRegionId(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.RegionId = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetRegionName(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.RegionName = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetUuid(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.Uuid = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponseBodyAssetList) SetVpcInstanceId(v string) *DescribeAssetDetailByUuidsResponseBodyAssetList {
	s.VpcInstanceId = &v
	return s
}

type DescribeAssetDetailByUuidsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAssetDetailByUuidsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAssetDetailByUuidsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetDetailByUuidsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAssetDetailByUuidsResponse) SetHeaders(v map[string]*string) *DescribeAssetDetailByUuidsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAssetDetailByUuidsResponse) SetStatusCode(v int32) *DescribeAssetDetailByUuidsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAssetDetailByUuidsResponse) SetBody(v *DescribeAssetDetailByUuidsResponseBody) *DescribeAssetDetailByUuidsResponse {
	s.Body = v
	return s
}

type DescribeAssetSummaryResponseBody struct {
	// The statistical information about the assets.
	AssetsSummary *DescribeAssetSummaryResponseBodyAssetsSummary `json:"AssetsSummary,omitempty" xml:"AssetsSummary,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAssetSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAssetSummaryResponseBody) SetAssetsSummary(v *DescribeAssetSummaryResponseBodyAssetsSummary) *DescribeAssetSummaryResponseBody {
	s.AssetsSummary = v
	return s
}

func (s *DescribeAssetSummaryResponseBody) SetRequestId(v string) *DescribeAssetSummaryResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAssetSummaryResponseBodyAssetsSummary struct {
	// The total number of protected assets in all regions.
	TotalAssetAllRegion *int32 `json:"TotalAssetAllRegion,omitempty" xml:"TotalAssetAllRegion,omitempty"`
	// The total number of cores of protected assets in all regions.
	TotalCoreAllRegion *int32 `json:"TotalCoreAllRegion,omitempty" xml:"TotalCoreAllRegion,omitempty"`
	// The total number of cores of protected assets in the current region.
	TotalCoreNum *int32 `json:"TotalCoreNum,omitempty" xml:"TotalCoreNum,omitempty"`
}

func (s DescribeAssetSummaryResponseBodyAssetsSummary) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetSummaryResponseBodyAssetsSummary) GoString() string {
	return s.String()
}

func (s *DescribeAssetSummaryResponseBodyAssetsSummary) SetTotalAssetAllRegion(v int32) *DescribeAssetSummaryResponseBodyAssetsSummary {
	s.TotalAssetAllRegion = &v
	return s
}

func (s *DescribeAssetSummaryResponseBodyAssetsSummary) SetTotalCoreAllRegion(v int32) *DescribeAssetSummaryResponseBodyAssetsSummary {
	s.TotalCoreAllRegion = &v
	return s
}

func (s *DescribeAssetSummaryResponseBodyAssetsSummary) SetTotalCoreNum(v int32) *DescribeAssetSummaryResponseBodyAssetsSummary {
	s.TotalCoreNum = &v
	return s
}

type DescribeAssetSummaryResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAssetSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAssetSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeAssetSummaryResponse) SetHeaders(v map[string]*string) *DescribeAssetSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeAssetSummaryResponse) SetStatusCode(v int32) *DescribeAssetSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAssetSummaryResponse) SetBody(v *DescribeAssetSummaryResponseBody) *DescribeAssetSummaryResponse {
	s.Body = v
	return s
}

type DescribeAssetsSecurityEventSummaryRequest struct {
	ClusterId           *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ContainerFieldName  *string `json:"ContainerFieldName,omitempty" xml:"ContainerFieldName,omitempty"`
	ContainerFieldValue *string `json:"ContainerFieldValue,omitempty" xml:"ContainerFieldValue,omitempty"`
	ResourceOwnerId     *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SourceIp            *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeAssetsSecurityEventSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetsSecurityEventSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeAssetsSecurityEventSummaryRequest) SetClusterId(v string) *DescribeAssetsSecurityEventSummaryRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeAssetsSecurityEventSummaryRequest) SetContainerFieldName(v string) *DescribeAssetsSecurityEventSummaryRequest {
	s.ContainerFieldName = &v
	return s
}

func (s *DescribeAssetsSecurityEventSummaryRequest) SetContainerFieldValue(v string) *DescribeAssetsSecurityEventSummaryRequest {
	s.ContainerFieldValue = &v
	return s
}

func (s *DescribeAssetsSecurityEventSummaryRequest) SetResourceOwnerId(v int64) *DescribeAssetsSecurityEventSummaryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAssetsSecurityEventSummaryRequest) SetSourceIp(v string) *DescribeAssetsSecurityEventSummaryRequest {
	s.SourceIp = &v
	return s
}

type DescribeAssetsSecurityEventSummaryResponseBody struct {
	Assets    []*DescribeAssetsSecurityEventSummaryResponseBodyAssets `json:"Assets,omitempty" xml:"Assets,omitempty" type:"Repeated"`
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAssetsSecurityEventSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetsSecurityEventSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAssetsSecurityEventSummaryResponseBody) SetAssets(v []*DescribeAssetsSecurityEventSummaryResponseBodyAssets) *DescribeAssetsSecurityEventSummaryResponseBody {
	s.Assets = v
	return s
}

func (s *DescribeAssetsSecurityEventSummaryResponseBody) SetRequestId(v string) *DescribeAssetsSecurityEventSummaryResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAssetsSecurityEventSummaryResponseBodyAssets struct {
	AssetType  *string `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
	RiskCount  *int64  `json:"RiskCount,omitempty" xml:"RiskCount,omitempty"`
	TotalCount *int64  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAssetsSecurityEventSummaryResponseBodyAssets) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetsSecurityEventSummaryResponseBodyAssets) GoString() string {
	return s.String()
}

func (s *DescribeAssetsSecurityEventSummaryResponseBodyAssets) SetAssetType(v string) *DescribeAssetsSecurityEventSummaryResponseBodyAssets {
	s.AssetType = &v
	return s
}

func (s *DescribeAssetsSecurityEventSummaryResponseBodyAssets) SetRiskCount(v int64) *DescribeAssetsSecurityEventSummaryResponseBodyAssets {
	s.RiskCount = &v
	return s
}

func (s *DescribeAssetsSecurityEventSummaryResponseBodyAssets) SetTotalCount(v int64) *DescribeAssetsSecurityEventSummaryResponseBodyAssets {
	s.TotalCount = &v
	return s
}

type DescribeAssetsSecurityEventSummaryResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAssetsSecurityEventSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAssetsSecurityEventSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAssetsSecurityEventSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeAssetsSecurityEventSummaryResponse) SetHeaders(v map[string]*string) *DescribeAssetsSecurityEventSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeAssetsSecurityEventSummaryResponse) SetStatusCode(v int32) *DescribeAssetsSecurityEventSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAssetsSecurityEventSummaryResponse) SetBody(v *DescribeAssetsSecurityEventSummaryResponseBody) *DescribeAssetsSecurityEventSummaryResponse {
	s.Body = v
	return s
}

type DescribeAttackAnalysisDataRequest struct {
	// Specifies whether to encode the value of the **client_url** field in the query results by using the Base64 algorithm. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Base64 *string `json:"Base64,omitempty" xml:"Base64,omitempty"`
	// The number of the page to return. Pages start from page **1**.
	//
	// >  If the Type parameter is set to **DETAILS**, you must specify the CurrentPage parameter.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The condition that is used to filter attack events.
	//
	// >  The following list describes the valid values of crack_type:
	//
	// *   3: brute-force attack on MySQL
	//
	// *   4: FTP brute-force attack
	//
	// *   5: SSH brute-force attack
	//
	// *   6: RDP brute-force attack
	//
	// *   9: brute-force attack on Microsoft SQL Server
	//
	// *   101: intercepted attack on Java Struts 2
	//
	// *   102: intercepted attack on Redis
	//
	// *   103: communication with AntSword Webshell
	//
	// *   104: communication with China Chopper Webshell
	//
	// *   133: communication with XISE Webshell
	//
	// *   sqli: SQL injection
	//
	// *   codei: code execution
	//
	// *   xss: cross-site scripting (XSS)
	//
	// *   lfi: local file inclusion
	//
	// *   rfi: remote file inclusion
	//
	// *   webshell: trojan script
	//
	// *   upload: vulnerability upload
	//
	// *   path: directory traversal
	//
	// *   bypass: unauthorized access
	//
	// *   csrf: cross-site request forgery (CSRF)
	//
	// *   crlf: carriage return line feed (CRLF)
	//
	// *   other: others
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The timestamp when the attack stops. Unit: seconds.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page.
	//
	// >  If the Type parameter is set to **DETAILS**, you must specify the PageSize parameter.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The timestamp at which the attack starts. By default, the statistics of the previous seven days are queried. Unit: seconds.
	//
	// >  The start time that you specify must be within the previous 40 days.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The details of attack analysis. Valid values:
	//
	// *   **TOTAL**: number of attacks
	// *   **TREND**: attack trend
	// *   **PIE_CHART**: distribution of attacks by type
	// *   **SOURCE_TOP**: top 5 attack sources
	// *   **CLIENT_TOP**: top 5 attacked assets
	// *   **DETAILS**: attack details
	//
	// >  If the Type parameter is set to **DETAILS**, you must specify the CurrentPage and PageSize parameters.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeAttackAnalysisDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAttackAnalysisDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeAttackAnalysisDataRequest) SetBase64(v string) *DescribeAttackAnalysisDataRequest {
	s.Base64 = &v
	return s
}

func (s *DescribeAttackAnalysisDataRequest) SetCurrentPage(v int32) *DescribeAttackAnalysisDataRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAttackAnalysisDataRequest) SetData(v string) *DescribeAttackAnalysisDataRequest {
	s.Data = &v
	return s
}

func (s *DescribeAttackAnalysisDataRequest) SetEndTime(v int64) *DescribeAttackAnalysisDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeAttackAnalysisDataRequest) SetLang(v string) *DescribeAttackAnalysisDataRequest {
	s.Lang = &v
	return s
}

func (s *DescribeAttackAnalysisDataRequest) SetPageSize(v int32) *DescribeAttackAnalysisDataRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAttackAnalysisDataRequest) SetStartTime(v int64) *DescribeAttackAnalysisDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeAttackAnalysisDataRequest) SetType(v string) *DescribeAttackAnalysisDataRequest {
	s.Type = &v
	return s
}

type DescribeAttackAnalysisDataResponseBody struct {
	// The attack events. The value contains the following fields:
	//
	// *   **client_url**: the URL of the attack request.
	//
	// *   **internetIp**: the IP address of the asset.
	//
	// *   **instanceName**: the name of the asset.
	//
	// *   **table_src**: the source of data.
	//
	// *   **uuid**: the UUID of the asset.
	//
	// *   **crack_method**: the method of the attack request.
	//
	// *   **crack_hour**: the attack time.
	//
	// *   **crack_src_ip**: the IP address from which the attack is launched.
	//
	// *   **instanceId**: the ID of the asset.
	//
	// *   **dst_port**: the attacked port.
	//
	// *   **client_ip**: the attacked IP address.
	//
	// *   **location**: the region from which the attack is launched.
	//
	// *   **aliuid**: the ID of the Alibaba Cloud account.
	//
	// *   **crack_cnt**: the number of times that the attack is launched.
	//
	// *   **crack_type**: the type of the attack. Valid values:
	//
	//     *   **113**: improper authorization
	//     *   **112**: redirection attack
	//     *   **upload**: vulnerability upload
	//     *   **other**: others
	//     *   **webshell**: trojan script
	//     *   **201**: suspicious connection
	//     *   **9**: brute-force attack on Microsoft SQL Server
	//     *   **5**: SSH brute-force attack
	//     *   **6**: RDP brute-force attack
	//     *   **lfi**: local file inclusion
	//     *   **7**: code execution
	//     *   **sqli**: SQL injection
	//     *   **209**: web attack
	//     *   **31**: buffer overflow
	//     *   **3**: brute-force attack on MySQL
	//     *   **30**: clickjacking
	//     *   **4**: FTP brute-force attack
	//     *   **bypass**: unauthorized access
	//     *   **33**: format string
	//     *   **deeplearning**: others
	//     *   **32**: integer overflow
	//     *   **203**: brute-force attack
	//     *   **34**: race condition
	//     *   **rfi**: remote file inclusion
	//     *   **0**: SQL injection
	//     *   **212**: mining behavior
	//     *   **213**: reverse shell
	//     *   **211**: worm
	//     *   **61**: session timeout
	//     *   **20**: directory traversal
	//     *   **xss**: XSS
	//     *   **22**: unauthorized access
	//     *   **21**: scan attack
	//     *   **24**: file modification
	//     *   **26**: file deletion
	//     *   **25**: file reading
	//     *   **28**: CRLF injection
	//     *   **27**: logic error
	//     *   **29**: template injection
	//     *   **csrf**: CSRF
	//     *   **path**: directory traversal
	//     *   **crlf**: CRLF
	//     *   **102**: CSRF
	//     *   **103**: server-side request forgery (SSRF)
	//     *   **101**: XSS
	//     *   **11**: file inclusion
	//     *   **10**: file upload
	//     *   **12**: vulnerability upload
	//     *   **15**: unauthorized access
	//     *   **14**: information leakage
	//     *   **17**: XML entity injection
	//     *   **16**: insecure configuration
	//     *   **19**: Lightweight Directory Access Protocol (LDAP) injection
	//     *   **18**: XPath injection
	//     *   **codei**: code execution
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The page number of the returned page.
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries returned per page. Default value: 10.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of attack events returned.
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeAttackAnalysisDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAttackAnalysisDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAttackAnalysisDataResponseBody) SetData(v string) *DescribeAttackAnalysisDataResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeAttackAnalysisDataResponseBody) SetPage(v int32) *DescribeAttackAnalysisDataResponseBody {
	s.Page = &v
	return s
}

func (s *DescribeAttackAnalysisDataResponseBody) SetPageSize(v int32) *DescribeAttackAnalysisDataResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAttackAnalysisDataResponseBody) SetRequestId(v string) *DescribeAttackAnalysisDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAttackAnalysisDataResponseBody) SetTotal(v int32) *DescribeAttackAnalysisDataResponseBody {
	s.Total = &v
	return s
}

type DescribeAttackAnalysisDataResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAttackAnalysisDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAttackAnalysisDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAttackAnalysisDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeAttackAnalysisDataResponse) SetHeaders(v map[string]*string) *DescribeAttackAnalysisDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeAttackAnalysisDataResponse) SetStatusCode(v int32) *DescribeAttackAnalysisDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAttackAnalysisDataResponse) SetBody(v *DescribeAttackAnalysisDataResponseBody) *DescribeAttackAnalysisDataResponse {
	s.Body = v
	return s
}

type DescribeAutoDelConfigResponseBody struct {
	// The number of days during which a detected vulnerability is retained before the vulnerability is automatically deleted.
	Days *int32 `json:"Days,omitempty" xml:"Days,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAutoDelConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoDelConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAutoDelConfigResponseBody) SetDays(v int32) *DescribeAutoDelConfigResponseBody {
	s.Days = &v
	return s
}

func (s *DescribeAutoDelConfigResponseBody) SetRequestId(v string) *DescribeAutoDelConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAutoDelConfigResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAutoDelConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAutoDelConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoDelConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoDelConfigResponse) SetHeaders(v map[string]*string) *DescribeAutoDelConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeAutoDelConfigResponse) SetStatusCode(v int32) *DescribeAutoDelConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAutoDelConfigResponse) SetBody(v *DescribeAutoDelConfigResponseBody) *DescribeAutoDelConfigResponse {
	s.Body = v
	return s
}

type DescribeBackUpExportInfoRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ExportType  *string `json:"ExportType,omitempty" xml:"ExportType,omitempty"`
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeBackUpExportInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackUpExportInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackUpExportInfoRequest) SetCurrentPage(v int32) *DescribeBackUpExportInfoRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeBackUpExportInfoRequest) SetExportType(v string) *DescribeBackUpExportInfoRequest {
	s.ExportType = &v
	return s
}

func (s *DescribeBackUpExportInfoRequest) SetLang(v string) *DescribeBackUpExportInfoRequest {
	s.Lang = &v
	return s
}

func (s *DescribeBackUpExportInfoRequest) SetPageSize(v int32) *DescribeBackUpExportInfoRequest {
	s.PageSize = &v
	return s
}

type DescribeBackUpExportInfoResponseBody struct {
	Data      []*DescribeBackUpExportInfoResponseBodyData   `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	PageInfo  *DescribeBackUpExportInfoResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBackUpExportInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackUpExportInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackUpExportInfoResponseBody) SetData(v []*DescribeBackUpExportInfoResponseBodyData) *DescribeBackUpExportInfoResponseBody {
	s.Data = v
	return s
}

func (s *DescribeBackUpExportInfoResponseBody) SetPageInfo(v *DescribeBackUpExportInfoResponseBodyPageInfo) *DescribeBackUpExportInfoResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeBackUpExportInfoResponseBody) SetRequestId(v string) *DescribeBackUpExportInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBackUpExportInfoResponseBodyData struct {
	CurrentCount *int32  `json:"CurrentCount,omitempty" xml:"CurrentCount,omitempty"`
	FileName     *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	GmtCreate    *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Link         *string `json:"Link,omitempty" xml:"Link,omitempty"`
	Message      *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Progress     *int32  `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalCount   *int32  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeBackUpExportInfoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackUpExportInfoResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeBackUpExportInfoResponseBodyData) SetCurrentCount(v int32) *DescribeBackUpExportInfoResponseBodyData {
	s.CurrentCount = &v
	return s
}

func (s *DescribeBackUpExportInfoResponseBodyData) SetFileName(v string) *DescribeBackUpExportInfoResponseBodyData {
	s.FileName = &v
	return s
}

func (s *DescribeBackUpExportInfoResponseBodyData) SetGmtCreate(v int64) *DescribeBackUpExportInfoResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *DescribeBackUpExportInfoResponseBodyData) SetId(v int64) *DescribeBackUpExportInfoResponseBodyData {
	s.Id = &v
	return s
}

func (s *DescribeBackUpExportInfoResponseBodyData) SetLink(v string) *DescribeBackUpExportInfoResponseBodyData {
	s.Link = &v
	return s
}

func (s *DescribeBackUpExportInfoResponseBodyData) SetMessage(v string) *DescribeBackUpExportInfoResponseBodyData {
	s.Message = &v
	return s
}

func (s *DescribeBackUpExportInfoResponseBodyData) SetProgress(v int32) *DescribeBackUpExportInfoResponseBodyData {
	s.Progress = &v
	return s
}

func (s *DescribeBackUpExportInfoResponseBodyData) SetStatus(v string) *DescribeBackUpExportInfoResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescribeBackUpExportInfoResponseBodyData) SetTotalCount(v int32) *DescribeBackUpExportInfoResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeBackUpExportInfoResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeBackUpExportInfoResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackUpExportInfoResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeBackUpExportInfoResponseBodyPageInfo) SetCount(v int32) *DescribeBackUpExportInfoResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeBackUpExportInfoResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeBackUpExportInfoResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeBackUpExportInfoResponseBodyPageInfo) SetPageSize(v int32) *DescribeBackUpExportInfoResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeBackUpExportInfoResponseBodyPageInfo) SetTotalCount(v int32) *DescribeBackUpExportInfoResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeBackUpExportInfoResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBackUpExportInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBackUpExportInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackUpExportInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackUpExportInfoResponse) SetHeaders(v map[string]*string) *DescribeBackUpExportInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackUpExportInfoResponse) SetStatusCode(v int32) *DescribeBackUpExportInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackUpExportInfoResponse) SetBody(v *DescribeBackUpExportInfoResponseBody) *DescribeBackUpExportInfoResponse {
	s.Body = v
	return s
}

type DescribeBackupClientsRequest struct {
	// The region in which the anti-ransomware feature is supported.
	// > You can call the [DescribeSupportRegion](~~DescribeSupportRegion~~) operation to query the regions in which the anti-ransomware feature is supported.
	SupportRegionId *string `json:"SupportRegionId,omitempty" xml:"SupportRegionId,omitempty"`
}

func (s DescribeBackupClientsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupClientsRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupClientsRequest) SetSupportRegionId(v string) *DescribeBackupClientsRequest {
	s.SupportRegionId = &v
	return s
}

type DescribeBackupClientsResponseBody struct {
	// An array that consists of the information about the anti-ransomware agent.
	Clients []*DescribeBackupClientsResponseBodyClients `json:"Clients,omitempty" xml:"Clients,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBackupClientsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupClientsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupClientsResponseBody) SetClients(v []*DescribeBackupClientsResponseBodyClients) *DescribeBackupClientsResponseBody {
	s.Clients = v
	return s
}

func (s *DescribeBackupClientsResponseBody) SetRequestId(v string) *DescribeBackupClientsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBackupClientsResponseBodyClients struct {
	// The ID of the anti-ransomware agent.
	ClientId *string `json:"ClientId,omitempty" xml:"ClientId,omitempty"`
	// The status of the anti-ransomware agent.
	//
	// Valid values:
	//
	// *   **INSTALLING**: The agent is being installed.
	// *   **ONLINE**: The agent is online.
	// *   **UNINSTALLING**: The agent is being uninstalled.
	// *   **NOT_INSTALLED**: The agent is not installed.
	// *   **ACTIVATED**: The agent is enabled.
	// *   **CLIENT\_CONNECTION_ERROR**: A connection error occurs on the agent.
	ClientStatus *string `json:"ClientStatus,omitempty" xml:"ClientStatus,omitempty"`
	// The version of the anti-ransomware agent.
	ClientVersion *string `json:"ClientVersion,omitempty" xml:"ClientVersion,omitempty"`
	// The ID of the ECS instance on which the anti-ransomware agent is installed.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The UUID of the Elastic Compute Service (ECS) instance on which the anti-ransomware agent is installed.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeBackupClientsResponseBodyClients) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupClientsResponseBodyClients) GoString() string {
	return s.String()
}

func (s *DescribeBackupClientsResponseBodyClients) SetClientId(v string) *DescribeBackupClientsResponseBodyClients {
	s.ClientId = &v
	return s
}

func (s *DescribeBackupClientsResponseBodyClients) SetClientStatus(v string) *DescribeBackupClientsResponseBodyClients {
	s.ClientStatus = &v
	return s
}

func (s *DescribeBackupClientsResponseBodyClients) SetClientVersion(v string) *DescribeBackupClientsResponseBodyClients {
	s.ClientVersion = &v
	return s
}

func (s *DescribeBackupClientsResponseBodyClients) SetInstanceId(v string) *DescribeBackupClientsResponseBodyClients {
	s.InstanceId = &v
	return s
}

func (s *DescribeBackupClientsResponseBodyClients) SetUuid(v string) *DescribeBackupClientsResponseBodyClients {
	s.Uuid = &v
	return s
}

type DescribeBackupClientsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBackupClientsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBackupClientsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupClientsResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupClientsResponse) SetHeaders(v map[string]*string) *DescribeBackupClientsResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupClientsResponse) SetStatusCode(v int32) *DescribeBackupClientsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackupClientsResponse) SetBody(v *DescribeBackupClientsResponseBody) *DescribeBackupClientsResponse {
	s.Body = v
	return s
}

type DescribeBackupFilesRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *string `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The path to the backup file.
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The hash value of the backup file.
	SnapshotHash *string `json:"SnapshotHash,omitempty" xml:"SnapshotHash,omitempty"`
	// The UUID of the server to which an anti-ransomware policy is applied.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeBackupFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupFilesRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupFilesRequest) SetCurrentPage(v string) *DescribeBackupFilesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeBackupFilesRequest) SetPageSize(v string) *DescribeBackupFilesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeBackupFilesRequest) SetPath(v string) *DescribeBackupFilesRequest {
	s.Path = &v
	return s
}

func (s *DescribeBackupFilesRequest) SetSnapshotHash(v string) *DescribeBackupFilesRequest {
	s.SnapshotHash = &v
	return s
}

func (s *DescribeBackupFilesRequest) SetUuid(v string) *DescribeBackupFilesRequest {
	s.Uuid = &v
	return s
}

type DescribeBackupFilesResponseBody struct {
	// An array that consists of the backup files returned.
	BackupFiles []*DescribeBackupFilesResponseBodyBackupFiles `json:"BackupFiles,omitempty" xml:"BackupFiles,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *DescribeBackupFilesResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBackupFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupFilesResponseBody) SetBackupFiles(v []*DescribeBackupFilesResponseBodyBackupFiles) *DescribeBackupFilesResponseBody {
	s.BackupFiles = v
	return s
}

func (s *DescribeBackupFilesResponseBody) SetPageInfo(v *DescribeBackupFilesResponseBodyPageInfo) *DescribeBackupFilesResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeBackupFilesResponseBody) SetRequestId(v string) *DescribeBackupFilesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBackupFilesResponseBodyBackupFiles struct {
	// The name of the anti-ransomware policy.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The size of the backup file. Unit: bytes.
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The path to the subdirectory of the backup file.
	Subtree *string `json:"Subtree,omitempty" xml:"Subtree,omitempty"`
	// The type of the protected file. Valid values:
	//
	// *   **file**: files
	// *   **dir**: folders
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeBackupFilesResponseBodyBackupFiles) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupFilesResponseBodyBackupFiles) GoString() string {
	return s.String()
}

func (s *DescribeBackupFilesResponseBodyBackupFiles) SetName(v string) *DescribeBackupFilesResponseBodyBackupFiles {
	s.Name = &v
	return s
}

func (s *DescribeBackupFilesResponseBodyBackupFiles) SetSize(v int64) *DescribeBackupFilesResponseBodyBackupFiles {
	s.Size = &v
	return s
}

func (s *DescribeBackupFilesResponseBodyBackupFiles) SetSubtree(v string) *DescribeBackupFilesResponseBodyBackupFiles {
	s.Subtree = &v
	return s
}

func (s *DescribeBackupFilesResponseBodyBackupFiles) SetType(v string) *DescribeBackupFilesResponseBodyBackupFiles {
	s.Type = &v
	return s
}

type DescribeBackupFilesResponseBodyPageInfo struct {
	// The number of backup files returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of backup files returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeBackupFilesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupFilesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeBackupFilesResponseBodyPageInfo) SetCount(v int32) *DescribeBackupFilesResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeBackupFilesResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeBackupFilesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeBackupFilesResponseBodyPageInfo) SetPageSize(v int32) *DescribeBackupFilesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeBackupFilesResponseBodyPageInfo) SetTotalCount(v int32) *DescribeBackupFilesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeBackupFilesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBackupFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBackupFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupFilesResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupFilesResponse) SetHeaders(v map[string]*string) *DescribeBackupFilesResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupFilesResponse) SetStatusCode(v int32) *DescribeBackupFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackupFilesResponse) SetBody(v *DescribeBackupFilesResponseBody) *DescribeBackupFilesResponse {
	s.Body = v
	return s
}

type DescribeBackupMachineStatusRequest struct {
	PolicyId      *int64  `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	PolicyVersion *string `json:"PolicyVersion,omitempty" xml:"PolicyVersion,omitempty"`
	Uuid          *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeBackupMachineStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupMachineStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupMachineStatusRequest) SetPolicyId(v int64) *DescribeBackupMachineStatusRequest {
	s.PolicyId = &v
	return s
}

func (s *DescribeBackupMachineStatusRequest) SetPolicyVersion(v string) *DescribeBackupMachineStatusRequest {
	s.PolicyVersion = &v
	return s
}

func (s *DescribeBackupMachineStatusRequest) SetUuid(v string) *DescribeBackupMachineStatusRequest {
	s.Uuid = &v
	return s
}

type DescribeBackupMachineStatusResponseBody struct {
	BackupMachineStatus *DescribeBackupMachineStatusResponseBodyBackupMachineStatus `json:"BackupMachineStatus,omitempty" xml:"BackupMachineStatus,omitempty" type:"Struct"`
	RequestId           *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBackupMachineStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupMachineStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupMachineStatusResponseBody) SetBackupMachineStatus(v *DescribeBackupMachineStatusResponseBodyBackupMachineStatus) *DescribeBackupMachineStatusResponseBody {
	s.BackupMachineStatus = v
	return s
}

func (s *DescribeBackupMachineStatusResponseBody) SetRequestId(v string) *DescribeBackupMachineStatusResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBackupMachineStatusResponseBodyBackupMachineStatus struct {
	ClientId         *string                                                                `json:"ClientId,omitempty" xml:"ClientId,omitempty"`
	ClientStatus     *string                                                                `json:"ClientStatus,omitempty" xml:"ClientStatus,omitempty"`
	ClientVersion    *string                                                                `json:"ClientVersion,omitempty" xml:"ClientVersion,omitempty"`
	ErrorCode        *string                                                                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorList        []*DescribeBackupMachineStatusResponseBodyBackupMachineStatusErrorList `json:"ErrorList,omitempty" xml:"ErrorList,omitempty" type:"Repeated"`
	InstanceId       *string                                                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId         *string                                                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SavedBackupCount *int32                                                                 `json:"SavedBackupCount,omitempty" xml:"SavedBackupCount,omitempty"`
	Status           *string                                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	Uuid             *string                                                                `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	VaultId          *string                                                                `json:"VaultId,omitempty" xml:"VaultId,omitempty"`
}

func (s DescribeBackupMachineStatusResponseBodyBackupMachineStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupMachineStatusResponseBodyBackupMachineStatus) GoString() string {
	return s.String()
}

func (s *DescribeBackupMachineStatusResponseBodyBackupMachineStatus) SetClientId(v string) *DescribeBackupMachineStatusResponseBodyBackupMachineStatus {
	s.ClientId = &v
	return s
}

func (s *DescribeBackupMachineStatusResponseBodyBackupMachineStatus) SetClientStatus(v string) *DescribeBackupMachineStatusResponseBodyBackupMachineStatus {
	s.ClientStatus = &v
	return s
}

func (s *DescribeBackupMachineStatusResponseBodyBackupMachineStatus) SetClientVersion(v string) *DescribeBackupMachineStatusResponseBodyBackupMachineStatus {
	s.ClientVersion = &v
	return s
}

func (s *DescribeBackupMachineStatusResponseBodyBackupMachineStatus) SetErrorCode(v string) *DescribeBackupMachineStatusResponseBodyBackupMachineStatus {
	s.ErrorCode = &v
	return s
}

func (s *DescribeBackupMachineStatusResponseBodyBackupMachineStatus) SetErrorList(v []*DescribeBackupMachineStatusResponseBodyBackupMachineStatusErrorList) *DescribeBackupMachineStatusResponseBodyBackupMachineStatus {
	s.ErrorList = v
	return s
}

func (s *DescribeBackupMachineStatusResponseBodyBackupMachineStatus) SetInstanceId(v string) *DescribeBackupMachineStatusResponseBodyBackupMachineStatus {
	s.InstanceId = &v
	return s
}

func (s *DescribeBackupMachineStatusResponseBodyBackupMachineStatus) SetRegionId(v string) *DescribeBackupMachineStatusResponseBodyBackupMachineStatus {
	s.RegionId = &v
	return s
}

func (s *DescribeBackupMachineStatusResponseBodyBackupMachineStatus) SetSavedBackupCount(v int32) *DescribeBackupMachineStatusResponseBodyBackupMachineStatus {
	s.SavedBackupCount = &v
	return s
}

func (s *DescribeBackupMachineStatusResponseBodyBackupMachineStatus) SetStatus(v string) *DescribeBackupMachineStatusResponseBodyBackupMachineStatus {
	s.Status = &v
	return s
}

func (s *DescribeBackupMachineStatusResponseBodyBackupMachineStatus) SetUuid(v string) *DescribeBackupMachineStatusResponseBodyBackupMachineStatus {
	s.Uuid = &v
	return s
}

func (s *DescribeBackupMachineStatusResponseBodyBackupMachineStatus) SetVaultId(v string) *DescribeBackupMachineStatusResponseBodyBackupMachineStatus {
	s.VaultId = &v
	return s
}

type DescribeBackupMachineStatusResponseBodyBackupMachineStatusErrorList struct {
	ErrorCode   *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorStatus *string `json:"ErrorStatus,omitempty" xml:"ErrorStatus,omitempty"`
}

func (s DescribeBackupMachineStatusResponseBodyBackupMachineStatusErrorList) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupMachineStatusResponseBodyBackupMachineStatusErrorList) GoString() string {
	return s.String()
}

func (s *DescribeBackupMachineStatusResponseBodyBackupMachineStatusErrorList) SetErrorCode(v string) *DescribeBackupMachineStatusResponseBodyBackupMachineStatusErrorList {
	s.ErrorCode = &v
	return s
}

func (s *DescribeBackupMachineStatusResponseBodyBackupMachineStatusErrorList) SetErrorStatus(v string) *DescribeBackupMachineStatusResponseBodyBackupMachineStatusErrorList {
	s.ErrorStatus = &v
	return s
}

type DescribeBackupMachineStatusResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBackupMachineStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBackupMachineStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupMachineStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupMachineStatusResponse) SetHeaders(v map[string]*string) *DescribeBackupMachineStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupMachineStatusResponse) SetStatusCode(v int32) *DescribeBackupMachineStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackupMachineStatusResponse) SetBody(v *DescribeBackupMachineStatusResponseBody) *DescribeBackupMachineStatusResponse {
	s.Body = v
	return s
}

type DescribeBackupPoliciesRequest struct {
	// The number of the page to return. Default value: 1.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The information that you want to use to identify the servers protected by the anti-ransomware policy. You can enter the IP address or ID of a server.
	MachineRemark *string `json:"MachineRemark,omitempty" xml:"MachineRemark,omitempty"`
	// The name of the anti-ransomware policy that you want to query.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of entries to return on each page. Default value: 10.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The status of the anti-ransomware policy. Valid values:
	//
	// *   **enabled**: The anti-ransomware policy is manually enabled.
	// *   **disabled**: The anti-ransomware policy is manually disabled. After an anti-ransomware policy is disabled, the data backup task that is running based on the policy stops.
	// *   **closed**: The anti-ransomware policy automatically stops because the anti-ransomware capacity is insufficient.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeBackupPoliciesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPoliciesRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupPoliciesRequest) SetCurrentPage(v int32) *DescribeBackupPoliciesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeBackupPoliciesRequest) SetMachineRemark(v string) *DescribeBackupPoliciesRequest {
	s.MachineRemark = &v
	return s
}

func (s *DescribeBackupPoliciesRequest) SetName(v string) *DescribeBackupPoliciesRequest {
	s.Name = &v
	return s
}

func (s *DescribeBackupPoliciesRequest) SetPageSize(v int32) *DescribeBackupPoliciesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeBackupPoliciesRequest) SetStatus(v string) *DescribeBackupPoliciesRequest {
	s.Status = &v
	return s
}

type DescribeBackupPoliciesResponseBody struct {
	// The pagination information.
	PageInfo *DescribeBackupPoliciesResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// An array that consists of the anti-ransomware policies returned.
	Policies []*DescribeBackupPoliciesResponseBodyPolicies `json:"Policies,omitempty" xml:"Policies,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBackupPoliciesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPoliciesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupPoliciesResponseBody) SetPageInfo(v *DescribeBackupPoliciesResponseBodyPageInfo) *DescribeBackupPoliciesResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeBackupPoliciesResponseBody) SetPolicies(v []*DescribeBackupPoliciesResponseBodyPolicies) *DescribeBackupPoliciesResponseBody {
	s.Policies = v
	return s
}

func (s *DescribeBackupPoliciesResponseBody) SetRequestId(v string) *DescribeBackupPoliciesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBackupPoliciesResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: 10.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of anti-ransomware policies returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeBackupPoliciesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPoliciesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeBackupPoliciesResponseBodyPageInfo) SetCount(v int32) *DescribeBackupPoliciesResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeBackupPoliciesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPageInfo) SetPageSize(v int32) *DescribeBackupPoliciesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPageInfo) SetTotalCount(v int32) *DescribeBackupPoliciesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeBackupPoliciesResponseBodyPolicies struct {
	// The number of the servers on which the anti-ransomware agent is in an abnormal state.
	ClientErrorCount *int32 `json:"ClientErrorCount,omitempty" xml:"ClientErrorCount,omitempty"`
	// The UUIDs of the servers on which the anti-ransomware agent is in an **abnormal** state.
	ClientErrorUuidList []*string `json:"ClientErrorUuidList,omitempty" xml:"ClientErrorUuidList,omitempty" type:"Repeated"`
	// The status of the anti-ransomware agent. Valid values:
	//
	// *   **running**: normal
	// *   **exception**: abnormal
	ClientStatus *string `json:"ClientStatus,omitempty" xml:"ClientStatus,omitempty"`
	// The number of the servers on which the anti-ransomware agent is in a normal state.
	HealthClientCount *int32 `json:"HealthClientCount,omitempty" xml:"HealthClientCount,omitempty"`
	// The UUIDs of the servers on which the anti-ransomware agent is in a **normal** state.
	HealthClientUuidList []*string `json:"HealthClientUuidList,omitempty" xml:"HealthClientUuidList,omitempty" type:"Repeated"`
	// The ID of the anti-ransomware policy.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the anti-ransomware policy.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configurations of the anti-ransomware policy. The value of this parameter is in the JSON format and contains the following fields:
	//
	// *   **IsDefault**: the type of the anti-ransomware policy. Valid values:
	//
	//     *   **1**: recommended policy
	//     *   **0**: custom policy
	//
	// *   **Include**: the format of the files that are protected. If the value of this field is \[], all formats of files are protected.
	//
	// *   **Source**: the directory that is protected. If the value of this field is \[], all directories are protected.
	//
	// *   **ExcludeSystemPath**: indicates whether a specified directory is excluded from the anti-ransomware policy. If the value of this field is **true**, the directory is excluded. If this field is left empty, no directories are excluded.
	//
	// *   **Exclude**: the directory that is excluded from the anti-ransomware policy. If no directory is specified, the value of this field is \[].
	//
	// *   **Schedule**: the start time and interval of a data backup task. A start time that begins during off-peak hours but does not start on the hour is recommended. Examples:
	//
	//     *   If the value of this field is I|1583216092|P21D, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of three weeks.
	//     *   If the value of this field is I|1583216092|PT24H, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of 24 hours.
	//
	// *   **Retention**: the period during which backup data is retained. Unit: days. If the value of this field is 7, backup data is retained for a week. If the value of this field is 365, backup data is retained for a year. If the value of this field is -1, backup data is permanently retained.
	//
	// *   **SpeedLimiter**: the limit on the network bandwidth for data backup tasks. If the value of this field is 0:24:30720, the maximum bandwidth for a data backup task is 30 MB/s from 00:00 to 24:00.
	//
	// *   **UseVss**: indicates whether the VSS feature is enabled. The feature is available only for Windows servers. Valid values:
	//
	//     *   **true**: yes
	//     *   **false**: no
	//
	// >  The VSS feature is available only if you create the anti-ransomware policy for Windows servers. After you enable the feature, the number of backup failures due to running processes is significantly reduced. We recommend that you enable the VSS feature. After you enable the feature, the data of disks that are in the exFAT and FAT32 formats cannot be backed up.
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The ID of the region that you specified for data backup when you installed the anti-ransomware agent for the server not deployed on Alibaba Cloud.
	PolicyRegionId *string `json:"PolicyRegionId,omitempty" xml:"PolicyRegionId,omitempty"`
	// The version of the anti-ransomware policy. Valid values:
	//
	// *   1.0.0
	// *   2.0.0
	PolicyVersion *string `json:"PolicyVersion,omitempty" xml:"PolicyVersion,omitempty"`
	// The UUIDs that are returned based on the value of the MachineRemark request parameter.
	RemarkedUuidList []*string `json:"RemarkedUuidList,omitempty" xml:"RemarkedUuidList,omitempty" type:"Repeated"`
	// The type of the server. Valid values:
	//
	// *   **OUT_CLOUD**: server not deployed on Alibaba Cloud
	// *   **ALIYUN**: Elastic Compute Service (ECS) instance
	// *   **TRIPARTITE**: simple application server
	ServerType *string `json:"ServerType,omitempty" xml:"ServerType,omitempty"`
	// The number of servers on which data backup is exceptional.
	ServiceErrorCount *int32 `json:"ServiceErrorCount,omitempty" xml:"ServiceErrorCount,omitempty"`
	// The UUIDs of the servers on which data backup is exceptional.
	ServiceErrorUuidList []*string `json:"ServiceErrorUuidList,omitempty" xml:"ServiceErrorUuidList,omitempty" type:"Repeated"`
	// The status of the anti-ransomware policy. Valid values:
	//
	// *   **enabled**: The anti-ransomware policy is manually enabled.
	// *   **disabled**: The anti-ransomware policy is manually disabled. After an anti-ransomware policy is disabled, the data backup task that is running based on the policy stops.
	// *   **closed**: The anti-ransomware policy automatically stops because the anti-ransomware capacity is insufficient.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The upgrade status of the anti-ransomware policy. Valid values:
	//
	// *   **NotUpgraded**
	// *   **Upgrading**
	// *   **UpgradeFailed**
	// *   **UpgradeSuccess**
	UpgradeStatus *string `json:"UpgradeStatus,omitempty" xml:"UpgradeStatus,omitempty"`
	// The UUIDs of the servers to which the anti-ransomware policy is applied.
	UuidList []*string `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s DescribeBackupPoliciesResponseBodyPolicies) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPoliciesResponseBodyPolicies) GoString() string {
	return s.String()
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetClientErrorCount(v int32) *DescribeBackupPoliciesResponseBodyPolicies {
	s.ClientErrorCount = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetClientErrorUuidList(v []*string) *DescribeBackupPoliciesResponseBodyPolicies {
	s.ClientErrorUuidList = v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetClientStatus(v string) *DescribeBackupPoliciesResponseBodyPolicies {
	s.ClientStatus = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetHealthClientCount(v int32) *DescribeBackupPoliciesResponseBodyPolicies {
	s.HealthClientCount = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetHealthClientUuidList(v []*string) *DescribeBackupPoliciesResponseBodyPolicies {
	s.HealthClientUuidList = v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetId(v int64) *DescribeBackupPoliciesResponseBodyPolicies {
	s.Id = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetName(v string) *DescribeBackupPoliciesResponseBodyPolicies {
	s.Name = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetPolicy(v string) *DescribeBackupPoliciesResponseBodyPolicies {
	s.Policy = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetPolicyRegionId(v string) *DescribeBackupPoliciesResponseBodyPolicies {
	s.PolicyRegionId = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetPolicyVersion(v string) *DescribeBackupPoliciesResponseBodyPolicies {
	s.PolicyVersion = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetRemarkedUuidList(v []*string) *DescribeBackupPoliciesResponseBodyPolicies {
	s.RemarkedUuidList = v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetServerType(v string) *DescribeBackupPoliciesResponseBodyPolicies {
	s.ServerType = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetServiceErrorCount(v int32) *DescribeBackupPoliciesResponseBodyPolicies {
	s.ServiceErrorCount = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetServiceErrorUuidList(v []*string) *DescribeBackupPoliciesResponseBodyPolicies {
	s.ServiceErrorUuidList = v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetStatus(v string) *DescribeBackupPoliciesResponseBodyPolicies {
	s.Status = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetUpgradeStatus(v string) *DescribeBackupPoliciesResponseBodyPolicies {
	s.UpgradeStatus = &v
	return s
}

func (s *DescribeBackupPoliciesResponseBodyPolicies) SetUuidList(v []*string) *DescribeBackupPoliciesResponseBodyPolicies {
	s.UuidList = v
	return s
}

type DescribeBackupPoliciesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBackupPoliciesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBackupPoliciesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPoliciesResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupPoliciesResponse) SetHeaders(v map[string]*string) *DescribeBackupPoliciesResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupPoliciesResponse) SetStatusCode(v int32) *DescribeBackupPoliciesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackupPoliciesResponse) SetBody(v *DescribeBackupPoliciesResponseBody) *DescribeBackupPoliciesResponse {
	s.Body = v
	return s
}

type DescribeBackupPolicyRequest struct {
	// The ID of the anti-ransomware policy.
	//
	// >  You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the IDs of anti-ransomware policies.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyRequest) SetId(v int64) *DescribeBackupPolicyRequest {
	s.Id = &v
	return s
}

type DescribeBackupPolicyResponseBody struct {
	// The details of the anti-ransomware policy.
	BackupPolicyDetail *DescribeBackupPolicyResponseBodyBackupPolicyDetail `json:"BackupPolicyDetail,omitempty" xml:"BackupPolicyDetail,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBackupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyResponseBody) SetBackupPolicyDetail(v *DescribeBackupPolicyResponseBodyBackupPolicyDetail) *DescribeBackupPolicyResponseBody {
	s.BackupPolicyDetail = v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetRequestId(v string) *DescribeBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBackupPolicyResponseBodyBackupPolicyDetail struct {
	// The status of the anti-ransomware agent. Valid values:
	//
	// *   **running**: normal
	// *   **exception**: abnormal
	ClientStatus *string `json:"ClientStatus,omitempty" xml:"ClientStatus,omitempty"`
	// The ID of the anti-ransomware policy.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the anti-ransomware policy.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// *   **IsDefault**: the type of the anti-ransomware policy. Valid values:
	//
	//     *   **1**: recommended policy
	//     *   **0**: custom policy
	//
	// *   **Include**: the format of the files that you want to protect. If you want to protect the files in all formats, set this field to \[].
	//
	// *   **Source**: the directory that you want to protect. If you want to protect all directories, set this field to \[].
	//
	// *   **ExcludeSystemPath**: specifies whether to exclude a specific directory from the anti-ransomware policy. If you want to exclude a directory, set this field to **true**. If you do not want to exclude a directory, leave this field empty.
	//
	// *   **Exclude**: the directory that you want to exclude from the anti-ransomware policy. If you do not want to exclude a directory, set this field to \[].
	//
	// *   **Schedule**: the start time and interval of a data backup task. We recommend that you specify a start time that begins during off-peak hours but does not start on the hour. Examples:
	//
	//     *   If you set this field to I|1583216092|P21D, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of three weeks.
	//     *   If you set this field to I|1583216092|PT24H, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of 24 hours.
	//
	// *   **Retention**: the period during which backup data is retained. Unit: days. If you set this field to 7, backup data is retained for a week. If you set this field to 365, backup data is retained for a year. If you set this field to -1, backup data is permanently retained.
	//
	// *   **SpeedLimiter**: the limit on the network bandwidth for data backup tasks. If you set this field to 0:24:30720, the maximum bandwidth for a data backup task is 30 MB/s from 00:00 to 24:00.
	//
	// *   **UseVss**: specifies whether to enable the VSS feature. The feature is available only for Windows servers. Valid values:
	//
	//     *   **true**: yes
	//     *   **false**: no
	//
	// >  The VSS feature is available only if you create the anti-ransomware policy for Windows servers. After you enable the feature, the number of backup failures due to running processes is significantly reduced. We recommend that you enable the VSS feature. After you enable the feature, the data of disks that are in the exFAT and FAT32 formats cannot be backed up.
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The version of the anti-ransomware policy.
	//
	// *   **1.0.0**
	// *   **2.0.0**
	PolicyVersion *string `json:"PolicyVersion,omitempty" xml:"PolicyVersion,omitempty"`
	// The ID of the region in which backup data is stored.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the anti-ransomware policy. Valid values:
	//
	// *   **enabled**: The anti-ransomware policy is manually enabled.
	// *   **disabled**: The anti-ransomware policy is manually disabled. After an anti-ransomware policy is disabled, the data backup task that is running based on the policy stops.
	// *   **closed**: The anti-ransomware policy automatically stops because the anti-ransomware capacity is insufficient.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// An array consisting of the UUIDs of the servers to which the anti-ransomware policy is applied.
	UuidList []*string `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s DescribeBackupPolicyResponseBodyBackupPolicyDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyResponseBodyBackupPolicyDetail) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyResponseBodyBackupPolicyDetail) SetClientStatus(v string) *DescribeBackupPolicyResponseBodyBackupPolicyDetail {
	s.ClientStatus = &v
	return s
}

func (s *DescribeBackupPolicyResponseBodyBackupPolicyDetail) SetId(v int64) *DescribeBackupPolicyResponseBodyBackupPolicyDetail {
	s.Id = &v
	return s
}

func (s *DescribeBackupPolicyResponseBodyBackupPolicyDetail) SetName(v string) *DescribeBackupPolicyResponseBodyBackupPolicyDetail {
	s.Name = &v
	return s
}

func (s *DescribeBackupPolicyResponseBodyBackupPolicyDetail) SetPolicy(v string) *DescribeBackupPolicyResponseBodyBackupPolicyDetail {
	s.Policy = &v
	return s
}

func (s *DescribeBackupPolicyResponseBodyBackupPolicyDetail) SetPolicyVersion(v string) *DescribeBackupPolicyResponseBodyBackupPolicyDetail {
	s.PolicyVersion = &v
	return s
}

func (s *DescribeBackupPolicyResponseBodyBackupPolicyDetail) SetRegionId(v string) *DescribeBackupPolicyResponseBodyBackupPolicyDetail {
	s.RegionId = &v
	return s
}

func (s *DescribeBackupPolicyResponseBodyBackupPolicyDetail) SetStatus(v string) *DescribeBackupPolicyResponseBodyBackupPolicyDetail {
	s.Status = &v
	return s
}

func (s *DescribeBackupPolicyResponseBodyBackupPolicyDetail) SetUuidList(v []*string) *DescribeBackupPolicyResponseBodyBackupPolicyDetail {
	s.UuidList = v
	return s
}

type DescribeBackupPolicyResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyResponse) SetHeaders(v map[string]*string) *DescribeBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupPolicyResponse) SetStatusCode(v int32) *DescribeBackupPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetBody(v *DescribeBackupPolicyResponseBody) *DescribeBackupPolicyResponse {
	s.Body = v
	return s
}

type DescribeBackupRestoreCountResponseBody struct {
	// The statistics of restoration tasks.
	BackupRestoreCount *DescribeBackupRestoreCountResponseBodyBackupRestoreCount `json:"BackupRestoreCount,omitempty" xml:"BackupRestoreCount,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBackupRestoreCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupRestoreCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupRestoreCountResponseBody) SetBackupRestoreCount(v *DescribeBackupRestoreCountResponseBodyBackupRestoreCount) *DescribeBackupRestoreCountResponseBody {
	s.BackupRestoreCount = v
	return s
}

func (s *DescribeBackupRestoreCountResponseBody) SetRequestId(v string) *DescribeBackupRestoreCountResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBackupRestoreCountResponseBodyBackupRestoreCount struct {
	// The number of the restoration tasks that are in the **being restored** state.
	Recovering *int32 `json:"Recovering,omitempty" xml:"Recovering,omitempty"`
	// The total number of the restoration tasks that you create.
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeBackupRestoreCountResponseBodyBackupRestoreCount) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupRestoreCountResponseBodyBackupRestoreCount) GoString() string {
	return s.String()
}

func (s *DescribeBackupRestoreCountResponseBodyBackupRestoreCount) SetRecovering(v int32) *DescribeBackupRestoreCountResponseBodyBackupRestoreCount {
	s.Recovering = &v
	return s
}

func (s *DescribeBackupRestoreCountResponseBodyBackupRestoreCount) SetTotal(v int32) *DescribeBackupRestoreCountResponseBodyBackupRestoreCount {
	s.Total = &v
	return s
}

type DescribeBackupRestoreCountResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBackupRestoreCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBackupRestoreCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupRestoreCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupRestoreCountResponse) SetHeaders(v map[string]*string) *DescribeBackupRestoreCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupRestoreCountResponse) SetStatusCode(v int32) *DescribeBackupRestoreCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackupRestoreCountResponse) SetBody(v *DescribeBackupRestoreCountResponseBody) *DescribeBackupRestoreCountResponse {
	s.Body = v
	return s
}

type DescribeBruteForceRecordsRequest struct {
	BlockIp         *string `json:"BlockIp,omitempty" xml:"BlockIp,omitempty"`
	CurrentPage     *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status          *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeBruteForceRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBruteForceRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeBruteForceRecordsRequest) SetBlockIp(v string) *DescribeBruteForceRecordsRequest {
	s.BlockIp = &v
	return s
}

func (s *DescribeBruteForceRecordsRequest) SetCurrentPage(v int32) *DescribeBruteForceRecordsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeBruteForceRecordsRequest) SetPageSize(v int32) *DescribeBruteForceRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeBruteForceRecordsRequest) SetResourceOwnerId(v int64) *DescribeBruteForceRecordsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeBruteForceRecordsRequest) SetStatus(v int32) *DescribeBruteForceRecordsRequest {
	s.Status = &v
	return s
}

type DescribeBruteForceRecordsResponseBody struct {
	MachineList []*DescribeBruteForceRecordsResponseBodyMachineList `json:"MachineList,omitempty" xml:"MachineList,omitempty" type:"Repeated"`
	PageInfo    *DescribeBruteForceRecordsResponseBodyPageInfo      `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId   *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBruteForceRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBruteForceRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBruteForceRecordsResponseBody) SetMachineList(v []*DescribeBruteForceRecordsResponseBodyMachineList) *DescribeBruteForceRecordsResponseBody {
	s.MachineList = v
	return s
}

func (s *DescribeBruteForceRecordsResponseBody) SetPageInfo(v *DescribeBruteForceRecordsResponseBodyPageInfo) *DescribeBruteForceRecordsResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeBruteForceRecordsResponseBody) SetRequestId(v string) *DescribeBruteForceRecordsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBruteForceRecordsResponseBodyMachineList struct {
	BlockExpireDate *int64  `json:"BlockExpireDate,omitempty" xml:"BlockExpireDate,omitempty"`
	BlockIp         *string `json:"BlockIp,omitempty" xml:"BlockIp,omitempty"`
	ErrorCode       *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	InstanceName    *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InternetIp      *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	IntranetIp      *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	Port            *string `json:"Port,omitempty" xml:"Port,omitempty"`
	RuleName        *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty"`
	Status          *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Uuid            *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeBruteForceRecordsResponseBodyMachineList) String() string {
	return tea.Prettify(s)
}

func (s DescribeBruteForceRecordsResponseBodyMachineList) GoString() string {
	return s.String()
}

func (s *DescribeBruteForceRecordsResponseBodyMachineList) SetBlockExpireDate(v int64) *DescribeBruteForceRecordsResponseBodyMachineList {
	s.BlockExpireDate = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyMachineList) SetBlockIp(v string) *DescribeBruteForceRecordsResponseBodyMachineList {
	s.BlockIp = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyMachineList) SetErrorCode(v string) *DescribeBruteForceRecordsResponseBodyMachineList {
	s.ErrorCode = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyMachineList) SetId(v int64) *DescribeBruteForceRecordsResponseBodyMachineList {
	s.Id = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyMachineList) SetInstanceName(v string) *DescribeBruteForceRecordsResponseBodyMachineList {
	s.InstanceName = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyMachineList) SetInternetIp(v string) *DescribeBruteForceRecordsResponseBodyMachineList {
	s.InternetIp = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyMachineList) SetIntranetIp(v string) *DescribeBruteForceRecordsResponseBodyMachineList {
	s.IntranetIp = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyMachineList) SetPort(v string) *DescribeBruteForceRecordsResponseBodyMachineList {
	s.Port = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyMachineList) SetRuleName(v string) *DescribeBruteForceRecordsResponseBodyMachineList {
	s.RuleName = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyMachineList) SetSource(v string) *DescribeBruteForceRecordsResponseBodyMachineList {
	s.Source = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyMachineList) SetStatus(v int32) *DescribeBruteForceRecordsResponseBodyMachineList {
	s.Status = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyMachineList) SetUuid(v string) *DescribeBruteForceRecordsResponseBodyMachineList {
	s.Uuid = &v
	return s
}

type DescribeBruteForceRecordsResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeBruteForceRecordsResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeBruteForceRecordsResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeBruteForceRecordsResponseBodyPageInfo) SetCount(v int32) *DescribeBruteForceRecordsResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeBruteForceRecordsResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyPageInfo) SetPageSize(v int32) *DescribeBruteForceRecordsResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeBruteForceRecordsResponseBodyPageInfo) SetTotalCount(v int32) *DescribeBruteForceRecordsResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeBruteForceRecordsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBruteForceRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBruteForceRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBruteForceRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeBruteForceRecordsResponse) SetHeaders(v map[string]*string) *DescribeBruteForceRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeBruteForceRecordsResponse) SetStatusCode(v int32) *DescribeBruteForceRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBruteForceRecordsResponse) SetBody(v *DescribeBruteForceRecordsResponseBody) *DescribeBruteForceRecordsResponse {
	s.Body = v
	return s
}

type DescribeBruteForceSummaryRequest struct {
	ResourceOwnerId *int64 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeBruteForceSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBruteForceSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeBruteForceSummaryRequest) SetResourceOwnerId(v int64) *DescribeBruteForceSummaryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeBruteForceSummaryRequest) SetSourceIp(v string) *DescribeBruteForceSummaryRequest {
	s.SourceIp = &v
	return s
}

type DescribeBruteForceSummaryResponseBody struct {
	// The statistics of IP address blocking policies.
	BruteForceSummary *DescribeBruteForceSummaryResponseBodyBruteForceSummary `json:"BruteForceSummary,omitempty" xml:"BruteForceSummary,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBruteForceSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBruteForceSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBruteForceSummaryResponseBody) SetBruteForceSummary(v *DescribeBruteForceSummaryResponseBodyBruteForceSummary) *DescribeBruteForceSummaryResponseBody {
	s.BruteForceSummary = v
	return s
}

func (s *DescribeBruteForceSummaryResponseBody) SetRequestId(v string) *DescribeBruteForceSummaryResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBruteForceSummaryResponseBodyBruteForceSummary struct {
	// The total number of IP address blocking policies.
	AllStrategyCount *int32 `json:"AllStrategyCount,omitempty" xml:"AllStrategyCount,omitempty"`
	// The number of enabled IP address blocking policies.
	EffectiveCount *int32 `json:"EffectiveCount,omitempty" xml:"EffectiveCount,omitempty"`
}

func (s DescribeBruteForceSummaryResponseBodyBruteForceSummary) String() string {
	return tea.Prettify(s)
}

func (s DescribeBruteForceSummaryResponseBodyBruteForceSummary) GoString() string {
	return s.String()
}

func (s *DescribeBruteForceSummaryResponseBodyBruteForceSummary) SetAllStrategyCount(v int32) *DescribeBruteForceSummaryResponseBodyBruteForceSummary {
	s.AllStrategyCount = &v
	return s
}

func (s *DescribeBruteForceSummaryResponseBodyBruteForceSummary) SetEffectiveCount(v int32) *DescribeBruteForceSummaryResponseBodyBruteForceSummary {
	s.EffectiveCount = &v
	return s
}

type DescribeBruteForceSummaryResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBruteForceSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBruteForceSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBruteForceSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeBruteForceSummaryResponse) SetHeaders(v map[string]*string) *DescribeBruteForceSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeBruteForceSummaryResponse) SetStatusCode(v int32) *DescribeBruteForceSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBruteForceSummaryResponse) SetBody(v *DescribeBruteForceSummaryResponseBody) *DescribeBruteForceSummaryResponse {
	s.Body = v
	return s
}

type DescribeCheckEcsWarningsRequest struct {
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeCheckEcsWarningsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckEcsWarningsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCheckEcsWarningsRequest) SetSourceIp(v string) *DescribeCheckEcsWarningsRequest {
	s.SourceIp = &v
	return s
}

type DescribeCheckEcsWarningsResponseBody struct {
	// Indicates whether you use the free trial of Security Center. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	CanTry *string `json:"CanTry,omitempty" xml:"CanTry,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The edition of Security Center that you use. Valid values:
	//
	// *   **1**: Basic edition
	// *   **2** or **3**: Enterprise edition
	// *   **5**: Advanced edition
	// *   **6**: Anti-virus edition
	//
	// >  Both the value 2 and the value 3 indicate the Enterprise edition.
	SasVersion *string `json:"SasVersion,omitempty" xml:"SasVersion,omitempty"`
	// The number of weak passwords that can cause high risks to your assets.
	WeakPasswordCount *string `json:"WeakPasswordCount,omitempty" xml:"WeakPasswordCount,omitempty"`
}

func (s DescribeCheckEcsWarningsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckEcsWarningsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCheckEcsWarningsResponseBody) SetCanTry(v string) *DescribeCheckEcsWarningsResponseBody {
	s.CanTry = &v
	return s
}

func (s *DescribeCheckEcsWarningsResponseBody) SetRequestId(v string) *DescribeCheckEcsWarningsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCheckEcsWarningsResponseBody) SetSasVersion(v string) *DescribeCheckEcsWarningsResponseBody {
	s.SasVersion = &v
	return s
}

func (s *DescribeCheckEcsWarningsResponseBody) SetWeakPasswordCount(v string) *DescribeCheckEcsWarningsResponseBody {
	s.WeakPasswordCount = &v
	return s
}

type DescribeCheckEcsWarningsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCheckEcsWarningsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCheckEcsWarningsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckEcsWarningsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCheckEcsWarningsResponse) SetHeaders(v map[string]*string) *DescribeCheckEcsWarningsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCheckEcsWarningsResponse) SetStatusCode(v int32) *DescribeCheckEcsWarningsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCheckEcsWarningsResponse) SetBody(v *DescribeCheckEcsWarningsResponseBody) *DescribeCheckEcsWarningsResponse {
	s.Body = v
	return s
}

type DescribeCheckFixDetailsRequest struct {
	CheckIds *string `json:"CheckIds,omitempty" xml:"CheckIds,omitempty"`
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RiskId   *int64  `json:"RiskId,omitempty" xml:"RiskId,omitempty"`
}

func (s DescribeCheckFixDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckFixDetailsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCheckFixDetailsRequest) SetCheckIds(v string) *DescribeCheckFixDetailsRequest {
	s.CheckIds = &v
	return s
}

func (s *DescribeCheckFixDetailsRequest) SetLang(v string) *DescribeCheckFixDetailsRequest {
	s.Lang = &v
	return s
}

func (s *DescribeCheckFixDetailsRequest) SetRiskId(v int64) *DescribeCheckFixDetailsRequest {
	s.RiskId = &v
	return s
}

type DescribeCheckFixDetailsResponseBody struct {
	CheckFixDetails []*DescribeCheckFixDetailsResponseBodyCheckFixDetails `json:"CheckFixDetails,omitempty" xml:"CheckFixDetails,omitempty" type:"Repeated"`
	Count           *int32                                                `json:"Count,omitempty" xml:"Count,omitempty"`
	RequestId       *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCheckFixDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckFixDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCheckFixDetailsResponseBody) SetCheckFixDetails(v []*DescribeCheckFixDetailsResponseBodyCheckFixDetails) *DescribeCheckFixDetailsResponseBody {
	s.CheckFixDetails = v
	return s
}

func (s *DescribeCheckFixDetailsResponseBody) SetCount(v int32) *DescribeCheckFixDetailsResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBody) SetRequestId(v string) *DescribeCheckFixDetailsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCheckFixDetailsResponseBodyCheckFixDetails struct {
	CheckDesc *string                                                    `json:"CheckDesc,omitempty" xml:"CheckDesc,omitempty"`
	CheckId   *int64                                                     `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	CheckItem *string                                                    `json:"CheckItem,omitempty" xml:"CheckItem,omitempty"`
	Rules     []*DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s DescribeCheckFixDetailsResponseBodyCheckFixDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckFixDetailsResponseBodyCheckFixDetails) GoString() string {
	return s.String()
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetails) SetCheckDesc(v string) *DescribeCheckFixDetailsResponseBodyCheckFixDetails {
	s.CheckDesc = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetails) SetCheckId(v int64) *DescribeCheckFixDetailsResponseBodyCheckFixDetails {
	s.CheckId = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetails) SetCheckItem(v string) *DescribeCheckFixDetailsResponseBodyCheckFixDetails {
	s.CheckItem = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetails) SetRules(v []*DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules) *DescribeCheckFixDetailsResponseBodyCheckFixDetails {
	s.Rules = v
	return s
}

type DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules struct {
	CheckId      *int64                                                              `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	DefaultValue *int32                                                              `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	Optional     *int32                                                              `json:"Optional,omitempty" xml:"Optional,omitempty"`
	ParamList    []*DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList `json:"ParamList,omitempty" xml:"ParamList,omitempty" type:"Repeated"`
	RuleDesc     *string                                                             `json:"RuleDesc,omitempty" xml:"RuleDesc,omitempty"`
	RuleId       *string                                                             `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	Value        *int32                                                              `json:"Value,omitempty" xml:"Value,omitempty"`
	VarName      *string                                                             `json:"VarName,omitempty" xml:"VarName,omitempty"`
}

func (s DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules) GoString() string {
	return s.String()
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules) SetCheckId(v int64) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules {
	s.CheckId = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules) SetDefaultValue(v int32) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules {
	s.DefaultValue = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules) SetOptional(v int32) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules {
	s.Optional = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules) SetParamList(v []*DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules {
	s.ParamList = v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules) SetRuleDesc(v string) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules {
	s.RuleDesc = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules) SetRuleId(v string) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules {
	s.RuleId = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules) SetValue(v int32) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules {
	s.Value = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules) SetVarName(v string) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRules {
	s.VarName = &v
	return s
}

type DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList struct {
	EnumValue         *string `json:"EnumValue,omitempty" xml:"EnumValue,omitempty"`
	MaxValue          *int32  `json:"MaxValue,omitempty" xml:"MaxValue,omitempty"`
	MinValue          *int32  `json:"MinValue,omitempty" xml:"MinValue,omitempty"`
	ParamDefaultValue *string `json:"ParamDefaultValue,omitempty" xml:"ParamDefaultValue,omitempty"`
	ParamDesc         *string `json:"ParamDesc,omitempty" xml:"ParamDesc,omitempty"`
	ParamName         *string `json:"ParamName,omitempty" xml:"ParamName,omitempty"`
	ParamType         *int32  `json:"ParamType,omitempty" xml:"ParamType,omitempty"`
	RuleId            *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	Value             *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList) GoString() string {
	return s.String()
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList) SetEnumValue(v string) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList {
	s.EnumValue = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList) SetMaxValue(v int32) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList {
	s.MaxValue = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList) SetMinValue(v int32) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList {
	s.MinValue = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList) SetParamDefaultValue(v string) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList {
	s.ParamDefaultValue = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList) SetParamDesc(v string) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList {
	s.ParamDesc = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList) SetParamName(v string) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList {
	s.ParamName = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList) SetParamType(v int32) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList {
	s.ParamType = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList) SetRuleId(v string) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList {
	s.RuleId = &v
	return s
}

func (s *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList) SetValue(v string) *DescribeCheckFixDetailsResponseBodyCheckFixDetailsRulesParamList {
	s.Value = &v
	return s
}

type DescribeCheckFixDetailsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCheckFixDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCheckFixDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckFixDetailsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCheckFixDetailsResponse) SetHeaders(v map[string]*string) *DescribeCheckFixDetailsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCheckFixDetailsResponse) SetStatusCode(v int32) *DescribeCheckFixDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCheckFixDetailsResponse) SetBody(v *DescribeCheckFixDetailsResponseBody) *DescribeCheckFixDetailsResponse {
	s.Body = v
	return s
}

type DescribeCheckWarningDetailRequest struct {
	// The ID of the alert that is triggered by the check item.
	//
	// >  To query the details about a specified check item, you must provide the ID of the alert that is triggered by the check item. You can call the [DescribeCheckWarnings](~~DescribeCheckWarnings~~) operation to query the IDs of alerts.
	CheckWarningId *int64 `json:"CheckWarningId,omitempty" xml:"CheckWarningId,omitempty"`
	// The language of the content within the request and the response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeCheckWarningDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningDetailRequest) SetCheckWarningId(v int64) *DescribeCheckWarningDetailRequest {
	s.CheckWarningId = &v
	return s
}

func (s *DescribeCheckWarningDetailRequest) SetLang(v string) *DescribeCheckWarningDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribeCheckWarningDetailRequest) SetSourceIp(v string) *DescribeCheckWarningDetailRequest {
	s.SourceIp = &v
	return s
}

type DescribeCheckWarningDetailResponseBody struct {
	// The suggestion for the management of the risk item.
	Advice *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	// The ID of the check item.
	CheckId *int64 `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	// The additional information about the risk item.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the check item.
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The risk level of the check item. Valid values:
	//
	// *   **high**: The item is a high-risk item and is highlighted in red.
	// *   **medium**: The item is a medium-risk item and is highlighted in orange.
	// *   **low**: The item is a low-risk item and is highlighted in gray.
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The prompt for the risk item.
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The type of the check item. Valid values:
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCheckWarningDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningDetailResponseBody) SetAdvice(v string) *DescribeCheckWarningDetailResponseBody {
	s.Advice = &v
	return s
}

func (s *DescribeCheckWarningDetailResponseBody) SetCheckId(v int64) *DescribeCheckWarningDetailResponseBody {
	s.CheckId = &v
	return s
}

func (s *DescribeCheckWarningDetailResponseBody) SetDescription(v string) *DescribeCheckWarningDetailResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeCheckWarningDetailResponseBody) SetItem(v string) *DescribeCheckWarningDetailResponseBody {
	s.Item = &v
	return s
}

func (s *DescribeCheckWarningDetailResponseBody) SetLevel(v string) *DescribeCheckWarningDetailResponseBody {
	s.Level = &v
	return s
}

func (s *DescribeCheckWarningDetailResponseBody) SetPrompt(v string) *DescribeCheckWarningDetailResponseBody {
	s.Prompt = &v
	return s
}

func (s *DescribeCheckWarningDetailResponseBody) SetRequestId(v string) *DescribeCheckWarningDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCheckWarningDetailResponseBody) SetType(v string) *DescribeCheckWarningDetailResponseBody {
	s.Type = &v
	return s
}

type DescribeCheckWarningDetailResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCheckWarningDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCheckWarningDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningDetailResponse) SetHeaders(v map[string]*string) *DescribeCheckWarningDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeCheckWarningDetailResponse) SetStatusCode(v int32) *DescribeCheckWarningDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCheckWarningDetailResponse) SetBody(v *DescribeCheckWarningDetailResponseBody) *DescribeCheckWarningDetailResponse {
	s.Body = v
	return s
}

type DescribeCheckWarningMachinesRequest struct {
	CheckId *int64  `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	Lang    *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	RiskId  *int64  `json:"RiskId,omitempty" xml:"RiskId,omitempty"`
	Status  *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeCheckWarningMachinesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningMachinesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningMachinesRequest) SetCheckId(v int64) *DescribeCheckWarningMachinesRequest {
	s.CheckId = &v
	return s
}

func (s *DescribeCheckWarningMachinesRequest) SetLang(v string) *DescribeCheckWarningMachinesRequest {
	s.Lang = &v
	return s
}

func (s *DescribeCheckWarningMachinesRequest) SetRiskId(v int64) *DescribeCheckWarningMachinesRequest {
	s.RiskId = &v
	return s
}

func (s *DescribeCheckWarningMachinesRequest) SetStatus(v int32) *DescribeCheckWarningMachinesRequest {
	s.Status = &v
	return s
}

type DescribeCheckWarningMachinesResponseBody struct {
	Count     *int32                                              `json:"Count,omitempty" xml:"Count,omitempty"`
	Machines  []*DescribeCheckWarningMachinesResponseBodyMachines `json:"Machines,omitempty" xml:"Machines,omitempty" type:"Repeated"`
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCheckWarningMachinesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningMachinesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningMachinesResponseBody) SetCount(v int32) *DescribeCheckWarningMachinesResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeCheckWarningMachinesResponseBody) SetMachines(v []*DescribeCheckWarningMachinesResponseBodyMachines) *DescribeCheckWarningMachinesResponseBody {
	s.Machines = v
	return s
}

func (s *DescribeCheckWarningMachinesResponseBody) SetRequestId(v string) *DescribeCheckWarningMachinesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCheckWarningMachinesResponseBodyMachines struct {
	Bind         *bool   `json:"Bind,omitempty" xml:"Bind,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InternetIp   *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	IntranetIp   *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Uuid         *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeCheckWarningMachinesResponseBodyMachines) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningMachinesResponseBodyMachines) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningMachinesResponseBodyMachines) SetBind(v bool) *DescribeCheckWarningMachinesResponseBodyMachines {
	s.Bind = &v
	return s
}

func (s *DescribeCheckWarningMachinesResponseBodyMachines) SetInstanceId(v string) *DescribeCheckWarningMachinesResponseBodyMachines {
	s.InstanceId = &v
	return s
}

func (s *DescribeCheckWarningMachinesResponseBodyMachines) SetInstanceName(v string) *DescribeCheckWarningMachinesResponseBodyMachines {
	s.InstanceName = &v
	return s
}

func (s *DescribeCheckWarningMachinesResponseBodyMachines) SetInternetIp(v string) *DescribeCheckWarningMachinesResponseBodyMachines {
	s.InternetIp = &v
	return s
}

func (s *DescribeCheckWarningMachinesResponseBodyMachines) SetIntranetIp(v string) *DescribeCheckWarningMachinesResponseBodyMachines {
	s.IntranetIp = &v
	return s
}

func (s *DescribeCheckWarningMachinesResponseBodyMachines) SetRegionId(v string) *DescribeCheckWarningMachinesResponseBodyMachines {
	s.RegionId = &v
	return s
}

func (s *DescribeCheckWarningMachinesResponseBodyMachines) SetUuid(v string) *DescribeCheckWarningMachinesResponseBodyMachines {
	s.Uuid = &v
	return s
}

type DescribeCheckWarningMachinesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCheckWarningMachinesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCheckWarningMachinesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningMachinesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningMachinesResponse) SetHeaders(v map[string]*string) *DescribeCheckWarningMachinesResponse {
	s.Headers = v
	return s
}

func (s *DescribeCheckWarningMachinesResponse) SetStatusCode(v int32) *DescribeCheckWarningMachinesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCheckWarningMachinesResponse) SetBody(v *DescribeCheckWarningMachinesResponseBody) *DescribeCheckWarningMachinesResponse {
	s.Body = v
	return s
}

type DescribeCheckWarningSummaryRequest struct {
	// The ID of the container cluster.
	//
	// >  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the container field. Valid values:
	//
	// *   **clusterId**: the ID of the cluster
	// *   **image**: the name of the image
	// *   **imageId**: the ID of the image
	// *   **namespace**: the namespace
	ContainerFieldName *string `json:"ContainerFieldName,omitempty" xml:"ContainerFieldName,omitempty"`
	// The value of the container field.
	ContainerFieldValue *string `json:"ContainerFieldValue,omitempty" xml:"ContainerFieldValue,omitempty"`
	// The number of the page to return.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	GroupId     *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The language of the content within the request and the response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The name of the risk item.
	RiskName *string `json:"RiskName,omitempty" xml:"RiskName,omitempty"`
	// The status of the baseline check. Valid values:
	//
	// *   **1**: failed
	// *   **3**: passed
	RiskStatus *int32 `json:"RiskStatus,omitempty" xml:"RiskStatus,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The status of the check item. Valid values:
	//
	// *   **1**: failed
	// *   **2**: verifying
	// *   **3**: passed
	// *   **5**: expired
	// *   **6**: ignored
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the baseline check policy.
	StrategyId *int64 `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	// The type of the query condition. Valid values:
	//
	// *   **uuid**: the ID of an asset
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	// The level-1 type of check items.
	//
	// >  You can call the [DescribeRiskType](~~DescribeRiskType~~) operation to query the level-1 types of check items.
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
	// The UUID of the asset.
	//
	// >  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of assets.
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeCheckWarningSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningSummaryRequest) SetClusterId(v string) *DescribeCheckWarningSummaryRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetContainerFieldName(v string) *DescribeCheckWarningSummaryRequest {
	s.ContainerFieldName = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetContainerFieldValue(v string) *DescribeCheckWarningSummaryRequest {
	s.ContainerFieldValue = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetCurrentPage(v int32) *DescribeCheckWarningSummaryRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetGroupId(v int64) *DescribeCheckWarningSummaryRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetLang(v string) *DescribeCheckWarningSummaryRequest {
	s.Lang = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetPageSize(v int32) *DescribeCheckWarningSummaryRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetRiskName(v string) *DescribeCheckWarningSummaryRequest {
	s.RiskName = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetRiskStatus(v int32) *DescribeCheckWarningSummaryRequest {
	s.RiskStatus = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetSourceIp(v string) *DescribeCheckWarningSummaryRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetStatus(v string) *DescribeCheckWarningSummaryRequest {
	s.Status = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetStrategyId(v int64) *DescribeCheckWarningSummaryRequest {
	s.StrategyId = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetTargetType(v string) *DescribeCheckWarningSummaryRequest {
	s.TargetType = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetTypeName(v string) *DescribeCheckWarningSummaryRequest {
	s.TypeName = &v
	return s
}

func (s *DescribeCheckWarningSummaryRequest) SetUuids(v string) *DescribeCheckWarningSummaryRequest {
	s.Uuids = &v
	return s
}

type DescribeCheckWarningSummaryResponseBody struct {
	// The number of check items returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the current page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of check items.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The statistics of check items.
	WarningSummarys []*DescribeCheckWarningSummaryResponseBodyWarningSummarys `json:"WarningSummarys,omitempty" xml:"WarningSummarys,omitempty" type:"Repeated"`
}

func (s DescribeCheckWarningSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningSummaryResponseBody) SetCount(v int32) *DescribeCheckWarningSummaryResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBody) SetCurrentPage(v int32) *DescribeCheckWarningSummaryResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBody) SetPageSize(v int32) *DescribeCheckWarningSummaryResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBody) SetRequestId(v string) *DescribeCheckWarningSummaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBody) SetTotalCount(v int32) *DescribeCheckWarningSummaryResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBody) SetWarningSummarys(v []*DescribeCheckWarningSummaryResponseBodyWarningSummarys) *DescribeCheckWarningSummaryResponseBody {
	s.WarningSummarys = v
	return s
}

type DescribeCheckWarningSummaryResponseBodyWarningSummarys struct {
	// The number of check items.
	CheckCount *int32 `json:"CheckCount,omitempty" xml:"CheckCount,omitempty"`
	// Indicates whether the risk item can be exploited. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	CheckExploit *bool `json:"CheckExploit,omitempty" xml:"CheckExploit,omitempty"`
	// Indicates whether the risk item is a database risk item. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DatabaseRisk *bool `json:"DatabaseRisk,omitempty" xml:"DatabaseRisk,omitempty"`
	// The number of high-risk items.
	HighWarningCount *int32 `json:"HighWarningCount,omitempty" xml:"HighWarningCount,omitempty"`
	// The time when the last baseline check was performed.
	LastFoundTime *string `json:"LastFoundTime,omitempty" xml:"LastFoundTime,omitempty"`
	// The risk level of the risk item. Valid values:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The number of low-risk items.
	LowWarningCount *int32 `json:"LowWarningCount,omitempty" xml:"LowWarningCount,omitempty"`
	// The number of medium-risk items.
	MediumWarningCount *int32 `json:"MediumWarningCount,omitempty" xml:"MediumWarningCount,omitempty"`
	// The ID of the risk item.
	RiskId *int64 `json:"RiskId,omitempty" xml:"RiskId,omitempty"`
	// The name of the risk item.
	RiskName *string `json:"RiskName,omitempty" xml:"RiskName,omitempty"`
	// The level-2 type of the risk item.
	SubTypeAlias *string `json:"SubTypeAlias,omitempty" xml:"SubTypeAlias,omitempty"`
	// The level-1 type of the check item. Examples: database, system, weak password, and middleware.
	TypeAlias *string `json:"TypeAlias,omitempty" xml:"TypeAlias,omitempty"`
	// The number of assets on which risk items are detected.
	WarningMachineCount *int32 `json:"WarningMachineCount,omitempty" xml:"WarningMachineCount,omitempty"`
}

func (s DescribeCheckWarningSummaryResponseBodyWarningSummarys) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningSummaryResponseBodyWarningSummarys) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningSummaryResponseBodyWarningSummarys) SetCheckCount(v int32) *DescribeCheckWarningSummaryResponseBodyWarningSummarys {
	s.CheckCount = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBodyWarningSummarys) SetCheckExploit(v bool) *DescribeCheckWarningSummaryResponseBodyWarningSummarys {
	s.CheckExploit = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBodyWarningSummarys) SetDatabaseRisk(v bool) *DescribeCheckWarningSummaryResponseBodyWarningSummarys {
	s.DatabaseRisk = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBodyWarningSummarys) SetHighWarningCount(v int32) *DescribeCheckWarningSummaryResponseBodyWarningSummarys {
	s.HighWarningCount = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBodyWarningSummarys) SetLastFoundTime(v string) *DescribeCheckWarningSummaryResponseBodyWarningSummarys {
	s.LastFoundTime = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBodyWarningSummarys) SetLevel(v string) *DescribeCheckWarningSummaryResponseBodyWarningSummarys {
	s.Level = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBodyWarningSummarys) SetLowWarningCount(v int32) *DescribeCheckWarningSummaryResponseBodyWarningSummarys {
	s.LowWarningCount = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBodyWarningSummarys) SetMediumWarningCount(v int32) *DescribeCheckWarningSummaryResponseBodyWarningSummarys {
	s.MediumWarningCount = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBodyWarningSummarys) SetRiskId(v int64) *DescribeCheckWarningSummaryResponseBodyWarningSummarys {
	s.RiskId = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBodyWarningSummarys) SetRiskName(v string) *DescribeCheckWarningSummaryResponseBodyWarningSummarys {
	s.RiskName = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBodyWarningSummarys) SetSubTypeAlias(v string) *DescribeCheckWarningSummaryResponseBodyWarningSummarys {
	s.SubTypeAlias = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBodyWarningSummarys) SetTypeAlias(v string) *DescribeCheckWarningSummaryResponseBodyWarningSummarys {
	s.TypeAlias = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponseBodyWarningSummarys) SetWarningMachineCount(v int32) *DescribeCheckWarningSummaryResponseBodyWarningSummarys {
	s.WarningMachineCount = &v
	return s
}

type DescribeCheckWarningSummaryResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCheckWarningSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCheckWarningSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningSummaryResponse) SetHeaders(v map[string]*string) *DescribeCheckWarningSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeCheckWarningSummaryResponse) SetStatusCode(v int32) *DescribeCheckWarningSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCheckWarningSummaryResponse) SetBody(v *DescribeCheckWarningSummaryResponseBody) *DescribeCheckWarningSummaryResponse {
	s.Body = v
	return s
}

type DescribeCheckWarningsRequest struct {
	// The ID of the check item.
	CheckId *int64 `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	// The type of the check item. Valid values:
	//
	// *   **hc.check.type.identity_auth**: identity authentication
	// *   **hc.check.type.access_control**: access control
	// *   **hc.check.type.network_service**: network and service
	// *   **hc.check.type.service_conf**: service configuration
	// *   **hc.check.type.file_rights**: file permission
	// *   **hc.check.type.security_audit**: security audit
	// *   **hc.check.type.attack_defense**: intrusion prevention
	// *   **hc.check.type.others**: others
	CheckType *string `json:"CheckType,omitempty" xml:"CheckType,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the risk item.
	//
	// >  To query specified risk items and the check items of a specified server, you must provide the IDs of the risk items. You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs of risk items.
	RiskId *int64 `json:"RiskId,omitempty" xml:"RiskId,omitempty"`
	// The status of the check item. Valid values:
	//
	// *   **1**: failed
	// *   **2**: verifying
	// *   **3**: passed
	// *   **5**: expired
	// *   **6**: ignored
	RiskStatus *int32 `json:"RiskStatus,omitempty" xml:"RiskStatus,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The UUID of the server on which the baseline check is performed.
	//
	// >  To query specified risk items and the check items of a specified server, you must provide the ID of the server on which the baseline check is performed. You can call the [DescribeWarningMachines](~~DescribeWarningMachines~~) operation to query the IDs of servers.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeCheckWarningsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningsRequest) SetCheckId(v int64) *DescribeCheckWarningsRequest {
	s.CheckId = &v
	return s
}

func (s *DescribeCheckWarningsRequest) SetCheckType(v string) *DescribeCheckWarningsRequest {
	s.CheckType = &v
	return s
}

func (s *DescribeCheckWarningsRequest) SetCurrentPage(v int32) *DescribeCheckWarningsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeCheckWarningsRequest) SetLang(v string) *DescribeCheckWarningsRequest {
	s.Lang = &v
	return s
}

func (s *DescribeCheckWarningsRequest) SetPageSize(v int32) *DescribeCheckWarningsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCheckWarningsRequest) SetRiskId(v int64) *DescribeCheckWarningsRequest {
	s.RiskId = &v
	return s
}

func (s *DescribeCheckWarningsRequest) SetRiskStatus(v int32) *DescribeCheckWarningsRequest {
	s.RiskStatus = &v
	return s
}

func (s *DescribeCheckWarningsRequest) SetSourceIp(v string) *DescribeCheckWarningsRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeCheckWarningsRequest) SetUuid(v string) *DescribeCheckWarningsRequest {
	s.Uuid = &v
	return s
}

type DescribeCheckWarningsResponseBody struct {
	// An array that consists of the check items.
	CheckWarnings []*DescribeCheckWarningsResponseBodyCheckWarnings `json:"CheckWarnings,omitempty" xml:"CheckWarnings,omitempty" type:"Repeated"`
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCheckWarningsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningsResponseBody) SetCheckWarnings(v []*DescribeCheckWarningsResponseBodyCheckWarnings) *DescribeCheckWarningsResponseBody {
	s.CheckWarnings = v
	return s
}

func (s *DescribeCheckWarningsResponseBody) SetCount(v int32) *DescribeCheckWarningsResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeCheckWarningsResponseBody) SetCurrentPage(v int32) *DescribeCheckWarningsResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeCheckWarningsResponseBody) SetPageSize(v int32) *DescribeCheckWarningsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeCheckWarningsResponseBody) SetRequestId(v string) *DescribeCheckWarningsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCheckWarningsResponseBody) SetTotalCount(v int32) *DescribeCheckWarningsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeCheckWarningsResponseBodyCheckWarnings struct {
	// The ID of the check item.
	CheckId *int64 `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	// The ID of the alert that is triggered by the check item.
	CheckWarningId   *int64  `json:"CheckWarningId,omitempty" xml:"CheckWarningId,omitempty"`
	ExecErrorMessage *string `json:"ExecErrorMessage,omitempty" xml:"ExecErrorMessage,omitempty"`
	// The fixing status of the check item. Valid values:
	//
	// *   **0**: disabled
	// *   **1**: enabled
	FixStatus *int32 `json:"FixStatus,omitempty" xml:"FixStatus,omitempty"`
	// The name of the check item.
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The risk level of the risk item. Valid values:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The remarks.
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	// The status of the check item. Valid values:
	//
	// *   **1**: failed
	// *   **2**: verifying
	// *   **3**: passed
	// *   **5**: expired
	// *   **6**: ignored
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the check item.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The UUID of the server on which the baseline check is performed.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeCheckWarningsResponseBodyCheckWarnings) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningsResponseBodyCheckWarnings) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningsResponseBodyCheckWarnings) SetCheckId(v int64) *DescribeCheckWarningsResponseBodyCheckWarnings {
	s.CheckId = &v
	return s
}

func (s *DescribeCheckWarningsResponseBodyCheckWarnings) SetCheckWarningId(v int64) *DescribeCheckWarningsResponseBodyCheckWarnings {
	s.CheckWarningId = &v
	return s
}

func (s *DescribeCheckWarningsResponseBodyCheckWarnings) SetExecErrorMessage(v string) *DescribeCheckWarningsResponseBodyCheckWarnings {
	s.ExecErrorMessage = &v
	return s
}

func (s *DescribeCheckWarningsResponseBodyCheckWarnings) SetFixStatus(v int32) *DescribeCheckWarningsResponseBodyCheckWarnings {
	s.FixStatus = &v
	return s
}

func (s *DescribeCheckWarningsResponseBodyCheckWarnings) SetItem(v string) *DescribeCheckWarningsResponseBodyCheckWarnings {
	s.Item = &v
	return s
}

func (s *DescribeCheckWarningsResponseBodyCheckWarnings) SetLevel(v string) *DescribeCheckWarningsResponseBodyCheckWarnings {
	s.Level = &v
	return s
}

func (s *DescribeCheckWarningsResponseBodyCheckWarnings) SetReason(v string) *DescribeCheckWarningsResponseBodyCheckWarnings {
	s.Reason = &v
	return s
}

func (s *DescribeCheckWarningsResponseBodyCheckWarnings) SetStatus(v int32) *DescribeCheckWarningsResponseBodyCheckWarnings {
	s.Status = &v
	return s
}

func (s *DescribeCheckWarningsResponseBodyCheckWarnings) SetType(v string) *DescribeCheckWarningsResponseBodyCheckWarnings {
	s.Type = &v
	return s
}

func (s *DescribeCheckWarningsResponseBodyCheckWarnings) SetUuid(v string) *DescribeCheckWarningsResponseBodyCheckWarnings {
	s.Uuid = &v
	return s
}

type DescribeCheckWarningsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCheckWarningsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCheckWarningsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckWarningsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCheckWarningsResponse) SetHeaders(v map[string]*string) *DescribeCheckWarningsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCheckWarningsResponse) SetStatusCode(v int32) *DescribeCheckWarningsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCheckWarningsResponse) SetBody(v *DescribeCheckWarningsResponseBody) *DescribeCheckWarningsResponse {
	s.Body = v
	return s
}

type DescribeClientConfSetupRequest struct {
	StrategyTag      *string `json:"StrategyTag,omitempty" xml:"StrategyTag,omitempty"`
	StrategyTagValue *string `json:"StrategyTagValue,omitempty" xml:"StrategyTagValue,omitempty"`
}

func (s DescribeClientConfSetupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientConfSetupRequest) GoString() string {
	return s.String()
}

func (s *DescribeClientConfSetupRequest) SetStrategyTag(v string) *DescribeClientConfSetupRequest {
	s.StrategyTag = &v
	return s
}

func (s *DescribeClientConfSetupRequest) SetStrategyTagValue(v string) *DescribeClientConfSetupRequest {
	s.StrategyTagValue = &v
	return s
}

type DescribeClientConfSetupResponseBody struct {
	ClientConf *DescribeClientConfSetupResponseBodyClientConf `json:"ClientConf,omitempty" xml:"ClientConf,omitempty" type:"Struct"`
	RequestId  *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClientConfSetupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientConfSetupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClientConfSetupResponseBody) SetClientConf(v *DescribeClientConfSetupResponseBodyClientConf) *DescribeClientConfSetupResponseBody {
	s.ClientConf = v
	return s
}

func (s *DescribeClientConfSetupResponseBody) SetRequestId(v string) *DescribeClientConfSetupResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClientConfSetupResponseBodyClientConf struct {
	Config           *string `json:"Config,omitempty" xml:"Config,omitempty"`
	StrategyTag      *string `json:"StrategyTag,omitempty" xml:"StrategyTag,omitempty"`
	StrategyTagValue *string `json:"StrategyTagValue,omitempty" xml:"StrategyTagValue,omitempty"`
}

func (s DescribeClientConfSetupResponseBodyClientConf) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientConfSetupResponseBodyClientConf) GoString() string {
	return s.String()
}

func (s *DescribeClientConfSetupResponseBodyClientConf) SetConfig(v string) *DescribeClientConfSetupResponseBodyClientConf {
	s.Config = &v
	return s
}

func (s *DescribeClientConfSetupResponseBodyClientConf) SetStrategyTag(v string) *DescribeClientConfSetupResponseBodyClientConf {
	s.StrategyTag = &v
	return s
}

func (s *DescribeClientConfSetupResponseBodyClientConf) SetStrategyTagValue(v string) *DescribeClientConfSetupResponseBodyClientConf {
	s.StrategyTagValue = &v
	return s
}

type DescribeClientConfSetupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeClientConfSetupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClientConfSetupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientConfSetupResponse) GoString() string {
	return s.String()
}

func (s *DescribeClientConfSetupResponse) SetHeaders(v map[string]*string) *DescribeClientConfSetupResponse {
	s.Headers = v
	return s
}

func (s *DescribeClientConfSetupResponse) SetStatusCode(v int32) *DescribeClientConfSetupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClientConfSetupResponse) SetBody(v *DescribeClientConfSetupResponseBody) *DescribeClientConfSetupResponse {
	s.Body = v
	return s
}

type DescribeClientConfStrategyRequest struct {
	Tag      *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeClientConfStrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientConfStrategyRequest) GoString() string {
	return s.String()
}

func (s *DescribeClientConfStrategyRequest) SetTag(v string) *DescribeClientConfStrategyRequest {
	s.Tag = &v
	return s
}

func (s *DescribeClientConfStrategyRequest) SetTagValue(v string) *DescribeClientConfStrategyRequest {
	s.TagValue = &v
	return s
}

type DescribeClientConfStrategyResponseBody struct {
	RequestId  *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TargetList []*DescribeClientConfStrategyResponseBodyTargetList `json:"TargetList,omitempty" xml:"TargetList,omitempty" type:"Repeated"`
	TotalCount *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeClientConfStrategyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientConfStrategyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClientConfStrategyResponseBody) SetRequestId(v string) *DescribeClientConfStrategyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClientConfStrategyResponseBody) SetTargetList(v []*DescribeClientConfStrategyResponseBodyTargetList) *DescribeClientConfStrategyResponseBody {
	s.TargetList = v
	return s
}

func (s *DescribeClientConfStrategyResponseBody) SetTotalCount(v int32) *DescribeClientConfStrategyResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeClientConfStrategyResponseBodyTargetList struct {
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeClientConfStrategyResponseBodyTargetList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientConfStrategyResponseBodyTargetList) GoString() string {
	return s.String()
}

func (s *DescribeClientConfStrategyResponseBodyTargetList) SetUuid(v string) *DescribeClientConfStrategyResponseBodyTargetList {
	s.Uuid = &v
	return s
}

type DescribeClientConfStrategyResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeClientConfStrategyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClientConfStrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientConfStrategyResponse) GoString() string {
	return s.String()
}

func (s *DescribeClientConfStrategyResponse) SetHeaders(v map[string]*string) *DescribeClientConfStrategyResponse {
	s.Headers = v
	return s
}

func (s *DescribeClientConfStrategyResponse) SetStatusCode(v int32) *DescribeClientConfStrategyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClientConfStrategyResponse) SetBody(v *DescribeClientConfStrategyResponseBody) *DescribeClientConfStrategyResponse {
	s.Body = v
	return s
}

type DescribeCloudCenterInstancesRequest struct {
	// The search conditions that are used to filter assets. The value of this parameter is in the JSON format and is case-sensitive.
	//
	// >  A search condition can be an instance ID, instance name, VPC ID, region, or public IP address. You can call the [DescribeCriteria](~~DescribeCriteria~~) operation to query the supported search conditions.
	Criteria *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The importance of the asset. Valid values:
	//
	// *   **2**: an important asset
	// *   **1**: a common asset
	// *   **0**: a test asset
	Importance *int32 `json:"Importance,omitempty" xml:"Importance,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The logical relationship among multiple search conditions. Valid values:
	//
	// *   **OR**: The search conditions are evaluated by using a logical **OR**.
	// *   **AND**: The search conditions are evaluated by using a logical **AND**.
	LogicalExp *string `json:"LogicalExp,omitempty" xml:"LogicalExp,omitempty"`
	// The type of the assets that you want to query. Valid values:
	//
	// *   **ecs**: servers
	// *   **cloud_product**: Alibaba Cloud services
	MachineTypes *string `json:"MachineTypes,omitempty" xml:"MachineTypes,omitempty"`
	// Specifies whether to internationalize the name of the default group. Default value: **false** . Valid values:
	//
	// *   **true**: The system returns the Chinese name of the default group for the GroupTrace response parameter.************
	// *   **false**: The system returns default for the GroupTrace response parameter.
	NoGroupTrace *bool `json:"NoGroupTrace,omitempty" xml:"NoGroupTrace,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region in which the asset resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCloudCenterInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudCenterInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudCenterInstancesRequest) SetCriteria(v string) *DescribeCloudCenterInstancesRequest {
	s.Criteria = &v
	return s
}

func (s *DescribeCloudCenterInstancesRequest) SetCurrentPage(v int32) *DescribeCloudCenterInstancesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeCloudCenterInstancesRequest) SetImportance(v int32) *DescribeCloudCenterInstancesRequest {
	s.Importance = &v
	return s
}

func (s *DescribeCloudCenterInstancesRequest) SetLang(v string) *DescribeCloudCenterInstancesRequest {
	s.Lang = &v
	return s
}

func (s *DescribeCloudCenterInstancesRequest) SetLogicalExp(v string) *DescribeCloudCenterInstancesRequest {
	s.LogicalExp = &v
	return s
}

func (s *DescribeCloudCenterInstancesRequest) SetMachineTypes(v string) *DescribeCloudCenterInstancesRequest {
	s.MachineTypes = &v
	return s
}

func (s *DescribeCloudCenterInstancesRequest) SetNoGroupTrace(v bool) *DescribeCloudCenterInstancesRequest {
	s.NoGroupTrace = &v
	return s
}

func (s *DescribeCloudCenterInstancesRequest) SetPageSize(v int32) *DescribeCloudCenterInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudCenterInstancesRequest) SetRegionId(v string) *DescribeCloudCenterInstancesRequest {
	s.RegionId = &v
	return s
}

type DescribeCloudCenterInstancesResponseBody struct {
	// An array that consists of the details about the assets.
	Instances []*DescribeCloudCenterInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *DescribeCloudCenterInstancesResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCloudCenterInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudCenterInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudCenterInstancesResponseBody) SetInstances(v []*DescribeCloudCenterInstancesResponseBodyInstances) *DescribeCloudCenterInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBody) SetPageInfo(v *DescribeCloudCenterInstancesResponseBodyPageInfo) *DescribeCloudCenterInstancesResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBody) SetRequestId(v string) *DescribeCloudCenterInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBody) SetSuccess(v bool) *DescribeCloudCenterInstancesResponseBody {
	s.Success = &v
	return s
}

type DescribeCloudCenterInstancesResponseBodyInstances struct {
	// Indicates whether alerts are generated on the asset. Valid values:
	//
	// *   **YES**
	// *   **NO**
	AlarmStatus *string `json:"AlarmStatus,omitempty" xml:"AlarmStatus,omitempty"`
	// The type of the asset. Valid values:
	//
	// *   **0**: an ECS instance
	// *   **1**: a Server Load Balancer (SLB) instance
	// *   **2**: a NAT gateway
	// *   **3**: an ApsaraDB RDS instance
	// *   **4**: an ApsaraDB for MongoDB instance
	// *   **5**: an ApsaraDB for Redis instance
	// *   **6**: a container image
	// *   **7**: a container
	AssetType *string `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
	// The timestamp when Security Center is authorized to scan the asset.
	AuthModifyTime *int64 `json:"AuthModifyTime,omitempty" xml:"AuthModifyTime,omitempty"`
	// The edition of Security Center that is authorized to protect the asset. Valid values:
	//
	// *   **1**: Basic edition
	// *   **6**: Anti-virus edition
	// *   **5**: Advanced edition
	// *   **3**: Enterprise edition
	// *   **7**: Ultimate edition
	AuthVersion *int32 `json:"AuthVersion,omitempty" xml:"AuthVersion,omitempty"`
	// The name of the Security Center edition that is authorized to scan the asset. Valid values:
	//
	// *   Basic edition
	// *   Anti-virus edition
	// *   Advanced edition
	// *   Enterprise edition
	// *   Ultimate edition
	// *   Value-added Plan edition
	AuthVersionName *string `json:"AuthVersionName,omitempty" xml:"AuthVersionName,omitempty"`
	// Indicates whether Security Center is authorized to scan the asset. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Bind *bool `json:"Bind,omitempty" xml:"Bind,omitempty"`
	// The status of the Security Center agent installed on the asset. Valid values:
	//
	// *   **online**: The Security Center agent is **enabled**.
	// *   **offline**: The Security Center agent is **disabled**.
	// *   **pause**: The Security Center agent is **suspended**.
	ClientStatus *string `json:"ClientStatus,omitempty" xml:"ClientStatus,omitempty"`
	// The ID of the cluster.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the cluster.
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	// The number of the CPU cores used by the asset.
	Cores *int32 `json:"Cores,omitempty" xml:"Cores,omitempty"`
	// The CPU information about the asset.
	CpuInfo *string `json:"CpuInfo,omitempty" xml:"CpuInfo,omitempty"`
	// The timestamp when the cluster was created. Unit: milliseconds.
	CreatedTime *int64 `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// Indicates whether the asset is exposed. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	ExposedStatus *int32 `json:"ExposedStatus,omitempty" xml:"ExposedStatus,omitempty"`
	// Indicates whether the asset is an Alibaba Cloud asset. Valid values:
	//
	// *   **0**: yes
	// *   **1**: no
	Flag *int32 `json:"Flag,omitempty" xml:"Flag,omitempty"`
	// The ID of the asset group to which the asset belongs.
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the group to which the asset belongs.
	GroupTrace *string `json:"GroupTrace,omitempty" xml:"GroupTrace,omitempty"`
	// Indicates whether baseline risks are detected on the asset. Valid values:
	//
	// *   **YES**
	// *   **NO**
	HcStatus *string `json:"HcStatus,omitempty" xml:"HcStatus,omitempty"`
	// The number of baseline risks that are detected on the asset.
	HealthCheckCount *int32 `json:"HealthCheckCount,omitempty" xml:"HealthCheckCount,omitempty"`
	// The importance of the asset. Valid values:
	//
	// *   **2**: an important asset
	// *   **1**: a common asset
	// *   **0**: a test asset
	Importance *int32 `json:"Importance,omitempty" xml:"Importance,omitempty"`
	// The ID of the asset.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the asset.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the asset.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the asset.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The public IP address of the asset.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The IP addresses of the system.
	IpListString *string `json:"IpListString,omitempty" xml:"IpListString,omitempty"`
	// The version of the kernel.
	Kernel *string `json:"Kernel,omitempty" xml:"Kernel,omitempty"`
	// The timestamp when the Security Center agent was last online. Unit: milliseconds.
	LastLoginTimestamp *int64 `json:"LastLoginTimestamp,omitempty" xml:"LastLoginTimestamp,omitempty"`
	// The MAC address of the system.
	MacListString *string `json:"MacListString,omitempty" xml:"MacListString,omitempty"`
	// The size of the memory. Unit: MB.
	Mem *int32 `json:"Mem,omitempty" xml:"Mem,omitempty"`
	// The operating system of the asset.
	Os *string `json:"Os,omitempty" xml:"Os,omitempty"`
	// The kernel version of the asset.
	OsName *string `json:"OsName,omitempty" xml:"OsName,omitempty"`
	// The number of pods.
	PodCount *int32 `json:"PodCount,omitempty" xml:"PodCount,omitempty"`
	// The region ID of the asset.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The ID of the region in which the asset resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the region in which the asset resides.
	RegionName *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
	// The total number of baseline risks that are detected on the asset. The value of this parameter is in the JSON format and contains the following fields:
	//
	// *   **account**: the number of accounts that are used to log on from unapproved logon locations and whose passwords are cracked
	// *   **appNum**: the number of scanners
	// *   **asapVulCount**: the total number of high-risk vulnerabilities
	// *   **baselineHigh**: the number of high-risk baseline risks
	// *   **baselineLow**: the number of low-risk baseline risks
	// *   **baselineMedium**: the number of medium-risk baseline risks
	// *   **baselineNum**: the total number of baseline risks
	// *   **cmsNum**: the number of Web-CMS vulnerabilities
	// *   **containerAsap**: the number of high-risk vulnerabilities that are detected on containers
	// *   **containerLater**: the number of medium-risk vulnerabilities that are detected on containers
	// *   **containerNntf**: the number of low-risk vulnerabilities that are detected on containers
	// *   **containerRemind**: the number of alerts whose Emergency level is Reminder on containers
	// *   **containerSerious**: the number of alerts whose Emergency level is Urgent on containers
	// *   **containerSuspicious**: the number of alerts whose Emergency level is Suspicious on containers
	// *   **cveNum**: the number of Linux software vulnerabilities
	// *   **emgNum**: the number of urgent vulnerabilities
	// *   **health**: the number of baseline alerts that are unhandled
	// *   **imageBaselineHigh**: the number of high-risk baseline risks that are detected on images
	// *   **imageBaselineLow**: the number of low-risk baseline risks that are detected on images
	// *   **imageBaselineMedium**: the number of medium-risk baseline risks that are detected on images
	// *   **imageBaselineNum**: the total number of baseline risks that are detected on images
	// *   **imageMaliciousFileRemind**: the number of malicious files that are detected on images and have the Emergency level of Reminder
	// *   **imageMaliciousFileSerious**: the number of malicious files that are detected on images and have the Emergency level of Urgent
	// *   **imageMaliciousFileSuspicious**: the number of malicious files that are detected on images and have the Emergency level of Suspicious
	// *   **imageVulAsap**: the number of high-risk vulnerabilities that are detected on images
	// *   **imageVulLater**: the number of medium-risk vulnerabilities that are detected on an image
	// *   **imageVulNntf**: the number of low-risk vulnerabilities that are detected on an image
	// *   **laterVulCount**: the number of medium-risk vulnerabilities
	// *   **newSuspicious**: the number of alerts
	// *   **nntfVulCount**: the number of low-risk vulnerabilities.
	// *   **remindNum**: the number of alerts whose Emergency level is Reminder
	// *   **scaNum**: the number of vulnerabilities that are detected based on software component analysis
	// *   **seriousNum**: the number of alerts whose Emergency level is Urgent
	// *   **suspNum**: the number of alerts whose Emergency level is Suspicious
	// *   **suspicious**: the total number of alerts
	// *   **sysNum**: the number of Windows system vulnerabilities
	// *   **trojan**: the number of trojans
	// *   **uuid**: the UUIDs of assets
	// *   **vul**: the number of vulnerabilities
	// *   **weakPWNum**: the number of weak passwords
	RiskCount *string `json:"RiskCount,omitempty" xml:"RiskCount,omitempty"`
	// Indicates whether risks are detected on the asset. Valid values:
	//
	// *   **YES**
	// *   **NO**
	RiskStatus *string `json:"RiskStatus,omitempty" xml:"RiskStatus,omitempty"`
	// The number of alerts that are generated on the asset.
	SafeEventCount *int32 `json:"SafeEventCount,omitempty" xml:"SafeEventCount,omitempty"`
	// The status of the asset. Valid values:
	//
	// *   **Running**: running
	// *   **notRunning**: stopped
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the asset tag.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The ID of the asset tag.
	TagId *string `json:"TagId,omitempty" xml:"TagId,omitempty"`
	// The UUID of the asset.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The type of the asset by source. Valid values:
	//
	// *   **0**: an asset provided by Alibaba Cloud.
	// *   **1**: a third-party cloud server
	// *   **2**: a server in a data center
	// *   **3**, **4**, **5**, and **7**: other cloud asset
	// *   **8**: a lightweight asset
	Vendor *int32 `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
	// The name of the service provider (SP) for the asset.
	//
	// Valid values:
	//
	// *   **ALIYUN**: Alibaba Cloud
	// *   **OUT**: a third-party service provider
	// *   **IDC**: a data center
	// *   **TENCENT**: Tencent Cloud
	// *   **HUAWEICLOUD**: Huawei Cloud
	// *   **Microsoft**: Microsoft
	// *   **AWS**: Amazon Web Services (AWS)
	// *   **TRIPARTITE**: a lightweight server
	VendorName *string `json:"VendorName,omitempty" xml:"VendorName,omitempty"`
	// The ID of the VPC to which the asset belongs.
	VpcInstanceId *string `json:"VpcInstanceId,omitempty" xml:"VpcInstanceId,omitempty"`
	// The number of vulnerabilities that are detected on the asset.
	VulCount *int32 `json:"VulCount,omitempty" xml:"VulCount,omitempty"`
	// Indicates whether vulnerabilities are detected on the asset. Valid values:
	//
	// *   **YES**
	// *   **NO**
	VulStatus *string `json:"VulStatus,omitempty" xml:"VulStatus,omitempty"`
}

func (s DescribeCloudCenterInstancesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudCenterInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetAlarmStatus(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.AlarmStatus = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetAssetType(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.AssetType = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetAuthModifyTime(v int64) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.AuthModifyTime = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetAuthVersion(v int32) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.AuthVersion = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetAuthVersionName(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.AuthVersionName = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetBind(v bool) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.Bind = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetClientStatus(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.ClientStatus = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetClusterId(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.ClusterId = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetClusterName(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.ClusterName = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetCores(v int32) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.Cores = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetCpuInfo(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.CpuInfo = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetCreatedTime(v int64) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.CreatedTime = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetExposedStatus(v int32) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.ExposedStatus = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetFlag(v int32) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.Flag = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetGroupId(v int64) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.GroupId = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetGroupTrace(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.GroupTrace = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetHcStatus(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.HcStatus = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetHealthCheckCount(v int32) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.HealthCheckCount = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetImportance(v int32) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.Importance = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetInstanceId(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetInstanceName(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.InstanceName = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetInternetIp(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.InternetIp = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetIntranetIp(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.IntranetIp = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetIp(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.Ip = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetIpListString(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.IpListString = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetKernel(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.Kernel = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetLastLoginTimestamp(v int64) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.LastLoginTimestamp = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetMacListString(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.MacListString = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetMem(v int32) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.Mem = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetOs(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.Os = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetOsName(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.OsName = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetPodCount(v int32) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.PodCount = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetRegion(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.Region = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetRegionId(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.RegionId = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetRegionName(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.RegionName = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetRiskCount(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.RiskCount = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetRiskStatus(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.RiskStatus = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetSafeEventCount(v int32) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.SafeEventCount = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetStatus(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.Status = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetTag(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.Tag = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetTagId(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.TagId = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetUuid(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.Uuid = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetVendor(v int32) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.Vendor = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetVendorName(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.VendorName = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetVpcInstanceId(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.VpcInstanceId = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetVulCount(v int32) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.VulCount = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyInstances) SetVulStatus(v string) *DescribeCloudCenterInstancesResponseBodyInstances {
	s.VulStatus = &v
	return s
}

type DescribeCloudCenterInstancesResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCloudCenterInstancesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudCenterInstancesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeCloudCenterInstancesResponseBodyPageInfo) SetCount(v int32) *DescribeCloudCenterInstancesResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeCloudCenterInstancesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyPageInfo) SetPageSize(v int32) *DescribeCloudCenterInstancesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponseBodyPageInfo) SetTotalCount(v int32) *DescribeCloudCenterInstancesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeCloudCenterInstancesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCloudCenterInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCloudCenterInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudCenterInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudCenterInstancesResponse) SetHeaders(v map[string]*string) *DescribeCloudCenterInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudCenterInstancesResponse) SetStatusCode(v int32) *DescribeCloudCenterInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudCenterInstancesResponse) SetBody(v *DescribeCloudCenterInstancesResponseBody) *DescribeCloudCenterInstancesResponse {
	s.Body = v
	return s
}

type DescribeCloudProductFieldStatisticsResponseBody struct {
	// The statistics of cloud services.
	GroupedFields *DescribeCloudProductFieldStatisticsResponseBodyGroupedFields `json:"GroupedFields,omitempty" xml:"GroupedFields,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCloudProductFieldStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudProductFieldStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudProductFieldStatisticsResponseBody) SetGroupedFields(v *DescribeCloudProductFieldStatisticsResponseBodyGroupedFields) *DescribeCloudProductFieldStatisticsResponseBody {
	s.GroupedFields = v
	return s
}

func (s *DescribeCloudProductFieldStatisticsResponseBody) SetRequestId(v string) *DescribeCloudProductFieldStatisticsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCloudProductFieldStatisticsResponseBodyGroupedFields struct {
	// The statistics of the numbers of assets of different types. **MachineType** indicates the type of the assets. **Count** indicates the number of assets that belong to the type.
	// Valid values of **MachineType**:
	//
	// *   **1**: a Server Load Balancer (SLB) instance
	// *   **2**: a Network Address Translation (NAT) gateway
	// *   **3**: an ApsaraDB RDS instance
	// *   **4**: an ApsaraDB for MongoDB instance
	CategoryCount *string `json:"CategoryCount,omitempty" xml:"CategoryCount,omitempty"`
	// The total number of cloud services that are protected by Security Center.
	InstanceCount *int32 `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	// The number of cloud services that are at risk.
	RiskInstanceCount *int32 `json:"RiskInstanceCount,omitempty" xml:"RiskInstanceCount,omitempty"`
}

func (s DescribeCloudProductFieldStatisticsResponseBodyGroupedFields) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudProductFieldStatisticsResponseBodyGroupedFields) GoString() string {
	return s.String()
}

func (s *DescribeCloudProductFieldStatisticsResponseBodyGroupedFields) SetCategoryCount(v string) *DescribeCloudProductFieldStatisticsResponseBodyGroupedFields {
	s.CategoryCount = &v
	return s
}

func (s *DescribeCloudProductFieldStatisticsResponseBodyGroupedFields) SetInstanceCount(v int32) *DescribeCloudProductFieldStatisticsResponseBodyGroupedFields {
	s.InstanceCount = &v
	return s
}

func (s *DescribeCloudProductFieldStatisticsResponseBodyGroupedFields) SetRiskInstanceCount(v int32) *DescribeCloudProductFieldStatisticsResponseBodyGroupedFields {
	s.RiskInstanceCount = &v
	return s
}

type DescribeCloudProductFieldStatisticsResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCloudProductFieldStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCloudProductFieldStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudProductFieldStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudProductFieldStatisticsResponse) SetHeaders(v map[string]*string) *DescribeCloudProductFieldStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudProductFieldStatisticsResponse) SetStatusCode(v int32) *DescribeCloudProductFieldStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudProductFieldStatisticsResponse) SetBody(v *DescribeCloudProductFieldStatisticsResponseBody) *DescribeCloudProductFieldStatisticsResponse {
	s.Body = v
	return s
}

type DescribeClusterBasicInfoRequest struct {
	ClusterId  *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeClusterBasicInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoRequest) SetClusterId(v string) *DescribeClusterBasicInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterBasicInfoRequest) SetTargetType(v string) *DescribeClusterBasicInfoRequest {
	s.TargetType = &v
	return s
}

func (s *DescribeClusterBasicInfoRequest) SetType(v string) *DescribeClusterBasicInfoRequest {
	s.Type = &v
	return s
}

type DescribeClusterBasicInfoResponseBody struct {
	ClusterInfo *DescribeClusterBasicInfoResponseBodyClusterInfo `json:"ClusterInfo,omitempty" xml:"ClusterInfo,omitempty" type:"Struct"`
	RequestId   *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBody) SetClusterInfo(v *DescribeClusterBasicInfoResponseBodyClusterInfo) *DescribeClusterBasicInfoResponseBody {
	s.ClusterInfo = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBody) SetRequestId(v string) *DescribeClusterBasicInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfo struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName    *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterType    *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CurrentVersion *string `json:"CurrentVersion,omitempty" xml:"CurrentVersion,omitempty"`
	InstanceCount  *int32  `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	State          *string `json:"State,omitempty" xml:"State,omitempty"`
	TargetResult   *bool   `json:"TargetResult,omitempty" xml:"TargetResult,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetClusterId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetClusterName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ClusterName = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetClusterType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ClusterType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetCreateTime(v int64) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.CreateTime = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetCurrentVersion(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.CurrentVersion = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetInstanceCount(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.InstanceCount = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetRegionId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetState(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.State = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetTargetResult(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.TargetResult = &v
	return s
}

type DescribeClusterBasicInfoResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeClusterBasicInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterBasicInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponse) SetHeaders(v map[string]*string) *DescribeClusterBasicInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterBasicInfoResponse) SetStatusCode(v int32) *DescribeClusterBasicInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterBasicInfoResponse) SetBody(v *DescribeClusterBasicInfoResponseBody) *DescribeClusterBasicInfoResponse {
	s.Body = v
	return s
}

type DescribeClusterInfoListRequest struct {
	Target     *string `json:"Target,omitempty" xml:"Target,omitempty"`
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeClusterInfoListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterInfoListRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterInfoListRequest) SetTarget(v string) *DescribeClusterInfoListRequest {
	s.Target = &v
	return s
}

func (s *DescribeClusterInfoListRequest) SetTargetType(v string) *DescribeClusterInfoListRequest {
	s.TargetType = &v
	return s
}

func (s *DescribeClusterInfoListRequest) SetType(v string) *DescribeClusterInfoListRequest {
	s.Type = &v
	return s
}

type DescribeClusterInfoListResponseBody struct {
	ClusterList []*DescribeClusterInfoListResponseBodyClusterList `json:"ClusterList,omitempty" xml:"ClusterList,omitempty" type:"Repeated"`
	RequestId   *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterInfoListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterInfoListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterInfoListResponseBody) SetClusterList(v []*DescribeClusterInfoListResponseBodyClusterList) *DescribeClusterInfoListResponseBody {
	s.ClusterList = v
	return s
}

func (s *DescribeClusterInfoListResponseBody) SetRequestId(v string) *DescribeClusterInfoListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterInfoListResponseBodyClusterList struct {
	ClusterId    *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName  *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterType  *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
	TargetResult *bool   `json:"TargetResult,omitempty" xml:"TargetResult,omitempty"`
}

func (s DescribeClusterInfoListResponseBodyClusterList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterInfoListResponseBodyClusterList) GoString() string {
	return s.String()
}

func (s *DescribeClusterInfoListResponseBodyClusterList) SetClusterId(v string) *DescribeClusterInfoListResponseBodyClusterList {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterInfoListResponseBodyClusterList) SetClusterName(v string) *DescribeClusterInfoListResponseBodyClusterList {
	s.ClusterName = &v
	return s
}

func (s *DescribeClusterInfoListResponseBodyClusterList) SetClusterType(v string) *DescribeClusterInfoListResponseBodyClusterList {
	s.ClusterType = &v
	return s
}

func (s *DescribeClusterInfoListResponseBodyClusterList) SetRegionId(v string) *DescribeClusterInfoListResponseBodyClusterList {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterInfoListResponseBodyClusterList) SetState(v string) *DescribeClusterInfoListResponseBodyClusterList {
	s.State = &v
	return s
}

func (s *DescribeClusterInfoListResponseBodyClusterList) SetTargetResult(v bool) *DescribeClusterInfoListResponseBodyClusterList {
	s.TargetResult = &v
	return s
}

type DescribeClusterInfoListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeClusterInfoListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterInfoListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterInfoListResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterInfoListResponse) SetHeaders(v map[string]*string) *DescribeClusterInfoListResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterInfoListResponse) SetStatusCode(v int32) *DescribeClusterInfoListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterInfoListResponse) SetBody(v *DescribeClusterInfoListResponseBody) *DescribeClusterInfoListResponse {
	s.Body = v
	return s
}

type DescribeClusterNetworkRequest struct {
	EndTime   *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeClusterNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterNetworkRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterNetworkRequest) SetEndTime(v int64) *DescribeClusterNetworkRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeClusterNetworkRequest) SetStartTime(v int64) *DescribeClusterNetworkRequest {
	s.StartTime = &v
	return s
}

type DescribeClusterNetworkResponseBody struct {
	ClusterNetwork *DescribeClusterNetworkResponseBodyClusterNetwork `json:"ClusterNetwork,omitempty" xml:"ClusterNetwork,omitempty" type:"Struct"`
	RequestId      *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterNetworkResponseBody) SetClusterNetwork(v *DescribeClusterNetworkResponseBodyClusterNetwork) *DescribeClusterNetworkResponseBody {
	s.ClusterNetwork = v
	return s
}

func (s *DescribeClusterNetworkResponseBody) SetRequestId(v string) *DescribeClusterNetworkResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterNetworkResponseBodyClusterNetwork struct {
	Edge []*DescribeClusterNetworkResponseBodyClusterNetworkEdge `json:"Edge,omitempty" xml:"Edge,omitempty" type:"Repeated"`
	Node []*DescribeClusterNetworkResponseBodyClusterNetworkNode `json:"Node,omitempty" xml:"Node,omitempty" type:"Repeated"`
}

func (s DescribeClusterNetworkResponseBodyClusterNetwork) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterNetworkResponseBodyClusterNetwork) GoString() string {
	return s.String()
}

func (s *DescribeClusterNetworkResponseBodyClusterNetwork) SetEdge(v []*DescribeClusterNetworkResponseBodyClusterNetworkEdge) *DescribeClusterNetworkResponseBodyClusterNetwork {
	s.Edge = v
	return s
}

func (s *DescribeClusterNetworkResponseBodyClusterNetwork) SetNode(v []*DescribeClusterNetworkResponseBodyClusterNetworkNode) *DescribeClusterNetworkResponseBodyClusterNetwork {
	s.Node = v
	return s
}

type DescribeClusterNetworkResponseBodyClusterNetworkEdge struct {
	DstNodeId   *string `json:"DstNodeId,omitempty" xml:"DstNodeId,omitempty"`
	DstNodeType *string `json:"DstNodeType,omitempty" xml:"DstNodeType,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Port        *string `json:"Port,omitempty" xml:"Port,omitempty"`
	SrcNodeId   *string `json:"SrcNodeId,omitempty" xml:"SrcNodeId,omitempty"`
	SrcNodeType *string `json:"SrcNodeType,omitempty" xml:"SrcNodeType,omitempty"`
}

func (s DescribeClusterNetworkResponseBodyClusterNetworkEdge) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterNetworkResponseBodyClusterNetworkEdge) GoString() string {
	return s.String()
}

func (s *DescribeClusterNetworkResponseBodyClusterNetworkEdge) SetDstNodeId(v string) *DescribeClusterNetworkResponseBodyClusterNetworkEdge {
	s.DstNodeId = &v
	return s
}

func (s *DescribeClusterNetworkResponseBodyClusterNetworkEdge) SetDstNodeType(v string) *DescribeClusterNetworkResponseBodyClusterNetworkEdge {
	s.DstNodeType = &v
	return s
}

func (s *DescribeClusterNetworkResponseBodyClusterNetworkEdge) SetId(v string) *DescribeClusterNetworkResponseBodyClusterNetworkEdge {
	s.Id = &v
	return s
}

func (s *DescribeClusterNetworkResponseBodyClusterNetworkEdge) SetPort(v string) *DescribeClusterNetworkResponseBodyClusterNetworkEdge {
	s.Port = &v
	return s
}

func (s *DescribeClusterNetworkResponseBodyClusterNetworkEdge) SetSrcNodeId(v string) *DescribeClusterNetworkResponseBodyClusterNetworkEdge {
	s.SrcNodeId = &v
	return s
}

func (s *DescribeClusterNetworkResponseBodyClusterNetworkEdge) SetSrcNodeType(v string) *DescribeClusterNetworkResponseBodyClusterNetworkEdge {
	s.SrcNodeType = &v
	return s
}

type DescribeClusterNetworkResponseBodyClusterNetworkNode struct {
	CnnfSwitch       *int32  `json:"CnnfSwitch,omitempty" xml:"CnnfSwitch,omitempty"`
	Id               *string `json:"Id,omitempty" xml:"Id,omitempty"`
	InterceptionType *int32  `json:"InterceptionType,omitempty" xml:"InterceptionType,omitempty"`
	Name             *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NetTopoSwitch    *string `json:"NetTopoSwitch,omitempty" xml:"NetTopoSwitch,omitempty"`
	RiskLevel        *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeClusterNetworkResponseBodyClusterNetworkNode) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterNetworkResponseBodyClusterNetworkNode) GoString() string {
	return s.String()
}

func (s *DescribeClusterNetworkResponseBodyClusterNetworkNode) SetCnnfSwitch(v int32) *DescribeClusterNetworkResponseBodyClusterNetworkNode {
	s.CnnfSwitch = &v
	return s
}

func (s *DescribeClusterNetworkResponseBodyClusterNetworkNode) SetId(v string) *DescribeClusterNetworkResponseBodyClusterNetworkNode {
	s.Id = &v
	return s
}

func (s *DescribeClusterNetworkResponseBodyClusterNetworkNode) SetInterceptionType(v int32) *DescribeClusterNetworkResponseBodyClusterNetworkNode {
	s.InterceptionType = &v
	return s
}

func (s *DescribeClusterNetworkResponseBodyClusterNetworkNode) SetName(v string) *DescribeClusterNetworkResponseBodyClusterNetworkNode {
	s.Name = &v
	return s
}

func (s *DescribeClusterNetworkResponseBodyClusterNetworkNode) SetNetTopoSwitch(v string) *DescribeClusterNetworkResponseBodyClusterNetworkNode {
	s.NetTopoSwitch = &v
	return s
}

func (s *DescribeClusterNetworkResponseBodyClusterNetworkNode) SetRiskLevel(v string) *DescribeClusterNetworkResponseBodyClusterNetworkNode {
	s.RiskLevel = &v
	return s
}

func (s *DescribeClusterNetworkResponseBodyClusterNetworkNode) SetType(v string) *DescribeClusterNetworkResponseBodyClusterNetworkNode {
	s.Type = &v
	return s
}

type DescribeClusterNetworkResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeClusterNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterNetworkResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterNetworkResponse) SetHeaders(v map[string]*string) *DescribeClusterNetworkResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterNetworkResponse) SetStatusCode(v int32) *DescribeClusterNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterNetworkResponse) SetBody(v *DescribeClusterNetworkResponseBody) *DescribeClusterNetworkResponse {
	s.Body = v
	return s
}

type DescribeClusterVulStatisticsRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Types     *string `json:"Types,omitempty" xml:"Types,omitempty"`
}

func (s DescribeClusterVulStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterVulStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterVulStatisticsRequest) SetClusterId(v string) *DescribeClusterVulStatisticsRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterVulStatisticsRequest) SetTypes(v string) *DescribeClusterVulStatisticsRequest {
	s.Types = &v
	return s
}

type DescribeClusterVulStatisticsResponseBody struct {
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VulStat   *DescribeClusterVulStatisticsResponseBodyVulStat `json:"VulStat,omitempty" xml:"VulStat,omitempty" type:"Struct"`
}

func (s DescribeClusterVulStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterVulStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterVulStatisticsResponseBody) SetRequestId(v string) *DescribeClusterVulStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterVulStatisticsResponseBody) SetVulStat(v *DescribeClusterVulStatisticsResponseBodyVulStat) *DescribeClusterVulStatisticsResponseBody {
	s.VulStat = v
	return s
}

type DescribeClusterVulStatisticsResponseBodyVulStat struct {
	AsapCount  *string `json:"AsapCount,omitempty" xml:"AsapCount,omitempty"`
	LaterCount *string `json:"LaterCount,omitempty" xml:"LaterCount,omitempty"`
	NntfCount  *string `json:"NntfCount,omitempty" xml:"NntfCount,omitempty"`
}

func (s DescribeClusterVulStatisticsResponseBodyVulStat) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterVulStatisticsResponseBodyVulStat) GoString() string {
	return s.String()
}

func (s *DescribeClusterVulStatisticsResponseBodyVulStat) SetAsapCount(v string) *DescribeClusterVulStatisticsResponseBodyVulStat {
	s.AsapCount = &v
	return s
}

func (s *DescribeClusterVulStatisticsResponseBodyVulStat) SetLaterCount(v string) *DescribeClusterVulStatisticsResponseBodyVulStat {
	s.LaterCount = &v
	return s
}

func (s *DescribeClusterVulStatisticsResponseBodyVulStat) SetNntfCount(v string) *DescribeClusterVulStatisticsResponseBodyVulStat {
	s.NntfCount = &v
	return s
}

type DescribeClusterVulStatisticsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeClusterVulStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterVulStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterVulStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterVulStatisticsResponse) SetHeaders(v map[string]*string) *DescribeClusterVulStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterVulStatisticsResponse) SetStatusCode(v int32) *DescribeClusterVulStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterVulStatisticsResponse) SetBody(v *DescribeClusterVulStatisticsResponseBody) *DescribeClusterVulStatisticsResponse {
	s.Body = v
	return s
}

type DescribeCommonOverallConfigRequest struct {
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The type of the feature. Valid values:
	//
	// *   **kdump_switch**: Active defense experience optimization
	// *   **threat_detect**: Dynamic adaptive threat detection capability
	// *   **suspicious_aggregation**: Alert Association
	// *   **alidetect**: File Test
	// *   **USER-ENABLE-SWITCH-TYPE\_3277**: Suspicious process startup
	// *   **USER-ENABLE-SWITCH-TYPE\_5507**: malicious drivers
	// *   **USER-ENABLE-SWITCH-TYPE\_38857**: Entrance service execution high-risk operation
	// *   **USER-ENABLE-SWITCH-TYPE\_50858**: Web service performs high-risk operations
	// *   **USER-ENABLE-SWITCH-TYPE\_50859**: Entrance service execution suspicious operation
	// *   **USER-ENABLE-SWITCH-TYPE\_50861**: Information detection
	// *   **USER-ENABLE-SWITCH-TYPE\_50862**: Cloud Assistant Advanced Protection
	// *   **USER-ENABLE-SWITCH-TYPE\_50867**: Create malicious files
	// *   **USER-ENABLE-SWITCH-TYPE\_50868**: Create suspicious files
	// *   **USER-ENABLE-SWITCH-TYPE\_50869**: Unauthorized execution of high-risk orders
	// *   **USER-ENABLE-SWITCH-TYPE\_50870**: Rebound Shell
	// *   **USER-ENABLE-SWITCH-TYPE\_50873**: WebShell execute command
	// *   **USER-ENABLE-SWITCH-TYPE\_50876**: Against security software
	// *   **USER-ENABLE-SWITCH-TYPE\_50877**: Malicious soft communication
	// *   **USER-ENABLE-SWITCH-TYPE\_50884**: Suspicious worm script behavior
	// *   **USER-ENABLE-SWITCH-TYPE\_50885**: malicious script behavior
	// *   **USER-ENABLE-SWITCH-TYPE\_50983**: obfuscated command
	// *   **USER-ENABLE-SWITCH-TYPE\_51200**: Command line download and run malicious files
	// *   **USER-ENABLE-SWITCH-TYPE\_51201**: ransomware
	// *   **USER-ENABLE-SWITCH-TYPE\_51202**: Suspected Extortion
	// *   **USER-ENABLE-SWITCH-TYPE\_53168**: process debugging
	// *   **USER-ENABLE-SWITCH-TYPE\_53272**: Exploiting Kernel Vulnerabilities to Elevate Privileges
	// *   **USER-ENABLE-SWITCH-TYPE\_54034**: Intranet scan
	// *   **USER-ENABLE-SWITCH-TYPE\_54265**: Hijacking the PAM Module
	// *   **USER-ENABLE-SWITCH-TYPE\_54395**: Unauthorized reading and writing of sensitive files
	// *   **USER-ENABLE-SWITCH-TYPE\_54699**: Hijack dynamic link library
	// *   **USER-ENABLE-SWITCH-TYPE\_54953**: Hashdump Attack
	// *   **USER-ENABLE-SWITCH-TYPE\_57897**: suspected privilege escalation
	// *   **USER-ENABLE-SWITCH-TYPE\_62981**: Bypassing security monitoring
	// *   **USER-ENABLE-SWITCH-TYPE\_64025**: Ingress service execute command \[enhanced mode]
	// *   **USER-ENABLE-SWITCH-TYPE\_39659**: Sensitive Registry Key Protection
	// *   **USER-ENABLE-SWITCH-TYPE\_51225**: Powershell executes high-risk commands
	// *   **USER-ENABLE-SWITCH-TYPE\_51226**: Powershell execute suspicious command
	// *   **USER-ENABLE-SWITCH-TYPE\_51228**: High-risk lateral penetration tools
	// *   **USER-ENABLE-SWITCH-TYPE\_51229**: Browser service execution a high-risk operation
	// *   **USER-ENABLE-SWITCH-TYPE\_51230**: Entrance service execution suspicious operation
	// *   **USER-ENABLE-SWITCH-TYPE\_51232**: System processes execution high-risk operations
	// *   **USER-ENABLE-SWITCH-TYPE\_51233**: Java service execution high-risk operations
	// *   **USER-ENABLE-SWITCH-TYPE\_51234**: Office components execution high-risk operations
	// *   **USER-ENABLE-SWITCH-TYPE\_51235**: Web service performs high-risk operations
	// *   **USER-ENABLE-SWITCH-TYPE\_51236**: Rebound shells
	// *   **USER-ENABLE-SWITCH-TYPE\_52815**: Load high-risk drivers
	// *   **USER-ENABLE-SWITCH-TYPE\_52816**: high-risk account manipulation behavior
	// *   **USER-ENABLE-SWITCH-TYPE\_52818**: Information detection
	// *   **USER-ENABLE-SWITCH-TYPE\_52820**: Create malicious files
	// *   **USER-ENABLE-SWITCH-TYPE\_52821**: Suspicious process startup
	// *   **USER-ENABLE-SWITCH-TYPE\_52823**: Running high-risk ARK tools
	// *   **USER-ENABLE-SWITCH-TYPE\_52825**: Unauthorized execution of high-risk orders
	// *   **USER-ENABLE-SWITCH-TYPE\_52826**: Entrance service execution high-risk operation
	// *   **USER-ENABLE-SWITCH-TYPE\_52827**: Ransomware
	// *   **USER-ENABLE-SWITCH-TYPE\_52828**: Suspected Extortion
	// *   **USER-ENABLE-SWITCH-TYPE\_52829**: delete system backup behavior
	// *   **USER-ENABLE-SWITCH-TYPE\_54168**: LSA security permission service protection
	// *   **USER-ENABLE-SWITCH-TYPE\_54365**: Create service autorun item
	// *   **USER-ENABLE-SWITCH-TYPE\_54366**: Create high-risk autorun item
	// *   **USER-ENABLE-SWITCH-TYPE\_54367**: Create scheduled task autorun item
	// *   **USER-ENABLE-SWITCH-TYPE\_54368**: Create registry autorun item
	// *   **USER-ENABLE-SWITCH-TYPE\_54369**: Create WMI autorun item
	// *   **USER-ENABLE-SWITCH-TYPE\_54373**: Against security software
	// *   **USER-ENABLE-SWITCH-TYPE\_54374**: Intrusion trace cleanup
	// *   **USER-ENABLE-SWITCH-TYPE\_54384**: Hashdump Attack
	// *   **USER-ENABLE-SWITCH-TYPE\_55251**: Database services execution high-risk operations
	// *   **USER-ENABLE-SWITCH-TYPE\_57242**: Malicious command execution
	// *   **USER-ENABLE-SWITCH-TYPE\_57340**: Command line download and run malicious files
	// *   **USER-ENABLE-SWITCH-TYPE\_62357**: Cloud Assistant service information detection
	// *   **USER-ENABLE-SWITCH-TYPE\_63725**: Ingress service implants suspicious script/binary file
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCommonOverallConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonOverallConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeCommonOverallConfigRequest) SetSourceIp(v string) *DescribeCommonOverallConfigRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeCommonOverallConfigRequest) SetType(v string) *DescribeCommonOverallConfigRequest {
	s.Type = &v
	return s
}

type DescribeCommonOverallConfigResponseBody struct {
	// The information about the feature.
	OverallConfig *DescribeCommonOverallConfigResponseBodyOverallConfig `json:"OverallConfig,omitempty" xml:"OverallConfig,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCommonOverallConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonOverallConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCommonOverallConfigResponseBody) SetOverallConfig(v *DescribeCommonOverallConfigResponseBodyOverallConfig) *DescribeCommonOverallConfigResponseBody {
	s.OverallConfig = v
	return s
}

func (s *DescribeCommonOverallConfigResponseBody) SetRequestId(v string) *DescribeCommonOverallConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCommonOverallConfigResponseBodyOverallConfig struct {
	// The status of the feature. Valid values:
	//
	// *   **on**: enabled
	// *   **off**: disabled
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The type of the feature. Valid values:
	//
	// *   **kdump_switch**: Active defense experience optimization
	// *   **threat_detect**: Dynamic adaptive threat detection capability
	// *   **suspicious_aggregation**: Alert Association
	// *   **alidetect**: File Test
	// *   **USER-ENABLE-SWITCH-TYPE\_3277**: Suspicious process startup
	// *   **USER-ENABLE-SWITCH-TYPE\_5507**: malicious drivers
	// *   **USER-ENABLE-SWITCH-TYPE\_38857**: Entrance service execution high-risk operation
	// *   **USER-ENABLE-SWITCH-TYPE\_50858**: Web service performs high-risk operations
	// *   **USER-ENABLE-SWITCH-TYPE\_50859**: Entrance service execution suspicious operation
	// *   **USER-ENABLE-SWITCH-TYPE\_50861**: Information detection
	// *   **USER-ENABLE-SWITCH-TYPE\_50862**: Cloud Assistant Advanced Protection
	// *   **USER-ENABLE-SWITCH-TYPE\_50867**: Create malicious files
	// *   **USER-ENABLE-SWITCH-TYPE\_50868**: Create suspicious files
	// *   **USER-ENABLE-SWITCH-TYPE\_50869**: Unauthorized execution of high-risk orders
	// *   **USER-ENABLE-SWITCH-TYPE\_50870**: Rebound Shell
	// *   **USER-ENABLE-SWITCH-TYPE\_50873**: WebShell execute command
	// *   **USER-ENABLE-SWITCH-TYPE\_50876**: Against security software
	// *   **USER-ENABLE-SWITCH-TYPE\_50877**: Malicious soft communication
	// *   **USER-ENABLE-SWITCH-TYPE\_50884**: Suspicious worm script behavior
	// *   **USER-ENABLE-SWITCH-TYPE\_50885**: malicious script behavior
	// *   **USER-ENABLE-SWITCH-TYPE\_50983**: obfuscated command
	// *   **USER-ENABLE-SWITCH-TYPE\_51200**: Command line download and run malicious files
	// *   **USER-ENABLE-SWITCH-TYPE\_51201**: ransomware
	// *   **USER-ENABLE-SWITCH-TYPE\_51202**: Suspected Extortion
	// *   **USER-ENABLE-SWITCH-TYPE\_53168**: process debugging
	// *   **USER-ENABLE-SWITCH-TYPE\_53272**: Exploiting Kernel Vulnerabilities to Elevate Privileges
	// *   **USER-ENABLE-SWITCH-TYPE\_54034**: Intranet scan
	// *   **USER-ENABLE-SWITCH-TYPE\_54265**: Hijacking the PAM Module
	// *   **USER-ENABLE-SWITCH-TYPE\_54395**: Unauthorized reading and writing of sensitive files
	// *   **USER-ENABLE-SWITCH-TYPE\_54699**: Hijack dynamic link library
	// *   **USER-ENABLE-SWITCH-TYPE\_54953**: Hashdump Attack
	// *   **USER-ENABLE-SWITCH-TYPE\_57897**: suspected privilege escalation
	// *   **USER-ENABLE-SWITCH-TYPE\_62981**: Bypassing security monitoring
	// *   **USER-ENABLE-SWITCH-TYPE\_64025**: Ingress service execute command \[enhanced mode]
	// *   **USER-ENABLE-SWITCH-TYPE\_39659**: Sensitive Registry Key Protection
	// *   **USER-ENABLE-SWITCH-TYPE\_51225**: Powershell executes high-risk commands
	// *   **USER-ENABLE-SWITCH-TYPE\_51226**: Powershell execute suspicious command
	// *   **USER-ENABLE-SWITCH-TYPE\_51228**: High-risk lateral penetration tools
	// *   **USER-ENABLE-SWITCH-TYPE\_51229**: Browser service execution a high-risk operation
	// *   **USER-ENABLE-SWITCH-TYPE\_51230**: Entrance service execution suspicious operation
	// *   **USER-ENABLE-SWITCH-TYPE\_51232**: System processes execution high-risk operations
	// *   **USER-ENABLE-SWITCH-TYPE\_51233**: Java service execution high-risk operations
	// *   **USER-ENABLE-SWITCH-TYPE\_51234**: Office components execution high-risk operations
	// *   **USER-ENABLE-SWITCH-TYPE\_51235**: Web service performs high-risk operations
	// *   **USER-ENABLE-SWITCH-TYPE\_51236**: Rebound shells
	// *   **USER-ENABLE-SWITCH-TYPE\_52815**: Load high-risk drivers
	// *   **USER-ENABLE-SWITCH-TYPE\_52816**: high-risk account manipulation behavior
	// *   **USER-ENABLE-SWITCH-TYPE\_52818**: Information detection
	// *   **USER-ENABLE-SWITCH-TYPE\_52820**: Create malicious files
	// *   **USER-ENABLE-SWITCH-TYPE\_52821**: Suspicious process startup
	// *   **USER-ENABLE-SWITCH-TYPE\_52823**: Running high-risk ARK tools
	// *   **USER-ENABLE-SWITCH-TYPE\_52825**: Unauthorized execution of high-risk orders
	// *   **USER-ENABLE-SWITCH-TYPE\_52826**: Entrance service execution high-risk operation
	// *   **USER-ENABLE-SWITCH-TYPE\_52827**: Ransomware
	// *   **USER-ENABLE-SWITCH-TYPE\_52828**: Suspected Extortion
	// *   **USER-ENABLE-SWITCH-TYPE\_52829**: delete system backup behavior
	// *   **USER-ENABLE-SWITCH-TYPE\_54168**: LSA security permission service protection
	// *   **USER-ENABLE-SWITCH-TYPE\_54365**: Create service autorun item
	// *   **USER-ENABLE-SWITCH-TYPE\_54366**: Create high-risk autorun item
	// *   **USER-ENABLE-SWITCH-TYPE\_54367**: Create scheduled task autorun item
	// *   **USER-ENABLE-SWITCH-TYPE\_54368**: Create registry autorun item
	// *   **USER-ENABLE-SWITCH-TYPE\_54369**: Create WMI autorun item
	// *   **USER-ENABLE-SWITCH-TYPE\_54373**: Against security software
	// *   **USER-ENABLE-SWITCH-TYPE\_54374**: Intrusion trace cleanup
	// *   **USER-ENABLE-SWITCH-TYPE\_54384**: Hashdump Attack
	// *   **USER-ENABLE-SWITCH-TYPE\_55251**: Database services execution high-risk operations
	// *   **USER-ENABLE-SWITCH-TYPE\_57242**: Malicious command execution
	// *   **USER-ENABLE-SWITCH-TYPE\_57340**: Command line download and run malicious files
	// *   **USER-ENABLE-SWITCH-TYPE\_62357**: Cloud Assistant service information detection
	// *   **USER-ENABLE-SWITCH-TYPE\_63725**: Ingress service implants suspicious script/binary file
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCommonOverallConfigResponseBodyOverallConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonOverallConfigResponseBodyOverallConfig) GoString() string {
	return s.String()
}

func (s *DescribeCommonOverallConfigResponseBodyOverallConfig) SetConfig(v string) *DescribeCommonOverallConfigResponseBodyOverallConfig {
	s.Config = &v
	return s
}

func (s *DescribeCommonOverallConfigResponseBodyOverallConfig) SetType(v string) *DescribeCommonOverallConfigResponseBodyOverallConfig {
	s.Type = &v
	return s
}

type DescribeCommonOverallConfigResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCommonOverallConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCommonOverallConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonOverallConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeCommonOverallConfigResponse) SetHeaders(v map[string]*string) *DescribeCommonOverallConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeCommonOverallConfigResponse) SetStatusCode(v int32) *DescribeCommonOverallConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCommonOverallConfigResponse) SetBody(v *DescribeCommonOverallConfigResponseBody) *DescribeCommonOverallConfigResponse {
	s.Body = v
	return s
}

type DescribeCommonOverallConfigListRequest struct {
	SourceIp *string   `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	TypeList []*string `json:"TypeList,omitempty" xml:"TypeList,omitempty" type:"Repeated"`
}

func (s DescribeCommonOverallConfigListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonOverallConfigListRequest) GoString() string {
	return s.String()
}

func (s *DescribeCommonOverallConfigListRequest) SetSourceIp(v string) *DescribeCommonOverallConfigListRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeCommonOverallConfigListRequest) SetTypeList(v []*string) *DescribeCommonOverallConfigListRequest {
	s.TypeList = v
	return s
}

type DescribeCommonOverallConfigListResponseBody struct {
	OverallList []*DescribeCommonOverallConfigListResponseBodyOverallList `json:"OverallList,omitempty" xml:"OverallList,omitempty" type:"Repeated"`
	RequestId   *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCommonOverallConfigListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonOverallConfigListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCommonOverallConfigListResponseBody) SetOverallList(v []*DescribeCommonOverallConfigListResponseBodyOverallList) *DescribeCommonOverallConfigListResponseBody {
	s.OverallList = v
	return s
}

func (s *DescribeCommonOverallConfigListResponseBody) SetRequestId(v string) *DescribeCommonOverallConfigListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCommonOverallConfigListResponseBodyOverallList struct {
	Config     *string `json:"Config,omitempty" xml:"Config,omitempty"`
	TotalCount *int32  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCommonOverallConfigListResponseBodyOverallList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonOverallConfigListResponseBodyOverallList) GoString() string {
	return s.String()
}

func (s *DescribeCommonOverallConfigListResponseBodyOverallList) SetConfig(v string) *DescribeCommonOverallConfigListResponseBodyOverallList {
	s.Config = &v
	return s
}

func (s *DescribeCommonOverallConfigListResponseBodyOverallList) SetTotalCount(v int32) *DescribeCommonOverallConfigListResponseBodyOverallList {
	s.TotalCount = &v
	return s
}

func (s *DescribeCommonOverallConfigListResponseBodyOverallList) SetType(v string) *DescribeCommonOverallConfigListResponseBodyOverallList {
	s.Type = &v
	return s
}

type DescribeCommonOverallConfigListResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCommonOverallConfigListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCommonOverallConfigListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonOverallConfigListResponse) GoString() string {
	return s.String()
}

func (s *DescribeCommonOverallConfigListResponse) SetHeaders(v map[string]*string) *DescribeCommonOverallConfigListResponse {
	s.Headers = v
	return s
}

func (s *DescribeCommonOverallConfigListResponse) SetStatusCode(v int32) *DescribeCommonOverallConfigListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCommonOverallConfigListResponse) SetBody(v *DescribeCommonOverallConfigListResponseBody) *DescribeCommonOverallConfigListResponse {
	s.Body = v
	return s
}

type DescribeCommonTargetConfigRequest struct {
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCommonTargetConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonTargetConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeCommonTargetConfigRequest) SetType(v string) *DescribeCommonTargetConfigRequest {
	s.Type = &v
	return s
}

type DescribeCommonTargetConfigResponseBody struct {
	RequestId  *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TargetList []*DescribeCommonTargetConfigResponseBodyTargetList `json:"TargetList,omitempty" xml:"TargetList,omitempty" type:"Repeated"`
}

func (s DescribeCommonTargetConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonTargetConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCommonTargetConfigResponseBody) SetRequestId(v string) *DescribeCommonTargetConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCommonTargetConfigResponseBody) SetTargetList(v []*DescribeCommonTargetConfigResponseBodyTargetList) *DescribeCommonTargetConfigResponseBody {
	s.TargetList = v
	return s
}

type DescribeCommonTargetConfigResponseBodyTargetList struct {
	Flag       *string `json:"Flag,omitempty" xml:"Flag,omitempty"`
	Target     *string `json:"Target,omitempty" xml:"Target,omitempty"`
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s DescribeCommonTargetConfigResponseBodyTargetList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonTargetConfigResponseBodyTargetList) GoString() string {
	return s.String()
}

func (s *DescribeCommonTargetConfigResponseBodyTargetList) SetFlag(v string) *DescribeCommonTargetConfigResponseBodyTargetList {
	s.Flag = &v
	return s
}

func (s *DescribeCommonTargetConfigResponseBodyTargetList) SetTarget(v string) *DescribeCommonTargetConfigResponseBodyTargetList {
	s.Target = &v
	return s
}

func (s *DescribeCommonTargetConfigResponseBodyTargetList) SetTargetType(v string) *DescribeCommonTargetConfigResponseBodyTargetList {
	s.TargetType = &v
	return s
}

type DescribeCommonTargetConfigResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCommonTargetConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCommonTargetConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonTargetConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeCommonTargetConfigResponse) SetHeaders(v map[string]*string) *DescribeCommonTargetConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeCommonTargetConfigResponse) SetStatusCode(v int32) *DescribeCommonTargetConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCommonTargetConfigResponse) SetBody(v *DescribeCommonTargetConfigResponseBody) *DescribeCommonTargetConfigResponse {
	s.Body = v
	return s
}

type DescribeCommonTargetResultListRequest struct {
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The type of the configuration item. Valid values:
	//
	// *   **webshell_timescan**: webshell detection and removal
	// *   **aliscriptengine**: in-depth detection engine
	// *   **alidetect**: installation scope of local file detection
	// *   **alidetect-scan-enable**: detection scope of local file detection
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCommonTargetResultListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonTargetResultListRequest) GoString() string {
	return s.String()
}

func (s *DescribeCommonTargetResultListRequest) SetSourceIp(v string) *DescribeCommonTargetResultListRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeCommonTargetResultListRequest) SetType(v string) *DescribeCommonTargetResultListRequest {
	s.Type = &v
	return s
}

type DescribeCommonTargetResultListResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the configuration item.
	TargetConfig *DescribeCommonTargetResultListResponseBodyTargetConfig `json:"TargetConfig,omitempty" xml:"TargetConfig,omitempty" type:"Struct"`
}

func (s DescribeCommonTargetResultListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonTargetResultListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCommonTargetResultListResponseBody) SetRequestId(v string) *DescribeCommonTargetResultListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCommonTargetResultListResponseBody) SetTargetConfig(v *DescribeCommonTargetResultListResponseBodyTargetConfig) *DescribeCommonTargetResultListResponseBody {
	s.TargetConfig = v
	return s
}

type DescribeCommonTargetResultListResponseBodyTargetConfig struct {
	// The identifier that indicates whether the configuration item is applied to the server. Valid values:
	//
	// *   **add**: applied
	// *   **del**: not applied
	Flag *string `json:"Flag,omitempty" xml:"Flag,omitempty"`
	// The default identifier.
	TargetDefault *string `json:"TargetDefault,omitempty" xml:"TargetDefault,omitempty"`
	// An array that consists of the IDs of the server groups or the UUIDs of the servers.
	//
	// >  If **uuid** is returned for the **TargetType** parameter, **UUIDs** of the servers are returned. If **groupId** is returned for the **TargetType** parameter, IDs of the server groups are returned.
	TargetList []*string `json:"TargetList,omitempty" xml:"TargetList,omitempty" type:"Repeated"`
	// The type of the server to which the configuration item is applied. Valid values:
	//
	// *   **uuid**: a server
	// *   **groupId**: a server group
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	// The total number of entries returned.
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The type of the configuration item. Valid values:
	//
	// *   **webshell_timescan**: webshell detection and removal
	// *   **aliscriptengine**: in-depth detection engine
	// *   **alidetect**: installation scope of local file detection
	// *   **alidetect-scan-enable**: detection scope of local file detection
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCommonTargetResultListResponseBodyTargetConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonTargetResultListResponseBodyTargetConfig) GoString() string {
	return s.String()
}

func (s *DescribeCommonTargetResultListResponseBodyTargetConfig) SetFlag(v string) *DescribeCommonTargetResultListResponseBodyTargetConfig {
	s.Flag = &v
	return s
}

func (s *DescribeCommonTargetResultListResponseBodyTargetConfig) SetTargetDefault(v string) *DescribeCommonTargetResultListResponseBodyTargetConfig {
	s.TargetDefault = &v
	return s
}

func (s *DescribeCommonTargetResultListResponseBodyTargetConfig) SetTargetList(v []*string) *DescribeCommonTargetResultListResponseBodyTargetConfig {
	s.TargetList = v
	return s
}

func (s *DescribeCommonTargetResultListResponseBodyTargetConfig) SetTargetType(v string) *DescribeCommonTargetResultListResponseBodyTargetConfig {
	s.TargetType = &v
	return s
}

func (s *DescribeCommonTargetResultListResponseBodyTargetConfig) SetTotalCount(v string) *DescribeCommonTargetResultListResponseBodyTargetConfig {
	s.TotalCount = &v
	return s
}

func (s *DescribeCommonTargetResultListResponseBodyTargetConfig) SetType(v string) *DescribeCommonTargetResultListResponseBodyTargetConfig {
	s.Type = &v
	return s
}

type DescribeCommonTargetResultListResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCommonTargetResultListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCommonTargetResultListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCommonTargetResultListResponse) GoString() string {
	return s.String()
}

func (s *DescribeCommonTargetResultListResponse) SetHeaders(v map[string]*string) *DescribeCommonTargetResultListResponse {
	s.Headers = v
	return s
}

func (s *DescribeCommonTargetResultListResponse) SetStatusCode(v int32) *DescribeCommonTargetResultListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCommonTargetResultListResponse) SetBody(v *DescribeCommonTargetResultListResponseBody) *DescribeCommonTargetResultListResponse {
	s.Body = v
	return s
}

type DescribeConcernNecessityRequest struct {
	// The language of the content within the request and response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s DescribeConcernNecessityRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConcernNecessityRequest) GoString() string {
	return s.String()
}

func (s *DescribeConcernNecessityRequest) SetLang(v string) *DescribeConcernNecessityRequest {
	s.Lang = &v
	return s
}

type DescribeConcernNecessityResponseBody struct {
	// The priorities to fix the vulnerabilities. Valid values:
	//
	// *   asap: high
	// *   later: medium
	// *   nntf: low
	ConcernNecessity []*string `json:"ConcernNecessity,omitempty" xml:"ConcernNecessity,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeConcernNecessityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConcernNecessityResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConcernNecessityResponseBody) SetConcernNecessity(v []*string) *DescribeConcernNecessityResponseBody {
	s.ConcernNecessity = v
	return s
}

func (s *DescribeConcernNecessityResponseBody) SetRequestId(v string) *DescribeConcernNecessityResponseBody {
	s.RequestId = &v
	return s
}

type DescribeConcernNecessityResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeConcernNecessityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeConcernNecessityResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConcernNecessityResponse) GoString() string {
	return s.String()
}

func (s *DescribeConcernNecessityResponse) SetHeaders(v map[string]*string) *DescribeConcernNecessityResponse {
	s.Headers = v
	return s
}

func (s *DescribeConcernNecessityResponse) SetStatusCode(v int32) *DescribeConcernNecessityResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConcernNecessityResponse) SetBody(v *DescribeConcernNecessityResponseBody) *DescribeConcernNecessityResponse {
	s.Body = v
	return s
}

type DescribeContainerCriteriaRequest struct {
	GroupField *string `json:"GroupField,omitempty" xml:"GroupField,omitempty"`
	Value      *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeContainerCriteriaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerCriteriaRequest) GoString() string {
	return s.String()
}

func (s *DescribeContainerCriteriaRequest) SetGroupField(v string) *DescribeContainerCriteriaRequest {
	s.GroupField = &v
	return s
}

func (s *DescribeContainerCriteriaRequest) SetValue(v string) *DescribeContainerCriteriaRequest {
	s.Value = &v
	return s
}

type DescribeContainerCriteriaResponseBody struct {
	CriteriaList []*DescribeContainerCriteriaResponseBodyCriteriaList `json:"CriteriaList,omitempty" xml:"CriteriaList,omitempty" type:"Repeated"`
	RequestId    *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeContainerCriteriaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerCriteriaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeContainerCriteriaResponseBody) SetCriteriaList(v []*DescribeContainerCriteriaResponseBodyCriteriaList) *DescribeContainerCriteriaResponseBody {
	s.CriteriaList = v
	return s
}

func (s *DescribeContainerCriteriaResponseBody) SetRequestId(v string) *DescribeContainerCriteriaResponseBody {
	s.RequestId = &v
	return s
}

type DescribeContainerCriteriaResponseBodyCriteriaList struct {
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Values *string `json:"Values,omitempty" xml:"Values,omitempty"`
}

func (s DescribeContainerCriteriaResponseBodyCriteriaList) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerCriteriaResponseBodyCriteriaList) GoString() string {
	return s.String()
}

func (s *DescribeContainerCriteriaResponseBodyCriteriaList) SetName(v string) *DescribeContainerCriteriaResponseBodyCriteriaList {
	s.Name = &v
	return s
}

func (s *DescribeContainerCriteriaResponseBodyCriteriaList) SetType(v string) *DescribeContainerCriteriaResponseBodyCriteriaList {
	s.Type = &v
	return s
}

func (s *DescribeContainerCriteriaResponseBodyCriteriaList) SetValues(v string) *DescribeContainerCriteriaResponseBodyCriteriaList {
	s.Values = &v
	return s
}

type DescribeContainerCriteriaResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeContainerCriteriaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeContainerCriteriaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerCriteriaResponse) GoString() string {
	return s.String()
}

func (s *DescribeContainerCriteriaResponse) SetHeaders(v map[string]*string) *DescribeContainerCriteriaResponse {
	s.Headers = v
	return s
}

func (s *DescribeContainerCriteriaResponse) SetStatusCode(v int32) *DescribeContainerCriteriaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeContainerCriteriaResponse) SetBody(v *DescribeContainerCriteriaResponseBody) *DescribeContainerCriteriaResponse {
	s.Body = v
	return s
}

type DescribeContainerInstancesRequest struct {
	Criteria    *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	LogicalExp  *string `json:"LogicalExp,omitempty" xml:"LogicalExp,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeContainerInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeContainerInstancesRequest) SetCriteria(v string) *DescribeContainerInstancesRequest {
	s.Criteria = &v
	return s
}

func (s *DescribeContainerInstancesRequest) SetCurrentPage(v int32) *DescribeContainerInstancesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeContainerInstancesRequest) SetLogicalExp(v string) *DescribeContainerInstancesRequest {
	s.LogicalExp = &v
	return s
}

func (s *DescribeContainerInstancesRequest) SetPageSize(v int32) *DescribeContainerInstancesRequest {
	s.PageSize = &v
	return s
}

type DescribeContainerInstancesResponseBody struct {
	ContainerInstanceList []*DescribeContainerInstancesResponseBodyContainerInstanceList `json:"ContainerInstanceList,omitempty" xml:"ContainerInstanceList,omitempty" type:"Repeated"`
	PageInfo              *DescribeContainerInstancesResponseBodyPageInfo                `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId             *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeContainerInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeContainerInstancesResponseBody) SetContainerInstanceList(v []*DescribeContainerInstancesResponseBodyContainerInstanceList) *DescribeContainerInstancesResponseBody {
	s.ContainerInstanceList = v
	return s
}

func (s *DescribeContainerInstancesResponseBody) SetPageInfo(v *DescribeContainerInstancesResponseBodyPageInfo) *DescribeContainerInstancesResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeContainerInstancesResponseBody) SetRequestId(v string) *DescribeContainerInstancesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeContainerInstancesResponseBodyContainerInstanceList struct {
	AlarmCount         *int32  `json:"AlarmCount,omitempty" xml:"AlarmCount,omitempty"`
	AlarmStatus        *string `json:"AlarmStatus,omitempty" xml:"AlarmStatus,omitempty"`
	AppName            *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ClusterId          *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName        *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ContainerId        *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	CreateTimestamp    *int64  `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	HcCount            *int32  `json:"HcCount,omitempty" xml:"HcCount,omitempty"`
	HcStatus           *string `json:"HcStatus,omitempty" xml:"HcStatus,omitempty"`
	HostIp             *string `json:"HostIp,omitempty" xml:"HostIp,omitempty"`
	Image              *string `json:"Image,omitempty" xml:"Image,omitempty"`
	ImageDigest        *string `json:"ImageDigest,omitempty" xml:"ImageDigest,omitempty"`
	ImageId            *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageRepoName      *string `json:"ImageRepoName,omitempty" xml:"ImageRepoName,omitempty"`
	ImageRepoNamespace *string `json:"ImageRepoNamespace,omitempty" xml:"ImageRepoNamespace,omitempty"`
	ImageRepoTag       *string `json:"ImageRepoTag,omitempty" xml:"ImageRepoTag,omitempty"`
	ImageUuid          *string `json:"ImageUuid,omitempty" xml:"ImageUuid,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Namespace          *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	NodeInfo           *string `json:"NodeInfo,omitempty" xml:"NodeInfo,omitempty"`
	NodeName           *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Pod                *string `json:"Pod,omitempty" xml:"Pod,omitempty"`
	PodIp              *string `json:"PodIp,omitempty" xml:"PodIp,omitempty"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RiskCount          *string `json:"RiskCount,omitempty" xml:"RiskCount,omitempty"`
	RiskStatus         *string `json:"RiskStatus,omitempty" xml:"RiskStatus,omitempty"`
	UpdateMark         *string `json:"UpdateMark,omitempty" xml:"UpdateMark,omitempty"`
	VulCount           *int32  `json:"VulCount,omitempty" xml:"VulCount,omitempty"`
	VulStatus          *string `json:"VulStatus,omitempty" xml:"VulStatus,omitempty"`
}

func (s DescribeContainerInstancesResponseBodyContainerInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerInstancesResponseBodyContainerInstanceList) GoString() string {
	return s.String()
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetAlarmCount(v int32) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.AlarmCount = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetAlarmStatus(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.AlarmStatus = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetAppName(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.AppName = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetClusterId(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.ClusterId = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetClusterName(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.ClusterName = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetContainerId(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.ContainerId = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetCreateTimestamp(v int64) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.CreateTimestamp = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetHcCount(v int32) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.HcCount = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetHcStatus(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.HcStatus = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetHostIp(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.HostIp = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetImage(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.Image = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetImageDigest(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.ImageDigest = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetImageId(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.ImageId = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetImageRepoName(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.ImageRepoName = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetImageRepoNamespace(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.ImageRepoNamespace = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetImageRepoTag(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.ImageRepoTag = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetImageUuid(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.ImageUuid = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetInstanceId(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.InstanceId = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetNamespace(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.Namespace = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetNodeInfo(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.NodeInfo = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetNodeName(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.NodeName = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetPod(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.Pod = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetPodIp(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.PodIp = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetRegionId(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.RegionId = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetRiskCount(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.RiskCount = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetRiskStatus(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.RiskStatus = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetUpdateMark(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.UpdateMark = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetVulCount(v int32) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.VulCount = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyContainerInstanceList) SetVulStatus(v string) *DescribeContainerInstancesResponseBodyContainerInstanceList {
	s.VulStatus = &v
	return s
}

type DescribeContainerInstancesResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeContainerInstancesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerInstancesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeContainerInstancesResponseBodyPageInfo) SetCount(v int32) *DescribeContainerInstancesResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeContainerInstancesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyPageInfo) SetPageSize(v int32) *DescribeContainerInstancesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeContainerInstancesResponseBodyPageInfo) SetTotalCount(v int32) *DescribeContainerInstancesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeContainerInstancesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeContainerInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeContainerInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeContainerInstancesResponse) SetHeaders(v map[string]*string) *DescribeContainerInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeContainerInstancesResponse) SetStatusCode(v int32) *DescribeContainerInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeContainerInstancesResponse) SetBody(v *DescribeContainerInstancesResponseBody) *DescribeContainerInstancesResponse {
	s.Body = v
	return s
}

type DescribeContainerStatisticsRequest struct {
	// The ID of the container cluster.
	//
	// >  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DescribeContainerStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeContainerStatisticsRequest) SetClusterId(v string) *DescribeContainerStatisticsRequest {
	s.ClusterId = &v
	return s
}

type DescribeContainerStatisticsResponseBody struct {
	// The alert statistics of container assets.
	Data *DescribeContainerStatisticsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeContainerStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeContainerStatisticsResponseBody) SetData(v *DescribeContainerStatisticsResponseBodyData) *DescribeContainerStatisticsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeContainerStatisticsResponseBody) SetRequestId(v string) *DescribeContainerStatisticsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeContainerStatisticsResponseBodyData struct {
	// The number of alerts whose risk level is **Reminder**.
	RemindAlarmCount *int32 `json:"RemindAlarmCount,omitempty" xml:"RemindAlarmCount,omitempty"`
	// The number of alerts whose risk level is **Urgent**.
	SeriousAlarmCount *int32 `json:"SeriousAlarmCount,omitempty" xml:"SeriousAlarmCount,omitempty"`
	// The number of alerts whose risk level is **Suspicious**.
	SuspiciousAlarmCount *int32 `json:"SuspiciousAlarmCount,omitempty" xml:"SuspiciousAlarmCount,omitempty"`
	// The total number of alerts that are generated in the current container cluster.
	TotalAlarmCount *int32 `json:"TotalAlarmCount,omitempty" xml:"TotalAlarmCount,omitempty"`
	// The total number of nodes in the current container cluster.
	TotalNode *int32 `json:"TotalNode,omitempty" xml:"TotalNode,omitempty"`
	// The number of nodes on which alerts are generated in the current container cluster.
	HasRiskNode *int32 `json:"hasRiskNode,omitempty" xml:"hasRiskNode,omitempty"`
}

func (s DescribeContainerStatisticsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerStatisticsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeContainerStatisticsResponseBodyData) SetRemindAlarmCount(v int32) *DescribeContainerStatisticsResponseBodyData {
	s.RemindAlarmCount = &v
	return s
}

func (s *DescribeContainerStatisticsResponseBodyData) SetSeriousAlarmCount(v int32) *DescribeContainerStatisticsResponseBodyData {
	s.SeriousAlarmCount = &v
	return s
}

func (s *DescribeContainerStatisticsResponseBodyData) SetSuspiciousAlarmCount(v int32) *DescribeContainerStatisticsResponseBodyData {
	s.SuspiciousAlarmCount = &v
	return s
}

func (s *DescribeContainerStatisticsResponseBodyData) SetTotalAlarmCount(v int32) *DescribeContainerStatisticsResponseBodyData {
	s.TotalAlarmCount = &v
	return s
}

func (s *DescribeContainerStatisticsResponseBodyData) SetTotalNode(v int32) *DescribeContainerStatisticsResponseBodyData {
	s.TotalNode = &v
	return s
}

func (s *DescribeContainerStatisticsResponseBodyData) SetHasRiskNode(v int32) *DescribeContainerStatisticsResponseBodyData {
	s.HasRiskNode = &v
	return s
}

type DescribeContainerStatisticsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeContainerStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeContainerStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeContainerStatisticsResponse) SetHeaders(v map[string]*string) *DescribeContainerStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeContainerStatisticsResponse) SetStatusCode(v int32) *DescribeContainerStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeContainerStatisticsResponse) SetBody(v *DescribeContainerStatisticsResponseBody) *DescribeContainerStatisticsResponse {
	s.Body = v
	return s
}

type DescribeContainerTagsRequest struct {
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	FieldName   *string `json:"FieldName,omitempty" xml:"FieldName,omitempty"`
	FieldValue  *string `json:"FieldValue,omitempty" xml:"FieldValue,omitempty"`
	Namespace   *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeContainerTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeContainerTagsRequest) SetAppName(v string) *DescribeContainerTagsRequest {
	s.AppName = &v
	return s
}

func (s *DescribeContainerTagsRequest) SetClusterId(v string) *DescribeContainerTagsRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeContainerTagsRequest) SetCurrentPage(v int32) *DescribeContainerTagsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeContainerTagsRequest) SetFieldName(v string) *DescribeContainerTagsRequest {
	s.FieldName = &v
	return s
}

func (s *DescribeContainerTagsRequest) SetFieldValue(v string) *DescribeContainerTagsRequest {
	s.FieldValue = &v
	return s
}

func (s *DescribeContainerTagsRequest) SetNamespace(v string) *DescribeContainerTagsRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeContainerTagsRequest) SetPageSize(v int32) *DescribeContainerTagsRequest {
	s.PageSize = &v
	return s
}

type DescribeContainerTagsResponseBody struct {
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagValues []*string `json:"TagValues,omitempty" xml:"TagValues,omitempty" type:"Repeated"`
}

func (s DescribeContainerTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeContainerTagsResponseBody) SetRequestId(v string) *DescribeContainerTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeContainerTagsResponseBody) SetTagValues(v []*string) *DescribeContainerTagsResponseBody {
	s.TagValues = v
	return s
}

type DescribeContainerTagsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeContainerTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeContainerTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeContainerTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeContainerTagsResponse) SetHeaders(v map[string]*string) *DescribeContainerTagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeContainerTagsResponse) SetStatusCode(v int32) *DescribeContainerTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeContainerTagsResponse) SetBody(v *DescribeContainerTagsResponseBody) *DescribeContainerTagsResponse {
	s.Body = v
	return s
}

type DescribeCountNotScannedImageResponseBody struct {
	NotScannedCnt *int32  `json:"NotScannedCnt,omitempty" xml:"NotScannedCnt,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCountNotScannedImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCountNotScannedImageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCountNotScannedImageResponseBody) SetNotScannedCnt(v int32) *DescribeCountNotScannedImageResponseBody {
	s.NotScannedCnt = &v
	return s
}

func (s *DescribeCountNotScannedImageResponseBody) SetRequestId(v string) *DescribeCountNotScannedImageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCountNotScannedImageResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCountNotScannedImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCountNotScannedImageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCountNotScannedImageResponse) GoString() string {
	return s.String()
}

func (s *DescribeCountNotScannedImageResponse) SetHeaders(v map[string]*string) *DescribeCountNotScannedImageResponse {
	s.Headers = v
	return s
}

func (s *DescribeCountNotScannedImageResponse) SetStatusCode(v int32) *DescribeCountNotScannedImageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCountNotScannedImageResponse) SetBody(v *DescribeCountNotScannedImageResponseBody) *DescribeCountNotScannedImageResponse {
	s.Body = v
	return s
}

type DescribeCountScannedImageResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScannedCount *int32  `json:"ScannedCount,omitempty" xml:"ScannedCount,omitempty"`
}

func (s DescribeCountScannedImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCountScannedImageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCountScannedImageResponseBody) SetRequestId(v string) *DescribeCountScannedImageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCountScannedImageResponseBody) SetScannedCount(v int32) *DescribeCountScannedImageResponseBody {
	s.ScannedCount = &v
	return s
}

type DescribeCountScannedImageResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCountScannedImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCountScannedImageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCountScannedImageResponse) GoString() string {
	return s.String()
}

func (s *DescribeCountScannedImageResponse) SetHeaders(v map[string]*string) *DescribeCountScannedImageResponse {
	s.Headers = v
	return s
}

func (s *DescribeCountScannedImageResponse) SetStatusCode(v int32) *DescribeCountScannedImageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCountScannedImageResponse) SetBody(v *DescribeCountScannedImageResponseBody) *DescribeCountScannedImageResponse {
	s.Body = v
	return s
}

type DescribeCriteriaRequest struct {
	// The type of the asset. Valid values:
	//
	// *   **ecs**: Elastic Compute Service (ECS) instance
	MachineTypes *string `json:"MachineTypes,omitempty" xml:"MachineTypes,omitempty"`
	// Specifies whether the keyword that you specify for fuzzy search can be automatically matched. default **false**, Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	SupportAutoTag *bool `json:"SupportAutoTag,omitempty" xml:"SupportAutoTag,omitempty"`
	// The keyword that you specify for fuzzy search when you query the asset.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeCriteriaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCriteriaRequest) GoString() string {
	return s.String()
}

func (s *DescribeCriteriaRequest) SetMachineTypes(v string) *DescribeCriteriaRequest {
	s.MachineTypes = &v
	return s
}

func (s *DescribeCriteriaRequest) SetSupportAutoTag(v bool) *DescribeCriteriaRequest {
	s.SupportAutoTag = &v
	return s
}

func (s *DescribeCriteriaRequest) SetValue(v string) *DescribeCriteriaRequest {
	s.Value = &v
	return s
}

type DescribeCriteriaResponseBody struct {
	// An array that consists of the filter conditions.
	CriteriaList []*DescribeCriteriaResponseBodyCriteriaList `json:"CriteriaList,omitempty" xml:"CriteriaList,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCriteriaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCriteriaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCriteriaResponseBody) SetCriteriaList(v []*DescribeCriteriaResponseBodyCriteriaList) *DescribeCriteriaResponseBody {
	s.CriteriaList = v
	return s
}

func (s *DescribeCriteriaResponseBody) SetRequestId(v string) *DescribeCriteriaResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCriteriaResponseBodyCriteriaList struct {
	// The structured attribute values of the assets that match the keyword. The value of this parameter is in the JSON format and contains the following fields:
	//
	// *   **vendor**: providers
	// *   **regionIds**: IDs of supported regions
	MultiValues *string `json:"MultiValues,omitempty" xml:"MultiValues,omitempty"`
	// The name of the filter condition.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the filter condition. Valid values:
	//
	// *   **input**: The filter condition needs to be specified.
	// *   **select**: The filter condition is an option that can be selected from the drop-down list.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The attribute values of the assets that match the keyword.
	Values *string `json:"Values,omitempty" xml:"Values,omitempty"`
}

func (s DescribeCriteriaResponseBodyCriteriaList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCriteriaResponseBodyCriteriaList) GoString() string {
	return s.String()
}

func (s *DescribeCriteriaResponseBodyCriteriaList) SetMultiValues(v string) *DescribeCriteriaResponseBodyCriteriaList {
	s.MultiValues = &v
	return s
}

func (s *DescribeCriteriaResponseBodyCriteriaList) SetName(v string) *DescribeCriteriaResponseBodyCriteriaList {
	s.Name = &v
	return s
}

func (s *DescribeCriteriaResponseBodyCriteriaList) SetType(v string) *DescribeCriteriaResponseBodyCriteriaList {
	s.Type = &v
	return s
}

func (s *DescribeCriteriaResponseBodyCriteriaList) SetValues(v string) *DescribeCriteriaResponseBodyCriteriaList {
	s.Values = &v
	return s
}

type DescribeCriteriaResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCriteriaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCriteriaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCriteriaResponse) GoString() string {
	return s.String()
}

func (s *DescribeCriteriaResponse) SetHeaders(v map[string]*string) *DescribeCriteriaResponse {
	s.Headers = v
	return s
}

func (s *DescribeCriteriaResponse) SetStatusCode(v int32) *DescribeCriteriaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCriteriaResponse) SetBody(v *DescribeCriteriaResponseBody) *DescribeCriteriaResponse {
	s.Body = v
	return s
}

type DescribeCustomBlockRecordsRequest struct {
	BlockIp         *string `json:"BlockIp,omitempty" xml:"BlockIp,omitempty"`
	CurrentPage     *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status          *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeCustomBlockRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomBlockRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCustomBlockRecordsRequest) SetBlockIp(v string) *DescribeCustomBlockRecordsRequest {
	s.BlockIp = &v
	return s
}

func (s *DescribeCustomBlockRecordsRequest) SetCurrentPage(v int32) *DescribeCustomBlockRecordsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeCustomBlockRecordsRequest) SetPageSize(v int32) *DescribeCustomBlockRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCustomBlockRecordsRequest) SetResourceOwnerId(v int64) *DescribeCustomBlockRecordsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCustomBlockRecordsRequest) SetStatus(v int32) *DescribeCustomBlockRecordsRequest {
	s.Status = &v
	return s
}

type DescribeCustomBlockRecordsResponseBody struct {
	PageInfo   *DescribeCustomBlockRecordsResponseBodyPageInfo     `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RecordList []*DescribeCustomBlockRecordsResponseBodyRecordList `json:"RecordList,omitempty" xml:"RecordList,omitempty" type:"Repeated"`
	RequestId  *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCustomBlockRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomBlockRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCustomBlockRecordsResponseBody) SetPageInfo(v *DescribeCustomBlockRecordsResponseBodyPageInfo) *DescribeCustomBlockRecordsResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBody) SetRecordList(v []*DescribeCustomBlockRecordsResponseBodyRecordList) *DescribeCustomBlockRecordsResponseBody {
	s.RecordList = v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBody) SetRequestId(v string) *DescribeCustomBlockRecordsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCustomBlockRecordsResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCustomBlockRecordsResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomBlockRecordsResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeCustomBlockRecordsResponseBodyPageInfo) SetCount(v int32) *DescribeCustomBlockRecordsResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeCustomBlockRecordsResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBodyPageInfo) SetPageSize(v int32) *DescribeCustomBlockRecordsResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBodyPageInfo) SetTotalCount(v int32) *DescribeCustomBlockRecordsResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeCustomBlockRecordsResponseBodyRecordList struct {
	BlockExpireDate *int64                                                        `json:"BlockExpireDate,omitempty" xml:"BlockExpireDate,omitempty"`
	BlockIp         *string                                                       `json:"BlockIp,omitempty" xml:"BlockIp,omitempty"`
	Bound           *string                                                       `json:"Bound,omitempty" xml:"Bound,omitempty"`
	EnableCount     *int32                                                        `json:"EnableCount,omitempty" xml:"EnableCount,omitempty"`
	Id              *int64                                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	ServerCount     *int32                                                        `json:"ServerCount,omitempty" xml:"ServerCount,omitempty"`
	Source          *string                                                       `json:"Source,omitempty" xml:"Source,omitempty"`
	Status          *int32                                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	TargetList      []*DescribeCustomBlockRecordsResponseBodyRecordListTargetList `json:"TargetList,omitempty" xml:"TargetList,omitempty" type:"Repeated"`
}

func (s DescribeCustomBlockRecordsResponseBodyRecordList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomBlockRecordsResponseBodyRecordList) GoString() string {
	return s.String()
}

func (s *DescribeCustomBlockRecordsResponseBodyRecordList) SetBlockExpireDate(v int64) *DescribeCustomBlockRecordsResponseBodyRecordList {
	s.BlockExpireDate = &v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBodyRecordList) SetBlockIp(v string) *DescribeCustomBlockRecordsResponseBodyRecordList {
	s.BlockIp = &v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBodyRecordList) SetBound(v string) *DescribeCustomBlockRecordsResponseBodyRecordList {
	s.Bound = &v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBodyRecordList) SetEnableCount(v int32) *DescribeCustomBlockRecordsResponseBodyRecordList {
	s.EnableCount = &v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBodyRecordList) SetId(v int64) *DescribeCustomBlockRecordsResponseBodyRecordList {
	s.Id = &v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBodyRecordList) SetServerCount(v int32) *DescribeCustomBlockRecordsResponseBodyRecordList {
	s.ServerCount = &v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBodyRecordList) SetSource(v string) *DescribeCustomBlockRecordsResponseBodyRecordList {
	s.Source = &v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBodyRecordList) SetStatus(v int32) *DescribeCustomBlockRecordsResponseBodyRecordList {
	s.Status = &v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBodyRecordList) SetTargetList(v []*DescribeCustomBlockRecordsResponseBodyRecordListTargetList) *DescribeCustomBlockRecordsResponseBodyRecordList {
	s.TargetList = v
	return s
}

type DescribeCustomBlockRecordsResponseBodyRecordListTargetList struct {
	Target     *string `json:"Target,omitempty" xml:"Target,omitempty"`
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s DescribeCustomBlockRecordsResponseBodyRecordListTargetList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomBlockRecordsResponseBodyRecordListTargetList) GoString() string {
	return s.String()
}

func (s *DescribeCustomBlockRecordsResponseBodyRecordListTargetList) SetTarget(v string) *DescribeCustomBlockRecordsResponseBodyRecordListTargetList {
	s.Target = &v
	return s
}

func (s *DescribeCustomBlockRecordsResponseBodyRecordListTargetList) SetTargetType(v string) *DescribeCustomBlockRecordsResponseBodyRecordListTargetList {
	s.TargetType = &v
	return s
}

type DescribeCustomBlockRecordsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCustomBlockRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCustomBlockRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomBlockRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCustomBlockRecordsResponse) SetHeaders(v map[string]*string) *DescribeCustomBlockRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCustomBlockRecordsResponse) SetStatusCode(v int32) *DescribeCustomBlockRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCustomBlockRecordsResponse) SetBody(v *DescribeCustomBlockRecordsResponseBody) *DescribeCustomBlockRecordsResponse {
	s.Body = v
	return s
}

type DescribeCycleTaskListRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TaskName    *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskType    *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeCycleTaskListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCycleTaskListRequest) GoString() string {
	return s.String()
}

func (s *DescribeCycleTaskListRequest) SetCurrentPage(v int32) *DescribeCycleTaskListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeCycleTaskListRequest) SetPageSize(v int32) *DescribeCycleTaskListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCycleTaskListRequest) SetTaskName(v string) *DescribeCycleTaskListRequest {
	s.TaskName = &v
	return s
}

func (s *DescribeCycleTaskListRequest) SetTaskType(v string) *DescribeCycleTaskListRequest {
	s.TaskType = &v
	return s
}

type DescribeCycleTaskListResponseBody struct {
	CycleScheduleResponseList []*DescribeCycleTaskListResponseBodyCycleScheduleResponseList `json:"CycleScheduleResponseList,omitempty" xml:"CycleScheduleResponseList,omitempty" type:"Repeated"`
	PageInfo                  *DescribeCycleTaskListResponseBodyPageInfo                    `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId                 *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCycleTaskListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCycleTaskListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCycleTaskListResponseBody) SetCycleScheduleResponseList(v []*DescribeCycleTaskListResponseBodyCycleScheduleResponseList) *DescribeCycleTaskListResponseBody {
	s.CycleScheduleResponseList = v
	return s
}

func (s *DescribeCycleTaskListResponseBody) SetPageInfo(v *DescribeCycleTaskListResponseBodyPageInfo) *DescribeCycleTaskListResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeCycleTaskListResponseBody) SetRequestId(v string) *DescribeCycleTaskListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCycleTaskListResponseBodyCycleScheduleResponseList struct {
	ConfigId         *string `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
	Enable           *int32  `json:"Enable,omitempty" xml:"Enable,omitempty"`
	FirstDateStr     *int64  `json:"FirstDateStr,omitempty" xml:"FirstDateStr,omitempty"`
	IntervalPeriod   *int32  `json:"IntervalPeriod,omitempty" xml:"IntervalPeriod,omitempty"`
	LastTaskId       *string `json:"LastTaskId,omitempty" xml:"LastTaskId,omitempty"`
	NextStartTimeStr *int64  `json:"NextStartTimeStr,omitempty" xml:"NextStartTimeStr,omitempty"`
	Param            *string `json:"Param,omitempty" xml:"Param,omitempty"`
	PeriodUnit       *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	TargetEndTime    *int32  `json:"TargetEndTime,omitempty" xml:"TargetEndTime,omitempty"`
	TargetStartTime  *int32  `json:"TargetStartTime,omitempty" xml:"TargetStartTime,omitempty"`
	TaskName         *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskType         *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeCycleTaskListResponseBodyCycleScheduleResponseList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCycleTaskListResponseBodyCycleScheduleResponseList) GoString() string {
	return s.String()
}

func (s *DescribeCycleTaskListResponseBodyCycleScheduleResponseList) SetConfigId(v string) *DescribeCycleTaskListResponseBodyCycleScheduleResponseList {
	s.ConfigId = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyCycleScheduleResponseList) SetEnable(v int32) *DescribeCycleTaskListResponseBodyCycleScheduleResponseList {
	s.Enable = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyCycleScheduleResponseList) SetFirstDateStr(v int64) *DescribeCycleTaskListResponseBodyCycleScheduleResponseList {
	s.FirstDateStr = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyCycleScheduleResponseList) SetIntervalPeriod(v int32) *DescribeCycleTaskListResponseBodyCycleScheduleResponseList {
	s.IntervalPeriod = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyCycleScheduleResponseList) SetLastTaskId(v string) *DescribeCycleTaskListResponseBodyCycleScheduleResponseList {
	s.LastTaskId = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyCycleScheduleResponseList) SetNextStartTimeStr(v int64) *DescribeCycleTaskListResponseBodyCycleScheduleResponseList {
	s.NextStartTimeStr = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyCycleScheduleResponseList) SetParam(v string) *DescribeCycleTaskListResponseBodyCycleScheduleResponseList {
	s.Param = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyCycleScheduleResponseList) SetPeriodUnit(v string) *DescribeCycleTaskListResponseBodyCycleScheduleResponseList {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyCycleScheduleResponseList) SetTargetEndTime(v int32) *DescribeCycleTaskListResponseBodyCycleScheduleResponseList {
	s.TargetEndTime = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyCycleScheduleResponseList) SetTargetStartTime(v int32) *DescribeCycleTaskListResponseBodyCycleScheduleResponseList {
	s.TargetStartTime = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyCycleScheduleResponseList) SetTaskName(v string) *DescribeCycleTaskListResponseBodyCycleScheduleResponseList {
	s.TaskName = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyCycleScheduleResponseList) SetTaskType(v string) *DescribeCycleTaskListResponseBodyCycleScheduleResponseList {
	s.TaskType = &v
	return s
}

type DescribeCycleTaskListResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCycleTaskListResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCycleTaskListResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeCycleTaskListResponseBodyPageInfo) SetCount(v int32) *DescribeCycleTaskListResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeCycleTaskListResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyPageInfo) SetPageSize(v int32) *DescribeCycleTaskListResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeCycleTaskListResponseBodyPageInfo) SetTotalCount(v int32) *DescribeCycleTaskListResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeCycleTaskListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCycleTaskListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCycleTaskListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCycleTaskListResponse) GoString() string {
	return s.String()
}

func (s *DescribeCycleTaskListResponse) SetHeaders(v map[string]*string) *DescribeCycleTaskListResponse {
	s.Headers = v
	return s
}

func (s *DescribeCycleTaskListResponse) SetStatusCode(v int32) *DescribeCycleTaskListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCycleTaskListResponse) SetBody(v *DescribeCycleTaskListResponseBody) *DescribeCycleTaskListResponse {
	s.Body = v
	return s
}

type DescribeDingTalkRequest struct {
	// The number of the page to return.Default value: 1.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries to return on each page.Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The name of the notification.
	RuleActionName *string `json:"RuleActionName,omitempty" xml:"RuleActionName,omitempty"`
}

func (s DescribeDingTalkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDingTalkRequest) GoString() string {
	return s.String()
}

func (s *DescribeDingTalkRequest) SetCurrentPage(v int32) *DescribeDingTalkRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeDingTalkRequest) SetPageSize(v int32) *DescribeDingTalkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDingTalkRequest) SetRuleActionName(v string) *DescribeDingTalkRequest {
	s.RuleActionName = &v
	return s
}

type DescribeDingTalkResponseBody struct {
	// An array that consists of details of notifications.
	ActionList []*DescribeDingTalkResponseBodyActionList `json:"ActionList,omitempty" xml:"ActionList,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *DescribeDingTalkResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDingTalkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDingTalkResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDingTalkResponseBody) SetActionList(v []*DescribeDingTalkResponseBodyActionList) *DescribeDingTalkResponseBody {
	s.ActionList = v
	return s
}

func (s *DescribeDingTalkResponseBody) SetPageInfo(v *DescribeDingTalkResponseBodyPageInfo) *DescribeDingTalkResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeDingTalkResponseBody) SetRequestId(v string) *DescribeDingTalkResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDingTalkResponseBodyActionList struct {
	// The name of the notification.
	ActionName *string `json:"ActionName,omitempty" xml:"ActionName,omitempty"`
	// The UID of the user.
	AliUid *int64 `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	// The list of notification settings.
	ConfigList *string `json:"ConfigList,omitempty" xml:"ConfigList,omitempty"`
	// The language of the content within notifications. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	DingTalkLang *string `json:"DingTalkLang,omitempty" xml:"DingTalkLang,omitempty"`
	// The creation time. unit:millisecond.
	GmtCreate *int64 `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The modification time.
	GmtModified *int64 `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// The group IDs.
	GroupIdList *string `json:"GroupIdList,omitempty" xml:"GroupIdList,omitempty"`
	// The ID of the notification.
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The interval at which the notifications are sent.unit:minute.
	IntervalTime *int32 `json:"IntervalTime,omitempty" xml:"IntervalTime,omitempty"`
	// The status of the notification. Valid values:
	//
	// *   **0**: disabled
	// *   **1**: enabled
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The parameters of the notification.
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DescribeDingTalkResponseBodyActionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDingTalkResponseBodyActionList) GoString() string {
	return s.String()
}

func (s *DescribeDingTalkResponseBodyActionList) SetActionName(v string) *DescribeDingTalkResponseBodyActionList {
	s.ActionName = &v
	return s
}

func (s *DescribeDingTalkResponseBodyActionList) SetAliUid(v int64) *DescribeDingTalkResponseBodyActionList {
	s.AliUid = &v
	return s
}

func (s *DescribeDingTalkResponseBodyActionList) SetConfigList(v string) *DescribeDingTalkResponseBodyActionList {
	s.ConfigList = &v
	return s
}

func (s *DescribeDingTalkResponseBodyActionList) SetDingTalkLang(v string) *DescribeDingTalkResponseBodyActionList {
	s.DingTalkLang = &v
	return s
}

func (s *DescribeDingTalkResponseBodyActionList) SetGmtCreate(v int64) *DescribeDingTalkResponseBodyActionList {
	s.GmtCreate = &v
	return s
}

func (s *DescribeDingTalkResponseBodyActionList) SetGmtModified(v int64) *DescribeDingTalkResponseBodyActionList {
	s.GmtModified = &v
	return s
}

func (s *DescribeDingTalkResponseBodyActionList) SetGroupIdList(v string) *DescribeDingTalkResponseBodyActionList {
	s.GroupIdList = &v
	return s
}

func (s *DescribeDingTalkResponseBodyActionList) SetId(v int32) *DescribeDingTalkResponseBodyActionList {
	s.Id = &v
	return s
}

func (s *DescribeDingTalkResponseBodyActionList) SetIntervalTime(v int32) *DescribeDingTalkResponseBodyActionList {
	s.IntervalTime = &v
	return s
}

func (s *DescribeDingTalkResponseBodyActionList) SetStatus(v int32) *DescribeDingTalkResponseBodyActionList {
	s.Status = &v
	return s
}

func (s *DescribeDingTalkResponseBodyActionList) SetUrl(v string) *DescribeDingTalkResponseBodyActionList {
	s.Url = &v
	return s
}

type DescribeDingTalkResponseBodyPageInfo struct {
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of messages.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDingTalkResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDingTalkResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeDingTalkResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeDingTalkResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeDingTalkResponseBodyPageInfo) SetPageSize(v int32) *DescribeDingTalkResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeDingTalkResponseBodyPageInfo) SetTotalCount(v int32) *DescribeDingTalkResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeDingTalkResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDingTalkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDingTalkResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDingTalkResponse) GoString() string {
	return s.String()
}

func (s *DescribeDingTalkResponse) SetHeaders(v map[string]*string) *DescribeDingTalkResponse {
	s.Headers = v
	return s
}

func (s *DescribeDingTalkResponse) SetStatusCode(v int32) *DescribeDingTalkResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDingTalkResponse) SetBody(v *DescribeDingTalkResponseBody) *DescribeDingTalkResponse {
	s.Body = v
	return s
}

type DescribeDomainCountRequest struct {
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeDomainCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeDomainCountRequest) SetSourceIp(v string) *DescribeDomainCountRequest {
	s.SourceIp = &v
	return s
}

type DescribeDomainCountResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The number of root domains.
	RootDomainsCount *int32 `json:"RootDomainsCount,omitempty" xml:"RootDomainsCount,omitempty"`
	// The number of subdomains.
	SubDomainsCount *int32 `json:"SubDomainsCount,omitempty" xml:"SubDomainsCount,omitempty"`
	// The total number of entries returned.
	TotalDomainsCount *int32 `json:"TotalDomainsCount,omitempty" xml:"TotalDomainsCount,omitempty"`
}

func (s DescribeDomainCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDomainCountResponseBody) SetRequestId(v string) *DescribeDomainCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDomainCountResponseBody) SetRootDomainsCount(v int32) *DescribeDomainCountResponseBody {
	s.RootDomainsCount = &v
	return s
}

func (s *DescribeDomainCountResponseBody) SetSubDomainsCount(v int32) *DescribeDomainCountResponseBody {
	s.SubDomainsCount = &v
	return s
}

func (s *DescribeDomainCountResponseBody) SetTotalDomainsCount(v int32) *DescribeDomainCountResponseBody {
	s.TotalDomainsCount = &v
	return s
}

type DescribeDomainCountResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDomainCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDomainCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeDomainCountResponse) SetHeaders(v map[string]*string) *DescribeDomainCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeDomainCountResponse) SetStatusCode(v int32) *DescribeDomainCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDomainCountResponse) SetBody(v *DescribeDomainCountResponseBody) *DescribeDomainCountResponse {
	s.Body = v
	return s
}

type DescribeDomainDetailRequest struct {
	// The domain name or the name of website that you want to query.
	//
	// >  Fuzzy match is not supported. You must enter a complete domain name or a website.
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeDomainDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeDomainDetailRequest) SetDomainName(v string) *DescribeDomainDetailRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeDomainDetailRequest) SetSourceIp(v string) *DescribeDomainDetailRequest {
	s.SourceIp = &v
	return s
}

type DescribeDomainDetailResponseBody struct {
	// The total number of alerts in your website assets.
	AlarmCount *int32 `json:"AlarmCount,omitempty" xml:"AlarmCount,omitempty"`
	// The domain name.
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// An array that consists of the details about the domain asset.
	DomainDetailItems []*DescribeDomainDetailResponseBodyDomainDetailItems `json:"DomainDetailItems,omitempty" xml:"DomainDetailItems,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The name of the root domain that corresponds to the domain.
	RootDomain *string `json:"RootDomain,omitempty" xml:"RootDomain,omitempty"`
	// The total number of vulnerabilities in your website assets.
	VulCount *int32 `json:"VulCount,omitempty" xml:"VulCount,omitempty"`
}

func (s DescribeDomainDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDomainDetailResponseBody) SetAlarmCount(v int32) *DescribeDomainDetailResponseBody {
	s.AlarmCount = &v
	return s
}

func (s *DescribeDomainDetailResponseBody) SetDomain(v string) *DescribeDomainDetailResponseBody {
	s.Domain = &v
	return s
}

func (s *DescribeDomainDetailResponseBody) SetDomainDetailItems(v []*DescribeDomainDetailResponseBodyDomainDetailItems) *DescribeDomainDetailResponseBody {
	s.DomainDetailItems = v
	return s
}

func (s *DescribeDomainDetailResponseBody) SetRequestId(v string) *DescribeDomainDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDomainDetailResponseBody) SetRootDomain(v string) *DescribeDomainDetailResponseBody {
	s.RootDomain = &v
	return s
}

func (s *DescribeDomainDetailResponseBody) SetVulCount(v int32) *DescribeDomainDetailResponseBody {
	s.VulCount = &v
	return s
}

type DescribeDomainDetailResponseBodyDomainDetailItems struct {
	// The type of the domain asset. Valid values:
	//
	// *   **0**: an Elastic Compute Service (ECS) instance
	// *   **1**: a Server Load Balancer (SLB) instance
	// *   **2**: a Network Address Translation (NAT) gateway
	// *   **3**: an ApsaraDB RDS instance
	// *   **4**: an ApsaraDB for MongoDB instance
	AssetType *string `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
	// The instance ID of the asset.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the asset.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the asset.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the asset.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The instance UUID of the domain asset.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeDomainDetailResponseBodyDomainDetailItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainDetailResponseBodyDomainDetailItems) GoString() string {
	return s.String()
}

func (s *DescribeDomainDetailResponseBodyDomainDetailItems) SetAssetType(v string) *DescribeDomainDetailResponseBodyDomainDetailItems {
	s.AssetType = &v
	return s
}

func (s *DescribeDomainDetailResponseBodyDomainDetailItems) SetInstanceId(v string) *DescribeDomainDetailResponseBodyDomainDetailItems {
	s.InstanceId = &v
	return s
}

func (s *DescribeDomainDetailResponseBodyDomainDetailItems) SetInstanceName(v string) *DescribeDomainDetailResponseBodyDomainDetailItems {
	s.InstanceName = &v
	return s
}

func (s *DescribeDomainDetailResponseBodyDomainDetailItems) SetInternetIp(v string) *DescribeDomainDetailResponseBodyDomainDetailItems {
	s.InternetIp = &v
	return s
}

func (s *DescribeDomainDetailResponseBodyDomainDetailItems) SetIntranetIp(v string) *DescribeDomainDetailResponseBodyDomainDetailItems {
	s.IntranetIp = &v
	return s
}

func (s *DescribeDomainDetailResponseBodyDomainDetailItems) SetUuid(v string) *DescribeDomainDetailResponseBodyDomainDetailItems {
	s.Uuid = &v
	return s
}

type DescribeDomainDetailResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDomainDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDomainDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeDomainDetailResponse) SetHeaders(v map[string]*string) *DescribeDomainDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeDomainDetailResponse) SetStatusCode(v int32) *DescribeDomainDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDomainDetailResponse) SetBody(v *DescribeDomainDetailResponseBody) *DescribeDomainDetailResponse {
	s.Body = v
	return s
}

type DescribeDomainListRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The type of the domain name that you want to query. Valid values:
	//
	// *   **root**: root domain name
	// *   **sub**: subdomain name
	DomainType *string `json:"DomainType,omitempty" xml:"DomainType,omitempty"`
	// The keyword that is used to query domain names. Fuzzy match is supported.
	FuzzyDomain *string `json:"FuzzyDomain,omitempty" xml:"FuzzyDomain,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeDomainListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDomainListRequest) SetCurrentPage(v int32) *DescribeDomainListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeDomainListRequest) SetDomainType(v string) *DescribeDomainListRequest {
	s.DomainType = &v
	return s
}

func (s *DescribeDomainListRequest) SetFuzzyDomain(v string) *DescribeDomainListRequest {
	s.FuzzyDomain = &v
	return s
}

func (s *DescribeDomainListRequest) SetPageSize(v int32) *DescribeDomainListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDomainListRequest) SetSourceIp(v string) *DescribeDomainListRequest {
	s.SourceIp = &v
	return s
}

type DescribeDomainListResponseBody struct {
	// An array that consists of the information about domain names.
	DomainListResponseList []*DescribeDomainListResponseBodyDomainListResponseList `json:"DomainListResponseList,omitempty" xml:"DomainListResponseList,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *DescribeDomainListResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDomainListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDomainListResponseBody) SetDomainListResponseList(v []*DescribeDomainListResponseBodyDomainListResponseList) *DescribeDomainListResponseBody {
	s.DomainListResponseList = v
	return s
}

func (s *DescribeDomainListResponseBody) SetPageInfo(v *DescribeDomainListResponseBodyPageInfo) *DescribeDomainListResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeDomainListResponseBody) SetRequestId(v string) *DescribeDomainListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDomainListResponseBodyDomainListResponseList struct {
	// The name of the domain or website.
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// The IP addresses of the domain name.
	IpList *string `json:"IpList,omitempty" xml:"IpList,omitempty"`
}

func (s DescribeDomainListResponseBodyDomainListResponseList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainListResponseBodyDomainListResponseList) GoString() string {
	return s.String()
}

func (s *DescribeDomainListResponseBodyDomainListResponseList) SetDomain(v string) *DescribeDomainListResponseBodyDomainListResponseList {
	s.Domain = &v
	return s
}

func (s *DescribeDomainListResponseBodyDomainListResponseList) SetIpList(v string) *DescribeDomainListResponseBodyDomainListResponseList {
	s.IpList = &v
	return s
}

type DescribeDomainListResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDomainListResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainListResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeDomainListResponseBodyPageInfo) SetCount(v int32) *DescribeDomainListResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeDomainListResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeDomainListResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeDomainListResponseBodyPageInfo) SetPageSize(v int32) *DescribeDomainListResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeDomainListResponseBodyPageInfo) SetTotalCount(v int32) *DescribeDomainListResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeDomainListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDomainListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDomainListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDomainListResponse) SetHeaders(v map[string]*string) *DescribeDomainListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDomainListResponse) SetStatusCode(v int32) *DescribeDomainListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDomainListResponse) SetBody(v *DescribeDomainListResponseBody) *DescribeDomainListResponse {
	s.Body = v
	return s
}

type DescribeEmgUserAgreementResponseBody struct {
	Auth      *bool   `json:"Auth,omitempty" xml:"Auth,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEmgUserAgreementResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEmgUserAgreementResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEmgUserAgreementResponseBody) SetAuth(v bool) *DescribeEmgUserAgreementResponseBody {
	s.Auth = &v
	return s
}

func (s *DescribeEmgUserAgreementResponseBody) SetRequestId(v string) *DescribeEmgUserAgreementResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEmgUserAgreementResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEmgUserAgreementResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEmgUserAgreementResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEmgUserAgreementResponse) GoString() string {
	return s.String()
}

func (s *DescribeEmgUserAgreementResponse) SetHeaders(v map[string]*string) *DescribeEmgUserAgreementResponse {
	s.Headers = v
	return s
}

func (s *DescribeEmgUserAgreementResponse) SetStatusCode(v int32) *DescribeEmgUserAgreementResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEmgUserAgreementResponse) SetBody(v *DescribeEmgUserAgreementResponseBody) *DescribeEmgUserAgreementResponse {
	s.Body = v
	return s
}

type DescribeEmgVulItemRequest struct {
	// The check method. Valid values:
	//
	// *   **0**: proof of concept (POC) verification
	// *   **1**: version comparison
	CheckType *int32 `json:"CheckType,omitempty" xml:"CheckType,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Specifies whether the vulnerability poses risks.\
	// If you do not specify this parameter, all vulnerabilities are queried regardless of whether the vulnerabilities pose risks. Valid values:
	//
	// *   **y**: yes
	// *   **n**: no
	RiskStatus *string `json:"RiskStatus,omitempty" xml:"RiskStatus,omitempty"`
	// The method that is used to detect the vulnerability.\
	// If you do not specify this parameter, all vulnerabilities are queried regardless of which method is used. Valid values:
	//
	// *   **python**: The Version method is used. Security Center checks the software versions of your server to check whether disclosed vulnerabilities exist on your server.
	// *   **scan**: The Network Scan method is used. Security Center analyzes the access traffic to your server over the Internet to check whether vulnerabilities exist on your server.
	ScanType *string `json:"ScanType,omitempty" xml:"ScanType,omitempty"`
	// The name of the urgent vulnerability.
	VulName *string `json:"VulName,omitempty" xml:"VulName,omitempty"`
}

func (s DescribeEmgVulItemRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEmgVulItemRequest) GoString() string {
	return s.String()
}

func (s *DescribeEmgVulItemRequest) SetCheckType(v int32) *DescribeEmgVulItemRequest {
	s.CheckType = &v
	return s
}

func (s *DescribeEmgVulItemRequest) SetCurrentPage(v int32) *DescribeEmgVulItemRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeEmgVulItemRequest) SetLang(v string) *DescribeEmgVulItemRequest {
	s.Lang = &v
	return s
}

func (s *DescribeEmgVulItemRequest) SetPageSize(v int32) *DescribeEmgVulItemRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEmgVulItemRequest) SetRiskStatus(v string) *DescribeEmgVulItemRequest {
	s.RiskStatus = &v
	return s
}

func (s *DescribeEmgVulItemRequest) SetScanType(v string) *DescribeEmgVulItemRequest {
	s.ScanType = &v
	return s
}

func (s *DescribeEmgVulItemRequest) SetVulName(v string) *DescribeEmgVulItemRequest {
	s.VulName = &v
	return s
}

type DescribeEmgVulItemResponseBody struct {
	// The page number of the returned page. Pages start from page **1**. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// An array that consists of the urgent vulnerabilities returned.
	GroupedVulItems []*DescribeEmgVulItemResponseBodyGroupedVulItems `json:"GroupedVulItems,omitempty" xml:"GroupedVulItems,omitempty" type:"Repeated"`
	// The number of entries returned per page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of the urgent vulnerabilities returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeEmgVulItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEmgVulItemResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEmgVulItemResponseBody) SetCurrentPage(v int32) *DescribeEmgVulItemResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeEmgVulItemResponseBody) SetGroupedVulItems(v []*DescribeEmgVulItemResponseBodyGroupedVulItems) *DescribeEmgVulItemResponseBody {
	s.GroupedVulItems = v
	return s
}

func (s *DescribeEmgVulItemResponseBody) SetPageSize(v int32) *DescribeEmgVulItemResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEmgVulItemResponseBody) SetRequestId(v string) *DescribeEmgVulItemResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEmgVulItemResponseBody) SetTotalCount(v int32) *DescribeEmgVulItemResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeEmgVulItemResponseBodyGroupedVulItems struct {
	// The name of the urgent vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The check method.
	CheckType *int32 `json:"CheckType,omitempty" xml:"CheckType,omitempty"`
	// The timestamp when the urgent vulnerability was last detected. Unit: milliseconds.
	GmtLastCheck *int64 `json:"GmtLastCheck,omitempty" xml:"GmtLastCheck,omitempty"`
	// The timestamp when the vulnerability was disclosed. Unit: milliseconds.
	GmtPublish *int64 `json:"GmtPublish,omitempty" xml:"GmtPublish,omitempty"`
	// The name of the detection rule.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of unhandled urgent vulnerabilities.
	PendingCount *int32 `json:"PendingCount,omitempty" xml:"PendingCount,omitempty"`
	// The progress of the urgent vulnerability detection task. Valid values: 0 to 100.
	//
	// >  This parameter is returned only when an urgent vulnerability is being detected.
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The detection status of the urgent vulnerability. Valid values:
	//
	// *   **10**: The urgent vulnerability is not detected.
	// *   **20**: The urgent vulnerability is being detected.
	// *   **30**: The urgent vulnerability detection is complete.
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The method that is used to detect the urgent vulnerability. Valid values:
	//
	// *   **python**: The Version method is used. Security Center checks the software versions of your server to check whether disclosed vulnerabilities exist on your server.
	// *   **scan**: The Network Scan method is used. Security Center analyzes the access traffic to your server over the Internet to check whether vulnerabilities exist on your server.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeEmgVulItemResponseBodyGroupedVulItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeEmgVulItemResponseBodyGroupedVulItems) GoString() string {
	return s.String()
}

func (s *DescribeEmgVulItemResponseBodyGroupedVulItems) SetAliasName(v string) *DescribeEmgVulItemResponseBodyGroupedVulItems {
	s.AliasName = &v
	return s
}

func (s *DescribeEmgVulItemResponseBodyGroupedVulItems) SetCheckType(v int32) *DescribeEmgVulItemResponseBodyGroupedVulItems {
	s.CheckType = &v
	return s
}

func (s *DescribeEmgVulItemResponseBodyGroupedVulItems) SetGmtLastCheck(v int64) *DescribeEmgVulItemResponseBodyGroupedVulItems {
	s.GmtLastCheck = &v
	return s
}

func (s *DescribeEmgVulItemResponseBodyGroupedVulItems) SetGmtPublish(v int64) *DescribeEmgVulItemResponseBodyGroupedVulItems {
	s.GmtPublish = &v
	return s
}

func (s *DescribeEmgVulItemResponseBodyGroupedVulItems) SetName(v string) *DescribeEmgVulItemResponseBodyGroupedVulItems {
	s.Name = &v
	return s
}

func (s *DescribeEmgVulItemResponseBodyGroupedVulItems) SetPendingCount(v int32) *DescribeEmgVulItemResponseBodyGroupedVulItems {
	s.PendingCount = &v
	return s
}

func (s *DescribeEmgVulItemResponseBodyGroupedVulItems) SetProgress(v int32) *DescribeEmgVulItemResponseBodyGroupedVulItems {
	s.Progress = &v
	return s
}

func (s *DescribeEmgVulItemResponseBodyGroupedVulItems) SetStatus(v int32) *DescribeEmgVulItemResponseBodyGroupedVulItems {
	s.Status = &v
	return s
}

func (s *DescribeEmgVulItemResponseBodyGroupedVulItems) SetType(v string) *DescribeEmgVulItemResponseBodyGroupedVulItems {
	s.Type = &v
	return s
}

type DescribeEmgVulItemResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEmgVulItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEmgVulItemResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEmgVulItemResponse) GoString() string {
	return s.String()
}

func (s *DescribeEmgVulItemResponse) SetHeaders(v map[string]*string) *DescribeEmgVulItemResponse {
	s.Headers = v
	return s
}

func (s *DescribeEmgVulItemResponse) SetStatusCode(v int32) *DescribeEmgVulItemResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEmgVulItemResponse) SetBody(v *DescribeEmgVulItemResponseBody) *DescribeEmgVulItemResponse {
	s.Body = v
	return s
}

type DescribeEventLevelCountRequest struct {
	ClusterId           *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ContainerFieldName  *string `json:"ContainerFieldName,omitempty" xml:"ContainerFieldName,omitempty"`
	ContainerFieldValue *string `json:"ContainerFieldValue,omitempty" xml:"ContainerFieldValue,omitempty"`
	ContainerIds        *string `json:"ContainerIds,omitempty" xml:"ContainerIds,omitempty"`
	From                *string `json:"From,omitempty" xml:"From,omitempty"`
	TargetType          *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s DescribeEventLevelCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventLevelCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventLevelCountRequest) SetClusterId(v string) *DescribeEventLevelCountRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeEventLevelCountRequest) SetContainerFieldName(v string) *DescribeEventLevelCountRequest {
	s.ContainerFieldName = &v
	return s
}

func (s *DescribeEventLevelCountRequest) SetContainerFieldValue(v string) *DescribeEventLevelCountRequest {
	s.ContainerFieldValue = &v
	return s
}

func (s *DescribeEventLevelCountRequest) SetContainerIds(v string) *DescribeEventLevelCountRequest {
	s.ContainerIds = &v
	return s
}

func (s *DescribeEventLevelCountRequest) SetFrom(v string) *DescribeEventLevelCountRequest {
	s.From = &v
	return s
}

func (s *DescribeEventLevelCountRequest) SetTargetType(v string) *DescribeEventLevelCountRequest {
	s.TargetType = &v
	return s
}

type DescribeEventLevelCountResponseBody struct {
	Code        *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	EventLevels *DescribeEventLevelCountResponseBodyEventLevels `json:"EventLevels,omitempty" xml:"EventLevels,omitempty" type:"Struct"`
	Message     *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId   *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEventLevelCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventLevelCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventLevelCountResponseBody) SetCode(v string) *DescribeEventLevelCountResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEventLevelCountResponseBody) SetEventLevels(v *DescribeEventLevelCountResponseBodyEventLevels) *DescribeEventLevelCountResponseBody {
	s.EventLevels = v
	return s
}

func (s *DescribeEventLevelCountResponseBody) SetMessage(v string) *DescribeEventLevelCountResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEventLevelCountResponseBody) SetRequestId(v string) *DescribeEventLevelCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventLevelCountResponseBody) SetSuccess(v bool) *DescribeEventLevelCountResponseBody {
	s.Success = &v
	return s
}

type DescribeEventLevelCountResponseBodyEventLevels struct {
	Remind     *int32 `json:"Remind,omitempty" xml:"Remind,omitempty"`
	Serious    *int32 `json:"Serious,omitempty" xml:"Serious,omitempty"`
	Suspicious *int32 `json:"Suspicious,omitempty" xml:"Suspicious,omitempty"`
}

func (s DescribeEventLevelCountResponseBodyEventLevels) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventLevelCountResponseBodyEventLevels) GoString() string {
	return s.String()
}

func (s *DescribeEventLevelCountResponseBodyEventLevels) SetRemind(v int32) *DescribeEventLevelCountResponseBodyEventLevels {
	s.Remind = &v
	return s
}

func (s *DescribeEventLevelCountResponseBodyEventLevels) SetSerious(v int32) *DescribeEventLevelCountResponseBodyEventLevels {
	s.Serious = &v
	return s
}

func (s *DescribeEventLevelCountResponseBodyEventLevels) SetSuspicious(v int32) *DescribeEventLevelCountResponseBodyEventLevels {
	s.Suspicious = &v
	return s
}

type DescribeEventLevelCountResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEventLevelCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEventLevelCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventLevelCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventLevelCountResponse) SetHeaders(v map[string]*string) *DescribeEventLevelCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventLevelCountResponse) SetStatusCode(v int32) *DescribeEventLevelCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventLevelCountResponse) SetBody(v *DescribeEventLevelCountResponseBody) *DescribeEventLevelCountResponse {
	s.Body = v
	return s
}

type DescribeEventOnStageRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s DescribeEventOnStageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventOnStageRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventOnStageRequest) SetLang(v string) *DescribeEventOnStageRequest {
	s.Lang = &v
	return s
}

type DescribeEventOnStageResponseBody struct {
	RequestId                  *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecurityEventStageResponse *DescribeEventOnStageResponseBodySecurityEventStageResponse `json:"SecurityEventStageResponse,omitempty" xml:"SecurityEventStageResponse,omitempty" type:"Struct"`
}

func (s DescribeEventOnStageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventOnStageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventOnStageResponseBody) SetRequestId(v string) *DescribeEventOnStageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventOnStageResponseBody) SetSecurityEventStageResponse(v *DescribeEventOnStageResponseBodySecurityEventStageResponse) *DescribeEventOnStageResponseBody {
	s.SecurityEventStageResponse = v
	return s
}

type DescribeEventOnStageResponseBodySecurityEventStageResponse struct {
	SecurityEventOnStag map[string]interface{} `json:"SecurityEventOnStag,omitempty" xml:"SecurityEventOnStag,omitempty"`
}

func (s DescribeEventOnStageResponseBodySecurityEventStageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventOnStageResponseBodySecurityEventStageResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventOnStageResponseBodySecurityEventStageResponse) SetSecurityEventOnStag(v map[string]interface{}) *DescribeEventOnStageResponseBodySecurityEventStageResponse {
	s.SecurityEventOnStag = v
	return s
}

type DescribeEventOnStageResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEventOnStageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEventOnStageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventOnStageResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventOnStageResponse) SetHeaders(v map[string]*string) *DescribeEventOnStageResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventOnStageResponse) SetStatusCode(v int32) *DescribeEventOnStageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventOnStageResponse) SetBody(v *DescribeEventOnStageResponseBody) *DescribeEventOnStageResponse {
	s.Body = v
	return s
}

type DescribeExcludeSystemPathRequest struct {
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeExcludeSystemPathRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExcludeSystemPathRequest) GoString() string {
	return s.String()
}

func (s *DescribeExcludeSystemPathRequest) SetCurrentPage(v int32) *DescribeExcludeSystemPathRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeExcludeSystemPathRequest) SetPageSize(v int32) *DescribeExcludeSystemPathRequest {
	s.PageSize = &v
	return s
}

type DescribeExcludeSystemPathResponseBody struct {
	ExcludePaths []*DescribeExcludeSystemPathResponseBodyExcludePaths `json:"ExcludePaths,omitempty" xml:"ExcludePaths,omitempty" type:"Repeated"`
	PageInfo     *DescribeExcludeSystemPathResponseBodyPageInfo       `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId    *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeExcludeSystemPathResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExcludeSystemPathResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExcludeSystemPathResponseBody) SetExcludePaths(v []*DescribeExcludeSystemPathResponseBodyExcludePaths) *DescribeExcludeSystemPathResponseBody {
	s.ExcludePaths = v
	return s
}

func (s *DescribeExcludeSystemPathResponseBody) SetPageInfo(v *DescribeExcludeSystemPathResponseBodyPageInfo) *DescribeExcludeSystemPathResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeExcludeSystemPathResponseBody) SetRequestId(v string) *DescribeExcludeSystemPathResponseBody {
	s.RequestId = &v
	return s
}

type DescribeExcludeSystemPathResponseBodyExcludePaths struct {
	Os   *string `json:"Os,omitempty" xml:"Os,omitempty"`
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DescribeExcludeSystemPathResponseBodyExcludePaths) String() string {
	return tea.Prettify(s)
}

func (s DescribeExcludeSystemPathResponseBodyExcludePaths) GoString() string {
	return s.String()
}

func (s *DescribeExcludeSystemPathResponseBodyExcludePaths) SetOs(v string) *DescribeExcludeSystemPathResponseBodyExcludePaths {
	s.Os = &v
	return s
}

func (s *DescribeExcludeSystemPathResponseBodyExcludePaths) SetPath(v string) *DescribeExcludeSystemPathResponseBodyExcludePaths {
	s.Path = &v
	return s
}

type DescribeExcludeSystemPathResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeExcludeSystemPathResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeExcludeSystemPathResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeExcludeSystemPathResponseBodyPageInfo) SetCount(v int32) *DescribeExcludeSystemPathResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeExcludeSystemPathResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeExcludeSystemPathResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeExcludeSystemPathResponseBodyPageInfo) SetPageSize(v int32) *DescribeExcludeSystemPathResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeExcludeSystemPathResponseBodyPageInfo) SetTotalCount(v int32) *DescribeExcludeSystemPathResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeExcludeSystemPathResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeExcludeSystemPathResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeExcludeSystemPathResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExcludeSystemPathResponse) GoString() string {
	return s.String()
}

func (s *DescribeExcludeSystemPathResponse) SetHeaders(v map[string]*string) *DescribeExcludeSystemPathResponse {
	s.Headers = v
	return s
}

func (s *DescribeExcludeSystemPathResponse) SetStatusCode(v int32) *DescribeExcludeSystemPathResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExcludeSystemPathResponse) SetBody(v *DescribeExcludeSystemPathResponseBody) *DescribeExcludeSystemPathResponse {
	s.Body = v
	return s
}

type DescribeExportInfoRequest struct {
	// The ID of the export task.
	ExportId *int64 `json:"ExportId,omitempty" xml:"ExportId,omitempty"`
}

func (s DescribeExportInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeExportInfoRequest) SetExportId(v int64) *DescribeExportInfoRequest {
	s.ExportId = &v
	return s
}

type DescribeExportInfoResponseBody struct {
	// The number of exported entries.
	CurrentCount *int32 `json:"CurrentCount,omitempty" xml:"CurrentCount,omitempty"`
	// The status of the export task.
	//
	// Valid values:
	//
	// *   **init**: The task is being initialized.
	// *   **exporting**: The task is in progress.
	// *   **success**: The task is complete.
	ExportStatus *string `json:"ExportStatus,omitempty" xml:"ExportStatus,omitempty"`
	// The name of the exported Excel file.
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The ID of the export task.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The URL at which you can download the exported Excel file.
	Link *string `json:"Link,omitempty" xml:"Link,omitempty"`
	// The message that shows the task result.
	//
	// The value is fixed as success, which indicates that the export task is complete.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The progress percentage of the export task.
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries in the exported Excel file.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeExportInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExportInfoResponseBody) SetCurrentCount(v int32) *DescribeExportInfoResponseBody {
	s.CurrentCount = &v
	return s
}

func (s *DescribeExportInfoResponseBody) SetExportStatus(v string) *DescribeExportInfoResponseBody {
	s.ExportStatus = &v
	return s
}

func (s *DescribeExportInfoResponseBody) SetFileName(v string) *DescribeExportInfoResponseBody {
	s.FileName = &v
	return s
}

func (s *DescribeExportInfoResponseBody) SetId(v int64) *DescribeExportInfoResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeExportInfoResponseBody) SetLink(v string) *DescribeExportInfoResponseBody {
	s.Link = &v
	return s
}

func (s *DescribeExportInfoResponseBody) SetMessage(v string) *DescribeExportInfoResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeExportInfoResponseBody) SetProgress(v int32) *DescribeExportInfoResponseBody {
	s.Progress = &v
	return s
}

func (s *DescribeExportInfoResponseBody) SetRequestId(v string) *DescribeExportInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExportInfoResponseBody) SetTotalCount(v int32) *DescribeExportInfoResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeExportInfoResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeExportInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeExportInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeExportInfoResponse) SetHeaders(v map[string]*string) *DescribeExportInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeExportInfoResponse) SetStatusCode(v int32) *DescribeExportInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExportInfoResponse) SetBody(v *DescribeExportInfoResponseBody) *DescribeExportInfoResponse {
	s.Body = v
	return s
}

type DescribeExposedCheckWarningRequest struct {
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
	Uuids    *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeExposedCheckWarningRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedCheckWarningRequest) GoString() string {
	return s.String()
}

func (s *DescribeExposedCheckWarningRequest) SetLang(v string) *DescribeExposedCheckWarningRequest {
	s.Lang = &v
	return s
}

func (s *DescribeExposedCheckWarningRequest) SetTypeName(v string) *DescribeExposedCheckWarningRequest {
	s.TypeName = &v
	return s
}

func (s *DescribeExposedCheckWarningRequest) SetUuids(v string) *DescribeExposedCheckWarningRequest {
	s.Uuids = &v
	return s
}

type DescribeExposedCheckWarningResponseBody struct {
	Count       *int32                                                `json:"Count,omitempty" xml:"Count,omitempty"`
	RequestId   *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	WarningList []*DescribeExposedCheckWarningResponseBodyWarningList `json:"WarningList,omitempty" xml:"WarningList,omitempty" type:"Repeated"`
}

func (s DescribeExposedCheckWarningResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedCheckWarningResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExposedCheckWarningResponseBody) SetCount(v int32) *DescribeExposedCheckWarningResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeExposedCheckWarningResponseBody) SetRequestId(v string) *DescribeExposedCheckWarningResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExposedCheckWarningResponseBody) SetWarningList(v []*DescribeExposedCheckWarningResponseBodyWarningList) *DescribeExposedCheckWarningResponseBody {
	s.WarningList = v
	return s
}

type DescribeExposedCheckWarningResponseBodyWarningList struct {
	RiskId       *int64  `json:"RiskId,omitempty" xml:"RiskId,omitempty"`
	RiskName     *string `json:"RiskName,omitempty" xml:"RiskName,omitempty"`
	SubTypeAlias *string `json:"SubTypeAlias,omitempty" xml:"SubTypeAlias,omitempty"`
	TypeAlias    *string `json:"TypeAlias,omitempty" xml:"TypeAlias,omitempty"`
	Uuid         *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeExposedCheckWarningResponseBodyWarningList) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedCheckWarningResponseBodyWarningList) GoString() string {
	return s.String()
}

func (s *DescribeExposedCheckWarningResponseBodyWarningList) SetRiskId(v int64) *DescribeExposedCheckWarningResponseBodyWarningList {
	s.RiskId = &v
	return s
}

func (s *DescribeExposedCheckWarningResponseBodyWarningList) SetRiskName(v string) *DescribeExposedCheckWarningResponseBodyWarningList {
	s.RiskName = &v
	return s
}

func (s *DescribeExposedCheckWarningResponseBodyWarningList) SetSubTypeAlias(v string) *DescribeExposedCheckWarningResponseBodyWarningList {
	s.SubTypeAlias = &v
	return s
}

func (s *DescribeExposedCheckWarningResponseBodyWarningList) SetTypeAlias(v string) *DescribeExposedCheckWarningResponseBodyWarningList {
	s.TypeAlias = &v
	return s
}

func (s *DescribeExposedCheckWarningResponseBodyWarningList) SetUuid(v string) *DescribeExposedCheckWarningResponseBodyWarningList {
	s.Uuid = &v
	return s
}

type DescribeExposedCheckWarningResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeExposedCheckWarningResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeExposedCheckWarningResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedCheckWarningResponse) GoString() string {
	return s.String()
}

func (s *DescribeExposedCheckWarningResponse) SetHeaders(v map[string]*string) *DescribeExposedCheckWarningResponse {
	s.Headers = v
	return s
}

func (s *DescribeExposedCheckWarningResponse) SetStatusCode(v int32) *DescribeExposedCheckWarningResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExposedCheckWarningResponse) SetBody(v *DescribeExposedCheckWarningResponseBody) *DescribeExposedCheckWarningResponse {
	s.Body = v
	return s
}

type DescribeExposedInstanceCriteriaRequest struct {
	// The value of the search condition. Fuzzy match is supported.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeExposedInstanceCriteriaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceCriteriaRequest) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceCriteriaRequest) SetValue(v string) *DescribeExposedInstanceCriteriaRequest {
	s.Value = &v
	return s
}

type DescribeExposedInstanceCriteriaResponseBody struct {
	// The search conditions that are used to search for exposed assets.
	CriteriaList []*DescribeExposedInstanceCriteriaResponseBodyCriteriaList `json:"CriteriaList,omitempty" xml:"CriteriaList,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeExposedInstanceCriteriaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceCriteriaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceCriteriaResponseBody) SetCriteriaList(v []*DescribeExposedInstanceCriteriaResponseBodyCriteriaList) *DescribeExposedInstanceCriteriaResponseBody {
	s.CriteriaList = v
	return s
}

func (s *DescribeExposedInstanceCriteriaResponseBody) SetRequestId(v string) *DescribeExposedInstanceCriteriaResponseBody {
	s.RequestId = &v
	return s
}

type DescribeExposedInstanceCriteriaResponseBodyCriteriaList struct {
	// The name of the search condition.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the search condition. Valid values:
	//
	// *   **input**: You must configure the search condition.
	// *   **select**: You must select a search condition from the **Values** list.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the search condition. This parameter is returned only when the value of the **Type** parameter is **select**.
	//
	// >  If the value of the **Type** parameter is **input**, this parameter is empty.
	Values *string `json:"Values,omitempty" xml:"Values,omitempty"`
}

func (s DescribeExposedInstanceCriteriaResponseBodyCriteriaList) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceCriteriaResponseBodyCriteriaList) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceCriteriaResponseBodyCriteriaList) SetName(v string) *DescribeExposedInstanceCriteriaResponseBodyCriteriaList {
	s.Name = &v
	return s
}

func (s *DescribeExposedInstanceCriteriaResponseBodyCriteriaList) SetType(v string) *DescribeExposedInstanceCriteriaResponseBodyCriteriaList {
	s.Type = &v
	return s
}

func (s *DescribeExposedInstanceCriteriaResponseBodyCriteriaList) SetValues(v string) *DescribeExposedInstanceCriteriaResponseBodyCriteriaList {
	s.Values = &v
	return s
}

type DescribeExposedInstanceCriteriaResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeExposedInstanceCriteriaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeExposedInstanceCriteriaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceCriteriaResponse) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceCriteriaResponse) SetHeaders(v map[string]*string) *DescribeExposedInstanceCriteriaResponse {
	s.Headers = v
	return s
}

func (s *DescribeExposedInstanceCriteriaResponse) SetStatusCode(v int32) *DescribeExposedInstanceCriteriaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExposedInstanceCriteriaResponse) SetBody(v *DescribeExposedInstanceCriteriaResponseBody) *DescribeExposedInstanceCriteriaResponse {
	s.Body = v
	return s
}

type DescribeExposedInstanceDetailRequest struct {
	// The UUID of the server that is exposed on the Internet.
	//
	// >  You can call the [DescribeExposedInstanceList](~~DescribeExposedInstanceList~~) operation to query the UUIDs of servers.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeExposedInstanceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceDetailRequest) SetUuid(v string) *DescribeExposedInstanceDetailRequest {
	s.Uuid = &v
	return s
}

type DescribeExposedInstanceDetailResponseBody struct {
	// The exposure details about the server.
	ExposedChains []*DescribeExposedInstanceDetailResponseBodyExposedChains `json:"ExposedChains,omitempty" xml:"ExposedChains,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeExposedInstanceDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceDetailResponseBody) SetExposedChains(v []*DescribeExposedInstanceDetailResponseBodyExposedChains) *DescribeExposedInstanceDetailResponseBody {
	s.ExposedChains = v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBody) SetRequestId(v string) *DescribeExposedInstanceDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribeExposedInstanceDetailResponseBodyExposedChains struct {
	// The information about all vulnerabilities on the server.
	AllVulList []*DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList `json:"AllVulList,omitempty" xml:"AllVulList,omitempty" type:"Repeated"`
	// The server component that is exposed on the Internet.
	ExposureComponent *string `json:"ExposureComponent,omitempty" xml:"ExposureComponent,omitempty"`
	// The public IP address.
	ExposureIp *string `json:"ExposureIp,omitempty" xml:"ExposureIp,omitempty"`
	// The port that is exposed on the Internet.
	ExposurePort *string `json:"ExposurePort,omitempty" xml:"ExposurePort,omitempty"`
	// The resource from which the server is exposed. Valid values:
	//
	// *   **INTERNET_IP**: the public IP address of an Elastic Compute Service (ECS) instance
	// *   **SLB**: the public IP address of a Server Load Balancer (SLB) instance
	// *   **EIP**: an elastic IP address (EIP)
	// *   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature
	ExposureType *string `json:"ExposureType,omitempty" xml:"ExposureType,omitempty"`
	// The ID of the instance to which the resource belongs. The valid values of this parameter vary based on the value of the ExposureType parameter.
	//
	// *   If the value of the ExposureType parameter is **INTERNET_IP**, the value of this parameter is an empty string.
	// *   If the value of the ExposureType parameter is **SLB**, the value of this parameter is the ID of the Internet-facing SLB instance.
	// *   If the value of the ExposureType parameter is **EIP**, the value of this parameter is the ID of the EIP.
	// *   If the value of the ExposureType parameter is **DNAT**, the value of this parameter is the ID of the NAT gateway.
	ExposureTypeId *string `json:"ExposureTypeId,omitempty" xml:"ExposureTypeId,omitempty"`
	// The server group to which the server belongs.
	GroupNo *string `json:"GroupNo,omitempty" xml:"GroupNo,omitempty"`
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The information about the vulnerabilities that are exposed on the Internet and can be exploited by attackers.
	RealVulList []*DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList `json:"RealVulList,omitempty" xml:"RealVulList,omitempty" type:"Repeated"`
	// The region in which the server resides.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeExposedInstanceDetailResponseBodyExposedChains) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceDetailResponseBodyExposedChains) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetAllVulList(v []*DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.AllVulList = v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetExposureComponent(v string) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.ExposureComponent = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetExposureIp(v string) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.ExposureIp = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetExposurePort(v string) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.ExposurePort = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetExposureType(v string) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.ExposureType = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetExposureTypeId(v string) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.ExposureTypeId = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetGroupNo(v string) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.GroupNo = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetInstanceId(v string) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.InstanceId = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetInstanceName(v string) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.InstanceName = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetInternetIp(v string) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.InternetIp = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetIntranetIp(v string) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.IntranetIp = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetRealVulList(v []*DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.RealVulList = v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetRegionId(v string) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.RegionId = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChains) SetUuid(v string) *DescribeExposedInstanceDetailResponseBodyExposedChains {
	s.Uuid = &v
	return s
}

type DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList struct {
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The name of the vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The priority to fix the vulnerability. Valid values:
	//
	// *   **asap**: high
	// *   **later**: medium
	// *   **nntf**: low
	//
	// >  We recommend that you fix the vulnerabilities that have the **high** priority at the earliest opportunity.
	Necessity *string `json:"Necessity,omitempty" xml:"Necessity,omitempty"`
	// The type of the vulnerability. Valid values:
	//
	// *   **cve**: Linux software vulnerabilities
	// *   **sys**: Windows system vulnerabilities
	// *   **cms**: Web-CMS vulnerabilities
	// *   **app**: application vulnerabilities
	// *   **emg**: urgent vulnerabilities
	// *   **sca**: middleware vulnerabilities
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList) SetAliasName(v string) *DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList {
	s.AliasName = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList) SetName(v string) *DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList {
	s.Name = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList) SetNecessity(v string) *DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList {
	s.Necessity = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList) SetType(v string) *DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList {
	s.Type = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList) SetUuid(v string) *DescribeExposedInstanceDetailResponseBodyExposedChainsAllVulList {
	s.Uuid = &v
	return s
}

type DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList struct {
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The name of the vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The priority to fix the vulnerability. Valid values:
	//
	// *   **asap**: high
	// *   **later**: medium
	// *   **nntf**: low
	//
	// >  We recommend that you fix the vulnerabilities that have the **high** priority at the earliest opportunity.
	Necessity *string `json:"Necessity,omitempty" xml:"Necessity,omitempty"`
	// The type of the vulnerability. Valid values:
	//
	// *   **cve**: Linux software vulnerabilities
	// *   **sys**: Windows system vulnerabilities
	// *   **cms**: Web-CMS vulnerabilities
	// *   **app**: application vulnerabilities
	// *   **emg**: urgent vulnerabilities
	// *   **sca**: middleware vulnerabilities
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList) SetAliasName(v string) *DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList {
	s.AliasName = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList) SetName(v string) *DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList {
	s.Name = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList) SetNecessity(v string) *DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList {
	s.Necessity = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList) SetType(v string) *DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList {
	s.Type = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList) SetUuid(v string) *DescribeExposedInstanceDetailResponseBodyExposedChainsRealVulList {
	s.Uuid = &v
	return s
}

type DescribeExposedInstanceDetailResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeExposedInstanceDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeExposedInstanceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceDetailResponse) SetHeaders(v map[string]*string) *DescribeExposedInstanceDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeExposedInstanceDetailResponse) SetStatusCode(v int32) *DescribeExposedInstanceDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExposedInstanceDetailResponse) SetBody(v *DescribeExposedInstanceDetailResponseBody) *DescribeExposedInstanceDetailResponse {
	s.Body = v
	return s
}

type DescribeExposedInstanceListRequest struct {
	// The number of the page to return.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The server component that is exposed on the Internet.
	ExposureComponent *string `json:"ExposureComponent,omitempty" xml:"ExposureComponent,omitempty"`
	// The public IP address of the server.
	ExposureIp *string `json:"ExposureIp,omitempty" xml:"ExposureIp,omitempty"`
	// The port that is exposed on the Internet.
	ExposurePort *string `json:"ExposurePort,omitempty" xml:"ExposurePort,omitempty"`
	// The ID of the server group.
	//
	// > You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of server groups.
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The health status of the Elastic Compute Service (ECS) instance in the scaling group. ECS instances that are not in the Running state are considered unhealthy. Valid values:
	//
	// *   Healthy
	// *   Unhealthy
	//
	// Auto Scaling automatically removes unhealthy ECS instances from the scaling group and then releases the automatically created instances among the unhealthy instances.
	//
	// Unhealthy ECS instances that are manually added to the scaling group are released based on the management mode of the instance lifecycle. If the lifecycle of the ECS instances is not managed by the scaling group, Auto Scaling removes the instances from the scaling group but does not release them. If the lifecycle of the ECS instances is managed by the scaling group, Auto Scaling removes the instances from the scaling group and releases them.
	//
	// >  Make sure that you have sufficient balance within your account. If you have overdue payments in your account, pay-as-you-go and preemptible instances are stopped or released. For information about how the status of ECS instances changes when you have overdue payments in your account, see [Overdue payments](~~170589~~).
	HealthStatus *bool `json:"HealthStatus,omitempty" xml:"HealthStatus,omitempty"`
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// >  We recommend that you do not leave this parameter empty.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Specifies whether the server has vulnerabilities. Valid values:
	//
	// *   **true**: The server has vulnerabilities.
	// *   **false**: The server does not have vulnerabilities.
	VulStatus *bool `json:"VulStatus,omitempty" xml:"VulStatus,omitempty"`
}

func (s DescribeExposedInstanceListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceListRequest) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceListRequest) SetCurrentPage(v int32) *DescribeExposedInstanceListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeExposedInstanceListRequest) SetExposureComponent(v string) *DescribeExposedInstanceListRequest {
	s.ExposureComponent = &v
	return s
}

func (s *DescribeExposedInstanceListRequest) SetExposureIp(v string) *DescribeExposedInstanceListRequest {
	s.ExposureIp = &v
	return s
}

func (s *DescribeExposedInstanceListRequest) SetExposurePort(v string) *DescribeExposedInstanceListRequest {
	s.ExposurePort = &v
	return s
}

func (s *DescribeExposedInstanceListRequest) SetGroupId(v int64) *DescribeExposedInstanceListRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeExposedInstanceListRequest) SetHealthStatus(v bool) *DescribeExposedInstanceListRequest {
	s.HealthStatus = &v
	return s
}

func (s *DescribeExposedInstanceListRequest) SetInstanceId(v string) *DescribeExposedInstanceListRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeExposedInstanceListRequest) SetInstanceName(v string) *DescribeExposedInstanceListRequest {
	s.InstanceName = &v
	return s
}

func (s *DescribeExposedInstanceListRequest) SetPageSize(v int32) *DescribeExposedInstanceListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeExposedInstanceListRequest) SetVulStatus(v bool) *DescribeExposedInstanceListRequest {
	s.VulStatus = &v
	return s
}

type DescribeExposedInstanceListResponseBody struct {
	// An array that consists of the details about the exposed asset.
	ExposedInstances []*DescribeExposedInstanceListResponseBodyExposedInstances `json:"ExposedInstances,omitempty" xml:"ExposedInstances,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *DescribeExposedInstanceListResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeExposedInstanceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceListResponseBody) SetExposedInstances(v []*DescribeExposedInstanceListResponseBodyExposedInstances) *DescribeExposedInstanceListResponseBody {
	s.ExposedInstances = v
	return s
}

func (s *DescribeExposedInstanceListResponseBody) SetPageInfo(v *DescribeExposedInstanceListResponseBodyPageInfo) *DescribeExposedInstanceListResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeExposedInstanceListResponseBody) SetRequestId(v string) *DescribeExposedInstanceListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeExposedInstanceListResponseBodyExposedInstances struct {
	// The number of high-severity vulnerabilities that are exposed on the Internet and can be exploited by attackers.
	AsapVulCount *int32 `json:"AsapVulCount,omitempty" xml:"AsapVulCount,omitempty"`
	// The total number of servers that are exposed on the Internet.
	ExploitHealthCount *int32 `json:"ExploitHealthCount,omitempty" xml:"ExploitHealthCount,omitempty"`
	// The server component that is exposed on the Internet.
	ExposureComponent *string `json:"ExposureComponent,omitempty" xml:"ExposureComponent,omitempty"`
	// The public IP address that is exposed on the Internet.
	ExposureIp *string `json:"ExposureIp,omitempty" xml:"ExposureIp,omitempty"`
	// The port that is exposed on the Internet.
	ExposurePort *string `json:"ExposurePort,omitempty" xml:"ExposurePort,omitempty"`
	// The resource from which the asset is exposed. Valid values:
	//
	// *   **INTERNET_IP**: the public IP address of an ECS instance
	// *   **SLB**: the public IP address of a Server Load Balancer (SLB) instance
	// *   **EIP**: an elastic IP address (EIP)
	// *   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature
	ExposureType *string `json:"ExposureType,omitempty" xml:"ExposureType,omitempty"`
	// The ID of the instance to which the resource belongs. The valid values of this parameter vary based on the ExposureType parameter.
	//
	// *   If the value of the ExposureType parameter is **INTERNET_IP**, this parameter is empty.
	// *   If the value of the ExposureType parameter is **SLB**, the value of this parameter is the ID of the SLB instance.
	// *   If the value of the ExposureType parameter is **EIP**, the value of this parameter is the ID of the EIP.
	// *   If the value of the ExposureType parameter is **DNAT**, the value of this parameter is the ID of the NAT gateway.
	ExposureTypeId *string `json:"ExposureTypeId,omitempty" xml:"ExposureTypeId,omitempty"`
	// The ID of the server group.
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the server group.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The number of medium-severity vulnerabilities that are exposed on the Internet and can be exploited by attackers.
	LaterVulCount *int32 `json:"LaterVulCount,omitempty" xml:"LaterVulCount,omitempty"`
	// The number of low-severity vulnerabilities that are exposed on the Internet and can be exploited by attackers.
	NntfVulCount *int32 `json:"NntfVulCount,omitempty" xml:"NntfVulCount,omitempty"`
	// The ID of the region where the server resides.
	//
	// >  For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The total number of vulnerabilities that are exposed on the Internet and can be exploited by attackers.
	TotalVulCount *int32 `json:"TotalVulCount,omitempty" xml:"TotalVulCount,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeExposedInstanceListResponseBodyExposedInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceListResponseBodyExposedInstances) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetAsapVulCount(v int32) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.AsapVulCount = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetExploitHealthCount(v int32) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.ExploitHealthCount = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetExposureComponent(v string) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.ExposureComponent = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetExposureIp(v string) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.ExposureIp = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetExposurePort(v string) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.ExposurePort = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetExposureType(v string) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.ExposureType = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetExposureTypeId(v string) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.ExposureTypeId = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetGroupId(v int64) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.GroupId = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetGroupName(v string) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.GroupName = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetInstanceId(v string) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetInstanceName(v string) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.InstanceName = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetInternetIp(v string) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.InternetIp = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetIntranetIp(v string) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.IntranetIp = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetLaterVulCount(v int32) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.LaterVulCount = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetNntfVulCount(v int32) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.NntfVulCount = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetRegionId(v string) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.RegionId = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetTotalVulCount(v int32) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.TotalVulCount = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyExposedInstances) SetUuid(v string) *DescribeExposedInstanceListResponseBodyExposedInstances {
	s.Uuid = &v
	return s
}

type DescribeExposedInstanceListResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries about the servers that are exposed on the Internet.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeExposedInstanceListResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceListResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceListResponseBodyPageInfo) SetCount(v int32) *DescribeExposedInstanceListResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeExposedInstanceListResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyPageInfo) SetPageSize(v int32) *DescribeExposedInstanceListResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeExposedInstanceListResponseBodyPageInfo) SetTotalCount(v int32) *DescribeExposedInstanceListResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeExposedInstanceListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeExposedInstanceListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeExposedInstanceListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedInstanceListResponse) GoString() string {
	return s.String()
}

func (s *DescribeExposedInstanceListResponse) SetHeaders(v map[string]*string) *DescribeExposedInstanceListResponse {
	s.Headers = v
	return s
}

func (s *DescribeExposedInstanceListResponse) SetStatusCode(v int32) *DescribeExposedInstanceListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExposedInstanceListResponse) SetBody(v *DescribeExposedInstanceListResponseBody) *DescribeExposedInstanceListResponse {
	s.Body = v
	return s
}

type DescribeExposedStatisticsResponseBody struct {
	// The total number of high-risk vulnerabilities that are exposed on the Internet and can be exploited by attackers.
	ExposedAsapVulCount *int32 `json:"ExposedAsapVulCount,omitempty" xml:"ExposedAsapVulCount,omitempty"`
	// The total number of system components that are exposed on the Internet. The components include OpenSSL and OpenSSH.
	ExposedComponentCount *int32 `json:"ExposedComponentCount,omitempty" xml:"ExposedComponentCount,omitempty"`
	// The total number of servers that are exposed on the Internet.
	ExposedInstanceCount *int32 `json:"ExposedInstanceCount,omitempty" xml:"ExposedInstanceCount,omitempty"`
	// The total number of IP addresses that are exposed on the Internet.
	ExposedIpCount *int32 `json:"ExposedIpCount,omitempty" xml:"ExposedIpCount,omitempty"`
	// The total number of medium-risk vulnerabilities that are exposed on the Internet and can be exploited by attackers.
	ExposedLaterVulCount *int32 `json:"ExposedLaterVulCount,omitempty" xml:"ExposedLaterVulCount,omitempty"`
	// The total number of low-risk vulnerabilities that are exposed on the Internet and can be exploited by attackers.
	ExposedNntfVulCount *int32 `json:"ExposedNntfVulCount,omitempty" xml:"ExposedNntfVulCount,omitempty"`
	// The total number of ports that are exposed on the Internet.
	ExposedPortCount *int32 `json:"ExposedPortCount,omitempty" xml:"ExposedPortCount,omitempty"`
	// The total number of system keys that are detected on your servers and are exposed on the Internet.
	ExposedWeekPasswordMachineCount *int32 `json:"ExposedWeekPasswordMachineCount,omitempty" xml:"ExposedWeekPasswordMachineCount,omitempty"`
	// The total number of gateway assets that are exposed on the Internet. The gateway assets include NAT gateways and Server Load Balancer (SLB) instances.
	GatewayAssetCount *int32 `json:"GatewayAssetCount,omitempty" xml:"GatewayAssetCount,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeExposedStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExposedStatisticsResponseBody) SetExposedAsapVulCount(v int32) *DescribeExposedStatisticsResponseBody {
	s.ExposedAsapVulCount = &v
	return s
}

func (s *DescribeExposedStatisticsResponseBody) SetExposedComponentCount(v int32) *DescribeExposedStatisticsResponseBody {
	s.ExposedComponentCount = &v
	return s
}

func (s *DescribeExposedStatisticsResponseBody) SetExposedInstanceCount(v int32) *DescribeExposedStatisticsResponseBody {
	s.ExposedInstanceCount = &v
	return s
}

func (s *DescribeExposedStatisticsResponseBody) SetExposedIpCount(v int32) *DescribeExposedStatisticsResponseBody {
	s.ExposedIpCount = &v
	return s
}

func (s *DescribeExposedStatisticsResponseBody) SetExposedLaterVulCount(v int32) *DescribeExposedStatisticsResponseBody {
	s.ExposedLaterVulCount = &v
	return s
}

func (s *DescribeExposedStatisticsResponseBody) SetExposedNntfVulCount(v int32) *DescribeExposedStatisticsResponseBody {
	s.ExposedNntfVulCount = &v
	return s
}

func (s *DescribeExposedStatisticsResponseBody) SetExposedPortCount(v int32) *DescribeExposedStatisticsResponseBody {
	s.ExposedPortCount = &v
	return s
}

func (s *DescribeExposedStatisticsResponseBody) SetExposedWeekPasswordMachineCount(v int32) *DescribeExposedStatisticsResponseBody {
	s.ExposedWeekPasswordMachineCount = &v
	return s
}

func (s *DescribeExposedStatisticsResponseBody) SetGatewayAssetCount(v int32) *DescribeExposedStatisticsResponseBody {
	s.GatewayAssetCount = &v
	return s
}

func (s *DescribeExposedStatisticsResponseBody) SetRequestId(v string) *DescribeExposedStatisticsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeExposedStatisticsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeExposedStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeExposedStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeExposedStatisticsResponse) SetHeaders(v map[string]*string) *DescribeExposedStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeExposedStatisticsResponse) SetStatusCode(v int32) *DescribeExposedStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExposedStatisticsResponse) SetBody(v *DescribeExposedStatisticsResponseBody) *DescribeExposedStatisticsResponse {
	s.Body = v
	return s
}

type DescribeExposedStatisticsDetailRequest struct {
	// The number of the page to return.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// >  We recommend that you do not leave this parameter empty.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The type of the exposed asset. Valid values:
	//
	// *   **exposureType**: gateway assets
	// *   **exposurePort**: ports
	// *   **exposureComponent**: system components
	// *   **exposureIp**: IP addresses
	StatisticsType *string `json:"StatisticsType,omitempty" xml:"StatisticsType,omitempty"`
	// The type of the gateway asset. This parameter is required when the **StatisticsType** parameter is set to **exposureType**. Valid values:
	//
	// *   **SLB**: the public IP address of a Server Load Balancer (SLB) instance
	// *   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature
	StatisticsTypeGatewayType *string `json:"StatisticsTypeGatewayType,omitempty" xml:"StatisticsTypeGatewayType,omitempty"`
	// The ID of the gateway asset. This parameter is required when the **StatisticsType** parameter is set to **exposureType**.
	StatisticsTypeInstanceValue *string `json:"StatisticsTypeInstanceValue,omitempty" xml:"StatisticsTypeInstanceValue,omitempty"`
}

func (s DescribeExposedStatisticsDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedStatisticsDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeExposedStatisticsDetailRequest) SetCurrentPage(v int32) *DescribeExposedStatisticsDetailRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeExposedStatisticsDetailRequest) SetPageSize(v int32) *DescribeExposedStatisticsDetailRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeExposedStatisticsDetailRequest) SetStatisticsType(v string) *DescribeExposedStatisticsDetailRequest {
	s.StatisticsType = &v
	return s
}

func (s *DescribeExposedStatisticsDetailRequest) SetStatisticsTypeGatewayType(v string) *DescribeExposedStatisticsDetailRequest {
	s.StatisticsTypeGatewayType = &v
	return s
}

func (s *DescribeExposedStatisticsDetailRequest) SetStatisticsTypeInstanceValue(v string) *DescribeExposedStatisticsDetailRequest {
	s.StatisticsTypeInstanceValue = &v
	return s
}

type DescribeExposedStatisticsDetailResponseBody struct {
	// The pagination information.
	PageInfo *DescribeExposedStatisticsDetailResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array consisting of the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet and are returned.
	StatisticsDetails []*DescribeExposedStatisticsDetailResponseBodyStatisticsDetails `json:"StatisticsDetails,omitempty" xml:"StatisticsDetails,omitempty" type:"Repeated"`
}

func (s DescribeExposedStatisticsDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedStatisticsDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExposedStatisticsDetailResponseBody) SetPageInfo(v *DescribeExposedStatisticsDetailResponseBodyPageInfo) *DescribeExposedStatisticsDetailResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeExposedStatisticsDetailResponseBody) SetRequestId(v string) *DescribeExposedStatisticsDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExposedStatisticsDetailResponseBody) SetStatisticsDetails(v []*DescribeExposedStatisticsDetailResponseBodyStatisticsDetails) *DescribeExposedStatisticsDetailResponseBody {
	s.StatisticsDetails = v
	return s
}

type DescribeExposedStatisticsDetailResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeExposedStatisticsDetailResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedStatisticsDetailResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeExposedStatisticsDetailResponseBodyPageInfo) SetCount(v int32) *DescribeExposedStatisticsDetailResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeExposedStatisticsDetailResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeExposedStatisticsDetailResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeExposedStatisticsDetailResponseBodyPageInfo) SetPageSize(v int32) *DescribeExposedStatisticsDetailResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeExposedStatisticsDetailResponseBodyPageInfo) SetTotalCount(v int32) *DescribeExposedStatisticsDetailResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeExposedStatisticsDetailResponseBodyStatisticsDetails struct {
	// The total number of system vulnerabilities that are detected on your server and are exposed on the Internet.
	ExposedCount *int32 `json:"ExposedCount,omitempty" xml:"ExposedCount,omitempty"`
	// The system component that is exposed on the Internet.
	ExposureComponent *string `json:"ExposureComponent,omitempty" xml:"ExposureComponent,omitempty"`
	// The public IP address that is exposed on the Internet.
	ExposureIp *string `json:"ExposureIp,omitempty" xml:"ExposureIp,omitempty"`
	// The port that is exposed on the Internet.
	ExposurePort *string `json:"ExposurePort,omitempty" xml:"ExposurePort,omitempty"`
	// The resource from which the asset is exposed. Valid values:
	//
	// *   **INTERNET_IP**: the IP address of the Elastic Compute Service (ECS) instance
	// *   **SLB**: the public IP address of the SLB instance
	// *   **EIP**: the elastic IP address (EIP)
	// *   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature
	ExposureType *string `json:"ExposureType,omitempty" xml:"ExposureType,omitempty"`
	// The ID of the instance to which the resource belongs. The valid values of this parameter vary based on the value of the ExposureType parameter.
	//
	// *   If the value of the **ExposureType** parameter is **INTERNET_IP**, the value of this parameter is an empty string.
	// *   If the value of the **ExposureType** parameter is **SLB**, the value of this parameter is the ID of the Internet-facing SLB instance.
	// *   If the value of the **ExposureType** parameter is **EIP**, the value of this parameter is the ID of the EIP.
	// *   If the value of the **ExposureType** parameter is **DNAT**, the value of this parameter is the ID of the NAT gateway.
	ExposureTypeId *string `json:"ExposureTypeId,omitempty" xml:"ExposureTypeId,omitempty"`
	// The name of the gateway asset that is exposed on the Internet.
	ExposureTypeInstanceName *string `json:"ExposureTypeInstanceName,omitempty" xml:"ExposureTypeInstanceName,omitempty"`
	// The region ID of the asset.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeExposedStatisticsDetailResponseBodyStatisticsDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedStatisticsDetailResponseBodyStatisticsDetails) GoString() string {
	return s.String()
}

func (s *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails) SetExposedCount(v int32) *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails {
	s.ExposedCount = &v
	return s
}

func (s *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails) SetExposureComponent(v string) *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails {
	s.ExposureComponent = &v
	return s
}

func (s *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails) SetExposureIp(v string) *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails {
	s.ExposureIp = &v
	return s
}

func (s *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails) SetExposurePort(v string) *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails {
	s.ExposurePort = &v
	return s
}

func (s *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails) SetExposureType(v string) *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails {
	s.ExposureType = &v
	return s
}

func (s *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails) SetExposureTypeId(v string) *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails {
	s.ExposureTypeId = &v
	return s
}

func (s *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails) SetExposureTypeInstanceName(v string) *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails {
	s.ExposureTypeInstanceName = &v
	return s
}

func (s *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails) SetRegionId(v string) *DescribeExposedStatisticsDetailResponseBodyStatisticsDetails {
	s.RegionId = &v
	return s
}

type DescribeExposedStatisticsDetailResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeExposedStatisticsDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeExposedStatisticsDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExposedStatisticsDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeExposedStatisticsDetailResponse) SetHeaders(v map[string]*string) *DescribeExposedStatisticsDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeExposedStatisticsDetailResponse) SetStatusCode(v int32) *DescribeExposedStatisticsDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExposedStatisticsDetailResponse) SetBody(v *DescribeExposedStatisticsDetailResponseBody) *DescribeExposedStatisticsDetailResponse {
	s.Body = v
	return s
}

type DescribeFieldStatisticsRequest struct {
	// The type of the asset to query. If no asset types are specified, all types of assets are returned. Valid values:
	//
	// *   **ecs**: server
	// *   **cloud_product**: Alibaba Cloud service
	MachineTypes *string `json:"MachineTypes,omitempty" xml:"MachineTypes,omitempty"`
	// The ID of the region in which the asset resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFieldStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeFieldStatisticsRequest) SetMachineTypes(v string) *DescribeFieldStatisticsRequest {
	s.MachineTypes = &v
	return s
}

func (s *DescribeFieldStatisticsRequest) SetRegionId(v string) *DescribeFieldStatisticsRequest {
	s.RegionId = &v
	return s
}

type DescribeFieldStatisticsResponseBody struct {
	// The information about servers that are returned.
	GroupedFields *DescribeFieldStatisticsResponseBodyGroupedFields `json:"GroupedFields,omitempty" xml:"GroupedFields,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeFieldStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFieldStatisticsResponseBody) SetGroupedFields(v *DescribeFieldStatisticsResponseBodyGroupedFields) *DescribeFieldStatisticsResponseBody {
	s.GroupedFields = v
	return s
}

func (s *DescribeFieldStatisticsResponseBody) SetRequestId(v string) *DescribeFieldStatisticsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeFieldStatisticsResponseBodyGroupedFields struct {
	// The number of assets that are deployed on Alibaba Cloud.
	AliYunInstanceCount *int32 `json:"AliYunInstanceCount,omitempty" xml:"AliYunInstanceCount,omitempty"`
	// The number of servers.
	AwsInstanceCount *int32 `json:"AwsInstanceCount,omitempty" xml:"AwsInstanceCount,omitempty"`
	// The number of exposed servers.
	ExposedInstanceCount *int32 `json:"ExposedInstanceCount,omitempty" xml:"ExposedInstanceCount,omitempty"`
	// The number of assets whose importance is common.
	GeneralAssetCount *int32 `json:"GeneralAssetCount,omitempty" xml:"GeneralAssetCount,omitempty"`
	// The number of server groups.
	GroupCount *int32 `json:"GroupCount,omitempty" xml:"GroupCount,omitempty"`
	// The number of instances that are provisioned by third-party providers.
	HuaweiInstanceCount *int32 `json:"HuaweiInstanceCount,omitempty" xml:"HuaweiInstanceCount,omitempty"`
	// The number of assets that can be protected by Security Center.
	IdcInstanceCount *int32 `json:"IdcInstanceCount,omitempty" xml:"IdcInstanceCount,omitempty"`
	// The number of assets whose importance is important.
	ImportantAssetCount *int32 `json:"ImportantAssetCount,omitempty" xml:"ImportantAssetCount,omitempty"`
	// The total number of assets of the specified type. If no asset types are specified, this parameter indicates the total number of all servers and Alibaba Cloud services within your account.
	InstanceCount *int32 `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	// The total number of tasks for the specified type of assets. If no asset types are specified, this parameter indicates the total number of all servers and Alibaba Cloud services within your account.
	InstanceSyncTaskCount *int32 `json:"InstanceSyncTaskCount,omitempty" xml:"InstanceSyncTaskCount,omitempty"`
	// The number of newly added servers.
	NewInstanceCount *int32 `json:"NewInstanceCount,omitempty" xml:"NewInstanceCount,omitempty"`
	// The number of assets that do not pose risks.
	NoRiskInstanceCount *int32 `json:"NoRiskInstanceCount,omitempty" xml:"NoRiskInstanceCount,omitempty"`
	// The number of servers that are shut down.
	NotRunningStatusCount *int32 `json:"NotRunningStatusCount,omitempty" xml:"NotRunningStatusCount,omitempty"`
	// The number of servers whose Security Center agent status is Offline.
	OfflineInstanceCount *int32 `json:"OfflineInstanceCount,omitempty" xml:"OfflineInstanceCount,omitempty"`
	// The number of servers outside the cloud.
	OutMachineInstanceCount *int32 `json:"OutMachineInstanceCount,omitempty" xml:"OutMachineInstanceCount,omitempty"`
	// The number of servers for which the Security Center agent suspends protection.
	PauseInstanceCount *int32 `json:"PauseInstanceCount,omitempty" xml:"PauseInstanceCount,omitempty"`
	// The number of regions to which the servers belong.
	RegionCount *int32 `json:"RegionCount,omitempty" xml:"RegionCount,omitempty"`
	// The number of assets that are at risk.
	RiskInstanceCount *int32 `json:"RiskInstanceCount,omitempty" xml:"RiskInstanceCount,omitempty"`
	// The total number of cloud services that are protected by Security Center.
	TencentInstanceCount *int32 `json:"TencentInstanceCount,omitempty" xml:"TencentInstanceCount,omitempty"`
	// The number of assets whose importance is test.
	TestAssetCount *int32 `json:"TestAssetCount,omitempty" xml:"TestAssetCount,omitempty"`
	// The number of simple application servers.
	TripartiteInstanceCount *int32 `json:"TripartiteInstanceCount,omitempty" xml:"TripartiteInstanceCount,omitempty"`
	// The number of assets whose statuses are unknown.
	UnKnowStatusInstanceCount *int32 `json:"UnKnowStatusInstanceCount,omitempty" xml:"UnKnowStatusInstanceCount,omitempty"`
	// The number of unprotected assets.
	UnprotectedInstanceCount *int32 `json:"UnprotectedInstanceCount,omitempty" xml:"UnprotectedInstanceCount,omitempty"`
	// The number of virtual private clouds (VPCs).
	VpcCount *int32 `json:"VpcCount,omitempty" xml:"VpcCount,omitempty"`
}

func (s DescribeFieldStatisticsResponseBodyGroupedFields) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldStatisticsResponseBodyGroupedFields) GoString() string {
	return s.String()
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetAliYunInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.AliYunInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetAwsInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.AwsInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetExposedInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.ExposedInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetGeneralAssetCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.GeneralAssetCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetGroupCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.GroupCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetHuaweiInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.HuaweiInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetIdcInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.IdcInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetImportantAssetCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.ImportantAssetCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.InstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetInstanceSyncTaskCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.InstanceSyncTaskCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetNewInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.NewInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetNoRiskInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.NoRiskInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetNotRunningStatusCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.NotRunningStatusCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetOfflineInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.OfflineInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetOutMachineInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.OutMachineInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetPauseInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.PauseInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetRegionCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.RegionCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetRiskInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.RiskInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetTencentInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.TencentInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetTestAssetCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.TestAssetCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetTripartiteInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.TripartiteInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetUnKnowStatusInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.UnKnowStatusInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetUnprotectedInstanceCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.UnprotectedInstanceCount = &v
	return s
}

func (s *DescribeFieldStatisticsResponseBodyGroupedFields) SetVpcCount(v int32) *DescribeFieldStatisticsResponseBodyGroupedFields {
	s.VpcCount = &v
	return s
}

type DescribeFieldStatisticsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeFieldStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFieldStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFieldStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeFieldStatisticsResponse) SetHeaders(v map[string]*string) *DescribeFieldStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeFieldStatisticsResponse) SetStatusCode(v int32) *DescribeFieldStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFieldStatisticsResponse) SetBody(v *DescribeFieldStatisticsResponseBody) *DescribeFieldStatisticsResponse {
	s.Body = v
	return s
}

type DescribeFrontVulPatchListRequest struct {
	// The information about the Windows system vulnerability. The value is a JSON string that contains the following fields:
	//
	// *   **name**: the name of the vulnerability.
	// *   **uuid**: the UUID of the server on which the vulnerability is detected.
	// *   **tag**: the tag that is added to the vulnerability. Set this field to **system**, which indicates Windows system vulnerabilities.
	Info *string `json:"Info,omitempty" xml:"Info,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The operation that you want to perform on the vulnerability. Set the value to **vul_fix**, which indicates vulnerability fixing.
	OperateType *string `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	// The type of the vulnerability. Set the value to **sys**, which indicates Windows system vulnerabilities.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeFrontVulPatchListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFrontVulPatchListRequest) GoString() string {
	return s.String()
}

func (s *DescribeFrontVulPatchListRequest) SetInfo(v string) *DescribeFrontVulPatchListRequest {
	s.Info = &v
	return s
}

func (s *DescribeFrontVulPatchListRequest) SetLang(v string) *DescribeFrontVulPatchListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeFrontVulPatchListRequest) SetOperateType(v string) *DescribeFrontVulPatchListRequest {
	s.OperateType = &v
	return s
}

func (s *DescribeFrontVulPatchListRequest) SetType(v string) *DescribeFrontVulPatchListRequest {
	s.Type = &v
	return s
}

type DescribeFrontVulPatchListResponseBody struct {
	// An array consisting of the information about the pre-patches that are required to fix the specified Windows system vulnerability.
	FrontPatchList []*DescribeFrontVulPatchListResponseBodyFrontPatchList `json:"FrontPatchList,omitempty" xml:"FrontPatchList,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeFrontVulPatchListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFrontVulPatchListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFrontVulPatchListResponseBody) SetFrontPatchList(v []*DescribeFrontVulPatchListResponseBodyFrontPatchList) *DescribeFrontVulPatchListResponseBody {
	s.FrontPatchList = v
	return s
}

func (s *DescribeFrontVulPatchListResponseBody) SetRequestId(v string) *DescribeFrontVulPatchListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeFrontVulPatchListResponseBodyFrontPatchList struct {
	// An array consisting of the pre-patches that are required to fix the specified Windows system vulnerability on the server.
	PatchList []*DescribeFrontVulPatchListResponseBodyFrontPatchListPatchList `json:"PatchList,omitempty" xml:"PatchList,omitempty" type:"Repeated"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeFrontVulPatchListResponseBodyFrontPatchList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFrontVulPatchListResponseBodyFrontPatchList) GoString() string {
	return s.String()
}

func (s *DescribeFrontVulPatchListResponseBodyFrontPatchList) SetPatchList(v []*DescribeFrontVulPatchListResponseBodyFrontPatchListPatchList) *DescribeFrontVulPatchListResponseBodyFrontPatchList {
	s.PatchList = v
	return s
}

func (s *DescribeFrontVulPatchListResponseBodyFrontPatchList) SetUuid(v string) *DescribeFrontVulPatchListResponseBodyFrontPatchList {
	s.Uuid = &v
	return s
}

type DescribeFrontVulPatchListResponseBodyFrontPatchListPatchList struct {
	// The name of the Windows system vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The version number of the pre-patch that is required to fix the Windows system vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeFrontVulPatchListResponseBodyFrontPatchListPatchList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFrontVulPatchListResponseBodyFrontPatchListPatchList) GoString() string {
	return s.String()
}

func (s *DescribeFrontVulPatchListResponseBodyFrontPatchListPatchList) SetAliasName(v string) *DescribeFrontVulPatchListResponseBodyFrontPatchListPatchList {
	s.AliasName = &v
	return s
}

func (s *DescribeFrontVulPatchListResponseBodyFrontPatchListPatchList) SetName(v string) *DescribeFrontVulPatchListResponseBodyFrontPatchListPatchList {
	s.Name = &v
	return s
}

type DescribeFrontVulPatchListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeFrontVulPatchListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFrontVulPatchListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFrontVulPatchListResponse) GoString() string {
	return s.String()
}

func (s *DescribeFrontVulPatchListResponse) SetHeaders(v map[string]*string) *DescribeFrontVulPatchListResponse {
	s.Headers = v
	return s
}

func (s *DescribeFrontVulPatchListResponse) SetStatusCode(v int32) *DescribeFrontVulPatchListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFrontVulPatchListResponse) SetBody(v *DescribeFrontVulPatchListResponseBody) *DescribeFrontVulPatchListResponse {
	s.Body = v
	return s
}

type DescribeGroupedContainerInstancesRequest struct {
	// The search conditions for assets. Specify the value in the JSON format. Separate multiple search conditions with commas (,). Example: `[{"name":"riskStatus","value":"YES"},{"name":"riskLevel","value":"2"}]`.
	//
	// >  Supported search conditions include the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can call the [DescribeCriteria](~~DescribeCriteria~~) operation to query the supported search conditions.
	Criteria *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The keyword that you want to use to query containers. You must specify this parameter based on the value of the GroupField parameter.
	//
	// *   If the **GroupField** parameter is set to **pod**, set this parameter to the name of the pod that you want to query.
	// *   If the **GroupField** parameter is set to **appName**, set this parameter to the name of the application that you want to query.
	// *   If the **GroupField** parameter is set to **namespace**, set this parameter to the namespace that you want to query.
	// *   If the **GroupField** parameter is set to **clusterId**, set this parameter to the ID of the cluster that you want to query.
	//
	// >  Fuzzy match is supported.
	FieldValue *string `json:"FieldValue,omitempty" xml:"FieldValue,omitempty"`
	// The group type that you want to use to query containers. Valid values:
	//
	// *   **pod**
	// *   **appName**
	// *   **namespace**
	// *   **clusterId**
	GroupField *string `json:"GroupField,omitempty" xml:"GroupField,omitempty"`
	// The logical relationship that you want to use to evaluate multiple search conditions. Valid values:
	//
	// *   **OR**: Search conditions are evaluated by using a logical **OR**.
	// *   **AND**: Search conditions are evaluated by using a logical **AND**.
	LogicalExp *string `json:"LogicalExp,omitempty" xml:"LogicalExp,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	//
	// >  We recommend that you do not leave this parameter empty.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeGroupedContainerInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedContainerInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupedContainerInstancesRequest) SetCriteria(v string) *DescribeGroupedContainerInstancesRequest {
	s.Criteria = &v
	return s
}

func (s *DescribeGroupedContainerInstancesRequest) SetCurrentPage(v int32) *DescribeGroupedContainerInstancesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeGroupedContainerInstancesRequest) SetFieldValue(v string) *DescribeGroupedContainerInstancesRequest {
	s.FieldValue = &v
	return s
}

func (s *DescribeGroupedContainerInstancesRequest) SetGroupField(v string) *DescribeGroupedContainerInstancesRequest {
	s.GroupField = &v
	return s
}

func (s *DescribeGroupedContainerInstancesRequest) SetLogicalExp(v string) *DescribeGroupedContainerInstancesRequest {
	s.LogicalExp = &v
	return s
}

func (s *DescribeGroupedContainerInstancesRequest) SetPageSize(v int32) *DescribeGroupedContainerInstancesRequest {
	s.PageSize = &v
	return s
}

type DescribeGroupedContainerInstancesResponseBody struct {
	// An array that consists of the container assets returned.
	GroupedContainerInstanceList []*DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList `json:"GroupedContainerInstanceList,omitempty" xml:"GroupedContainerInstanceList,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *DescribeGroupedContainerInstancesResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeGroupedContainerInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedContainerInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupedContainerInstancesResponseBody) SetGroupedContainerInstanceList(v []*DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) *DescribeGroupedContainerInstancesResponseBody {
	s.GroupedContainerInstanceList = v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBody) SetPageInfo(v *DescribeGroupedContainerInstancesResponseBodyPageInfo) *DescribeGroupedContainerInstancesResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBody) SetRequestId(v string) *DescribeGroupedContainerInstancesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList struct {
	// The number of alerts that are generated on the current pod, application, namespace, or cluster.
	AlarmCount *int32 `json:"AlarmCount,omitempty" xml:"AlarmCount,omitempty"`
	// The name of the application.
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The ID of cluster.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the instance.
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	// The type of the cluster. Valid values:
	//
	// *   **Kubernetes**: dedicated Kubernetes cluster
	// *   **ManagedKubernetes**: standard managed cluster (edge cluster)
	// *   **Ask**: standard serverless cluster
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	// The timestamp when the cluster was created. Unit: milliseconds.
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The status of the cluster. Valid values:
	//
	// *   **running**: The cluster is running.
	// *   **stopped**: The cluster is stopped.
	// *   **deleted**: The cluster is deleted.
	// *   **delete_failed**: The cluster fails to be deleted.
	// *   **failed**: The cluster fails to be created.
	CusterState *string `json:"CusterState,omitempty" xml:"CusterState,omitempty"`
	// The number of baseline risks that are detected on the current pod, application, namespace, or cluster.
	HcCount *int32 `json:"HcCount,omitempty" xml:"HcCount,omitempty"`
	// The IP address of the host in the container cluster.
	HostIp *string `json:"HostIp,omitempty" xml:"HostIp,omitempty"`
	// The image of the container.
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The digest value of the image.
	ImageDigest *string `json:"ImageDigest,omitempty" xml:"ImageDigest,omitempty"`
	// The name of the image repository.
	ImageRepoName *string `json:"ImageRepoName,omitempty" xml:"ImageRepoName,omitempty"`
	// The namespace to which the image repository belongs.
	ImageRepoNamespace *string `json:"ImageRepoNamespace,omitempty" xml:"ImageRepoNamespace,omitempty"`
	// The tag that is added to the image repository.
	ImageRepoTag *string `json:"ImageRepoTag,omitempty" xml:"ImageRepoTag,omitempty"`
	// The UUID of the image.
	ImageUuid *string `json:"ImageUuid,omitempty" xml:"ImageUuid,omitempty"`
	// The number of queried pods, applications, clusters, or namespaces.
	InstanceCount *int32 `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The namespace of the cluster.
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The name of the pod.
	Pod *string `json:"Pod,omitempty" xml:"Pod,omitempty"`
	// The IP address of the pod.
	PodIp *string `json:"PodIp,omitempty" xml:"PodIp,omitempty"`
	// The ID of the region in which the server resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The number of at-risk instances.
	RiskInstanceCount *int32 `json:"RiskInstanceCount,omitempty" xml:"RiskInstanceCount,omitempty"`
	// The risk level. Valid values:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// Indicates whether risks were detected. Valid values:
	//
	// *   **NO**: No risks were detected.
	// *   **YES**: Risks were detected.
	RiskStatus *string `json:"RiskStatus,omitempty" xml:"RiskStatus,omitempty"`
	// The number of vulnerabilities that are detected on the current pod, application, namespace, or cluster.
	VulCount *int32 `json:"VulCount,omitempty" xml:"VulCount,omitempty"`
}

func (s DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) GoString() string {
	return s.String()
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetAlarmCount(v int32) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.AlarmCount = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetAppName(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.AppName = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetClusterId(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.ClusterId = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetClusterName(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.ClusterName = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetClusterType(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.ClusterType = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetCreateTime(v int64) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.CreateTime = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetCusterState(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.CusterState = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetHcCount(v int32) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.HcCount = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetHostIp(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.HostIp = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetImage(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.Image = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetImageDigest(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.ImageDigest = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetImageRepoName(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.ImageRepoName = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetImageRepoNamespace(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.ImageRepoNamespace = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetImageRepoTag(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.ImageRepoTag = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetImageUuid(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.ImageUuid = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetInstanceCount(v int32) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.InstanceCount = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetInstanceId(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.InstanceId = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetNamespace(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.Namespace = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetPod(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.Pod = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetPodIp(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.PodIp = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetRegionId(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.RegionId = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetRiskInstanceCount(v int32) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.RiskInstanceCount = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetRiskLevel(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.RiskLevel = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetRiskStatus(v string) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.RiskStatus = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList) SetVulCount(v int32) *DescribeGroupedContainerInstancesResponseBodyGroupedContainerInstanceList {
	s.VulCount = &v
	return s
}

type DescribeGroupedContainerInstancesResponseBodyPageInfo struct {
	// The number of container assets returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of container assets returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeGroupedContainerInstancesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedContainerInstancesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeGroupedContainerInstancesResponseBodyPageInfo) SetCount(v int32) *DescribeGroupedContainerInstancesResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeGroupedContainerInstancesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyPageInfo) SetPageSize(v int32) *DescribeGroupedContainerInstancesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponseBodyPageInfo) SetTotalCount(v int32) *DescribeGroupedContainerInstancesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeGroupedContainerInstancesResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeGroupedContainerInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeGroupedContainerInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedContainerInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupedContainerInstancesResponse) SetHeaders(v map[string]*string) *DescribeGroupedContainerInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupedContainerInstancesResponse) SetStatusCode(v int32) *DescribeGroupedContainerInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupedContainerInstancesResponse) SetBody(v *DescribeGroupedContainerInstancesResponseBody) *DescribeGroupedContainerInstancesResponse {
	s.Body = v
	return s
}

type DescribeGroupedInstancesRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The name of the group to which the assets belong. Fuzzy search is supported.
	FieldValue *string `json:"FieldValue,omitempty" xml:"FieldValue,omitempty"`
	// The filter condition that you want to use to query the assets. Valid values:
	//
	// *   **groupId**: the group to which the assets belong
	// *   **regionId**: the region in which the assets reside
	// *   **vpcInstanceId**: the virtual private cloud (VPC) in which the assets reside
	GroupField *string `json:"GroupField,omitempty" xml:"GroupField,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The type of the assets that you want to query. Set the value to **ecs**, which indicates Elastic Compute Service (ECS) instances.
	MachineTypes *string `json:"MachineTypes,omitempty" xml:"MachineTypes,omitempty"`
	// Specifies whether to enable paged query. Default value: **true**. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	NoPage *bool `json:"NoPage,omitempty" xml:"NoPage,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The source of the server. Valid values:
	//
	// *   **0**: an asset provided by Alibaba Cloud.
	// *   **1**: a third-party cloud server
	// *   **2**: a server in a data center
	// *   **3**, **4**, **5**, and **7**: other cloud asset
	// *   **8**: a lightweight asset
	Vendor *int32 `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
	// The source of the server. Separate multiple sources with commas (,).Valid values:
	//
	// *   **0**: an asset provided by Alibaba Cloud.
	// *   **1**: a third-party cloud server
	// *   **2**: a server in a data center
	// *   **3**, **4**, **5**, and **7**: other cloud asset
	// *   **8**: a lightweight asset
	Vendors *string `json:"Vendors,omitempty" xml:"Vendors,omitempty"`
}

func (s DescribeGroupedInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupedInstancesRequest) SetCurrentPage(v int32) *DescribeGroupedInstancesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeGroupedInstancesRequest) SetFieldValue(v string) *DescribeGroupedInstancesRequest {
	s.FieldValue = &v
	return s
}

func (s *DescribeGroupedInstancesRequest) SetGroupField(v string) *DescribeGroupedInstancesRequest {
	s.GroupField = &v
	return s
}

func (s *DescribeGroupedInstancesRequest) SetLang(v string) *DescribeGroupedInstancesRequest {
	s.Lang = &v
	return s
}

func (s *DescribeGroupedInstancesRequest) SetMachineTypes(v string) *DescribeGroupedInstancesRequest {
	s.MachineTypes = &v
	return s
}

func (s *DescribeGroupedInstancesRequest) SetNoPage(v bool) *DescribeGroupedInstancesRequest {
	s.NoPage = &v
	return s
}

func (s *DescribeGroupedInstancesRequest) SetPageSize(v int32) *DescribeGroupedInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupedInstancesRequest) SetVendor(v int32) *DescribeGroupedInstancesRequest {
	s.Vendor = &v
	return s
}

func (s *DescribeGroupedInstancesRequest) SetVendors(v string) *DescribeGroupedInstancesRequest {
	s.Vendors = &v
	return s
}

type DescribeGroupedInstancesResponseBody struct {
	// An array that consists of the information about the assets.
	Instances []*DescribeGroupedInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *DescribeGroupedInstancesResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeGroupedInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupedInstancesResponseBody) SetInstances(v []*DescribeGroupedInstancesResponseBodyInstances) *DescribeGroupedInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeGroupedInstancesResponseBody) SetPageInfo(v *DescribeGroupedInstancesResponseBodyPageInfo) *DescribeGroupedInstancesResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeGroupedInstancesResponseBody) SetRequestId(v string) *DescribeGroupedInstancesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeGroupedInstancesResponseBodyInstances struct {
	// The number of assets on which high-risk vulnerabilities are detected.
	AsapVulInstanceCount *int64 `json:"AsapVulInstanceCount,omitempty" xml:"AsapVulInstanceCount,omitempty"`
	// The name of the server group.
	FieldAliasName *string `json:"FieldAliasName,omitempty" xml:"FieldAliasName,omitempty"`
	// The type of the server group. Valid values:
	//
	// *   **0**: the default group
	// *   **1**: other group
	GroupFlag *int32 `json:"GroupFlag,omitempty" xml:"GroupFlag,omitempty"`
	// The total number of assets that belong to the specified type.
	//
	// >  If the **MachineTypes** request parameter is not specified, the value of the InstanceCount parameter is the total number of your assets.
	InstanceCount *string `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	// The number of assets that are at risk.
	RiskInstanceCount *string `json:"RiskInstanceCount,omitempty" xml:"RiskInstanceCount,omitempty"`
	// The number of assets that are not protected by Security Center.
	UnProtectedInstanceCount *string `json:"UnProtectedInstanceCount,omitempty" xml:"UnProtectedInstanceCount,omitempty"`
}

func (s DescribeGroupedInstancesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeGroupedInstancesResponseBodyInstances) SetAsapVulInstanceCount(v int64) *DescribeGroupedInstancesResponseBodyInstances {
	s.AsapVulInstanceCount = &v
	return s
}

func (s *DescribeGroupedInstancesResponseBodyInstances) SetFieldAliasName(v string) *DescribeGroupedInstancesResponseBodyInstances {
	s.FieldAliasName = &v
	return s
}

func (s *DescribeGroupedInstancesResponseBodyInstances) SetGroupFlag(v int32) *DescribeGroupedInstancesResponseBodyInstances {
	s.GroupFlag = &v
	return s
}

func (s *DescribeGroupedInstancesResponseBodyInstances) SetInstanceCount(v string) *DescribeGroupedInstancesResponseBodyInstances {
	s.InstanceCount = &v
	return s
}

func (s *DescribeGroupedInstancesResponseBodyInstances) SetRiskInstanceCount(v string) *DescribeGroupedInstancesResponseBodyInstances {
	s.RiskInstanceCount = &v
	return s
}

func (s *DescribeGroupedInstancesResponseBodyInstances) SetUnProtectedInstanceCount(v string) *DescribeGroupedInstancesResponseBodyInstances {
	s.UnProtectedInstanceCount = &v
	return s
}

type DescribeGroupedInstancesResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeGroupedInstancesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedInstancesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeGroupedInstancesResponseBodyPageInfo) SetCount(v int32) *DescribeGroupedInstancesResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeGroupedInstancesResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeGroupedInstancesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeGroupedInstancesResponseBodyPageInfo) SetPageSize(v int32) *DescribeGroupedInstancesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupedInstancesResponseBodyPageInfo) SetTotalCount(v int32) *DescribeGroupedInstancesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeGroupedInstancesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeGroupedInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeGroupedInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupedInstancesResponse) SetHeaders(v map[string]*string) *DescribeGroupedInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupedInstancesResponse) SetStatusCode(v int32) *DescribeGroupedInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupedInstancesResponse) SetBody(v *DescribeGroupedInstancesResponseBody) *DescribeGroupedInstancesResponse {
	s.Body = v
	return s
}

type DescribeGroupedMaliciousFilesRequest struct {
	// The cluster ID of the container on which the malicious image sample is detected.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The number of the page to return. Pages start from page **1**. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The name of the malicious image sample that you want to query.
	//
	// >  Fuzzy match is supported.
	FuzzyMaliciousName *string `json:"FuzzyMaliciousName,omitempty" xml:"FuzzyMaliciousName,omitempty"`
	// The image digest.
	ImageDigest *string `json:"ImageDigest,omitempty" xml:"ImageDigest,omitempty"`
	// The image layer.
	ImageLayer *string `json:"ImageLayer,omitempty" xml:"ImageLayer,omitempty"`
	// The image tag.
	ImageTag *string `json:"ImageTag,omitempty" xml:"ImageTag,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The severity of the malicious image sample that you want to query. You can enter multiple severities. Separate the severities with commas (,). Valid values:
	//
	// *   **serious**
	// *   **suspicious**
	// *   **remind**
	Levels       *string `json:"Levels,omitempty" xml:"Levels,omitempty"`
	MaliciousMd5 *string `json:"MaliciousMd5,omitempty" xml:"MaliciousMd5,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the image repository.
	//
	// >  You can call the [ListRepository](~~145293~~) operation to query the IDs of image repositories from the value of the **RepoId** response parameter.
	RepoId *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	// The ID of the container image.
	//
	// >  You can call the [ListRepository](~~145293~~) operation to query the IDs of container images from the value of the **InstanceId** response parameter.
	RepoInstanceId *string `json:"RepoInstanceId,omitempty" xml:"RepoInstanceId,omitempty"`
	// The name of the image repository.
	//
	// >  Fuzzy match is supported.
	RepoName *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	// The namespace to which the image repository belongs.
	//
	// >  Fuzzy match is supported.
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	// The region ID of the image repository. Valid values:
	//
	// *   **cn-beijing**: China (Beijing)
	// *   **cn-zhangjiakou**: China (Zhangjiakou)
	// *   **cn-hangzhou**: China (Hangzhou)
	// *   **cn-shanghai**: China (Shanghai)
	// *   **cn-shenzhen**: China (Shenzhen)
	// *   **cn-hongkong**: China (Hong Kong)
	// *   **ap-southeast-1**: Singapore
	// *   **ap-southeast-5**: Indonesia (Jakarta)
	// *   **us-east-1**: US (Virginia)
	// *   **us-west-1**: US (Silicon Valley)
	// *   **eu-central-1**: Germany (Frankfurt)
	// *   **eu-west-1**: UK (London)
	// *   **ap-south-1**: India (Mumbai)
	RepoRegionId *string `json:"RepoRegionId,omitempty" xml:"RepoRegionId,omitempty"`
	// The types of the assets that you want to scan.
	ScanRange []*string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty" type:"Repeated"`
}

func (s DescribeGroupedMaliciousFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedMaliciousFilesRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupedMaliciousFilesRequest) SetClusterId(v string) *DescribeGroupedMaliciousFilesRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetCurrentPage(v int32) *DescribeGroupedMaliciousFilesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetFuzzyMaliciousName(v string) *DescribeGroupedMaliciousFilesRequest {
	s.FuzzyMaliciousName = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetImageDigest(v string) *DescribeGroupedMaliciousFilesRequest {
	s.ImageDigest = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetImageLayer(v string) *DescribeGroupedMaliciousFilesRequest {
	s.ImageLayer = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetImageTag(v string) *DescribeGroupedMaliciousFilesRequest {
	s.ImageTag = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetLang(v string) *DescribeGroupedMaliciousFilesRequest {
	s.Lang = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetLevels(v string) *DescribeGroupedMaliciousFilesRequest {
	s.Levels = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetMaliciousMd5(v string) *DescribeGroupedMaliciousFilesRequest {
	s.MaliciousMd5 = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetPageSize(v string) *DescribeGroupedMaliciousFilesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetRepoId(v string) *DescribeGroupedMaliciousFilesRequest {
	s.RepoId = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetRepoInstanceId(v string) *DescribeGroupedMaliciousFilesRequest {
	s.RepoInstanceId = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetRepoName(v string) *DescribeGroupedMaliciousFilesRequest {
	s.RepoName = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetRepoNamespace(v string) *DescribeGroupedMaliciousFilesRequest {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetRepoRegionId(v string) *DescribeGroupedMaliciousFilesRequest {
	s.RepoRegionId = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesRequest) SetScanRange(v []*string) *DescribeGroupedMaliciousFilesRequest {
	s.ScanRange = v
	return s
}

type DescribeGroupedMaliciousFilesResponseBody struct {
	// An array that consists of the malicious image samples.
	GroupedMaliciousFileResponse []*DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse `json:"GroupedMaliciousFileResponse,omitempty" xml:"GroupedMaliciousFileResponse,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *DescribeGroupedMaliciousFilesResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeGroupedMaliciousFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedMaliciousFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupedMaliciousFilesResponseBody) SetGroupedMaliciousFileResponse(v []*DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse) *DescribeGroupedMaliciousFilesResponseBody {
	s.GroupedMaliciousFileResponse = v
	return s
}

func (s *DescribeGroupedMaliciousFilesResponseBody) SetPageInfo(v *DescribeGroupedMaliciousFilesResponseBodyPageInfo) *DescribeGroupedMaliciousFilesResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeGroupedMaliciousFilesResponseBody) SetRequestId(v string) *DescribeGroupedMaliciousFilesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse struct {
	// The timestamp when the first scan was performed. Unit: milliseconds.
	FirstScanTimestamp *int64 `json:"FirstScanTimestamp,omitempty" xml:"FirstScanTimestamp,omitempty"`
	// The number of affected images.
	ImageCount *int64 `json:"ImageCount,omitempty" xml:"ImageCount,omitempty"`
	// The timestamp when the last scan was performed. Unit: milliseconds.
	LatestScanTimestamp *int64 `json:"LatestScanTimestamp,omitempty" xml:"LatestScanTimestamp,omitempty"`
	// The severity of the malicious image sample. Valid values:
	//
	// *   **serious**
	// *   **suspicious**
	// *   **remind**
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The MD5 hash value of the malicious image sample.
	MaliciousMd5 *string `json:"MaliciousMd5,omitempty" xml:"MaliciousMd5,omitempty"`
	// The name of the malicious image sample.
	MaliciousName *string `json:"MaliciousName,omitempty" xml:"MaliciousName,omitempty"`
	// The handling status of the malicious image sample. Valid values:
	//
	// *   **0**: unhandled
	// *   **1**: handled
	// *   **2**: verifying
	// *   **3**: added to the whitelist
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse) SetFirstScanTimestamp(v int64) *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse {
	s.FirstScanTimestamp = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse) SetImageCount(v int64) *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse {
	s.ImageCount = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse) SetLatestScanTimestamp(v int64) *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse {
	s.LatestScanTimestamp = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse) SetLevel(v string) *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse {
	s.Level = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse) SetMaliciousMd5(v string) *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse {
	s.MaliciousMd5 = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse) SetMaliciousName(v string) *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse {
	s.MaliciousName = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse) SetStatus(v int32) *DescribeGroupedMaliciousFilesResponseBodyGroupedMaliciousFileResponse {
	s.Status = &v
	return s
}

type DescribeGroupedMaliciousFilesResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeGroupedMaliciousFilesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedMaliciousFilesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeGroupedMaliciousFilesResponseBodyPageInfo) SetCount(v int32) *DescribeGroupedMaliciousFilesResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeGroupedMaliciousFilesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesResponseBodyPageInfo) SetPageSize(v int32) *DescribeGroupedMaliciousFilesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesResponseBodyPageInfo) SetTotalCount(v int32) *DescribeGroupedMaliciousFilesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeGroupedMaliciousFilesResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeGroupedMaliciousFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeGroupedMaliciousFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedMaliciousFilesResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupedMaliciousFilesResponse) SetHeaders(v map[string]*string) *DescribeGroupedMaliciousFilesResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupedMaliciousFilesResponse) SetStatusCode(v int32) *DescribeGroupedMaliciousFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupedMaliciousFilesResponse) SetBody(v *DescribeGroupedMaliciousFilesResponseBody) *DescribeGroupedMaliciousFilesResponse {
	s.Body = v
	return s
}

type DescribeGroupedTagsRequest struct {
	// The type of the asset to query. If you do not specify this parameter, the tags of all asset types are queried. Valid values:
	//
	// *   **ecs**: server
	// *   **cloud_product**: Alibaba Cloud service
	MachineTypes *string `json:"MachineTypes,omitempty" xml:"MachineTypes,omitempty"`
}

func (s DescribeGroupedTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupedTagsRequest) SetMachineTypes(v string) *DescribeGroupedTagsRequest {
	s.MachineTypes = &v
	return s
}

type DescribeGroupedTagsResponseBody struct {
	// This parameter is deprecated.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// An array that consists of the statistics of the asset tags.
	GroupedFileds []*DescribeGroupedTagsResponseBodyGroupedFileds `json:"GroupedFileds,omitempty" xml:"GroupedFileds,omitempty" type:"Repeated"`
	// The HTTP status code of the request.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful. Valid values:
	//
	// *   **true**: The request is successful.
	// *   **false**: The request fails.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeGroupedTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupedTagsResponseBody) SetCount(v int32) *DescribeGroupedTagsResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeGroupedTagsResponseBody) SetGroupedFileds(v []*DescribeGroupedTagsResponseBodyGroupedFileds) *DescribeGroupedTagsResponseBody {
	s.GroupedFileds = v
	return s
}

func (s *DescribeGroupedTagsResponseBody) SetHttpStatusCode(v int32) *DescribeGroupedTagsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeGroupedTagsResponseBody) SetRequestId(v string) *DescribeGroupedTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGroupedTagsResponseBody) SetSuccess(v bool) *DescribeGroupedTagsResponseBody {
	s.Success = &v
	return s
}

type DescribeGroupedTagsResponseBodyGroupedFileds struct {
	// The number of assets to which the tag is added.
	Count *string `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the tag.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the tag.
	TagId *int32 `json:"TagId,omitempty" xml:"TagId,omitempty"`
}

func (s DescribeGroupedTagsResponseBodyGroupedFileds) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedTagsResponseBodyGroupedFileds) GoString() string {
	return s.String()
}

func (s *DescribeGroupedTagsResponseBodyGroupedFileds) SetCount(v string) *DescribeGroupedTagsResponseBodyGroupedFileds {
	s.Count = &v
	return s
}

func (s *DescribeGroupedTagsResponseBodyGroupedFileds) SetName(v string) *DescribeGroupedTagsResponseBodyGroupedFileds {
	s.Name = &v
	return s
}

func (s *DescribeGroupedTagsResponseBodyGroupedFileds) SetTagId(v int32) *DescribeGroupedTagsResponseBodyGroupedFileds {
	s.TagId = &v
	return s
}

type DescribeGroupedTagsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeGroupedTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeGroupedTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupedTagsResponse) SetHeaders(v map[string]*string) *DescribeGroupedTagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupedTagsResponse) SetStatusCode(v int32) *DescribeGroupedTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupedTagsResponse) SetBody(v *DescribeGroupedTagsResponseBody) *DescribeGroupedTagsResponse {
	s.Body = v
	return s
}

type DescribeGroupedVulRequest struct {
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The type of the vulnerability.
	//
	// >  This parameter is valid only for application vulnerabilities and vulnerabilities that are detected based on software component analysis.
	AttachTypes *string `json:"AttachTypes,omitempty" xml:"AttachTypes,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether the vulnerability is handled. Valid values:
	//
	// **y**: yes **n**: no
	Dealed *string `json:"Dealed,omitempty" xml:"Dealed,omitempty"`
	// The ID of the asset group.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The priority to fix the vulnerability. Separate multiple priorities with commas (,). Valid values:
	//
	// *   **asap**: high
	// *   **later**: medium
	// *   **nntf**: low
	Necessity *string `json:"Necessity,omitempty" xml:"Necessity,omitempty"`
	// The number of entries to return on each page. Default value: 10.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The tag that is used to filter vulnerabilities. Valid values:
	//
	// *   Restart required
	// *   Remote exploitation
	// *   Exploit exists
	// *   Exploitable
	// *   Privilege escalation
	// *   Code execution
	SearchTags *string `json:"SearchTags,omitempty" xml:"SearchTags,omitempty"`
	// The type of the vulnerability. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	// *   **cms**: Web-CMS vulnerability
	// *   **app**: application vulnerability
	// *   **emg**: urgent vulnerability
	// *   **sca**: vulnerability that is detected based on software component analysis
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The UUIDs of the servers. Separate multiple UUIDs with commas (,).
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeGroupedVulRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedVulRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupedVulRequest) SetAliasName(v string) *DescribeGroupedVulRequest {
	s.AliasName = &v
	return s
}

func (s *DescribeGroupedVulRequest) SetAttachTypes(v string) *DescribeGroupedVulRequest {
	s.AttachTypes = &v
	return s
}

func (s *DescribeGroupedVulRequest) SetCurrentPage(v int32) *DescribeGroupedVulRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeGroupedVulRequest) SetDealed(v string) *DescribeGroupedVulRequest {
	s.Dealed = &v
	return s
}

func (s *DescribeGroupedVulRequest) SetGroupId(v string) *DescribeGroupedVulRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeGroupedVulRequest) SetLang(v string) *DescribeGroupedVulRequest {
	s.Lang = &v
	return s
}

func (s *DescribeGroupedVulRequest) SetNecessity(v string) *DescribeGroupedVulRequest {
	s.Necessity = &v
	return s
}

func (s *DescribeGroupedVulRequest) SetPageSize(v int32) *DescribeGroupedVulRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupedVulRequest) SetSearchTags(v string) *DescribeGroupedVulRequest {
	s.SearchTags = &v
	return s
}

func (s *DescribeGroupedVulRequest) SetType(v string) *DescribeGroupedVulRequest {
	s.Type = &v
	return s
}

func (s *DescribeGroupedVulRequest) SetUuids(v string) *DescribeGroupedVulRequest {
	s.Uuids = &v
	return s
}

type DescribeGroupedVulResponseBody struct {
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// An array that consists of the vulnerabilities.
	GroupedVulItems []*DescribeGroupedVulResponseBodyGroupedVulItems `json:"GroupedVulItems,omitempty" xml:"GroupedVulItems,omitempty" type:"Repeated"`
	// The number of entries returned per page. Default value: 10.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeGroupedVulResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedVulResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupedVulResponseBody) SetCurrentPage(v int32) *DescribeGroupedVulResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeGroupedVulResponseBody) SetGroupedVulItems(v []*DescribeGroupedVulResponseBodyGroupedVulItems) *DescribeGroupedVulResponseBody {
	s.GroupedVulItems = v
	return s
}

func (s *DescribeGroupedVulResponseBody) SetPageSize(v int32) *DescribeGroupedVulResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupedVulResponseBody) SetRequestId(v string) *DescribeGroupedVulResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGroupedVulResponseBody) SetTotalCount(v int32) *DescribeGroupedVulResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeGroupedVulResponseBodyGroupedVulItems struct {
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The number of vulnerabilities that have the **high** priority.
	AsapCount *int32 `json:"AsapCount,omitempty" xml:"AsapCount,omitempty"`
	// The timestamp when the vulnerability was last detected. Unit: milliseconds.
	GmtLast *int64 `json:"GmtLast,omitempty" xml:"GmtLast,omitempty"`
	// The number of handled vulnerabilities.
	HandledCount *int32 `json:"HandledCount,omitempty" xml:"HandledCount,omitempty"`
	// The number of vulnerabilities that have the **medium** priority.
	LaterCount *int32 `json:"LaterCount,omitempty" xml:"LaterCount,omitempty"`
	// The name of the vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of vulnerabilities that have the **low** priority.
	NntfCount *int32 `json:"NntfCount,omitempty" xml:"NntfCount,omitempty"`
	// The tag that is added to the vulnerability. Valid values:
	//
	// *   Restart required
	// *   Remote exploitation
	// *   Exploit exists
	// *   Exploitable
	// *   Privilege escalation
	// *   Code execution
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The total number of fixed vulnerabilities.
	TotalFixCount *int64 `json:"TotalFixCount,omitempty" xml:"TotalFixCount,omitempty"`
	// The type of the vulnerability. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	// *   **cms**: Web-CMS vulnerability
	// *   **app**: application vulnerability
	// *   **emg**: urgent vulnerability
	// *   **sca**: vulnerability that is detected based on software component analysis
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeGroupedVulResponseBodyGroupedVulItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedVulResponseBodyGroupedVulItems) GoString() string {
	return s.String()
}

func (s *DescribeGroupedVulResponseBodyGroupedVulItems) SetAliasName(v string) *DescribeGroupedVulResponseBodyGroupedVulItems {
	s.AliasName = &v
	return s
}

func (s *DescribeGroupedVulResponseBodyGroupedVulItems) SetAsapCount(v int32) *DescribeGroupedVulResponseBodyGroupedVulItems {
	s.AsapCount = &v
	return s
}

func (s *DescribeGroupedVulResponseBodyGroupedVulItems) SetGmtLast(v int64) *DescribeGroupedVulResponseBodyGroupedVulItems {
	s.GmtLast = &v
	return s
}

func (s *DescribeGroupedVulResponseBodyGroupedVulItems) SetHandledCount(v int32) *DescribeGroupedVulResponseBodyGroupedVulItems {
	s.HandledCount = &v
	return s
}

func (s *DescribeGroupedVulResponseBodyGroupedVulItems) SetLaterCount(v int32) *DescribeGroupedVulResponseBodyGroupedVulItems {
	s.LaterCount = &v
	return s
}

func (s *DescribeGroupedVulResponseBodyGroupedVulItems) SetName(v string) *DescribeGroupedVulResponseBodyGroupedVulItems {
	s.Name = &v
	return s
}

func (s *DescribeGroupedVulResponseBodyGroupedVulItems) SetNntfCount(v int32) *DescribeGroupedVulResponseBodyGroupedVulItems {
	s.NntfCount = &v
	return s
}

func (s *DescribeGroupedVulResponseBodyGroupedVulItems) SetTags(v string) *DescribeGroupedVulResponseBodyGroupedVulItems {
	s.Tags = &v
	return s
}

func (s *DescribeGroupedVulResponseBodyGroupedVulItems) SetTotalFixCount(v int64) *DescribeGroupedVulResponseBodyGroupedVulItems {
	s.TotalFixCount = &v
	return s
}

func (s *DescribeGroupedVulResponseBodyGroupedVulItems) SetType(v string) *DescribeGroupedVulResponseBodyGroupedVulItems {
	s.Type = &v
	return s
}

type DescribeGroupedVulResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeGroupedVulResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeGroupedVulResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupedVulResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupedVulResponse) SetHeaders(v map[string]*string) *DescribeGroupedVulResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupedVulResponse) SetStatusCode(v int32) *DescribeGroupedVulResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupedVulResponse) SetBody(v *DescribeGroupedVulResponseBody) *DescribeGroupedVulResponse {
	s.Body = v
	return s
}

type DescribeHcExportInfoRequest struct {
	ExportId *int64 `json:"ExportId,omitempty" xml:"ExportId,omitempty"`
}

func (s DescribeHcExportInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHcExportInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeHcExportInfoRequest) SetExportId(v int64) *DescribeHcExportInfoRequest {
	s.ExportId = &v
	return s
}

type DescribeHcExportInfoResponseBody struct {
	CurrentCount *int32  `json:"CurrentCount,omitempty" xml:"CurrentCount,omitempty"`
	FileName     *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	GmtCreate    *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Link         *string `json:"Link,omitempty" xml:"Link,omitempty"`
	Progress     *int32  `json:"Progress,omitempty" xml:"Progress,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultStatus *string `json:"ResultStatus,omitempty" xml:"ResultStatus,omitempty"`
	TotalCount   *int32  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeHcExportInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHcExportInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHcExportInfoResponseBody) SetCurrentCount(v int32) *DescribeHcExportInfoResponseBody {
	s.CurrentCount = &v
	return s
}

func (s *DescribeHcExportInfoResponseBody) SetFileName(v string) *DescribeHcExportInfoResponseBody {
	s.FileName = &v
	return s
}

func (s *DescribeHcExportInfoResponseBody) SetGmtCreate(v int64) *DescribeHcExportInfoResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeHcExportInfoResponseBody) SetId(v int64) *DescribeHcExportInfoResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeHcExportInfoResponseBody) SetLink(v string) *DescribeHcExportInfoResponseBody {
	s.Link = &v
	return s
}

func (s *DescribeHcExportInfoResponseBody) SetProgress(v int32) *DescribeHcExportInfoResponseBody {
	s.Progress = &v
	return s
}

func (s *DescribeHcExportInfoResponseBody) SetRequestId(v string) *DescribeHcExportInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHcExportInfoResponseBody) SetResultStatus(v string) *DescribeHcExportInfoResponseBody {
	s.ResultStatus = &v
	return s
}

func (s *DescribeHcExportInfoResponseBody) SetTotalCount(v int32) *DescribeHcExportInfoResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeHcExportInfoResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeHcExportInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHcExportInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHcExportInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeHcExportInfoResponse) SetHeaders(v map[string]*string) *DescribeHcExportInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeHcExportInfoResponse) SetStatusCode(v int32) *DescribeHcExportInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHcExportInfoResponse) SetBody(v *DescribeHcExportInfoResponseBody) *DescribeHcExportInfoResponse {
	s.Body = v
	return s
}

type DescribeHoneyPotAuthResponseBody struct {
	// The total quota.
	HoneyPotAuthCount *int64 `json:"HoneyPotAuthCount,omitempty" xml:"HoneyPotAuthCount,omitempty"`
	// The quota that is consumed.
	HoneyPotCount *int32 `json:"HoneyPotCount,omitempty" xml:"HoneyPotCount,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeHoneyPotAuthResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHoneyPotAuthResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHoneyPotAuthResponseBody) SetHoneyPotAuthCount(v int64) *DescribeHoneyPotAuthResponseBody {
	s.HoneyPotAuthCount = &v
	return s
}

func (s *DescribeHoneyPotAuthResponseBody) SetHoneyPotCount(v int32) *DescribeHoneyPotAuthResponseBody {
	s.HoneyPotCount = &v
	return s
}

func (s *DescribeHoneyPotAuthResponseBody) SetRequestId(v string) *DescribeHoneyPotAuthResponseBody {
	s.RequestId = &v
	return s
}

type DescribeHoneyPotAuthResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeHoneyPotAuthResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHoneyPotAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHoneyPotAuthResponse) GoString() string {
	return s.String()
}

func (s *DescribeHoneyPotAuthResponse) SetHeaders(v map[string]*string) *DescribeHoneyPotAuthResponse {
	s.Headers = v
	return s
}

func (s *DescribeHoneyPotAuthResponse) SetStatusCode(v int32) *DescribeHoneyPotAuthResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHoneyPotAuthResponse) SetBody(v *DescribeHoneyPotAuthResponseBody) *DescribeHoneyPotAuthResponse {
	s.Body = v
	return s
}

type DescribeHoneyPotSuspStatisticsRequest struct {
	// The source of the request. Set the value to **honeypot**.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// The time range of the data to query. Unit: days.
	StatisticsDays *int32 `json:"StatisticsDays,omitempty" xml:"StatisticsDays,omitempty"`
	// The type of the asset to query. Valid values:
	//
	// *   **vpcInstanceId**: VPC
	// *   **uuid**: server
	StatisticsKeyType *string `json:"StatisticsKeyType,omitempty" xml:"StatisticsKeyType,omitempty"`
}

func (s DescribeHoneyPotSuspStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHoneyPotSuspStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeHoneyPotSuspStatisticsRequest) SetFrom(v string) *DescribeHoneyPotSuspStatisticsRequest {
	s.From = &v
	return s
}

func (s *DescribeHoneyPotSuspStatisticsRequest) SetStatisticsDays(v int32) *DescribeHoneyPotSuspStatisticsRequest {
	s.StatisticsDays = &v
	return s
}

func (s *DescribeHoneyPotSuspStatisticsRequest) SetStatisticsKeyType(v string) *DescribeHoneyPotSuspStatisticsRequest {
	s.StatisticsKeyType = &v
	return s
}

type DescribeHoneyPotSuspStatisticsResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array consisting of the top 5 VPCs or assets for which alerts are most frequently generated.
	SuspHoneyPotStatisticsResponse []*DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse `json:"SuspHoneyPotStatisticsResponse,omitempty" xml:"SuspHoneyPotStatisticsResponse,omitempty" type:"Repeated"`
}

func (s DescribeHoneyPotSuspStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHoneyPotSuspStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHoneyPotSuspStatisticsResponseBody) SetRequestId(v string) *DescribeHoneyPotSuspStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHoneyPotSuspStatisticsResponseBody) SetSuspHoneyPotStatisticsResponse(v []*DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse) *DescribeHoneyPotSuspStatisticsResponseBody {
	s.SuspHoneyPotStatisticsResponse = v
	return s
}

type DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse struct {
	// The total number of alerts that are generated for the asset.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The ID of the server.
	//
	// >  This parameter is returned only if **StatisticsKeyType** is set to **uuid**.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	//
	// >  This parameter is returned only if **StatisticsKeyType** is set to **uuid**.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The type of the asset. Valid values:
	//
	// *   **vpcInstanceId**: VPC
	// *   **uuid**: server
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the VPC.
	//
	// >  This parameter is returned only if **StatisticsKeyType** is set to **vpcInstanceId**.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The name of the VPC.
	//
	// >  This parameter is returned only if **StatisticsKeyType** is set to **vpcInstanceId**.
	VpcName *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
}

func (s DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse) SetCount(v int32) *DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse {
	s.Count = &v
	return s
}

func (s *DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse) SetInstanceId(v string) *DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse {
	s.InstanceId = &v
	return s
}

func (s *DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse) SetInstanceName(v string) *DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse {
	s.InstanceName = &v
	return s
}

func (s *DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse) SetType(v string) *DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse {
	s.Type = &v
	return s
}

func (s *DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse) SetVpcId(v string) *DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse {
	s.VpcId = &v
	return s
}

func (s *DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse) SetVpcName(v string) *DescribeHoneyPotSuspStatisticsResponseBodySuspHoneyPotStatisticsResponse {
	s.VpcName = &v
	return s
}

type DescribeHoneyPotSuspStatisticsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeHoneyPotSuspStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHoneyPotSuspStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHoneyPotSuspStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeHoneyPotSuspStatisticsResponse) SetHeaders(v map[string]*string) *DescribeHoneyPotSuspStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeHoneyPotSuspStatisticsResponse) SetStatusCode(v int32) *DescribeHoneyPotSuspStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHoneyPotSuspStatisticsResponse) SetBody(v *DescribeHoneyPotSuspStatisticsResponseBody) *DescribeHoneyPotSuspStatisticsResponse {
	s.Body = v
	return s
}

type DescribeImageRequest struct {
	ImageInstanceId *string `json:"ImageInstanceId,omitempty" xml:"ImageInstanceId,omitempty"`
	ImageRegionId   *string `json:"ImageRegionId,omitempty" xml:"ImageRegionId,omitempty"`
	ImageRepoId     *string `json:"ImageRepoId,omitempty" xml:"ImageRepoId,omitempty"`
	ImageTag        *string `json:"ImageTag,omitempty" xml:"ImageTag,omitempty"`
}

func (s DescribeImageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageRequest) SetImageInstanceId(v string) *DescribeImageRequest {
	s.ImageInstanceId = &v
	return s
}

func (s *DescribeImageRequest) SetImageRegionId(v string) *DescribeImageRequest {
	s.ImageRegionId = &v
	return s
}

func (s *DescribeImageRequest) SetImageRepoId(v string) *DescribeImageRequest {
	s.ImageRepoId = &v
	return s
}

func (s *DescribeImageRequest) SetImageTag(v string) *DescribeImageRequest {
	s.ImageTag = &v
	return s
}

type DescribeImageResponseBody struct {
	Data      *DescribeImageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageResponseBody) SetData(v *DescribeImageResponseBodyData) *DescribeImageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeImageResponseBody) SetRequestId(v string) *DescribeImageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageResponseBodyData struct {
	Digest *string `json:"Digest,omitempty" xml:"Digest,omitempty"`
}

func (s DescribeImageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeImageResponseBodyData) SetDigest(v string) *DescribeImageResponseBodyData {
	s.Digest = &v
	return s
}

type DescribeImageResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageResponse) SetHeaders(v map[string]*string) *DescribeImageResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageResponse) SetStatusCode(v int32) *DescribeImageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageResponse) SetBody(v *DescribeImageResponseBody) *DescribeImageResponse {
	s.Body = v
	return s
}

type DescribeImageBaselineCheckResultRequest struct {
	Criteria     *string   `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	CriteriaType *string   `json:"CriteriaType,omitempty" xml:"CriteriaType,omitempty"`
	CurrentPage  *int32    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ImageUuid    *string   `json:"ImageUuid,omitempty" xml:"ImageUuid,omitempty"`
	Lang         *string   `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize     *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RiskLevel    *string   `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	ScanRange    []*string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty" type:"Repeated"`
}

func (s DescribeImageBaselineCheckResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineCheckResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineCheckResultRequest) SetCriteria(v string) *DescribeImageBaselineCheckResultRequest {
	s.Criteria = &v
	return s
}

func (s *DescribeImageBaselineCheckResultRequest) SetCriteriaType(v string) *DescribeImageBaselineCheckResultRequest {
	s.CriteriaType = &v
	return s
}

func (s *DescribeImageBaselineCheckResultRequest) SetCurrentPage(v int32) *DescribeImageBaselineCheckResultRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageBaselineCheckResultRequest) SetImageUuid(v string) *DescribeImageBaselineCheckResultRequest {
	s.ImageUuid = &v
	return s
}

func (s *DescribeImageBaselineCheckResultRequest) SetLang(v string) *DescribeImageBaselineCheckResultRequest {
	s.Lang = &v
	return s
}

func (s *DescribeImageBaselineCheckResultRequest) SetPageSize(v int32) *DescribeImageBaselineCheckResultRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageBaselineCheckResultRequest) SetRiskLevel(v string) *DescribeImageBaselineCheckResultRequest {
	s.RiskLevel = &v
	return s
}

func (s *DescribeImageBaselineCheckResultRequest) SetScanRange(v []*string) *DescribeImageBaselineCheckResultRequest {
	s.ScanRange = v
	return s
}

type DescribeImageBaselineCheckResultResponseBody struct {
	BaselineResult []*DescribeImageBaselineCheckResultResponseBodyBaselineResult `json:"BaselineResult,omitempty" xml:"BaselineResult,omitempty" type:"Repeated"`
	PageInfo       *DescribeImageBaselineCheckResultResponseBodyPageInfo         `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId      *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageBaselineCheckResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineCheckResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineCheckResultResponseBody) SetBaselineResult(v []*DescribeImageBaselineCheckResultResponseBodyBaselineResult) *DescribeImageBaselineCheckResultResponseBody {
	s.BaselineResult = v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBody) SetPageInfo(v *DescribeImageBaselineCheckResultResponseBodyPageInfo) *DescribeImageBaselineCheckResultResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBody) SetRequestId(v string) *DescribeImageBaselineCheckResultResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageBaselineCheckResultResponseBodyBaselineResult struct {
	BaselineClassAlias  *string `json:"BaselineClassAlias,omitempty" xml:"BaselineClassAlias,omitempty"`
	BaselineItemCount   *int32  `json:"BaselineItemCount,omitempty" xml:"BaselineItemCount,omitempty"`
	BaselineNameAlias   *string `json:"BaselineNameAlias,omitempty" xml:"BaselineNameAlias,omitempty"`
	BaselineNameKey     *string `json:"BaselineNameKey,omitempty" xml:"BaselineNameKey,omitempty"`
	BaselineNameLevel   *string `json:"BaselineNameLevel,omitempty" xml:"BaselineNameLevel,omitempty"`
	FirstScanTime       *int64  `json:"FirstScanTime,omitempty" xml:"FirstScanTime,omitempty"`
	HighRiskItemCount   *int32  `json:"HighRiskItemCount,omitempty" xml:"HighRiskItemCount,omitempty"`
	LastScanTime        *int64  `json:"LastScanTime,omitempty" xml:"LastScanTime,omitempty"`
	LowRiskItemCount    *int32  `json:"LowRiskItemCount,omitempty" xml:"LowRiskItemCount,omitempty"`
	MiddleRiskItemCount *int32  `json:"MiddleRiskItemCount,omitempty" xml:"MiddleRiskItemCount,omitempty"`
	Status              *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeImageBaselineCheckResultResponseBodyBaselineResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineCheckResultResponseBodyBaselineResult) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineCheckResultResponseBodyBaselineResult) SetBaselineClassAlias(v string) *DescribeImageBaselineCheckResultResponseBodyBaselineResult {
	s.BaselineClassAlias = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBodyBaselineResult) SetBaselineItemCount(v int32) *DescribeImageBaselineCheckResultResponseBodyBaselineResult {
	s.BaselineItemCount = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBodyBaselineResult) SetBaselineNameAlias(v string) *DescribeImageBaselineCheckResultResponseBodyBaselineResult {
	s.BaselineNameAlias = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBodyBaselineResult) SetBaselineNameKey(v string) *DescribeImageBaselineCheckResultResponseBodyBaselineResult {
	s.BaselineNameKey = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBodyBaselineResult) SetBaselineNameLevel(v string) *DescribeImageBaselineCheckResultResponseBodyBaselineResult {
	s.BaselineNameLevel = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBodyBaselineResult) SetFirstScanTime(v int64) *DescribeImageBaselineCheckResultResponseBodyBaselineResult {
	s.FirstScanTime = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBodyBaselineResult) SetHighRiskItemCount(v int32) *DescribeImageBaselineCheckResultResponseBodyBaselineResult {
	s.HighRiskItemCount = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBodyBaselineResult) SetLastScanTime(v int64) *DescribeImageBaselineCheckResultResponseBodyBaselineResult {
	s.LastScanTime = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBodyBaselineResult) SetLowRiskItemCount(v int32) *DescribeImageBaselineCheckResultResponseBodyBaselineResult {
	s.LowRiskItemCount = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBodyBaselineResult) SetMiddleRiskItemCount(v int32) *DescribeImageBaselineCheckResultResponseBodyBaselineResult {
	s.MiddleRiskItemCount = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBodyBaselineResult) SetStatus(v int32) *DescribeImageBaselineCheckResultResponseBodyBaselineResult {
	s.Status = &v
	return s
}

type DescribeImageBaselineCheckResultResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageBaselineCheckResultResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineCheckResultResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineCheckResultResponseBodyPageInfo) SetCount(v int32) *DescribeImageBaselineCheckResultResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeImageBaselineCheckResultResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBodyPageInfo) SetPageSize(v int32) *DescribeImageBaselineCheckResultResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponseBodyPageInfo) SetTotalCount(v int32) *DescribeImageBaselineCheckResultResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeImageBaselineCheckResultResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageBaselineCheckResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageBaselineCheckResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineCheckResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineCheckResultResponse) SetHeaders(v map[string]*string) *DescribeImageBaselineCheckResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageBaselineCheckResultResponse) SetStatusCode(v int32) *DescribeImageBaselineCheckResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageBaselineCheckResultResponse) SetBody(v *DescribeImageBaselineCheckResultResponseBody) *DescribeImageBaselineCheckResultResponse {
	s.Body = v
	return s
}

type DescribeImageBaselineCheckSummaryRequest struct {
	// The ID of the container cluster.
	//
	// >  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The search condition for the image baseline.
	Criteria *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	// The type of the search condition. Valid values:
	//
	// *   **BaselineNameAlias**: baseline name
	// *   **BaselineClassAlias**: baseline category
	CriteriaType *string `json:"CriteriaType,omitempty" xml:"CriteriaType,omitempty"`
	// The number of the page to return. Pages start from page **1**. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The severity of the image baseline that you want to query. Separate multiple severities with commas (,). Valid values:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// The types of the assets that you want to scan.
	ScanRange []*string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty" type:"Repeated"`
}

func (s DescribeImageBaselineCheckSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineCheckSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineCheckSummaryRequest) SetClusterId(v string) *DescribeImageBaselineCheckSummaryRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryRequest) SetCriteria(v string) *DescribeImageBaselineCheckSummaryRequest {
	s.Criteria = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryRequest) SetCriteriaType(v string) *DescribeImageBaselineCheckSummaryRequest {
	s.CriteriaType = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryRequest) SetCurrentPage(v int32) *DescribeImageBaselineCheckSummaryRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryRequest) SetLang(v string) *DescribeImageBaselineCheckSummaryRequest {
	s.Lang = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryRequest) SetPageSize(v int32) *DescribeImageBaselineCheckSummaryRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryRequest) SetRiskLevel(v string) *DescribeImageBaselineCheckSummaryRequest {
	s.RiskLevel = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryRequest) SetScanRange(v []*string) *DescribeImageBaselineCheckSummaryRequest {
	s.ScanRange = v
	return s
}

type DescribeImageBaselineCheckSummaryResponseBody struct {
	// An array that consists of the check results of image baselines.
	BaselineResultSummary []*DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary `json:"BaselineResultSummary,omitempty" xml:"BaselineResultSummary,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *DescribeImageBaselineCheckSummaryResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageBaselineCheckSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineCheckSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineCheckSummaryResponseBody) SetBaselineResultSummary(v []*DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) *DescribeImageBaselineCheckSummaryResponseBody {
	s.BaselineResultSummary = v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBody) SetPageInfo(v *DescribeImageBaselineCheckSummaryResponseBodyPageInfo) *DescribeImageBaselineCheckSummaryResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBody) SetRequestId(v string) *DescribeImageBaselineCheckSummaryResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary struct {
	// The category of the baseline.
	BaselineClassAlias *string `json:"BaselineClassAlias,omitempty" xml:"BaselineClassAlias,omitempty"`
	// The keyword of the baseline category.
	BaselineClassKey *string `json:"BaselineClassKey,omitempty" xml:"BaselineClassKey,omitempty"`
	// The name of the baseline.
	BaselineNameAlias *string `json:"BaselineNameAlias,omitempty" xml:"BaselineNameAlias,omitempty"`
	// The keyword of the baseline name.
	BaselineNameKey *string `json:"BaselineNameKey,omitempty" xml:"BaselineNameKey,omitempty"`
	// The severity of the image baseline. Valid values:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	BaselineNameLevel *string `json:"BaselineNameLevel,omitempty" xml:"BaselineNameLevel,omitempty"`
	// The timestamp when the first scan was performed. Unit: milliseconds.
	FirstScanTime *int64 `json:"FirstScanTime,omitempty" xml:"FirstScanTime,omitempty"`
	// The number of images on which **high** baseline risks are detected.
	HighRiskImage *int32 `json:"HighRiskImage,omitempty" xml:"HighRiskImage,omitempty"`
	// The timestamp when the last scan was performed. Unit: milliseconds.
	LastScanTime *int64 `json:"LastScanTime,omitempty" xml:"LastScanTime,omitempty"`
	// The number of images on which **low** baseline risks are detected.
	LowRiskImage *int32 `json:"LowRiskImage,omitempty" xml:"LowRiskImage,omitempty"`
	// The number of images on which **medium** baseline risks are detected.
	MiddleRiskImage *int32 `json:"MiddleRiskImage,omitempty" xml:"MiddleRiskImage,omitempty"`
	// The status of the baseline risks. Valid values:
	//
	// *   **0**: unfixed
	// *   **1**: fixed
	// *   **2**: pending verification
	// *   **3**: fixing failed
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) SetBaselineClassAlias(v string) *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary {
	s.BaselineClassAlias = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) SetBaselineClassKey(v string) *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary {
	s.BaselineClassKey = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) SetBaselineNameAlias(v string) *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary {
	s.BaselineNameAlias = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) SetBaselineNameKey(v string) *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary {
	s.BaselineNameKey = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) SetBaselineNameLevel(v string) *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary {
	s.BaselineNameLevel = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) SetFirstScanTime(v int64) *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary {
	s.FirstScanTime = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) SetHighRiskImage(v int32) *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary {
	s.HighRiskImage = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) SetLastScanTime(v int64) *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary {
	s.LastScanTime = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) SetLowRiskImage(v int32) *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary {
	s.LowRiskImage = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) SetMiddleRiskImage(v int32) *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary {
	s.MiddleRiskImage = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary) SetStatus(v int32) *DescribeImageBaselineCheckSummaryResponseBodyBaselineResultSummary {
	s.Status = &v
	return s
}

type DescribeImageBaselineCheckSummaryResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageBaselineCheckSummaryResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineCheckSummaryResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyPageInfo) SetCount(v int32) *DescribeImageBaselineCheckSummaryResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeImageBaselineCheckSummaryResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyPageInfo) SetPageSize(v int32) *DescribeImageBaselineCheckSummaryResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponseBodyPageInfo) SetTotalCount(v int32) *DescribeImageBaselineCheckSummaryResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeImageBaselineCheckSummaryResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageBaselineCheckSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageBaselineCheckSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineCheckSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineCheckSummaryResponse) SetHeaders(v map[string]*string) *DescribeImageBaselineCheckSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponse) SetStatusCode(v int32) *DescribeImageBaselineCheckSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageBaselineCheckSummaryResponse) SetBody(v *DescribeImageBaselineCheckSummaryResponseBody) *DescribeImageBaselineCheckSummaryResponse {
	s.Body = v
	return s
}

type DescribeImageBaselineDetailRequest struct {
	BaselineItemKey *string `json:"BaselineItemKey,omitempty" xml:"BaselineItemKey,omitempty"`
	ImageUuid       *string `json:"ImageUuid,omitempty" xml:"ImageUuid,omitempty"`
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s DescribeImageBaselineDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineDetailRequest) SetBaselineItemKey(v string) *DescribeImageBaselineDetailRequest {
	s.BaselineItemKey = &v
	return s
}

func (s *DescribeImageBaselineDetailRequest) SetImageUuid(v string) *DescribeImageBaselineDetailRequest {
	s.ImageUuid = &v
	return s
}

func (s *DescribeImageBaselineDetailRequest) SetLang(v string) *DescribeImageBaselineDetailRequest {
	s.Lang = &v
	return s
}

type DescribeImageBaselineDetailResponseBody struct {
	BaselineDetail *DescribeImageBaselineDetailResponseBodyBaselineDetail `json:"BaselineDetail,omitempty" xml:"BaselineDetail,omitempty" type:"Struct"`
	RequestId      *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageBaselineDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineDetailResponseBody) SetBaselineDetail(v *DescribeImageBaselineDetailResponseBodyBaselineDetail) *DescribeImageBaselineDetailResponseBody {
	s.BaselineDetail = v
	return s
}

func (s *DescribeImageBaselineDetailResponseBody) SetRequestId(v string) *DescribeImageBaselineDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageBaselineDetailResponseBodyBaselineDetail struct {
	Advice             *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	BaselineClassAlias *string `json:"BaselineClassAlias,omitempty" xml:"BaselineClassAlias,omitempty"`
	BaselineItemAlias  *string `json:"BaselineItemAlias,omitempty" xml:"BaselineItemAlias,omitempty"`
	BaselineItemKey    *string `json:"BaselineItemKey,omitempty" xml:"BaselineItemKey,omitempty"`
	BaselineNameAlias  *string `json:"BaselineNameAlias,omitempty" xml:"BaselineNameAlias,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Level              *string `json:"Level,omitempty" xml:"Level,omitempty"`
	Prompt             *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	ResultId           *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
}

func (s DescribeImageBaselineDetailResponseBodyBaselineDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineDetailResponseBodyBaselineDetail) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineDetailResponseBodyBaselineDetail) SetAdvice(v string) *DescribeImageBaselineDetailResponseBodyBaselineDetail {
	s.Advice = &v
	return s
}

func (s *DescribeImageBaselineDetailResponseBodyBaselineDetail) SetBaselineClassAlias(v string) *DescribeImageBaselineDetailResponseBodyBaselineDetail {
	s.BaselineClassAlias = &v
	return s
}

func (s *DescribeImageBaselineDetailResponseBodyBaselineDetail) SetBaselineItemAlias(v string) *DescribeImageBaselineDetailResponseBodyBaselineDetail {
	s.BaselineItemAlias = &v
	return s
}

func (s *DescribeImageBaselineDetailResponseBodyBaselineDetail) SetBaselineItemKey(v string) *DescribeImageBaselineDetailResponseBodyBaselineDetail {
	s.BaselineItemKey = &v
	return s
}

func (s *DescribeImageBaselineDetailResponseBodyBaselineDetail) SetBaselineNameAlias(v string) *DescribeImageBaselineDetailResponseBodyBaselineDetail {
	s.BaselineNameAlias = &v
	return s
}

func (s *DescribeImageBaselineDetailResponseBodyBaselineDetail) SetDescription(v string) *DescribeImageBaselineDetailResponseBodyBaselineDetail {
	s.Description = &v
	return s
}

func (s *DescribeImageBaselineDetailResponseBodyBaselineDetail) SetLevel(v string) *DescribeImageBaselineDetailResponseBodyBaselineDetail {
	s.Level = &v
	return s
}

func (s *DescribeImageBaselineDetailResponseBodyBaselineDetail) SetPrompt(v string) *DescribeImageBaselineDetailResponseBodyBaselineDetail {
	s.Prompt = &v
	return s
}

func (s *DescribeImageBaselineDetailResponseBodyBaselineDetail) SetResultId(v string) *DescribeImageBaselineDetailResponseBodyBaselineDetail {
	s.ResultId = &v
	return s
}

type DescribeImageBaselineDetailResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageBaselineDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageBaselineDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineDetailResponse) SetHeaders(v map[string]*string) *DescribeImageBaselineDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageBaselineDetailResponse) SetStatusCode(v int32) *DescribeImageBaselineDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageBaselineDetailResponse) SetBody(v *DescribeImageBaselineDetailResponseBody) *DescribeImageBaselineDetailResponse {
	s.Body = v
	return s
}

type DescribeImageBaselineItemListRequest struct {
	BaselineClassKey *string   `json:"BaselineClassKey,omitempty" xml:"BaselineClassKey,omitempty"`
	BaselineNameKey  *string   `json:"BaselineNameKey,omitempty" xml:"BaselineNameKey,omitempty"`
	CurrentPage      *int32    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ImageUuid        *string   `json:"ImageUuid,omitempty" xml:"ImageUuid,omitempty"`
	Lang             *string   `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize         *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ScanRange        []*string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty" type:"Repeated"`
	Status           *string   `json:"Status,omitempty" xml:"Status,omitempty"`
	Uuids            []*string `json:"Uuids,omitempty" xml:"Uuids,omitempty" type:"Repeated"`
}

func (s DescribeImageBaselineItemListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineItemListRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineItemListRequest) SetBaselineClassKey(v string) *DescribeImageBaselineItemListRequest {
	s.BaselineClassKey = &v
	return s
}

func (s *DescribeImageBaselineItemListRequest) SetBaselineNameKey(v string) *DescribeImageBaselineItemListRequest {
	s.BaselineNameKey = &v
	return s
}

func (s *DescribeImageBaselineItemListRequest) SetCurrentPage(v int32) *DescribeImageBaselineItemListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageBaselineItemListRequest) SetImageUuid(v string) *DescribeImageBaselineItemListRequest {
	s.ImageUuid = &v
	return s
}

func (s *DescribeImageBaselineItemListRequest) SetLang(v string) *DescribeImageBaselineItemListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeImageBaselineItemListRequest) SetPageSize(v int32) *DescribeImageBaselineItemListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageBaselineItemListRequest) SetScanRange(v []*string) *DescribeImageBaselineItemListRequest {
	s.ScanRange = v
	return s
}

func (s *DescribeImageBaselineItemListRequest) SetStatus(v string) *DescribeImageBaselineItemListRequest {
	s.Status = &v
	return s
}

func (s *DescribeImageBaselineItemListRequest) SetUuids(v []*string) *DescribeImageBaselineItemListRequest {
	s.Uuids = v
	return s
}

type DescribeImageBaselineItemListResponseBody struct {
	BaselineItemInfos []*DescribeImageBaselineItemListResponseBodyBaselineItemInfos `json:"BaselineItemInfos,omitempty" xml:"BaselineItemInfos,omitempty" type:"Repeated"`
	PageInfo          *DescribeImageBaselineItemListResponseBodyPageInfo            `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId         *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageBaselineItemListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineItemListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineItemListResponseBody) SetBaselineItemInfos(v []*DescribeImageBaselineItemListResponseBodyBaselineItemInfos) *DescribeImageBaselineItemListResponseBody {
	s.BaselineItemInfos = v
	return s
}

func (s *DescribeImageBaselineItemListResponseBody) SetPageInfo(v *DescribeImageBaselineItemListResponseBodyPageInfo) *DescribeImageBaselineItemListResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeImageBaselineItemListResponseBody) SetRequestId(v string) *DescribeImageBaselineItemListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageBaselineItemListResponseBodyBaselineItemInfos struct {
	BaselineClassAlias *string `json:"BaselineClassAlias,omitempty" xml:"BaselineClassAlias,omitempty"`
	BaselineClassKey   *string `json:"BaselineClassKey,omitempty" xml:"BaselineClassKey,omitempty"`
	BaselineItemAlias  *string `json:"BaselineItemAlias,omitempty" xml:"BaselineItemAlias,omitempty"`
	BaselineItemKey    *string `json:"BaselineItemKey,omitempty" xml:"BaselineItemKey,omitempty"`
	BaselineNameAlias  *string `json:"BaselineNameAlias,omitempty" xml:"BaselineNameAlias,omitempty"`
	BaselineNameKey    *string `json:"BaselineNameKey,omitempty" xml:"BaselineNameKey,omitempty"`
	Status             *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	WhiteList          *int32  `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s DescribeImageBaselineItemListResponseBodyBaselineItemInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineItemListResponseBodyBaselineItemInfos) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineItemListResponseBodyBaselineItemInfos) SetBaselineClassAlias(v string) *DescribeImageBaselineItemListResponseBodyBaselineItemInfos {
	s.BaselineClassAlias = &v
	return s
}

func (s *DescribeImageBaselineItemListResponseBodyBaselineItemInfos) SetBaselineClassKey(v string) *DescribeImageBaselineItemListResponseBodyBaselineItemInfos {
	s.BaselineClassKey = &v
	return s
}

func (s *DescribeImageBaselineItemListResponseBodyBaselineItemInfos) SetBaselineItemAlias(v string) *DescribeImageBaselineItemListResponseBodyBaselineItemInfos {
	s.BaselineItemAlias = &v
	return s
}

func (s *DescribeImageBaselineItemListResponseBodyBaselineItemInfos) SetBaselineItemKey(v string) *DescribeImageBaselineItemListResponseBodyBaselineItemInfos {
	s.BaselineItemKey = &v
	return s
}

func (s *DescribeImageBaselineItemListResponseBodyBaselineItemInfos) SetBaselineNameAlias(v string) *DescribeImageBaselineItemListResponseBodyBaselineItemInfos {
	s.BaselineNameAlias = &v
	return s
}

func (s *DescribeImageBaselineItemListResponseBodyBaselineItemInfos) SetBaselineNameKey(v string) *DescribeImageBaselineItemListResponseBodyBaselineItemInfos {
	s.BaselineNameKey = &v
	return s
}

func (s *DescribeImageBaselineItemListResponseBodyBaselineItemInfos) SetStatus(v int32) *DescribeImageBaselineItemListResponseBodyBaselineItemInfos {
	s.Status = &v
	return s
}

func (s *DescribeImageBaselineItemListResponseBodyBaselineItemInfos) SetWhiteList(v int32) *DescribeImageBaselineItemListResponseBodyBaselineItemInfos {
	s.WhiteList = &v
	return s
}

type DescribeImageBaselineItemListResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageBaselineItemListResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineItemListResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineItemListResponseBodyPageInfo) SetCount(v int32) *DescribeImageBaselineItemListResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeImageBaselineItemListResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeImageBaselineItemListResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageBaselineItemListResponseBodyPageInfo) SetPageSize(v int32) *DescribeImageBaselineItemListResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeImageBaselineItemListResponseBodyPageInfo) SetTotalCount(v int32) *DescribeImageBaselineItemListResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeImageBaselineItemListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageBaselineItemListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageBaselineItemListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineItemListResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineItemListResponse) SetHeaders(v map[string]*string) *DescribeImageBaselineItemListResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageBaselineItemListResponse) SetStatusCode(v int32) *DescribeImageBaselineItemListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageBaselineItemListResponse) SetBody(v *DescribeImageBaselineItemListResponseBody) *DescribeImageBaselineItemListResponse {
	s.Body = v
	return s
}

type DescribeImageBaselineStrategyRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	StrategyId *int64  `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
}

func (s DescribeImageBaselineStrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineStrategyRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineStrategyRequest) SetLang(v string) *DescribeImageBaselineStrategyRequest {
	s.Lang = &v
	return s
}

func (s *DescribeImageBaselineStrategyRequest) SetStrategyId(v int64) *DescribeImageBaselineStrategyRequest {
	s.StrategyId = &v
	return s
}

type DescribeImageBaselineStrategyResponseBody struct {
	RequestId *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Strategy  *DescribeImageBaselineStrategyResponseBodyStrategy `json:"Strategy,omitempty" xml:"Strategy,omitempty" type:"Struct"`
}

func (s DescribeImageBaselineStrategyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineStrategyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineStrategyResponseBody) SetRequestId(v string) *DescribeImageBaselineStrategyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageBaselineStrategyResponseBody) SetStrategy(v *DescribeImageBaselineStrategyResponseBodyStrategy) *DescribeImageBaselineStrategyResponseBody {
	s.Strategy = v
	return s
}

type DescribeImageBaselineStrategyResponseBodyStrategy struct {
	BaselineItemList  []*DescribeImageBaselineStrategyResponseBodyStrategyBaselineItemList `json:"BaselineItemList,omitempty" xml:"BaselineItemList,omitempty" type:"Repeated"`
	SelectedItemCount *int32                                                               `json:"SelectedItemCount,omitempty" xml:"SelectedItemCount,omitempty"`
	StrategyId        *int64                                                               `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	StrategyName      *string                                                              `json:"StrategyName,omitempty" xml:"StrategyName,omitempty"`
	TotalItemCount    *int32                                                               `json:"TotalItemCount,omitempty" xml:"TotalItemCount,omitempty"`
	Type              *string                                                              `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeImageBaselineStrategyResponseBodyStrategy) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineStrategyResponseBodyStrategy) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineStrategyResponseBodyStrategy) SetBaselineItemList(v []*DescribeImageBaselineStrategyResponseBodyStrategyBaselineItemList) *DescribeImageBaselineStrategyResponseBodyStrategy {
	s.BaselineItemList = v
	return s
}

func (s *DescribeImageBaselineStrategyResponseBodyStrategy) SetSelectedItemCount(v int32) *DescribeImageBaselineStrategyResponseBodyStrategy {
	s.SelectedItemCount = &v
	return s
}

func (s *DescribeImageBaselineStrategyResponseBodyStrategy) SetStrategyId(v int64) *DescribeImageBaselineStrategyResponseBodyStrategy {
	s.StrategyId = &v
	return s
}

func (s *DescribeImageBaselineStrategyResponseBodyStrategy) SetStrategyName(v string) *DescribeImageBaselineStrategyResponseBodyStrategy {
	s.StrategyName = &v
	return s
}

func (s *DescribeImageBaselineStrategyResponseBodyStrategy) SetTotalItemCount(v int32) *DescribeImageBaselineStrategyResponseBodyStrategy {
	s.TotalItemCount = &v
	return s
}

func (s *DescribeImageBaselineStrategyResponseBodyStrategy) SetType(v string) *DescribeImageBaselineStrategyResponseBodyStrategy {
	s.Type = &v
	return s
}

type DescribeImageBaselineStrategyResponseBodyStrategyBaselineItemList struct {
	ClassKey *string `json:"ClassKey,omitempty" xml:"ClassKey,omitempty"`
	ItemKey  *string `json:"ItemKey,omitempty" xml:"ItemKey,omitempty"`
	NameKey  *string `json:"NameKey,omitempty" xml:"NameKey,omitempty"`
}

func (s DescribeImageBaselineStrategyResponseBodyStrategyBaselineItemList) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineStrategyResponseBodyStrategyBaselineItemList) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineStrategyResponseBodyStrategyBaselineItemList) SetClassKey(v string) *DescribeImageBaselineStrategyResponseBodyStrategyBaselineItemList {
	s.ClassKey = &v
	return s
}

func (s *DescribeImageBaselineStrategyResponseBodyStrategyBaselineItemList) SetItemKey(v string) *DescribeImageBaselineStrategyResponseBodyStrategyBaselineItemList {
	s.ItemKey = &v
	return s
}

func (s *DescribeImageBaselineStrategyResponseBodyStrategyBaselineItemList) SetNameKey(v string) *DescribeImageBaselineStrategyResponseBodyStrategyBaselineItemList {
	s.NameKey = &v
	return s
}

type DescribeImageBaselineStrategyResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageBaselineStrategyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageBaselineStrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageBaselineStrategyResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageBaselineStrategyResponse) SetHeaders(v map[string]*string) *DescribeImageBaselineStrategyResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageBaselineStrategyResponse) SetStatusCode(v int32) *DescribeImageBaselineStrategyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageBaselineStrategyResponse) SetBody(v *DescribeImageBaselineStrategyResponseBody) *DescribeImageBaselineStrategyResponse {
	s.Body = v
	return s
}

type DescribeImageCriteriaRequest struct {
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeImageCriteriaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageCriteriaRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageCriteriaRequest) SetValue(v string) *DescribeImageCriteriaRequest {
	s.Value = &v
	return s
}

type DescribeImageCriteriaResponseBody struct {
	CriteriaList []*DescribeImageCriteriaResponseBodyCriteriaList `json:"CriteriaList,omitempty" xml:"CriteriaList,omitempty" type:"Repeated"`
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageCriteriaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageCriteriaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageCriteriaResponseBody) SetCriteriaList(v []*DescribeImageCriteriaResponseBodyCriteriaList) *DescribeImageCriteriaResponseBody {
	s.CriteriaList = v
	return s
}

func (s *DescribeImageCriteriaResponseBody) SetRequestId(v string) *DescribeImageCriteriaResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageCriteriaResponseBodyCriteriaList struct {
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Values *string `json:"Values,omitempty" xml:"Values,omitempty"`
}

func (s DescribeImageCriteriaResponseBodyCriteriaList) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageCriteriaResponseBodyCriteriaList) GoString() string {
	return s.String()
}

func (s *DescribeImageCriteriaResponseBodyCriteriaList) SetName(v string) *DescribeImageCriteriaResponseBodyCriteriaList {
	s.Name = &v
	return s
}

func (s *DescribeImageCriteriaResponseBodyCriteriaList) SetType(v string) *DescribeImageCriteriaResponseBodyCriteriaList {
	s.Type = &v
	return s
}

func (s *DescribeImageCriteriaResponseBodyCriteriaList) SetValues(v string) *DescribeImageCriteriaResponseBodyCriteriaList {
	s.Values = &v
	return s
}

type DescribeImageCriteriaResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageCriteriaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageCriteriaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageCriteriaResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageCriteriaResponse) SetHeaders(v map[string]*string) *DescribeImageCriteriaResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageCriteriaResponse) SetStatusCode(v int32) *DescribeImageCriteriaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageCriteriaResponse) SetBody(v *DescribeImageCriteriaResponseBody) *DescribeImageCriteriaResponse {
	s.Body = v
	return s
}

type DescribeImageFixTaskRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The timestamp when the task ends. Unit: milliseconds.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The timestamp when the task starts. Unit: milliseconds.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the task. Valid values:
	//
	// *   **1**: The task is running.
	// *   **2**: The task is successful.
	// *   **3**: The task failed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeImageFixTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFixTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageFixTaskRequest) SetCurrentPage(v int32) *DescribeImageFixTaskRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageFixTaskRequest) SetEndTime(v int64) *DescribeImageFixTaskRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeImageFixTaskRequest) SetPageSize(v int32) *DescribeImageFixTaskRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageFixTaskRequest) SetStartTime(v int64) *DescribeImageFixTaskRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeImageFixTaskRequest) SetStatus(v string) *DescribeImageFixTaskRequest {
	s.Status = &v
	return s
}

type DescribeImageFixTaskResponseBody struct {
	// An array that consists of the tasks returned.
	BuildTasks []*DescribeImageFixTaskResponseBodyBuildTasks `json:"BuildTasks,omitempty" xml:"BuildTasks,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *DescribeImageFixTaskResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageFixTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFixTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageFixTaskResponseBody) SetBuildTasks(v []*DescribeImageFixTaskResponseBodyBuildTasks) *DescribeImageFixTaskResponseBody {
	s.BuildTasks = v
	return s
}

func (s *DescribeImageFixTaskResponseBody) SetPageInfo(v *DescribeImageFixTaskResponseBodyPageInfo) *DescribeImageFixTaskResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeImageFixTaskResponseBody) SetRequestId(v string) *DescribeImageFixTaskResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageFixTaskResponseBodyBuildTasks struct {
	// The ID of the task.
	BuildTaskId *string `json:"BuildTaskId,omitempty" xml:"BuildTaskId,omitempty"`
	// The timestamp when the task starts. Unit: milliseconds.
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The timestamp when the task ends. Unit: milliseconds.
	FixTime *string `json:"FixTime,omitempty" xml:"FixTime,omitempty"`
	// The version of the image after image risks are fixed.
	NewTag *string `json:"NewTag,omitempty" xml:"NewTag,omitempty"`
	// The UUID of the image after image risks are fixed.
	NewUuid *string `json:"NewUuid,omitempty" xml:"NewUuid,omitempty"`
	// The version of the image.
	OldTag *string `json:"OldTag,omitempty" xml:"OldTag,omitempty"`
	// The UUID of the image.
	OldUuid *string `json:"OldUuid,omitempty" xml:"OldUuid,omitempty"`
	// The region of the image.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the image repository.
	RepoName *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	// The namespace of the image.
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	// The status of the task. Valid values:
	//
	// *   **1**: The task is running.
	// *   **2**: The task is successful.
	// *   **3**: The task failed.
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the task. The value is fixed as IMAGE_REPAIR, which indicates a task that fixes image risks.
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeImageFixTaskResponseBodyBuildTasks) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFixTaskResponseBodyBuildTasks) GoString() string {
	return s.String()
}

func (s *DescribeImageFixTaskResponseBodyBuildTasks) SetBuildTaskId(v string) *DescribeImageFixTaskResponseBodyBuildTasks {
	s.BuildTaskId = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyBuildTasks) SetFinishTime(v string) *DescribeImageFixTaskResponseBodyBuildTasks {
	s.FinishTime = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyBuildTasks) SetFixTime(v string) *DescribeImageFixTaskResponseBodyBuildTasks {
	s.FixTime = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyBuildTasks) SetNewTag(v string) *DescribeImageFixTaskResponseBodyBuildTasks {
	s.NewTag = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyBuildTasks) SetNewUuid(v string) *DescribeImageFixTaskResponseBodyBuildTasks {
	s.NewUuid = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyBuildTasks) SetOldTag(v string) *DescribeImageFixTaskResponseBodyBuildTasks {
	s.OldTag = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyBuildTasks) SetOldUuid(v string) *DescribeImageFixTaskResponseBodyBuildTasks {
	s.OldUuid = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyBuildTasks) SetRegionId(v string) *DescribeImageFixTaskResponseBodyBuildTasks {
	s.RegionId = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyBuildTasks) SetRepoName(v string) *DescribeImageFixTaskResponseBodyBuildTasks {
	s.RepoName = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyBuildTasks) SetRepoNamespace(v string) *DescribeImageFixTaskResponseBodyBuildTasks {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyBuildTasks) SetStatus(v int32) *DescribeImageFixTaskResponseBodyBuildTasks {
	s.Status = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyBuildTasks) SetTaskType(v string) *DescribeImageFixTaskResponseBodyBuildTasks {
	s.TaskType = &v
	return s
}

type DescribeImageFixTaskResponseBodyPageInfo struct {
	// The number of tasks returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of tasks returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageFixTaskResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFixTaskResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeImageFixTaskResponseBodyPageInfo) SetCount(v int32) *DescribeImageFixTaskResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeImageFixTaskResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyPageInfo) SetPageSize(v int32) *DescribeImageFixTaskResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeImageFixTaskResponseBodyPageInfo) SetTotalCount(v int32) *DescribeImageFixTaskResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeImageFixTaskResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageFixTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageFixTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageFixTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageFixTaskResponse) SetHeaders(v map[string]*string) *DescribeImageFixTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageFixTaskResponse) SetStatusCode(v int32) *DescribeImageFixTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageFixTaskResponse) SetBody(v *DescribeImageFixTaskResponseBody) *DescribeImageFixTaskResponse {
	s.Body = v
	return s
}

type DescribeImageGroupedVulListRequest struct {
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The ID of the container cluster.
	//
	// >  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The Common Vulnerabilities and Exposures (CVE) ID of the vulnerability.
	CveId *string `json:"CveId,omitempty" xml:"CveId,omitempty"`
	// The ID of the asset group.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The SHA-256 value of the image digest.
	ImageDigest *string `json:"ImageDigest,omitempty" xml:"ImageDigest,omitempty"`
	// The layer of the image.
	ImageLayer *string `json:"ImageLayer,omitempty" xml:"ImageLayer,omitempty"`
	// The tag that is added to the image.
	ImageTag *string `json:"ImageTag,omitempty" xml:"ImageTag,omitempty"`
	// Specifies whether to query the vulnerabilities in the latest images. If you do not specify this parameter, the vulnerabilities in all images are queried. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	IsLatest *int32 `json:"IsLatest,omitempty" xml:"IsLatest,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The name of the vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The priority to fix the vulnerability. Valid values:
	//
	// *   **asap**: high. You must fix the vulnerability at the earliest opportunity.
	// *   **later**: medium. You can fix the vulnerability based on your business requirements.
	// *   **nntf**: low. You can ignore the vulnerability.
	Necessity *string `json:"Necessity,omitempty" xml:"Necessity,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the patch that is used to fix the vulnerability.
	PatchId *int64 `json:"PatchId,omitempty" xml:"PatchId,omitempty"`
	// The ID of the image repository.
	RepoId *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	// The instance ID of the image repository.
	RepoInstanceId *string `json:"RepoInstanceId,omitempty" xml:"RepoInstanceId,omitempty"`
	// The name of the image repository.
	RepoName *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	// The namespace to which the image repository belongs.
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	// The region ID of the image repository.
	RepoRegionId *string `json:"RepoRegionId,omitempty" xml:"RepoRegionId,omitempty"`
	// The types of the assets that you want to scan.
	ScanRange []*string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty" type:"Repeated"`
	// The type of the vulnerability that you want to query. Valid values:
	//
	// *   **cve**: image system vulnerability
	// *   **sca**: image application vulnerability
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The UUIDs of the assets. Separate multiple UUIDs with commas (,).
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeImageGroupedVulListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageGroupedVulListRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageGroupedVulListRequest) SetAliasName(v string) *DescribeImageGroupedVulListRequest {
	s.AliasName = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetClusterId(v string) *DescribeImageGroupedVulListRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetCurrentPage(v int32) *DescribeImageGroupedVulListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetCveId(v string) *DescribeImageGroupedVulListRequest {
	s.CveId = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetGroupId(v string) *DescribeImageGroupedVulListRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetImageDigest(v string) *DescribeImageGroupedVulListRequest {
	s.ImageDigest = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetImageLayer(v string) *DescribeImageGroupedVulListRequest {
	s.ImageLayer = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetImageTag(v string) *DescribeImageGroupedVulListRequest {
	s.ImageTag = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetIsLatest(v int32) *DescribeImageGroupedVulListRequest {
	s.IsLatest = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetLang(v string) *DescribeImageGroupedVulListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetName(v string) *DescribeImageGroupedVulListRequest {
	s.Name = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetNecessity(v string) *DescribeImageGroupedVulListRequest {
	s.Necessity = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetPageSize(v int32) *DescribeImageGroupedVulListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetPatchId(v int64) *DescribeImageGroupedVulListRequest {
	s.PatchId = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetRepoId(v string) *DescribeImageGroupedVulListRequest {
	s.RepoId = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetRepoInstanceId(v string) *DescribeImageGroupedVulListRequest {
	s.RepoInstanceId = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetRepoName(v string) *DescribeImageGroupedVulListRequest {
	s.RepoName = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetRepoNamespace(v string) *DescribeImageGroupedVulListRequest {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetRepoRegionId(v string) *DescribeImageGroupedVulListRequest {
	s.RepoRegionId = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetScanRange(v []*string) *DescribeImageGroupedVulListRequest {
	s.ScanRange = v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetType(v string) *DescribeImageGroupedVulListRequest {
	s.Type = &v
	return s
}

func (s *DescribeImageGroupedVulListRequest) SetUuids(v string) *DescribeImageGroupedVulListRequest {
	s.Uuids = &v
	return s
}

type DescribeImageGroupedVulListResponseBody struct {
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// An array that consists of the image vulnerabilities.
	GroupedVulItems []*DescribeImageGroupedVulListResponseBodyGroupedVulItems `json:"GroupedVulItems,omitempty" xml:"GroupedVulItems,omitempty" type:"Repeated"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of image system vulnerabilities.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageGroupedVulListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageGroupedVulListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageGroupedVulListResponseBody) SetCurrentPage(v int32) *DescribeImageGroupedVulListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageGroupedVulListResponseBody) SetGroupedVulItems(v []*DescribeImageGroupedVulListResponseBodyGroupedVulItems) *DescribeImageGroupedVulListResponseBody {
	s.GroupedVulItems = v
	return s
}

func (s *DescribeImageGroupedVulListResponseBody) SetPageSize(v int32) *DescribeImageGroupedVulListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeImageGroupedVulListResponseBody) SetRequestId(v string) *DescribeImageGroupedVulListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageGroupedVulListResponseBody) SetTotalCount(v int32) *DescribeImageGroupedVulListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeImageGroupedVulListResponseBodyGroupedVulItems struct {
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The number of vulnerabilities that have the high priority.
	AsapCount *int32 `json:"AsapCount,omitempty" xml:"AsapCount,omitempty"`
	// The timestamp when the first scan was performed. Unit: milliseconds.
	GmtLast *int64 `json:"GmtLast,omitempty" xml:"GmtLast,omitempty"`
	// The timestamp when the last scan was performed. Unit: milliseconds.
	LastScanTime *int64 `json:"LastScanTime,omitempty" xml:"LastScanTime,omitempty"`
	// The number of vulnerabilities that have the medium priority.
	LaterCount *int32 `json:"LaterCount,omitempty" xml:"LaterCount,omitempty"`
	// The name of the vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of vulnerabilities that have the low priority.
	NntfCount *int32 `json:"NntfCount,omitempty" xml:"NntfCount,omitempty"`
	// The status of the vulnerability. Valid values:
	//
	// *   **0**: unhandled
	// *   **1**: handled
	// *   **2**: verifying
	// *   **3**: added to the whitelist
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tag that is added to the vulnerability. Valid values:
	//
	// *   Restart required
	// *   Remote exploitation
	// *   Exploit exists
	// *   Exploitable
	// *   Privilege escalation
	// *   Code execution
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The type of the vulnerability. Valid values:
	//
	// *   **cve**: image system vulnerability
	// *   **sca**: image application vulnerability
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeImageGroupedVulListResponseBodyGroupedVulItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageGroupedVulListResponseBodyGroupedVulItems) GoString() string {
	return s.String()
}

func (s *DescribeImageGroupedVulListResponseBodyGroupedVulItems) SetAliasName(v string) *DescribeImageGroupedVulListResponseBodyGroupedVulItems {
	s.AliasName = &v
	return s
}

func (s *DescribeImageGroupedVulListResponseBodyGroupedVulItems) SetAsapCount(v int32) *DescribeImageGroupedVulListResponseBodyGroupedVulItems {
	s.AsapCount = &v
	return s
}

func (s *DescribeImageGroupedVulListResponseBodyGroupedVulItems) SetGmtLast(v int64) *DescribeImageGroupedVulListResponseBodyGroupedVulItems {
	s.GmtLast = &v
	return s
}

func (s *DescribeImageGroupedVulListResponseBodyGroupedVulItems) SetLastScanTime(v int64) *DescribeImageGroupedVulListResponseBodyGroupedVulItems {
	s.LastScanTime = &v
	return s
}

func (s *DescribeImageGroupedVulListResponseBodyGroupedVulItems) SetLaterCount(v int32) *DescribeImageGroupedVulListResponseBodyGroupedVulItems {
	s.LaterCount = &v
	return s
}

func (s *DescribeImageGroupedVulListResponseBodyGroupedVulItems) SetName(v string) *DescribeImageGroupedVulListResponseBodyGroupedVulItems {
	s.Name = &v
	return s
}

func (s *DescribeImageGroupedVulListResponseBodyGroupedVulItems) SetNntfCount(v int32) *DescribeImageGroupedVulListResponseBodyGroupedVulItems {
	s.NntfCount = &v
	return s
}

func (s *DescribeImageGroupedVulListResponseBodyGroupedVulItems) SetStatus(v int32) *DescribeImageGroupedVulListResponseBodyGroupedVulItems {
	s.Status = &v
	return s
}

func (s *DescribeImageGroupedVulListResponseBodyGroupedVulItems) SetTags(v string) *DescribeImageGroupedVulListResponseBodyGroupedVulItems {
	s.Tags = &v
	return s
}

func (s *DescribeImageGroupedVulListResponseBodyGroupedVulItems) SetType(v string) *DescribeImageGroupedVulListResponseBodyGroupedVulItems {
	s.Type = &v
	return s
}

type DescribeImageGroupedVulListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageGroupedVulListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageGroupedVulListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageGroupedVulListResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageGroupedVulListResponse) SetHeaders(v map[string]*string) *DescribeImageGroupedVulListResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageGroupedVulListResponse) SetStatusCode(v int32) *DescribeImageGroupedVulListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageGroupedVulListResponse) SetBody(v *DescribeImageGroupedVulListResponseBody) *DescribeImageGroupedVulListResponse {
	s.Body = v
	return s
}

type DescribeImageInfoListRequest struct {
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeImageInfoListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfoListRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageInfoListRequest) SetUuids(v string) *DescribeImageInfoListRequest {
	s.Uuids = &v
	return s
}

type DescribeImageInfoListResponseBody struct {
	ImageInfos []*DescribeImageInfoListResponseBodyImageInfos `json:"ImageInfos,omitempty" xml:"ImageInfos,omitempty" type:"Repeated"`
	RequestId  *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageInfoListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfoListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageInfoListResponseBody) SetImageInfos(v []*DescribeImageInfoListResponseBodyImageInfos) *DescribeImageInfoListResponseBody {
	s.ImageInfos = v
	return s
}

func (s *DescribeImageInfoListResponseBody) SetRequestId(v string) *DescribeImageInfoListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageInfoListResponseBodyImageInfos struct {
	AlarmCount    *int32  `json:"AlarmCount,omitempty" xml:"AlarmCount,omitempty"`
	AlarmStatus   *string `json:"AlarmStatus,omitempty" xml:"AlarmStatus,omitempty"`
	Digest        *string `json:"Digest,omitempty" xml:"Digest,omitempty"`
	Endpoints     *string `json:"Endpoints,omitempty" xml:"Endpoints,omitempty"`
	ImageCreate   *int64  `json:"ImageCreate,omitempty" xml:"ImageCreate,omitempty"`
	ImageId       *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageSize     *int64  `json:"ImageSize,omitempty" xml:"ImageSize,omitempty"`
	ImageUpdate   *int64  `json:"ImageUpdate,omitempty" xml:"ImageUpdate,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegistryType  *string `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
	RepoId        *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	RepoName      *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	RepoType      *string `json:"RepoType,omitempty" xml:"RepoType,omitempty"`
	RiskStatus    *string `json:"RiskStatus,omitempty" xml:"RiskStatus,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Tag           *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	TagImmutable  *int32  `json:"TagImmutable,omitempty" xml:"TagImmutable,omitempty"`
	Uuid          *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	VulCount      *int32  `json:"VulCount,omitempty" xml:"VulCount,omitempty"`
	VulStatus     *string `json:"VulStatus,omitempty" xml:"VulStatus,omitempty"`
}

func (s DescribeImageInfoListResponseBodyImageInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfoListResponseBodyImageInfos) GoString() string {
	return s.String()
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetAlarmCount(v int32) *DescribeImageInfoListResponseBodyImageInfos {
	s.AlarmCount = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetAlarmStatus(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.AlarmStatus = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetDigest(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.Digest = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetEndpoints(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.Endpoints = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetImageCreate(v int64) *DescribeImageInfoListResponseBodyImageInfos {
	s.ImageCreate = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetImageId(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.ImageId = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetImageSize(v int64) *DescribeImageInfoListResponseBodyImageInfos {
	s.ImageSize = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetImageUpdate(v int64) *DescribeImageInfoListResponseBodyImageInfos {
	s.ImageUpdate = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetInstanceId(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.InstanceId = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetRegionId(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.RegionId = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetRegistryType(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.RegistryType = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetRepoId(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.RepoId = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetRepoName(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.RepoName = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetRepoNamespace(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetRepoType(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.RepoType = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetRiskStatus(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.RiskStatus = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetStatus(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.Status = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetTag(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.Tag = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetTagImmutable(v int32) *DescribeImageInfoListResponseBodyImageInfos {
	s.TagImmutable = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetUuid(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.Uuid = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetVulCount(v int32) *DescribeImageInfoListResponseBodyImageInfos {
	s.VulCount = &v
	return s
}

func (s *DescribeImageInfoListResponseBodyImageInfos) SetVulStatus(v string) *DescribeImageInfoListResponseBodyImageInfos {
	s.VulStatus = &v
	return s
}

type DescribeImageInfoListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageInfoListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageInfoListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfoListResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageInfoListResponse) SetHeaders(v map[string]*string) *DescribeImageInfoListResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageInfoListResponse) SetStatusCode(v int32) *DescribeImageInfoListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageInfoListResponse) SetBody(v *DescribeImageInfoListResponseBody) *DescribeImageInfoListResponse {
	s.Body = v
	return s
}

type DescribeImageInstancesRequest struct {
	Criteria    *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	LogicalExp  *string `json:"LogicalExp,omitempty" xml:"LogicalExp,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Scanned     *bool   `json:"Scanned,omitempty" xml:"Scanned,omitempty"`
}

func (s DescribeImageInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageInstancesRequest) SetCriteria(v string) *DescribeImageInstancesRequest {
	s.Criteria = &v
	return s
}

func (s *DescribeImageInstancesRequest) SetCurrentPage(v int32) *DescribeImageInstancesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageInstancesRequest) SetLogicalExp(v string) *DescribeImageInstancesRequest {
	s.LogicalExp = &v
	return s
}

func (s *DescribeImageInstancesRequest) SetPageSize(v int32) *DescribeImageInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageInstancesRequest) SetScanned(v bool) *DescribeImageInstancesRequest {
	s.Scanned = &v
	return s
}

type DescribeImageInstancesResponseBody struct {
	ImageInstanceList []*DescribeImageInstancesResponseBodyImageInstanceList `json:"ImageInstanceList,omitempty" xml:"ImageInstanceList,omitempty" type:"Repeated"`
	PageInfo          *DescribeImageInstancesResponseBodyPageInfo            `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId         *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageInstancesResponseBody) SetImageInstanceList(v []*DescribeImageInstancesResponseBodyImageInstanceList) *DescribeImageInstancesResponseBody {
	s.ImageInstanceList = v
	return s
}

func (s *DescribeImageInstancesResponseBody) SetPageInfo(v *DescribeImageInstancesResponseBodyPageInfo) *DescribeImageInstancesResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeImageInstancesResponseBody) SetRequestId(v string) *DescribeImageInstancesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageInstancesResponseBodyImageInstanceList struct {
	AlarmCount    *int32  `json:"AlarmCount,omitempty" xml:"AlarmCount,omitempty"`
	AlarmStatus   *string `json:"AlarmStatus,omitempty" xml:"AlarmStatus,omitempty"`
	Deployed      *int32  `json:"Deployed,omitempty" xml:"Deployed,omitempty"`
	Digest        *string `json:"Digest,omitempty" xml:"Digest,omitempty"`
	Endpoints     *string `json:"Endpoints,omitempty" xml:"Endpoints,omitempty"`
	HcCount       *int32  `json:"HcCount,omitempty" xml:"HcCount,omitempty"`
	HcStatus      *string `json:"HcStatus,omitempty" xml:"HcStatus,omitempty"`
	ImageCreate   *string `json:"ImageCreate,omitempty" xml:"ImageCreate,omitempty"`
	ImageId       *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageSize     *string `json:"ImageSize,omitempty" xml:"ImageSize,omitempty"`
	ImageUpdate   *string `json:"ImageUpdate,omitempty" xml:"ImageUpdate,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegistryType  *string `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
	RepoId        *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	RepoName      *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	RepoType      *string `json:"RepoType,omitempty" xml:"RepoType,omitempty"`
	RiskStatus    *string `json:"RiskStatus,omitempty" xml:"RiskStatus,omitempty"`
	ScaProgress   *int32  `json:"ScaProgress,omitempty" xml:"ScaProgress,omitempty"`
	ScaResult     *string `json:"ScaResult,omitempty" xml:"ScaResult,omitempty"`
	ScaStatus     *string `json:"ScaStatus,omitempty" xml:"ScaStatus,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Tag           *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	Uuid          *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	VulCount      *int32  `json:"VulCount,omitempty" xml:"VulCount,omitempty"`
	VulStatus     *string `json:"VulStatus,omitempty" xml:"VulStatus,omitempty"`
}

func (s DescribeImageInstancesResponseBodyImageInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInstancesResponseBodyImageInstanceList) GoString() string {
	return s.String()
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetAlarmCount(v int32) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.AlarmCount = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetAlarmStatus(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.AlarmStatus = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetDeployed(v int32) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.Deployed = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetDigest(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.Digest = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetEndpoints(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.Endpoints = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetHcCount(v int32) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.HcCount = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetHcStatus(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.HcStatus = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetImageCreate(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.ImageCreate = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetImageId(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.ImageId = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetImageSize(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.ImageSize = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetImageUpdate(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.ImageUpdate = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetInstanceId(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.InstanceId = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetRegionId(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.RegionId = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetRegistryType(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.RegistryType = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetRepoId(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.RepoId = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetRepoName(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.RepoName = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetRepoNamespace(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetRepoType(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.RepoType = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetRiskStatus(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.RiskStatus = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetScaProgress(v int32) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.ScaProgress = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetScaResult(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.ScaResult = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetScaStatus(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.ScaStatus = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetStatus(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.Status = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetTag(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.Tag = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetUuid(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.Uuid = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetVulCount(v int32) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.VulCount = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyImageInstanceList) SetVulStatus(v string) *DescribeImageInstancesResponseBodyImageInstanceList {
	s.VulStatus = &v
	return s
}

type DescribeImageInstancesResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageInstancesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInstancesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeImageInstancesResponseBodyPageInfo) SetCount(v int32) *DescribeImageInstancesResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeImageInstancesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyPageInfo) SetPageSize(v int32) *DescribeImageInstancesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeImageInstancesResponseBodyPageInfo) SetTotalCount(v int32) *DescribeImageInstancesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeImageInstancesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageInstancesResponse) SetHeaders(v map[string]*string) *DescribeImageInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageInstancesResponse) SetStatusCode(v int32) *DescribeImageInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageInstancesResponse) SetBody(v *DescribeImageInstancesResponseBody) *DescribeImageInstancesResponse {
	s.Body = v
	return s
}

type DescribeImageLatestScanTaskRequest struct {
	Digest *string `json:"Digest,omitempty" xml:"Digest,omitempty"`
}

func (s DescribeImageLatestScanTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageLatestScanTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageLatestScanTaskRequest) SetDigest(v string) *DescribeImageLatestScanTaskRequest {
	s.Digest = &v
	return s
}

type DescribeImageLatestScanTaskResponseBody struct {
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Task      []*DescribeImageLatestScanTaskResponseBodyTask `json:"Task,omitempty" xml:"Task,omitempty" type:"Repeated"`
}

func (s DescribeImageLatestScanTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageLatestScanTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageLatestScanTaskResponseBody) SetRequestId(v string) *DescribeImageLatestScanTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponseBody) SetTask(v []*DescribeImageLatestScanTaskResponseBodyTask) *DescribeImageLatestScanTaskResponseBody {
	s.Task = v
	return s
}

type DescribeImageLatestScanTaskResponseBodyTask struct {
	Create     *string `json:"Create,omitempty" xml:"Create,omitempty"`
	Finish     *int32  `json:"Finish,omitempty" xml:"Finish,omitempty"`
	FinishTime *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Id         *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Modified   *string `json:"Modified,omitempty" xml:"Modified,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Source     *string `json:"Source,omitempty" xml:"Source,omitempty"`
	StartTime  *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Target     *string `json:"Target,omitempty" xml:"Target,omitempty"`
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskType   *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeImageLatestScanTaskResponseBodyTask) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageLatestScanTaskResponseBodyTask) GoString() string {
	return s.String()
}

func (s *DescribeImageLatestScanTaskResponseBodyTask) SetCreate(v string) *DescribeImageLatestScanTaskResponseBodyTask {
	s.Create = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponseBodyTask) SetFinish(v int32) *DescribeImageLatestScanTaskResponseBodyTask {
	s.Finish = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponseBodyTask) SetFinishTime(v int64) *DescribeImageLatestScanTaskResponseBodyTask {
	s.FinishTime = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponseBodyTask) SetId(v int64) *DescribeImageLatestScanTaskResponseBodyTask {
	s.Id = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponseBodyTask) SetModified(v string) *DescribeImageLatestScanTaskResponseBodyTask {
	s.Modified = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponseBodyTask) SetName(v string) *DescribeImageLatestScanTaskResponseBodyTask {
	s.Name = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponseBodyTask) SetSource(v string) *DescribeImageLatestScanTaskResponseBodyTask {
	s.Source = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponseBodyTask) SetStartTime(v int64) *DescribeImageLatestScanTaskResponseBodyTask {
	s.StartTime = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponseBodyTask) SetStatus(v string) *DescribeImageLatestScanTaskResponseBodyTask {
	s.Status = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponseBodyTask) SetTarget(v string) *DescribeImageLatestScanTaskResponseBodyTask {
	s.Target = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponseBodyTask) SetTargetType(v string) *DescribeImageLatestScanTaskResponseBodyTask {
	s.TargetType = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponseBodyTask) SetTaskId(v string) *DescribeImageLatestScanTaskResponseBodyTask {
	s.TaskId = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponseBodyTask) SetTaskType(v string) *DescribeImageLatestScanTaskResponseBodyTask {
	s.TaskType = &v
	return s
}

type DescribeImageLatestScanTaskResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageLatestScanTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageLatestScanTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageLatestScanTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageLatestScanTaskResponse) SetHeaders(v map[string]*string) *DescribeImageLatestScanTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageLatestScanTaskResponse) SetStatusCode(v int32) *DescribeImageLatestScanTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageLatestScanTaskResponse) SetBody(v *DescribeImageLatestScanTaskResponseBody) *DescribeImageLatestScanTaskResponse {
	s.Body = v
	return s
}

type DescribeImageListBySensitiveFileRequest struct {
	// The number of the page to return. Pages start from page 1. Default value: 1.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The image digest.
	// > Fuzzy match is supported.
	ImageDigest *string `json:"ImageDigest,omitempty" xml:"ImageDigest,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the container image.
	//
	// > You can call the [ListRepository](~~ListRepository~~) operation to query the IDs of container images from the value of the InstanceId response parameter.
	RepoInstanceId *string `json:"RepoInstanceId,omitempty" xml:"RepoInstanceId,omitempty"`
	// The name of the image repository.
	//
	// > Fuzzy match is supported.
	RepoName *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	// The namespace to which the image repository belongs.
	// > Fuzzy match is supported.
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	// The risk level of the file. Separate multiple levels with commas (,). Valid values:
	//
	// - **high**
	// - **medium**
	// - **low**
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// An array consisting of the types of the assets that you want to scan. Valid values:
	// - **image**
	// - **container**
	ScanRange []*string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty" type:"Repeated"`
	// The alert type of the sensitive file. Valid values:
	//
	// *   **npm_token**: NPM Token
	// *   **ftp_cfg**: FTP Config
	// *   **google\_oauth_key**: Google OAuth Key
	// *   **planetscale_passwd**: Planetscale password
	// *   **github\_ssh_key**: Github SSH Key
	// *   **msbuild\_publish_profile**: MSBuild publish profile
	// *   **fastly\_cdn_token**: Fastly CDN Token
	// *   **ssh\_private_key**: SSH Private Key
	// *   **aws_cli**: AWS CLI Credentials
	// *   **cpanel\_proftpd**: cPanel ProFTPd Credential
	// *   **postgresql_passwd**: PostgreSQl Passwd
	// *   **discord\_client_cred**: Discord Client Credential
	// *   **rails_database**: Rails Database Config
	// *   **aws\_access_key**: AWS Access Key
	// *   **esmtp_cfg**: ESMTP Config
	// *   **docker\_registry_cfg**: Docker Registry Config
	// *   **pem**: PEM
	// *   **common_cred**: Common Credential
	// *   **sftp_cfg**: SFTP Config
	// *   **grafana_token**: Grafana Token
	// *   **slack_token**: Slack Token
	// *   **ec\_private_key**: EC Private Key
	// *   **pypi_token**: PyPI Token
	// *   **finicity_token**: Finicity Token
	// *   **k8s\_client_key**: Kubernetes Client Key
	// *   **git_cfg**: Git Config
	// *   **django_key**: Django Key
	// *   **jenkins_ssh**: Jenkins SSH Config
	// *   **openssh\_private_key**: OPENSSH Private Key
	// *   **square_oauth**: Square OAuth Token
	// *   **typeform_token**: Typeform Token
	// *   **common\_database_cfg**: Common Database Config
	// *   **wordpress\_database_cfg**: Wordpress Database Config
	// *   **googlecloud\_api_key**: Google Cloud API Key
	// *   **vscode_sftp**: VSCode SFTP Config
	// *   **apache_htpasswd**: Apache htpasswd
	// *   **planetscale_token**: Planetscale Token
	// *   **contentful\_preview_token**: Contentful Preview Token
	// *   **php\_database_cfg**: PHP Database Config
	// *   **atom\_remote_sync**: Atom Remote Sync Config
	// *   **aws\_session_token**: AWS Session Token
	// *   **atom\_sftp_cfg**: Atom SFTP Config
	// *   **asana\_client\_private_key**: Asana Client Private Key
	// *   **tencentcloud_ak**: Tencent Cloud SecretId
	// *   **rsa\_private_key**: RSA Private Key
	// *   **github\_personal_token**: Github Personal Token
	// *   **pgp**: PGP
	// *   **stripe_skpk**: Stripe Secret Key
	// *   **square_token**: Square Token
	// *   **rails_carrierwave**: Rails Carrierwave Credential
	// *   **dbeaver\_database_cfg**: DBeaver Database Config
	// *   **robomongo_cred**: Robomongo Credential
	// *   **github\_oauth_token**: Github OAuth Token
	// *   **pulumi_token**: Pulumi Token
	// *   **ventrilo_voip**: Ventrilo VoIP Server Config
	// *   **macos_keychain**: macOS Keychain
	// *   **amazon\_mws_token**: Amazon MWS Token
	// *   **dynatrace_token**: Dynatrace Token
	// *   **java_keystore**: Java Keystore
	// *   **microsoft_sdf**: Microsoft SDF
	// *   **kubernetes\_dashboard_cred**: Kubernetes Dashboard User Credential
	// *   **atlassian_token**: Atlassian Token
	// *   **rdp**: RDP
	// *   **mailgun_key**: Mailgun Webhook Signing Key
	// *   **mailchimp\_api_key**: Mailchimp API Key
	// *   **netrc_cfg**: .netrc config
	// *   **openvpn_cfg**: OpenVPN Config
	// *   **github\_refresh_token**: Github Refresh Token
	// *   **salesforce**: Salesforce Credential
	// *   **sendinblue**: Sendinblue Token
	// *   **pkcs\_private_key**: PKCS Private Key
	// *   **rubyonrails_passwd**: Ruby on Rails Passwd
	// *   **filezilla_ftp**: FileZilla FTP Config
	// *   **databricks_token**: Databricks Token
	// *   **gitLab\_personal_token**: GitLab Personal Token
	// *   **rails\_master_key**: Rails Master Key
	// *   **sqlite**: SQLite3/SQLite Database
	// *   **firefox_logins**: Firefox Login Config
	// *   **mailgun\_private_token**: Mailgun Private Token
	// *   **joomla_cfg**: Joomla Config
	// *   **hashicorp\_terraform_token**: Hashicorp Terraform Token
	// *   **jetbrains_ides**: Jetbrains IDEs Config
	// *   **heroku\_api_key**: Heroku API key
	// *   **messagebird_token**: MessageBird Token
	// *   **github\_app_token**: Github App Token
	// *   **hashicorp\_vault_token**: Hashicorp Vault Token
	// *   **pgp\_private_key**: PGP Private Key
	// *   **sshpasswd**: SSH password
	// *   **huaweicloud_ak**: Huaei Cloud Access Key
	// *   **aws_s3cmd**: AWS S3cmd Config
	// *   **php_config**: php Config
	// *   **common\_private_key**: Common Private Key Type
	// *   **microsoft_mdf**: Microsoft MDF
	// *   **mediawiki_cfg**: MediaWiki Config
	// *   **jenkins_cred**: Jenkins Credential
	// *   **rubygems_cred**: Rubygems Credential
	// *   **clojars_token**: Clojars Token
	// *   **phoenix\_web_passwd**: Phoenix Web Credential
	// *   **puttygen\_private_key**: PuTTYgen Private Key
	// *   **google\_oauth_token**: Google Oauth Token
	// *   **rubyonrails_cfg**: Ruby On Rails Database Config
	// *   **lob\_api_key**: Lob API Key
	// *   **pkcs_cred**: PKCS#12
	// *   **otr\_private_key**: OTR Private Key
	// *   **contentful\_delivery_token**: Contentful Delivery Token
	// *   **digital\_ocean_tugboat**: Digital Ocean Tugboat Config
	// *   **dsa\_private_key**: DSA Private Key
	// *   **rails\_app_token**: Rails App Token
	// *   **git_cred**: Git User Credential
	// *   **newrelic\_api_key**: New Relic User API Key
	// *   **github_hub**: Github Token
	// *   **rubygem**: Rubygem Token
	SensitiveFileKey *string `json:"SensitiveFileKey,omitempty" xml:"SensitiveFileKey,omitempty"`
}

func (s DescribeImageListBySensitiveFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageListBySensitiveFileRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageListBySensitiveFileRequest) SetCurrentPage(v int32) *DescribeImageListBySensitiveFileRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageListBySensitiveFileRequest) SetImageDigest(v string) *DescribeImageListBySensitiveFileRequest {
	s.ImageDigest = &v
	return s
}

func (s *DescribeImageListBySensitiveFileRequest) SetLang(v string) *DescribeImageListBySensitiveFileRequest {
	s.Lang = &v
	return s
}

func (s *DescribeImageListBySensitiveFileRequest) SetPageSize(v int32) *DescribeImageListBySensitiveFileRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageListBySensitiveFileRequest) SetRepoInstanceId(v string) *DescribeImageListBySensitiveFileRequest {
	s.RepoInstanceId = &v
	return s
}

func (s *DescribeImageListBySensitiveFileRequest) SetRepoName(v string) *DescribeImageListBySensitiveFileRequest {
	s.RepoName = &v
	return s
}

func (s *DescribeImageListBySensitiveFileRequest) SetRepoNamespace(v string) *DescribeImageListBySensitiveFileRequest {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeImageListBySensitiveFileRequest) SetRiskLevel(v string) *DescribeImageListBySensitiveFileRequest {
	s.RiskLevel = &v
	return s
}

func (s *DescribeImageListBySensitiveFileRequest) SetScanRange(v []*string) *DescribeImageListBySensitiveFileRequest {
	s.ScanRange = v
	return s
}

func (s *DescribeImageListBySensitiveFileRequest) SetSensitiveFileKey(v string) *DescribeImageListBySensitiveFileRequest {
	s.SensitiveFileKey = &v
	return s
}

type DescribeImageListBySensitiveFileShrinkRequest struct {
	// The number of the page to return. Pages start from page 1. Default value: 1.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The image digest.
	// > Fuzzy match is supported.
	ImageDigest *string `json:"ImageDigest,omitempty" xml:"ImageDigest,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the container image.
	//
	// > You can call the [ListRepository](~~ListRepository~~) operation to query the IDs of container images from the value of the InstanceId response parameter.
	RepoInstanceId *string `json:"RepoInstanceId,omitempty" xml:"RepoInstanceId,omitempty"`
	// The name of the image repository.
	//
	// > Fuzzy match is supported.
	RepoName *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	// The namespace to which the image repository belongs.
	// > Fuzzy match is supported.
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	// The risk level of the file. Separate multiple levels with commas (,). Valid values:
	//
	// - **high**
	// - **medium**
	// - **low**
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// An array consisting of the types of the assets that you want to scan. Valid values:
	// - **image**
	// - **container**
	ScanRangeShrink *string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty"`
	// The alert type of the sensitive file. Valid values:
	//
	// *   **npm_token**: NPM Token
	// *   **ftp_cfg**: FTP Config
	// *   **google\_oauth_key**: Google OAuth Key
	// *   **planetscale_passwd**: Planetscale password
	// *   **github\_ssh_key**: Github SSH Key
	// *   **msbuild\_publish_profile**: MSBuild publish profile
	// *   **fastly\_cdn_token**: Fastly CDN Token
	// *   **ssh\_private_key**: SSH Private Key
	// *   **aws_cli**: AWS CLI Credentials
	// *   **cpanel\_proftpd**: cPanel ProFTPd Credential
	// *   **postgresql_passwd**: PostgreSQl Passwd
	// *   **discord\_client_cred**: Discord Client Credential
	// *   **rails_database**: Rails Database Config
	// *   **aws\_access_key**: AWS Access Key
	// *   **esmtp_cfg**: ESMTP Config
	// *   **docker\_registry_cfg**: Docker Registry Config
	// *   **pem**: PEM
	// *   **common_cred**: Common Credential
	// *   **sftp_cfg**: SFTP Config
	// *   **grafana_token**: Grafana Token
	// *   **slack_token**: Slack Token
	// *   **ec\_private_key**: EC Private Key
	// *   **pypi_token**: PyPI Token
	// *   **finicity_token**: Finicity Token
	// *   **k8s\_client_key**: Kubernetes Client Key
	// *   **git_cfg**: Git Config
	// *   **django_key**: Django Key
	// *   **jenkins_ssh**: Jenkins SSH Config
	// *   **openssh\_private_key**: OPENSSH Private Key
	// *   **square_oauth**: Square OAuth Token
	// *   **typeform_token**: Typeform Token
	// *   **common\_database_cfg**: Common Database Config
	// *   **wordpress\_database_cfg**: Wordpress Database Config
	// *   **googlecloud\_api_key**: Google Cloud API Key
	// *   **vscode_sftp**: VSCode SFTP Config
	// *   **apache_htpasswd**: Apache htpasswd
	// *   **planetscale_token**: Planetscale Token
	// *   **contentful\_preview_token**: Contentful Preview Token
	// *   **php\_database_cfg**: PHP Database Config
	// *   **atom\_remote_sync**: Atom Remote Sync Config
	// *   **aws\_session_token**: AWS Session Token
	// *   **atom\_sftp_cfg**: Atom SFTP Config
	// *   **asana\_client\_private_key**: Asana Client Private Key
	// *   **tencentcloud_ak**: Tencent Cloud SecretId
	// *   **rsa\_private_key**: RSA Private Key
	// *   **github\_personal_token**: Github Personal Token
	// *   **pgp**: PGP
	// *   **stripe_skpk**: Stripe Secret Key
	// *   **square_token**: Square Token
	// *   **rails_carrierwave**: Rails Carrierwave Credential
	// *   **dbeaver\_database_cfg**: DBeaver Database Config
	// *   **robomongo_cred**: Robomongo Credential
	// *   **github\_oauth_token**: Github OAuth Token
	// *   **pulumi_token**: Pulumi Token
	// *   **ventrilo_voip**: Ventrilo VoIP Server Config
	// *   **macos_keychain**: macOS Keychain
	// *   **amazon\_mws_token**: Amazon MWS Token
	// *   **dynatrace_token**: Dynatrace Token
	// *   **java_keystore**: Java Keystore
	// *   **microsoft_sdf**: Microsoft SDF
	// *   **kubernetes\_dashboard_cred**: Kubernetes Dashboard User Credential
	// *   **atlassian_token**: Atlassian Token
	// *   **rdp**: RDP
	// *   **mailgun_key**: Mailgun Webhook Signing Key
	// *   **mailchimp\_api_key**: Mailchimp API Key
	// *   **netrc_cfg**: .netrc config
	// *   **openvpn_cfg**: OpenVPN Config
	// *   **github\_refresh_token**: Github Refresh Token
	// *   **salesforce**: Salesforce Credential
	// *   **sendinblue**: Sendinblue Token
	// *   **pkcs\_private_key**: PKCS Private Key
	// *   **rubyonrails_passwd**: Ruby on Rails Passwd
	// *   **filezilla_ftp**: FileZilla FTP Config
	// *   **databricks_token**: Databricks Token
	// *   **gitLab\_personal_token**: GitLab Personal Token
	// *   **rails\_master_key**: Rails Master Key
	// *   **sqlite**: SQLite3/SQLite Database
	// *   **firefox_logins**: Firefox Login Config
	// *   **mailgun\_private_token**: Mailgun Private Token
	// *   **joomla_cfg**: Joomla Config
	// *   **hashicorp\_terraform_token**: Hashicorp Terraform Token
	// *   **jetbrains_ides**: Jetbrains IDEs Config
	// *   **heroku\_api_key**: Heroku API key
	// *   **messagebird_token**: MessageBird Token
	// *   **github\_app_token**: Github App Token
	// *   **hashicorp\_vault_token**: Hashicorp Vault Token
	// *   **pgp\_private_key**: PGP Private Key
	// *   **sshpasswd**: SSH password
	// *   **huaweicloud_ak**: Huaei Cloud Access Key
	// *   **aws_s3cmd**: AWS S3cmd Config
	// *   **php_config**: php Config
	// *   **common\_private_key**: Common Private Key Type
	// *   **microsoft_mdf**: Microsoft MDF
	// *   **mediawiki_cfg**: MediaWiki Config
	// *   **jenkins_cred**: Jenkins Credential
	// *   **rubygems_cred**: Rubygems Credential
	// *   **clojars_token**: Clojars Token
	// *   **phoenix\_web_passwd**: Phoenix Web Credential
	// *   **puttygen\_private_key**: PuTTYgen Private Key
	// *   **google\_oauth_token**: Google Oauth Token
	// *   **rubyonrails_cfg**: Ruby On Rails Database Config
	// *   **lob\_api_key**: Lob API Key
	// *   **pkcs_cred**: PKCS#12
	// *   **otr\_private_key**: OTR Private Key
	// *   **contentful\_delivery_token**: Contentful Delivery Token
	// *   **digital\_ocean_tugboat**: Digital Ocean Tugboat Config
	// *   **dsa\_private_key**: DSA Private Key
	// *   **rails\_app_token**: Rails App Token
	// *   **git_cred**: Git User Credential
	// *   **newrelic\_api_key**: New Relic User API Key
	// *   **github_hub**: Github Token
	// *   **rubygem**: Rubygem Token
	SensitiveFileKey *string `json:"SensitiveFileKey,omitempty" xml:"SensitiveFileKey,omitempty"`
}

func (s DescribeImageListBySensitiveFileShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageListBySensitiveFileShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageListBySensitiveFileShrinkRequest) SetCurrentPage(v int32) *DescribeImageListBySensitiveFileShrinkRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageListBySensitiveFileShrinkRequest) SetImageDigest(v string) *DescribeImageListBySensitiveFileShrinkRequest {
	s.ImageDigest = &v
	return s
}

func (s *DescribeImageListBySensitiveFileShrinkRequest) SetLang(v string) *DescribeImageListBySensitiveFileShrinkRequest {
	s.Lang = &v
	return s
}

func (s *DescribeImageListBySensitiveFileShrinkRequest) SetPageSize(v int32) *DescribeImageListBySensitiveFileShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageListBySensitiveFileShrinkRequest) SetRepoInstanceId(v string) *DescribeImageListBySensitiveFileShrinkRequest {
	s.RepoInstanceId = &v
	return s
}

func (s *DescribeImageListBySensitiveFileShrinkRequest) SetRepoName(v string) *DescribeImageListBySensitiveFileShrinkRequest {
	s.RepoName = &v
	return s
}

func (s *DescribeImageListBySensitiveFileShrinkRequest) SetRepoNamespace(v string) *DescribeImageListBySensitiveFileShrinkRequest {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeImageListBySensitiveFileShrinkRequest) SetRiskLevel(v string) *DescribeImageListBySensitiveFileShrinkRequest {
	s.RiskLevel = &v
	return s
}

func (s *DescribeImageListBySensitiveFileShrinkRequest) SetScanRangeShrink(v string) *DescribeImageListBySensitiveFileShrinkRequest {
	s.ScanRangeShrink = &v
	return s
}

func (s *DescribeImageListBySensitiveFileShrinkRequest) SetSensitiveFileKey(v string) *DescribeImageListBySensitiveFileShrinkRequest {
	s.SensitiveFileKey = &v
	return s
}

type DescribeImageListBySensitiveFileResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// An array that consists of the information about the images.
	ImageInfos []*DescribeImageListBySensitiveFileResponseBodyImageInfos `json:"ImageInfos,omitempty" xml:"ImageInfos,omitempty" type:"Repeated"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The pagination information.
	PageInfo *DescribeImageListBySensitiveFileResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	// - **true**: The request was successful.
	// - **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeImageListBySensitiveFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageListBySensitiveFileResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageListBySensitiveFileResponseBody) SetCode(v string) *DescribeImageListBySensitiveFileResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBody) SetHttpStatusCode(v int32) *DescribeImageListBySensitiveFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBody) SetImageInfos(v []*DescribeImageListBySensitiveFileResponseBodyImageInfos) *DescribeImageListBySensitiveFileResponseBody {
	s.ImageInfos = v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBody) SetMessage(v string) *DescribeImageListBySensitiveFileResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBody) SetPageInfo(v *DescribeImageListBySensitiveFileResponseBodyPageInfo) *DescribeImageListBySensitiveFileResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBody) SetRequestId(v string) *DescribeImageListBySensitiveFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBody) SetSuccess(v bool) *DescribeImageListBySensitiveFileResponseBody {
	s.Success = &v
	return s
}

type DescribeImageListBySensitiveFileResponseBodyImageInfos struct {
	// The image digest.
	Digest *string `json:"Digest,omitempty" xml:"Digest,omitempty"`
	// The UNIX timestamp of when the first scan was performed. Unit: milliseconds.
	FirstScanTime *int64 `json:"FirstScanTime,omitempty" xml:"FirstScanTime,omitempty"`
	// The ID of the image instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The UNIX timestamp of when the last scan was performed. Unit: milliseconds.
	LastScanTime *int64 `json:"LastScanTime,omitempty" xml:"LastScanTime,omitempty"`
	// The region ID of the image instance.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the image repository.
	RepoName *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	// The namespace to which the image repository belongs.
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	// The risk level. Valid values:
	// - **high**
	// - **medium**
	// - **low**
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// The tag that is added to the image.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The UUID of the image.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeImageListBySensitiveFileResponseBodyImageInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageListBySensitiveFileResponseBodyImageInfos) GoString() string {
	return s.String()
}

func (s *DescribeImageListBySensitiveFileResponseBodyImageInfos) SetDigest(v string) *DescribeImageListBySensitiveFileResponseBodyImageInfos {
	s.Digest = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBodyImageInfos) SetFirstScanTime(v int64) *DescribeImageListBySensitiveFileResponseBodyImageInfos {
	s.FirstScanTime = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBodyImageInfos) SetInstanceId(v string) *DescribeImageListBySensitiveFileResponseBodyImageInfos {
	s.InstanceId = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBodyImageInfos) SetLastScanTime(v int64) *DescribeImageListBySensitiveFileResponseBodyImageInfos {
	s.LastScanTime = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBodyImageInfos) SetRegionId(v string) *DescribeImageListBySensitiveFileResponseBodyImageInfos {
	s.RegionId = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBodyImageInfos) SetRepoName(v string) *DescribeImageListBySensitiveFileResponseBodyImageInfos {
	s.RepoName = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBodyImageInfos) SetRepoNamespace(v string) *DescribeImageListBySensitiveFileResponseBodyImageInfos {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBodyImageInfos) SetRiskLevel(v string) *DescribeImageListBySensitiveFileResponseBodyImageInfos {
	s.RiskLevel = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBodyImageInfos) SetTag(v string) *DescribeImageListBySensitiveFileResponseBodyImageInfos {
	s.Tag = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBodyImageInfos) SetUuid(v string) *DescribeImageListBySensitiveFileResponseBodyImageInfos {
	s.Uuid = &v
	return s
}

type DescribeImageListBySensitiveFileResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The key of the last data entry.
	LastRowKey *string `json:"LastRowKey,omitempty" xml:"LastRowKey,omitempty"`
	// The number of entries returned per page. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageListBySensitiveFileResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageListBySensitiveFileResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeImageListBySensitiveFileResponseBodyPageInfo) SetCount(v int32) *DescribeImageListBySensitiveFileResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeImageListBySensitiveFileResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBodyPageInfo) SetLastRowKey(v string) *DescribeImageListBySensitiveFileResponseBodyPageInfo {
	s.LastRowKey = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBodyPageInfo) SetPageSize(v int32) *DescribeImageListBySensitiveFileResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponseBodyPageInfo) SetTotalCount(v int32) *DescribeImageListBySensitiveFileResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeImageListBySensitiveFileResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageListBySensitiveFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageListBySensitiveFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageListBySensitiveFileResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageListBySensitiveFileResponse) SetHeaders(v map[string]*string) *DescribeImageListBySensitiveFileResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageListBySensitiveFileResponse) SetStatusCode(v int32) *DescribeImageListBySensitiveFileResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageListBySensitiveFileResponse) SetBody(v *DescribeImageListBySensitiveFileResponseBody) *DescribeImageListBySensitiveFileResponse {
	s.Body = v
	return s
}

type DescribeImageListWithBaselineNameRequest struct {
	// The name of the image baseline.
	BaselineNameKey *string `json:"BaselineNameKey,omitempty" xml:"BaselineNameKey,omitempty"`
	// The ID of the container cluster.
	//
	// >  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the cluster.
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	// The ID of the container.
	ContainerId *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	// The search condition for the image baseline.
	Criteria *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	// The type of the search condition. Valid values:
	//
	// *   **BaselineNameAlias**: baseline name
	// *   **BaselineClassAlias**: baseline category
	CriteriaType *string `json:"CriteriaType,omitempty" xml:"CriteriaType,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The name of the image to which the container belongs.
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The SHA-256 value of the image digest.
	ImageDigest *string `json:"ImageDigest,omitempty" xml:"ImageDigest,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The namespace.
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The pod.
	Pod *string `json:"Pod,omitempty" xml:"Pod,omitempty"`
	// The instance ID of the image repository.
	RepoInstanceId *string `json:"RepoInstanceId,omitempty" xml:"RepoInstanceId,omitempty"`
	// The name of the image repository.
	RepoName *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	// The namespace to which the image repository belongs.
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	// The types of the assets that you want to scan.
	ScanRange []*string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty" type:"Repeated"`
}

func (s DescribeImageListWithBaselineNameRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageListWithBaselineNameRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageListWithBaselineNameRequest) SetBaselineNameKey(v string) *DescribeImageListWithBaselineNameRequest {
	s.BaselineNameKey = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetClusterId(v string) *DescribeImageListWithBaselineNameRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetClusterName(v string) *DescribeImageListWithBaselineNameRequest {
	s.ClusterName = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetContainerId(v string) *DescribeImageListWithBaselineNameRequest {
	s.ContainerId = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetCriteria(v string) *DescribeImageListWithBaselineNameRequest {
	s.Criteria = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetCriteriaType(v string) *DescribeImageListWithBaselineNameRequest {
	s.CriteriaType = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetCurrentPage(v int32) *DescribeImageListWithBaselineNameRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetImage(v string) *DescribeImageListWithBaselineNameRequest {
	s.Image = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetImageDigest(v string) *DescribeImageListWithBaselineNameRequest {
	s.ImageDigest = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetLang(v string) *DescribeImageListWithBaselineNameRequest {
	s.Lang = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetNamespace(v string) *DescribeImageListWithBaselineNameRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetPageSize(v int32) *DescribeImageListWithBaselineNameRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetPod(v string) *DescribeImageListWithBaselineNameRequest {
	s.Pod = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetRepoInstanceId(v string) *DescribeImageListWithBaselineNameRequest {
	s.RepoInstanceId = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetRepoName(v string) *DescribeImageListWithBaselineNameRequest {
	s.RepoName = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetRepoNamespace(v string) *DescribeImageListWithBaselineNameRequest {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeImageListWithBaselineNameRequest) SetScanRange(v []*string) *DescribeImageListWithBaselineNameRequest {
	s.ScanRange = v
	return s
}

type DescribeImageListWithBaselineNameResponseBody struct {
	// An array that consists of the images returned.
	ImageInfos []*DescribeImageListWithBaselineNameResponseBodyImageInfos `json:"ImageInfos,omitempty" xml:"ImageInfos,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *DescribeImageListWithBaselineNameResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageListWithBaselineNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageListWithBaselineNameResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageListWithBaselineNameResponseBody) SetImageInfos(v []*DescribeImageListWithBaselineNameResponseBodyImageInfos) *DescribeImageListWithBaselineNameResponseBody {
	s.ImageInfos = v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBody) SetPageInfo(v *DescribeImageListWithBaselineNameResponseBodyPageInfo) *DescribeImageListWithBaselineNameResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBody) SetRequestId(v string) *DescribeImageListWithBaselineNameResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageListWithBaselineNameResponseBodyImageInfos struct {
	// The ID of the cluster.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the cluster.
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	// The ID of the container.
	ContainerId *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	// The SHA-256 value of the image digest.
	Digest *string `json:"Digest,omitempty" xml:"Digest,omitempty"`
	// The number of images on which **high** baseline risks are detected.
	HighRiskImage *int32 `json:"HighRiskImage,omitempty" xml:"HighRiskImage,omitempty"`
	// The name of the image.
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The timestamp when the image was created. Unit: milliseconds.
	ImageCreate *int64 `json:"ImageCreate,omitempty" xml:"ImageCreate,omitempty"`
	// The ID of the image.
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The size of the image.
	ImageSize *int32 `json:"ImageSize,omitempty" xml:"ImageSize,omitempty"`
	// The timestamp when the image was updated. Unit: milliseconds.
	ImageUpdate *int64 `json:"ImageUpdate,omitempty" xml:"ImageUpdate,omitempty"`
	// The ID of the image instance.
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InternetIp   *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	IntranetIp   *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	LastScanTime *int64  `json:"LastScanTime,omitempty" xml:"LastScanTime,omitempty"`
	// The number of images on which **low** baseline risks are detected.
	LowRiskImage *int32 `json:"LowRiskImage,omitempty" xml:"LowRiskImage,omitempty"`
	// The number of images on which **medium** baseline risks are detected.
	MiddleRiskImage *int32 `json:"MiddleRiskImage,omitempty" xml:"MiddleRiskImage,omitempty"`
	// The namespace.
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The number of images that do not have baseline risks.
	NoRiskImage *int32 `json:"NoRiskImage,omitempty" xml:"NoRiskImage,omitempty"`
	// The pod.
	Pod *string `json:"Pod,omitempty" xml:"Pod,omitempty"`
	// The region ID of the image instance.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the image repository.
	RepoId *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	// The name of the image repository.
	RepoName *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	// The namespace to which the image repository belongs.
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	// The type of the image repository.
	RepoType *string `json:"RepoType,omitempty" xml:"RepoType,omitempty"`
	// Indicates whether the image is at risk. Valid values:
	//
	// *   **YES**
	// *   **NO**
	RiskStatus *string `json:"RiskStatus,omitempty" xml:"RiskStatus,omitempty"`
	// The version of the image.
	Tag        *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	TargetId   *string `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	TargetName *string `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	// The total number of risk items that are detected on the image by using the baseline.
	TotalItemCount *int32 `json:"TotalItemCount,omitempty" xml:"TotalItemCount,omitempty"`
	// The UUID of the image.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeImageListWithBaselineNameResponseBodyImageInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageListWithBaselineNameResponseBodyImageInfos) GoString() string {
	return s.String()
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetClusterId(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.ClusterId = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetClusterName(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.ClusterName = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetContainerId(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.ContainerId = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetDigest(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.Digest = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetHighRiskImage(v int32) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.HighRiskImage = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetImage(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.Image = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetImageCreate(v int64) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.ImageCreate = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetImageId(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.ImageId = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetImageSize(v int32) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.ImageSize = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetImageUpdate(v int64) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.ImageUpdate = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetInstanceId(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.InstanceId = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetInstanceName(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.InstanceName = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetInternetIp(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.InternetIp = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetIntranetIp(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.IntranetIp = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetLastScanTime(v int64) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.LastScanTime = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetLowRiskImage(v int32) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.LowRiskImage = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetMiddleRiskImage(v int32) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.MiddleRiskImage = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetNamespace(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.Namespace = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetNoRiskImage(v int32) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.NoRiskImage = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetPod(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.Pod = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetRegionId(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.RegionId = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetRepoId(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.RepoId = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetRepoName(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.RepoName = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetRepoNamespace(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetRepoType(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.RepoType = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetRiskStatus(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.RiskStatus = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetTag(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.Tag = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetTargetId(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.TargetId = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetTargetName(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.TargetName = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetTargetType(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.TargetType = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetTotalItemCount(v int32) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.TotalItemCount = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyImageInfos) SetUuid(v string) *DescribeImageListWithBaselineNameResponseBodyImageInfos {
	s.Uuid = &v
	return s
}

type DescribeImageListWithBaselineNameResponseBodyPageInfo struct {
	// The number of the images returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of images on which baseline risks are detected.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageListWithBaselineNameResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageListWithBaselineNameResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeImageListWithBaselineNameResponseBodyPageInfo) SetCount(v int32) *DescribeImageListWithBaselineNameResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeImageListWithBaselineNameResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyPageInfo) SetPageSize(v int32) *DescribeImageListWithBaselineNameResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponseBodyPageInfo) SetTotalCount(v int32) *DescribeImageListWithBaselineNameResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeImageListWithBaselineNameResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageListWithBaselineNameResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageListWithBaselineNameResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageListWithBaselineNameResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageListWithBaselineNameResponse) SetHeaders(v map[string]*string) *DescribeImageListWithBaselineNameResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageListWithBaselineNameResponse) SetStatusCode(v int32) *DescribeImageListWithBaselineNameResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageListWithBaselineNameResponse) SetBody(v *DescribeImageListWithBaselineNameResponseBody) *DescribeImageListWithBaselineNameResponse {
	s.Body = v
	return s
}

type DescribeImageRepoCriteriaRequest struct {
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeImageRepoCriteriaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoCriteriaRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoCriteriaRequest) SetValue(v string) *DescribeImageRepoCriteriaRequest {
	s.Value = &v
	return s
}

type DescribeImageRepoCriteriaResponseBody struct {
	CriteriaList []*DescribeImageRepoCriteriaResponseBodyCriteriaList `json:"CriteriaList,omitempty" xml:"CriteriaList,omitempty" type:"Repeated"`
	RequestId    *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageRepoCriteriaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoCriteriaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoCriteriaResponseBody) SetCriteriaList(v []*DescribeImageRepoCriteriaResponseBodyCriteriaList) *DescribeImageRepoCriteriaResponseBody {
	s.CriteriaList = v
	return s
}

func (s *DescribeImageRepoCriteriaResponseBody) SetRequestId(v string) *DescribeImageRepoCriteriaResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageRepoCriteriaResponseBodyCriteriaList struct {
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Values *string `json:"Values,omitempty" xml:"Values,omitempty"`
}

func (s DescribeImageRepoCriteriaResponseBodyCriteriaList) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoCriteriaResponseBodyCriteriaList) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoCriteriaResponseBodyCriteriaList) SetName(v string) *DescribeImageRepoCriteriaResponseBodyCriteriaList {
	s.Name = &v
	return s
}

func (s *DescribeImageRepoCriteriaResponseBodyCriteriaList) SetType(v string) *DescribeImageRepoCriteriaResponseBodyCriteriaList {
	s.Type = &v
	return s
}

func (s *DescribeImageRepoCriteriaResponseBodyCriteriaList) SetValues(v string) *DescribeImageRepoCriteriaResponseBodyCriteriaList {
	s.Values = &v
	return s
}

type DescribeImageRepoCriteriaResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageRepoCriteriaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageRepoCriteriaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoCriteriaResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoCriteriaResponse) SetHeaders(v map[string]*string) *DescribeImageRepoCriteriaResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageRepoCriteriaResponse) SetStatusCode(v int32) *DescribeImageRepoCriteriaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageRepoCriteriaResponse) SetBody(v *DescribeImageRepoCriteriaResponseBody) *DescribeImageRepoCriteriaResponse {
	s.Body = v
	return s
}

type DescribeImageRepoDetailListRequest struct {
	Criteria    *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	LogicalExp  *string `json:"LogicalExp,omitempty" xml:"LogicalExp,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeImageRepoDetailListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoDetailListRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoDetailListRequest) SetCriteria(v string) *DescribeImageRepoDetailListRequest {
	s.Criteria = &v
	return s
}

func (s *DescribeImageRepoDetailListRequest) SetCurrentPage(v int32) *DescribeImageRepoDetailListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageRepoDetailListRequest) SetLogicalExp(v string) *DescribeImageRepoDetailListRequest {
	s.LogicalExp = &v
	return s
}

func (s *DescribeImageRepoDetailListRequest) SetPageSize(v int32) *DescribeImageRepoDetailListRequest {
	s.PageSize = &v
	return s
}

type DescribeImageRepoDetailListResponseBody struct {
	ImageRepoResponses []*DescribeImageRepoDetailListResponseBodyImageRepoResponses `json:"ImageRepoResponses,omitempty" xml:"ImageRepoResponses,omitempty" type:"Repeated"`
	PageInfo           *DescribeImageRepoDetailListResponseBodyPageInfo             `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId          *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageRepoDetailListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoDetailListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoDetailListResponseBody) SetImageRepoResponses(v []*DescribeImageRepoDetailListResponseBodyImageRepoResponses) *DescribeImageRepoDetailListResponseBody {
	s.ImageRepoResponses = v
	return s
}

func (s *DescribeImageRepoDetailListResponseBody) SetPageInfo(v *DescribeImageRepoDetailListResponseBodyPageInfo) *DescribeImageRepoDetailListResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeImageRepoDetailListResponseBody) SetRequestId(v string) *DescribeImageRepoDetailListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageRepoDetailListResponseBodyImageRepoResponses struct {
	AlarmCount    *int32  `json:"AlarmCount,omitempty" xml:"AlarmCount,omitempty"`
	AlarmStatus   *string `json:"AlarmStatus,omitempty" xml:"AlarmStatus,omitempty"`
	Endpoints     *string `json:"Endpoints,omitempty" xml:"Endpoints,omitempty"`
	HcCount       *int32  `json:"HcCount,omitempty" xml:"HcCount,omitempty"`
	HcStatus      *string `json:"HcStatus,omitempty" xml:"HcStatus,omitempty"`
	ImageCount    *int32  `json:"ImageCount,omitempty" xml:"ImageCount,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegistryType  *string `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
	RepoId        *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	RepoName      *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	RiskStatus    *string `json:"RiskStatus,omitempty" xml:"RiskStatus,omitempty"`
	VulCount      *int32  `json:"VulCount,omitempty" xml:"VulCount,omitempty"`
	VulStatus     *string `json:"VulStatus,omitempty" xml:"VulStatus,omitempty"`
}

func (s DescribeImageRepoDetailListResponseBodyImageRepoResponses) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoDetailListResponseBodyImageRepoResponses) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetAlarmCount(v int32) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.AlarmCount = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetAlarmStatus(v string) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.AlarmStatus = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetEndpoints(v string) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.Endpoints = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetHcCount(v int32) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.HcCount = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetHcStatus(v string) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.HcStatus = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetImageCount(v int32) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.ImageCount = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetInstanceId(v string) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.InstanceId = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetRegionId(v string) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.RegionId = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetRegistryType(v string) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.RegistryType = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetRepoId(v string) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.RepoId = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetRepoName(v string) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.RepoName = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetRepoNamespace(v string) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetRiskStatus(v string) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.RiskStatus = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetVulCount(v int32) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.VulCount = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyImageRepoResponses) SetVulStatus(v string) *DescribeImageRepoDetailListResponseBodyImageRepoResponses {
	s.VulStatus = &v
	return s
}

type DescribeImageRepoDetailListResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageRepoDetailListResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoDetailListResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoDetailListResponseBodyPageInfo) SetCount(v int32) *DescribeImageRepoDetailListResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeImageRepoDetailListResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyPageInfo) SetPageSize(v int32) *DescribeImageRepoDetailListResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeImageRepoDetailListResponseBodyPageInfo) SetTotalCount(v int32) *DescribeImageRepoDetailListResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeImageRepoDetailListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageRepoDetailListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageRepoDetailListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoDetailListResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoDetailListResponse) SetHeaders(v map[string]*string) *DescribeImageRepoDetailListResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageRepoDetailListResponse) SetStatusCode(v int32) *DescribeImageRepoDetailListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageRepoDetailListResponse) SetBody(v *DescribeImageRepoDetailListResponseBody) *DescribeImageRepoDetailListResponse {
	s.Body = v
	return s
}

type DescribeImageRepoListRequest struct {
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	FieldName     *string `json:"FieldName,omitempty" xml:"FieldName,omitempty"`
	FieldValue    *string `json:"FieldValue,omitempty" xml:"FieldValue,omitempty"`
	OperateType   *string `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RepoName      *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	TargetType    *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeImageRepoListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoListRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoListRequest) SetCurrentPage(v int32) *DescribeImageRepoListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageRepoListRequest) SetFieldName(v string) *DescribeImageRepoListRequest {
	s.FieldName = &v
	return s
}

func (s *DescribeImageRepoListRequest) SetFieldValue(v string) *DescribeImageRepoListRequest {
	s.FieldValue = &v
	return s
}

func (s *DescribeImageRepoListRequest) SetOperateType(v string) *DescribeImageRepoListRequest {
	s.OperateType = &v
	return s
}

func (s *DescribeImageRepoListRequest) SetPageSize(v int32) *DescribeImageRepoListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageRepoListRequest) SetRepoName(v string) *DescribeImageRepoListRequest {
	s.RepoName = &v
	return s
}

func (s *DescribeImageRepoListRequest) SetRepoNamespace(v string) *DescribeImageRepoListRequest {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeImageRepoListRequest) SetTargetType(v string) *DescribeImageRepoListRequest {
	s.TargetType = &v
	return s
}

func (s *DescribeImageRepoListRequest) SetType(v string) *DescribeImageRepoListRequest {
	s.Type = &v
	return s
}

type DescribeImageRepoListResponseBody struct {
	AddTargetCount *int32                                            `json:"AddTargetCount,omitempty" xml:"AddTargetCount,omitempty"`
	AllTargetCount *int32                                            `json:"AllTargetCount,omitempty" xml:"AllTargetCount,omitempty"`
	DelTargetCount *int32                                            `json:"DelTargetCount,omitempty" xml:"DelTargetCount,omitempty"`
	ImageRepoList  []*DescribeImageRepoListResponseBodyImageRepoList `json:"ImageRepoList,omitempty" xml:"ImageRepoList,omitempty" type:"Repeated"`
	PageInfo       *DescribeImageRepoListResponseBodyPageInfo        `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId      *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageRepoListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoListResponseBody) SetAddTargetCount(v int32) *DescribeImageRepoListResponseBody {
	s.AddTargetCount = &v
	return s
}

func (s *DescribeImageRepoListResponseBody) SetAllTargetCount(v int32) *DescribeImageRepoListResponseBody {
	s.AllTargetCount = &v
	return s
}

func (s *DescribeImageRepoListResponseBody) SetDelTargetCount(v int32) *DescribeImageRepoListResponseBody {
	s.DelTargetCount = &v
	return s
}

func (s *DescribeImageRepoListResponseBody) SetImageRepoList(v []*DescribeImageRepoListResponseBodyImageRepoList) *DescribeImageRepoListResponseBody {
	s.ImageRepoList = v
	return s
}

func (s *DescribeImageRepoListResponseBody) SetPageInfo(v *DescribeImageRepoListResponseBodyPageInfo) *DescribeImageRepoListResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeImageRepoListResponseBody) SetRequestId(v string) *DescribeImageRepoListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageRepoListResponseBodyImageRepoList struct {
	Flag          *string `json:"Flag,omitempty" xml:"Flag,omitempty"`
	RepoName      *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
}

func (s DescribeImageRepoListResponseBodyImageRepoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoListResponseBodyImageRepoList) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoListResponseBodyImageRepoList) SetFlag(v string) *DescribeImageRepoListResponseBodyImageRepoList {
	s.Flag = &v
	return s
}

func (s *DescribeImageRepoListResponseBodyImageRepoList) SetRepoName(v string) *DescribeImageRepoListResponseBodyImageRepoList {
	s.RepoName = &v
	return s
}

func (s *DescribeImageRepoListResponseBodyImageRepoList) SetRepoNamespace(v string) *DescribeImageRepoListResponseBodyImageRepoList {
	s.RepoNamespace = &v
	return s
}

type DescribeImageRepoListResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageRepoListResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoListResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoListResponseBodyPageInfo) SetCount(v int32) *DescribeImageRepoListResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeImageRepoListResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeImageRepoListResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageRepoListResponseBodyPageInfo) SetPageSize(v int32) *DescribeImageRepoListResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeImageRepoListResponseBodyPageInfo) SetTotalCount(v int32) *DescribeImageRepoListResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeImageRepoListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageRepoListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageRepoListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageRepoListResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageRepoListResponse) SetHeaders(v map[string]*string) *DescribeImageRepoListResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageRepoListResponse) SetStatusCode(v int32) *DescribeImageRepoListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageRepoListResponse) SetBody(v *DescribeImageRepoListResponseBody) *DescribeImageRepoListResponse {
	s.Body = v
	return s
}

type DescribeImageScanAuthCountResponseBody struct {
	// The details about the quota for container image scan.
	ImageScan *DescribeImageScanAuthCountResponseBodyImageScan `json:"ImageScan,omitempty" xml:"ImageScan,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageScanAuthCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageScanAuthCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageScanAuthCountResponseBody) SetImageScan(v *DescribeImageScanAuthCountResponseBodyImageScan) *DescribeImageScanAuthCountResponseBody {
	s.ImageScan = v
	return s
}

func (s *DescribeImageScanAuthCountResponseBody) SetRequestId(v string) *DescribeImageScanAuthCountResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageScanAuthCountResponseBodyImageScan struct {
	// The quota for container image scan.
	ImageScanCapacity *int64 `json:"ImageScanCapacity,omitempty" xml:"ImageScanCapacity,omitempty"`
	// The instance ID of Security Center.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The consumed quota for container image scan.
	ScanCount *int64 `json:"ScanCount,omitempty" xml:"ScanCount,omitempty"`
}

func (s DescribeImageScanAuthCountResponseBodyImageScan) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageScanAuthCountResponseBodyImageScan) GoString() string {
	return s.String()
}

func (s *DescribeImageScanAuthCountResponseBodyImageScan) SetImageScanCapacity(v int64) *DescribeImageScanAuthCountResponseBodyImageScan {
	s.ImageScanCapacity = &v
	return s
}

func (s *DescribeImageScanAuthCountResponseBodyImageScan) SetInstanceId(v string) *DescribeImageScanAuthCountResponseBodyImageScan {
	s.InstanceId = &v
	return s
}

func (s *DescribeImageScanAuthCountResponseBodyImageScan) SetScanCount(v int64) *DescribeImageScanAuthCountResponseBodyImageScan {
	s.ScanCount = &v
	return s
}

type DescribeImageScanAuthCountResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageScanAuthCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageScanAuthCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageScanAuthCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageScanAuthCountResponse) SetHeaders(v map[string]*string) *DescribeImageScanAuthCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageScanAuthCountResponse) SetStatusCode(v int32) *DescribeImageScanAuthCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageScanAuthCountResponse) SetBody(v *DescribeImageScanAuthCountResponseBody) *DescribeImageScanAuthCountResponse {
	s.Body = v
	return s
}

type DescribeImageScanAuthorizationResponseBody struct {
	AuthStatus *DescribeImageScanAuthorizationResponseBodyAuthStatus `json:"AuthStatus,omitempty" xml:"AuthStatus,omitempty" type:"Struct"`
	RequestId  *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageScanAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageScanAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageScanAuthorizationResponseBody) SetAuthStatus(v *DescribeImageScanAuthorizationResponseBodyAuthStatus) *DescribeImageScanAuthorizationResponseBody {
	s.AuthStatus = v
	return s
}

func (s *DescribeImageScanAuthorizationResponseBody) SetRequestId(v string) *DescribeImageScanAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageScanAuthorizationResponseBodyAuthStatus struct {
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeImageScanAuthorizationResponseBodyAuthStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageScanAuthorizationResponseBodyAuthStatus) GoString() string {
	return s.String()
}

func (s *DescribeImageScanAuthorizationResponseBodyAuthStatus) SetStatus(v bool) *DescribeImageScanAuthorizationResponseBodyAuthStatus {
	s.Status = &v
	return s
}

type DescribeImageScanAuthorizationResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageScanAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageScanAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageScanAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageScanAuthorizationResponse) SetHeaders(v map[string]*string) *DescribeImageScanAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageScanAuthorizationResponse) SetStatusCode(v int32) *DescribeImageScanAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageScanAuthorizationResponse) SetBody(v *DescribeImageScanAuthorizationResponseBody) *DescribeImageScanAuthorizationResponse {
	s.Body = v
	return s
}

type DescribeImageSensitiveFileByKeyRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The UUID of the image.
	ImageUuid *string `json:"ImageUuid,omitempty" xml:"ImageUuid,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The type of the asset that you want to scan. Valid values:
	//
	// *   **image**
	// *   **container**
	ScanRange []*string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty" type:"Repeated"`
	// The alert type of the sensitive file. Valid values:
	//
	// *   **npm_token**: NPM Token
	// *   **ftp_cfg**: FTP Config
	// *   **google\_oauth_key**: Google OAuth Key
	// *   **planetscale_passwd**: Planetscale password
	// *   **github\_ssh_key**: Github SSH Key
	// *   **msbuild\_publish_profile**: MSBuild publish profile
	// *   **fastly\_cdn_token**: Fastly CDN Token
	// *   **ssh\_private_key**: SSH Private Key
	// *   **aws_cli**: AWS CLI Credentials
	// *   **cpanel\_proftpd**: cPanel ProFTPd Credential
	// *   **postgresql_passwd**: PostgreSQl Passwd
	// *   **discord\_client_cred**: Discord Client Credential
	// *   **rails_database**: Rails Database Config
	// *   **aws\_access_key**: AWS Access Key
	// *   **esmtp_cfg**: ESMTP Config
	// *   **docker\_registry_cfg**: Docker Registry Config
	// *   **pem**: PEM
	// *   **common_cred**: Common Credential
	// *   **sftp_cfg**: SFTP Config
	// *   **grafana_token**: Grafana Token
	// *   **slack_token**: Slack Token
	// *   **ec\_private_key**: EC Private Key
	// *   **pypi_token**: PyPI Token
	// *   **finicity_token**: Finicity Token
	// *   **k8s\_client_key**: Kubernetes Client Key
	// *   **git_cfg**: Git Config
	// *   **django_key**: Django Key
	// *   **jenkins_ssh**: Jenkins SSH Config
	// *   **openssh\_private_key**: OPENSSH Private Key
	// *   **square_oauth**: Square OAuth Token
	// *   **typeform_token**: Typeform Token
	// *   **common\_database_cfg**: Common Database Config
	// *   **wordpress\_database_cfg**: Wordpress Database Config
	// *   **googlecloud\_api_key**: Google Cloud API Key
	// *   **vscode_sftp**: VSCode SFTP Config
	// *   **apache_htpasswd**: Apache htpasswd
	// *   **planetscale_token**: Planetscale Token
	// *   **contentful\_preview_token**: Contentful Preview Token
	// *   **php\_database_cfg**: PHP Database Config
	// *   **atom\_remote_sync**: Atom Remote Sync Config
	// *   **aws\_session_token**: AWS Session Token
	// *   **atom\_sftp_cfg**: Atom SFTP Config
	// *   **asana\_client\_private_key**: Asana Client Private Key
	// *   **tencentcloud_ak**: Tencent Cloud SecretId
	// *   **rsa\_private_key**: RSA Private Key
	// *   **github\_personal_token**: Github Personal Token
	// *   **pgp**: PGP
	// *   **stripe_skpk**: Stripe Secret Key
	// *   **square_token**: Square Token
	// *   **rails_carrierwave**: Rails Carrierwave Credential
	// *   **dbeaver\_database_cfg**: DBeaver Database Config
	// *   **robomongo_cred**: Robomongo Credential
	// *   **github\_oauth_token**: Github OAuth Token
	// *   **pulumi_token**: Pulumi Token
	// *   **ventrilo_voip**: Ventrilo VoIP Server Config
	// *   **macos_keychain**: macOS Keychain
	// *   **amazon\_mws_token**: Amazon MWS Token
	// *   **dynatrace_token**: Dynatrace Token
	// *   **java_keystore**: Java Keystore
	// *   **microsoft_sdf**: Microsoft SDF
	// *   **kubernetes\_dashboard_cred**: Kubernetes Dashboard User Credential
	// *   **atlassian_token**: Atlassian Token
	// *   **rdp**: RDP
	// *   **mailgun_key**: Mailgun Webhook Signing Key
	// *   **mailchimp\_api_key**: Mailchimp API Key
	// *   **netrc_cfg**: .netrc config
	// *   **openvpn_cfg**: OpenVPN Config
	// *   **github\_refresh_token**: Github Refresh Token
	// *   **salesforce**: Salesforce Credential
	// *   **sendinblue**: Sendinblue Token
	// *   **pkcs\_private_key**: PKCS Private Key
	// *   **rubyonrails_passwd**: Ruby on Rails Passwd
	// *   **filezilla_ftp**: FileZilla FTP Config
	// *   **databricks_token**: Databricks Token
	// *   **gitLab\_personal_token**: GitLab Personal Token
	// *   **rails\_master_key**: Rails Master Key
	// *   **sqlite**: SQLite3/SQLite Database
	// *   **firefox_logins**: Firefox Login Config
	// *   **mailgun\_private_token**: Mailgun Private Token
	// *   **joomla_cfg**: Joomla Config
	// *   **hashicorp\_terraform_token**: Hashicorp Terraform Token
	// *   **jetbrains_ides**: Jetbrains IDEs Config
	// *   **heroku\_api_key**: Heroku API key
	// *   **messagebird_token**: MessageBird Token
	// *   **github\_app_token**: Github App Token
	// *   **hashicorp\_vault_token**: Hashicorp Vault Token
	// *   **pgp\_private_key**: PGP Private Key
	// *   **sshpasswd**: SSH password
	// *   **huaweicloud_ak**: Huaei Cloud Access Key
	// *   **aws_s3cmd**: AWS S3cmd Config
	// *   **php_config**: php Config
	// *   **common\_private_key**: Common Private Key Type
	// *   **microsoft_mdf**: Microsoft MDF
	// *   **mediawiki_cfg**: MediaWiki Config
	// *   **jenkins_cred**: Jenkins Credential
	// *   **rubygems_cred**: Rubygems Credential
	// *   **clojars_token**: Clojars Token
	// *   **phoenix\_web_passwd**: Phoenix Web Credential
	// *   **puttygen\_private_key**: PuTTYgen Private Key
	// *   **google\_oauth_token**: Google Oauth Token
	// *   **rubyonrails_cfg**: Ruby On Rails Database Config
	// *   **lob\_api_key**: Lob API Key
	// *   **pkcs_cred**: PKCS#12
	// *   **otr\_private_key**: OTR Private Key
	// *   **contentful\_delivery_token**: Contentful Delivery Token
	// *   **digital\_ocean_tugboat**: Digital Ocean Tugboat Config
	// *   **dsa\_private_key**: DSA Private Key
	// *   **rails\_app_token**: Rails App Token
	// *   **git_cred**: Git User Credential
	// *   **newrelic\_api_key**: New Relic User API Key
	// *   **github_hub**: Github Token
	// *   **rubygem**: Rubygem Token
	SensitiveFileKey *string `json:"SensitiveFileKey,omitempty" xml:"SensitiveFileKey,omitempty"`
}

func (s DescribeImageSensitiveFileByKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSensitiveFileByKeyRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageSensitiveFileByKeyRequest) SetCurrentPage(v int32) *DescribeImageSensitiveFileByKeyRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyRequest) SetImageUuid(v string) *DescribeImageSensitiveFileByKeyRequest {
	s.ImageUuid = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyRequest) SetLang(v string) *DescribeImageSensitiveFileByKeyRequest {
	s.Lang = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyRequest) SetPageSize(v int32) *DescribeImageSensitiveFileByKeyRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyRequest) SetScanRange(v []*string) *DescribeImageSensitiveFileByKeyRequest {
	s.ScanRange = v
	return s
}

func (s *DescribeImageSensitiveFileByKeyRequest) SetSensitiveFileKey(v string) *DescribeImageSensitiveFileByKeyRequest {
	s.SensitiveFileKey = &v
	return s
}

type DescribeImageSensitiveFileByKeyShrinkRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The UUID of the image.
	ImageUuid *string `json:"ImageUuid,omitempty" xml:"ImageUuid,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The type of the asset that you want to scan. Valid values:
	//
	// *   **image**
	// *   **container**
	ScanRangeShrink *string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty"`
	// The alert type of the sensitive file. Valid values:
	//
	// *   **npm_token**: NPM Token
	// *   **ftp_cfg**: FTP Config
	// *   **google\_oauth_key**: Google OAuth Key
	// *   **planetscale_passwd**: Planetscale password
	// *   **github\_ssh_key**: Github SSH Key
	// *   **msbuild\_publish_profile**: MSBuild publish profile
	// *   **fastly\_cdn_token**: Fastly CDN Token
	// *   **ssh\_private_key**: SSH Private Key
	// *   **aws_cli**: AWS CLI Credentials
	// *   **cpanel\_proftpd**: cPanel ProFTPd Credential
	// *   **postgresql_passwd**: PostgreSQl Passwd
	// *   **discord\_client_cred**: Discord Client Credential
	// *   **rails_database**: Rails Database Config
	// *   **aws\_access_key**: AWS Access Key
	// *   **esmtp_cfg**: ESMTP Config
	// *   **docker\_registry_cfg**: Docker Registry Config
	// *   **pem**: PEM
	// *   **common_cred**: Common Credential
	// *   **sftp_cfg**: SFTP Config
	// *   **grafana_token**: Grafana Token
	// *   **slack_token**: Slack Token
	// *   **ec\_private_key**: EC Private Key
	// *   **pypi_token**: PyPI Token
	// *   **finicity_token**: Finicity Token
	// *   **k8s\_client_key**: Kubernetes Client Key
	// *   **git_cfg**: Git Config
	// *   **django_key**: Django Key
	// *   **jenkins_ssh**: Jenkins SSH Config
	// *   **openssh\_private_key**: OPENSSH Private Key
	// *   **square_oauth**: Square OAuth Token
	// *   **typeform_token**: Typeform Token
	// *   **common\_database_cfg**: Common Database Config
	// *   **wordpress\_database_cfg**: Wordpress Database Config
	// *   **googlecloud\_api_key**: Google Cloud API Key
	// *   **vscode_sftp**: VSCode SFTP Config
	// *   **apache_htpasswd**: Apache htpasswd
	// *   **planetscale_token**: Planetscale Token
	// *   **contentful\_preview_token**: Contentful Preview Token
	// *   **php\_database_cfg**: PHP Database Config
	// *   **atom\_remote_sync**: Atom Remote Sync Config
	// *   **aws\_session_token**: AWS Session Token
	// *   **atom\_sftp_cfg**: Atom SFTP Config
	// *   **asana\_client\_private_key**: Asana Client Private Key
	// *   **tencentcloud_ak**: Tencent Cloud SecretId
	// *   **rsa\_private_key**: RSA Private Key
	// *   **github\_personal_token**: Github Personal Token
	// *   **pgp**: PGP
	// *   **stripe_skpk**: Stripe Secret Key
	// *   **square_token**: Square Token
	// *   **rails_carrierwave**: Rails Carrierwave Credential
	// *   **dbeaver\_database_cfg**: DBeaver Database Config
	// *   **robomongo_cred**: Robomongo Credential
	// *   **github\_oauth_token**: Github OAuth Token
	// *   **pulumi_token**: Pulumi Token
	// *   **ventrilo_voip**: Ventrilo VoIP Server Config
	// *   **macos_keychain**: macOS Keychain
	// *   **amazon\_mws_token**: Amazon MWS Token
	// *   **dynatrace_token**: Dynatrace Token
	// *   **java_keystore**: Java Keystore
	// *   **microsoft_sdf**: Microsoft SDF
	// *   **kubernetes\_dashboard_cred**: Kubernetes Dashboard User Credential
	// *   **atlassian_token**: Atlassian Token
	// *   **rdp**: RDP
	// *   **mailgun_key**: Mailgun Webhook Signing Key
	// *   **mailchimp\_api_key**: Mailchimp API Key
	// *   **netrc_cfg**: .netrc config
	// *   **openvpn_cfg**: OpenVPN Config
	// *   **github\_refresh_token**: Github Refresh Token
	// *   **salesforce**: Salesforce Credential
	// *   **sendinblue**: Sendinblue Token
	// *   **pkcs\_private_key**: PKCS Private Key
	// *   **rubyonrails_passwd**: Ruby on Rails Passwd
	// *   **filezilla_ftp**: FileZilla FTP Config
	// *   **databricks_token**: Databricks Token
	// *   **gitLab\_personal_token**: GitLab Personal Token
	// *   **rails\_master_key**: Rails Master Key
	// *   **sqlite**: SQLite3/SQLite Database
	// *   **firefox_logins**: Firefox Login Config
	// *   **mailgun\_private_token**: Mailgun Private Token
	// *   **joomla_cfg**: Joomla Config
	// *   **hashicorp\_terraform_token**: Hashicorp Terraform Token
	// *   **jetbrains_ides**: Jetbrains IDEs Config
	// *   **heroku\_api_key**: Heroku API key
	// *   **messagebird_token**: MessageBird Token
	// *   **github\_app_token**: Github App Token
	// *   **hashicorp\_vault_token**: Hashicorp Vault Token
	// *   **pgp\_private_key**: PGP Private Key
	// *   **sshpasswd**: SSH password
	// *   **huaweicloud_ak**: Huaei Cloud Access Key
	// *   **aws_s3cmd**: AWS S3cmd Config
	// *   **php_config**: php Config
	// *   **common\_private_key**: Common Private Key Type
	// *   **microsoft_mdf**: Microsoft MDF
	// *   **mediawiki_cfg**: MediaWiki Config
	// *   **jenkins_cred**: Jenkins Credential
	// *   **rubygems_cred**: Rubygems Credential
	// *   **clojars_token**: Clojars Token
	// *   **phoenix\_web_passwd**: Phoenix Web Credential
	// *   **puttygen\_private_key**: PuTTYgen Private Key
	// *   **google\_oauth_token**: Google Oauth Token
	// *   **rubyonrails_cfg**: Ruby On Rails Database Config
	// *   **lob\_api_key**: Lob API Key
	// *   **pkcs_cred**: PKCS#12
	// *   **otr\_private_key**: OTR Private Key
	// *   **contentful\_delivery_token**: Contentful Delivery Token
	// *   **digital\_ocean_tugboat**: Digital Ocean Tugboat Config
	// *   **dsa\_private_key**: DSA Private Key
	// *   **rails\_app_token**: Rails App Token
	// *   **git_cred**: Git User Credential
	// *   **newrelic\_api_key**: New Relic User API Key
	// *   **github_hub**: Github Token
	// *   **rubygem**: Rubygem Token
	SensitiveFileKey *string `json:"SensitiveFileKey,omitempty" xml:"SensitiveFileKey,omitempty"`
}

func (s DescribeImageSensitiveFileByKeyShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSensitiveFileByKeyShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageSensitiveFileByKeyShrinkRequest) SetCurrentPage(v int32) *DescribeImageSensitiveFileByKeyShrinkRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyShrinkRequest) SetImageUuid(v string) *DescribeImageSensitiveFileByKeyShrinkRequest {
	s.ImageUuid = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyShrinkRequest) SetLang(v string) *DescribeImageSensitiveFileByKeyShrinkRequest {
	s.Lang = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyShrinkRequest) SetPageSize(v int32) *DescribeImageSensitiveFileByKeyShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyShrinkRequest) SetScanRangeShrink(v string) *DescribeImageSensitiveFileByKeyShrinkRequest {
	s.ScanRangeShrink = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyShrinkRequest) SetSensitiveFileKey(v string) *DescribeImageSensitiveFileByKeyShrinkRequest {
	s.SensitiveFileKey = &v
	return s
}

type DescribeImageSensitiveFileByKeyResponseBody struct {
	// The status code returned. If the 200 status code is returned, the request was successful.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The pagination information.
	PageInfo *DescribeImageSensitiveFileByKeyResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of the sensitive files.
	SensitiveFileList []*DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList `json:"SensitiveFileList,omitempty" xml:"SensitiveFileList,omitempty" type:"Repeated"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeImageSensitiveFileByKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSensitiveFileByKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageSensitiveFileByKeyResponseBody) SetCode(v string) *DescribeImageSensitiveFileByKeyResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBody) SetHttpStatusCode(v int32) *DescribeImageSensitiveFileByKeyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBody) SetMessage(v string) *DescribeImageSensitiveFileByKeyResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBody) SetPageInfo(v *DescribeImageSensitiveFileByKeyResponseBodyPageInfo) *DescribeImageSensitiveFileByKeyResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBody) SetRequestId(v string) *DescribeImageSensitiveFileByKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBody) SetSensitiveFileList(v []*DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList) *DescribeImageSensitiveFileByKeyResponseBody {
	s.SensitiveFileList = v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBody) SetSuccess(v bool) *DescribeImageSensitiveFileByKeyResponseBody {
	s.Success = &v
	return s
}

type DescribeImageSensitiveFileByKeyResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The key of the last data entry.
	LastRowKey *string `json:"LastRowKey,omitempty" xml:"LastRowKey,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageSensitiveFileByKeyResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSensitiveFileByKeyResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeImageSensitiveFileByKeyResponseBodyPageInfo) SetCount(v int32) *DescribeImageSensitiveFileByKeyResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeImageSensitiveFileByKeyResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBodyPageInfo) SetLastRowKey(v string) *DescribeImageSensitiveFileByKeyResponseBodyPageInfo {
	s.LastRowKey = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBodyPageInfo) SetPageSize(v int32) *DescribeImageSensitiveFileByKeyResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBodyPageInfo) SetTotalCount(v int32) *DescribeImageSensitiveFileByKeyResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList struct {
	// The suggestion.
	Advice *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	// The file path.
	FilePath *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	// The timestamp when the first scan was performed. Unit: milliseconds.
	FirstScanTime *int64 `json:"FirstScanTime,omitempty" xml:"FirstScanTime,omitempty"`
	// The timestamp when the last scan was performed. Unit: milliseconds.
	LastScanTime *int64 `json:"LastScanTime,omitempty" xml:"LastScanTime,omitempty"`
	// The digest of the image layer.
	LayerDigest *string `json:"LayerDigest,omitempty" xml:"LayerDigest,omitempty"`
	// The sensitive content.
	Promt *string `json:"Promt,omitempty" xml:"Promt,omitempty"`
	// The risk level of the sensitive file. Valid values:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// The alert type of the sensitive file. Valid values:
	//
	// *   **npm_token**: NPM Token
	// *   **ftp_cfg**: FTP Config
	// *   **google\_oauth_key**: Google OAuth Key
	// *   **planetscale_passwd**: Planetscale password
	// *   **github\_ssh_key**: Github SSH Key
	// *   **msbuild\_publish_profile**: MSBuild publish profile
	// *   **fastly\_cdn_token**: Fastly CDN Token
	// *   **ssh\_private_key**: SSH Private Key
	// *   **aws_cli**: AWS CLI Credentials
	// *   **cpanel\_proftpd**: cPanel ProFTPd Credential
	// *   **postgresql_passwd**: PostgreSQl Passwd
	// *   **discord\_client_cred**: Discord Client Credential
	// *   **rails_database**: Rails Database Config
	// *   **aws\_access_key**: AWS Access Key
	// *   **esmtp_cfg**: ESMTP Config
	// *   **docker\_registry_cfg**: Docker Registry Config
	// *   **pem**: PEM
	// *   **common_cred**: Common Credential
	// *   **sftp_cfg**: SFTP Config
	// *   **grafana_token**: Grafana Token
	// *   **slack_token**: Slack Token
	// *   **ec\_private_key**: EC Private Key
	// *   **pypi_token**: PyPI Token
	// *   **finicity_token**: Finicity Token
	// *   **k8s\_client_key**: Kubernetes Client Key
	// *   **git_cfg**: Git Config
	// *   **django_key**: Django Key
	// *   **jenkins_ssh**: Jenkins SSH Config
	// *   **openssh\_private_key**: OPENSSH Private Key
	// *   **square_oauth**: Square OAuth Token
	// *   **typeform_token**: Typeform Token
	// *   **common\_database_cfg**: Common Database Config
	// *   **wordpress\_database_cfg**: Wordpress Database Config
	// *   **googlecloud\_api_key**: Google Cloud API Key
	// *   **vscode_sftp**: VSCode SFTP Config
	// *   **apache_htpasswd**: Apache htpasswd
	// *   **planetscale_token**: Planetscale Token
	// *   **contentful\_preview_token**: Contentful Preview Token
	// *   **php\_database_cfg**: PHP Database Config
	// *   **atom\_remote_sync**: Atom Remote Sync Config
	// *   **aws\_session_token**: AWS Session Token
	// *   **atom\_sftp_cfg**: Atom SFTP Config
	// *   **asana\_client\_private_key**: Asana Client Private Key
	// *   **tencentcloud_ak**: Tencent Cloud SecretId
	// *   **rsa\_private_key**: RSA Private Key
	// *   **github\_personal_token**: Github Personal Token
	// *   **pgp**: PGP
	// *   **stripe_skpk**: Stripe Secret Key
	// *   **square_token**: Square Token
	// *   **rails_carrierwave**: Rails Carrierwave Credential
	// *   **dbeaver\_database_cfg**: DBeaver Database Config
	// *   **robomongo_cred**: Robomongo Credential
	// *   **github\_oauth_token**: Github OAuth Token
	// *   **pulumi_token**: Pulumi Token
	// *   **ventrilo_voip**: Ventrilo VoIP Server Config
	// *   **macos_keychain**: macOS Keychain
	// *   **amazon\_mws_token**: Amazon MWS Token
	// *   **dynatrace_token**: Dynatrace Token
	// *   **java_keystore**: Java Keystore
	// *   **microsoft_sdf**: Microsoft SDF
	// *   **kubernetes\_dashboard_cred**: Kubernetes Dashboard User Credential
	// *   **atlassian_token**: Atlassian Token
	// *   **rdp**: RDP
	// *   **mailgun_key**: Mailgun Webhook Signing Key
	// *   **mailchimp\_api_key**: Mailchimp API Key
	// *   **netrc_cfg**: .netrc config
	// *   **openvpn_cfg**: OpenVPN Config
	// *   **github\_refresh_token**: Github Refresh Token
	// *   **salesforce**: Salesforce Credential
	// *   **sendinblue**: Sendinblue Token
	// *   **pkcs\_private_key**: PKCS Private Key
	// *   **rubyonrails_passwd**: Ruby on Rails Passwd
	// *   **filezilla_ftp**: FileZilla FTP Config
	// *   **databricks_token**: Databricks Token
	// *   **gitLab\_personal_token**: GitLab Personal Token
	// *   **rails\_master_key**: Rails Master Key
	// *   **sqlite**: SQLite3/SQLite Database
	// *   **firefox_logins**: Firefox Login Config
	// *   **mailgun\_private_token**: Mailgun Private Token
	// *   **joomla_cfg**: Joomla Config
	// *   **hashicorp\_terraform_token**: Hashicorp Terraform Token
	// *   **jetbrains_ides**: Jetbrains IDEs Config
	// *   **heroku\_api_key**: Heroku API key
	// *   **messagebird_token**: MessageBird Token
	// *   **github\_app_token**: Github App Token
	// *   **hashicorp\_vault_token**: Hashicorp Vault Token
	// *   **pgp\_private_key**: PGP Private Key
	// *   **sshpasswd**: SSH password
	// *   **huaweicloud_ak**: Huaei Cloud Access Key
	// *   **aws_s3cmd**: AWS S3cmd Config
	// *   **php_config**: php Config
	// *   **common\_private_key**: Common Private Key Type
	// *   **microsoft_mdf**: Microsoft MDF
	// *   **mediawiki_cfg**: MediaWiki Config
	// *   **jenkins_cred**: Jenkins Credential
	// *   **rubygems_cred**: Rubygems Credential
	// *   **clojars_token**: Clojars Token
	// *   **phoenix\_web_passwd**: Phoenix Web Credential
	// *   **puttygen\_private_key**: PuTTYgen Private Key
	// *   **google\_oauth_token**: Google Oauth Token
	// *   **rubyonrails_cfg**: Ruby On Rails Database Config
	// *   **lob\_api_key**: Lob API Key
	// *   **pkcs_cred**: PKCS#12
	// *   **otr\_private_key**: OTR Private Key
	// *   **contentful\_delivery_token**: Contentful Delivery Token
	// *   **digital\_ocean_tugboat**: Digital Ocean Tugboat Config
	// *   **dsa\_private_key**: DSA Private Key
	// *   **rails\_app_token**: Rails App Token
	// *   **git_cred**: Git User Credential
	// *   **newrelic\_api_key**: New Relic User API Key
	// *   **github_hub**: Github Token
	// *   **rubygem**: Rubygem Token
	SensitiveFileKey *string `json:"SensitiveFileKey,omitempty" xml:"SensitiveFileKey,omitempty"`
	// The alert type name of the sensitive file.
	SensitiveFileName *string `json:"SensitiveFileName,omitempty" xml:"SensitiveFileName,omitempty"`
}

func (s DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList) GoString() string {
	return s.String()
}

func (s *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList) SetAdvice(v string) *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList {
	s.Advice = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList) SetFilePath(v string) *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList {
	s.FilePath = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList) SetFirstScanTime(v int64) *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList {
	s.FirstScanTime = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList) SetLastScanTime(v int64) *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList {
	s.LastScanTime = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList) SetLayerDigest(v string) *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList {
	s.LayerDigest = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList) SetPromt(v string) *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList {
	s.Promt = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList) SetRiskLevel(v string) *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList {
	s.RiskLevel = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList) SetSensitiveFileKey(v string) *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList {
	s.SensitiveFileKey = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList) SetSensitiveFileName(v string) *DescribeImageSensitiveFileByKeyResponseBodySensitiveFileList {
	s.SensitiveFileName = &v
	return s
}

type DescribeImageSensitiveFileByKeyResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageSensitiveFileByKeyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageSensitiveFileByKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSensitiveFileByKeyResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageSensitiveFileByKeyResponse) SetHeaders(v map[string]*string) *DescribeImageSensitiveFileByKeyResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponse) SetStatusCode(v int32) *DescribeImageSensitiveFileByKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageSensitiveFileByKeyResponse) SetBody(v *DescribeImageSensitiveFileByKeyResponseBody) *DescribeImageSensitiveFileByKeyResponse {
	s.Body = v
	return s
}

type DescribeImageSensitiveFileListRequest struct {
	// The value of the sensitive file type.
	Criteria *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	// The query type of sensitive files. Valid values:
	//
	// *   **SensitiveFileKey**: the alert type for sensitive files. Valid values:
	//
	//     *   **npm_token**: npm access token
	//     *   **ftp_cfg**: FTP configuration
	//     *   **google\_oauth_key**: Google OAuth key
	//     *   **planetscale_passwd**: PlanetScale password
	//     *   **github\_ssh_key**: GitHub SSH key
	//     *   **msbuild\_publish_profile**: MSBuild publish profile
	//     *   **fastly\_cdn_token**: Fastly CDN token
	//     *   **ssh\_private_key**: SSH private key
	//     *   **aws_cli**: AWS CLI credential
	//     *   **cpanel_proftpd**: cPanel ProFTPD credential
	//     *   **postgresql_passwd**: PostgreSQL password file
	//     *   **discord\_client_cred**: Discord client credential
	//     *   **rails_database**: Rails database configuration
	//     *   **aws\_access_key**: AWS access key
	//     *   **esmtp_cfg** :configuration of Extended Simple Mail Transfer Protocol (ESMTP)
	//     *   **docker\_registry_cfg**: configuration of a Docker image repository
	//     *   **pem**: Privacy-Enhanced Mail (PEM)
	//     *   **common_cred**: common credential
	//     *   **sftp_cfg**: SFTP connection configuration
	//     *   **grafana_token**: Grafana token
	//     *   **slack_token**: Slack token
	//     *   **ec\_private_key**: EC private key
	//     *   **pypi_token**: upload token for the Python Package Index (PyPI)
	//     *   **finicity_token**: Finicity token
	//     *   **k8s\_client_key**: Kubernetes private key
	//     *   **git_cfg**: Git configuration
	//     *   **django_key**: Django key
	//     *   **jenkins_ssh**: Jenkins SSH configuration file
	//     *   **openssh\_private_key**: OpenSSL private key
	//     *   **square_oauth**: OAuth credential for Square
	//     *   **typeform_token**: Typeform token
	//     *   **common\_database_cfg**: general database connection configuration
	//     *   **wordpress\_database_cfg**: WordPress database configuration
	//     *   **googlecloud\_api_key**: API key for Google Cloud
	//     *   **vscode_sftp**: VSCode SFTP configuration
	//     *   **apache_htpasswd**: Apache htpasswd
	//     *   **planetscale_token**: PlanetScale token
	//     *   **contentful\_preview_token**: preview token for Contentful
	//     *   **php\_database_cfg**: database password for a PHP application
	//     *   **atom\_remote_sync**: Atom remote synchronization configuration
	//     *   **aws\_session_token**: AWS session token
	//     *   **atom\_sftp_cfg**: Atom SFTP configuration
	//     *   **tencentcloud_ak**: Asana client key
	//     *   **tencentcloud_ak**: secret ID of a third-party cloud
	//     *   **rsa\_private_key**: RSA private key
	//     *   **github\_personal_token**: personal access token for GitHub
	//     *   **pgp**: Pretty Good Privacy (PGP) encrypted file
	//     *   **stripe_skpk**: Stripe secret key
	//     *   **square_token**: Square access token
	//     *   **rails_carrierwave**: file upload credential for Rails Carrierwave
	//     *   **dbeaver\_database_cfg**: DBeaver database configuration
	//     *   **robomongo_cred**: credential for RoboMongo
	//     *   **github\_oauth_token**: OAuth access token for GitHub
	//     *   **pulumi_token**: Pulumi token
	//     *   **ventrilo_voip**: configuration of a Ventrilo VoIP server
	//     *   **macos_keychain**: macOS keychain
	//     *   **amazon\_mws_token**: Amazon MWS token
	//     *   **dynatrace_token**: Dynatrace token
	//     *   **java_keystore**: Java KeyStore (JKS)
	//     *   **microsoft_sdf**: Microsoft SQL Server Compact Edition (CE) database
	//     *   **kubernetes\_dashboard_cred**: user credential for Kubernetes Dashboard
	//     *   **atlassian_token**: Atlassian token
	//     *   **rdp**: remote desktop protocol (RDP)
	//     *   **mailgun_key**: Mailgun webhook signing key
	//     *   **mailchimp\_api_key**: API key for Mailchimp
	//     *   **netrc_cfg**: .netrc configuration file
	//     *   **openvpn_cfg**: OpenVPN configuration
	//     *   **github\_refresh_token**: GitHub refresh token
	//     *   **salesforce**: Salesforce credential
	//     *   **salesforce**: Sendinblue credential
	//     *   **pkcs\_private_key**: PKCS#12 key
	//     *   **rubyonrails_passwd**: Ruby on Rails password file
	//     *   **filezilla_ftp**: FileZilla FTP configuration
	//     *   **databricks_token**: Databricks token
	//     *   **gitLab\_personal_toke**: personal access token for GitLab
	//     *   **rails\_master_key**: Rails master key
	//     *   **sqlite**: SQLite3 or SQLite database
	//     *   **firefox_logins**: Firefox logon configuration
	//     *   **mailgun\_private_token**: Mailgun private token
	//     *   **joomla_cfg**: Joomla configuration
	//     *   **hashicorp\_terraform_token**: HashiCorp Terraform token
	//     *   **jetbrains_ides**: JetBrains IDEs configuration
	//     *   **heroku\_api_key**: Heroku API key
	//     *   **messagebird_token**: MessageBird token
	//     *   **messagebird_token**: MessageBird token
	//     *   **hashicorp\_vault_token**: HashiCorp Vault token
	//     *   **pgp\_private_key**: PGP private key
	//     *   **sshpasswd**: SSH password
	//     *   **huaweicloud_ak**: secret access key of a third-party cloud
	//     *   **aws_s3cmd**: AWS S3cmd configuration
	//     *   **php_config**: PHP configuration
	//     *   **common\_private_key**: private key of a common type
	//     *   **microsoft_mdf**: Microsoft SQL Server database
	//     *   **mediawiki_cfg**: MediaWiki configuration
	//     *   **jenkins_cred**: Jenkins credential
	//     *   **rubygems_cred**: RubyGems credential
	//     *   **clojars_token**: Clojars token
	//     *   **phoenix\_web_passwd**: Phoenix web credential
	//     *   **puttygen\_private_key**: PuTTYgen private key
	//     *   **google\_oauth_token**: Google OAuth access token
	//     *   **rubyonrails_cfg**: Ruby On Rails database configuration
	//     *   **lob\_api_key**: Lob API key
	//     *   **pkcs_cred**: PKCS#12 certificate
	//     *   **otr\_private_key**: Off-the-Record Messaging (OTR) private key
	//     *   **contentful\_delivery_token**: delivery token for Contentful
	//     *   **digital\_ocean_tugboat**: DigitalOcean Tugboat configuration
	//     *   **dsa\_private_key**: Digital Signature Algorithm (DSA) private key
	//     *   **rails\_app_token**: Rails app token
	//     *   **git_cred**: Git user credential
	//     *   **newrelic\_api_key**: User API key for New Relic
	//     *   **github_hub**: hub configuration for storing GitHub tokens
	//     *   **rubygem**: RubyGem token
	//
	// *   **SensitiveFileName**: the name of the alert type for sensitive files.
	CriteriaType *string `json:"CriteriaType,omitempty" xml:"CriteriaType,omitempty"`
	// The number of the page to return. Pages start from page **1**. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The UUID of the image.
	//
	// >  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the UUIDs of images from the value of the **ImageUuid** response parameter.
	ImageUuid *string `json:"ImageUuid,omitempty" xml:"ImageUuid,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The risk level. Valid values:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// An array that consists of the types of the assets that you want to scan. Valid values:
	//
	// *   **image**
	// *   **container**
	ScanRange []*string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty" type:"Repeated"`
}

func (s DescribeImageSensitiveFileListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSensitiveFileListRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageSensitiveFileListRequest) SetCriteria(v string) *DescribeImageSensitiveFileListRequest {
	s.Criteria = &v
	return s
}

func (s *DescribeImageSensitiveFileListRequest) SetCriteriaType(v string) *DescribeImageSensitiveFileListRequest {
	s.CriteriaType = &v
	return s
}

func (s *DescribeImageSensitiveFileListRequest) SetCurrentPage(v int32) *DescribeImageSensitiveFileListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageSensitiveFileListRequest) SetImageUuid(v string) *DescribeImageSensitiveFileListRequest {
	s.ImageUuid = &v
	return s
}

func (s *DescribeImageSensitiveFileListRequest) SetLang(v string) *DescribeImageSensitiveFileListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeImageSensitiveFileListRequest) SetPageSize(v int32) *DescribeImageSensitiveFileListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageSensitiveFileListRequest) SetRiskLevel(v string) *DescribeImageSensitiveFileListRequest {
	s.RiskLevel = &v
	return s
}

func (s *DescribeImageSensitiveFileListRequest) SetScanRange(v []*string) *DescribeImageSensitiveFileListRequest {
	s.ScanRange = v
	return s
}

type DescribeImageSensitiveFileListShrinkRequest struct {
	// The value of the sensitive file type.
	Criteria *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	// The query type of sensitive files. Valid values:
	//
	// *   **SensitiveFileKey**: the alert type for sensitive files. Valid values:
	//
	//     *   **npm_token**: npm access token
	//     *   **ftp_cfg**: FTP configuration
	//     *   **google\_oauth_key**: Google OAuth key
	//     *   **planetscale_passwd**: PlanetScale password
	//     *   **github\_ssh_key**: GitHub SSH key
	//     *   **msbuild\_publish_profile**: MSBuild publish profile
	//     *   **fastly\_cdn_token**: Fastly CDN token
	//     *   **ssh\_private_key**: SSH private key
	//     *   **aws_cli**: AWS CLI credential
	//     *   **cpanel_proftpd**: cPanel ProFTPD credential
	//     *   **postgresql_passwd**: PostgreSQL password file
	//     *   **discord\_client_cred**: Discord client credential
	//     *   **rails_database**: Rails database configuration
	//     *   **aws\_access_key**: AWS access key
	//     *   **esmtp_cfg** :configuration of Extended Simple Mail Transfer Protocol (ESMTP)
	//     *   **docker\_registry_cfg**: configuration of a Docker image repository
	//     *   **pem**: Privacy-Enhanced Mail (PEM)
	//     *   **common_cred**: common credential
	//     *   **sftp_cfg**: SFTP connection configuration
	//     *   **grafana_token**: Grafana token
	//     *   **slack_token**: Slack token
	//     *   **ec\_private_key**: EC private key
	//     *   **pypi_token**: upload token for the Python Package Index (PyPI)
	//     *   **finicity_token**: Finicity token
	//     *   **k8s\_client_key**: Kubernetes private key
	//     *   **git_cfg**: Git configuration
	//     *   **django_key**: Django key
	//     *   **jenkins_ssh**: Jenkins SSH configuration file
	//     *   **openssh\_private_key**: OpenSSL private key
	//     *   **square_oauth**: OAuth credential for Square
	//     *   **typeform_token**: Typeform token
	//     *   **common\_database_cfg**: general database connection configuration
	//     *   **wordpress\_database_cfg**: WordPress database configuration
	//     *   **googlecloud\_api_key**: API key for Google Cloud
	//     *   **vscode_sftp**: VSCode SFTP configuration
	//     *   **apache_htpasswd**: Apache htpasswd
	//     *   **planetscale_token**: PlanetScale token
	//     *   **contentful\_preview_token**: preview token for Contentful
	//     *   **php\_database_cfg**: database password for a PHP application
	//     *   **atom\_remote_sync**: Atom remote synchronization configuration
	//     *   **aws\_session_token**: AWS session token
	//     *   **atom\_sftp_cfg**: Atom SFTP configuration
	//     *   **tencentcloud_ak**: Asana client key
	//     *   **tencentcloud_ak**: secret ID of a third-party cloud
	//     *   **rsa\_private_key**: RSA private key
	//     *   **github\_personal_token**: personal access token for GitHub
	//     *   **pgp**: Pretty Good Privacy (PGP) encrypted file
	//     *   **stripe_skpk**: Stripe secret key
	//     *   **square_token**: Square access token
	//     *   **rails_carrierwave**: file upload credential for Rails Carrierwave
	//     *   **dbeaver\_database_cfg**: DBeaver database configuration
	//     *   **robomongo_cred**: credential for RoboMongo
	//     *   **github\_oauth_token**: OAuth access token for GitHub
	//     *   **pulumi_token**: Pulumi token
	//     *   **ventrilo_voip**: configuration of a Ventrilo VoIP server
	//     *   **macos_keychain**: macOS keychain
	//     *   **amazon\_mws_token**: Amazon MWS token
	//     *   **dynatrace_token**: Dynatrace token
	//     *   **java_keystore**: Java KeyStore (JKS)
	//     *   **microsoft_sdf**: Microsoft SQL Server Compact Edition (CE) database
	//     *   **kubernetes\_dashboard_cred**: user credential for Kubernetes Dashboard
	//     *   **atlassian_token**: Atlassian token
	//     *   **rdp**: remote desktop protocol (RDP)
	//     *   **mailgun_key**: Mailgun webhook signing key
	//     *   **mailchimp\_api_key**: API key for Mailchimp
	//     *   **netrc_cfg**: .netrc configuration file
	//     *   **openvpn_cfg**: OpenVPN configuration
	//     *   **github\_refresh_token**: GitHub refresh token
	//     *   **salesforce**: Salesforce credential
	//     *   **salesforce**: Sendinblue credential
	//     *   **pkcs\_private_key**: PKCS#12 key
	//     *   **rubyonrails_passwd**: Ruby on Rails password file
	//     *   **filezilla_ftp**: FileZilla FTP configuration
	//     *   **databricks_token**: Databricks token
	//     *   **gitLab\_personal_toke**: personal access token for GitLab
	//     *   **rails\_master_key**: Rails master key
	//     *   **sqlite**: SQLite3 or SQLite database
	//     *   **firefox_logins**: Firefox logon configuration
	//     *   **mailgun\_private_token**: Mailgun private token
	//     *   **joomla_cfg**: Joomla configuration
	//     *   **hashicorp\_terraform_token**: HashiCorp Terraform token
	//     *   **jetbrains_ides**: JetBrains IDEs configuration
	//     *   **heroku\_api_key**: Heroku API key
	//     *   **messagebird_token**: MessageBird token
	//     *   **messagebird_token**: MessageBird token
	//     *   **hashicorp\_vault_token**: HashiCorp Vault token
	//     *   **pgp\_private_key**: PGP private key
	//     *   **sshpasswd**: SSH password
	//     *   **huaweicloud_ak**: secret access key of a third-party cloud
	//     *   **aws_s3cmd**: AWS S3cmd configuration
	//     *   **php_config**: PHP configuration
	//     *   **common\_private_key**: private key of a common type
	//     *   **microsoft_mdf**: Microsoft SQL Server database
	//     *   **mediawiki_cfg**: MediaWiki configuration
	//     *   **jenkins_cred**: Jenkins credential
	//     *   **rubygems_cred**: RubyGems credential
	//     *   **clojars_token**: Clojars token
	//     *   **phoenix\_web_passwd**: Phoenix web credential
	//     *   **puttygen\_private_key**: PuTTYgen private key
	//     *   **google\_oauth_token**: Google OAuth access token
	//     *   **rubyonrails_cfg**: Ruby On Rails database configuration
	//     *   **lob\_api_key**: Lob API key
	//     *   **pkcs_cred**: PKCS#12 certificate
	//     *   **otr\_private_key**: Off-the-Record Messaging (OTR) private key
	//     *   **contentful\_delivery_token**: delivery token for Contentful
	//     *   **digital\_ocean_tugboat**: DigitalOcean Tugboat configuration
	//     *   **dsa\_private_key**: Digital Signature Algorithm (DSA) private key
	//     *   **rails\_app_token**: Rails app token
	//     *   **git_cred**: Git user credential
	//     *   **newrelic\_api_key**: User API key for New Relic
	//     *   **github_hub**: hub configuration for storing GitHub tokens
	//     *   **rubygem**: RubyGem token
	//
	// *   **SensitiveFileName**: the name of the alert type for sensitive files.
	CriteriaType *string `json:"CriteriaType,omitempty" xml:"CriteriaType,omitempty"`
	// The number of the page to return. Pages start from page **1**. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The UUID of the image.
	//
	// >  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the UUIDs of images from the value of the **ImageUuid** response parameter.
	ImageUuid *string `json:"ImageUuid,omitempty" xml:"ImageUuid,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The risk level. Valid values:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// An array that consists of the types of the assets that you want to scan. Valid values:
	//
	// *   **image**
	// *   **container**
	ScanRangeShrink *string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty"`
}

func (s DescribeImageSensitiveFileListShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSensitiveFileListShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageSensitiveFileListShrinkRequest) SetCriteria(v string) *DescribeImageSensitiveFileListShrinkRequest {
	s.Criteria = &v
	return s
}

func (s *DescribeImageSensitiveFileListShrinkRequest) SetCriteriaType(v string) *DescribeImageSensitiveFileListShrinkRequest {
	s.CriteriaType = &v
	return s
}

func (s *DescribeImageSensitiveFileListShrinkRequest) SetCurrentPage(v int32) *DescribeImageSensitiveFileListShrinkRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageSensitiveFileListShrinkRequest) SetImageUuid(v string) *DescribeImageSensitiveFileListShrinkRequest {
	s.ImageUuid = &v
	return s
}

func (s *DescribeImageSensitiveFileListShrinkRequest) SetLang(v string) *DescribeImageSensitiveFileListShrinkRequest {
	s.Lang = &v
	return s
}

func (s *DescribeImageSensitiveFileListShrinkRequest) SetPageSize(v int32) *DescribeImageSensitiveFileListShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageSensitiveFileListShrinkRequest) SetRiskLevel(v string) *DescribeImageSensitiveFileListShrinkRequest {
	s.RiskLevel = &v
	return s
}

func (s *DescribeImageSensitiveFileListShrinkRequest) SetScanRangeShrink(v string) *DescribeImageSensitiveFileListShrinkRequest {
	s.ScanRangeShrink = &v
	return s
}

type DescribeImageSensitiveFileListResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The pagination information.
	PageInfo *DescribeImageSensitiveFileListResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of the information about the sensitive files.
	SensitiveFileList []*DescribeImageSensitiveFileListResponseBodySensitiveFileList `json:"SensitiveFileList,omitempty" xml:"SensitiveFileList,omitempty" type:"Repeated"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeImageSensitiveFileListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSensitiveFileListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageSensitiveFileListResponseBody) SetCode(v string) *DescribeImageSensitiveFileListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBody) SetHttpStatusCode(v int32) *DescribeImageSensitiveFileListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBody) SetMessage(v string) *DescribeImageSensitiveFileListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBody) SetPageInfo(v *DescribeImageSensitiveFileListResponseBodyPageInfo) *DescribeImageSensitiveFileListResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBody) SetRequestId(v string) *DescribeImageSensitiveFileListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBody) SetSensitiveFileList(v []*DescribeImageSensitiveFileListResponseBodySensitiveFileList) *DescribeImageSensitiveFileListResponseBody {
	s.SensitiveFileList = v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBody) SetSuccess(v bool) *DescribeImageSensitiveFileListResponseBody {
	s.Success = &v
	return s
}

type DescribeImageSensitiveFileListResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The key of the last data entry.
	LastRowKey *string `json:"LastRowKey,omitempty" xml:"LastRowKey,omitempty"`
	// The number of entries returned per page. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageSensitiveFileListResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSensitiveFileListResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeImageSensitiveFileListResponseBodyPageInfo) SetCount(v int32) *DescribeImageSensitiveFileListResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeImageSensitiveFileListResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBodyPageInfo) SetLastRowKey(v string) *DescribeImageSensitiveFileListResponseBodyPageInfo {
	s.LastRowKey = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBodyPageInfo) SetPageSize(v int32) *DescribeImageSensitiveFileListResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBodyPageInfo) SetTotalCount(v int32) *DescribeImageSensitiveFileListResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeImageSensitiveFileListResponseBodySensitiveFileList struct {
	// The number of scans that are performed on the sensitive file.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The timestamp when the first scan was performed. Unit: milliseconds.
	FirstScanTime *int64 `json:"FirstScanTime,omitempty" xml:"FirstScanTime,omitempty"`
	// The timestamp when the last scan was performed. Unit: milliseconds.
	LastScanTime *int64 `json:"LastScanTime,omitempty" xml:"LastScanTime,omitempty"`
	// The risk level. Valid values:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// The alert type for the sensitive file. Valid values:
	//
	// *   **npm_token**: npm access token
	// *   **ftp_cfg**: FTP configuration
	// *   **google\_oauth_key**: Google OAuth key
	// *   **planetscale_passwd**: PlanetScale password
	// *   **github\_ssh_key**: GitHub SSH key
	// *   **msbuild\_publish_profile**: MSBuild publish profile
	// *   **fastly\_cdn_token**: Fastly CDN token
	// *   **ssh\_private_key**: SSH private key
	// *   **aws_cli**: AWS CLI credential
	// *   **cpanel_proftpd**: cPanel ProFTPD credential
	// *   **postgresql_passwd**: PostgreSQL password file
	// *   **discord\_client_cred**: Discord client credential
	// *   **rails_database**: Rails database configuration
	// *   **aws\_access_key**: AWS access key
	// *   **esmtp_cfg** :configuration of ESMTP
	// *   **docker\_registry_cfg**: configuration of a Docker image repository
	// *   **pem**: PEM
	// *   **common_cred**: common credential
	// *   **sftp_cfg**: SFTP connection configuration
	// *   **grafana_token**: Grafana token
	// *   **slack_token**: Slack token
	// *   **ec\_private_key**: EC private key
	// *   **pypi_token**: upload token for the PyPI
	// *   **finicity_token**: Finicity token
	// *   **k8s\_client_key**: Kubernetes private key
	// *   **git_cfg**: Git configuration
	// *   **django_key**: Django key
	// *   **jenkins_ssh**: Jenkins SSH configuration file
	// *   **openssh\_private_key**: OpenSSL private key
	// *   **square_oauth**: OAuth credential for Square
	// *   **typeform_token**: Typeform token
	// *   **common\_database_cfg**: general database connection configuration
	// *   **wordpress\_database_cfg**: WordPress database configuration
	// *   **googlecloud\_api_key**: API key for Google Cloud
	// *   **vscode_sftp**: VSCode SFTP configuration
	// *   **apache_htpasswd**: Apache htpasswd
	// *   **planetscale_token**: PlanetScale token
	// *   **contentful\_preview_token**: preview token for Contentful
	// *   **php\_database_cfg**: database password for a PHP application
	// *   **atom\_remote_sync**: Atom remote synchronization configuration
	// *   **aws\_session_token**: AWS session token
	// *   **atom\_sftp_cfg**: Atom SFTP configuration
	// *   **tencentcloud_ak**: Asana client key
	// *   **tencentcloud_ak**: secret ID of a third-party cloud
	// *   **rsa\_private_key**: RSA private key
	// *   **github\_personal_token**: personal access token for GitHub
	// *   **pgp**: PGP encrypted file
	// *   **stripe_skpk**: Stripe secret key
	// *   **square_token**: Square access token
	// *   **rails_carrierwave**: file upload credential for Rails Carrierwave
	// *   **dbeaver\_database_cfg**: DBeaver database configuration
	// *   **robomongo_cred**: credential for RoboMongo
	// *   **github\_oauth_token**: OAuth access token for GitHub
	// *   **pulumi_token**: Pulumi token
	// *   **ventrilo_voip**: configuration of a Ventrilo VoIP server
	// *   **macos_keychain**: macOS keychain
	// *   **amazon\_mws_token**: Amazon MWS token
	// *   **dynatrace_token**: Dynatrace token
	// *   **java_keystore**: JKS
	// *   **microsoft_sdf**: Microsoft SQL Server CE database
	// *   **kubernetes\_dashboard_cred**: user credential for Kubernetes Dashboard
	// *   **atlassian_token**: Atlassian token
	// *   **rdp**: RDP
	// *   **mailgun_key**: Mailgun webhook signing key
	// *   **mailchimp\_api_key**: API key for Mailchimp
	// *   **netrc_cfg**: .netrc configuration file
	// *   **openvpn_cfg**: OpenVPN configuration
	// *   **github\_refresh_token**: GitHub refresh token
	// *   **salesforce**: Salesforce credential
	// *   **salesforce**: Sendinblue credential
	// *   **pkcs\_private_key**: PKCS#12 key
	// *   **rubyonrails_passwd**: Ruby on Rails password file
	// *   **filezilla_ftp**: FileZilla FTP configuration
	// *   **databricks_token**: Databricks token
	// *   **gitLab\_personal_toke**: personal access token for GitLab
	// *   **rails\_master_key**: Rails master key
	// *   **sqlite**: SQLite3 or SQLite database
	// *   **firefox_logins**: Firefox logon configuration
	// *   **mailgun\_private_token**: Mailgun private token
	// *   **joomla_cfg**: Joomla configuration
	// *   **hashicorp\_terraform_token**: HashiCorp Terraform token
	// *   **jetbrains_ides**: JetBrains IDEs configuration
	// *   **heroku\_api_key**: Heroku API key
	// *   **messagebird_token**: MessageBird token
	// *   **messagebird_token**: MessageBird token
	// *   **hashicorp\_vault_token**: HashiCorp Vault token
	// *   **pgp\_private_key**: PGP private key
	// *   **sshpasswd**: SSH password
	// *   **huaweicloud_ak**: secret access key of a third-party cloud
	// *   **aws_s3cmd**: AWS S3cmd configuration
	// *   **php_config**: PHP configuration
	// *   **common\_private_key**: private key of a common type
	// *   **microsoft_mdf**: Microsoft SQL Server database
	// *   **mediawiki_cfg**: MediaWiki configuration
	// *   **jenkins_cred**: Jenkins credential
	// *   **rubygems_cred**: RubyGems credential
	// *   **clojars_token**: Clojars token
	// *   **phoenix\_web_passwd**: Phoenix web credential
	// *   **puttygen\_private_key**: PuTTYgen private key
	// *   **google\_oauth_token**: Google OAuth access token
	// *   **rubyonrails_cfg**: Ruby On Rails database configuration
	// *   **lob\_api_key**: Lob API key
	// *   **pkcs_cred**: PKCS#12 certificate
	// *   **otr\_private_key**: OTR private key
	// *   **contentful\_delivery_token**: delivery token for Contentful
	// *   **digital\_ocean_tugboat**: DigitalOcean Tugboat configuration
	// *   **dsa\_private_key**: Digital DSA private key
	// *   **rails\_app_token**: Rails app token
	// *   **git_cred**: Git user credential
	// *   **newrelic\_api_key**: User API key for New Relic
	// *   **github_hub**: hub configuration for storing GitHub tokens
	// *   **rubygem**: RubyGem token
	SensitiveFileKey *string `json:"SensitiveFileKey,omitempty" xml:"SensitiveFileKey,omitempty"`
	// The name of the alert type for the sensitive file.
	SensitiveFileName *string `json:"SensitiveFileName,omitempty" xml:"SensitiveFileName,omitempty"`
}

func (s DescribeImageSensitiveFileListResponseBodySensitiveFileList) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSensitiveFileListResponseBodySensitiveFileList) GoString() string {
	return s.String()
}

func (s *DescribeImageSensitiveFileListResponseBodySensitiveFileList) SetCount(v int32) *DescribeImageSensitiveFileListResponseBodySensitiveFileList {
	s.Count = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBodySensitiveFileList) SetFirstScanTime(v int64) *DescribeImageSensitiveFileListResponseBodySensitiveFileList {
	s.FirstScanTime = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBodySensitiveFileList) SetLastScanTime(v int64) *DescribeImageSensitiveFileListResponseBodySensitiveFileList {
	s.LastScanTime = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBodySensitiveFileList) SetRiskLevel(v string) *DescribeImageSensitiveFileListResponseBodySensitiveFileList {
	s.RiskLevel = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBodySensitiveFileList) SetSensitiveFileKey(v string) *DescribeImageSensitiveFileListResponseBodySensitiveFileList {
	s.SensitiveFileKey = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponseBodySensitiveFileList) SetSensitiveFileName(v string) *DescribeImageSensitiveFileListResponseBodySensitiveFileList {
	s.SensitiveFileName = &v
	return s
}

type DescribeImageSensitiveFileListResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageSensitiveFileListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageSensitiveFileListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSensitiveFileListResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageSensitiveFileListResponse) SetHeaders(v map[string]*string) *DescribeImageSensitiveFileListResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageSensitiveFileListResponse) SetStatusCode(v int32) *DescribeImageSensitiveFileListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageSensitiveFileListResponse) SetBody(v *DescribeImageSensitiveFileListResponseBody) *DescribeImageSensitiveFileListResponse {
	s.Body = v
	return s
}

type DescribeImageStatisticsResponseBody struct {
	// The number of container images in your assets. Only Container Registry Enterprise Edition instances are counted.
	InstanceCount *int32 `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The number of container images that have security risks. Only Container Registry Enterprise Edition instances are counted.
	RiskInstanceCount *int32 `json:"RiskInstanceCount,omitempty" xml:"RiskInstanceCount,omitempty"`
}

func (s DescribeImageStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageStatisticsResponseBody) SetInstanceCount(v int32) *DescribeImageStatisticsResponseBody {
	s.InstanceCount = &v
	return s
}

func (s *DescribeImageStatisticsResponseBody) SetRequestId(v string) *DescribeImageStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageStatisticsResponseBody) SetRiskInstanceCount(v int32) *DescribeImageStatisticsResponseBody {
	s.RiskInstanceCount = &v
	return s
}

type DescribeImageStatisticsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageStatisticsResponse) SetHeaders(v map[string]*string) *DescribeImageStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageStatisticsResponse) SetStatusCode(v int32) *DescribeImageStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageStatisticsResponse) SetBody(v *DescribeImageStatisticsResponseBody) *DescribeImageStatisticsResponse {
	s.Body = v
	return s
}

type DescribeImageVulListRequest struct {
	AliasName      *string   `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	ClusterId      *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName    *string   `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ContainerId    *string   `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	CurrentPage    *int32    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Dealed         *string   `json:"Dealed,omitempty" xml:"Dealed,omitempty"`
	Digest         *string   `json:"Digest,omitempty" xml:"Digest,omitempty"`
	Image          *string   `json:"Image,omitempty" xml:"Image,omitempty"`
	InstanceId     *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Lang           *string   `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Name           *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace      *string   `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Necessity      *string   `json:"Necessity,omitempty" xml:"Necessity,omitempty"`
	PageSize       *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Pod            *string   `json:"Pod,omitempty" xml:"Pod,omitempty"`
	RegionId       *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RepoId         *string   `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	RepoInstanceId *string   `json:"RepoInstanceId,omitempty" xml:"RepoInstanceId,omitempty"`
	RepoName       *string   `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	RepoNamespace  *string   `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	RepoRegionId   *string   `json:"RepoRegionId,omitempty" xml:"RepoRegionId,omitempty"`
	ScanRange      []*string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty" type:"Repeated"`
	StatusList     *string   `json:"StatusList,omitempty" xml:"StatusList,omitempty"`
	Tag            *string   `json:"Tag,omitempty" xml:"Tag,omitempty"`
	Type           *string   `json:"Type,omitempty" xml:"Type,omitempty"`
	Uuids          *string   `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeImageVulListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageVulListRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageVulListRequest) SetAliasName(v string) *DescribeImageVulListRequest {
	s.AliasName = &v
	return s
}

func (s *DescribeImageVulListRequest) SetClusterId(v string) *DescribeImageVulListRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeImageVulListRequest) SetClusterName(v string) *DescribeImageVulListRequest {
	s.ClusterName = &v
	return s
}

func (s *DescribeImageVulListRequest) SetContainerId(v string) *DescribeImageVulListRequest {
	s.ContainerId = &v
	return s
}

func (s *DescribeImageVulListRequest) SetCurrentPage(v int32) *DescribeImageVulListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageVulListRequest) SetDealed(v string) *DescribeImageVulListRequest {
	s.Dealed = &v
	return s
}

func (s *DescribeImageVulListRequest) SetDigest(v string) *DescribeImageVulListRequest {
	s.Digest = &v
	return s
}

func (s *DescribeImageVulListRequest) SetImage(v string) *DescribeImageVulListRequest {
	s.Image = &v
	return s
}

func (s *DescribeImageVulListRequest) SetInstanceId(v string) *DescribeImageVulListRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeImageVulListRequest) SetLang(v string) *DescribeImageVulListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeImageVulListRequest) SetName(v string) *DescribeImageVulListRequest {
	s.Name = &v
	return s
}

func (s *DescribeImageVulListRequest) SetNamespace(v string) *DescribeImageVulListRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeImageVulListRequest) SetNecessity(v string) *DescribeImageVulListRequest {
	s.Necessity = &v
	return s
}

func (s *DescribeImageVulListRequest) SetPageSize(v int32) *DescribeImageVulListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImageVulListRequest) SetPod(v string) *DescribeImageVulListRequest {
	s.Pod = &v
	return s
}

func (s *DescribeImageVulListRequest) SetRegionId(v string) *DescribeImageVulListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeImageVulListRequest) SetRepoId(v string) *DescribeImageVulListRequest {
	s.RepoId = &v
	return s
}

func (s *DescribeImageVulListRequest) SetRepoInstanceId(v string) *DescribeImageVulListRequest {
	s.RepoInstanceId = &v
	return s
}

func (s *DescribeImageVulListRequest) SetRepoName(v string) *DescribeImageVulListRequest {
	s.RepoName = &v
	return s
}

func (s *DescribeImageVulListRequest) SetRepoNamespace(v string) *DescribeImageVulListRequest {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeImageVulListRequest) SetRepoRegionId(v string) *DescribeImageVulListRequest {
	s.RepoRegionId = &v
	return s
}

func (s *DescribeImageVulListRequest) SetScanRange(v []*string) *DescribeImageVulListRequest {
	s.ScanRange = v
	return s
}

func (s *DescribeImageVulListRequest) SetStatusList(v string) *DescribeImageVulListRequest {
	s.StatusList = &v
	return s
}

func (s *DescribeImageVulListRequest) SetTag(v string) *DescribeImageVulListRequest {
	s.Tag = &v
	return s
}

func (s *DescribeImageVulListRequest) SetType(v string) *DescribeImageVulListRequest {
	s.Type = &v
	return s
}

func (s *DescribeImageVulListRequest) SetUuids(v string) *DescribeImageVulListRequest {
	s.Uuids = &v
	return s
}

type DescribeImageVulListResponseBody struct {
	CurrentPage *int32                                        `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	VulRecords  []*DescribeImageVulListResponseBodyVulRecords `json:"VulRecords,omitempty" xml:"VulRecords,omitempty" type:"Repeated"`
}

func (s DescribeImageVulListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageVulListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageVulListResponseBody) SetCurrentPage(v int32) *DescribeImageVulListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeImageVulListResponseBody) SetPageSize(v int32) *DescribeImageVulListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeImageVulListResponseBody) SetRequestId(v string) *DescribeImageVulListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageVulListResponseBody) SetTotalCount(v int32) *DescribeImageVulListResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeImageVulListResponseBody) SetVulRecords(v []*DescribeImageVulListResponseBodyVulRecords) *DescribeImageVulListResponseBody {
	s.VulRecords = v
	return s
}

type DescribeImageVulListResponseBodyVulRecords struct {
	AliasName         *string                                                      `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	CanFix            *string                                                      `json:"CanFix,omitempty" xml:"CanFix,omitempty"`
	CanUpdate         *bool                                                        `json:"CanUpdate,omitempty" xml:"CanUpdate,omitempty"`
	ClusterId         *string                                                      `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName       *string                                                      `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ContainerId       *string                                                      `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	ExtendContentJson *DescribeImageVulListResponseBodyVulRecordsExtendContentJson `json:"ExtendContentJson,omitempty" xml:"ExtendContentJson,omitempty" type:"Struct"`
	FirstTs           *int64                                                       `json:"FirstTs,omitempty" xml:"FirstTs,omitempty"`
	Image             *string                                                      `json:"Image,omitempty" xml:"Image,omitempty"`
	ImageDigest       *string                                                      `json:"ImageDigest,omitempty" xml:"ImageDigest,omitempty"`
	InstanceName      *string                                                      `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InternetIp        *string                                                      `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	IntranetIp        *string                                                      `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	LastTs            *int64                                                       `json:"LastTs,omitempty" xml:"LastTs,omitempty"`
	Layers            []*string                                                    `json:"Layers,omitempty" xml:"Layers,omitempty" type:"Repeated"`
	MaliciousSource   *string                                                      `json:"MaliciousSource,omitempty" xml:"MaliciousSource,omitempty"`
	ModifyTs          *int64                                                       `json:"ModifyTs,omitempty" xml:"ModifyTs,omitempty"`
	Name              *string                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace         *string                                                      `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Necessity         *string                                                      `json:"Necessity,omitempty" xml:"Necessity,omitempty"`
	Pod               *string                                                      `json:"Pod,omitempty" xml:"Pod,omitempty"`
	PrimaryId         *int64                                                       `json:"PrimaryId,omitempty" xml:"PrimaryId,omitempty"`
	Related           *string                                                      `json:"Related,omitempty" xml:"Related,omitempty"`
	RepoName          *string                                                      `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	RepoNamespace     *string                                                      `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	ScanTime          *int64                                                       `json:"ScanTime,omitempty" xml:"ScanTime,omitempty"`
	Status            *int32                                                       `json:"Status,omitempty" xml:"Status,omitempty"`
	Tag               *string                                                      `json:"Tag,omitempty" xml:"Tag,omitempty"`
	TargetId          *string                                                      `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	TargetName        *string                                                      `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	TargetType        *string                                                      `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	Type              *string                                                      `json:"Type,omitempty" xml:"Type,omitempty"`
	Uuid              *string                                                      `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeImageVulListResponseBodyVulRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageVulListResponseBodyVulRecords) GoString() string {
	return s.String()
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetAliasName(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.AliasName = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetCanFix(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.CanFix = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetCanUpdate(v bool) *DescribeImageVulListResponseBodyVulRecords {
	s.CanUpdate = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetClusterId(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.ClusterId = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetClusterName(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.ClusterName = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetContainerId(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.ContainerId = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetExtendContentJson(v *DescribeImageVulListResponseBodyVulRecordsExtendContentJson) *DescribeImageVulListResponseBodyVulRecords {
	s.ExtendContentJson = v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetFirstTs(v int64) *DescribeImageVulListResponseBodyVulRecords {
	s.FirstTs = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetImage(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.Image = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetImageDigest(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.ImageDigest = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetInstanceName(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.InstanceName = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetInternetIp(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.InternetIp = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetIntranetIp(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.IntranetIp = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetLastTs(v int64) *DescribeImageVulListResponseBodyVulRecords {
	s.LastTs = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetLayers(v []*string) *DescribeImageVulListResponseBodyVulRecords {
	s.Layers = v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetMaliciousSource(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.MaliciousSource = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetModifyTs(v int64) *DescribeImageVulListResponseBodyVulRecords {
	s.ModifyTs = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetName(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.Name = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetNamespace(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.Namespace = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetNecessity(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.Necessity = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetPod(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.Pod = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetPrimaryId(v int64) *DescribeImageVulListResponseBodyVulRecords {
	s.PrimaryId = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetRelated(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.Related = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetRepoName(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.RepoName = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetRepoNamespace(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetScanTime(v int64) *DescribeImageVulListResponseBodyVulRecords {
	s.ScanTime = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetStatus(v int32) *DescribeImageVulListResponseBodyVulRecords {
	s.Status = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetTag(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.Tag = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetTargetId(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.TargetId = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetTargetName(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.TargetName = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetTargetType(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.TargetType = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetType(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.Type = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecords) SetUuid(v string) *DescribeImageVulListResponseBodyVulRecords {
	s.Uuid = &v
	return s
}

type DescribeImageVulListResponseBodyVulRecordsExtendContentJson struct {
	Os            *string                                                                     `json:"Os,omitempty" xml:"Os,omitempty"`
	OsRelease     *string                                                                     `json:"OsRelease,omitempty" xml:"OsRelease,omitempty"`
	RpmEntityList []*DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList `json:"RpmEntityList,omitempty" xml:"RpmEntityList,omitempty" type:"Repeated"`
}

func (s DescribeImageVulListResponseBodyVulRecordsExtendContentJson) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageVulListResponseBodyVulRecordsExtendContentJson) GoString() string {
	return s.String()
}

func (s *DescribeImageVulListResponseBodyVulRecordsExtendContentJson) SetOs(v string) *DescribeImageVulListResponseBodyVulRecordsExtendContentJson {
	s.Os = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecordsExtendContentJson) SetOsRelease(v string) *DescribeImageVulListResponseBodyVulRecordsExtendContentJson {
	s.OsRelease = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecordsExtendContentJson) SetRpmEntityList(v []*DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) *DescribeImageVulListResponseBodyVulRecordsExtendContentJson {
	s.RpmEntityList = v
	return s
}

type DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList struct {
	FullVersion *string   `json:"FullVersion,omitempty" xml:"FullVersion,omitempty"`
	Layer       *string   `json:"Layer,omitempty" xml:"Layer,omitempty"`
	MatchDetail *string   `json:"MatchDetail,omitempty" xml:"MatchDetail,omitempty"`
	MatchList   []*string `json:"MatchList,omitempty" xml:"MatchList,omitempty" type:"Repeated"`
	Name        *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	Path        *string   `json:"Path,omitempty" xml:"Path,omitempty"`
	UpdateCmd   *string   `json:"UpdateCmd,omitempty" xml:"UpdateCmd,omitempty"`
	Version     *string   `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) GoString() string {
	return s.String()
}

func (s *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetFullVersion(v string) *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.FullVersion = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetLayer(v string) *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.Layer = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetMatchDetail(v string) *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.MatchDetail = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetMatchList(v []*string) *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.MatchList = v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetName(v string) *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.Name = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetPath(v string) *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.Path = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetUpdateCmd(v string) *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.UpdateCmd = &v
	return s
}

func (s *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetVersion(v string) *DescribeImageVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.Version = &v
	return s
}

type DescribeImageVulListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageVulListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageVulListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageVulListResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageVulListResponse) SetHeaders(v map[string]*string) *DescribeImageVulListResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageVulListResponse) SetStatusCode(v int32) *DescribeImageVulListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageVulListResponse) SetBody(v *DescribeImageVulListResponseBody) *DescribeImageVulListResponse {
	s.Body = v
	return s
}

type DescribeInstallCaptchaRequest struct {
	// The validity period of the installation verification code. If this parameter is not specified, the validity period is 1 hour.
	//
	// >  The installation verification code is valid only within the validity period. An expired installation verification code cannot be used to install the agent.
	Deadline *string `json:"Deadline,omitempty" xml:"Deadline,omitempty"`
	// The language of the content within the request and response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeInstallCaptchaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstallCaptchaRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstallCaptchaRequest) SetDeadline(v string) *DescribeInstallCaptchaRequest {
	s.Deadline = &v
	return s
}

func (s *DescribeInstallCaptchaRequest) SetLang(v string) *DescribeInstallCaptchaRequest {
	s.Lang = &v
	return s
}

func (s *DescribeInstallCaptchaRequest) SetSourceIp(v string) *DescribeInstallCaptchaRequest {
	s.SourceIp = &v
	return s
}

type DescribeInstallCaptchaResponseBody struct {
	// The installation verification code for you to manually install the Security Center agent.
	CaptchaCode *string `json:"CaptchaCode,omitempty" xml:"CaptchaCode,omitempty"`
	// The validity period of the installation verification code.
	//
	// >  The installation verification code is valid only within the validity period. An expired installation verification code cannot be used to install the agent.
	Deadline *string `json:"Deadline,omitempty" xml:"Deadline,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstallCaptchaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstallCaptchaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstallCaptchaResponseBody) SetCaptchaCode(v string) *DescribeInstallCaptchaResponseBody {
	s.CaptchaCode = &v
	return s
}

func (s *DescribeInstallCaptchaResponseBody) SetDeadline(v string) *DescribeInstallCaptchaResponseBody {
	s.Deadline = &v
	return s
}

func (s *DescribeInstallCaptchaResponseBody) SetRequestId(v string) *DescribeInstallCaptchaResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstallCaptchaResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstallCaptchaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstallCaptchaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstallCaptchaResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstallCaptchaResponse) SetHeaders(v map[string]*string) *DescribeInstallCaptchaResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstallCaptchaResponse) SetStatusCode(v int32) *DescribeInstallCaptchaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstallCaptchaResponse) SetBody(v *DescribeInstallCaptchaResponseBody) *DescribeInstallCaptchaResponse {
	s.Body = v
	return s
}

type DescribeInstallCodeResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstallCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstallCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstallCodeResponseBody) SetCode(v string) *DescribeInstallCodeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstallCodeResponseBody) SetRequestId(v string) *DescribeInstallCodeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstallCodeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstallCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstallCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstallCodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstallCodeResponse) SetHeaders(v map[string]*string) *DescribeInstallCodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstallCodeResponse) SetStatusCode(v int32) *DescribeInstallCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstallCodeResponse) SetBody(v *DescribeInstallCodeResponseBody) *DescribeInstallCodeResponse {
	s.Body = v
	return s
}

type DescribeInstallCodesResponseBody struct {
	// An array that consists of the information about the installation command.
	InstallCodes []*DescribeInstallCodesResponseBodyInstallCodes `json:"InstallCodes,omitempty" xml:"InstallCodes,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstallCodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstallCodesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstallCodesResponseBody) SetInstallCodes(v []*DescribeInstallCodesResponseBodyInstallCodes) *DescribeInstallCodesResponseBody {
	s.InstallCodes = v
	return s
}

func (s *DescribeInstallCodesResponseBody) SetRequestId(v string) *DescribeInstallCodesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstallCodesResponseBodyInstallCodes struct {
	// The installation verification code for you to manually install the Security Center agent.
	CaptchaCode *string `json:"CaptchaCode,omitempty" xml:"CaptchaCode,omitempty"`
	// The timestamp when the installation command expires. Unit: milliseconds.
	ExpiredDate *int64 `json:"ExpiredDate,omitempty" xml:"ExpiredDate,omitempty"`
	// The ID of the server group to which the server belongs.
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the server group to which the server belongs.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Indicates whether an image is used to install the Security Center agent. Valid values:
	//
	// *   **true**: An image is used to install the Security Center agent.
	// *   **false**: An image is not used to install the Security Center agent.
	OnlyImage *bool `json:"OnlyImage,omitempty" xml:"OnlyImage,omitempty"`
	// The operating system of the server. Valid values:
	// *   **linux**: Linux.
	// *   **windows**: Windows.
	Os *string `json:"Os,omitempty" xml:"Os,omitempty"`
	// The name of the server provider.
	VendorName *string `json:"VendorName,omitempty" xml:"VendorName,omitempty"`
}

func (s DescribeInstallCodesResponseBodyInstallCodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstallCodesResponseBodyInstallCodes) GoString() string {
	return s.String()
}

func (s *DescribeInstallCodesResponseBodyInstallCodes) SetCaptchaCode(v string) *DescribeInstallCodesResponseBodyInstallCodes {
	s.CaptchaCode = &v
	return s
}

func (s *DescribeInstallCodesResponseBodyInstallCodes) SetExpiredDate(v int64) *DescribeInstallCodesResponseBodyInstallCodes {
	s.ExpiredDate = &v
	return s
}

func (s *DescribeInstallCodesResponseBodyInstallCodes) SetGroupId(v int64) *DescribeInstallCodesResponseBodyInstallCodes {
	s.GroupId = &v
	return s
}

func (s *DescribeInstallCodesResponseBodyInstallCodes) SetGroupName(v string) *DescribeInstallCodesResponseBodyInstallCodes {
	s.GroupName = &v
	return s
}

func (s *DescribeInstallCodesResponseBodyInstallCodes) SetOnlyImage(v bool) *DescribeInstallCodesResponseBodyInstallCodes {
	s.OnlyImage = &v
	return s
}

func (s *DescribeInstallCodesResponseBodyInstallCodes) SetOs(v string) *DescribeInstallCodesResponseBodyInstallCodes {
	s.Os = &v
	return s
}

func (s *DescribeInstallCodesResponseBodyInstallCodes) SetVendorName(v string) *DescribeInstallCodesResponseBodyInstallCodes {
	s.VendorName = &v
	return s
}

type DescribeInstallCodesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstallCodesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstallCodesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstallCodesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstallCodesResponse) SetHeaders(v map[string]*string) *DescribeInstallCodesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstallCodesResponse) SetStatusCode(v int32) *DescribeInstallCodesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstallCodesResponse) SetBody(v *DescribeInstallCodesResponseBody) *DescribeInstallCodesResponse {
	s.Body = v
	return s
}

type DescribeInstanceAntiBruteForceRulesRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries to return on each page. Default value: **10000**.
	PageSize        *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerId *int64 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// An array that consists of the UUIDs of the servers.
	//
	// >  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
	UuidList []*string `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s DescribeInstanceAntiBruteForceRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAntiBruteForceRulesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAntiBruteForceRulesRequest) SetCurrentPage(v int32) *DescribeInstanceAntiBruteForceRulesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeInstanceAntiBruteForceRulesRequest) SetPageSize(v int32) *DescribeInstanceAntiBruteForceRulesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceAntiBruteForceRulesRequest) SetResourceOwnerId(v int64) *DescribeInstanceAntiBruteForceRulesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceAntiBruteForceRulesRequest) SetSourceIp(v string) *DescribeInstanceAntiBruteForceRulesRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeInstanceAntiBruteForceRulesRequest) SetUuidList(v []*string) *DescribeInstanceAntiBruteForceRulesRequest {
	s.UuidList = v
	return s
}

type DescribeInstanceAntiBruteForceRulesResponseBody struct {
	// The pagination information.
	PageInfo *DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array consisting of the servers to which the defense rule is applied.
	Rules []*DescribeInstanceAntiBruteForceRulesResponseBodyRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s DescribeInstanceAntiBruteForceRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAntiBruteForceRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAntiBruteForceRulesResponseBody) SetPageInfo(v *DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo) *DescribeInstanceAntiBruteForceRulesResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeInstanceAntiBruteForceRulesResponseBody) SetRequestId(v string) *DescribeInstanceAntiBruteForceRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceAntiBruteForceRulesResponseBody) SetRules(v []*DescribeInstanceAntiBruteForceRulesResponseBodyRules) *DescribeInstanceAntiBruteForceRulesResponseBody {
	s.Rules = v
	return s
}

type DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo struct {
	// The number of servers to which the defense rule is applied on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of servers to which the defense rule is applied.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo) SetCount(v int32) *DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo) SetPageSize(v int32) *DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo) SetTotalCount(v int32) *DescribeInstanceAntiBruteForceRulesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeInstanceAntiBruteForceRulesResponseBodyRules struct {
	// The ID of the defense rule.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the defense rule.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The UUID of the server to which the defense rule is applied.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeInstanceAntiBruteForceRulesResponseBodyRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAntiBruteForceRulesResponseBodyRules) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAntiBruteForceRulesResponseBodyRules) SetId(v int64) *DescribeInstanceAntiBruteForceRulesResponseBodyRules {
	s.Id = &v
	return s
}

func (s *DescribeInstanceAntiBruteForceRulesResponseBodyRules) SetName(v string) *DescribeInstanceAntiBruteForceRulesResponseBodyRules {
	s.Name = &v
	return s
}

func (s *DescribeInstanceAntiBruteForceRulesResponseBodyRules) SetUuid(v string) *DescribeInstanceAntiBruteForceRulesResponseBodyRules {
	s.Uuid = &v
	return s
}

type DescribeInstanceAntiBruteForceRulesResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceAntiBruteForceRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceAntiBruteForceRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAntiBruteForceRulesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAntiBruteForceRulesResponse) SetHeaders(v map[string]*string) *DescribeInstanceAntiBruteForceRulesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceAntiBruteForceRulesResponse) SetStatusCode(v int32) *DescribeInstanceAntiBruteForceRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceAntiBruteForceRulesResponse) SetBody(v *DescribeInstanceAntiBruteForceRulesResponseBody) *DescribeInstanceAntiBruteForceRulesResponse {
	s.Body = v
	return s
}

type DescribeInstanceRebootStatusRequest struct {
	// The UUIDs of the servers that you restart. Separate multiple UUIDs with commas (,).
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeInstanceRebootStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRebootStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRebootStatusRequest) SetUuids(v string) *DescribeInstanceRebootStatusRequest {
	s.Uuids = &v
	return s
}

type DescribeInstanceRebootStatusResponseBody struct {
	// An array that consists of the status information about the servers that you restart.
	RebootStatuses []*DescribeInstanceRebootStatusResponseBodyRebootStatuses `json:"RebootStatuses,omitempty" xml:"RebootStatuses,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstanceRebootStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRebootStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRebootStatusResponseBody) SetRebootStatuses(v []*DescribeInstanceRebootStatusResponseBodyRebootStatuses) *DescribeInstanceRebootStatusResponseBody {
	s.RebootStatuses = v
	return s
}

func (s *DescribeInstanceRebootStatusResponseBody) SetRequestId(v string) *DescribeInstanceRebootStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceRebootStatusResponseBody) SetTotalCount(v int32) *DescribeInstanceRebootStatusResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeInstanceRebootStatusResponseBodyRebootStatuses struct {
	// The error code that is returned when the server failed to be restarted. Valid values:
	//
	// *   **10001**: The restart command failed to be sent.
	// *   **10002**: The restart operation failed.
	// *   **10003**: A timeout error occurs.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The message that is returned when the server failed to be restarted.
	Msg *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	// The status of the server. Valid values:
	//
	// *   **0**: The server is being restarted.
	// *   **1**: The server is restarted.
	// *   **2**: The server failed to be restarted.
	RebootStatus *int32 `json:"RebootStatus,omitempty" xml:"RebootStatus,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeInstanceRebootStatusResponseBodyRebootStatuses) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRebootStatusResponseBodyRebootStatuses) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRebootStatusResponseBodyRebootStatuses) SetCode(v string) *DescribeInstanceRebootStatusResponseBodyRebootStatuses {
	s.Code = &v
	return s
}

func (s *DescribeInstanceRebootStatusResponseBodyRebootStatuses) SetMsg(v string) *DescribeInstanceRebootStatusResponseBodyRebootStatuses {
	s.Msg = &v
	return s
}

func (s *DescribeInstanceRebootStatusResponseBodyRebootStatuses) SetRebootStatus(v int32) *DescribeInstanceRebootStatusResponseBodyRebootStatuses {
	s.RebootStatus = &v
	return s
}

func (s *DescribeInstanceRebootStatusResponseBodyRebootStatuses) SetUuid(v string) *DescribeInstanceRebootStatusResponseBodyRebootStatuses {
	s.Uuid = &v
	return s
}

type DescribeInstanceRebootStatusResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceRebootStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceRebootStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceRebootStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceRebootStatusResponse) SetHeaders(v map[string]*string) *DescribeInstanceRebootStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceRebootStatusResponse) SetStatusCode(v int32) *DescribeInstanceRebootStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceRebootStatusResponse) SetBody(v *DescribeInstanceRebootStatusResponseBody) *DescribeInstanceRebootStatusResponse {
	s.Body = v
	return s
}

type DescribeInstanceStatisticsRequest struct {
	// The source of the request. Set the value to **sas**, which indicates that the request is sent from Security Center.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The UUIDs of the assets to query. Separate multiple UUIDs with commas (,).
	// > You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of assets.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeInstanceStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceStatisticsRequest) SetFrom(v string) *DescribeInstanceStatisticsRequest {
	s.From = &v
	return s
}

func (s *DescribeInstanceStatisticsRequest) SetLang(v string) *DescribeInstanceStatisticsRequest {
	s.Lang = &v
	return s
}

func (s *DescribeInstanceStatisticsRequest) SetSourceIp(v string) *DescribeInstanceStatisticsRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeInstanceStatisticsRequest) SetUuid(v string) *DescribeInstanceStatisticsRequest {
	s.Uuid = &v
	return s
}

type DescribeInstanceStatisticsResponseBody struct {
	// An array that consists of the risk information about assets.
	Data []*DescribeInstanceStatisticsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceStatisticsResponseBody) SetData(v []*DescribeInstanceStatisticsResponseBodyData) *DescribeInstanceStatisticsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInstanceStatisticsResponseBody) SetRequestId(v string) *DescribeInstanceStatisticsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceStatisticsResponseBodyData struct {
	// The number of unusual logons to the asset.
	Account *int32 `json:"Account,omitempty" xml:"Account,omitempty"`
	// The number of alerts generated by the agentless detection feature.
	AgentlessAll *int32 `json:"AgentlessAll,omitempty" xml:"AgentlessAll,omitempty"`
	// The number of baseline risks detected by the agentless detection feature.
	AgentlessBaseline *int32 `json:"AgentlessBaseline,omitempty" xml:"AgentlessBaseline,omitempty"`
	// The number of malicious samples detected by the agentless detection feature.
	AgentlessMalicious *int32 `json:"AgentlessMalicious,omitempty" xml:"AgentlessMalicious,omitempty"`
	// The number of system vulnerabilities detected by the agentless detection feature.
	AgentlessVulCve *int32 `json:"AgentlessVulCve,omitempty" xml:"AgentlessVulCve,omitempty"`
	// The number of application vulnerabilities detected by the agentless detection feature.
	AgentlessVulSca *int32 `json:"AgentlessVulSca,omitempty" xml:"AgentlessVulSca,omitempty"`
	// The number of application vulnerabilities detected on the asset.
	AppNum *int32 `json:"AppNum,omitempty" xml:"AppNum,omitempty"`
	// The number of Web-CMS vulnerabilities detected on the asset.
	CmsNum *int32 `json:"CmsNum,omitempty" xml:"CmsNum,omitempty"`
	// The number of CSPM risks detected on the asset.
	CspmNum *int32 `json:"CspmNum,omitempty" xml:"CspmNum,omitempty"`
	// The number of common vulnerabilities detected on the asset.
	CveNum *int32 `json:"CveNum,omitempty" xml:"CveNum,omitempty"`
	// The number of urgent vulnerabilities detected on the asset.
	EmgNum *int32 `json:"EmgNum,omitempty" xml:"EmgNum,omitempty"`
	// The number of baseline risks detected on the asset.
	Health *int32 `json:"Health,omitempty" xml:"Health,omitempty"`
	// The number of middleware vulnerabilities detected on the asset.
	ScaNum *int32 `json:"ScaNum,omitempty" xml:"ScaNum,omitempty"`
	// The number of alerts generated on the asset.
	Suspicious *int32 `json:"Suspicious,omitempty" xml:"Suspicious,omitempty"`
	// The number of Windows system vulnerabilities detected on the asset.
	SysNum *int32 `json:"SysNum,omitempty" xml:"SysNum,omitempty"`
	// The number of trojans detected on the asset.
	Trojan *int32 `json:"Trojan,omitempty" xml:"Trojan,omitempty"`
	// The UUID of the asset.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The total number of vulnerabilities detected on the asset.
	Vul *int32 `json:"Vul,omitempty" xml:"Vul,omitempty"`
	// The number of weak passwords.
	WeakPWNum *int32 `json:"WeakPWNum,omitempty" xml:"WeakPWNum,omitempty"`
}

func (s DescribeInstanceStatisticsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceStatisticsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetAccount(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.Account = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetAgentlessAll(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.AgentlessAll = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetAgentlessBaseline(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.AgentlessBaseline = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetAgentlessMalicious(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.AgentlessMalicious = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetAgentlessVulCve(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.AgentlessVulCve = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetAgentlessVulSca(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.AgentlessVulSca = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetAppNum(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.AppNum = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetCmsNum(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.CmsNum = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetCspmNum(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.CspmNum = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetCveNum(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.CveNum = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetEmgNum(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.EmgNum = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetHealth(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.Health = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetScaNum(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.ScaNum = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetSuspicious(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.Suspicious = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetSysNum(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.SysNum = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetTrojan(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.Trojan = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetUuid(v string) *DescribeInstanceStatisticsResponseBodyData {
	s.Uuid = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetVul(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.Vul = &v
	return s
}

func (s *DescribeInstanceStatisticsResponseBodyData) SetWeakPWNum(v int32) *DescribeInstanceStatisticsResponseBodyData {
	s.WeakPWNum = &v
	return s
}

type DescribeInstanceStatisticsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceStatisticsResponse) SetHeaders(v map[string]*string) *DescribeInstanceStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceStatisticsResponse) SetStatusCode(v int32) *DescribeInstanceStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceStatisticsResponse) SetBody(v *DescribeInstanceStatisticsResponseBody) *DescribeInstanceStatisticsResponse {
	s.Body = v
	return s
}

type DescribeIpTagsRequest struct {
	Ip              *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	SecurityEventId *string `json:"SecurityEventId,omitempty" xml:"SecurityEventId,omitempty"`
}

func (s DescribeIpTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeIpTagsRequest) SetIp(v string) *DescribeIpTagsRequest {
	s.Ip = &v
	return s
}

func (s *DescribeIpTagsRequest) SetSecurityEventId(v string) *DescribeIpTagsRequest {
	s.SecurityEventId = &v
	return s
}

type DescribeIpTagsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Tags      *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s DescribeIpTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIpTagsResponseBody) SetRequestId(v string) *DescribeIpTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeIpTagsResponseBody) SetTags(v string) *DescribeIpTagsResponseBody {
	s.Tags = &v
	return s
}

type DescribeIpTagsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeIpTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeIpTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeIpTagsResponse) SetHeaders(v map[string]*string) *DescribeIpTagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeIpTagsResponse) SetStatusCode(v int32) *DescribeIpTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeIpTagsResponse) SetBody(v *DescribeIpTagsResponseBody) *DescribeIpTagsResponse {
	s.Body = v
	return s
}

type DescribeLatestScanTaskResponseBody struct {
	LastCheckTime *int64    `json:"LastCheckTime,omitempty" xml:"LastCheckTime,omitempty"`
	RequestId     *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RiskNum       *int32    `json:"RiskNum,omitempty" xml:"RiskNum,omitempty"`
	TargetInfo    *string   `json:"TargetInfo,omitempty" xml:"TargetInfo,omitempty"`
	Uuids         []*string `json:"Uuids,omitempty" xml:"Uuids,omitempty" type:"Repeated"`
}

func (s DescribeLatestScanTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatestScanTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLatestScanTaskResponseBody) SetLastCheckTime(v int64) *DescribeLatestScanTaskResponseBody {
	s.LastCheckTime = &v
	return s
}

func (s *DescribeLatestScanTaskResponseBody) SetRequestId(v string) *DescribeLatestScanTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLatestScanTaskResponseBody) SetRiskNum(v int32) *DescribeLatestScanTaskResponseBody {
	s.RiskNum = &v
	return s
}

func (s *DescribeLatestScanTaskResponseBody) SetTargetInfo(v string) *DescribeLatestScanTaskResponseBody {
	s.TargetInfo = &v
	return s
}

func (s *DescribeLatestScanTaskResponseBody) SetUuids(v []*string) *DescribeLatestScanTaskResponseBody {
	s.Uuids = v
	return s
}

type DescribeLatestScanTaskResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLatestScanTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLatestScanTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatestScanTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeLatestScanTaskResponse) SetHeaders(v map[string]*string) *DescribeLatestScanTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeLatestScanTaskResponse) SetStatusCode(v int32) *DescribeLatestScanTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLatestScanTaskResponse) SetBody(v *DescribeLatestScanTaskResponseBody) *DescribeLatestScanTaskResponse {
	s.Body = v
	return s
}

type DescribeLogMetaRequest struct {
	// The ID of the request source. Default value: **aegis**. Valid values:
	//
	// *   **aegis**: Server Guard
	// *   **sas**: Security Center
	//
	// >  If you use Server Guard, set the value to **aegis**. If you use Security Center, set the value to **sas**.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeLogMetaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMetaRequest) GoString() string {
	return s.String()
}

func (s *DescribeLogMetaRequest) SetFrom(v string) *DescribeLogMetaRequest {
	s.From = &v
	return s
}

func (s *DescribeLogMetaRequest) SetLang(v string) *DescribeLogMetaRequest {
	s.Lang = &v
	return s
}

func (s *DescribeLogMetaRequest) SetSourceIp(v string) *DescribeLogMetaRequest {
	s.SourceIp = &v
	return s
}

type DescribeLogMetaResponseBody struct {
	// An array that consists of the configurations of the log analysis feature.
	LogMetaList []*DescribeLogMetaResponseBodyLogMetaList `json:"LogMetaList,omitempty" xml:"LogMetaList,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeLogMetaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMetaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLogMetaResponseBody) SetLogMetaList(v []*DescribeLogMetaResponseBodyLogMetaList) *DescribeLogMetaResponseBody {
	s.LogMetaList = v
	return s
}

func (s *DescribeLogMetaResponseBody) SetRequestId(v string) *DescribeLogMetaResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLogMetaResponseBody) SetTotalCount(v int32) *DescribeLogMetaResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeLogMetaResponseBodyLogMetaList struct {
	// The category of logs. Valid values:
	//
	// *   **host**: host logs
	// *   **network**: network logs
	// *   **security**: security logs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The time period after which logs in hot storage are moved to cold storage. Unit: days.
	//
	// >  If the value is **-1**, logs that are stored in hot storage are not moved to cold storage.
	HotTtl *int32 `json:"HotTtl,omitempty" xml:"HotTtl,omitempty"`
	// The name of the log type.
	LogDesc *string `json:"LogDesc,omitempty" xml:"LogDesc,omitempty"`
	// The name of the dedicated Logstore in which logs are stored.
	LogStore *string `json:"LogStore,omitempty" xml:"LogStore,omitempty"`
	// The name of the project.
	Project *string `json:"Project,omitempty" xml:"Project,omitempty"`
	// The status of the log analysis feature. Valid values:
	//
	// *   **disabled**
	// *   **enabled**
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The topic of logs that are delivered.
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// The number of days during which logs can be retained.
	Ttl *int32 `json:"Ttl,omitempty" xml:"Ttl,omitempty"`
	// The name of the dedicated Logstore in which user logs are stored.
	UserLogStore *string `json:"UserLogStore,omitempty" xml:"UserLogStore,omitempty"`
	// The name of the dedicated project in which logs are stored.
	UserProject *string `json:"UserProject,omitempty" xml:"UserProject,omitempty"`
	// The ID of the region.
	UserRegion *string `json:"UserRegion,omitempty" xml:"UserRegion,omitempty"`
}

func (s DescribeLogMetaResponseBodyLogMetaList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMetaResponseBodyLogMetaList) GoString() string {
	return s.String()
}

func (s *DescribeLogMetaResponseBodyLogMetaList) SetCategory(v string) *DescribeLogMetaResponseBodyLogMetaList {
	s.Category = &v
	return s
}

func (s *DescribeLogMetaResponseBodyLogMetaList) SetHotTtl(v int32) *DescribeLogMetaResponseBodyLogMetaList {
	s.HotTtl = &v
	return s
}

func (s *DescribeLogMetaResponseBodyLogMetaList) SetLogDesc(v string) *DescribeLogMetaResponseBodyLogMetaList {
	s.LogDesc = &v
	return s
}

func (s *DescribeLogMetaResponseBodyLogMetaList) SetLogStore(v string) *DescribeLogMetaResponseBodyLogMetaList {
	s.LogStore = &v
	return s
}

func (s *DescribeLogMetaResponseBodyLogMetaList) SetProject(v string) *DescribeLogMetaResponseBodyLogMetaList {
	s.Project = &v
	return s
}

func (s *DescribeLogMetaResponseBodyLogMetaList) SetStatus(v string) *DescribeLogMetaResponseBodyLogMetaList {
	s.Status = &v
	return s
}

func (s *DescribeLogMetaResponseBodyLogMetaList) SetTopic(v string) *DescribeLogMetaResponseBodyLogMetaList {
	s.Topic = &v
	return s
}

func (s *DescribeLogMetaResponseBodyLogMetaList) SetTtl(v int32) *DescribeLogMetaResponseBodyLogMetaList {
	s.Ttl = &v
	return s
}

func (s *DescribeLogMetaResponseBodyLogMetaList) SetUserLogStore(v string) *DescribeLogMetaResponseBodyLogMetaList {
	s.UserLogStore = &v
	return s
}

func (s *DescribeLogMetaResponseBodyLogMetaList) SetUserProject(v string) *DescribeLogMetaResponseBodyLogMetaList {
	s.UserProject = &v
	return s
}

func (s *DescribeLogMetaResponseBodyLogMetaList) SetUserRegion(v string) *DescribeLogMetaResponseBodyLogMetaList {
	s.UserRegion = &v
	return s
}

type DescribeLogMetaResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLogMetaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLogMetaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMetaResponse) GoString() string {
	return s.String()
}

func (s *DescribeLogMetaResponse) SetHeaders(v map[string]*string) *DescribeLogMetaResponse {
	s.Headers = v
	return s
}

func (s *DescribeLogMetaResponse) SetStatusCode(v int32) *DescribeLogMetaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLogMetaResponse) SetBody(v *DescribeLogMetaResponseBody) *DescribeLogMetaResponse {
	s.Body = v
	return s
}

type DescribeLogShipperStatusRequest struct {
	From *string `json:"From,omitempty" xml:"From,omitempty"`
}

func (s DescribeLogShipperStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogShipperStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeLogShipperStatusRequest) SetFrom(v string) *DescribeLogShipperStatusRequest {
	s.From = &v
	return s
}

type DescribeLogShipperStatusResponseBody struct {
	LogShipperStatus *DescribeLogShipperStatusResponseBodyLogShipperStatus `json:"LogShipperStatus,omitempty" xml:"LogShipperStatus,omitempty" type:"Struct"`
	RequestId        *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLogShipperStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogShipperStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLogShipperStatusResponseBody) SetLogShipperStatus(v *DescribeLogShipperStatusResponseBodyLogShipperStatus) *DescribeLogShipperStatusResponseBody {
	s.LogShipperStatus = v
	return s
}

func (s *DescribeLogShipperStatusResponseBody) SetRequestId(v string) *DescribeLogShipperStatusResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLogShipperStatusResponseBodyLogShipperStatus struct {
	AuthStatus            *string `json:"AuthStatus,omitempty" xml:"AuthStatus,omitempty"`
	BuyStatus             *string `json:"BuyStatus,omitempty" xml:"BuyStatus,omitempty"`
	OpenStatus            *string `json:"OpenStatus,omitempty" xml:"OpenStatus,omitempty"`
	PostPaidOpenStatus    *string `json:"PostPaidOpenStatus,omitempty" xml:"PostPaidOpenStatus,omitempty"`
	PostPaidSupportStatus *string `json:"PostPaidSupportStatus,omitempty" xml:"PostPaidSupportStatus,omitempty"`
	SlsProjectStatus      *string `json:"SlsProjectStatus,omitempty" xml:"SlsProjectStatus,omitempty"`
	SlsServiceStatus      *string `json:"SlsServiceStatus,omitempty" xml:"SlsServiceStatus,omitempty"`
}

func (s DescribeLogShipperStatusResponseBodyLogShipperStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogShipperStatusResponseBodyLogShipperStatus) GoString() string {
	return s.String()
}

func (s *DescribeLogShipperStatusResponseBodyLogShipperStatus) SetAuthStatus(v string) *DescribeLogShipperStatusResponseBodyLogShipperStatus {
	s.AuthStatus = &v
	return s
}

func (s *DescribeLogShipperStatusResponseBodyLogShipperStatus) SetBuyStatus(v string) *DescribeLogShipperStatusResponseBodyLogShipperStatus {
	s.BuyStatus = &v
	return s
}

func (s *DescribeLogShipperStatusResponseBodyLogShipperStatus) SetOpenStatus(v string) *DescribeLogShipperStatusResponseBodyLogShipperStatus {
	s.OpenStatus = &v
	return s
}

func (s *DescribeLogShipperStatusResponseBodyLogShipperStatus) SetPostPaidOpenStatus(v string) *DescribeLogShipperStatusResponseBodyLogShipperStatus {
	s.PostPaidOpenStatus = &v
	return s
}

func (s *DescribeLogShipperStatusResponseBodyLogShipperStatus) SetPostPaidSupportStatus(v string) *DescribeLogShipperStatusResponseBodyLogShipperStatus {
	s.PostPaidSupportStatus = &v
	return s
}

func (s *DescribeLogShipperStatusResponseBodyLogShipperStatus) SetSlsProjectStatus(v string) *DescribeLogShipperStatusResponseBodyLogShipperStatus {
	s.SlsProjectStatus = &v
	return s
}

func (s *DescribeLogShipperStatusResponseBodyLogShipperStatus) SetSlsServiceStatus(v string) *DescribeLogShipperStatusResponseBodyLogShipperStatus {
	s.SlsServiceStatus = &v
	return s
}

type DescribeLogShipperStatusResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLogShipperStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLogShipperStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogShipperStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeLogShipperStatusResponse) SetHeaders(v map[string]*string) *DescribeLogShipperStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeLogShipperStatusResponse) SetStatusCode(v int32) *DescribeLogShipperStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLogShipperStatusResponse) SetBody(v *DescribeLogShipperStatusResponseBody) *DescribeLogShipperStatusResponse {
	s.Body = v
	return s
}

type DescribeLoginBaseConfigsRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries to return on each page. Default value: **5**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The server to which the configuration is applied. The value of this parameter is in the JSON format and contains the following fields:
	//
	// *   **Target**: the UUID or group ID of the server to add or delete.
	//
	// >  If targetType is set to uuid, the value of Target is the UUID of the server. If targetType is set to groupId, the value of Target is the group ID of the server. If targetType is set to global, the value of Target is a hyphen (-).
	//
	// *   **targetType**: the type of the server to which the configuration is applied. Valid values:
	//
	//     *   **uuid**: a server
	//     *   **groupId**: a server group
	//     *   **global**: all servers
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The logon type of the configuration to query. Valid values:
	//
	// *   **login\_common_location**: common logon location
	// *   **login\_common_ip**: common logon IP address
	// *   **login\_common_time**: common logon time range
	// *   **login\_common_account**: common logon account
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeLoginBaseConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoginBaseConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoginBaseConfigsRequest) SetCurrentPage(v int32) *DescribeLoginBaseConfigsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeLoginBaseConfigsRequest) SetPageSize(v int32) *DescribeLoginBaseConfigsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLoginBaseConfigsRequest) SetTarget(v string) *DescribeLoginBaseConfigsRequest {
	s.Target = &v
	return s
}

func (s *DescribeLoginBaseConfigsRequest) SetType(v string) *DescribeLoginBaseConfigsRequest {
	s.Type = &v
	return s
}

type DescribeLoginBaseConfigsResponseBody struct {
	// An array that consists of the information about the configurations.
	BaseConfigs []*DescribeLoginBaseConfigsResponseBodyBaseConfigs `json:"BaseConfigs,omitempty" xml:"BaseConfigs,omitempty" type:"Repeated"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeLoginBaseConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoginBaseConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoginBaseConfigsResponseBody) SetBaseConfigs(v []*DescribeLoginBaseConfigsResponseBodyBaseConfigs) *DescribeLoginBaseConfigsResponseBody {
	s.BaseConfigs = v
	return s
}

func (s *DescribeLoginBaseConfigsResponseBody) SetCurrentPage(v int32) *DescribeLoginBaseConfigsResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeLoginBaseConfigsResponseBody) SetPageSize(v int32) *DescribeLoginBaseConfigsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLoginBaseConfigsResponseBody) SetRequestId(v string) *DescribeLoginBaseConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoginBaseConfigsResponseBody) SetTotalCount(v int32) *DescribeLoginBaseConfigsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeLoginBaseConfigsResponseBodyBaseConfigs struct {
	// The common logon account.
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// The end time of the common logon time range.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The common logon IP address.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The common logon location.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The start time of the common logon time range.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The details of the servers to which the configuration is applied.
	TargetList []*DescribeLoginBaseConfigsResponseBodyBaseConfigsTargetList `json:"TargetList,omitempty" xml:"TargetList,omitempty" type:"Repeated"`
	// The total number of servers.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The number of servers to which the configuration is applied.
	UuidCount *int32 `json:"UuidCount,omitempty" xml:"UuidCount,omitempty"`
}

func (s DescribeLoginBaseConfigsResponseBodyBaseConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoginBaseConfigsResponseBodyBaseConfigs) GoString() string {
	return s.String()
}

func (s *DescribeLoginBaseConfigsResponseBodyBaseConfigs) SetAccount(v string) *DescribeLoginBaseConfigsResponseBodyBaseConfigs {
	s.Account = &v
	return s
}

func (s *DescribeLoginBaseConfigsResponseBodyBaseConfigs) SetEndTime(v string) *DescribeLoginBaseConfigsResponseBodyBaseConfigs {
	s.EndTime = &v
	return s
}

func (s *DescribeLoginBaseConfigsResponseBodyBaseConfigs) SetIp(v string) *DescribeLoginBaseConfigsResponseBodyBaseConfigs {
	s.Ip = &v
	return s
}

func (s *DescribeLoginBaseConfigsResponseBodyBaseConfigs) SetLocation(v string) *DescribeLoginBaseConfigsResponseBodyBaseConfigs {
	s.Location = &v
	return s
}

func (s *DescribeLoginBaseConfigsResponseBodyBaseConfigs) SetStartTime(v string) *DescribeLoginBaseConfigsResponseBodyBaseConfigs {
	s.StartTime = &v
	return s
}

func (s *DescribeLoginBaseConfigsResponseBodyBaseConfigs) SetTargetList(v []*DescribeLoginBaseConfigsResponseBodyBaseConfigsTargetList) *DescribeLoginBaseConfigsResponseBodyBaseConfigs {
	s.TargetList = v
	return s
}

func (s *DescribeLoginBaseConfigsResponseBodyBaseConfigs) SetTotalCount(v int32) *DescribeLoginBaseConfigsResponseBodyBaseConfigs {
	s.TotalCount = &v
	return s
}

func (s *DescribeLoginBaseConfigsResponseBodyBaseConfigs) SetUuidCount(v int32) *DescribeLoginBaseConfigsResponseBodyBaseConfigs {
	s.UuidCount = &v
	return s
}

type DescribeLoginBaseConfigsResponseBodyBaseConfigsTargetList struct {
	// The UUID or group ID of the server.
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The type of the server to which the configuration is applied. Valid values:
	//
	// *   **uuid**: a server
	// *   **groupId**: a server group
	// *   **global**: all servers
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s DescribeLoginBaseConfigsResponseBodyBaseConfigsTargetList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoginBaseConfigsResponseBodyBaseConfigsTargetList) GoString() string {
	return s.String()
}

func (s *DescribeLoginBaseConfigsResponseBodyBaseConfigsTargetList) SetTarget(v string) *DescribeLoginBaseConfigsResponseBodyBaseConfigsTargetList {
	s.Target = &v
	return s
}

func (s *DescribeLoginBaseConfigsResponseBodyBaseConfigsTargetList) SetTargetType(v string) *DescribeLoginBaseConfigsResponseBodyBaseConfigsTargetList {
	s.TargetType = &v
	return s
}

type DescribeLoginBaseConfigsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLoginBaseConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLoginBaseConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoginBaseConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoginBaseConfigsResponse) SetHeaders(v map[string]*string) *DescribeLoginBaseConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoginBaseConfigsResponse) SetStatusCode(v int32) *DescribeLoginBaseConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoginBaseConfigsResponse) SetBody(v *DescribeLoginBaseConfigsResponseBody) *DescribeLoginBaseConfigsResponse {
	s.Body = v
	return s
}

type DescribeLoginSwitchConfigsResponseBody struct {
	ConfigList []*DescribeLoginSwitchConfigsResponseBodyConfigList `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" type:"Repeated"`
	Count      *int32                                              `json:"Count,omitempty" xml:"Count,omitempty"`
	RequestId  *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLoginSwitchConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoginSwitchConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoginSwitchConfigsResponseBody) SetConfigList(v []*DescribeLoginSwitchConfigsResponseBodyConfigList) *DescribeLoginSwitchConfigsResponseBody {
	s.ConfigList = v
	return s
}

func (s *DescribeLoginSwitchConfigsResponseBody) SetCount(v int32) *DescribeLoginSwitchConfigsResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeLoginSwitchConfigsResponseBody) SetRequestId(v string) *DescribeLoginSwitchConfigsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLoginSwitchConfigsResponseBodyConfigList struct {
	Item   *string `json:"Item,omitempty" xml:"Item,omitempty"`
	Status *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeLoginSwitchConfigsResponseBodyConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoginSwitchConfigsResponseBodyConfigList) GoString() string {
	return s.String()
}

func (s *DescribeLoginSwitchConfigsResponseBodyConfigList) SetItem(v string) *DescribeLoginSwitchConfigsResponseBodyConfigList {
	s.Item = &v
	return s
}

func (s *DescribeLoginSwitchConfigsResponseBodyConfigList) SetStatus(v int32) *DescribeLoginSwitchConfigsResponseBodyConfigList {
	s.Status = &v
	return s
}

type DescribeLoginSwitchConfigsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLoginSwitchConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLoginSwitchConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoginSwitchConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoginSwitchConfigsResponse) SetHeaders(v map[string]*string) *DescribeLoginSwitchConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoginSwitchConfigsResponse) SetStatusCode(v int32) *DescribeLoginSwitchConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoginSwitchConfigsResponse) SetBody(v *DescribeLoginSwitchConfigsResponseBody) *DescribeLoginSwitchConfigsResponse {
	s.Body = v
	return s
}

type DescribeLogstoreStorageRequest struct {
	// The ID of the request source. Set the value to **sas**.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s DescribeLogstoreStorageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogstoreStorageRequest) GoString() string {
	return s.String()
}

func (s *DescribeLogstoreStorageRequest) SetFrom(v string) *DescribeLogstoreStorageRequest {
	s.From = &v
	return s
}

func (s *DescribeLogstoreStorageRequest) SetLang(v string) *DescribeLogstoreStorageRequest {
	s.Lang = &v
	return s
}

type DescribeLogstoreStorageResponseBody struct {
	// The name of the dedicated Logstore that is used to store full logs of Security Center. The value is fixed as **sas-log**.
	Logstore *string `json:"Logstore,omitempty" xml:"Logstore,omitempty"`
	// The purchased log storage capacity, in GB.
	Preserve *int64 `json:"Preserve,omitempty" xml:"Preserve,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The number of days during which logs can be retained. The value is fixed as **180**, which indicates that logs can be retained for 180 days.
	//
	// >  You are not allowed to change the value of this parameter.
	Ttl *int32 `json:"Ttl,omitempty" xml:"Ttl,omitempty"`
	// The used log storage capacity, in GB.
	Used *int64 `json:"Used,omitempty" xml:"Used,omitempty"`
	// The name of the dedicated Project that is used to store full logs of Security Center.
	UserProject *string `json:"UserProject,omitempty" xml:"UserProject,omitempty"`
}

func (s DescribeLogstoreStorageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogstoreStorageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLogstoreStorageResponseBody) SetLogstore(v string) *DescribeLogstoreStorageResponseBody {
	s.Logstore = &v
	return s
}

func (s *DescribeLogstoreStorageResponseBody) SetPreserve(v int64) *DescribeLogstoreStorageResponseBody {
	s.Preserve = &v
	return s
}

func (s *DescribeLogstoreStorageResponseBody) SetRequestId(v string) *DescribeLogstoreStorageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLogstoreStorageResponseBody) SetTtl(v int32) *DescribeLogstoreStorageResponseBody {
	s.Ttl = &v
	return s
}

func (s *DescribeLogstoreStorageResponseBody) SetUsed(v int64) *DescribeLogstoreStorageResponseBody {
	s.Used = &v
	return s
}

func (s *DescribeLogstoreStorageResponseBody) SetUserProject(v string) *DescribeLogstoreStorageResponseBody {
	s.UserProject = &v
	return s
}

type DescribeLogstoreStorageResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLogstoreStorageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLogstoreStorageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogstoreStorageResponse) GoString() string {
	return s.String()
}

func (s *DescribeLogstoreStorageResponse) SetHeaders(v map[string]*string) *DescribeLogstoreStorageResponse {
	s.Headers = v
	return s
}

func (s *DescribeLogstoreStorageResponse) SetStatusCode(v int32) *DescribeLogstoreStorageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLogstoreStorageResponse) SetBody(v *DescribeLogstoreStorageResponseBody) *DescribeLogstoreStorageResponse {
	s.Body = v
	return s
}

type DescribeMachineCanRebootRequest struct {
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeMachineCanRebootRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMachineCanRebootRequest) GoString() string {
	return s.String()
}

func (s *DescribeMachineCanRebootRequest) SetType(v string) *DescribeMachineCanRebootRequest {
	s.Type = &v
	return s
}

func (s *DescribeMachineCanRebootRequest) SetUuid(v string) *DescribeMachineCanRebootRequest {
	s.Uuid = &v
	return s
}

type DescribeMachineCanRebootResponseBody struct {
	CanReboot *bool   `json:"CanReboot,omitempty" xml:"CanReboot,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMachineCanRebootResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMachineCanRebootResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMachineCanRebootResponseBody) SetCanReboot(v bool) *DescribeMachineCanRebootResponseBody {
	s.CanReboot = &v
	return s
}

func (s *DescribeMachineCanRebootResponseBody) SetRequestId(v string) *DescribeMachineCanRebootResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMachineCanRebootResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMachineCanRebootResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMachineCanRebootResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMachineCanRebootResponse) GoString() string {
	return s.String()
}

func (s *DescribeMachineCanRebootResponse) SetHeaders(v map[string]*string) *DescribeMachineCanRebootResponse {
	s.Headers = v
	return s
}

func (s *DescribeMachineCanRebootResponse) SetStatusCode(v int32) *DescribeMachineCanRebootResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMachineCanRebootResponse) SetBody(v *DescribeMachineCanRebootResponseBody) *DescribeMachineCanRebootResponse {
	s.Body = v
	return s
}

type DescribeModuleConfigResponseBody struct {
	// The number of configurations for the module.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// An array that consists of the configurations.
	ModuleConfigList []*DescribeModuleConfigResponseBodyModuleConfigList `json:"ModuleConfigList,omitempty" xml:"ModuleConfigList,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeModuleConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeModuleConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeModuleConfigResponseBody) SetCount(v int32) *DescribeModuleConfigResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeModuleConfigResponseBody) SetHttpStatusCode(v int32) *DescribeModuleConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeModuleConfigResponseBody) SetModuleConfigList(v []*DescribeModuleConfigResponseBodyModuleConfigList) *DescribeModuleConfigResponseBody {
	s.ModuleConfigList = v
	return s
}

func (s *DescribeModuleConfigResponseBody) SetRequestId(v string) *DescribeModuleConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeModuleConfigResponseBody) SetSuccess(v bool) *DescribeModuleConfigResponseBody {
	s.Success = &v
	return s
}

type DescribeModuleConfigResponseBodyModuleConfigList struct {
	// The name of the configuration.
	ConfigName *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	// The configuration items.
	Items []*DescribeModuleConfigResponseBodyModuleConfigListItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The name of the module.
	ModuleName *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
}

func (s DescribeModuleConfigResponseBodyModuleConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeModuleConfigResponseBodyModuleConfigList) GoString() string {
	return s.String()
}

func (s *DescribeModuleConfigResponseBodyModuleConfigList) SetConfigName(v string) *DescribeModuleConfigResponseBodyModuleConfigList {
	s.ConfigName = &v
	return s
}

func (s *DescribeModuleConfigResponseBodyModuleConfigList) SetItems(v []*DescribeModuleConfigResponseBodyModuleConfigListItems) *DescribeModuleConfigResponseBodyModuleConfigList {
	s.Items = v
	return s
}

func (s *DescribeModuleConfigResponseBodyModuleConfigList) SetModuleName(v string) *DescribeModuleConfigResponseBodyModuleConfigList {
	s.ModuleName = &v
	return s
}

type DescribeModuleConfigResponseBodyModuleConfigListItems struct {
	// The ID of the server group to which the server belongs.
	GroupId *int32 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The IP address of the server.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The region in which the server resides.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeModuleConfigResponseBodyModuleConfigListItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeModuleConfigResponseBodyModuleConfigListItems) GoString() string {
	return s.String()
}

func (s *DescribeModuleConfigResponseBodyModuleConfigListItems) SetGroupId(v int32) *DescribeModuleConfigResponseBodyModuleConfigListItems {
	s.GroupId = &v
	return s
}

func (s *DescribeModuleConfigResponseBodyModuleConfigListItems) SetInstanceId(v string) *DescribeModuleConfigResponseBodyModuleConfigListItems {
	s.InstanceId = &v
	return s
}

func (s *DescribeModuleConfigResponseBodyModuleConfigListItems) SetInstanceName(v string) *DescribeModuleConfigResponseBodyModuleConfigListItems {
	s.InstanceName = &v
	return s
}

func (s *DescribeModuleConfigResponseBodyModuleConfigListItems) SetIp(v string) *DescribeModuleConfigResponseBodyModuleConfigListItems {
	s.Ip = &v
	return s
}

func (s *DescribeModuleConfigResponseBodyModuleConfigListItems) SetRegion(v string) *DescribeModuleConfigResponseBodyModuleConfigListItems {
	s.Region = &v
	return s
}

func (s *DescribeModuleConfigResponseBodyModuleConfigListItems) SetUuid(v string) *DescribeModuleConfigResponseBodyModuleConfigListItems {
	s.Uuid = &v
	return s
}

type DescribeModuleConfigResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeModuleConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeModuleConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeModuleConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeModuleConfigResponse) SetHeaders(v map[string]*string) *DescribeModuleConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeModuleConfigResponse) SetStatusCode(v int32) *DescribeModuleConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeModuleConfigResponse) SetBody(v *DescribeModuleConfigResponseBody) *DescribeModuleConfigResponse {
	s.Body = v
	return s
}

type DescribeNoticeConfigRequest struct {
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeNoticeConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNoticeConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeNoticeConfigRequest) SetSourceIp(v string) *DescribeNoticeConfigRequest {
	s.SourceIp = &v
	return s
}

type DescribeNoticeConfigResponseBody struct {
	// An array that consists of the notification settings.
	NoticeConfigList []*DescribeNoticeConfigResponseBodyNoticeConfigList `json:"NoticeConfigList,omitempty" xml:"NoticeConfigList,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeNoticeConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNoticeConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNoticeConfigResponseBody) SetNoticeConfigList(v []*DescribeNoticeConfigResponseBodyNoticeConfigList) *DescribeNoticeConfigResponseBody {
	s.NoticeConfigList = v
	return s
}

func (s *DescribeNoticeConfigResponseBody) SetRequestId(v string) *DescribeNoticeConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeNoticeConfigResponseBodyNoticeConfigList struct {
	// The ID of the user.
	AliUid *int64 `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	// The number of the page to return.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The identifier of the notification item. Valid values:
	//
	// *   **yundun\_security_Weekreport**: notification for unhandled vulnerabilities.
	// *   **yundun\_sas\_antiransomware_task**: notification for results of restoration tasks.
	// *   **sas_healthcheck**: notification for baseline checks.
	// *   **sas_suspicious**: notification for alerts generated by Security Center.
	// *   **yundun\_aegis\_AV_true**: notification for precision defense.
	// *   **yundun\_sas\_ak_leakage**: notification for AccessKey pair leaks.
	// *   **yundun\_sas\_config_alert**: notification for configuration assessment.
	// *   **yundun\_sas\_vul_Emergency**: notification for urgent vulnerabilities.
	// *   **yundun\_webguard_event**: notification for web tamper proofing.
	// *   **yundun\_sas\_cloud\_native_firewall**: notification for alerts generated by the container firewall feature.
	// *   **yundun\_sas\_cloud\_native\_firewall_Defense**: notification for proactive defense implemented by the container firewall feature.
	// *   **yundun\_IP_Blocking**: notification for blocked brute-force attacks initiated from malicious IP addresses.
	// *   **yundun\_sas\_anti\_virus_config**: notification for virus scan.
	// *   **yundun\_sas_log**: notification for excess logs.
	// *   **yundun\_honeypot_alarm**: notification for alerts generated by the honeypot feature.
	// *   **aliyun\_rasp_alarm**: notification for alerts generated by the application security feature.
	// *   **virusScheduleTask**: notification for completion of scheduled virus scans.
	// *   **yundun\_anti_Virus**: notification that no security checks are performed.
	// *   **sas_vulnerability**: notification for vulnerabilities.
	// *   **weeklyreport**: notification for weekly reports.
	// *   **agent**: notification that the Security Center agent is offline.
	// *   **bruteforcesuccess**: notification for protection against brute-force attacks.
	// *   **webshell**: notification for webshells.
	// *   **suspicious**: notification for alerts generated by Server Guard.
	// *   **patch**: deprecated.
	// *   **remotelogin**: notification for remote logons.
	// *   **health**: notification for security checks.
	// *   **yundun\_sas\_cloudsiem_log**: notification of insufficient threat analysis log capacity.
	// >  If the value is **yundun\_security_Weekreport**, weekly reports are sent to notify you of unhandled vulnerabilities.
	Project *string `json:"Project,omitempty" xml:"Project,omitempty"`
	// The notification method. Valid values:
	//
	// *   **1**: text message
	// *   **2**: email
	// *   **4**: internal message
	// *   **3**: text message and email
	// *   **5**: text message and internal message
	// *   **6**: email and internal message
	// *   **7**: text message, email, and internal message
	Route *int32 `json:"Route,omitempty" xml:"Route,omitempty"`
	// The time period during which Security Center sends notifications. Valid values:
	//
	// *   **0**: any time
	// *   **1**: 08:00 to 22:00
	TimeLimit *int32 `json:"TimeLimit,omitempty" xml:"TimeLimit,omitempty"`
}

func (s DescribeNoticeConfigResponseBodyNoticeConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeNoticeConfigResponseBodyNoticeConfigList) GoString() string {
	return s.String()
}

func (s *DescribeNoticeConfigResponseBodyNoticeConfigList) SetAliUid(v int64) *DescribeNoticeConfigResponseBodyNoticeConfigList {
	s.AliUid = &v
	return s
}

func (s *DescribeNoticeConfigResponseBodyNoticeConfigList) SetCurrentPage(v int32) *DescribeNoticeConfigResponseBodyNoticeConfigList {
	s.CurrentPage = &v
	return s
}

func (s *DescribeNoticeConfigResponseBodyNoticeConfigList) SetProject(v string) *DescribeNoticeConfigResponseBodyNoticeConfigList {
	s.Project = &v
	return s
}

func (s *DescribeNoticeConfigResponseBodyNoticeConfigList) SetRoute(v int32) *DescribeNoticeConfigResponseBodyNoticeConfigList {
	s.Route = &v
	return s
}

func (s *DescribeNoticeConfigResponseBodyNoticeConfigList) SetTimeLimit(v int32) *DescribeNoticeConfigResponseBodyNoticeConfigList {
	s.TimeLimit = &v
	return s
}

type DescribeNoticeConfigResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeNoticeConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNoticeConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNoticeConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeNoticeConfigResponse) SetHeaders(v map[string]*string) *DescribeNoticeConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeNoticeConfigResponse) SetStatusCode(v int32) *DescribeNoticeConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNoticeConfigResponse) SetBody(v *DescribeNoticeConfigResponseBody) *DescribeNoticeConfigResponse {
	s.Body = v
	return s
}

type DescribeNsasSuspEventTypeRequest struct {
	// The name of the container field. Valid values:
	//
	// *   **clusterId**: the ID of the cluster
	ContainerFieldName *string `json:"ContainerFieldName,omitempty" xml:"ContainerFieldName,omitempty"`
	// The value of the container field.
	ContainerFieldValue *string `json:"ContainerFieldValue,omitempty" xml:"ContainerFieldValue,omitempty"`
	// The ID of the request source. Set the value to **sas**, which indicates that the request is sent from Security Center.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The name of the alert type.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The name of the server.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The UUIDs of servers. Separate multiple UUIDs with commas (,).
	//
	// >  You can call the [DescribeCloudCenterInstances](~~141932~~) operation to query the UUIDs of servers.
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeNsasSuspEventTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNsasSuspEventTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeNsasSuspEventTypeRequest) SetContainerFieldName(v string) *DescribeNsasSuspEventTypeRequest {
	s.ContainerFieldName = &v
	return s
}

func (s *DescribeNsasSuspEventTypeRequest) SetContainerFieldValue(v string) *DescribeNsasSuspEventTypeRequest {
	s.ContainerFieldValue = &v
	return s
}

func (s *DescribeNsasSuspEventTypeRequest) SetFrom(v string) *DescribeNsasSuspEventTypeRequest {
	s.From = &v
	return s
}

func (s *DescribeNsasSuspEventTypeRequest) SetLang(v string) *DescribeNsasSuspEventTypeRequest {
	s.Lang = &v
	return s
}

func (s *DescribeNsasSuspEventTypeRequest) SetName(v string) *DescribeNsasSuspEventTypeRequest {
	s.Name = &v
	return s
}

func (s *DescribeNsasSuspEventTypeRequest) SetRemark(v string) *DescribeNsasSuspEventTypeRequest {
	s.Remark = &v
	return s
}

func (s *DescribeNsasSuspEventTypeRequest) SetSourceIp(v string) *DescribeNsasSuspEventTypeRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeNsasSuspEventTypeRequest) SetUuids(v string) *DescribeNsasSuspEventTypeRequest {
	s.Uuids = &v
	return s
}

type DescribeNsasSuspEventTypeResponseBody struct {
	// An array that consists of the information about the alert type.
	EventTypes []*DescribeNsasSuspEventTypeResponseBodyEventTypes `json:"EventTypes,omitempty" xml:"EventTypes,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeNsasSuspEventTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNsasSuspEventTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNsasSuspEventTypeResponseBody) SetEventTypes(v []*DescribeNsasSuspEventTypeResponseBodyEventTypes) *DescribeNsasSuspEventTypeResponseBody {
	s.EventTypes = v
	return s
}

func (s *DescribeNsasSuspEventTypeResponseBody) SetRequestId(v string) *DescribeNsasSuspEventTypeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeNsasSuspEventTypeResponseBodyEventTypes struct {
	// The name of the alert type.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of assets for which an alert of the type is generated.
	SuspEventCount *int32 `json:"SuspEventCount,omitempty" xml:"SuspEventCount,omitempty"`
	// The alert type.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeNsasSuspEventTypeResponseBodyEventTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeNsasSuspEventTypeResponseBodyEventTypes) GoString() string {
	return s.String()
}

func (s *DescribeNsasSuspEventTypeResponseBodyEventTypes) SetName(v string) *DescribeNsasSuspEventTypeResponseBodyEventTypes {
	s.Name = &v
	return s
}

func (s *DescribeNsasSuspEventTypeResponseBodyEventTypes) SetSuspEventCount(v int32) *DescribeNsasSuspEventTypeResponseBodyEventTypes {
	s.SuspEventCount = &v
	return s
}

func (s *DescribeNsasSuspEventTypeResponseBodyEventTypes) SetType(v string) *DescribeNsasSuspEventTypeResponseBodyEventTypes {
	s.Type = &v
	return s
}

type DescribeNsasSuspEventTypeResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeNsasSuspEventTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNsasSuspEventTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNsasSuspEventTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeNsasSuspEventTypeResponse) SetHeaders(v map[string]*string) *DescribeNsasSuspEventTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeNsasSuspEventTypeResponse) SetStatusCode(v int32) *DescribeNsasSuspEventTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNsasSuspEventTypeResponse) SetBody(v *DescribeNsasSuspEventTypeResponseBody) *DescribeNsasSuspEventTypeResponse {
	s.Body = v
	return s
}

type DescribeOfflineMachinesRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The operating system of the server.
	//
	// >  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **osType**, the value of the **Values** parameter indicates an operating system.
	Os *string `json:"Os,omitempty" xml:"Os,omitempty"`
	// The number of entries to return on each page. Default value: **5**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region in which the server resides.
	//
	// >  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **regionId**, the value of the **Values** parameter indicates a region ID.
	RegionIdStr *string `json:"RegionIdStr,omitempty" xml:"RegionIdStr,omitempty"`
	// The region in which the server resides.
	//
	// >  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **regionId**, the value of the **Values** parameter indicates a region ID.
	RegionNo *string `json:"RegionNo,omitempty" xml:"RegionNo,omitempty"`
	// The information about the server that you want to query. The value can be the name or the public IP address of the server.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The source of the server. Valid values:
	//
	// *   **0**: an asset provided by Alibaba Cloud.
	// *   **1**: a third-party cloud server
	// *   **2**: a server in a data center
	// *   **3**, **4**, **5**, and **7**: other cloud asset
	// *   **8**: a lightweight asset
	Vendor *int32 `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s DescribeOfflineMachinesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOfflineMachinesRequest) GoString() string {
	return s.String()
}

func (s *DescribeOfflineMachinesRequest) SetCurrentPage(v int32) *DescribeOfflineMachinesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeOfflineMachinesRequest) SetOs(v string) *DescribeOfflineMachinesRequest {
	s.Os = &v
	return s
}

func (s *DescribeOfflineMachinesRequest) SetPageSize(v int32) *DescribeOfflineMachinesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeOfflineMachinesRequest) SetRegionIdStr(v string) *DescribeOfflineMachinesRequest {
	s.RegionIdStr = &v
	return s
}

func (s *DescribeOfflineMachinesRequest) SetRegionNo(v string) *DescribeOfflineMachinesRequest {
	s.RegionNo = &v
	return s
}

func (s *DescribeOfflineMachinesRequest) SetRemark(v string) *DescribeOfflineMachinesRequest {
	s.Remark = &v
	return s
}

func (s *DescribeOfflineMachinesRequest) SetSourceIp(v string) *DescribeOfflineMachinesRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeOfflineMachinesRequest) SetVendor(v int32) *DescribeOfflineMachinesRequest {
	s.Vendor = &v
	return s
}

type DescribeOfflineMachinesResponseBody struct {
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// An array that consists of the information about servers.
	MachineList []*DescribeOfflineMachinesResponseBodyMachineList `json:"MachineList,omitempty" xml:"MachineList,omitempty" type:"Repeated"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeOfflineMachinesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOfflineMachinesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOfflineMachinesResponseBody) SetCurrentPage(v int32) *DescribeOfflineMachinesResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeOfflineMachinesResponseBody) SetMachineList(v []*DescribeOfflineMachinesResponseBodyMachineList) *DescribeOfflineMachinesResponseBody {
	s.MachineList = v
	return s
}

func (s *DescribeOfflineMachinesResponseBody) SetPageSize(v int32) *DescribeOfflineMachinesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeOfflineMachinesResponseBody) SetRequestId(v string) *DescribeOfflineMachinesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOfflineMachinesResponseBody) SetTotalCount(v int32) *DescribeOfflineMachinesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeOfflineMachinesResponseBodyMachineList struct {
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The region in which the server resides.
	MachineRegion *string `json:"MachineRegion,omitempty" xml:"MachineRegion,omitempty"`
	// The operating system of the server. Valid values:
	//
	// *   **linux**
	// *   **windows**
	// *   **windows-2003**
	Os *string `json:"Os,omitempty" xml:"Os,omitempty"`
	// The ID of the region in which the server resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The source of the server. Valid values:
	//
	// *   **0**: an asset provided by Alibaba Cloud.
	// *   **1**: a third-party cloud server
	// *   **2**: a server in a data center
	// *   **3**, **4**, **5**, and **7**: other cloud asset
	// *   **8**: a lightweight asset
	Vendor *int32 `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
	// The name of the service provider (SP) for the server.
	//
	// Valid values:
	//
	// *   **ALIYUN**: Alibaba Cloud
	// *   **OUT**: a third-party service provider
	// *   **IDC**: a data center
	// *   **TENCENT**: Tencent Cloud
	// *   **HUAWEICLOUD**: Huawei Cloud
	// *   **Microsoft**: Microsoft
	// *   **AWS**: Amazon Web Services (AWS)
	// *   **TRIPARTITE**: a lightweight server
	VendorName *string `json:"VendorName,omitempty" xml:"VendorName,omitempty"`
}

func (s DescribeOfflineMachinesResponseBodyMachineList) String() string {
	return tea.Prettify(s)
}

func (s DescribeOfflineMachinesResponseBodyMachineList) GoString() string {
	return s.String()
}

func (s *DescribeOfflineMachinesResponseBodyMachineList) SetInstanceId(v string) *DescribeOfflineMachinesResponseBodyMachineList {
	s.InstanceId = &v
	return s
}

func (s *DescribeOfflineMachinesResponseBodyMachineList) SetInstanceName(v string) *DescribeOfflineMachinesResponseBodyMachineList {
	s.InstanceName = &v
	return s
}

func (s *DescribeOfflineMachinesResponseBodyMachineList) SetInternetIp(v string) *DescribeOfflineMachinesResponseBodyMachineList {
	s.InternetIp = &v
	return s
}

func (s *DescribeOfflineMachinesResponseBodyMachineList) SetIntranetIp(v string) *DescribeOfflineMachinesResponseBodyMachineList {
	s.IntranetIp = &v
	return s
}

func (s *DescribeOfflineMachinesResponseBodyMachineList) SetMachineRegion(v string) *DescribeOfflineMachinesResponseBodyMachineList {
	s.MachineRegion = &v
	return s
}

func (s *DescribeOfflineMachinesResponseBodyMachineList) SetOs(v string) *DescribeOfflineMachinesResponseBodyMachineList {
	s.Os = &v
	return s
}

func (s *DescribeOfflineMachinesResponseBodyMachineList) SetRegionId(v string) *DescribeOfflineMachinesResponseBodyMachineList {
	s.RegionId = &v
	return s
}

func (s *DescribeOfflineMachinesResponseBodyMachineList) SetUuid(v string) *DescribeOfflineMachinesResponseBodyMachineList {
	s.Uuid = &v
	return s
}

func (s *DescribeOfflineMachinesResponseBodyMachineList) SetVendor(v int32) *DescribeOfflineMachinesResponseBodyMachineList {
	s.Vendor = &v
	return s
}

func (s *DescribeOfflineMachinesResponseBodyMachineList) SetVendorName(v string) *DescribeOfflineMachinesResponseBodyMachineList {
	s.VendorName = &v
	return s
}

type DescribeOfflineMachinesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeOfflineMachinesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeOfflineMachinesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOfflineMachinesResponse) GoString() string {
	return s.String()
}

func (s *DescribeOfflineMachinesResponse) SetHeaders(v map[string]*string) *DescribeOfflineMachinesResponse {
	s.Headers = v
	return s
}

func (s *DescribeOfflineMachinesResponse) SetStatusCode(v int32) *DescribeOfflineMachinesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOfflineMachinesResponse) SetBody(v *DescribeOfflineMachinesResponseBody) *DescribeOfflineMachinesResponse {
	s.Body = v
	return s
}

type DescribeOnceTaskRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The timestamp when the root task ends. Unit: milliseconds.
	EndTimeQuery *int64 `json:"EndTimeQuery,omitempty" xml:"EndTimeQuery,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the root task.
	//
	// >  You must specify at least one of the **TaskType** and **RootTaskId** parameters.
	RootTaskId *string `json:"RootTaskId,omitempty" xml:"RootTaskId,omitempty"`
	// The timestamp when the root task starts. Unit: milliseconds.
	StartTimeQuery *int64  `json:"StartTimeQuery,omitempty" xml:"StartTimeQuery,omitempty"`
	TaskId         *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The type of the task. Valid values:
	//
	// *   **CLIENT\_PROBLEM_CHECK**: a task of the Security Center agent
	// *   **CLIENT\_DEV_OPS**: an O&M task of Cloud Assistant
	// *   **ASSET\_SECURITY_CHECK**: a task of asset information collection
	//
	// >  You must specify at least one of the **TaskType** and **RootTaskId** parameters.
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeOnceTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOnceTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeOnceTaskRequest) SetCurrentPage(v int32) *DescribeOnceTaskRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeOnceTaskRequest) SetEndTimeQuery(v int64) *DescribeOnceTaskRequest {
	s.EndTimeQuery = &v
	return s
}

func (s *DescribeOnceTaskRequest) SetPageSize(v int32) *DescribeOnceTaskRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeOnceTaskRequest) SetRootTaskId(v string) *DescribeOnceTaskRequest {
	s.RootTaskId = &v
	return s
}

func (s *DescribeOnceTaskRequest) SetStartTimeQuery(v int64) *DescribeOnceTaskRequest {
	s.StartTimeQuery = &v
	return s
}

func (s *DescribeOnceTaskRequest) SetTaskId(v string) *DescribeOnceTaskRequest {
	s.TaskId = &v
	return s
}

func (s *DescribeOnceTaskRequest) SetTaskType(v string) *DescribeOnceTaskRequest {
	s.TaskType = &v
	return s
}

type DescribeOnceTaskResponseBody struct {
	// The pagination information.
	PageInfo *DescribeOnceTaskResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of the tasks.
	TaskManageResponseList []*DescribeOnceTaskResponseBodyTaskManageResponseList `json:"TaskManageResponseList,omitempty" xml:"TaskManageResponseList,omitempty" type:"Repeated"`
}

func (s DescribeOnceTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOnceTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOnceTaskResponseBody) SetPageInfo(v *DescribeOnceTaskResponseBodyPageInfo) *DescribeOnceTaskResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeOnceTaskResponseBody) SetRequestId(v string) *DescribeOnceTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOnceTaskResponseBody) SetTaskManageResponseList(v []*DescribeOnceTaskResponseBodyTaskManageResponseList) *DescribeOnceTaskResponseBody {
	s.TaskManageResponseList = v
	return s
}

type DescribeOnceTaskResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeOnceTaskResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeOnceTaskResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeOnceTaskResponseBodyPageInfo) SetCount(v int32) *DescribeOnceTaskResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeOnceTaskResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyPageInfo) SetPageSize(v int32) *DescribeOnceTaskResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyPageInfo) SetTotalCount(v int32) *DescribeOnceTaskResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeOnceTaskResponseBodyTaskManageResponseList struct {
	// The execution details of the task. The value of this parameter is in the JSON format.
	//
	// *   **causeCode**: the returned code for the cause
	// *   **causeMsg**: the returned information for the cause
	// *   **resCode**: the returned code of troubleshooting
	// *   **resMsg**: the returned information about troubleshooting
	// *   **problemType**: the type of the issue
	// *   **dispatchType**: the task delivery method
	// *   **uuid**: the UUID of the server
	// *   **instanceId**: the instance ID of the server
	// *   **internetIp**: the public IP address of the server
	// *   **intranetIp**: the private IP address of the server
	// *   **instanceName**: the instance name of the server
	// *   **url**: the download link of the troubleshooting log
	DetailData *string `json:"DetailData,omitempty" xml:"DetailData,omitempty"`
	FailCount  *int32  `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	// The progress of the task. Unit: %.
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	ResultInfo   *string `json:"ResultInfo,omitempty" xml:"ResultInfo,omitempty"`
	SuccessCount *int32  `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
	// The timestamp when the task ends. Unit: milliseconds.
	TaskEndTime *int64 `json:"TaskEndTime,omitempty" xml:"TaskEndTime,omitempty"`
	// The ID of the task.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the task.
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The timestamp when the task starts. Unit: milliseconds.
	TaskStartTime *int64 `json:"TaskStartTime,omitempty" xml:"TaskStartTime,omitempty"`
	// The status of the task. Valid values:
	//
	// *   **1**: started
	// *   **2**: complete
	// *   **3**: failed
	// *   **4**: timed out
	TaskStatus *int32 `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	// The text description of the status for the task. Valid values:
	//
	// *   **INIT**: The task is to be started.
	// *   **START**: The task is started.
	// *   **DISPATCH**: The self-check command is issued.
	// *   **SUCCESS**: The self-check is complete.
	// *   **FAIL**: The task fails.
	// *   **TIMEOUT**: The task times out.
	TaskStatusText *string `json:"TaskStatusText,omitempty" xml:"TaskStatusText,omitempty"`
	// The type of the task. Valid values:
	//
	// *   **CLIENT\_PROBLEM_CHECK**: a task of the Security Center agent
	// *   **CLIENT\_DEV_OPS**: an O&M task of Cloud Assistant
	// *   **ASSET\_SECURITY_CHECK**: a task of asset information collection
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeOnceTaskResponseBodyTaskManageResponseList) String() string {
	return tea.Prettify(s)
}

func (s DescribeOnceTaskResponseBodyTaskManageResponseList) GoString() string {
	return s.String()
}

func (s *DescribeOnceTaskResponseBodyTaskManageResponseList) SetDetailData(v string) *DescribeOnceTaskResponseBodyTaskManageResponseList {
	s.DetailData = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyTaskManageResponseList) SetFailCount(v int32) *DescribeOnceTaskResponseBodyTaskManageResponseList {
	s.FailCount = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyTaskManageResponseList) SetProgress(v string) *DescribeOnceTaskResponseBodyTaskManageResponseList {
	s.Progress = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyTaskManageResponseList) SetResultInfo(v string) *DescribeOnceTaskResponseBodyTaskManageResponseList {
	s.ResultInfo = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyTaskManageResponseList) SetSuccessCount(v int32) *DescribeOnceTaskResponseBodyTaskManageResponseList {
	s.SuccessCount = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyTaskManageResponseList) SetTaskEndTime(v int64) *DescribeOnceTaskResponseBodyTaskManageResponseList {
	s.TaskEndTime = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyTaskManageResponseList) SetTaskId(v string) *DescribeOnceTaskResponseBodyTaskManageResponseList {
	s.TaskId = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyTaskManageResponseList) SetTaskName(v string) *DescribeOnceTaskResponseBodyTaskManageResponseList {
	s.TaskName = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyTaskManageResponseList) SetTaskStartTime(v int64) *DescribeOnceTaskResponseBodyTaskManageResponseList {
	s.TaskStartTime = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyTaskManageResponseList) SetTaskStatus(v int32) *DescribeOnceTaskResponseBodyTaskManageResponseList {
	s.TaskStatus = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyTaskManageResponseList) SetTaskStatusText(v string) *DescribeOnceTaskResponseBodyTaskManageResponseList {
	s.TaskStatusText = &v
	return s
}

func (s *DescribeOnceTaskResponseBodyTaskManageResponseList) SetTaskType(v string) *DescribeOnceTaskResponseBodyTaskManageResponseList {
	s.TaskType = &v
	return s
}

type DescribeOnceTaskResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeOnceTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeOnceTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOnceTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeOnceTaskResponse) SetHeaders(v map[string]*string) *DescribeOnceTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeOnceTaskResponse) SetStatusCode(v int32) *DescribeOnceTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOnceTaskResponse) SetBody(v *DescribeOnceTaskResponseBody) *DescribeOnceTaskResponse {
	s.Body = v
	return s
}

type DescribeOnceTaskLeafRecordPageRequest struct {
	CurrentPage *int32    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	EndTime     *int64    `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize    *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RelateInfo  *bool     `json:"RelateInfo,omitempty" xml:"RelateInfo,omitempty"`
	Source      *string   `json:"Source,omitempty" xml:"Source,omitempty"`
	StartTime   *int64    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StatusList  []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
	TaskId      *string   `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskType    *string   `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeOnceTaskLeafRecordPageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOnceTaskLeafRecordPageRequest) GoString() string {
	return s.String()
}

func (s *DescribeOnceTaskLeafRecordPageRequest) SetCurrentPage(v int32) *DescribeOnceTaskLeafRecordPageRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageRequest) SetEndTime(v int64) *DescribeOnceTaskLeafRecordPageRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageRequest) SetPageSize(v int32) *DescribeOnceTaskLeafRecordPageRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageRequest) SetRelateInfo(v bool) *DescribeOnceTaskLeafRecordPageRequest {
	s.RelateInfo = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageRequest) SetSource(v string) *DescribeOnceTaskLeafRecordPageRequest {
	s.Source = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageRequest) SetStartTime(v int64) *DescribeOnceTaskLeafRecordPageRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageRequest) SetStatusList(v []*string) *DescribeOnceTaskLeafRecordPageRequest {
	s.StatusList = v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageRequest) SetTaskId(v string) *DescribeOnceTaskLeafRecordPageRequest {
	s.TaskId = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageRequest) SetTaskType(v string) *DescribeOnceTaskLeafRecordPageRequest {
	s.TaskType = &v
	return s
}

type DescribeOnceTaskLeafRecordPageResponseBody struct {
	OnceTasks []*DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks `json:"OnceTasks,omitempty" xml:"OnceTasks,omitempty" type:"Repeated"`
	PageInfo  *DescribeOnceTaskLeafRecordPageResponseBodyPageInfo    `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeOnceTaskLeafRecordPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOnceTaskLeafRecordPageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOnceTaskLeafRecordPageResponseBody) SetOnceTasks(v []*DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) *DescribeOnceTaskLeafRecordPageResponseBody {
	s.OnceTasks = v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBody) SetPageInfo(v *DescribeOnceTaskLeafRecordPageResponseBodyPageInfo) *DescribeOnceTaskLeafRecordPageResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBody) SetRequestId(v string) *DescribeOnceTaskLeafRecordPageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks struct {
	EndTime       *int64                                                            `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Finish        *int32                                                            `json:"Finish,omitempty" xml:"Finish,omitempty"`
	FinishCount   *string                                                           `json:"FinishCount,omitempty" xml:"FinishCount,omitempty"`
	Progress      *int64                                                            `json:"Progress,omitempty" xml:"Progress,omitempty"`
	RealRunTime   *int64                                                            `json:"RealRunTime,omitempty" xml:"RealRunTime,omitempty"`
	ResultInfo    *string                                                           `json:"ResultInfo,omitempty" xml:"ResultInfo,omitempty"`
	StartTime     *int64                                                            `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status        *string                                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	StatusText    *string                                                           `json:"StatusText,omitempty" xml:"StatusText,omitempty"`
	Target        *string                                                           `json:"Target,omitempty" xml:"Target,omitempty"`
	TargetType    *string                                                           `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	TaskId        *string                                                           `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskImageInfo *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo `json:"TaskImageInfo,omitempty" xml:"TaskImageInfo,omitempty" type:"Struct"`
	TaskName      *string                                                           `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskType      *string                                                           `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	TotalCount    *string                                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) String() string {
	return tea.Prettify(s)
}

func (s DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) GoString() string {
	return s.String()
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetEndTime(v int64) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.EndTime = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetFinish(v int32) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.Finish = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetFinishCount(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.FinishCount = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetProgress(v int64) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.Progress = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetRealRunTime(v int64) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.RealRunTime = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetResultInfo(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.ResultInfo = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetStartTime(v int64) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.StartTime = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetStatus(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.Status = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetStatusText(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.StatusText = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetTarget(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.Target = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetTargetType(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.TargetType = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetTaskId(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.TaskId = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetTaskImageInfo(v *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.TaskImageInfo = v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetTaskName(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.TaskName = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetTaskType(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.TaskType = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks) SetTotalCount(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasks {
	s.TotalCount = &v
	return s
}

type DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo struct {
	Digest        *string `json:"Digest,omitempty" xml:"Digest,omitempty"`
	Image         *string `json:"Image,omitempty" xml:"Image,omitempty"`
	Pod           *string `json:"Pod,omitempty" xml:"Pod,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RepoId        *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	RepoName      *string `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	RepoNamespace *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	RepoRegionId  *string `json:"RepoRegionId,omitempty" xml:"RepoRegionId,omitempty"`
	Tag           *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo) GoString() string {
	return s.String()
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo) SetDigest(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo {
	s.Digest = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo) SetImage(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo {
	s.Image = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo) SetPod(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo {
	s.Pod = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo) SetRegionId(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo) SetRepoId(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo {
	s.RepoId = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo) SetRepoName(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo {
	s.RepoName = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo) SetRepoNamespace(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo {
	s.RepoNamespace = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo) SetRepoRegionId(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo {
	s.RepoRegionId = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo) SetTag(v string) *DescribeOnceTaskLeafRecordPageResponseBodyOnceTasksTaskImageInfo {
	s.Tag = &v
	return s
}

type DescribeOnceTaskLeafRecordPageResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeOnceTaskLeafRecordPageResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeOnceTaskLeafRecordPageResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyPageInfo) SetCount(v int32) *DescribeOnceTaskLeafRecordPageResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeOnceTaskLeafRecordPageResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyPageInfo) SetPageSize(v int32) *DescribeOnceTaskLeafRecordPageResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponseBodyPageInfo) SetTotalCount(v int32) *DescribeOnceTaskLeafRecordPageResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeOnceTaskLeafRecordPageResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeOnceTaskLeafRecordPageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeOnceTaskLeafRecordPageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOnceTaskLeafRecordPageResponse) GoString() string {
	return s.String()
}

func (s *DescribeOnceTaskLeafRecordPageResponse) SetHeaders(v map[string]*string) *DescribeOnceTaskLeafRecordPageResponse {
	s.Headers = v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponse) SetStatusCode(v int32) *DescribeOnceTaskLeafRecordPageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOnceTaskLeafRecordPageResponse) SetBody(v *DescribeOnceTaskLeafRecordPageResponseBody) *DescribeOnceTaskLeafRecordPageResponse {
	s.Body = v
	return s
}

type DescribePropertyCountRequest struct {
	// The type of the asset fingerprints. Separate multiple types with commas (,). Valid values:
	//
	// *   **port**: port
	// *   **process**: process
	// *   **software**: software
	// *   **user**: account
	// *   **cron**: scheduled task
	// *   **sca**: middleware
	// *   **web**: website
	// *   **database**: database
	// *   **lkm**: kernel module
	// *   **autorun**: startup item
	// *   **web_server**: web service
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The UUIDs of the assets. Separate multiple UUIDs with commas (,).
	UuidList *string `json:"UuidList,omitempty" xml:"UuidList,omitempty"`
}

func (s DescribePropertyCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyCountRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyCountRequest) SetType(v string) *DescribePropertyCountRequest {
	s.Type = &v
	return s
}

func (s *DescribePropertyCountRequest) SetUuidList(v string) *DescribePropertyCountRequest {
	s.UuidList = &v
	return s
}

type DescribePropertyCountResponseBody struct {
	// The number of startup items.
	Autorun *int32 `json:"Autorun,omitempty" xml:"Autorun,omitempty"`
	// The number of scheduled tasks.
	Cron *int32 `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The number of databases.
	Database *int32 `json:"Database,omitempty" xml:"Database,omitempty"`
	// The number of kernel modules.
	Lkm *int32 `json:"Lkm,omitempty" xml:"Lkm,omitempty"`
	// The number of ports.
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The number of processes.
	Process *int32 `json:"Process,omitempty" xml:"Process,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The number of middleware assets.
	Sca *int32 `json:"Sca,omitempty" xml:"Sca,omitempty"`
	// The number of software assets.
	Software *int32 `json:"Software,omitempty" xml:"Software,omitempty"`
	// The number of accounts.
	User *int32 `json:"User,omitempty" xml:"User,omitempty"`
	// The number of websites.
	Web *int32 `json:"Web,omitempty" xml:"Web,omitempty"`
	// The number of web services.
	Webserver *int32 `json:"Webserver,omitempty" xml:"Webserver,omitempty"`
}

func (s DescribePropertyCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyCountResponseBody) SetAutorun(v int32) *DescribePropertyCountResponseBody {
	s.Autorun = &v
	return s
}

func (s *DescribePropertyCountResponseBody) SetCron(v int32) *DescribePropertyCountResponseBody {
	s.Cron = &v
	return s
}

func (s *DescribePropertyCountResponseBody) SetDatabase(v int32) *DescribePropertyCountResponseBody {
	s.Database = &v
	return s
}

func (s *DescribePropertyCountResponseBody) SetLkm(v int32) *DescribePropertyCountResponseBody {
	s.Lkm = &v
	return s
}

func (s *DescribePropertyCountResponseBody) SetPort(v int32) *DescribePropertyCountResponseBody {
	s.Port = &v
	return s
}

func (s *DescribePropertyCountResponseBody) SetProcess(v int32) *DescribePropertyCountResponseBody {
	s.Process = &v
	return s
}

func (s *DescribePropertyCountResponseBody) SetRequestId(v string) *DescribePropertyCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePropertyCountResponseBody) SetSca(v int32) *DescribePropertyCountResponseBody {
	s.Sca = &v
	return s
}

func (s *DescribePropertyCountResponseBody) SetSoftware(v int32) *DescribePropertyCountResponseBody {
	s.Software = &v
	return s
}

func (s *DescribePropertyCountResponseBody) SetUser(v int32) *DescribePropertyCountResponseBody {
	s.User = &v
	return s
}

func (s *DescribePropertyCountResponseBody) SetWeb(v int32) *DescribePropertyCountResponseBody {
	s.Web = &v
	return s
}

func (s *DescribePropertyCountResponseBody) SetWebserver(v int32) *DescribePropertyCountResponseBody {
	s.Webserver = &v
	return s
}

type DescribePropertyCountResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyCountResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyCountResponse) SetHeaders(v map[string]*string) *DescribePropertyCountResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyCountResponse) SetStatusCode(v int32) *DescribePropertyCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyCountResponse) SetBody(v *DescribePropertyCountResponseBody) *DescribePropertyCountResponse {
	s.Body = v
	return s
}

type DescribePropertyCronDetailRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether fuzzy search by path to the scheduled task is supported. If you want to use fuzzy search, set the parameter to **1**. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.
	Extend *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The name or IP address of the server.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The path to the scheduled task.
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The username of the account that runs the scheduled task.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribePropertyCronDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyCronDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyCronDetailRequest) SetCurrentPage(v int32) *DescribePropertyCronDetailRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyCronDetailRequest) SetExtend(v string) *DescribePropertyCronDetailRequest {
	s.Extend = &v
	return s
}

func (s *DescribePropertyCronDetailRequest) SetPageSize(v int32) *DescribePropertyCronDetailRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyCronDetailRequest) SetRemark(v string) *DescribePropertyCronDetailRequest {
	s.Remark = &v
	return s
}

func (s *DescribePropertyCronDetailRequest) SetSource(v string) *DescribePropertyCronDetailRequest {
	s.Source = &v
	return s
}

func (s *DescribePropertyCronDetailRequest) SetUser(v string) *DescribePropertyCronDetailRequest {
	s.User = &v
	return s
}

func (s *DescribePropertyCronDetailRequest) SetUuid(v string) *DescribePropertyCronDetailRequest {
	s.Uuid = &v
	return s
}

type DescribePropertyCronDetailResponseBody struct {
	// The pagination information.
	PageInfo *DescribePropertyCronDetailResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The details of the scheduled tasks.
	Propertys []*DescribePropertyCronDetailResponseBodyPropertys `json:"Propertys,omitempty" xml:"Propertys,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertyCronDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyCronDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyCronDetailResponseBody) SetPageInfo(v *DescribePropertyCronDetailResponseBodyPageInfo) *DescribePropertyCronDetailResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribePropertyCronDetailResponseBody) SetPropertys(v []*DescribePropertyCronDetailResponseBodyPropertys) *DescribePropertyCronDetailResponseBody {
	s.Propertys = v
	return s
}

func (s *DescribePropertyCronDetailResponseBody) SetRequestId(v string) *DescribePropertyCronDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertyCronDetailResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePropertyCronDetailResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyCronDetailResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribePropertyCronDetailResponseBodyPageInfo) SetCount(v int32) *DescribePropertyCronDetailResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPageInfo) SetCurrentPage(v int32) *DescribePropertyCronDetailResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPageInfo) SetPageSize(v int32) *DescribePropertyCronDetailResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPageInfo) SetTotalCount(v int32) *DescribePropertyCronDetailResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribePropertyCronDetailResponseBodyPropertys struct {
	// The command that is used to run the scheduled task.
	Cmd *string `json:"Cmd,omitempty" xml:"Cmd,omitempty"`
	// The timestamp of the last fingerprint collection. Unit: milliseconds.
	CreateTimestamp *int64 `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The IP addresses of the server.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The MD5 hash value of the path to the scheduled task.
	Md5 *string `json:"Md5,omitempty" xml:"Md5,omitempty"`
	// The interval at which the scheduled task is performed.
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The path to the scheduled task.
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The username of the account that runs the scheduled task.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribePropertyCronDetailResponseBodyPropertys) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyCronDetailResponseBodyPropertys) GoString() string {
	return s.String()
}

func (s *DescribePropertyCronDetailResponseBodyPropertys) SetCmd(v string) *DescribePropertyCronDetailResponseBodyPropertys {
	s.Cmd = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPropertys) SetCreateTimestamp(v int64) *DescribePropertyCronDetailResponseBodyPropertys {
	s.CreateTimestamp = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPropertys) SetInstanceId(v string) *DescribePropertyCronDetailResponseBodyPropertys {
	s.InstanceId = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPropertys) SetInstanceName(v string) *DescribePropertyCronDetailResponseBodyPropertys {
	s.InstanceName = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPropertys) SetInternetIp(v string) *DescribePropertyCronDetailResponseBodyPropertys {
	s.InternetIp = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPropertys) SetIntranetIp(v string) *DescribePropertyCronDetailResponseBodyPropertys {
	s.IntranetIp = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPropertys) SetIp(v string) *DescribePropertyCronDetailResponseBodyPropertys {
	s.Ip = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPropertys) SetMd5(v string) *DescribePropertyCronDetailResponseBodyPropertys {
	s.Md5 = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPropertys) SetPeriod(v string) *DescribePropertyCronDetailResponseBodyPropertys {
	s.Period = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPropertys) SetSource(v string) *DescribePropertyCronDetailResponseBodyPropertys {
	s.Source = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPropertys) SetUser(v string) *DescribePropertyCronDetailResponseBodyPropertys {
	s.User = &v
	return s
}

func (s *DescribePropertyCronDetailResponseBodyPropertys) SetUuid(v string) *DescribePropertyCronDetailResponseBodyPropertys {
	s.Uuid = &v
	return s
}

type DescribePropertyCronDetailResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyCronDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyCronDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyCronDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyCronDetailResponse) SetHeaders(v map[string]*string) *DescribePropertyCronDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyCronDetailResponse) SetStatusCode(v int32) *DescribePropertyCronDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyCronDetailResponse) SetBody(v *DescribePropertyCronDetailResponseBody) *DescribePropertyCronDetailResponse {
	s.Body = v
	return s
}

type DescribePropertyCronItemRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ForceFlush  *bool   `json:"ForceFlush,omitempty" xml:"ForceFlush,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Source      *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s DescribePropertyCronItemRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyCronItemRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyCronItemRequest) SetCurrentPage(v int32) *DescribePropertyCronItemRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyCronItemRequest) SetForceFlush(v bool) *DescribePropertyCronItemRequest {
	s.ForceFlush = &v
	return s
}

func (s *DescribePropertyCronItemRequest) SetPageSize(v int32) *DescribePropertyCronItemRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyCronItemRequest) SetSource(v string) *DescribePropertyCronItemRequest {
	s.Source = &v
	return s
}

type DescribePropertyCronItemResponseBody struct {
	PageInfo      *DescribePropertyCronItemResponseBodyPageInfo        `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	PropertyItems []*DescribePropertyCronItemResponseBodyPropertyItems `json:"PropertyItems,omitempty" xml:"PropertyItems,omitempty" type:"Repeated"`
	RequestId     *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertyCronItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyCronItemResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyCronItemResponseBody) SetPageInfo(v *DescribePropertyCronItemResponseBodyPageInfo) *DescribePropertyCronItemResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribePropertyCronItemResponseBody) SetPropertyItems(v []*DescribePropertyCronItemResponseBodyPropertyItems) *DescribePropertyCronItemResponseBody {
	s.PropertyItems = v
	return s
}

func (s *DescribePropertyCronItemResponseBody) SetRequestId(v string) *DescribePropertyCronItemResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertyCronItemResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePropertyCronItemResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyCronItemResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribePropertyCronItemResponseBodyPageInfo) SetCount(v int32) *DescribePropertyCronItemResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribePropertyCronItemResponseBodyPageInfo) SetCurrentPage(v int32) *DescribePropertyCronItemResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyCronItemResponseBodyPageInfo) SetPageSize(v int32) *DescribePropertyCronItemResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyCronItemResponseBodyPageInfo) SetTotalCount(v int32) *DescribePropertyCronItemResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribePropertyCronItemResponseBodyPropertyItems struct {
	Count  *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s DescribePropertyCronItemResponseBodyPropertyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyCronItemResponseBodyPropertyItems) GoString() string {
	return s.String()
}

func (s *DescribePropertyCronItemResponseBodyPropertyItems) SetCount(v int32) *DescribePropertyCronItemResponseBodyPropertyItems {
	s.Count = &v
	return s
}

func (s *DescribePropertyCronItemResponseBodyPropertyItems) SetSource(v string) *DescribePropertyCronItemResponseBodyPropertyItems {
	s.Source = &v
	return s
}

type DescribePropertyCronItemResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyCronItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyCronItemResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyCronItemResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyCronItemResponse) SetHeaders(v map[string]*string) *DescribePropertyCronItemResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyCronItemResponse) SetStatusCode(v int32) *DescribePropertyCronItemResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyCronItemResponse) SetBody(v *DescribePropertyCronItemResponseBody) *DescribePropertyCronItemResponse {
	s.Body = v
	return s
}

type DescribePropertyPortDetailRequest struct {
	// The IP address that is bound to the listening port.
	BindIp *string `json:"BindIp,omitempty" xml:"BindIp,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether fuzzy search by port number is supported. If you want to use fuzzy search, set the parameter to **1**. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.
	Extend *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The listening port of the server.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The name of the server process.
	ProcName *string `json:"ProcName,omitempty" xml:"ProcName,omitempty"`
	// The name or IP address of the server.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribePropertyPortDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyPortDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyPortDetailRequest) SetBindIp(v string) *DescribePropertyPortDetailRequest {
	s.BindIp = &v
	return s
}

func (s *DescribePropertyPortDetailRequest) SetCurrentPage(v int32) *DescribePropertyPortDetailRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyPortDetailRequest) SetExtend(v string) *DescribePropertyPortDetailRequest {
	s.Extend = &v
	return s
}

func (s *DescribePropertyPortDetailRequest) SetPageSize(v int32) *DescribePropertyPortDetailRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyPortDetailRequest) SetPort(v string) *DescribePropertyPortDetailRequest {
	s.Port = &v
	return s
}

func (s *DescribePropertyPortDetailRequest) SetProcName(v string) *DescribePropertyPortDetailRequest {
	s.ProcName = &v
	return s
}

func (s *DescribePropertyPortDetailRequest) SetRemark(v string) *DescribePropertyPortDetailRequest {
	s.Remark = &v
	return s
}

func (s *DescribePropertyPortDetailRequest) SetUuid(v string) *DescribePropertyPortDetailRequest {
	s.Uuid = &v
	return s
}

type DescribePropertyPortDetailResponseBody struct {
	// The pagination information.
	PageInfo *DescribePropertyPortDetailResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// An array that consists of the fingerprints of the ports.
	Propertys []*DescribePropertyPortDetailResponseBodyPropertys `json:"Propertys,omitempty" xml:"Propertys,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertyPortDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyPortDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyPortDetailResponseBody) SetPageInfo(v *DescribePropertyPortDetailResponseBodyPageInfo) *DescribePropertyPortDetailResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribePropertyPortDetailResponseBody) SetPropertys(v []*DescribePropertyPortDetailResponseBodyPropertys) *DescribePropertyPortDetailResponseBody {
	s.Propertys = v
	return s
}

func (s *DescribePropertyPortDetailResponseBody) SetRequestId(v string) *DescribePropertyPortDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertyPortDetailResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePropertyPortDetailResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyPortDetailResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribePropertyPortDetailResponseBodyPageInfo) SetCount(v int32) *DescribePropertyPortDetailResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPageInfo) SetCurrentPage(v int32) *DescribePropertyPortDetailResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPageInfo) SetPageSize(v int32) *DescribePropertyPortDetailResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPageInfo) SetTotalCount(v int32) *DescribePropertyPortDetailResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribePropertyPortDetailResponseBodyPropertys struct {
	// The IP address that is bound to the listening port.
	BindIp *string `json:"BindIp,omitempty" xml:"BindIp,omitempty"`
	// The timestamp of the last fingerprint collection. Unit: milliseconds.
	CreateTimestamp *int64 `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The IP address of the network interface controller (NIC) that is bound to the listening port.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The ID of the server process that listens on the port.
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The listening port.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The name of the server process.
	ProcName *string `json:"ProcName,omitempty" xml:"ProcName,omitempty"`
	// The network protocol that is used by the listening port.
	Proto *string `json:"Proto,omitempty" xml:"Proto,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribePropertyPortDetailResponseBodyPropertys) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyPortDetailResponseBodyPropertys) GoString() string {
	return s.String()
}

func (s *DescribePropertyPortDetailResponseBodyPropertys) SetBindIp(v string) *DescribePropertyPortDetailResponseBodyPropertys {
	s.BindIp = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPropertys) SetCreateTimestamp(v int64) *DescribePropertyPortDetailResponseBodyPropertys {
	s.CreateTimestamp = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPropertys) SetInstanceId(v string) *DescribePropertyPortDetailResponseBodyPropertys {
	s.InstanceId = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPropertys) SetInstanceName(v string) *DescribePropertyPortDetailResponseBodyPropertys {
	s.InstanceName = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPropertys) SetInternetIp(v string) *DescribePropertyPortDetailResponseBodyPropertys {
	s.InternetIp = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPropertys) SetIntranetIp(v string) *DescribePropertyPortDetailResponseBodyPropertys {
	s.IntranetIp = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPropertys) SetIp(v string) *DescribePropertyPortDetailResponseBodyPropertys {
	s.Ip = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPropertys) SetPid(v string) *DescribePropertyPortDetailResponseBodyPropertys {
	s.Pid = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPropertys) SetPort(v string) *DescribePropertyPortDetailResponseBodyPropertys {
	s.Port = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPropertys) SetProcName(v string) *DescribePropertyPortDetailResponseBodyPropertys {
	s.ProcName = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPropertys) SetProto(v string) *DescribePropertyPortDetailResponseBodyPropertys {
	s.Proto = &v
	return s
}

func (s *DescribePropertyPortDetailResponseBodyPropertys) SetUuid(v string) *DescribePropertyPortDetailResponseBodyPropertys {
	s.Uuid = &v
	return s
}

type DescribePropertyPortDetailResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyPortDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyPortDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyPortDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyPortDetailResponse) SetHeaders(v map[string]*string) *DescribePropertyPortDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyPortDetailResponse) SetStatusCode(v int32) *DescribePropertyPortDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyPortDetailResponse) SetBody(v *DescribePropertyPortDetailResponseBody) *DescribePropertyPortDetailResponse {
	s.Body = v
	return s
}

type DescribePropertyPortItemRequest struct {
	// The number of the page to return.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether to forcefully refresh the data that you want to query.
	ForceFlush *bool `json:"ForceFlush,omitempty" xml:"ForceFlush,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The port number.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s DescribePropertyPortItemRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyPortItemRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyPortItemRequest) SetCurrentPage(v int32) *DescribePropertyPortItemRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyPortItemRequest) SetForceFlush(v bool) *DescribePropertyPortItemRequest {
	s.ForceFlush = &v
	return s
}

func (s *DescribePropertyPortItemRequest) SetPageSize(v int32) *DescribePropertyPortItemRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyPortItemRequest) SetPort(v string) *DescribePropertyPortItemRequest {
	s.Port = &v
	return s
}

type DescribePropertyPortItemResponseBody struct {
	// The pagination information.
	PageInfo *DescribePropertyPortItemResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// An array that consists of the ports returned.
	PropertyItems []*DescribePropertyPortItemResponseBodyPropertyItems `json:"PropertyItems,omitempty" xml:"PropertyItems,omitempty" type:"Repeated"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertyPortItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyPortItemResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyPortItemResponseBody) SetPageInfo(v *DescribePropertyPortItemResponseBodyPageInfo) *DescribePropertyPortItemResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribePropertyPortItemResponseBody) SetPropertyItems(v []*DescribePropertyPortItemResponseBodyPropertyItems) *DescribePropertyPortItemResponseBody {
	s.PropertyItems = v
	return s
}

func (s *DescribePropertyPortItemResponseBody) SetRequestId(v string) *DescribePropertyPortItemResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertyPortItemResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePropertyPortItemResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyPortItemResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribePropertyPortItemResponseBodyPageInfo) SetCount(v int32) *DescribePropertyPortItemResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribePropertyPortItemResponseBodyPageInfo) SetCurrentPage(v int32) *DescribePropertyPortItemResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyPortItemResponseBodyPageInfo) SetPageSize(v int32) *DescribePropertyPortItemResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyPortItemResponseBodyPageInfo) SetTotalCount(v int32) *DescribePropertyPortItemResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribePropertyPortItemResponseBodyPropertyItems struct {
	// The number of servers that use the port.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The number of the listening port.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The network protocol of the port.
	Proto *string `json:"Proto,omitempty" xml:"Proto,omitempty"`
}

func (s DescribePropertyPortItemResponseBodyPropertyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyPortItemResponseBodyPropertyItems) GoString() string {
	return s.String()
}

func (s *DescribePropertyPortItemResponseBodyPropertyItems) SetCount(v int32) *DescribePropertyPortItemResponseBodyPropertyItems {
	s.Count = &v
	return s
}

func (s *DescribePropertyPortItemResponseBodyPropertyItems) SetPort(v string) *DescribePropertyPortItemResponseBodyPropertyItems {
	s.Port = &v
	return s
}

func (s *DescribePropertyPortItemResponseBodyPropertyItems) SetProto(v string) *DescribePropertyPortItemResponseBodyPropertyItems {
	s.Proto = &v
	return s
}

type DescribePropertyPortItemResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyPortItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyPortItemResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyPortItemResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyPortItemResponse) SetHeaders(v map[string]*string) *DescribePropertyPortItemResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyPortItemResponse) SetStatusCode(v int32) *DescribePropertyPortItemResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyPortItemResponse) SetBody(v *DescribePropertyPortItemResponseBody) *DescribePropertyPortItemResponse {
	s.Body = v
	return s
}

type DescribePropertyProcDetailRequest struct {
	// The startup parameter of the process.
	Cmdline *string `json:"Cmdline,omitempty" xml:"Cmdline,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether fuzzy search by process name is supported. If you want to use fuzzy search, set the parameter to 1. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.
	Extend *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	// The name of the process.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The timestamp when the process ends. Unit: milliseconds.
	ProcTimeEnd *int64 `json:"ProcTimeEnd,omitempty" xml:"ProcTimeEnd,omitempty"`
	// The timestamp when the process starts. Unit: milliseconds.
	ProcTimeStart *int64 `json:"ProcTimeStart,omitempty" xml:"ProcTimeStart,omitempty"`
	// The name or IP address of the server.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The user who runs the process.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribePropertyProcDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyProcDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyProcDetailRequest) SetCmdline(v string) *DescribePropertyProcDetailRequest {
	s.Cmdline = &v
	return s
}

func (s *DescribePropertyProcDetailRequest) SetCurrentPage(v int32) *DescribePropertyProcDetailRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyProcDetailRequest) SetExtend(v string) *DescribePropertyProcDetailRequest {
	s.Extend = &v
	return s
}

func (s *DescribePropertyProcDetailRequest) SetName(v string) *DescribePropertyProcDetailRequest {
	s.Name = &v
	return s
}

func (s *DescribePropertyProcDetailRequest) SetPageSize(v int32) *DescribePropertyProcDetailRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyProcDetailRequest) SetProcTimeEnd(v int64) *DescribePropertyProcDetailRequest {
	s.ProcTimeEnd = &v
	return s
}

func (s *DescribePropertyProcDetailRequest) SetProcTimeStart(v int64) *DescribePropertyProcDetailRequest {
	s.ProcTimeStart = &v
	return s
}

func (s *DescribePropertyProcDetailRequest) SetRemark(v string) *DescribePropertyProcDetailRequest {
	s.Remark = &v
	return s
}

func (s *DescribePropertyProcDetailRequest) SetUser(v string) *DescribePropertyProcDetailRequest {
	s.User = &v
	return s
}

func (s *DescribePropertyProcDetailRequest) SetUuid(v string) *DescribePropertyProcDetailRequest {
	s.Uuid = &v
	return s
}

type DescribePropertyProcDetailResponseBody struct {
	// The pagination information.
	PageInfo *DescribePropertyProcDetailResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// An array that consists of the fingerprints of the processes.
	Propertys []*DescribePropertyProcDetailResponseBodyPropertys `json:"Propertys,omitempty" xml:"Propertys,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertyProcDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyProcDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyProcDetailResponseBody) SetPageInfo(v *DescribePropertyProcDetailResponseBodyPageInfo) *DescribePropertyProcDetailResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribePropertyProcDetailResponseBody) SetPropertys(v []*DescribePropertyProcDetailResponseBodyPropertys) *DescribePropertyProcDetailResponseBody {
	s.Propertys = v
	return s
}

func (s *DescribePropertyProcDetailResponseBody) SetRequestId(v string) *DescribePropertyProcDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertyProcDetailResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePropertyProcDetailResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyProcDetailResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribePropertyProcDetailResponseBodyPageInfo) SetCount(v int32) *DescribePropertyProcDetailResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPageInfo) SetCurrentPage(v int32) *DescribePropertyProcDetailResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPageInfo) SetPageSize(v int32) *DescribePropertyProcDetailResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPageInfo) SetTotalCount(v int32) *DescribePropertyProcDetailResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribePropertyProcDetailResponseBodyPropertys struct {
	// The startup parameter of the process.
	Cmdline *string `json:"Cmdline,omitempty" xml:"Cmdline,omitempty"`
	// The timestamp of last data collection. Unit: milliseconds.
	CreateTimestamp *int64 `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	// The permission that is required to run the process.
	EuidName *string `json:"EuidName,omitempty" xml:"EuidName,omitempty"`
	// The ID of the server that is associated with the process.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server that is associated with the process.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// Indicates whether the process is a package installation process. Valid values:
	//
	// *   **1**: yes
	// *   **0**: no
	IsPackage *int32 `json:"IsPackage,omitempty" xml:"IsPackage,omitempty"`
	// The MD5 hash value of the process file.
	Md5 *string `json:"Md5,omitempty" xml:"Md5,omitempty"`
	// The name of the process.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The path of the process.
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The ID of the process.
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The name of the parent process to which the process belongs.
	Pname *string `json:"Pname,omitempty" xml:"Pname,omitempty"`
	// The time when the process starts.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The timestamp when the process starts. Unit: milliseconds.
	StartTimeDt *int64 `json:"StartTimeDt,omitempty" xml:"StartTimeDt,omitempty"`
	// The status of the process.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The user who runs the process.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
	// The UUID of the server that is associated with the process.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribePropertyProcDetailResponseBodyPropertys) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyProcDetailResponseBodyPropertys) GoString() string {
	return s.String()
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetCmdline(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.Cmdline = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetCreateTimestamp(v int64) *DescribePropertyProcDetailResponseBodyPropertys {
	s.CreateTimestamp = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetEuidName(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.EuidName = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetInstanceId(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.InstanceId = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetInstanceName(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.InstanceName = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetInternetIp(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.InternetIp = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetIntranetIp(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.IntranetIp = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetIsPackage(v int32) *DescribePropertyProcDetailResponseBodyPropertys {
	s.IsPackage = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetMd5(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.Md5 = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetName(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.Name = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetPath(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.Path = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetPid(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.Pid = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetPname(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.Pname = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetStartTime(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.StartTime = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetStartTimeDt(v int64) *DescribePropertyProcDetailResponseBodyPropertys {
	s.StartTimeDt = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetState(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.State = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetUser(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.User = &v
	return s
}

func (s *DescribePropertyProcDetailResponseBodyPropertys) SetUuid(v string) *DescribePropertyProcDetailResponseBodyPropertys {
	s.Uuid = &v
	return s
}

type DescribePropertyProcDetailResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyProcDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyProcDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyProcDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyProcDetailResponse) SetHeaders(v map[string]*string) *DescribePropertyProcDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyProcDetailResponse) SetStatusCode(v int32) *DescribePropertyProcDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyProcDetailResponse) SetBody(v *DescribePropertyProcDetailResponseBody) *DescribePropertyProcDetailResponse {
	s.Body = v
	return s
}

type DescribePropertyProcItemRequest struct {
	// The number of the page to return.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether to forcefully refresh the data that you want to query.
	ForceFlush *bool `json:"ForceFlush,omitempty" xml:"ForceFlush,omitempty"`
	// The name of the process.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribePropertyProcItemRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyProcItemRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyProcItemRequest) SetCurrentPage(v int32) *DescribePropertyProcItemRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyProcItemRequest) SetForceFlush(v bool) *DescribePropertyProcItemRequest {
	s.ForceFlush = &v
	return s
}

func (s *DescribePropertyProcItemRequest) SetName(v string) *DescribePropertyProcItemRequest {
	s.Name = &v
	return s
}

func (s *DescribePropertyProcItemRequest) SetPageSize(v int32) *DescribePropertyProcItemRequest {
	s.PageSize = &v
	return s
}

type DescribePropertyProcItemResponseBody struct {
	// The pagination information.
	PageInfo *DescribePropertyProcItemResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// An array that consists of the processes returned.
	PropertyItems []*DescribePropertyProcItemResponseBodyPropertyItems `json:"PropertyItems,omitempty" xml:"PropertyItems,omitempty" type:"Repeated"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertyProcItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyProcItemResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyProcItemResponseBody) SetPageInfo(v *DescribePropertyProcItemResponseBodyPageInfo) *DescribePropertyProcItemResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribePropertyProcItemResponseBody) SetPropertyItems(v []*DescribePropertyProcItemResponseBodyPropertyItems) *DescribePropertyProcItemResponseBody {
	s.PropertyItems = v
	return s
}

func (s *DescribePropertyProcItemResponseBody) SetRequestId(v string) *DescribePropertyProcItemResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertyProcItemResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePropertyProcItemResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyProcItemResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribePropertyProcItemResponseBodyPageInfo) SetCount(v int32) *DescribePropertyProcItemResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribePropertyProcItemResponseBodyPageInfo) SetCurrentPage(v int32) *DescribePropertyProcItemResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyProcItemResponseBodyPageInfo) SetPageSize(v int32) *DescribePropertyProcItemResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyProcItemResponseBodyPageInfo) SetTotalCount(v int32) *DescribePropertyProcItemResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribePropertyProcItemResponseBodyPropertyItems struct {
	// The number of servers on which the process runs.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the process.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribePropertyProcItemResponseBodyPropertyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyProcItemResponseBodyPropertyItems) GoString() string {
	return s.String()
}

func (s *DescribePropertyProcItemResponseBodyPropertyItems) SetCount(v int32) *DescribePropertyProcItemResponseBodyPropertyItems {
	s.Count = &v
	return s
}

func (s *DescribePropertyProcItemResponseBodyPropertyItems) SetName(v string) *DescribePropertyProcItemResponseBodyPropertyItems {
	s.Name = &v
	return s
}

type DescribePropertyProcItemResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyProcItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyProcItemResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyProcItemResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyProcItemResponse) SetHeaders(v map[string]*string) *DescribePropertyProcItemResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyProcItemResponse) SetStatusCode(v int32) *DescribePropertyProcItemResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyProcItemResponse) SetBody(v *DescribePropertyProcItemResponseBody) *DescribePropertyProcItemResponse {
	s.Body = v
	return s
}

type DescribePropertyScaDetailRequest struct {
	// The type of the asset fingerprint that you want to query. Default value: **sca**. Valid values:
	//
	// *   **sca**: middleware
	// *   **sca_database**: database
	// *   **sca_web**: web service
	//
	// >  If you do not specify this parameter, the default value **sca** is used, which indicates that middleware fingerprints are queried.
	Biz *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	// The type of the middleware, database, or web service that you want to query. Valid values:
	//
	// *   **system_service**: system service
	// *   **software_library**: software library
	// *   **docker_component**: container component
	// *   **database**: database
	// *   **web_container**: web container
	// *   **jar**: JAR package
	// *   **web_framework**: web framework
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The name of the middleware, database, or web service.
	//
	// >  This parameter is deprecated. You can ignore it.
	Name *int64 `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	//
	// >  We recommend that you do not leave this parameter empty.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The PID.
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The port that the process monitors.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The timestamp when the process ends. Unit: milliseconds.
	ProcessStartedEnd *int64 `json:"ProcessStartedEnd,omitempty" xml:"ProcessStartedEnd,omitempty"`
	// The timestamp when the process starts. Unit: milliseconds.
	ProcessStartedStart *int64 `json:"ProcessStartedStart,omitempty" xml:"ProcessStartedStart,omitempty"`
	// The search condition, such as a server name or a server IP address.
	//
	// >  Fuzzy match is supported.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The name of the asset fingerprint that you want to query.
	ScaName *string `json:"ScaName,omitempty" xml:"ScaName,omitempty"`
	// The name of the process.
	ScaNamePattern *string `json:"ScaNamePattern,omitempty" xml:"ScaNamePattern,omitempty"`
	// The version of the middleware, database, or web service.
	ScaVersion *string `json:"ScaVersion,omitempty" xml:"ScaVersion,omitempty"`
	// The search keyword. You must specify this parameter based on the value of the **SearchItem** parameter.
	//
	// *   If the **SearchItem** parameter is set to **name**, you must enter the name of an asset fingerprint.
	//
	// *   If the **SearchItem** parameter is set to **type**, you must enter the type of an asset fingerprint. Valid values:
	//
	//     *   **system_service**: system service
	//     *   **software_library**: software library
	//     *   **docker_component**: container component
	//     *   **database**: database
	//     *   **web_container**: web container
	//     *   **jar**: JAR package
	//     *   **web_framework**: web framework
	//
	// >  You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the asset fingerprints based on the specified name or type.
	SearchInfo *string `json:"SearchInfo,omitempty" xml:"SearchInfo,omitempty"`
	// The keyword of the subquery. You must specify this parameter based on the value of the **SearchItemSub** parameter.
	//
	// *   If the **SearchItemSub** parameter is set to **port**, you must enter a port number.
	// *   If the **SearchItemSub** parameter is set to **pid**, you must enter a process ID (PID).
	// *   If the **SearchItemSub** parameter is set to **version**, you must enter the version of a database, middleware, or web service.
	// *   If the **SearchItemSub** parameter is set to **user**, you must enter a username.
	//
	// >  The subquery is used to search for data of a specified database, middleware, or web service.
	SearchInfoSub *string `json:"SearchInfoSub,omitempty" xml:"SearchInfoSub,omitempty"`
	// The type of the search condition. Valid values:
	//
	// *   **name**: the name of a database, middleware, or web service
	// *   **type**: the type of a database, middleware, or web service
	//
	// >  You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the asset fingerprints based on the specified name or type.
	SearchItem *string `json:"SearchItem,omitempty" xml:"SearchItem,omitempty"`
	// The type of the subquery. Valid values:
	//
	// *   **port**
	// *   **pid**
	// *   **version**
	// *   **user**
	SearchItemSub *string `json:"SearchItemSub,omitempty" xml:"SearchItemSub,omitempty"`
	// The user who runs the process.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
	// The UUID of the server on which the middleware, database, or web service is run.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribePropertyScaDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyScaDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyScaDetailRequest) SetBiz(v string) *DescribePropertyScaDetailRequest {
	s.Biz = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetBizType(v string) *DescribePropertyScaDetailRequest {
	s.BizType = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetCurrentPage(v int32) *DescribePropertyScaDetailRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetLang(v string) *DescribePropertyScaDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetName(v int64) *DescribePropertyScaDetailRequest {
	s.Name = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetPageSize(v int32) *DescribePropertyScaDetailRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetPid(v string) *DescribePropertyScaDetailRequest {
	s.Pid = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetPort(v string) *DescribePropertyScaDetailRequest {
	s.Port = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetProcessStartedEnd(v int64) *DescribePropertyScaDetailRequest {
	s.ProcessStartedEnd = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetProcessStartedStart(v int64) *DescribePropertyScaDetailRequest {
	s.ProcessStartedStart = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetRemark(v string) *DescribePropertyScaDetailRequest {
	s.Remark = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetScaName(v string) *DescribePropertyScaDetailRequest {
	s.ScaName = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetScaNamePattern(v string) *DescribePropertyScaDetailRequest {
	s.ScaNamePattern = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetScaVersion(v string) *DescribePropertyScaDetailRequest {
	s.ScaVersion = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetSearchInfo(v string) *DescribePropertyScaDetailRequest {
	s.SearchInfo = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetSearchInfoSub(v string) *DescribePropertyScaDetailRequest {
	s.SearchInfoSub = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetSearchItem(v string) *DescribePropertyScaDetailRequest {
	s.SearchItem = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetSearchItemSub(v string) *DescribePropertyScaDetailRequest {
	s.SearchItemSub = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetUser(v string) *DescribePropertyScaDetailRequest {
	s.User = &v
	return s
}

func (s *DescribePropertyScaDetailRequest) SetUuid(v string) *DescribePropertyScaDetailRequest {
	s.Uuid = &v
	return s
}

type DescribePropertyScaDetailResponseBody struct {
	// The pagination information.
	PageInfo *DescribePropertyScaDetailResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The details about the asset fingerprints returned.
	Propertys []*DescribePropertyScaDetailResponseBodyPropertys `json:"Propertys,omitempty" xml:"Propertys,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertyScaDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyScaDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyScaDetailResponseBody) SetPageInfo(v *DescribePropertyScaDetailResponseBodyPageInfo) *DescribePropertyScaDetailResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribePropertyScaDetailResponseBody) SetPropertys(v []*DescribePropertyScaDetailResponseBodyPropertys) *DescribePropertyScaDetailResponseBody {
	s.Propertys = v
	return s
}

func (s *DescribePropertyScaDetailResponseBody) SetRequestId(v string) *DescribePropertyScaDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertyScaDetailResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePropertyScaDetailResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyScaDetailResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribePropertyScaDetailResponseBodyPageInfo) SetCount(v int32) *DescribePropertyScaDetailResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPageInfo) SetCurrentPage(v int32) *DescribePropertyScaDetailResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPageInfo) SetPageSize(v int32) *DescribePropertyScaDetailResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPageInfo) SetTotalCount(v int32) *DescribePropertyScaDetailResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribePropertyScaDetailResponseBodyPropertys struct {
	// The type of the middleware, database, or web service. Valid values:
	//
	// *   **system_service**: system service
	// *   **software_library**: software library
	// *   **docker_component**: container component
	// *   **database**: database
	// *   **web_container**: web container
	// *   **jar**: JAR package
	// *   **web_framework**: web framework
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// The display name of the type of the middleware, database, or web service . Valid values:
	//
	// *   System service
	// *   Software library
	// *   Container component
	// *   Database
	// *   Web container
	// *   JAR package
	// *   Web framework
	BizTypeDispaly *string `json:"BizTypeDispaly,omitempty" xml:"BizTypeDispaly,omitempty"`
	// The command line of the process.
	Cmdline *string `json:"Cmdline,omitempty" xml:"Cmdline,omitempty"`
	// The path to the configuration file.
	ConfigPath *string `json:"ConfigPath,omitempty" xml:"ConfigPath,omitempty"`
	// The name of the container.
	ContainerName *string `json:"ContainerName,omitempty" xml:"ContainerName,omitempty"`
	// The latest collection timestamp, which indicates the last timestamp when Security Center collected the information about the middleware, database, or web service. Unit: milliseconds.
	CreateTimestamp *int64 `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	// The name of the image.
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The ID of the server on which the middleware, database, or web service is run.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server on which the middleware, database, or web service is run.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server on which the middleware, database, or web service is run.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server on which the middleware, database, or web service is run.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The public IP address of the server on which the middleware, database, or web service is run.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The IP address that the process monitors.
	ListenIp *string `json:"ListenIp,omitempty" xml:"ListenIp,omitempty"`
	// The protocol of the traffic on which the process listens. Valid values:
	//
	// *   **UDP**
	// *   **TCP**
	ListenProtocol *string `json:"ListenProtocol,omitempty" xml:"ListenProtocol,omitempty"`
	// The listening status of the process. Valid values:
	//
	// *   **NONE**: not listening
	// *   **LISTEN**: listening
	ListenStatus *string `json:"ListenStatus,omitempty" xml:"ListenStatus,omitempty"`
	// The name of the middleware, database, or web service.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The path of the middleware, database, or web service.
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The PID.
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The port of the middleware, database, or web service.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the parent process.
	Ppid *string `json:"Ppid,omitempty" xml:"Ppid,omitempty"`
	// The timestamp when the process starts. Unit: milliseconds.
	ProcessStarted *int64 `json:"ProcessStarted,omitempty" xml:"ProcessStarted,omitempty"`
	// The name of the user who runs the process.
	ProcessUser *string `json:"ProcessUser,omitempty" xml:"ProcessUser,omitempty"`
	// The version verification information about the middleware, database, or web service.
	Proof *string `json:"Proof,omitempty" xml:"Proof,omitempty"`
	// The version of the runtime environment.
	//
	// >  The value of this parameter can be the Java Development Kit (JDK) version of the runtime environment for a Java process.
	RuntimeEnvVersion *string `json:"RuntimeEnvVersion,omitempty" xml:"RuntimeEnvVersion,omitempty"`
	// The type of the middleware, database, or web service.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The UUID of the server on which the middleware, database, or web service is run.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The version of the middleware, database, or web service.
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
	// The web directory.
	WebPath *string `json:"WebPath,omitempty" xml:"WebPath,omitempty"`
}

func (s DescribePropertyScaDetailResponseBodyPropertys) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyScaDetailResponseBodyPropertys) GoString() string {
	return s.String()
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetBizType(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.BizType = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetBizTypeDispaly(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.BizTypeDispaly = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetCmdline(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.Cmdline = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetConfigPath(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.ConfigPath = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetContainerName(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.ContainerName = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetCreateTimestamp(v int64) *DescribePropertyScaDetailResponseBodyPropertys {
	s.CreateTimestamp = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetImageName(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.ImageName = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetInstanceId(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.InstanceId = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetInstanceName(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.InstanceName = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetInternetIp(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.InternetIp = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetIntranetIp(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.IntranetIp = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetIp(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.Ip = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetListenIp(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.ListenIp = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetListenProtocol(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.ListenProtocol = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetListenStatus(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.ListenStatus = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetName(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.Name = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetPath(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.Path = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetPid(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.Pid = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetPort(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.Port = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetPpid(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.Ppid = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetProcessStarted(v int64) *DescribePropertyScaDetailResponseBodyPropertys {
	s.ProcessStarted = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetProcessUser(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.ProcessUser = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetProof(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.Proof = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetRuntimeEnvVersion(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.RuntimeEnvVersion = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetType(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.Type = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetUuid(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.Uuid = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetVersion(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.Version = &v
	return s
}

func (s *DescribePropertyScaDetailResponseBodyPropertys) SetWebPath(v string) *DescribePropertyScaDetailResponseBodyPropertys {
	s.WebPath = &v
	return s
}

type DescribePropertyScaDetailResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyScaDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyScaDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyScaDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyScaDetailResponse) SetHeaders(v map[string]*string) *DescribePropertyScaDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyScaDetailResponse) SetStatusCode(v int32) *DescribePropertyScaDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyScaDetailResponse) SetBody(v *DescribePropertyScaDetailResponseBody) *DescribePropertyScaDetailResponse {
	s.Body = v
	return s
}

type DescribePropertyScaItemRequest struct {
	Biz         *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ForceFlush  *bool   `json:"ForceFlush,omitempty" xml:"ForceFlush,omitempty"`
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchInfo  *string `json:"SearchInfo,omitempty" xml:"SearchInfo,omitempty"`
	SearchItem  *string `json:"SearchItem,omitempty" xml:"SearchItem,omitempty"`
}

func (s DescribePropertyScaItemRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyScaItemRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyScaItemRequest) SetBiz(v string) *DescribePropertyScaItemRequest {
	s.Biz = &v
	return s
}

func (s *DescribePropertyScaItemRequest) SetCurrentPage(v int32) *DescribePropertyScaItemRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyScaItemRequest) SetForceFlush(v bool) *DescribePropertyScaItemRequest {
	s.ForceFlush = &v
	return s
}

func (s *DescribePropertyScaItemRequest) SetLang(v string) *DescribePropertyScaItemRequest {
	s.Lang = &v
	return s
}

func (s *DescribePropertyScaItemRequest) SetPageSize(v int32) *DescribePropertyScaItemRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyScaItemRequest) SetSearchInfo(v string) *DescribePropertyScaItemRequest {
	s.SearchInfo = &v
	return s
}

func (s *DescribePropertyScaItemRequest) SetSearchItem(v string) *DescribePropertyScaItemRequest {
	s.SearchItem = &v
	return s
}

type DescribePropertyScaItemResponseBody struct {
	PageInfo      *DescribePropertyScaItemResponseBodyPageInfo        `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	PropertyItems []*DescribePropertyScaItemResponseBodyPropertyItems `json:"PropertyItems,omitempty" xml:"PropertyItems,omitempty" type:"Repeated"`
	RequestId     *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertyScaItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyScaItemResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyScaItemResponseBody) SetPageInfo(v *DescribePropertyScaItemResponseBodyPageInfo) *DescribePropertyScaItemResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribePropertyScaItemResponseBody) SetPropertyItems(v []*DescribePropertyScaItemResponseBodyPropertyItems) *DescribePropertyScaItemResponseBody {
	s.PropertyItems = v
	return s
}

func (s *DescribePropertyScaItemResponseBody) SetRequestId(v string) *DescribePropertyScaItemResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertyScaItemResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePropertyScaItemResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyScaItemResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribePropertyScaItemResponseBodyPageInfo) SetCount(v int32) *DescribePropertyScaItemResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribePropertyScaItemResponseBodyPageInfo) SetCurrentPage(v int32) *DescribePropertyScaItemResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyScaItemResponseBodyPageInfo) SetPageSize(v int32) *DescribePropertyScaItemResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyScaItemResponseBodyPageInfo) SetTotalCount(v int32) *DescribePropertyScaItemResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribePropertyScaItemResponseBodyPropertyItems struct {
	BizType     *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	Count       *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	TypeDisplay *string `json:"TypeDisplay,omitempty" xml:"TypeDisplay,omitempty"`
}

func (s DescribePropertyScaItemResponseBodyPropertyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyScaItemResponseBodyPropertyItems) GoString() string {
	return s.String()
}

func (s *DescribePropertyScaItemResponseBodyPropertyItems) SetBizType(v string) *DescribePropertyScaItemResponseBodyPropertyItems {
	s.BizType = &v
	return s
}

func (s *DescribePropertyScaItemResponseBodyPropertyItems) SetCount(v int32) *DescribePropertyScaItemResponseBodyPropertyItems {
	s.Count = &v
	return s
}

func (s *DescribePropertyScaItemResponseBodyPropertyItems) SetName(v string) *DescribePropertyScaItemResponseBodyPropertyItems {
	s.Name = &v
	return s
}

func (s *DescribePropertyScaItemResponseBodyPropertyItems) SetTypeDisplay(v string) *DescribePropertyScaItemResponseBodyPropertyItems {
	s.TypeDisplay = &v
	return s
}

type DescribePropertyScaItemResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyScaItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyScaItemResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyScaItemResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyScaItemResponse) SetHeaders(v map[string]*string) *DescribePropertyScaItemResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyScaItemResponse) SetStatusCode(v int32) *DescribePropertyScaItemResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyScaItemResponse) SetBody(v *DescribePropertyScaItemResponseBody) *DescribePropertyScaItemResponse {
	s.Body = v
	return s
}

type DescribePropertyScheduleConfigRequest struct {
	// The type of the asset fingerprints to query. Valid values:
	//
	// *   **scheduler_port_period**: listening port
	// *   **scheduler_process_period**: running process
	// *   **scheduler_account_period**: account
	// *   **scheduler_software_period**: software
	// *   **scheduler_cron_period**: scheduled task
	// *   **scheduler_sca_period**: middleware
	// *   **scheduler_autorun_period**: startup item
	// *   **scheduler_lkm_period**: kernel module
	// *   **scheduler_sca_proxy_period**: website
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribePropertyScheduleConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyScheduleConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyScheduleConfigRequest) SetType(v string) *DescribePropertyScheduleConfigRequest {
	s.Type = &v
	return s
}

type DescribePropertyScheduleConfigResponseBody struct {
	// The configuration time. Unit: hours.
	//
	// >  The value **0** indicates that asset fingerprint collection is disabled for this type of asset.
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertyScheduleConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyScheduleConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyScheduleConfigResponseBody) SetConfig(v string) *DescribePropertyScheduleConfigResponseBody {
	s.Config = &v
	return s
}

func (s *DescribePropertyScheduleConfigResponseBody) SetRequestId(v string) *DescribePropertyScheduleConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertyScheduleConfigResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyScheduleConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyScheduleConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyScheduleConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyScheduleConfigResponse) SetHeaders(v map[string]*string) *DescribePropertyScheduleConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyScheduleConfigResponse) SetStatusCode(v int32) *DescribePropertyScheduleConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyScheduleConfigResponse) SetBody(v *DescribePropertyScheduleConfigResponseBody) *DescribePropertyScheduleConfigResponse {
	s.Body = v
	return s
}

type DescribePropertySoftwareDetailRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether fuzzy search by software name is supported. If you want to use fuzzy search, set the parameter to 1. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.
	Extend *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	// The timestamp at which the software update ends. Unit: milliseconds.
	InstallTimeEnd *int64 `json:"InstallTimeEnd,omitempty" xml:"InstallTimeEnd,omitempty"`
	// The timestamp at which the software update starts. Unit: milliseconds.
	InstallTimeStart *int64 `json:"InstallTimeStart,omitempty" xml:"InstallTimeStart,omitempty"`
	// The name of the software.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The installation path of the software.
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The name or IP address of the server.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The version of the software.
	SoftwareVersion *string `json:"SoftwareVersion,omitempty" xml:"SoftwareVersion,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribePropertySoftwareDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertySoftwareDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertySoftwareDetailRequest) SetCurrentPage(v int32) *DescribePropertySoftwareDetailRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertySoftwareDetailRequest) SetExtend(v string) *DescribePropertySoftwareDetailRequest {
	s.Extend = &v
	return s
}

func (s *DescribePropertySoftwareDetailRequest) SetInstallTimeEnd(v int64) *DescribePropertySoftwareDetailRequest {
	s.InstallTimeEnd = &v
	return s
}

func (s *DescribePropertySoftwareDetailRequest) SetInstallTimeStart(v int64) *DescribePropertySoftwareDetailRequest {
	s.InstallTimeStart = &v
	return s
}

func (s *DescribePropertySoftwareDetailRequest) SetName(v string) *DescribePropertySoftwareDetailRequest {
	s.Name = &v
	return s
}

func (s *DescribePropertySoftwareDetailRequest) SetPageSize(v int32) *DescribePropertySoftwareDetailRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePropertySoftwareDetailRequest) SetPath(v string) *DescribePropertySoftwareDetailRequest {
	s.Path = &v
	return s
}

func (s *DescribePropertySoftwareDetailRequest) SetRemark(v string) *DescribePropertySoftwareDetailRequest {
	s.Remark = &v
	return s
}

func (s *DescribePropertySoftwareDetailRequest) SetSoftwareVersion(v string) *DescribePropertySoftwareDetailRequest {
	s.SoftwareVersion = &v
	return s
}

func (s *DescribePropertySoftwareDetailRequest) SetUuid(v string) *DescribePropertySoftwareDetailRequest {
	s.Uuid = &v
	return s
}

type DescribePropertySoftwareDetailResponseBody struct {
	// The pagination information.
	PageInfo *DescribePropertySoftwareDetailResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The details of the software asset.
	Propertys []*DescribePropertySoftwareDetailResponseBodyPropertys `json:"Propertys,omitempty" xml:"Propertys,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertySoftwareDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertySoftwareDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertySoftwareDetailResponseBody) SetPageInfo(v *DescribePropertySoftwareDetailResponseBodyPageInfo) *DescribePropertySoftwareDetailResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBody) SetPropertys(v []*DescribePropertySoftwareDetailResponseBodyPropertys) *DescribePropertySoftwareDetailResponseBody {
	s.Propertys = v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBody) SetRequestId(v string) *DescribePropertySoftwareDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertySoftwareDetailResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePropertySoftwareDetailResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertySoftwareDetailResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribePropertySoftwareDetailResponseBodyPageInfo) SetCount(v int32) *DescribePropertySoftwareDetailResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPageInfo) SetCurrentPage(v int32) *DescribePropertySoftwareDetailResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPageInfo) SetPageSize(v int32) *DescribePropertySoftwareDetailResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPageInfo) SetTotalCount(v int32) *DescribePropertySoftwareDetailResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribePropertySoftwareDetailResponseBodyPropertys struct {
	// The timestamp at which the last asset fingerprint collection is performed. Unit: milliseconds.
	CreateTimestamp *int64 `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	// The time at which the software is installed.
	InstallTime *string `json:"InstallTime,omitempty" xml:"InstallTime,omitempty"`
	// The timestamp at which the software is installed. Unit: milliseconds.
	InstallTimeDt *int64 `json:"InstallTimeDt,omitempty" xml:"InstallTimeDt,omitempty"`
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The IP addresses of the server.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The name of the software.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The installation path of the software.
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The version of the software.
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribePropertySoftwareDetailResponseBodyPropertys) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertySoftwareDetailResponseBodyPropertys) GoString() string {
	return s.String()
}

func (s *DescribePropertySoftwareDetailResponseBodyPropertys) SetCreateTimestamp(v int64) *DescribePropertySoftwareDetailResponseBodyPropertys {
	s.CreateTimestamp = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPropertys) SetInstallTime(v string) *DescribePropertySoftwareDetailResponseBodyPropertys {
	s.InstallTime = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPropertys) SetInstallTimeDt(v int64) *DescribePropertySoftwareDetailResponseBodyPropertys {
	s.InstallTimeDt = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPropertys) SetInstanceId(v string) *DescribePropertySoftwareDetailResponseBodyPropertys {
	s.InstanceId = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPropertys) SetInstanceName(v string) *DescribePropertySoftwareDetailResponseBodyPropertys {
	s.InstanceName = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPropertys) SetInternetIp(v string) *DescribePropertySoftwareDetailResponseBodyPropertys {
	s.InternetIp = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPropertys) SetIntranetIp(v string) *DescribePropertySoftwareDetailResponseBodyPropertys {
	s.IntranetIp = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPropertys) SetIp(v string) *DescribePropertySoftwareDetailResponseBodyPropertys {
	s.Ip = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPropertys) SetName(v string) *DescribePropertySoftwareDetailResponseBodyPropertys {
	s.Name = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPropertys) SetPath(v string) *DescribePropertySoftwareDetailResponseBodyPropertys {
	s.Path = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPropertys) SetUuid(v string) *DescribePropertySoftwareDetailResponseBodyPropertys {
	s.Uuid = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponseBodyPropertys) SetVersion(v string) *DescribePropertySoftwareDetailResponseBodyPropertys {
	s.Version = &v
	return s
}

type DescribePropertySoftwareDetailResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertySoftwareDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertySoftwareDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertySoftwareDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertySoftwareDetailResponse) SetHeaders(v map[string]*string) *DescribePropertySoftwareDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertySoftwareDetailResponse) SetStatusCode(v int32) *DescribePropertySoftwareDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertySoftwareDetailResponse) SetBody(v *DescribePropertySoftwareDetailResponseBody) *DescribePropertySoftwareDetailResponse {
	s.Body = v
	return s
}

type DescribePropertySoftwareItemRequest struct {
	// The number of the page to return.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether to forcefully refresh the data that you want to query.
	ForceFlush *bool `json:"ForceFlush,omitempty" xml:"ForceFlush,omitempty"`
	// The name of the software that you want to query.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribePropertySoftwareItemRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertySoftwareItemRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertySoftwareItemRequest) SetCurrentPage(v int32) *DescribePropertySoftwareItemRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertySoftwareItemRequest) SetForceFlush(v bool) *DescribePropertySoftwareItemRequest {
	s.ForceFlush = &v
	return s
}

func (s *DescribePropertySoftwareItemRequest) SetName(v string) *DescribePropertySoftwareItemRequest {
	s.Name = &v
	return s
}

func (s *DescribePropertySoftwareItemRequest) SetPageSize(v int32) *DescribePropertySoftwareItemRequest {
	s.PageSize = &v
	return s
}

type DescribePropertySoftwareItemResponseBody struct {
	// The pagination information.
	PageInfo *DescribePropertySoftwareItemResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// An array that consists of the software assets returned.
	PropertyItems []*DescribePropertySoftwareItemResponseBodyPropertyItems `json:"PropertyItems,omitempty" xml:"PropertyItems,omitempty" type:"Repeated"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertySoftwareItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertySoftwareItemResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertySoftwareItemResponseBody) SetPageInfo(v *DescribePropertySoftwareItemResponseBodyPageInfo) *DescribePropertySoftwareItemResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribePropertySoftwareItemResponseBody) SetPropertyItems(v []*DescribePropertySoftwareItemResponseBodyPropertyItems) *DescribePropertySoftwareItemResponseBody {
	s.PropertyItems = v
	return s
}

func (s *DescribePropertySoftwareItemResponseBody) SetRequestId(v string) *DescribePropertySoftwareItemResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertySoftwareItemResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePropertySoftwareItemResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertySoftwareItemResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribePropertySoftwareItemResponseBodyPageInfo) SetCount(v int32) *DescribePropertySoftwareItemResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribePropertySoftwareItemResponseBodyPageInfo) SetCurrentPage(v int32) *DescribePropertySoftwareItemResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertySoftwareItemResponseBodyPageInfo) SetPageSize(v int32) *DescribePropertySoftwareItemResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribePropertySoftwareItemResponseBodyPageInfo) SetTotalCount(v int32) *DescribePropertySoftwareItemResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribePropertySoftwareItemResponseBodyPropertyItems struct {
	// The number of servers on which the software is installed.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the software.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribePropertySoftwareItemResponseBodyPropertyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertySoftwareItemResponseBodyPropertyItems) GoString() string {
	return s.String()
}

func (s *DescribePropertySoftwareItemResponseBodyPropertyItems) SetCount(v int32) *DescribePropertySoftwareItemResponseBodyPropertyItems {
	s.Count = &v
	return s
}

func (s *DescribePropertySoftwareItemResponseBodyPropertyItems) SetName(v string) *DescribePropertySoftwareItemResponseBodyPropertyItems {
	s.Name = &v
	return s
}

type DescribePropertySoftwareItemResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertySoftwareItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertySoftwareItemResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertySoftwareItemResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertySoftwareItemResponse) SetHeaders(v map[string]*string) *DescribePropertySoftwareItemResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertySoftwareItemResponse) SetStatusCode(v int32) *DescribePropertySoftwareItemResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertySoftwareItemResponse) SetBody(v *DescribePropertySoftwareItemResponseBody) *DescribePropertySoftwareItemResponse {
	s.Body = v
	return s
}

type DescribePropertyTypeScaItemRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribePropertyTypeScaItemRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyTypeScaItemRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyTypeScaItemRequest) SetCurrentPage(v int32) *DescribePropertyTypeScaItemRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyTypeScaItemRequest) SetLang(v string) *DescribePropertyTypeScaItemRequest {
	s.Lang = &v
	return s
}

func (s *DescribePropertyTypeScaItemRequest) SetPageSize(v int32) *DescribePropertyTypeScaItemRequest {
	s.PageSize = &v
	return s
}

type DescribePropertyTypeScaItemResponseBody struct {
	PageInfo          *DescribePropertyTypeScaItemResponseBodyPageInfo            `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	PropertyTypeItems []*DescribePropertyTypeScaItemResponseBodyPropertyTypeItems `json:"PropertyTypeItems,omitempty" xml:"PropertyTypeItems,omitempty" type:"Repeated"`
	RequestId         *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertyTypeScaItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyTypeScaItemResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyTypeScaItemResponseBody) SetPageInfo(v *DescribePropertyTypeScaItemResponseBodyPageInfo) *DescribePropertyTypeScaItemResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribePropertyTypeScaItemResponseBody) SetPropertyTypeItems(v []*DescribePropertyTypeScaItemResponseBodyPropertyTypeItems) *DescribePropertyTypeScaItemResponseBody {
	s.PropertyTypeItems = v
	return s
}

func (s *DescribePropertyTypeScaItemResponseBody) SetRequestId(v string) *DescribePropertyTypeScaItemResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertyTypeScaItemResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePropertyTypeScaItemResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyTypeScaItemResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribePropertyTypeScaItemResponseBodyPageInfo) SetCount(v int32) *DescribePropertyTypeScaItemResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribePropertyTypeScaItemResponseBodyPageInfo) SetCurrentPage(v int32) *DescribePropertyTypeScaItemResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyTypeScaItemResponseBodyPageInfo) SetPageSize(v int32) *DescribePropertyTypeScaItemResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyTypeScaItemResponseBodyPageInfo) SetTotalCount(v int32) *DescribePropertyTypeScaItemResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribePropertyTypeScaItemResponseBodyPropertyTypeItems struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribePropertyTypeScaItemResponseBodyPropertyTypeItems) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyTypeScaItemResponseBodyPropertyTypeItems) GoString() string {
	return s.String()
}

func (s *DescribePropertyTypeScaItemResponseBodyPropertyTypeItems) SetName(v string) *DescribePropertyTypeScaItemResponseBodyPropertyTypeItems {
	s.Name = &v
	return s
}

func (s *DescribePropertyTypeScaItemResponseBodyPropertyTypeItems) SetType(v string) *DescribePropertyTypeScaItemResponseBodyPropertyTypeItems {
	s.Type = &v
	return s
}

type DescribePropertyTypeScaItemResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyTypeScaItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyTypeScaItemResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyTypeScaItemResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyTypeScaItemResponse) SetHeaders(v map[string]*string) *DescribePropertyTypeScaItemResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyTypeScaItemResponse) SetStatusCode(v int32) *DescribePropertyTypeScaItemResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyTypeScaItemResponse) SetBody(v *DescribePropertyTypeScaItemResponseBody) *DescribePropertyTypeScaItemResponse {
	s.Body = v
	return s
}

type DescribePropertyUsageNewestRequest struct {
	// The type of the accounts.
	//
	// Valid values:
	//
	// *   user
	// *   system
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribePropertyUsageNewestRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUsageNewestRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyUsageNewestRequest) SetType(v string) *DescribePropertyUsageNewestRequest {
	s.Type = &v
	return s
}

type DescribePropertyUsageNewestResponseBody struct {
	// The number of accounts.
	ItemCount *int32 `json:"ItemCount,omitempty" xml:"ItemCount,omitempty"`
	// An array that consists of the accounts.
	NewestStatisticItems []*DescribePropertyUsageNewestResponseBodyNewestStatisticItems `json:"NewestStatisticItems,omitempty" xml:"NewestStatisticItems,omitempty" type:"Repeated"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The type of the accounts that are created on the server. The value is fixed as user, which indicates user accounts.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribePropertyUsageNewestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUsageNewestResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyUsageNewestResponseBody) SetItemCount(v int32) *DescribePropertyUsageNewestResponseBody {
	s.ItemCount = &v
	return s
}

func (s *DescribePropertyUsageNewestResponseBody) SetNewestStatisticItems(v []*DescribePropertyUsageNewestResponseBodyNewestStatisticItems) *DescribePropertyUsageNewestResponseBody {
	s.NewestStatisticItems = v
	return s
}

func (s *DescribePropertyUsageNewestResponseBody) SetRequestId(v string) *DescribePropertyUsageNewestResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePropertyUsageNewestResponseBody) SetType(v string) *DescribePropertyUsageNewestResponseBody {
	s.Type = &v
	return s
}

type DescribePropertyUsageNewestResponseBodyNewestStatisticItems struct {
	// The time when the account was created.
	Create *int64 `json:"Create,omitempty" xml:"Create,omitempty"`
	// The username of the account.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribePropertyUsageNewestResponseBodyNewestStatisticItems) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUsageNewestResponseBodyNewestStatisticItems) GoString() string {
	return s.String()
}

func (s *DescribePropertyUsageNewestResponseBodyNewestStatisticItems) SetCreate(v int64) *DescribePropertyUsageNewestResponseBodyNewestStatisticItems {
	s.Create = &v
	return s
}

func (s *DescribePropertyUsageNewestResponseBodyNewestStatisticItems) SetName(v string) *DescribePropertyUsageNewestResponseBodyNewestStatisticItems {
	s.Name = &v
	return s
}

type DescribePropertyUsageNewestResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyUsageNewestResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyUsageNewestResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUsageNewestResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyUsageNewestResponse) SetHeaders(v map[string]*string) *DescribePropertyUsageNewestResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyUsageNewestResponse) SetStatusCode(v int32) *DescribePropertyUsageNewestResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyUsageNewestResponse) SetBody(v *DescribePropertyUsageNewestResponseBody) *DescribePropertyUsageNewestResponse {
	s.Body = v
	return s
}

type DescribePropertyUserDetailRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether the fuzzy search by account name is supported. If you want to use fuzzy search, set the parameter to **1**. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.
	Extend *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	// Specifies whether the account has root permissions. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	IsRoot *string `json:"IsRoot,omitempty" xml:"IsRoot,omitempty"`
	// The timestamp of the last logoff from the account. Unit: milliseconds.
	LastLoginTimeEnd *int64 `json:"LastLoginTimeEnd,omitempty" xml:"LastLoginTimeEnd,omitempty"`
	// The timestamp of the last logon to the account. Unit: milliseconds.
	LastLoginTimeStart *int64 `json:"LastLoginTimeStart,omitempty" xml:"LastLoginTimeStart,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The name or IP address of the server.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The name of the account to which the server belongs.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribePropertyUserDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUserDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyUserDetailRequest) SetCurrentPage(v int32) *DescribePropertyUserDetailRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyUserDetailRequest) SetExtend(v string) *DescribePropertyUserDetailRequest {
	s.Extend = &v
	return s
}

func (s *DescribePropertyUserDetailRequest) SetIsRoot(v string) *DescribePropertyUserDetailRequest {
	s.IsRoot = &v
	return s
}

func (s *DescribePropertyUserDetailRequest) SetLastLoginTimeEnd(v int64) *DescribePropertyUserDetailRequest {
	s.LastLoginTimeEnd = &v
	return s
}

func (s *DescribePropertyUserDetailRequest) SetLastLoginTimeStart(v int64) *DescribePropertyUserDetailRequest {
	s.LastLoginTimeStart = &v
	return s
}

func (s *DescribePropertyUserDetailRequest) SetPageSize(v int32) *DescribePropertyUserDetailRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyUserDetailRequest) SetRemark(v string) *DescribePropertyUserDetailRequest {
	s.Remark = &v
	return s
}

func (s *DescribePropertyUserDetailRequest) SetUser(v string) *DescribePropertyUserDetailRequest {
	s.User = &v
	return s
}

func (s *DescribePropertyUserDetailRequest) SetUuid(v string) *DescribePropertyUserDetailRequest {
	s.Uuid = &v
	return s
}

type DescribePropertyUserDetailResponseBody struct {
	// The pagination information.
	PageInfo *DescribePropertyUserDetailResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The details of asset fingerprints for the account.
	Propertys []*DescribePropertyUserDetailResponseBodyPropertys `json:"Propertys,omitempty" xml:"Propertys,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertyUserDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUserDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyUserDetailResponseBody) SetPageInfo(v *DescribePropertyUserDetailResponseBodyPageInfo) *DescribePropertyUserDetailResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribePropertyUserDetailResponseBody) SetPropertys(v []*DescribePropertyUserDetailResponseBodyPropertys) *DescribePropertyUserDetailResponseBody {
	s.Propertys = v
	return s
}

func (s *DescribePropertyUserDetailResponseBody) SetRequestId(v string) *DescribePropertyUserDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertyUserDetailResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePropertyUserDetailResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUserDetailResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribePropertyUserDetailResponseBodyPageInfo) SetCount(v int32) *DescribePropertyUserDetailResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPageInfo) SetCurrentPage(v int32) *DescribePropertyUserDetailResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPageInfo) SetPageSize(v int32) *DescribePropertyUserDetailResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPageInfo) SetTotalCount(v int32) *DescribePropertyUserDetailResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribePropertyUserDetailResponseBodyPropertys struct {
	// The date on which the account expires.
	AccountsExpirationDate *string `json:"AccountsExpirationDate,omitempty" xml:"AccountsExpirationDate,omitempty"`
	// The timestamp at which the last asset fingerprint collection is performed. Unit: milliseconds.
	CreateTimestamp *int64 `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	// The details of the user groups to which the account belongs.
	GroupNames []*string `json:"GroupNames,omitempty" xml:"GroupNames,omitempty" type:"Repeated"`
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The IP addresses of the server.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// Indicates whether the account is an interactive logon account. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	IsCouldLogin *int32 `json:"IsCouldLogin,omitempty" xml:"IsCouldLogin,omitempty"`
	// Indicates whether the password expires. Valid values:
	//
	// *   **0**: yes
	// *   **1**: no
	IsPasswdExpired *int32 `json:"IsPasswdExpired,omitempty" xml:"IsPasswdExpired,omitempty"`
	// Indicates whether the password is locked. Valid values:
	//
	// *   **0**: yes
	// *   **1**: no
	IsPasswdLocked *int32 `json:"IsPasswdLocked,omitempty" xml:"IsPasswdLocked,omitempty"`
	// Indicates whether the account has root permissions. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	IsRoot *string `json:"IsRoot,omitempty" xml:"IsRoot,omitempty"`
	// Indicates whether the account is a sudo account. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	IsSudoer *int32 `json:"IsSudoer,omitempty" xml:"IsSudoer,omitempty"`
	// Indicates whether the account expires. Valid values:
	//
	// *   **0**: yes
	// *   **1**: no
	IsUserExpired *int32 `json:"IsUserExpired,omitempty" xml:"IsUserExpired,omitempty"`
	// The source IP address of the last logon to the account.
	LastLoginIp *string `json:"LastLoginIp,omitempty" xml:"LastLoginIp,omitempty"`
	// The last logon time of the account.
	LastLoginTime *string `json:"LastLoginTime,omitempty" xml:"LastLoginTime,omitempty"`
	// The timestamp of the last logon to the account. Unit: milliseconds.
	LastLoginTimeDt *int64 `json:"LastLoginTimeDt,omitempty" xml:"LastLoginTimeDt,omitempty"`
	// The timestamp of the last logon to the account. Unit: milliseconds.
	LastLoginTimestamp *int64 `json:"LastLoginTimestamp,omitempty" xml:"LastLoginTimestamp,omitempty"`
	// The date on which the password of the account expires.
	PasswordExpirationDate *string `json:"PasswordExpirationDate,omitempty" xml:"PasswordExpirationDate,omitempty"`
	// This parameter is deprecated. You can ignore it.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the account.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribePropertyUserDetailResponseBodyPropertys) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUserDetailResponseBodyPropertys) GoString() string {
	return s.String()
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetAccountsExpirationDate(v string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.AccountsExpirationDate = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetCreateTimestamp(v int64) *DescribePropertyUserDetailResponseBodyPropertys {
	s.CreateTimestamp = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetGroupNames(v []*string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.GroupNames = v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetInstanceId(v string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.InstanceId = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetInstanceName(v string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.InstanceName = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetInternetIp(v string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.InternetIp = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetIntranetIp(v string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.IntranetIp = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetIp(v string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.Ip = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetIsCouldLogin(v int32) *DescribePropertyUserDetailResponseBodyPropertys {
	s.IsCouldLogin = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetIsPasswdExpired(v int32) *DescribePropertyUserDetailResponseBodyPropertys {
	s.IsPasswdExpired = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetIsPasswdLocked(v int32) *DescribePropertyUserDetailResponseBodyPropertys {
	s.IsPasswdLocked = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetIsRoot(v string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.IsRoot = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetIsSudoer(v int32) *DescribePropertyUserDetailResponseBodyPropertys {
	s.IsSudoer = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetIsUserExpired(v int32) *DescribePropertyUserDetailResponseBodyPropertys {
	s.IsUserExpired = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetLastLoginIp(v string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.LastLoginIp = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetLastLoginTime(v string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.LastLoginTime = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetLastLoginTimeDt(v int64) *DescribePropertyUserDetailResponseBodyPropertys {
	s.LastLoginTimeDt = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetLastLoginTimestamp(v int64) *DescribePropertyUserDetailResponseBodyPropertys {
	s.LastLoginTimestamp = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetPasswordExpirationDate(v string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.PasswordExpirationDate = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetStatus(v string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.Status = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetUser(v string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.User = &v
	return s
}

func (s *DescribePropertyUserDetailResponseBodyPropertys) SetUuid(v string) *DescribePropertyUserDetailResponseBodyPropertys {
	s.Uuid = &v
	return s
}

type DescribePropertyUserDetailResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyUserDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyUserDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUserDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyUserDetailResponse) SetHeaders(v map[string]*string) *DescribePropertyUserDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyUserDetailResponse) SetStatusCode(v int32) *DescribePropertyUserDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyUserDetailResponse) SetBody(v *DescribePropertyUserDetailResponseBody) *DescribePropertyUserDetailResponse {
	s.Body = v
	return s
}

type DescribePropertyUserItemRequest struct {
	// The number of the page to return.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether to forcefully refresh the data that you want to query. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	ForceFlush *bool `json:"ForceFlush,omitempty" xml:"ForceFlush,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The information about the account.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribePropertyUserItemRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUserItemRequest) GoString() string {
	return s.String()
}

func (s *DescribePropertyUserItemRequest) SetCurrentPage(v int32) *DescribePropertyUserItemRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyUserItemRequest) SetForceFlush(v bool) *DescribePropertyUserItemRequest {
	s.ForceFlush = &v
	return s
}

func (s *DescribePropertyUserItemRequest) SetPageSize(v int32) *DescribePropertyUserItemRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyUserItemRequest) SetUser(v string) *DescribePropertyUserItemRequest {
	s.User = &v
	return s
}

type DescribePropertyUserItemResponseBody struct {
	// The pagination information.
	PageInfo *DescribePropertyUserItemResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// An array that consists of the account information returned.
	PropertyItems []*DescribePropertyUserItemResponseBodyPropertyItems `json:"PropertyItems,omitempty" xml:"PropertyItems,omitempty" type:"Repeated"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePropertyUserItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUserItemResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePropertyUserItemResponseBody) SetPageInfo(v *DescribePropertyUserItemResponseBodyPageInfo) *DescribePropertyUserItemResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribePropertyUserItemResponseBody) SetPropertyItems(v []*DescribePropertyUserItemResponseBodyPropertyItems) *DescribePropertyUserItemResponseBody {
	s.PropertyItems = v
	return s
}

func (s *DescribePropertyUserItemResponseBody) SetRequestId(v string) *DescribePropertyUserItemResponseBody {
	s.RequestId = &v
	return s
}

type DescribePropertyUserItemResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePropertyUserItemResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUserItemResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribePropertyUserItemResponseBodyPageInfo) SetCount(v int32) *DescribePropertyUserItemResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribePropertyUserItemResponseBodyPageInfo) SetCurrentPage(v int32) *DescribePropertyUserItemResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribePropertyUserItemResponseBodyPageInfo) SetPageSize(v int32) *DescribePropertyUserItemResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribePropertyUserItemResponseBodyPageInfo) SetTotalCount(v int32) *DescribePropertyUserItemResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribePropertyUserItemResponseBodyPropertyItems struct {
	// The number of servers that belong to the account.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the account.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribePropertyUserItemResponseBodyPropertyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUserItemResponseBodyPropertyItems) GoString() string {
	return s.String()
}

func (s *DescribePropertyUserItemResponseBodyPropertyItems) SetCount(v int32) *DescribePropertyUserItemResponseBodyPropertyItems {
	s.Count = &v
	return s
}

func (s *DescribePropertyUserItemResponseBodyPropertyItems) SetUser(v string) *DescribePropertyUserItemResponseBodyPropertyItems {
	s.User = &v
	return s
}

type DescribePropertyUserItemResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePropertyUserItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePropertyUserItemResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePropertyUserItemResponse) GoString() string {
	return s.String()
}

func (s *DescribePropertyUserItemResponse) SetHeaders(v map[string]*string) *DescribePropertyUserItemResponse {
	s.Headers = v
	return s
}

func (s *DescribePropertyUserItemResponse) SetStatusCode(v int32) *DescribePropertyUserItemResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePropertyUserItemResponse) SetBody(v *DescribePropertyUserItemResponseBody) *DescribePropertyUserItemResponse {
	s.Body = v
	return s
}

type DescribeQuaraFileDownloadInfoRequest struct {
	From        *string `json:"From,omitempty" xml:"From,omitempty"`
	QuaraFileId *int32  `json:"QuaraFileId,omitempty" xml:"QuaraFileId,omitempty"`
}

func (s DescribeQuaraFileDownloadInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeQuaraFileDownloadInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeQuaraFileDownloadInfoRequest) SetFrom(v string) *DescribeQuaraFileDownloadInfoRequest {
	s.From = &v
	return s
}

func (s *DescribeQuaraFileDownloadInfoRequest) SetQuaraFileId(v int32) *DescribeQuaraFileDownloadInfoRequest {
	s.QuaraFileId = &v
	return s
}

type DescribeQuaraFileDownloadInfoResponseBody struct {
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	Md5         *string `json:"Md5,omitempty" xml:"Md5,omitempty"`
	Path        *string `json:"Path,omitempty" xml:"Path,omitempty"`
	QuaraFileId *int32  `json:"QuaraFileId,omitempty" xml:"QuaraFileId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Tag         *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	Uuid        *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeQuaraFileDownloadInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeQuaraFileDownloadInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeQuaraFileDownloadInfoResponseBody) SetDownloadUrl(v string) *DescribeQuaraFileDownloadInfoResponseBody {
	s.DownloadUrl = &v
	return s
}

func (s *DescribeQuaraFileDownloadInfoResponseBody) SetMd5(v string) *DescribeQuaraFileDownloadInfoResponseBody {
	s.Md5 = &v
	return s
}

func (s *DescribeQuaraFileDownloadInfoResponseBody) SetPath(v string) *DescribeQuaraFileDownloadInfoResponseBody {
	s.Path = &v
	return s
}

func (s *DescribeQuaraFileDownloadInfoResponseBody) SetQuaraFileId(v int32) *DescribeQuaraFileDownloadInfoResponseBody {
	s.QuaraFileId = &v
	return s
}

func (s *DescribeQuaraFileDownloadInfoResponseBody) SetRequestId(v string) *DescribeQuaraFileDownloadInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeQuaraFileDownloadInfoResponseBody) SetTag(v string) *DescribeQuaraFileDownloadInfoResponseBody {
	s.Tag = &v
	return s
}

func (s *DescribeQuaraFileDownloadInfoResponseBody) SetUuid(v string) *DescribeQuaraFileDownloadInfoResponseBody {
	s.Uuid = &v
	return s
}

type DescribeQuaraFileDownloadInfoResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeQuaraFileDownloadInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeQuaraFileDownloadInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeQuaraFileDownloadInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeQuaraFileDownloadInfoResponse) SetHeaders(v map[string]*string) *DescribeQuaraFileDownloadInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeQuaraFileDownloadInfoResponse) SetStatusCode(v int32) *DescribeQuaraFileDownloadInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeQuaraFileDownloadInfoResponse) SetBody(v *DescribeQuaraFileDownloadInfoResponseBody) *DescribeQuaraFileDownloadInfoResponse {
	s.Body = v
	return s
}

type DescribeRestoreJobsRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The unique identifier of the server on which the restoration task is run. For example, you can use the IP address or the name of the server.
	MachineRemark *string `json:"MachineRemark,omitempty" xml:"MachineRemark,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The status of the restoration task. Valid values:
	//
	// *   **RUNNING**: The task is running.
	// *   **COMPLETE**: The task is complete.
	// *   **FAILED**: The task fails.
	// *   **CANCELING**: The task is being canceled.
	// *   **CANCELED**: The task is canceled.
	// *   **PARTIAL_COMPLETE**: The task is partially successful.
	// *   **CREATED**: The task is created but is not run.
	// *   **EXPIRED**: The task is not updated.
	// *   **QUEUED**: The task is waiting to be run.
	// *   **CLIENT_DELETED**: The task fails because the anti-ransomware agent is uninstalled.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeRestoreJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRestoreJobsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRestoreJobsRequest) SetCurrentPage(v int32) *DescribeRestoreJobsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeRestoreJobsRequest) SetMachineRemark(v string) *DescribeRestoreJobsRequest {
	s.MachineRemark = &v
	return s
}

func (s *DescribeRestoreJobsRequest) SetPageSize(v int32) *DescribeRestoreJobsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRestoreJobsRequest) SetStatus(v string) *DescribeRestoreJobsRequest {
	s.Status = &v
	return s
}

type DescribeRestoreJobsResponseBody struct {
	// The pagination information.
	PageInfo *DescribeRestoreJobsResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of the restoration tasks.
	RestoreJobs []*DescribeRestoreJobsResponseBodyRestoreJobs `json:"RestoreJobs,omitempty" xml:"RestoreJobs,omitempty" type:"Repeated"`
}

func (s DescribeRestoreJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRestoreJobsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRestoreJobsResponseBody) SetPageInfo(v *DescribeRestoreJobsResponseBodyPageInfo) *DescribeRestoreJobsResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeRestoreJobsResponseBody) SetRequestId(v string) *DescribeRestoreJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRestoreJobsResponseBody) SetRestoreJobs(v []*DescribeRestoreJobsResponseBodyRestoreJobs) *DescribeRestoreJobsResponseBody {
	s.RestoreJobs = v
	return s
}

type DescribeRestoreJobsResponseBodyPageInfo struct {
	// The number of restoration tasks returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of restoration tasks returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeRestoreJobsResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeRestoreJobsResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeRestoreJobsResponseBodyPageInfo) SetCount(v int32) *DescribeRestoreJobsResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeRestoreJobsResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyPageInfo) SetPageSize(v int32) *DescribeRestoreJobsResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyPageInfo) SetTotalCount(v int32) *DescribeRestoreJobsResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeRestoreJobsResponseBodyRestoreJobs struct {
	// The size of backup data. Unit: bytes.
	ActualBytes *int64 `json:"ActualBytes,omitempty" xml:"ActualBytes,omitempty"`
	// The total size of data that is restored. Unit: bytes.
	BytesDone *int64 `json:"BytesDone,omitempty" xml:"BytesDone,omitempty"`
	// The total size of data that you want to restore. Unit: bytes.
	BytesTotal *int64 `json:"BytesTotal,omitempty" xml:"BytesTotal,omitempty"`
	// The ID of the anti-ransomware agent that is used to restore data.
	ClientId *string `json:"ClientId,omitempty" xml:"ClientId,omitempty"`
	// The timestamp when the restoration task is complete. Unit: milliseconds.
	CompleteTime *int64 `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	// The timestamp when the restoration task is created. Unit: milliseconds.
	CreatedTime *int64 `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The duration of the restoration task. Unit: seconds.
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The number of the restoration tasks on which errors occur.
	ErrorCount *int64 `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	// The name of the CSV file. The CSV file contains the files that fail to be restored.
	ErrorFile *string `json:"ErrorFile,omitempty" xml:"ErrorFile,omitempty"`
	// The URL to download the CSV file. The CSV file contains the files that fail to be restored.
	ErrorFileUrl *string `json:"ErrorFileUrl,omitempty" xml:"ErrorFileUrl,omitempty"`
	// The error code that is returned for the restoration task.
	ErrorType *string `json:"ErrorType,omitempty" xml:"ErrorType,omitempty"`
	// The timestamp when the in-progress restoration task is expected to be complete. Unit: seconds.
	Eta *int64 `json:"Eta,omitempty" xml:"Eta,omitempty"`
	// The directory excluded from the anti-ransomware policy. The value is the directory that you specify to skip protection when you create the anti-ransomware policy.
	Excludes *string `json:"Excludes,omitempty" xml:"Excludes,omitempty"`
	// The return value of the restoration task.
	ExitCode *string `json:"ExitCode,omitempty" xml:"ExitCode,omitempty"`
	// The time when the restoration task is created.
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The time when the restoration task is updated.
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// The included directory based on which the files to restore are located. The value is the directory that you specify for protection when you create the anti-ransomware policy
	Includes *string `json:"Includes,omitempty" xml:"Includes,omitempty"`
	// The ID of the server whose data you want to restore.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server whose data you want to restore.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server whose data you want to restore.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The internal IP address of the server whose data you want to restore.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The number of files that are backed up.
	ItemsDone *int64 `json:"ItemsDone,omitempty" xml:"ItemsDone,omitempty"`
	// The total number of files that you want to restore.
	ItemsTotal *int64 `json:"ItemsTotal,omitempty" xml:"ItemsTotal,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The progress of the restoration task in percentage.
	Percentage *int32 `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the restoration task.
	RestoreId *string `json:"RestoreId,omitempty" xml:"RestoreId,omitempty"`
	// The name of the restoration task.
	RestoreName *string `json:"RestoreName,omitempty" xml:"RestoreName,omitempty"`
	// The type of the file that is restored. Valid values:
	//
	// *   **ECS_FILE**: files on Elastic Compute Service (ECS) instances
	// *   **FILE**: files on servers in data centers
	RestoreType *string `json:"RestoreType,omitempty" xml:"RestoreType,omitempty"`
	// The hash value of the snapshot that stores backup data when the data is backed up.
	SnapshotHash *string `json:"SnapshotHash,omitempty" xml:"SnapshotHash,omitempty"`
	// The hash value ID of the snapshot that stores backup data when the data is backed up.
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The version of the backup data.
	SnapshotVersion *string `json:"SnapshotVersion,omitempty" xml:"SnapshotVersion,omitempty"`
	// The path to the source file that you want to restore.
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The ID of the anti-ransomware agent that is used to back up data.
	SourceClientId *string `json:"SourceClientId,omitempty" xml:"SourceClientId,omitempty"`
	// The speed of data restoration. Unit: byte/s.
	Speed *int64 `json:"Speed,omitempty" xml:"Speed,omitempty"`
	// The status of the restoration task. Valid values:
	//
	// *   **RUNNING**: The task is running.
	// *   **COMPLETE**: The task is complete.
	// *   **FAILED**: The task fails.
	// *   **CANCELING**: The task is being canceled.
	// *   **CANCELED**: The task is canceled.
	// *   **PARTIAL_COMPLETE**: The task is partially successful.
	// *   **CREATED**: The task is created but is not run.
	// *   **EXPIRED**: The task is not updated.
	// *   **QUEUED**: The task is waiting to be run.
	// *   **CLIENT_DELETED**: The task fails because the anti-ransomware agent is uninstalled.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The folder to which the backup data is restored. After you create the restoration task, the backup data is restored to the specified folder.
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The timestamp when the restoration task was last updated. Unit: milliseconds.
	UpdatedTime *int64 `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
	// The UUID of the server whose data you want to restore.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The ID of the backup vault in which the backup data is stored.
	VaultId *string `json:"VaultId,omitempty" xml:"VaultId,omitempty"`
}

func (s DescribeRestoreJobsResponseBodyRestoreJobs) String() string {
	return tea.Prettify(s)
}

func (s DescribeRestoreJobsResponseBodyRestoreJobs) GoString() string {
	return s.String()
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetActualBytes(v int64) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.ActualBytes = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetBytesDone(v int64) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.BytesDone = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetBytesTotal(v int64) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.BytesTotal = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetClientId(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.ClientId = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetCompleteTime(v int64) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.CompleteTime = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetCreatedTime(v int64) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.CreatedTime = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetDuration(v int64) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.Duration = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetErrorCount(v int64) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.ErrorCount = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetErrorFile(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.ErrorFile = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetErrorFileUrl(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.ErrorFileUrl = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetErrorType(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.ErrorType = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetEta(v int64) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.Eta = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetExcludes(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.Excludes = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetExitCode(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.ExitCode = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetGmtCreate(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.GmtCreate = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetGmtModified(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.GmtModified = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetIncludes(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.Includes = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetInstanceId(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.InstanceId = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetInstanceName(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.InstanceName = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetInternetIp(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.InternetIp = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetIntranetIp(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.IntranetIp = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetItemsDone(v int64) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.ItemsDone = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetItemsTotal(v int64) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.ItemsTotal = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetMessage(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.Message = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetPercentage(v int32) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.Percentage = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetRequestId(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.RequestId = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetRestoreId(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.RestoreId = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetRestoreName(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.RestoreName = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetRestoreType(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.RestoreType = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetSnapshotHash(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.SnapshotHash = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetSnapshotId(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.SnapshotId = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetSnapshotVersion(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.SnapshotVersion = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetSource(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.Source = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetSourceClientId(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.SourceClientId = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetSpeed(v int64) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.Speed = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetStatus(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.Status = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetTarget(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.Target = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetUpdatedTime(v int64) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.UpdatedTime = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetUuid(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.Uuid = &v
	return s
}

func (s *DescribeRestoreJobsResponseBodyRestoreJobs) SetVaultId(v string) *DescribeRestoreJobsResponseBodyRestoreJobs {
	s.VaultId = &v
	return s
}

type DescribeRestoreJobsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRestoreJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRestoreJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRestoreJobsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRestoreJobsResponse) SetHeaders(v map[string]*string) *DescribeRestoreJobsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRestoreJobsResponse) SetStatusCode(v int32) *DescribeRestoreJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRestoreJobsResponse) SetBody(v *DescribeRestoreJobsResponseBody) *DescribeRestoreJobsResponse {
	s.Body = v
	return s
}

type DescribeRestorePlansRequest struct {
	CurrentPage  *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeRestorePlansRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRestorePlansRequest) GoString() string {
	return s.String()
}

func (s *DescribeRestorePlansRequest) SetCurrentPage(v int32) *DescribeRestorePlansRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeRestorePlansRequest) SetInstanceName(v string) *DescribeRestorePlansRequest {
	s.InstanceName = &v
	return s
}

func (s *DescribeRestorePlansRequest) SetPageSize(v int32) *DescribeRestorePlansRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRestorePlansRequest) SetStatus(v string) *DescribeRestorePlansRequest {
	s.Status = &v
	return s
}

type DescribeRestorePlansResponseBody struct {
	PageInfo     *DescribeRestorePlansResponseBodyPageInfo       `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RestorePlans []*DescribeRestorePlansResponseBodyRestorePlans `json:"RestorePlans,omitempty" xml:"RestorePlans,omitempty" type:"Repeated"`
}

func (s DescribeRestorePlansResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRestorePlansResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRestorePlansResponseBody) SetPageInfo(v *DescribeRestorePlansResponseBodyPageInfo) *DescribeRestorePlansResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeRestorePlansResponseBody) SetRequestId(v string) *DescribeRestorePlansResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRestorePlansResponseBody) SetRestorePlans(v []*DescribeRestorePlansResponseBodyRestorePlans) *DescribeRestorePlansResponseBody {
	s.RestorePlans = v
	return s
}

type DescribeRestorePlansResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeRestorePlansResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeRestorePlansResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeRestorePlansResponseBodyPageInfo) SetCount(v int32) *DescribeRestorePlansResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeRestorePlansResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeRestorePlansResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeRestorePlansResponseBodyPageInfo) SetPageSize(v int32) *DescribeRestorePlansResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeRestorePlansResponseBodyPageInfo) SetTotalCount(v int32) *DescribeRestorePlansResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeRestorePlansResponseBodyRestorePlans struct {
	CreatedTime        *int64  `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	DatabaseName       *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	InstanceName       *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	PolicyId           *int64  `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	PolicyName         *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	RestorePoint       *int64  `json:"RestorePoint,omitempty" xml:"RestorePoint,omitempty"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TargetDatabaseName *string `json:"TargetDatabaseName,omitempty" xml:"TargetDatabaseName,omitempty"`
	TargetInstanceId   *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty"`
	TargetInstanceName *string `json:"TargetInstanceName,omitempty" xml:"TargetInstanceName,omitempty"`
	UpdatedTime        *int64  `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s DescribeRestorePlansResponseBodyRestorePlans) String() string {
	return tea.Prettify(s)
}

func (s DescribeRestorePlansResponseBodyRestorePlans) GoString() string {
	return s.String()
}

func (s *DescribeRestorePlansResponseBodyRestorePlans) SetCreatedTime(v int64) *DescribeRestorePlansResponseBodyRestorePlans {
	s.CreatedTime = &v
	return s
}

func (s *DescribeRestorePlansResponseBodyRestorePlans) SetDatabaseName(v string) *DescribeRestorePlansResponseBodyRestorePlans {
	s.DatabaseName = &v
	return s
}

func (s *DescribeRestorePlansResponseBodyRestorePlans) SetInstanceName(v string) *DescribeRestorePlansResponseBodyRestorePlans {
	s.InstanceName = &v
	return s
}

func (s *DescribeRestorePlansResponseBodyRestorePlans) SetPolicyId(v int64) *DescribeRestorePlansResponseBodyRestorePlans {
	s.PolicyId = &v
	return s
}

func (s *DescribeRestorePlansResponseBodyRestorePlans) SetPolicyName(v string) *DescribeRestorePlansResponseBodyRestorePlans {
	s.PolicyName = &v
	return s
}

func (s *DescribeRestorePlansResponseBodyRestorePlans) SetRestorePoint(v int64) *DescribeRestorePlansResponseBodyRestorePlans {
	s.RestorePoint = &v
	return s
}

func (s *DescribeRestorePlansResponseBodyRestorePlans) SetStatus(v string) *DescribeRestorePlansResponseBodyRestorePlans {
	s.Status = &v
	return s
}

func (s *DescribeRestorePlansResponseBodyRestorePlans) SetTargetDatabaseName(v string) *DescribeRestorePlansResponseBodyRestorePlans {
	s.TargetDatabaseName = &v
	return s
}

func (s *DescribeRestorePlansResponseBodyRestorePlans) SetTargetInstanceId(v string) *DescribeRestorePlansResponseBodyRestorePlans {
	s.TargetInstanceId = &v
	return s
}

func (s *DescribeRestorePlansResponseBodyRestorePlans) SetTargetInstanceName(v string) *DescribeRestorePlansResponseBodyRestorePlans {
	s.TargetInstanceName = &v
	return s
}

func (s *DescribeRestorePlansResponseBodyRestorePlans) SetUpdatedTime(v int64) *DescribeRestorePlansResponseBodyRestorePlans {
	s.UpdatedTime = &v
	return s
}

type DescribeRestorePlansResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRestorePlansResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRestorePlansResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRestorePlansResponse) GoString() string {
	return s.String()
}

func (s *DescribeRestorePlansResponse) SetHeaders(v map[string]*string) *DescribeRestorePlansResponse {
	s.Headers = v
	return s
}

func (s *DescribeRestorePlansResponse) SetStatusCode(v int32) *DescribeRestorePlansResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRestorePlansResponse) SetBody(v *DescribeRestorePlansResponseBody) *DescribeRestorePlansResponse {
	s.Body = v
	return s
}

type DescribeRiskCheckItemResultRequest struct {
	// The number of the page to return.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The ID of the check item.
	//
	// >  For more information about the IDs and details of the check items that can be used in configuration assessment, see [DescribeRiskCheckResult](~~DescribeRiskCheckResult~~).
	ItemId *int64 `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.
	//
	// >  We recommend that you do not leave this parameter empty.
	PageSize        *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerId *int64 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeRiskCheckItemResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckItemResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckItemResultRequest) SetCurrentPage(v int32) *DescribeRiskCheckItemResultRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeRiskCheckItemResultRequest) SetItemId(v int64) *DescribeRiskCheckItemResultRequest {
	s.ItemId = &v
	return s
}

func (s *DescribeRiskCheckItemResultRequest) SetLang(v string) *DescribeRiskCheckItemResultRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRiskCheckItemResultRequest) SetPageSize(v int32) *DescribeRiskCheckItemResultRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRiskCheckItemResultRequest) SetResourceOwnerId(v int64) *DescribeRiskCheckItemResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRiskCheckItemResultRequest) SetSourceIp(v string) *DescribeRiskCheckItemResultRequest {
	s.SourceIp = &v
	return s
}

type DescribeRiskCheckItemResultResponseBody struct {
	// The pagination information.
	PageContentResource *DescribeRiskCheckItemResultResponseBodyPageContentResource `json:"PageContentResource,omitempty" xml:"PageContentResource,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRiskCheckItemResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckItemResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckItemResultResponseBody) SetPageContentResource(v *DescribeRiskCheckItemResultResponseBodyPageContentResource) *DescribeRiskCheckItemResultResponseBody {
	s.PageContentResource = v
	return s
}

func (s *DescribeRiskCheckItemResultResponseBody) SetRequestId(v string) *DescribeRiskCheckItemResultResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRiskCheckItemResultResponseBodyPageContentResource struct {
	// The data of the affected assets on each page in a dynamic table.
	ContentResource map[string]interface{} `json:"ContentResource,omitempty" xml:"ContentResource,omitempty"`
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The total number of pages returned.
	PageCount *int32 `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	// The number of entries returned on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeRiskCheckItemResultResponseBodyPageContentResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckItemResultResponseBodyPageContentResource) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckItemResultResponseBodyPageContentResource) SetContentResource(v map[string]interface{}) *DescribeRiskCheckItemResultResponseBodyPageContentResource {
	s.ContentResource = v
	return s
}

func (s *DescribeRiskCheckItemResultResponseBodyPageContentResource) SetCount(v int32) *DescribeRiskCheckItemResultResponseBodyPageContentResource {
	s.Count = &v
	return s
}

func (s *DescribeRiskCheckItemResultResponseBodyPageContentResource) SetCurrentPage(v int32) *DescribeRiskCheckItemResultResponseBodyPageContentResource {
	s.CurrentPage = &v
	return s
}

func (s *DescribeRiskCheckItemResultResponseBodyPageContentResource) SetPageCount(v int32) *DescribeRiskCheckItemResultResponseBodyPageContentResource {
	s.PageCount = &v
	return s
}

func (s *DescribeRiskCheckItemResultResponseBodyPageContentResource) SetPageSize(v int32) *DescribeRiskCheckItemResultResponseBodyPageContentResource {
	s.PageSize = &v
	return s
}

func (s *DescribeRiskCheckItemResultResponseBodyPageContentResource) SetTotalCount(v int32) *DescribeRiskCheckItemResultResponseBodyPageContentResource {
	s.TotalCount = &v
	return s
}

type DescribeRiskCheckItemResultResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRiskCheckItemResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRiskCheckItemResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckItemResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckItemResultResponse) SetHeaders(v map[string]*string) *DescribeRiskCheckItemResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskCheckItemResultResponse) SetStatusCode(v int32) *DescribeRiskCheckItemResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskCheckItemResultResponse) SetBody(v *DescribeRiskCheckItemResultResponseBody) *DescribeRiskCheckItemResultResponse {
	s.Body = v
	return s
}

type DescribeRiskCheckResultRequest struct {
	// The type of the cloud service whose configuration assessment result you want to query. For more information about the description of the cloud service specified by this parameter, see the check item table in the "Response parameters" section of this topic.
	AssetType *string `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The type of the check item that you want to query. Valid values:
	//
	// *   **1**: identity authentication and permissions
	// *   **2**: network access control
	// *   **3**: log audit
	// *   **4**: data security
	// *   **5**: monitoring and alerting
	// *   **6**: basic security protection
	//
	// >  If you do not specify this parameter, all types of check items are queried by default.
	GroupId *int64    `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ItemIds []*string `json:"ItemIds,omitempty" xml:"ItemIds,omitempty" type:"Repeated"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The name of the check item. For more information about the description of the check item name, see the check item table in the "Response parameters" section of this topic.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Specifies whether the check item is supported by the cloud service. Valid values:
	//
	// *   **enabled**: The check item is supported by the cloud service.
	// *   **disabled**: The check item is not supported by the cloud service.
	QueryFlag       *string `json:"QueryFlag,omitempty" xml:"QueryFlag,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The risk level of the check item that you want to query. Valid values:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The status of the check result. Valid values:
	//
	// *   **pass**
	// *   **failed**
	// *   **running**
	// *   **waiting**
	// *   **ignored**
	// *   **falsePositive**
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeRiskCheckResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckResultRequest) SetAssetType(v string) *DescribeRiskCheckResultRequest {
	s.AssetType = &v
	return s
}

func (s *DescribeRiskCheckResultRequest) SetCurrentPage(v int32) *DescribeRiskCheckResultRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeRiskCheckResultRequest) SetGroupId(v int64) *DescribeRiskCheckResultRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeRiskCheckResultRequest) SetItemIds(v []*string) *DescribeRiskCheckResultRequest {
	s.ItemIds = v
	return s
}

func (s *DescribeRiskCheckResultRequest) SetLang(v string) *DescribeRiskCheckResultRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRiskCheckResultRequest) SetName(v string) *DescribeRiskCheckResultRequest {
	s.Name = &v
	return s
}

func (s *DescribeRiskCheckResultRequest) SetPageSize(v int32) *DescribeRiskCheckResultRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRiskCheckResultRequest) SetQueryFlag(v string) *DescribeRiskCheckResultRequest {
	s.QueryFlag = &v
	return s
}

func (s *DescribeRiskCheckResultRequest) SetResourceOwnerId(v int64) *DescribeRiskCheckResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRiskCheckResultRequest) SetRiskLevel(v string) *DescribeRiskCheckResultRequest {
	s.RiskLevel = &v
	return s
}

func (s *DescribeRiskCheckResultRequest) SetSourceIp(v string) *DescribeRiskCheckResultRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeRiskCheckResultRequest) SetStatus(v string) *DescribeRiskCheckResultRequest {
	s.Status = &v
	return s
}

type DescribeRiskCheckResultResponseBody struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// An array that consists of the check items.
	List []*DescribeRiskCheckResultResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The total number of pages returned.
	PageCount *int32 `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeRiskCheckResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckResultResponseBody) SetCount(v int32) *DescribeRiskCheckResultResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBody) SetCurrentPage(v int32) *DescribeRiskCheckResultResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBody) SetList(v []*DescribeRiskCheckResultResponseBodyList) *DescribeRiskCheckResultResponseBody {
	s.List = v
	return s
}

func (s *DescribeRiskCheckResultResponseBody) SetPageCount(v int32) *DescribeRiskCheckResultResponseBody {
	s.PageCount = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBody) SetPageSize(v int32) *DescribeRiskCheckResultResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBody) SetRequestId(v string) *DescribeRiskCheckResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBody) SetTotalCount(v int32) *DescribeRiskCheckResultResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeRiskCheckResultResponseBodyList struct {
	// The number of affected assets.
	AffectedCount *int32 `json:"AffectedCount,omitempty" xml:"AffectedCount,omitempty"`
	// The timestamp when the last check was performed. Unit: milliseconds.
	CheckTime *int64 `json:"CheckTime,omitempty" xml:"CheckTime,omitempty"`
	// The ID of the check item. For more information about the description of the check item ID, see the check item table in the "Response parameters" section of this topic.
	ItemId *int64 `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	// The time when the next check will be performed.
	RemainingTime *int32 `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	// Indicates whether the risks that are detected for the check item can be fixed. Valid values:
	//
	// *   **enabled**: yes
	// *   **disabled**: no
	RepairStatus *string `json:"RepairStatus,omitempty" xml:"RepairStatus,omitempty"`
	// The type of the affected assets.
	RiskAssertType *string `json:"RiskAssertType,omitempty" xml:"RiskAssertType,omitempty"`
	// An array that consists of the details about the check item.
	RiskItemResources []*DescribeRiskCheckResultResponseBodyListRiskItemResources `json:"RiskItemResources,omitempty" xml:"RiskItemResources,omitempty" type:"Repeated"`
	// The risk level of the check item. Valid values:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// The sequence number of the check result. The check items are sorted based on the sequence number.
	Sort *int32 `json:"Sort,omitempty" xml:"Sort,omitempty"`
	// Indicates whether the check item is supported by the cloud service. Valid values:
	//
	// *   **enabled**: The check item is supported by the cloud service.
	// *   **disable**: The check item is not supported by the cloud service.
	StartStatus *string `json:"StartStatus,omitempty" xml:"StartStatus,omitempty"`
	// The status of the check result. Valid values:
	//
	// *   **pass**
	// *   **failed**
	// *   **running**
	// *   **waiting**
	// *   **ignored**
	// *   **falsePositive**
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the check task.
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the check item.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The type of the check item. Valid values:
	//
	// *   Identity authentication and permissions
	// *   Network access control
	// *   Log audit
	// *   Data security
	// *   Monitoring and alerting
	// *   Basic security protection
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeRiskCheckResultResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckResultResponseBodyList) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckResultResponseBodyList) SetAffectedCount(v int32) *DescribeRiskCheckResultResponseBodyList {
	s.AffectedCount = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyList) SetCheckTime(v int64) *DescribeRiskCheckResultResponseBodyList {
	s.CheckTime = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyList) SetItemId(v int64) *DescribeRiskCheckResultResponseBodyList {
	s.ItemId = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyList) SetRemainingTime(v int32) *DescribeRiskCheckResultResponseBodyList {
	s.RemainingTime = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyList) SetRepairStatus(v string) *DescribeRiskCheckResultResponseBodyList {
	s.RepairStatus = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyList) SetRiskAssertType(v string) *DescribeRiskCheckResultResponseBodyList {
	s.RiskAssertType = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyList) SetRiskItemResources(v []*DescribeRiskCheckResultResponseBodyListRiskItemResources) *DescribeRiskCheckResultResponseBodyList {
	s.RiskItemResources = v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyList) SetRiskLevel(v string) *DescribeRiskCheckResultResponseBodyList {
	s.RiskLevel = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyList) SetSort(v int32) *DescribeRiskCheckResultResponseBodyList {
	s.Sort = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyList) SetStartStatus(v string) *DescribeRiskCheckResultResponseBodyList {
	s.StartStatus = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyList) SetStatus(v string) *DescribeRiskCheckResultResponseBodyList {
	s.Status = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyList) SetTaskId(v int64) *DescribeRiskCheckResultResponseBodyList {
	s.TaskId = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyList) SetTitle(v string) *DescribeRiskCheckResultResponseBodyList {
	s.Title = &v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyList) SetType(v string) *DescribeRiskCheckResultResponseBodyList {
	s.Type = &v
	return s
}

type DescribeRiskCheckResultResponseBodyListRiskItemResources struct {
	// The details about the check result.
	ContentResource map[string]interface{} `json:"ContentResource,omitempty" xml:"ContentResource,omitempty"`
	// The title in the details. Valid values:
	//
	// *   **bestPractice**: description
	// *   **influence**: risk
	// *   **suggestion**: solution
	// *   **helpResource**: reference
	ResourceName *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
}

func (s DescribeRiskCheckResultResponseBodyListRiskItemResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckResultResponseBodyListRiskItemResources) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckResultResponseBodyListRiskItemResources) SetContentResource(v map[string]interface{}) *DescribeRiskCheckResultResponseBodyListRiskItemResources {
	s.ContentResource = v
	return s
}

func (s *DescribeRiskCheckResultResponseBodyListRiskItemResources) SetResourceName(v string) *DescribeRiskCheckResultResponseBodyListRiskItemResources {
	s.ResourceName = &v
	return s
}

type DescribeRiskCheckResultResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRiskCheckResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRiskCheckResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckResultResponse) SetHeaders(v map[string]*string) *DescribeRiskCheckResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskCheckResultResponse) SetStatusCode(v int32) *DescribeRiskCheckResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskCheckResultResponse) SetBody(v *DescribeRiskCheckResultResponseBody) *DescribeRiskCheckResultResponse {
	s.Body = v
	return s
}

type DescribeRiskCheckSummaryRequest struct {
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The ID of the Alibaba Cloud account that is added as a member by using the multi-account control feature.
	ResourceDirectoryAccountId *string `json:"ResourceDirectoryAccountId,omitempty" xml:"ResourceDirectoryAccountId,omitempty"`
	ResourceOwnerId            *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeRiskCheckSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckSummaryRequest) SetLang(v string) *DescribeRiskCheckSummaryRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRiskCheckSummaryRequest) SetResourceDirectoryAccountId(v string) *DescribeRiskCheckSummaryRequest {
	s.ResourceDirectoryAccountId = &v
	return s
}

func (s *DescribeRiskCheckSummaryRequest) SetResourceOwnerId(v int64) *DescribeRiskCheckSummaryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRiskCheckSummaryRequest) SetSourceIp(v string) *DescribeRiskCheckSummaryRequest {
	s.SourceIp = &v
	return s
}

type DescribeRiskCheckSummaryResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The summary information about the check results of cloud service configurations.
	RiskCheckSummary *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary `json:"RiskCheckSummary,omitempty" xml:"RiskCheckSummary,omitempty" type:"Struct"`
}

func (s DescribeRiskCheckSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckSummaryResponseBody) SetRequestId(v string) *DescribeRiskCheckSummaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBody) SetRiskCheckSummary(v *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary) *DescribeRiskCheckSummaryResponseBody {
	s.RiskCheckSummary = v
	return s
}

type DescribeRiskCheckSummaryResponseBodyRiskCheckSummary struct {
	// The number of affected assets.
	AffectedAssetCount *int32 `json:"AffectedAssetCount,omitempty" xml:"AffectedAssetCount,omitempty"`
	// The number of the check items that fail the check.
	DisabledRiskCount *int32 `json:"DisabledRiskCount,omitempty" xml:"DisabledRiskCount,omitempty"`
	// The number of the check items that pass the check.
	EnabledRiskCount *int32 `json:"EnabledRiskCount,omitempty" xml:"EnabledRiskCount,omitempty"`
	// An array that consists of the statistics about each type of check items.
	Groups []*DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups `json:"Groups,omitempty" xml:"Groups,omitempty" type:"Repeated"`
	// The number of check items.
	ItemCount *int32 `json:"ItemCount,omitempty" xml:"ItemCount,omitempty"`
	// The number of risk items detected in the last check.
	PreviousCount *int32 `json:"PreviousCount,omitempty" xml:"PreviousCount,omitempty"`
	// The timestamp of the last check. Unit: milliseconds.
	PreviousTime *int64 `json:"PreviousTime,omitempty" xml:"PreviousTime,omitempty"`
	// The number of detected risk items.
	RiskCount *int32 `json:"RiskCount,omitempty" xml:"RiskCount,omitempty"`
	// An array that consists of the number of check items at each risk level.
	RiskLevelCount []*DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount `json:"RiskLevelCount,omitempty" xml:"RiskLevelCount,omitempty" type:"Repeated"`
	// The proportion of risk items to all check items.
	RiskRate *float32 `json:"RiskRate,omitempty" xml:"RiskRate,omitempty"`
}

func (s DescribeRiskCheckSummaryResponseBodyRiskCheckSummary) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckSummaryResponseBodyRiskCheckSummary) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary) SetAffectedAssetCount(v int32) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary {
	s.AffectedAssetCount = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary) SetDisabledRiskCount(v int32) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary {
	s.DisabledRiskCount = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary) SetEnabledRiskCount(v int32) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary {
	s.EnabledRiskCount = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary) SetGroups(v []*DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary {
	s.Groups = v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary) SetItemCount(v int32) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary {
	s.ItemCount = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary) SetPreviousCount(v int32) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary {
	s.PreviousCount = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary) SetPreviousTime(v int64) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary {
	s.PreviousTime = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary) SetRiskCount(v int32) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary {
	s.RiskCount = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary) SetRiskLevelCount(v []*DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary {
	s.RiskLevelCount = v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary) SetRiskRate(v float32) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummary {
	s.RiskRate = &v
	return s
}

type DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups struct {
	// An array that consists of the statistics about check results.
	CountByStatus []*DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus `json:"CountByStatus,omitempty" xml:"CountByStatus,omitempty" type:"Repeated"`
	// The ID of the check item type.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The remaining time before the check is complete.
	RemainingTime *int32 `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	// The sequence number of the check item type in the **All Types** drop-down list in the Security Center console.
	Sort *int32 `json:"Sort,omitempty" xml:"Sort,omitempty"`
	// The status of the check. Valid values:
	//
	// *   **finish**: The check is finished.
	// *   **running**: The check is in process.
	// *   **waiting**: The check is pending.
	// *   **notStart**: The check is not started.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the check item.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups) SetCountByStatus(v []*DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups {
	s.CountByStatus = v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups) SetId(v int64) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups {
	s.Id = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups) SetRemainingTime(v int32) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups {
	s.RemainingTime = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups) SetSort(v int32) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups {
	s.Sort = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups) SetStatus(v string) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups {
	s.Status = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups) SetTitle(v string) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroups {
	s.Title = &v
	return s
}

type DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus struct {
	// The number of detected risk items.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The status of the check item after the check is finished. Valid values:
	//
	// *   **pass**: The check item passes the check, which indicates that the check item is normal.
	// *   **failed**: The check item fails the check, which indicates that risks are detected for the check item.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus) SetCount(v int32) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus {
	s.Count = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus) SetStatus(v string) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryGroupsCountByStatus {
	s.Status = &v
	return s
}

type DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount struct {
	// The number of check items at the specified risk level.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The risk level of the check items. Valid values of risk levels:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount) SetCount(v int32) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount {
	s.Count = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount) SetKey(v string) *DescribeRiskCheckSummaryResponseBodyRiskCheckSummaryRiskLevelCount {
	s.Key = &v
	return s
}

type DescribeRiskCheckSummaryResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRiskCheckSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRiskCheckSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskCheckSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskCheckSummaryResponse) SetHeaders(v map[string]*string) *DescribeRiskCheckSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskCheckSummaryResponse) SetStatusCode(v int32) *DescribeRiskCheckSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskCheckSummaryResponse) SetBody(v *DescribeRiskCheckSummaryResponseBody) *DescribeRiskCheckSummaryResponse {
	s.Body = v
	return s
}

type DescribeRiskItemTypeRequest struct {
	// The language of the content within the request and response. Chinese and English are supported.
	// *   **zh**: Chinese
	// *   **en**: English
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeRiskItemTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskItemTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskItemTypeRequest) SetLang(v string) *DescribeRiskItemTypeRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRiskItemTypeRequest) SetResourceOwnerId(v int64) *DescribeRiskItemTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRiskItemTypeRequest) SetSourceIp(v string) *DescribeRiskItemTypeRequest {
	s.SourceIp = &v
	return s
}

type DescribeRiskItemTypeResponseBody struct {
	// An array that consists of the types of check items.
	List []*DescribeRiskItemTypeResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRiskItemTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskItemTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskItemTypeResponseBody) SetList(v []*DescribeRiskItemTypeResponseBodyList) *DescribeRiskItemTypeResponseBody {
	s.List = v
	return s
}

func (s *DescribeRiskItemTypeResponseBody) SetRequestId(v string) *DescribeRiskItemTypeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRiskItemTypeResponseBodyList struct {
	// The ID of the check item.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the check item type. Example: Identity authentication and permissions.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribeRiskItemTypeResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskItemTypeResponseBodyList) GoString() string {
	return s.String()
}

func (s *DescribeRiskItemTypeResponseBodyList) SetId(v int64) *DescribeRiskItemTypeResponseBodyList {
	s.Id = &v
	return s
}

func (s *DescribeRiskItemTypeResponseBodyList) SetTitle(v string) *DescribeRiskItemTypeResponseBodyList {
	s.Title = &v
	return s
}

type DescribeRiskItemTypeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRiskItemTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRiskItemTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskItemTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskItemTypeResponse) SetHeaders(v map[string]*string) *DescribeRiskItemTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskItemTypeResponse) SetStatusCode(v int32) *DescribeRiskItemTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskItemTypeResponse) SetBody(v *DescribeRiskItemTypeResponseBody) *DescribeRiskItemTypeResponse {
	s.Body = v
	return s
}

type DescribeRiskListCheckResultRequest struct {
	// The number of the page to return. Pages start from page 1. Default value: 1.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The instance ID of the cloud service. Separate multiple IDs with commas (,).
	//
	// >  If you do not specify this parameter, an empty list is returned.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The language of the content within the request and response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page.
	PageSize        *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerId *int64 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeRiskListCheckResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskListCheckResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskListCheckResultRequest) SetCurrentPage(v int32) *DescribeRiskListCheckResultRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeRiskListCheckResultRequest) SetInstanceIds(v []*string) *DescribeRiskListCheckResultRequest {
	s.InstanceIds = v
	return s
}

func (s *DescribeRiskListCheckResultRequest) SetLang(v string) *DescribeRiskListCheckResultRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRiskListCheckResultRequest) SetPageSize(v int32) *DescribeRiskListCheckResultRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRiskListCheckResultRequest) SetResourceOwnerId(v int64) *DescribeRiskListCheckResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRiskListCheckResultRequest) SetSourceIp(v string) *DescribeRiskListCheckResultRequest {
	s.SourceIp = &v
	return s
}

type DescribeRiskListCheckResultResponseBody struct {
	// The number of risk items for each cloud service.
	List []*DescribeRiskListCheckResultResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRiskListCheckResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskListCheckResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskListCheckResultResponseBody) SetList(v []*DescribeRiskListCheckResultResponseBodyList) *DescribeRiskListCheckResultResponseBody {
	s.List = v
	return s
}

func (s *DescribeRiskListCheckResultResponseBody) SetRequestId(v string) *DescribeRiskListCheckResultResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRiskListCheckResultResponseBodyList struct {
	// The instance ID of the cloud service.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The total number of risk items detected in the current cloud service.
	RiskCount *int64 `json:"riskCount,omitempty" xml:"riskCount,omitempty"`
}

func (s DescribeRiskListCheckResultResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskListCheckResultResponseBodyList) GoString() string {
	return s.String()
}

func (s *DescribeRiskListCheckResultResponseBodyList) SetInstanceId(v string) *DescribeRiskListCheckResultResponseBodyList {
	s.InstanceId = &v
	return s
}

func (s *DescribeRiskListCheckResultResponseBodyList) SetRiskCount(v int64) *DescribeRiskListCheckResultResponseBodyList {
	s.RiskCount = &v
	return s
}

type DescribeRiskListCheckResultResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRiskListCheckResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRiskListCheckResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskListCheckResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskListCheckResultResponse) SetHeaders(v map[string]*string) *DescribeRiskListCheckResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskListCheckResultResponse) SetStatusCode(v int32) *DescribeRiskListCheckResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskListCheckResultResponse) SetBody(v *DescribeRiskListCheckResultResponseBody) *DescribeRiskListCheckResultResponse {
	s.Body = v
	return s
}

type DescribeRiskTypeRequest struct {
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeRiskTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskTypeRequest) SetLang(v string) *DescribeRiskTypeRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRiskTypeRequest) SetSourceIp(v string) *DescribeRiskTypeRequest {
	s.SourceIp = &v
	return s
}

type DescribeRiskTypeResponseBody struct {
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RiskTypes []*DescribeRiskTypeResponseBodyRiskTypes `json:"RiskTypes,omitempty" xml:"RiskTypes,omitempty" type:"Repeated"`
}

func (s DescribeRiskTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskTypeResponseBody) SetRequestId(v string) *DescribeRiskTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRiskTypeResponseBody) SetRiskTypes(v []*DescribeRiskTypeResponseBodyRiskTypes) *DescribeRiskTypeResponseBody {
	s.RiskTypes = v
	return s
}

type DescribeRiskTypeResponseBodyRiskTypes struct {
	Alias    *string                                          `json:"Alias,omitempty" xml:"Alias,omitempty"`
	SubTypes []*DescribeRiskTypeResponseBodyRiskTypesSubTypes `json:"SubTypes,omitempty" xml:"SubTypes,omitempty" type:"Repeated"`
	TypeName *string                                          `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s DescribeRiskTypeResponseBodyRiskTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskTypeResponseBodyRiskTypes) GoString() string {
	return s.String()
}

func (s *DescribeRiskTypeResponseBodyRiskTypes) SetAlias(v string) *DescribeRiskTypeResponseBodyRiskTypes {
	s.Alias = &v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypes) SetSubTypes(v []*DescribeRiskTypeResponseBodyRiskTypesSubTypes) *DescribeRiskTypeResponseBodyRiskTypes {
	s.SubTypes = v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypes) SetTypeName(v string) *DescribeRiskTypeResponseBodyRiskTypes {
	s.TypeName = &v
	return s
}

type DescribeRiskTypeResponseBodyRiskTypesSubTypes struct {
	Alias        *string                                                      `json:"Alias,omitempty" xml:"Alias,omitempty"`
	CheckDetails []*DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetails `json:"CheckDetails,omitempty" xml:"CheckDetails,omitempty" type:"Repeated"`
	TypeName     *string                                                      `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s DescribeRiskTypeResponseBodyRiskTypesSubTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskTypeResponseBodyRiskTypesSubTypes) GoString() string {
	return s.String()
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypes) SetAlias(v string) *DescribeRiskTypeResponseBodyRiskTypesSubTypes {
	s.Alias = &v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypes) SetCheckDetails(v []*DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetails) *DescribeRiskTypeResponseBodyRiskTypesSubTypes {
	s.CheckDetails = v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypes) SetTypeName(v string) *DescribeRiskTypeResponseBodyRiskTypesSubTypes {
	s.TypeName = &v
	return s
}

type DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetails struct {
	CheckDesc *string                                                           `json:"CheckDesc,omitempty" xml:"CheckDesc,omitempty"`
	CheckId   *int64                                                            `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	CheckItem *string                                                           `json:"CheckItem,omitempty" xml:"CheckItem,omitempty"`
	Rules     []*DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetails) GoString() string {
	return s.String()
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetails) SetCheckDesc(v string) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetails {
	s.CheckDesc = &v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetails) SetCheckId(v int64) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetails {
	s.CheckId = &v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetails) SetCheckItem(v string) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetails {
	s.CheckItem = &v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetails) SetRules(v []*DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRules) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetails {
	s.Rules = v
	return s
}

type DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRules struct {
	Optional  *int32                                                                     `json:"Optional,omitempty" xml:"Optional,omitempty"`
	ParamList []*DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList `json:"ParamList,omitempty" xml:"ParamList,omitempty" type:"Repeated"`
	RuleDesc  *string                                                                    `json:"RuleDesc,omitempty" xml:"RuleDesc,omitempty"`
	RuleId    *string                                                                    `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRules) GoString() string {
	return s.String()
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRules) SetOptional(v int32) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRules {
	s.Optional = &v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRules) SetParamList(v []*DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRules {
	s.ParamList = v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRules) SetRuleDesc(v string) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRules {
	s.RuleDesc = &v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRules) SetRuleId(v string) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRules {
	s.RuleId = &v
	return s
}

type DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList struct {
	EnumValue         *string `json:"EnumValue,omitempty" xml:"EnumValue,omitempty"`
	MaxValue          *int32  `json:"MaxValue,omitempty" xml:"MaxValue,omitempty"`
	MinValue          *int32  `json:"MinValue,omitempty" xml:"MinValue,omitempty"`
	ParamDefaultValue *string `json:"ParamDefaultValue,omitempty" xml:"ParamDefaultValue,omitempty"`
	ParamDesc         *string `json:"ParamDesc,omitempty" xml:"ParamDesc,omitempty"`
	ParamName         *string `json:"ParamName,omitempty" xml:"ParamName,omitempty"`
	ParamType         *int32  `json:"ParamType,omitempty" xml:"ParamType,omitempty"`
}

func (s DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList) GoString() string {
	return s.String()
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList) SetEnumValue(v string) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList {
	s.EnumValue = &v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList) SetMaxValue(v int32) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList {
	s.MaxValue = &v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList) SetMinValue(v int32) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList {
	s.MinValue = &v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList) SetParamDefaultValue(v string) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList {
	s.ParamDefaultValue = &v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList) SetParamDesc(v string) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList {
	s.ParamDesc = &v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList) SetParamName(v string) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList {
	s.ParamName = &v
	return s
}

func (s *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList) SetParamType(v int32) *DescribeRiskTypeResponseBodyRiskTypesSubTypesCheckDetailsRulesParamList {
	s.ParamType = &v
	return s
}

type DescribeRiskTypeResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRiskTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRiskTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskTypeResponse) SetHeaders(v map[string]*string) *DescribeRiskTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskTypeResponse) SetStatusCode(v int32) *DescribeRiskTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskTypeResponse) SetBody(v *DescribeRiskTypeResponseBody) *DescribeRiskTypeResponse {
	s.Body = v
	return s
}

type DescribeRisksRequest struct {
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Limit    *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	RiskId   *int64  `json:"RiskId,omitempty" xml:"RiskId,omitempty"`
	RiskName *string `json:"RiskName,omitempty" xml:"RiskName,omitempty"`
}

func (s DescribeRisksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRisksRequest) GoString() string {
	return s.String()
}

func (s *DescribeRisksRequest) SetLang(v string) *DescribeRisksRequest {
	s.Lang = &v
	return s
}

func (s *DescribeRisksRequest) SetLimit(v int32) *DescribeRisksRequest {
	s.Limit = &v
	return s
}

func (s *DescribeRisksRequest) SetRiskId(v int64) *DescribeRisksRequest {
	s.RiskId = &v
	return s
}

func (s *DescribeRisksRequest) SetRiskName(v string) *DescribeRisksRequest {
	s.RiskName = &v
	return s
}

type DescribeRisksResponseBody struct {
	RequestId  *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Risks      []*DescribeRisksResponseBodyRisks `json:"Risks,omitempty" xml:"Risks,omitempty" type:"Repeated"`
	TotalCount *int32                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeRisksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRisksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRisksResponseBody) SetRequestId(v string) *DescribeRisksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRisksResponseBody) SetRisks(v []*DescribeRisksResponseBodyRisks) *DescribeRisksResponseBody {
	s.Risks = v
	return s
}

func (s *DescribeRisksResponseBody) SetTotalCount(v int32) *DescribeRisksResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeRisksResponseBodyRisks struct {
	RiskDetail   *string `json:"RiskDetail,omitempty" xml:"RiskDetail,omitempty"`
	RiskId       *int64  `json:"RiskId,omitempty" xml:"RiskId,omitempty"`
	RiskName     *string `json:"RiskName,omitempty" xml:"RiskName,omitempty"`
	RiskType     *string `json:"RiskType,omitempty" xml:"RiskType,omitempty"`
	SubRiskType  *string `json:"SubRiskType,omitempty" xml:"SubRiskType,omitempty"`
	SubTypeAlias *string `json:"SubTypeAlias,omitempty" xml:"SubTypeAlias,omitempty"`
	TypeAlias    *string `json:"TypeAlias,omitempty" xml:"TypeAlias,omitempty"`
}

func (s DescribeRisksResponseBodyRisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeRisksResponseBodyRisks) GoString() string {
	return s.String()
}

func (s *DescribeRisksResponseBodyRisks) SetRiskDetail(v string) *DescribeRisksResponseBodyRisks {
	s.RiskDetail = &v
	return s
}

func (s *DescribeRisksResponseBodyRisks) SetRiskId(v int64) *DescribeRisksResponseBodyRisks {
	s.RiskId = &v
	return s
}

func (s *DescribeRisksResponseBodyRisks) SetRiskName(v string) *DescribeRisksResponseBodyRisks {
	s.RiskName = &v
	return s
}

func (s *DescribeRisksResponseBodyRisks) SetRiskType(v string) *DescribeRisksResponseBodyRisks {
	s.RiskType = &v
	return s
}

func (s *DescribeRisksResponseBodyRisks) SetSubRiskType(v string) *DescribeRisksResponseBodyRisks {
	s.SubRiskType = &v
	return s
}

func (s *DescribeRisksResponseBodyRisks) SetSubTypeAlias(v string) *DescribeRisksResponseBodyRisks {
	s.SubTypeAlias = &v
	return s
}

func (s *DescribeRisksResponseBodyRisks) SetTypeAlias(v string) *DescribeRisksResponseBodyRisks {
	s.TypeAlias = &v
	return s
}

type DescribeRisksResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRisksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRisksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRisksResponse) GoString() string {
	return s.String()
}

func (s *DescribeRisksResponse) SetHeaders(v map[string]*string) *DescribeRisksResponse {
	s.Headers = v
	return s
}

func (s *DescribeRisksResponse) SetStatusCode(v int32) *DescribeRisksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRisksResponse) SetBody(v *DescribeRisksResponseBody) *DescribeRisksResponse {
	s.Body = v
	return s
}

type DescribeSasPmAgentListRequest struct {
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeSasPmAgentListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSasPmAgentListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSasPmAgentListRequest) SetLang(v string) *DescribeSasPmAgentListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSasPmAgentListRequest) SetUuids(v string) *DescribeSasPmAgentListRequest {
	s.Uuids = &v
	return s
}

type DescribeSasPmAgentListResponseBody struct {
	RequestId      *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SasPmAgentList []*DescribeSasPmAgentListResponseBodySasPmAgentList `json:"SasPmAgentList,omitempty" xml:"SasPmAgentList,omitempty" type:"Repeated"`
}

func (s DescribeSasPmAgentListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSasPmAgentListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSasPmAgentListResponseBody) SetRequestId(v string) *DescribeSasPmAgentListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSasPmAgentListResponseBody) SetSasPmAgentList(v []*DescribeSasPmAgentListResponseBodySasPmAgentList) *DescribeSasPmAgentListResponseBody {
	s.SasPmAgentList = v
	return s
}

type DescribeSasPmAgentListResponseBodySasPmAgentList struct {
	AliyunAssistId       *string `json:"AliyunAssistId,omitempty" xml:"AliyunAssistId,omitempty"`
	AliyunMonitorId      *string `json:"AliyunMonitorId,omitempty" xml:"AliyunMonitorId,omitempty"`
	AssistInstallResult  *int32  `json:"AssistInstallResult,omitempty" xml:"AssistInstallResult,omitempty"`
	AssistInstallStatus  *int32  `json:"AssistInstallStatus,omitempty" xml:"AssistInstallStatus,omitempty"`
	MonitorInstallResult *int32  `json:"MonitorInstallResult,omitempty" xml:"MonitorInstallResult,omitempty"`
	MonitorInstallStatus *int32  `json:"MonitorInstallStatus,omitempty" xml:"MonitorInstallStatus,omitempty"`
	Uuid                 *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeSasPmAgentListResponseBodySasPmAgentList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSasPmAgentListResponseBodySasPmAgentList) GoString() string {
	return s.String()
}

func (s *DescribeSasPmAgentListResponseBodySasPmAgentList) SetAliyunAssistId(v string) *DescribeSasPmAgentListResponseBodySasPmAgentList {
	s.AliyunAssistId = &v
	return s
}

func (s *DescribeSasPmAgentListResponseBodySasPmAgentList) SetAliyunMonitorId(v string) *DescribeSasPmAgentListResponseBodySasPmAgentList {
	s.AliyunMonitorId = &v
	return s
}

func (s *DescribeSasPmAgentListResponseBodySasPmAgentList) SetAssistInstallResult(v int32) *DescribeSasPmAgentListResponseBodySasPmAgentList {
	s.AssistInstallResult = &v
	return s
}

func (s *DescribeSasPmAgentListResponseBodySasPmAgentList) SetAssistInstallStatus(v int32) *DescribeSasPmAgentListResponseBodySasPmAgentList {
	s.AssistInstallStatus = &v
	return s
}

func (s *DescribeSasPmAgentListResponseBodySasPmAgentList) SetMonitorInstallResult(v int32) *DescribeSasPmAgentListResponseBodySasPmAgentList {
	s.MonitorInstallResult = &v
	return s
}

func (s *DescribeSasPmAgentListResponseBodySasPmAgentList) SetMonitorInstallStatus(v int32) *DescribeSasPmAgentListResponseBodySasPmAgentList {
	s.MonitorInstallStatus = &v
	return s
}

func (s *DescribeSasPmAgentListResponseBodySasPmAgentList) SetUuid(v string) *DescribeSasPmAgentListResponseBodySasPmAgentList {
	s.Uuid = &v
	return s
}

type DescribeSasPmAgentListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSasPmAgentListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSasPmAgentListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSasPmAgentListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSasPmAgentListResponse) SetHeaders(v map[string]*string) *DescribeSasPmAgentListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSasPmAgentListResponse) SetStatusCode(v int32) *DescribeSasPmAgentListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSasPmAgentListResponse) SetBody(v *DescribeSasPmAgentListResponseBody) *DescribeSasPmAgentListResponse {
	s.Body = v
	return s
}

type DescribeScanTaskProgressRequest struct {
	// The ID of the virus scan task.
	//
	// >  You can call the [StartVirusScanTask](~~StartVirusScanTask~~) operation to query the IDs of virus scan tasks.
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeScanTaskProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeScanTaskProgressRequest) GoString() string {
	return s.String()
}

func (s *DescribeScanTaskProgressRequest) SetTaskId(v int64) *DescribeScanTaskProgressRequest {
	s.TaskId = &v
	return s
}

type DescribeScanTaskProgressResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The progress of the virus scan task. Valid values:
	//
	// *   **init**: The task is being initialized.
	// *   **Processing**: The task is running.
	// *   **Success**: The task is complete.
	// *   **Failed**: The task fails.
	ScanTaskProgress *string `json:"ScanTaskProgress,omitempty" xml:"ScanTaskProgress,omitempty"`
	// The information about the asset on which the virus scan task runs. The value is a string that consists of JSON arrays. Each element in a JSON array is a JSON struct that contains the following fields:
	//
	// *   **type**: the type of the asset on which the virus scan task runs. Valid values:
	//
	//     *   **groupId**: server group.
	//     *   **uuid**: server.
	//
	// *   **name**: the name of the server group or server.
	//
	// *   **target**: the asset on which the virus scan task runs. The value of this field varies based on the value of the type field.
	//
	//     *   If the value of **type** is **groupId**, the value of this field is the ID of the server group.
	//     *   If the value of **type** is **uuid**, the value of this field is the UUID of the server.
	TargetInfo *string `json:"TargetInfo,omitempty" xml:"TargetInfo,omitempty"`
}

func (s DescribeScanTaskProgressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScanTaskProgressResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScanTaskProgressResponseBody) SetRequestId(v string) *DescribeScanTaskProgressResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScanTaskProgressResponseBody) SetScanTaskProgress(v string) *DescribeScanTaskProgressResponseBody {
	s.ScanTaskProgress = &v
	return s
}

func (s *DescribeScanTaskProgressResponseBody) SetTargetInfo(v string) *DescribeScanTaskProgressResponseBody {
	s.TargetInfo = &v
	return s
}

type DescribeScanTaskProgressResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeScanTaskProgressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeScanTaskProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeScanTaskProgressResponse) GoString() string {
	return s.String()
}

func (s *DescribeScanTaskProgressResponse) SetHeaders(v map[string]*string) *DescribeScanTaskProgressResponse {
	s.Headers = v
	return s
}

func (s *DescribeScanTaskProgressResponse) SetStatusCode(v int32) *DescribeScanTaskProgressResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeScanTaskProgressResponse) SetBody(v *DescribeScanTaskProgressResponseBody) *DescribeScanTaskProgressResponse {
	s.Body = v
	return s
}

type DescribeScanTaskStatisticsRequest struct {
	Levels *string `json:"Levels,omitempty" xml:"Levels,omitempty"`
}

func (s DescribeScanTaskStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeScanTaskStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeScanTaskStatisticsRequest) SetLevels(v string) *DescribeScanTaskStatisticsRequest {
	s.Levels = &v
	return s
}

type DescribeScanTaskStatisticsResponseBody struct {
	DealedRiskNum   *int32  `json:"DealedRiskNum,omitempty" xml:"DealedRiskNum,omitempty"`
	PersonalTaskNum *int64  `json:"PersonalTaskNum,omitempty" xml:"PersonalTaskNum,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalTaskNum    *int64  `json:"TotalTaskNum,omitempty" xml:"TotalTaskNum,omitempty"`
	UserNum         *int64  `json:"UserNum,omitempty" xml:"UserNum,omitempty"`
}

func (s DescribeScanTaskStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScanTaskStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScanTaskStatisticsResponseBody) SetDealedRiskNum(v int32) *DescribeScanTaskStatisticsResponseBody {
	s.DealedRiskNum = &v
	return s
}

func (s *DescribeScanTaskStatisticsResponseBody) SetPersonalTaskNum(v int64) *DescribeScanTaskStatisticsResponseBody {
	s.PersonalTaskNum = &v
	return s
}

func (s *DescribeScanTaskStatisticsResponseBody) SetRequestId(v string) *DescribeScanTaskStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScanTaskStatisticsResponseBody) SetTotalTaskNum(v int64) *DescribeScanTaskStatisticsResponseBody {
	s.TotalTaskNum = &v
	return s
}

func (s *DescribeScanTaskStatisticsResponseBody) SetUserNum(v int64) *DescribeScanTaskStatisticsResponseBody {
	s.UserNum = &v
	return s
}

type DescribeScanTaskStatisticsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeScanTaskStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeScanTaskStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeScanTaskStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeScanTaskStatisticsResponse) SetHeaders(v map[string]*string) *DescribeScanTaskStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeScanTaskStatisticsResponse) SetStatusCode(v int32) *DescribeScanTaskStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeScanTaskStatisticsResponse) SetBody(v *DescribeScanTaskStatisticsResponseBody) *DescribeScanTaskStatisticsResponse {
	s.Body = v
	return s
}

type DescribeSearchConditionRequest struct {
	// The language of the content within the request and the response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The type of the asset. Valid values:
	//
	// *   **ecs**: Elastic Compute Service (ECS) instance
	// *   **cloud_product**: cloud service except ECS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeSearchConditionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSearchConditionRequest) GoString() string {
	return s.String()
}

func (s *DescribeSearchConditionRequest) SetLang(v string) *DescribeSearchConditionRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSearchConditionRequest) SetSourceIp(v string) *DescribeSearchConditionRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeSearchConditionRequest) SetType(v string) *DescribeSearchConditionRequest {
	s.Type = &v
	return s
}

type DescribeSearchConditionResponseBody struct {
	// An array that consists of the filter conditions.
	ConditionList []*DescribeSearchConditionResponseBodyConditionList `json:"ConditionList,omitempty" xml:"ConditionList,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSearchConditionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSearchConditionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSearchConditionResponseBody) SetConditionList(v []*DescribeSearchConditionResponseBodyConditionList) *DescribeSearchConditionResponseBody {
	s.ConditionList = v
	return s
}

func (s *DescribeSearchConditionResponseBody) SetRequestId(v string) *DescribeSearchConditionResponseBody {
	s.RequestId = &v
	return s
}

type DescribeSearchConditionResponseBodyConditionList struct {
	// The type of the filter condition. Valid values:
	//
	// *   **system**: default filter condition
	// *   **user**: custom filter condition
	ConditionType *string `json:"ConditionType,omitempty" xml:"ConditionType,omitempty"`
	// The filter condition. The value of this parameter is in the JSON format and contains the following fields:
	//
	// *   **filterParams**: the parameters of the filter condition. The value of this field is in the JSON format and contains the following fields:
	//
	//     *   **labelKey**: the key for rendering.
	//
	//     *   **label**: the display name.
	//
	//     *   **value**: the value of the filter condition. The value of this field is in the JSON format and contains the following fields:
	//
	//         *   **name**: the name of the filter item.
	//         *   **value**: the value of the filter item.
	//
	// *   **LogicalExp**: the logical relationship among the filter conditions. Valid values:
	//
	//     *   **AND**: The filter conditions are evaluated by using a logical **AND**.
	//     *   **OR**: The filter conditions are evaluated by using a logical **OR**.
	//
	// >  If the value of **ConditionType** is **system**, **labelKey** is returned. The labelKey field is used only for internationalization rendering.
	FilterConditions *string `json:"FilterConditions,omitempty" xml:"FilterConditions,omitempty"`
	// The name of the filter condition.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The key of the filter condition name.
	NameKey *string `json:"NameKey,omitempty" xml:"NameKey,omitempty"`
}

func (s DescribeSearchConditionResponseBodyConditionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSearchConditionResponseBodyConditionList) GoString() string {
	return s.String()
}

func (s *DescribeSearchConditionResponseBodyConditionList) SetConditionType(v string) *DescribeSearchConditionResponseBodyConditionList {
	s.ConditionType = &v
	return s
}

func (s *DescribeSearchConditionResponseBodyConditionList) SetFilterConditions(v string) *DescribeSearchConditionResponseBodyConditionList {
	s.FilterConditions = &v
	return s
}

func (s *DescribeSearchConditionResponseBodyConditionList) SetName(v string) *DescribeSearchConditionResponseBodyConditionList {
	s.Name = &v
	return s
}

func (s *DescribeSearchConditionResponseBodyConditionList) SetNameKey(v string) *DescribeSearchConditionResponseBodyConditionList {
	s.NameKey = &v
	return s
}

type DescribeSearchConditionResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSearchConditionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSearchConditionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSearchConditionResponse) GoString() string {
	return s.String()
}

func (s *DescribeSearchConditionResponse) SetHeaders(v map[string]*string) *DescribeSearchConditionResponse {
	s.Headers = v
	return s
}

func (s *DescribeSearchConditionResponse) SetStatusCode(v int32) *DescribeSearchConditionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSearchConditionResponse) SetBody(v *DescribeSearchConditionResponseBody) *DescribeSearchConditionResponse {
	s.Body = v
	return s
}

type DescribeSecureSuggestionRequest struct {
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeSecureSuggestionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecureSuggestionRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecureSuggestionRequest) SetLang(v string) *DescribeSecureSuggestionRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSecureSuggestionRequest) SetSourceIp(v string) *DescribeSecureSuggestionRequest {
	s.SourceIp = &v
	return s
}

type DescribeSecureSuggestionResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of the unhandled security risks.
	Suggestions []*DescribeSecureSuggestionResponseBodySuggestions `json:"Suggestions,omitempty" xml:"Suggestions,omitempty" type:"Repeated"`
	// The total number of unhandled security risks.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSecureSuggestionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecureSuggestionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecureSuggestionResponseBody) SetRequestId(v string) *DescribeSecureSuggestionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecureSuggestionResponseBody) SetSuggestions(v []*DescribeSecureSuggestionResponseBodySuggestions) *DescribeSecureSuggestionResponseBody {
	s.Suggestions = v
	return s
}

func (s *DescribeSecureSuggestionResponseBody) SetTotalCount(v int32) *DescribeSecureSuggestionResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSecureSuggestionResponseBodySuggestions struct {
	// An array that consists of the details about the suggestion.
	Detail []*DescribeSecureSuggestionResponseBodySuggestionsDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
	// The penalty point of an item.
	Points *int32 `json:"Points,omitempty" xml:"Points,omitempty"`
	// The type of the unhandled security risk. Valid values:
	//
	// *   **SS_REINFORCE**: missing configuration of key features, such as the antivirus feature
	// *   **SS_ALARM**: unhandled alerts
	// *   **SS_VUL**: unfixed vulnerabilities
	// *   **SS_HC**: baseline risks
	// *   **SS_AK**: AccessKey pair leaks
	// *   **SS_CLOUD_HC**: configuration risks of cloud services
	// *   **OTHER**: others
	SuggestType *string `json:"SuggestType,omitempty" xml:"SuggestType,omitempty"`
}

func (s DescribeSecureSuggestionResponseBodySuggestions) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecureSuggestionResponseBodySuggestions) GoString() string {
	return s.String()
}

func (s *DescribeSecureSuggestionResponseBodySuggestions) SetDetail(v []*DescribeSecureSuggestionResponseBodySuggestionsDetail) *DescribeSecureSuggestionResponseBodySuggestions {
	s.Detail = v
	return s
}

func (s *DescribeSecureSuggestionResponseBodySuggestions) SetPoints(v int32) *DescribeSecureSuggestionResponseBodySuggestions {
	s.Points = &v
	return s
}

func (s *DescribeSecureSuggestionResponseBodySuggestions) SetSuggestType(v string) *DescribeSecureSuggestionResponseBodySuggestions {
	s.SuggestType = &v
	return s
}

type DescribeSecureSuggestionResponseBodySuggestionsDetail struct {
	// The description of the suggestion.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The subtype of the unhandled security risk.
	SubType *string `json:"SubType,omitempty" xml:"SubType,omitempty"`
	// The name of the unhandled risk.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribeSecureSuggestionResponseBodySuggestionsDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecureSuggestionResponseBodySuggestionsDetail) GoString() string {
	return s.String()
}

func (s *DescribeSecureSuggestionResponseBodySuggestionsDetail) SetDescription(v string) *DescribeSecureSuggestionResponseBodySuggestionsDetail {
	s.Description = &v
	return s
}

func (s *DescribeSecureSuggestionResponseBodySuggestionsDetail) SetSubType(v string) *DescribeSecureSuggestionResponseBodySuggestionsDetail {
	s.SubType = &v
	return s
}

func (s *DescribeSecureSuggestionResponseBodySuggestionsDetail) SetTitle(v string) *DescribeSecureSuggestionResponseBodySuggestionsDetail {
	s.Title = &v
	return s
}

type DescribeSecureSuggestionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSecureSuggestionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSecureSuggestionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecureSuggestionResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecureSuggestionResponse) SetHeaders(v map[string]*string) *DescribeSecureSuggestionResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecureSuggestionResponse) SetStatusCode(v int32) *DescribeSecureSuggestionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSecureSuggestionResponse) SetBody(v *DescribeSecureSuggestionResponseBody) *DescribeSecureSuggestionResponse {
	s.Body = v
	return s
}

type DescribeSecurityCheckScheduleConfigRequest struct {
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeSecurityCheckScheduleConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityCheckScheduleConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityCheckScheduleConfigRequest) SetLang(v string) *DescribeSecurityCheckScheduleConfigRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSecurityCheckScheduleConfigRequest) SetResourceOwnerId(v int64) *DescribeSecurityCheckScheduleConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSecurityCheckScheduleConfigRequest) SetSourceIp(v string) *DescribeSecurityCheckScheduleConfigRequest {
	s.SourceIp = &v
	return s
}

type DescribeSecurityCheckScheduleConfigResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The configurations of custom check tasks.
	RiskCheckJobConfig *DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig `json:"RiskCheckJobConfig,omitempty" xml:"RiskCheckJobConfig,omitempty" type:"Struct"`
}

func (s DescribeSecurityCheckScheduleConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityCheckScheduleConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityCheckScheduleConfigResponseBody) SetRequestId(v string) *DescribeSecurityCheckScheduleConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityCheckScheduleConfigResponseBody) SetRiskCheckJobConfig(v *DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig) *DescribeSecurityCheckScheduleConfigResponseBody {
	s.RiskCheckJobConfig = v
	return s
}

type DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig struct {
	// The day of the week when the check tasks are performed. Multiple days can be specified. Multiple days are separated by commas (,).
	//
	// *   **1**: Monday
	// *   **2**: Tuesday
	// *   **3**: Wednesday
	// *   **4**: Thursday
	// *   **5**: Friday
	// *   **6**: Saturday
	// *   **7**: Sunday
	DaysOfWeek *string `json:"DaysOfWeek,omitempty" xml:"DaysOfWeek,omitempty"`
	// The time range during which check tasks end. Valid values:
	//
	// *   **6**: 00:00 to 06:00
	// *   **12**: 06:00 to 12:00
	// *   **18**: 12:00 to 18:00
	// *   **24**: 18:00 to 24:00
	EndTime *int32 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The time range during which check tasks start. Valid values:
	//
	// *   **0**: 00:00 to 06:00
	// *   **6**: 06:00 to 12:00
	// *   **12**: 12:00 to 18:00
	// *   **18**: 18:00 to 24:00
	StartTime *int32 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig) GoString() string {
	return s.String()
}

func (s *DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig) SetDaysOfWeek(v string) *DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig {
	s.DaysOfWeek = &v
	return s
}

func (s *DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig) SetEndTime(v int32) *DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig {
	s.EndTime = &v
	return s
}

func (s *DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig) SetStartTime(v int32) *DescribeSecurityCheckScheduleConfigResponseBodyRiskCheckJobConfig {
	s.StartTime = &v
	return s
}

type DescribeSecurityCheckScheduleConfigResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSecurityCheckScheduleConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSecurityCheckScheduleConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityCheckScheduleConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityCheckScheduleConfigResponse) SetHeaders(v map[string]*string) *DescribeSecurityCheckScheduleConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityCheckScheduleConfigResponse) SetStatusCode(v int32) *DescribeSecurityCheckScheduleConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSecurityCheckScheduleConfigResponse) SetBody(v *DescribeSecurityCheckScheduleConfigResponseBody) *DescribeSecurityCheckScheduleConfigResponse {
	s.Body = v
	return s
}

type DescribeSecurityEventOperationStatusRequest struct {
	ResourceOwnerId  *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityEventIds []*string `json:"SecurityEventIds,omitempty" xml:"SecurityEventIds,omitempty" type:"Repeated"`
	SourceIp         *string   `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	TaskId           *int64    `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeSecurityEventOperationStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityEventOperationStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityEventOperationStatusRequest) SetResourceOwnerId(v int64) *DescribeSecurityEventOperationStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSecurityEventOperationStatusRequest) SetSecurityEventIds(v []*string) *DescribeSecurityEventOperationStatusRequest {
	s.SecurityEventIds = v
	return s
}

func (s *DescribeSecurityEventOperationStatusRequest) SetSourceIp(v string) *DescribeSecurityEventOperationStatusRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeSecurityEventOperationStatusRequest) SetTaskId(v int64) *DescribeSecurityEventOperationStatusRequest {
	s.TaskId = &v
	return s
}

type DescribeSecurityEventOperationStatusResponseBody struct {
	RequestId                            *string                                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecurityEventOperationStatusResponse *DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse `json:"SecurityEventOperationStatusResponse,omitempty" xml:"SecurityEventOperationStatusResponse,omitempty" type:"Struct"`
}

func (s DescribeSecurityEventOperationStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityEventOperationStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityEventOperationStatusResponseBody) SetRequestId(v string) *DescribeSecurityEventOperationStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityEventOperationStatusResponseBody) SetSecurityEventOperationStatusResponse(v *DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse) *DescribeSecurityEventOperationStatusResponseBody {
	s.SecurityEventOperationStatusResponse = v
	return s
}

type DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse struct {
	SecurityEventOperationStatuses []*DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses `json:"SecurityEventOperationStatuses,omitempty" xml:"SecurityEventOperationStatuses,omitempty" type:"Repeated"`
	TaskStatus                     *string                                                                                                               `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
}

func (s DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse) SetSecurityEventOperationStatuses(v []*DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses) *DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse {
	s.SecurityEventOperationStatuses = v
	return s
}

func (s *DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse) SetTaskStatus(v string) *DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponse {
	s.TaskStatus = &v
	return s
}

type DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses struct {
	ErrorCode       *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	SecurityEventId *string `json:"SecurityEventId,omitempty" xml:"SecurityEventId,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses) GoString() string {
	return s.String()
}

func (s *DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses) SetErrorCode(v string) *DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses) SetSecurityEventId(v string) *DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses {
	s.SecurityEventId = &v
	return s
}

func (s *DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses) SetStatus(v string) *DescribeSecurityEventOperationStatusResponseBodySecurityEventOperationStatusResponseSecurityEventOperationStatuses {
	s.Status = &v
	return s
}

type DescribeSecurityEventOperationStatusResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSecurityEventOperationStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSecurityEventOperationStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityEventOperationStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityEventOperationStatusResponse) SetHeaders(v map[string]*string) *DescribeSecurityEventOperationStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityEventOperationStatusResponse) SetStatusCode(v int32) *DescribeSecurityEventOperationStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSecurityEventOperationStatusResponse) SetBody(v *DescribeSecurityEventOperationStatusResponseBody) *DescribeSecurityEventOperationStatusResponse {
	s.Body = v
	return s
}

type DescribeSecurityEventOperationsRequest struct {
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The ID of the alert event that you want to handle.
	SecurityEventId *int64 `json:"SecurityEventId,omitempty" xml:"SecurityEventId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeSecurityEventOperationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityEventOperationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityEventOperationsRequest) SetLang(v string) *DescribeSecurityEventOperationsRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSecurityEventOperationsRequest) SetResourceOwnerId(v int64) *DescribeSecurityEventOperationsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSecurityEventOperationsRequest) SetSecurityEventId(v int64) *DescribeSecurityEventOperationsRequest {
	s.SecurityEventId = &v
	return s
}

func (s *DescribeSecurityEventOperationsRequest) SetSourceIp(v string) *DescribeSecurityEventOperationsRequest {
	s.SourceIp = &v
	return s
}

type DescribeSecurityEventOperationsResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array consisting of the operations that you can perform to handle the alert event.
	SecurityEventOperationsResponse []*DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse `json:"SecurityEventOperationsResponse,omitempty" xml:"SecurityEventOperationsResponse,omitempty" type:"Repeated"`
}

func (s DescribeSecurityEventOperationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityEventOperationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityEventOperationsResponseBody) SetRequestId(v string) *DescribeSecurityEventOperationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityEventOperationsResponseBody) SetSecurityEventOperationsResponse(v []*DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse) *DescribeSecurityEventOperationsResponseBody {
	s.SecurityEventOperationsResponse = v
	return s
}

type DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse struct {
	// An array consisting of the configuration information that is used when the value of the OperationCode parameter is **advance\_mark\_mis_info**.
	MarkField []*DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField `json:"MarkField,omitempty" xml:"MarkField,omitempty" type:"Repeated"`
	// An array consisting of the configuration items that can be used when the value of the OperationCode parameter is advance_mark_mis_info.
	MarkFieldsSource []*DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource `json:"MarkFieldsSource,omitempty" xml:"MarkFieldsSource,omitempty" type:"Repeated"`
	// The operation that you can perform to handle the alert. Valid values:
	//
	// *   **block_ip**: blocks the source IP address.
	// *   **advance\_mark\_mis_info**: adds the alert to the whitelist.
	// *   **ignore**: ignores the alert.
	// *   **manual_handled**: marks the alert as manually handled.
	// *   **kill_process**: terminates the malicious process.
	// *   **cleanup**: performs in-depth virus detection and removal.
	// *   **kill\_and_quara**: terminates the malicious process and quarantines the source file.
	// *   **disable\_malicious_defense**: stops the container on which the alerting files or processes exist.
	// *   **client\_problem_check**: performs troubleshooting.
	// *   **quara**: quarantines the source file of the malicious process.
	OperationCode *string `json:"OperationCode,omitempty" xml:"OperationCode,omitempty"`
	// The configuration of the operation that you can perform to handle the alert event.
	//
	// >  If the value of the OperationCode parameter is `kill_and_quara` or `block_ip`, the OperationParams parameter is required. If the value of the OperationCode parameter is a different value, the OperationParams parameter can be left empty.
	OperationParams *string `json:"OperationParams,omitempty" xml:"OperationParams,omitempty"`
	// Indicates whether you can handle the alert event in the current edition of Security Center. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	UserCanOperate *bool `json:"UserCanOperate,omitempty" xml:"UserCanOperate,omitempty"`
}

func (s DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse) SetMarkField(v []*DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse {
	s.MarkField = v
	return s
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse) SetMarkFieldsSource(v []*DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse {
	s.MarkFieldsSource = v
	return s
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse) SetOperationCode(v string) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse {
	s.OperationCode = &v
	return s
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse) SetOperationParams(v string) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse {
	s.OperationParams = &v
	return s
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse) SetUserCanOperate(v bool) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponse {
	s.UserCanOperate = &v
	return s
}

type DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField struct {
	// The alias of the field that is used in the whitelist rule.
	FiledAliasName *string `json:"FiledAliasName,omitempty" xml:"FiledAliasName,omitempty"`
	// The field that is used in the whitelist rule.
	FiledName *string `json:"FiledName,omitempty" xml:"FiledName,omitempty"`
	// The operation that is used in the whitelist rule. Valid values:
	//
	// *   **contains**: contains
	// *   **notContains**: does not contain
	// *   **regex**: regular expression
	// *   **strEqual**: equals
	// *   **strNotEqual**: does not equal
	MarkMisType *string `json:"MarkMisType,omitempty" xml:"MarkMisType,omitempty"`
	// The value of the field that is used in the whitelist rule.
	MarkMisValue *string `json:"MarkMisValue,omitempty" xml:"MarkMisValue,omitempty"`
	// An array consisting of the operations that are supported by the method to add the alert event to the whitelist.
	SupportedMisType []*string `json:"SupportedMisType,omitempty" xml:"SupportedMisType,omitempty" type:"Repeated"`
	// The UUID of the server on which the alert event is detected.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) GoString() string {
	return s.String()
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) SetFiledAliasName(v string) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField {
	s.FiledAliasName = &v
	return s
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) SetFiledName(v string) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField {
	s.FiledName = &v
	return s
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) SetMarkMisType(v string) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField {
	s.MarkMisType = &v
	return s
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) SetMarkMisValue(v string) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField {
	s.MarkMisValue = &v
	return s
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) SetSupportedMisType(v []*string) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField {
	s.SupportedMisType = v
	return s
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField) SetUuid(v string) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkField {
	s.Uuid = &v
	return s
}

type DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource struct {
	// The alias of the field that can be used in the whitelist rule.
	FiledAliasName *string `json:"FiledAliasName,omitempty" xml:"FiledAliasName,omitempty"`
	// The field that can be used in the whitelist rule.
	FiledName *string `json:"FiledName,omitempty" xml:"FiledName,omitempty"`
	// The value of the field that can be used in the whitelist rule.
	MarkMisValue *string `json:"MarkMisValue,omitempty" xml:"MarkMisValue,omitempty"`
	// An array consisting of the operations that are supported by the method to add the alert event to the whitelist.
	SupportedMisType []*string `json:"SupportedMisType,omitempty" xml:"SupportedMisType,omitempty" type:"Repeated"`
}

func (s DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) GoString() string {
	return s.String()
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) SetFiledAliasName(v string) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource {
	s.FiledAliasName = &v
	return s
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) SetFiledName(v string) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource {
	s.FiledName = &v
	return s
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) SetMarkMisValue(v string) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource {
	s.MarkMisValue = &v
	return s
}

func (s *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource) SetSupportedMisType(v []*string) *DescribeSecurityEventOperationsResponseBodySecurityEventOperationsResponseMarkFieldsSource {
	s.SupportedMisType = v
	return s
}

type DescribeSecurityEventOperationsResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSecurityEventOperationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSecurityEventOperationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityEventOperationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityEventOperationsResponse) SetHeaders(v map[string]*string) *DescribeSecurityEventOperationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityEventOperationsResponse) SetStatusCode(v int32) *DescribeSecurityEventOperationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSecurityEventOperationsResponse) SetBody(v *DescribeSecurityEventOperationsResponseBody) *DescribeSecurityEventOperationsResponse {
	s.Body = v
	return s
}

type DescribeSecurityStatInfoRequest struct {
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The ID of the account that is added to the resource directory as a member for multi-account control. You can use this parameter to query the security status of the account.
	ResourceDirectoryAccountId *string `json:"ResourceDirectoryAccountId,omitempty" xml:"ResourceDirectoryAccountId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeSecurityStatInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityStatInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityStatInfoRequest) SetLang(v string) *DescribeSecurityStatInfoRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSecurityStatInfoRequest) SetResourceDirectoryAccountId(v string) *DescribeSecurityStatInfoRequest {
	s.ResourceDirectoryAccountId = &v
	return s
}

func (s *DescribeSecurityStatInfoRequest) SetSourceIp(v string) *DescribeSecurityStatInfoRequest {
	s.SourceIp = &v
	return s
}

type DescribeSecurityStatInfoResponseBody struct {
	// The detailed statistics of attacks.
	AttackEvent *DescribeSecurityStatInfoResponseBodyAttackEvent `json:"AttackEvent,omitempty" xml:"AttackEvent,omitempty" type:"Struct"`
	// The detailed statistics of baseline risk items.
	HealthCheck *DescribeSecurityStatInfoResponseBodyHealthCheck `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The detailed statistics of unhandled alerts.
	SecurityEvent *DescribeSecurityStatInfoResponseBodySecurityEvent `json:"SecurityEvent,omitempty" xml:"SecurityEvent,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The detailed statistics of unfixed vulnerabilities.
	Vulnerability *DescribeSecurityStatInfoResponseBodyVulnerability `json:"Vulnerability,omitempty" xml:"Vulnerability,omitempty" type:"Struct"`
}

func (s DescribeSecurityStatInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityStatInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityStatInfoResponseBody) SetAttackEvent(v *DescribeSecurityStatInfoResponseBodyAttackEvent) *DescribeSecurityStatInfoResponseBody {
	s.AttackEvent = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBody) SetHealthCheck(v *DescribeSecurityStatInfoResponseBodyHealthCheck) *DescribeSecurityStatInfoResponseBody {
	s.HealthCheck = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBody) SetRequestId(v string) *DescribeSecurityStatInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBody) SetSecurityEvent(v *DescribeSecurityStatInfoResponseBodySecurityEvent) *DescribeSecurityStatInfoResponseBody {
	s.SecurityEvent = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBody) SetSuccess(v bool) *DescribeSecurityStatInfoResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBody) SetVulnerability(v *DescribeSecurityStatInfoResponseBodyVulnerability) *DescribeSecurityStatInfoResponseBody {
	s.Vulnerability = v
	return s
}

type DescribeSecurityStatInfoResponseBodyAttackEvent struct {
	// The points in time when the number of attacks is collected in the trend chart.
	DateArray []*string `json:"DateArray,omitempty" xml:"DateArray,omitempty" type:"Repeated"`
	// The total number of attacks on the current day.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The numbers of attacks at all points in time.
	ValueArray []*string `json:"ValueArray,omitempty" xml:"ValueArray,omitempty" type:"Repeated"`
}

func (s DescribeSecurityStatInfoResponseBodyAttackEvent) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityStatInfoResponseBodyAttackEvent) GoString() string {
	return s.String()
}

func (s *DescribeSecurityStatInfoResponseBodyAttackEvent) SetDateArray(v []*string) *DescribeSecurityStatInfoResponseBodyAttackEvent {
	s.DateArray = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyAttackEvent) SetTotalCount(v int32) *DescribeSecurityStatInfoResponseBodyAttackEvent {
	s.TotalCount = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyAttackEvent) SetValueArray(v []*string) *DescribeSecurityStatInfoResponseBodyAttackEvent {
	s.ValueArray = v
	return s
}

type DescribeSecurityStatInfoResponseBodyHealthCheck struct {
	// The points in time when data of baseline risk items is collected in the trend chart.
	DateArray []*string `json:"DateArray,omitempty" xml:"DateArray,omitempty" type:"Repeated"`
	// The number of baseline risk items that have the high-risk level on the current day.
	HighCount *int32 `json:"HighCount,omitempty" xml:"HighCount,omitempty"`
	// The numbers of baseline risk items that have the high-risk level at all points in time.
	HighList []*string `json:"HighList,omitempty" xml:"HighList,omitempty" type:"Repeated"`
	// The risk levels of baseline risk items.
	LevelsOn []*string `json:"LevelsOn,omitempty" xml:"LevelsOn,omitempty" type:"Repeated"`
	// The number of baseline risk items that have the low-risk level on the current day.
	LowCount *int32 `json:"LowCount,omitempty" xml:"LowCount,omitempty"`
	// The numbers of baseline risk items that have the low-risk level at all points in time.
	LowList []*string `json:"LowList,omitempty" xml:"LowList,omitempty" type:"Repeated"`
	// The number of baseline risk items that have the medium-risk level on the current day.
	MediumCount *int32 `json:"MediumCount,omitempty" xml:"MediumCount,omitempty"`
	// The numbers of baseline risk items that have the medium-risk level at all points in time.
	MediumList []*string `json:"MediumList,omitempty" xml:"MediumList,omitempty" type:"Repeated"`
	// The time periods during which data of baseline risk items is collected.
	TimeArray []*string `json:"TimeArray,omitempty" xml:"TimeArray,omitempty" type:"Repeated"`
	// The total number of baseline risk items on the current day.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The total number of baseline risk items at all points in time.
	ValueArray []*string `json:"ValueArray,omitempty" xml:"ValueArray,omitempty" type:"Repeated"`
}

func (s DescribeSecurityStatInfoResponseBodyHealthCheck) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityStatInfoResponseBodyHealthCheck) GoString() string {
	return s.String()
}

func (s *DescribeSecurityStatInfoResponseBodyHealthCheck) SetDateArray(v []*string) *DescribeSecurityStatInfoResponseBodyHealthCheck {
	s.DateArray = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyHealthCheck) SetHighCount(v int32) *DescribeSecurityStatInfoResponseBodyHealthCheck {
	s.HighCount = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyHealthCheck) SetHighList(v []*string) *DescribeSecurityStatInfoResponseBodyHealthCheck {
	s.HighList = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyHealthCheck) SetLevelsOn(v []*string) *DescribeSecurityStatInfoResponseBodyHealthCheck {
	s.LevelsOn = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyHealthCheck) SetLowCount(v int32) *DescribeSecurityStatInfoResponseBodyHealthCheck {
	s.LowCount = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyHealthCheck) SetLowList(v []*string) *DescribeSecurityStatInfoResponseBodyHealthCheck {
	s.LowList = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyHealthCheck) SetMediumCount(v int32) *DescribeSecurityStatInfoResponseBodyHealthCheck {
	s.MediumCount = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyHealthCheck) SetMediumList(v []*string) *DescribeSecurityStatInfoResponseBodyHealthCheck {
	s.MediumList = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyHealthCheck) SetTimeArray(v []*string) *DescribeSecurityStatInfoResponseBodyHealthCheck {
	s.TimeArray = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyHealthCheck) SetTotalCount(v int32) *DescribeSecurityStatInfoResponseBodyHealthCheck {
	s.TotalCount = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyHealthCheck) SetValueArray(v []*string) *DescribeSecurityStatInfoResponseBodyHealthCheck {
	s.ValueArray = v
	return s
}

type DescribeSecurityStatInfoResponseBodySecurityEvent struct {
	// The points in time when data of unhandled alerts is collected in the trend chart.
	DateArray []*string `json:"DateArray,omitempty" xml:"DateArray,omitempty" type:"Repeated"`
	// The risk levels of unhandled alerts.
	LevelsOn []*string `json:"LevelsOn,omitempty" xml:"LevelsOn,omitempty" type:"Repeated"`
	// The number of **remind** alerts on the current day.
	RemindCount *int32 `json:"RemindCount,omitempty" xml:"RemindCount,omitempty"`
	// The numbers of remind alerts at all points in time.
	RemindList []*string `json:"RemindList,omitempty" xml:"RemindList,omitempty" type:"Repeated"`
	// The number of **serious** alerts on the current day.
	SeriousCount *int32 `json:"SeriousCount,omitempty" xml:"SeriousCount,omitempty"`
	// The numbers of serious alerts at all points in time.
	SeriousList []*string `json:"SeriousList,omitempty" xml:"SeriousList,omitempty" type:"Repeated"`
	// The number of **suspicious** alerts on the current day.
	SuspiciousCount *int32 `json:"SuspiciousCount,omitempty" xml:"SuspiciousCount,omitempty"`
	// The numbers of suspicious alerts at all points in time.
	SuspiciousList []*string `json:"SuspiciousList,omitempty" xml:"SuspiciousList,omitempty" type:"Repeated"`
	// The time periods during which data of the same alert is collected.
	TimeArray []*string `json:"TimeArray,omitempty" xml:"TimeArray,omitempty" type:"Repeated"`
	// The total number of unhandled alerts on the current day.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The numbers of unhandled alerts at all points in time.
	ValueArray []*string `json:"ValueArray,omitempty" xml:"ValueArray,omitempty" type:"Repeated"`
}

func (s DescribeSecurityStatInfoResponseBodySecurityEvent) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityStatInfoResponseBodySecurityEvent) GoString() string {
	return s.String()
}

func (s *DescribeSecurityStatInfoResponseBodySecurityEvent) SetDateArray(v []*string) *DescribeSecurityStatInfoResponseBodySecurityEvent {
	s.DateArray = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodySecurityEvent) SetLevelsOn(v []*string) *DescribeSecurityStatInfoResponseBodySecurityEvent {
	s.LevelsOn = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodySecurityEvent) SetRemindCount(v int32) *DescribeSecurityStatInfoResponseBodySecurityEvent {
	s.RemindCount = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodySecurityEvent) SetRemindList(v []*string) *DescribeSecurityStatInfoResponseBodySecurityEvent {
	s.RemindList = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodySecurityEvent) SetSeriousCount(v int32) *DescribeSecurityStatInfoResponseBodySecurityEvent {
	s.SeriousCount = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodySecurityEvent) SetSeriousList(v []*string) *DescribeSecurityStatInfoResponseBodySecurityEvent {
	s.SeriousList = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodySecurityEvent) SetSuspiciousCount(v int32) *DescribeSecurityStatInfoResponseBodySecurityEvent {
	s.SuspiciousCount = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodySecurityEvent) SetSuspiciousList(v []*string) *DescribeSecurityStatInfoResponseBodySecurityEvent {
	s.SuspiciousList = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodySecurityEvent) SetTimeArray(v []*string) *DescribeSecurityStatInfoResponseBodySecurityEvent {
	s.TimeArray = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodySecurityEvent) SetTotalCount(v int32) *DescribeSecurityStatInfoResponseBodySecurityEvent {
	s.TotalCount = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodySecurityEvent) SetValueArray(v []*string) *DescribeSecurityStatInfoResponseBodySecurityEvent {
	s.ValueArray = v
	return s
}

type DescribeSecurityStatInfoResponseBodyVulnerability struct {
	// The number of **high-risk** unfixed vulnerabilities on the current day.
	AsapCount *int32 `json:"AsapCount,omitempty" xml:"AsapCount,omitempty"`
	// The numbers of high-risk unfixed vulnerabilities at all points in time.
	AsapList []*string `json:"AsapList,omitempty" xml:"AsapList,omitempty" type:"Repeated"`
	// The points in time when data of unfixed vulnerabilities is collected in the trend chart.
	DateArray []*string `json:"DateArray,omitempty" xml:"DateArray,omitempty" type:"Repeated"`
	// The number of **medium-risk** unfixed vulnerabilities on the current day.
	LaterCount *int32 `json:"LaterCount,omitempty" xml:"LaterCount,omitempty"`
	// The numbers of medium-risk unfixed vulnerabilities at all points in time.
	LaterList []*string `json:"LaterList,omitempty" xml:"LaterList,omitempty" type:"Repeated"`
	// The risk levels of unfixed vulnerabilities.
	LevelsOn []*string `json:"LevelsOn,omitempty" xml:"LevelsOn,omitempty" type:"Repeated"`
	// The number of **low-risk** unfixed vulnerabilities on the current day.
	NntfCount *int32 `json:"NntfCount,omitempty" xml:"NntfCount,omitempty"`
	// The numbers of low-risk unfixed vulnerabilities at all points in time.
	NntfList []*string `json:"NntfList,omitempty" xml:"NntfList,omitempty" type:"Repeated"`
	// The time periods during which data of unfixed vulnerabilities is collected.
	TimeArray []*string `json:"TimeArray,omitempty" xml:"TimeArray,omitempty" type:"Repeated"`
	// The total number of unfixed vulnerabilities on the current day.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The numbers of unfixed vulnerabilities at all points in time.
	ValueArray []*string `json:"ValueArray,omitempty" xml:"ValueArray,omitempty" type:"Repeated"`
}

func (s DescribeSecurityStatInfoResponseBodyVulnerability) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityStatInfoResponseBodyVulnerability) GoString() string {
	return s.String()
}

func (s *DescribeSecurityStatInfoResponseBodyVulnerability) SetAsapCount(v int32) *DescribeSecurityStatInfoResponseBodyVulnerability {
	s.AsapCount = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyVulnerability) SetAsapList(v []*string) *DescribeSecurityStatInfoResponseBodyVulnerability {
	s.AsapList = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyVulnerability) SetDateArray(v []*string) *DescribeSecurityStatInfoResponseBodyVulnerability {
	s.DateArray = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyVulnerability) SetLaterCount(v int32) *DescribeSecurityStatInfoResponseBodyVulnerability {
	s.LaterCount = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyVulnerability) SetLaterList(v []*string) *DescribeSecurityStatInfoResponseBodyVulnerability {
	s.LaterList = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyVulnerability) SetLevelsOn(v []*string) *DescribeSecurityStatInfoResponseBodyVulnerability {
	s.LevelsOn = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyVulnerability) SetNntfCount(v int32) *DescribeSecurityStatInfoResponseBodyVulnerability {
	s.NntfCount = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyVulnerability) SetNntfList(v []*string) *DescribeSecurityStatInfoResponseBodyVulnerability {
	s.NntfList = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyVulnerability) SetTimeArray(v []*string) *DescribeSecurityStatInfoResponseBodyVulnerability {
	s.TimeArray = v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyVulnerability) SetTotalCount(v int32) *DescribeSecurityStatInfoResponseBodyVulnerability {
	s.TotalCount = &v
	return s
}

func (s *DescribeSecurityStatInfoResponseBodyVulnerability) SetValueArray(v []*string) *DescribeSecurityStatInfoResponseBodyVulnerability {
	s.ValueArray = v
	return s
}

type DescribeSecurityStatInfoResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSecurityStatInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSecurityStatInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityStatInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityStatInfoResponse) SetHeaders(v map[string]*string) *DescribeSecurityStatInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityStatInfoResponse) SetStatusCode(v int32) *DescribeSecurityStatInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSecurityStatInfoResponse) SetBody(v *DescribeSecurityStatInfoResponseBody) *DescribeSecurityStatInfoResponse {
	s.Body = v
	return s
}

type DescribeServiceLinkedRoleStatusRequest struct {
	// The service-linked role. Default value: **AliyunServiceRoleForSas**. Valid values:
	//
	// *   **AliyunServiceRoleForSas**: the service-linked role of Security Center. Security Center assumes this role to access the resources of other cloud services within your account.
	// *   **AliyunServiceRoleForSasCspm**: the service-linked role of Security Center-CSPM. Security Center-CSPM assumes this role to access the resources of other cloud services within your account.
	ServiceLinkedRole *string `json:"ServiceLinkedRole,omitempty" xml:"ServiceLinkedRole,omitempty"`
}

func (s DescribeServiceLinkedRoleStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceLinkedRoleStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeServiceLinkedRoleStatusRequest) SetServiceLinkedRole(v string) *DescribeServiceLinkedRoleStatusRequest {
	s.ServiceLinkedRole = &v
	return s
}

type DescribeServiceLinkedRoleStatusResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status information about the service-linked role.
	RoleStatus *DescribeServiceLinkedRoleStatusResponseBodyRoleStatus `json:"RoleStatus,omitempty" xml:"RoleStatus,omitempty" type:"Struct"`
}

func (s DescribeServiceLinkedRoleStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceLinkedRoleStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeServiceLinkedRoleStatusResponseBody) SetRequestId(v string) *DescribeServiceLinkedRoleStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeServiceLinkedRoleStatusResponseBody) SetRoleStatus(v *DescribeServiceLinkedRoleStatusResponseBodyRoleStatus) *DescribeServiceLinkedRoleStatusResponseBody {
	s.RoleStatus = v
	return s
}

type DescribeServiceLinkedRoleStatusResponseBodyRoleStatus struct {
	// Indicates whether the service-linked role is created. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeServiceLinkedRoleStatusResponseBodyRoleStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceLinkedRoleStatusResponseBodyRoleStatus) GoString() string {
	return s.String()
}

func (s *DescribeServiceLinkedRoleStatusResponseBodyRoleStatus) SetStatus(v bool) *DescribeServiceLinkedRoleStatusResponseBodyRoleStatus {
	s.Status = &v
	return s
}

type DescribeServiceLinkedRoleStatusResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeServiceLinkedRoleStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeServiceLinkedRoleStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeServiceLinkedRoleStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeServiceLinkedRoleStatusResponse) SetHeaders(v map[string]*string) *DescribeServiceLinkedRoleStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeServiceLinkedRoleStatusResponse) SetStatusCode(v int32) *DescribeServiceLinkedRoleStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeServiceLinkedRoleStatusResponse) SetBody(v *DescribeServiceLinkedRoleStatusResponseBody) *DescribeServiceLinkedRoleStatusResponse {
	s.Body = v
	return s
}

type DescribeSimilarEventScenariosRequest struct {
	ResourceOwnerId *int64 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The ID of the alert to query.
	SecurityEventId *int64 `json:"SecurityEventId,omitempty" xml:"SecurityEventId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeSimilarEventScenariosRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimilarEventScenariosRequest) GoString() string {
	return s.String()
}

func (s *DescribeSimilarEventScenariosRequest) SetResourceOwnerId(v int64) *DescribeSimilarEventScenariosRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSimilarEventScenariosRequest) SetSecurityEventId(v int64) *DescribeSimilarEventScenariosRequest {
	s.SecurityEventId = &v
	return s
}

func (s *DescribeSimilarEventScenariosRequest) SetSourceIp(v string) *DescribeSimilarEventScenariosRequest {
	s.SourceIp = &v
	return s
}

type DescribeSimilarEventScenariosResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The scenarios in which you can handle the alerts triggered by the same rule or rules of the same type.
	Scenarios []*DescribeSimilarEventScenariosResponseBodyScenarios `json:"Scenarios,omitempty" xml:"Scenarios,omitempty" type:"Repeated"`
}

func (s DescribeSimilarEventScenariosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimilarEventScenariosResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSimilarEventScenariosResponseBody) SetRequestId(v string) *DescribeSimilarEventScenariosResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSimilarEventScenariosResponseBody) SetScenarios(v []*DescribeSimilarEventScenariosResponseBodyScenarios) *DescribeSimilarEventScenariosResponseBody {
	s.Scenarios = v
	return s
}

type DescribeSimilarEventScenariosResponseBodyScenarios struct {
	// The code of the scenario. Valid values: Valid values:
	// - **default**: the same alert type
	// - **same_file_content**: the same file content rule
	// - **same_ip**: the same IP address rule
	// - **same_url**: the same URL rule
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s DescribeSimilarEventScenariosResponseBodyScenarios) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimilarEventScenariosResponseBodyScenarios) GoString() string {
	return s.String()
}

func (s *DescribeSimilarEventScenariosResponseBodyScenarios) SetCode(v string) *DescribeSimilarEventScenariosResponseBodyScenarios {
	s.Code = &v
	return s
}

type DescribeSimilarEventScenariosResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSimilarEventScenariosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSimilarEventScenariosResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimilarEventScenariosResponse) GoString() string {
	return s.String()
}

func (s *DescribeSimilarEventScenariosResponse) SetHeaders(v map[string]*string) *DescribeSimilarEventScenariosResponse {
	s.Headers = v
	return s
}

func (s *DescribeSimilarEventScenariosResponse) SetStatusCode(v int32) *DescribeSimilarEventScenariosResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSimilarEventScenariosResponse) SetBody(v *DescribeSimilarEventScenariosResponseBody) *DescribeSimilarEventScenariosResponse {
	s.Body = v
	return s
}

type DescribeSimilarSecurityEventsRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize        *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerId *int64 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The ID of the task. You can call the [CreateSimilarSecurityEventsQueryTask](~~CreateSimilarSecurityEventsQueryTask~~) operation to query the IDs of tasks.
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeSimilarSecurityEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimilarSecurityEventsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSimilarSecurityEventsRequest) SetCurrentPage(v int32) *DescribeSimilarSecurityEventsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSimilarSecurityEventsRequest) SetLang(v string) *DescribeSimilarSecurityEventsRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSimilarSecurityEventsRequest) SetPageSize(v int32) *DescribeSimilarSecurityEventsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSimilarSecurityEventsRequest) SetResourceOwnerId(v int64) *DescribeSimilarSecurityEventsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSimilarSecurityEventsRequest) SetSourceIp(v string) *DescribeSimilarSecurityEventsRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeSimilarSecurityEventsRequest) SetTaskId(v int64) *DescribeSimilarSecurityEventsRequest {
	s.TaskId = &v
	return s
}

type DescribeSimilarSecurityEventsResponseBody struct {
	// The pagination information.
	PageInfo *DescribeSimilarSecurityEventsResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array consisting of the alert events that are triggered by the same rule or of the same alert type.
	SecurityEventsResponse []*DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse `json:"SecurityEventsResponse,omitempty" xml:"SecurityEventsResponse,omitempty" type:"Repeated"`
}

func (s DescribeSimilarSecurityEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimilarSecurityEventsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSimilarSecurityEventsResponseBody) SetPageInfo(v *DescribeSimilarSecurityEventsResponseBodyPageInfo) *DescribeSimilarSecurityEventsResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeSimilarSecurityEventsResponseBody) SetRequestId(v string) *DescribeSimilarSecurityEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSimilarSecurityEventsResponseBody) SetSecurityEventsResponse(v []*DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse) *DescribeSimilarSecurityEventsResponseBody {
	s.SecurityEventsResponse = v
	return s
}

type DescribeSimilarSecurityEventsResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSimilarSecurityEventsResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimilarSecurityEventsResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeSimilarSecurityEventsResponseBodyPageInfo) SetCount(v int32) *DescribeSimilarSecurityEventsResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeSimilarSecurityEventsResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeSimilarSecurityEventsResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSimilarSecurityEventsResponseBodyPageInfo) SetPageSize(v int32) *DescribeSimilarSecurityEventsResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeSimilarSecurityEventsResponseBodyPageInfo) SetTotalCount(v int32) *DescribeSimilarSecurityEventsResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse struct {
	// The name of the alert event.
	EventName *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	// The alert type of the alert event. Valid values:
	//
	// *   Suspicious process
	// *   Webshell
	// *   Unusual logon
	// *   Exception
	// *   Sensitive file tampering
	// *   Malicious process (cloud threat detection)
	// *   Suspicious network connection
	// *   Other
	// *   Abnormal account
	// *   Application intrusion event
	// *   Cloud threat detection
	// *   Precise defense
	// *   Application whitelist
	// *   Persistent webshell
	// *   Web application threat detection
	// *   Malicious script
	// *   Threat intelligence
	// *   Malicious network activity
	// *   Cluster exception
	// *   Webshell (on-premises threat detection)
	// *   Vulnerability exploitation
	// *   Malicious process (on-premises threat detection)
	// *   Trusted exception
	//
	// For more information about alert types, see [Alerts](~~191144~~).
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The timestamp when the alert event was last detected. Unit: milliseconds.
	LastTime *int64 `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	// The timestamp when the alert event was first detected. Unit: milliseconds.
	OccurrenceTime *int64 `json:"OccurrenceTime,omitempty" xml:"OccurrenceTime,omitempty"`
	// The ID of the alert event.
	SecurityEventId *int64 `json:"SecurityEventId,omitempty" xml:"SecurityEventId,omitempty"`
	// The UUID of the server that is affected by the alert event.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse) SetEventName(v string) *DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse {
	s.EventName = &v
	return s
}

func (s *DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse) SetEventType(v string) *DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse {
	s.EventType = &v
	return s
}

func (s *DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse) SetLastTime(v int64) *DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse {
	s.LastTime = &v
	return s
}

func (s *DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse) SetOccurrenceTime(v int64) *DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse {
	s.OccurrenceTime = &v
	return s
}

func (s *DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse) SetSecurityEventId(v int64) *DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse {
	s.SecurityEventId = &v
	return s
}

func (s *DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse) SetUuid(v string) *DescribeSimilarSecurityEventsResponseBodySecurityEventsResponse {
	s.Uuid = &v
	return s
}

type DescribeSimilarSecurityEventsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSimilarSecurityEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSimilarSecurityEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSimilarSecurityEventsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSimilarSecurityEventsResponse) SetHeaders(v map[string]*string) *DescribeSimilarSecurityEventsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSimilarSecurityEventsResponse) SetStatusCode(v int32) *DescribeSimilarSecurityEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSimilarSecurityEventsResponse) SetBody(v *DescribeSimilarSecurityEventsResponseBody) *DescribeSimilarSecurityEventsResponse {
	s.Body = v
	return s
}

type DescribeSnapshotsRequest struct {
	ApiVersion    *string `json:"ApiVersion,omitempty" xml:"ApiVersion,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	IsAliYunEcs   *string `json:"IsAliYunEcs,omitempty" xml:"IsAliYunEcs,omitempty"`
	MachineRegion *string `json:"MachineRegion,omitempty" xml:"MachineRegion,omitempty"`
	MachineRemark *string `json:"MachineRemark,omitempty" xml:"MachineRemark,omitempty"`
	NextToken     *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StatusList    *string `json:"StatusList,omitempty" xml:"StatusList,omitempty"`
	Uuid          *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeSnapshotsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsRequest) SetApiVersion(v string) *DescribeSnapshotsRequest {
	s.ApiVersion = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetCurrentPage(v int32) *DescribeSnapshotsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetIsAliYunEcs(v string) *DescribeSnapshotsRequest {
	s.IsAliYunEcs = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetMachineRegion(v string) *DescribeSnapshotsRequest {
	s.MachineRegion = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetMachineRemark(v string) *DescribeSnapshotsRequest {
	s.MachineRemark = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetNextToken(v string) *DescribeSnapshotsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetPageSize(v int32) *DescribeSnapshotsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetStatusList(v string) *DescribeSnapshotsRequest {
	s.StatusList = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetUuid(v string) *DescribeSnapshotsRequest {
	s.Uuid = &v
	return s
}

type DescribeSnapshotsResponseBody struct {
	PageInfo  *DescribeSnapshotsResponseBodyPageInfo    `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Snapshots []*DescribeSnapshotsResponseBodySnapshots `json:"Snapshots,omitempty" xml:"Snapshots,omitempty" type:"Repeated"`
}

func (s DescribeSnapshotsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseBody) SetPageInfo(v *DescribeSnapshotsResponseBodyPageInfo) *DescribeSnapshotsResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeSnapshotsResponseBody) SetRequestId(v string) *DescribeSnapshotsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSnapshotsResponseBody) SetSnapshots(v []*DescribeSnapshotsResponseBodySnapshots) *DescribeSnapshotsResponseBody {
	s.Snapshots = v
	return s
}

type DescribeSnapshotsResponseBodyPageInfo struct {
	Count       *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	NextToken   *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSnapshotsResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseBodyPageInfo) SetCount(v int32) *DescribeSnapshotsResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeSnapshotsResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeSnapshotsResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSnapshotsResponseBodyPageInfo) SetNextToken(v string) *DescribeSnapshotsResponseBodyPageInfo {
	s.NextToken = &v
	return s
}

func (s *DescribeSnapshotsResponseBodyPageInfo) SetPageSize(v int32) *DescribeSnapshotsResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotsResponseBodyPageInfo) SetTotalCount(v int32) *DescribeSnapshotsResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeSnapshotsResponseBodySnapshots struct {
	ActualBytes        *int64    `json:"ActualBytes,omitempty" xml:"ActualBytes,omitempty"`
	ActualItems        *int64    `json:"ActualItems,omitempty" xml:"ActualItems,omitempty"`
	BytesDone          *int64    `json:"BytesDone,omitempty" xml:"BytesDone,omitempty"`
	BytesTotal         *int64    `json:"BytesTotal,omitempty" xml:"BytesTotal,omitempty"`
	ClientId           *string   `json:"ClientId,omitempty" xml:"ClientId,omitempty"`
	ClientVersion      *string   `json:"ClientVersion,omitempty" xml:"ClientVersion,omitempty"`
	CreatedTime        *int64    `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	ErrorFile          *string   `json:"ErrorFile,omitempty" xml:"ErrorFile,omitempty"`
	InstanceId         *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ItemsDone          *int64    `json:"ItemsDone,omitempty" xml:"ItemsDone,omitempty"`
	ItemsTotal         *int64    `json:"ItemsTotal,omitempty" xml:"ItemsTotal,omitempty"`
	JobId              *string   `json:"JobId,omitempty" xml:"JobId,omitempty"`
	ParentSnapshotHash *string   `json:"ParentSnapshotHash,omitempty" xml:"ParentSnapshotHash,omitempty"`
	Path               *string   `json:"Path,omitempty" xml:"Path,omitempty"`
	Paths              []*string `json:"Paths,omitempty" xml:"Paths,omitempty" type:"Repeated"`
	PlanId             *string   `json:"PlanId,omitempty" xml:"PlanId,omitempty"`
	RegionId           *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Retention          *int64    `json:"Retention,omitempty" xml:"Retention,omitempty"`
	SnapshotHash       *string   `json:"SnapshotHash,omitempty" xml:"SnapshotHash,omitempty"`
	SnapshotId         *string   `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	SourceType         *string   `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Status             *string   `json:"Status,omitempty" xml:"Status,omitempty"`
	Uuid               *string   `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	VaultId            *string   `json:"VaultId,omitempty" xml:"VaultId,omitempty"`
}

func (s DescribeSnapshotsResponseBodySnapshots) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseBodySnapshots) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetActualBytes(v int64) *DescribeSnapshotsResponseBodySnapshots {
	s.ActualBytes = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetActualItems(v int64) *DescribeSnapshotsResponseBodySnapshots {
	s.ActualItems = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetBytesDone(v int64) *DescribeSnapshotsResponseBodySnapshots {
	s.BytesDone = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetBytesTotal(v int64) *DescribeSnapshotsResponseBodySnapshots {
	s.BytesTotal = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetClientId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.ClientId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetClientVersion(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.ClientVersion = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetCreatedTime(v int64) *DescribeSnapshotsResponseBodySnapshots {
	s.CreatedTime = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetErrorFile(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.ErrorFile = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetInstanceId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.InstanceId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetItemsDone(v int64) *DescribeSnapshotsResponseBodySnapshots {
	s.ItemsDone = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetItemsTotal(v int64) *DescribeSnapshotsResponseBodySnapshots {
	s.ItemsTotal = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetJobId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.JobId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetParentSnapshotHash(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.ParentSnapshotHash = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetPath(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Path = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetPaths(v []*string) *DescribeSnapshotsResponseBodySnapshots {
	s.Paths = v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetPlanId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.PlanId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetRegionId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.RegionId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetRetention(v int64) *DescribeSnapshotsResponseBodySnapshots {
	s.Retention = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSnapshotHash(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SnapshotHash = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSnapshotId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SnapshotId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSourceType(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SourceType = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetStatus(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Status = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetUuid(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Uuid = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetVaultId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.VaultId = &v
	return s
}

type DescribeSnapshotsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSnapshotsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSnapshotsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponse) SetHeaders(v map[string]*string) *DescribeSnapshotsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSnapshotsResponse) SetStatusCode(v int32) *DescribeSnapshotsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSnapshotsResponse) SetBody(v *DescribeSnapshotsResponseBody) *DescribeSnapshotsResponse {
	s.Body = v
	return s
}

type DescribeStrategyRequest struct {
	// The type of the baseline check policy that you want to query. Valid values:
	//
	// *   **common**: standard baseline check policy
	// *   **custom**: custom baseline check policy
	CustomType *string `json:"CustomType,omitempty" xml:"CustomType,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The ID of the baseline check policy that you want to query. Separate multiple IDs with commas (,).
	StrategyIds *string `json:"StrategyIds,omitempty" xml:"StrategyIds,omitempty"`
}

func (s DescribeStrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyRequest) GoString() string {
	return s.String()
}

func (s *DescribeStrategyRequest) SetCustomType(v string) *DescribeStrategyRequest {
	s.CustomType = &v
	return s
}

func (s *DescribeStrategyRequest) SetLang(v string) *DescribeStrategyRequest {
	s.Lang = &v
	return s
}

func (s *DescribeStrategyRequest) SetSourceIp(v string) *DescribeStrategyRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeStrategyRequest) SetStrategyIds(v string) *DescribeStrategyRequest {
	s.StrategyIds = &v
	return s
}

type DescribeStrategyResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of the baseline check policies.
	Strategies []*DescribeStrategyResponseBodyStrategies `json:"Strategies,omitempty" xml:"Strategies,omitempty" type:"Repeated"`
}

func (s DescribeStrategyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStrategyResponseBody) SetRequestId(v string) *DescribeStrategyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStrategyResponseBody) SetStrategies(v []*DescribeStrategyResponseBodyStrategies) *DescribeStrategyResponseBody {
	s.Strategies = v
	return s
}

type DescribeStrategyResponseBodyStrategies struct {
	// An array consisting of the assets to which the baseline check policy is applied.
	ConfigTargets []*DescribeStrategyResponseBodyStrategiesConfigTargets `json:"ConfigTargets,omitempty" xml:"ConfigTargets,omitempty" type:"Repeated"`
	// The type of the baseline check policy. Valid values:
	//
	// *   **common**: standard baseline check policy
	// *   **custom**: custom baseline check policy
	CustomType *string `json:"CustomType,omitempty" xml:"CustomType,omitempty"`
	// The cycle of the baseline check. Valid values:
	//
	// *   **1**: every 2 days
	// *   **3**: every 4 days
	// *   **7**: every 8 days
	// *   30: every 31 days
	CycleDays *int32 `json:"CycleDays,omitempty" xml:"CycleDays,omitempty"`
	// The time when the baseline check starts. Valid values:
	//
	// *   **0**: The baseline check starts within the time range from 00:00 to 06:00.
	// *   **6**: The baseline check starts within the time range from 06:00 to 12:00.
	// *   **12**: The baseline check starts within the time range from 12:00 to 18:00.
	// *   **18**: The baseline check starts within the time range from 18:00 to 24:00.
	CycleStartTime *int32 `json:"CycleStartTime,omitempty" xml:"CycleStartTime,omitempty"`
	// The number of the assets to which the baseline check policy is applied.
	EcsCount *int32 `json:"EcsCount,omitempty" xml:"EcsCount,omitempty"`
	// The time when the baseline check based on the baseline check policy ends.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The status of the baseline check policy. Valid values:
	//
	// *   **1**: disabled
	// *   **2**: enabled
	ExecStatus *int32 `json:"ExecStatus,omitempty" xml:"ExecStatus,omitempty"`
	// The ID of the baseline check policy.
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the baseline check policy.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The proportion of risk items to all baseline check items in the baseline check result.
	PassRate *int32 `json:"PassRate,omitempty" xml:"PassRate,omitempty"`
	// The number of the assets on which the baseline check is complete.
	ProcessRate *int32 `json:"ProcessRate,omitempty" xml:"ProcessRate,omitempty"`
	// The number of baseline check items in the baseline check policy.
	RiskCount *int32 `json:"RiskCount,omitempty" xml:"RiskCount,omitempty"`
	// The time when the baseline check based on the baseline check policy starts.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The source of the baseline check policy. Valid values:
	//
	// *   **1**: built-in policy, which indicates that the baseline check policy is provided and performed by Security Center by default.
	// *   **2**: user-defined policy, which can be a standard or custom baseline check policy.
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeStrategyResponseBodyStrategies) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyResponseBodyStrategies) GoString() string {
	return s.String()
}

func (s *DescribeStrategyResponseBodyStrategies) SetConfigTargets(v []*DescribeStrategyResponseBodyStrategiesConfigTargets) *DescribeStrategyResponseBodyStrategies {
	s.ConfigTargets = v
	return s
}

func (s *DescribeStrategyResponseBodyStrategies) SetCustomType(v string) *DescribeStrategyResponseBodyStrategies {
	s.CustomType = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategies) SetCycleDays(v int32) *DescribeStrategyResponseBodyStrategies {
	s.CycleDays = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategies) SetCycleStartTime(v int32) *DescribeStrategyResponseBodyStrategies {
	s.CycleStartTime = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategies) SetEcsCount(v int32) *DescribeStrategyResponseBodyStrategies {
	s.EcsCount = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategies) SetEndTime(v string) *DescribeStrategyResponseBodyStrategies {
	s.EndTime = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategies) SetExecStatus(v int32) *DescribeStrategyResponseBodyStrategies {
	s.ExecStatus = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategies) SetId(v int32) *DescribeStrategyResponseBodyStrategies {
	s.Id = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategies) SetName(v string) *DescribeStrategyResponseBodyStrategies {
	s.Name = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategies) SetPassRate(v int32) *DescribeStrategyResponseBodyStrategies {
	s.PassRate = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategies) SetProcessRate(v int32) *DescribeStrategyResponseBodyStrategies {
	s.ProcessRate = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategies) SetRiskCount(v int32) *DescribeStrategyResponseBodyStrategies {
	s.RiskCount = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategies) SetStartTime(v string) *DescribeStrategyResponseBodyStrategies {
	s.StartTime = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategies) SetType(v int32) *DescribeStrategyResponseBodyStrategies {
	s.Type = &v
	return s
}

type DescribeStrategyResponseBodyStrategiesConfigTargets struct {
	// Indicates whether the baseline check policy is applied to the asset group. Valid values:
	//
	// *   **add**: yes
	// *   **del**: no
	Flag *string `json:"Flag,omitempty" xml:"Flag,omitempty"`
	// The asset group ID or UUID of the asset to which the baseline check policy is applied.
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The condition by which the baseline check policy is applied to the asset. Valid values:
	//
	// *   **groupId**: the ID of the asset group
	// *   **uuid**: the UUID of the asset
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s DescribeStrategyResponseBodyStrategiesConfigTargets) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyResponseBodyStrategiesConfigTargets) GoString() string {
	return s.String()
}

func (s *DescribeStrategyResponseBodyStrategiesConfigTargets) SetFlag(v string) *DescribeStrategyResponseBodyStrategiesConfigTargets {
	s.Flag = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategiesConfigTargets) SetTarget(v string) *DescribeStrategyResponseBodyStrategiesConfigTargets {
	s.Target = &v
	return s
}

func (s *DescribeStrategyResponseBodyStrategiesConfigTargets) SetTargetType(v string) *DescribeStrategyResponseBodyStrategiesConfigTargets {
	s.TargetType = &v
	return s
}

type DescribeStrategyResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeStrategyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeStrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyResponse) GoString() string {
	return s.String()
}

func (s *DescribeStrategyResponse) SetHeaders(v map[string]*string) *DescribeStrategyResponse {
	s.Headers = v
	return s
}

func (s *DescribeStrategyResponse) SetStatusCode(v int32) *DescribeStrategyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStrategyResponse) SetBody(v *DescribeStrategyResponseBody) *DescribeStrategyResponse {
	s.Body = v
	return s
}

type DescribeStrategyDetailRequest struct {
	// The ID of the baseline check policy.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeStrategyDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeStrategyDetailRequest) SetId(v string) *DescribeStrategyDetailRequest {
	s.Id = &v
	return s
}

func (s *DescribeStrategyDetailRequest) SetLang(v string) *DescribeStrategyDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribeStrategyDetailRequest) SetSourceIp(v string) *DescribeStrategyDetailRequest {
	s.SourceIp = &v
	return s
}

type DescribeStrategyDetailResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the baseline check policy.
	Strategy *DescribeStrategyDetailResponseBodyStrategy `json:"Strategy,omitempty" xml:"Strategy,omitempty" type:"Struct"`
}

func (s DescribeStrategyDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStrategyDetailResponseBody) SetRequestId(v string) *DescribeStrategyDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStrategyDetailResponseBody) SetStrategy(v *DescribeStrategyDetailResponseBodyStrategy) *DescribeStrategyDetailResponseBody {
	s.Strategy = v
	return s
}

type DescribeStrategyDetailResponseBodyStrategy struct {
	// The type of the baseline check policy. Valid values:
	//
	// *   **common**: standard baseline check policy
	// *   **custom**: custom baseline check policy
	CustomType *string `json:"CustomType,omitempty" xml:"CustomType,omitempty"`
	// The check interval of the policy.
	CycleDays *int32 `json:"CycleDays,omitempty" xml:"CycleDays,omitempty"`
	// The time period during which the check starts. Valid values:
	//
	// *   **0**: 00:00 to 06:00
	// *   **6**: 06:00 to 12:00
	// *   **12**: 12:00 to 18:00
	// *   **18**: 18:00 to 24:00
	CycleStartTime *int32 `json:"CycleStartTime,omitempty" xml:"CycleStartTime,omitempty"`
	// The time when the baseline check based on the baseline check policy ends.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the baseline check policy.
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the baseline check policy.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The subtype of the baselines.
	RiskSubTypeName *string `json:"RiskSubTypeName,omitempty" xml:"RiskSubTypeName,omitempty"`
	// An array that consists of the whitelist of risk items.
	RiskTypeWhiteListQueryResultList []*DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultList `json:"RiskTypeWhiteListQueryResultList,omitempty" xml:"RiskTypeWhiteListQueryResultList,omitempty" type:"Repeated"`
	// The time when the baseline check based on the baseline check policy starts.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The condition by which the baseline check policy is applied to the asset. Valid values:
	//
	// *   **groupId**: the ID of the asset group
	// *   **uuid**: the UUID of the asset
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	// The type of the baseline check policy. Valid values:
	//
	// *   **1**: standard baseline check policy
	// *   **2**: custom baseline check policy
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeStrategyDetailResponseBodyStrategy) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyDetailResponseBodyStrategy) GoString() string {
	return s.String()
}

func (s *DescribeStrategyDetailResponseBodyStrategy) SetCustomType(v string) *DescribeStrategyDetailResponseBodyStrategy {
	s.CustomType = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategy) SetCycleDays(v int32) *DescribeStrategyDetailResponseBodyStrategy {
	s.CycleDays = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategy) SetCycleStartTime(v int32) *DescribeStrategyDetailResponseBodyStrategy {
	s.CycleStartTime = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategy) SetEndTime(v string) *DescribeStrategyDetailResponseBodyStrategy {
	s.EndTime = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategy) SetId(v int32) *DescribeStrategyDetailResponseBodyStrategy {
	s.Id = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategy) SetName(v string) *DescribeStrategyDetailResponseBodyStrategy {
	s.Name = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategy) SetRiskSubTypeName(v string) *DescribeStrategyDetailResponseBodyStrategy {
	s.RiskSubTypeName = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategy) SetRiskTypeWhiteListQueryResultList(v []*DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultList) *DescribeStrategyDetailResponseBodyStrategy {
	s.RiskTypeWhiteListQueryResultList = v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategy) SetStartTime(v string) *DescribeStrategyDetailResponseBodyStrategy {
	s.StartTime = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategy) SetTargetType(v string) *DescribeStrategyDetailResponseBodyStrategy {
	s.TargetType = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategy) SetType(v int32) *DescribeStrategyDetailResponseBodyStrategy {
	s.Type = &v
	return s
}

type DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultList struct {
	// The alias of the check item.
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// Indicates whether the risk item is selected. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	On *bool `json:"On,omitempty" xml:"On,omitempty"`
	// An array that consists of sub-risk items.
	SubTypes []*DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypes `json:"SubTypes,omitempty" xml:"SubTypes,omitempty" type:"Repeated"`
	// The check item.
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultList) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultList) GoString() string {
	return s.String()
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultList) SetAlias(v string) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultList {
	s.Alias = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultList) SetOn(v bool) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultList {
	s.On = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultList) SetSubTypes(v []*DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypes) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultList {
	s.SubTypes = v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultList) SetTypeName(v string) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultList {
	s.TypeName = &v
	return s
}

type DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypes struct {
	// The alias of the sub-check item.
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// An array that consists of the details of custom check items.
	CheckDetails []*DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetails `json:"CheckDetails,omitempty" xml:"CheckDetails,omitempty" type:"Repeated"`
	// Indicates whether the sub-risk item is selected. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	On *bool `json:"On,omitempty" xml:"On,omitempty"`
	// The type of the sub-check item.
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypes) GoString() string {
	return s.String()
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypes) SetAlias(v string) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypes {
	s.Alias = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypes) SetCheckDetails(v []*DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetails) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypes {
	s.CheckDetails = v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypes) SetOn(v bool) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypes {
	s.On = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypes) SetTypeName(v string) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypes {
	s.TypeName = &v
	return s
}

type DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetails struct {
	// The description of the check item.
	CheckDesc *string `json:"CheckDesc,omitempty" xml:"CheckDesc,omitempty"`
	// The ID of the check item.
	CheckId *int64 `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	// The check item.
	CheckItem *string `json:"CheckItem,omitempty" xml:"CheckItem,omitempty"`
	// An array that consists of the details of rules.
	Rules []*DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetails) GoString() string {
	return s.String()
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetails) SetCheckDesc(v string) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetails {
	s.CheckDesc = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetails) SetCheckId(v int64) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetails {
	s.CheckId = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetails) SetCheckItem(v string) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetails {
	s.CheckItem = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetails) SetRules(v []*DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetails {
	s.Rules = v
	return s
}

type DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules struct {
	// The default value of the rule.
	DefaultValue *int32 `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	// Indicates whether the rule is included in the policy. Valid values:
	//
	// *   **1**: yes
	// *   **0**: no
	Optional *int32 `json:"Optional,omitempty" xml:"Optional,omitempty"`
	// An array that consists of the rule parameters.
	ParamList []*DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList `json:"ParamList,omitempty" xml:"ParamList,omitempty" type:"Repeated"`
	// The description of the rule.
	RuleDesc *string `json:"RuleDesc,omitempty" xml:"RuleDesc,omitempty"`
	// The ID of the rule.
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules) GoString() string {
	return s.String()
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules) SetDefaultValue(v int32) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules {
	s.DefaultValue = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules) SetOptional(v int32) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules {
	s.Optional = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules) SetParamList(v []*DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules {
	s.ParamList = v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules) SetRuleDesc(v string) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules {
	s.RuleDesc = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules) SetRuleId(v string) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRules {
	s.RuleId = &v
	return s
}

type DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList struct {
	// If the value of paramType is 2, this parameter provides the options that can be selected for the rule parameter.
	EnumValue *string `json:"EnumValue,omitempty" xml:"EnumValue,omitempty"`
	// The maximum value of the rule parameter.
	MaxValue *int32 `json:"MaxValue,omitempty" xml:"MaxValue,omitempty"`
	// The minimum value of the rule parameter.
	MinValue *int32 `json:"MinValue,omitempty" xml:"MinValue,omitempty"`
	// The default value of the rule parameter.
	ParamDefaultValue *string `json:"ParamDefaultValue,omitempty" xml:"ParamDefaultValue,omitempty"`
	// The description of the rule parameter.
	ParamDesc *string `json:"ParamDesc,omitempty" xml:"ParamDesc,omitempty"`
	// The name of the rule parameter.
	ParamName *string `json:"ParamName,omitempty" xml:"ParamName,omitempty"`
	// The type of the rule parameter. Valid values:
	//
	// *   **1**: input
	// *   **2**: selection
	ParamType *int32 `json:"ParamType,omitempty" xml:"ParamType,omitempty"`
	// The specified value of the rule parameter.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList) GoString() string {
	return s.String()
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList) SetEnumValue(v string) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList {
	s.EnumValue = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList) SetMaxValue(v int32) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList {
	s.MaxValue = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList) SetMinValue(v int32) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList {
	s.MinValue = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList) SetParamDefaultValue(v string) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList {
	s.ParamDefaultValue = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList) SetParamDesc(v string) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList {
	s.ParamDesc = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList) SetParamName(v string) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList {
	s.ParamName = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList) SetParamType(v int32) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList {
	s.ParamType = &v
	return s
}

func (s *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList) SetValue(v string) *DescribeStrategyDetailResponseBodyStrategyRiskTypeWhiteListQueryResultListSubTypesCheckDetailsRulesParamList {
	s.Value = &v
	return s
}

type DescribeStrategyDetailResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeStrategyDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeStrategyDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeStrategyDetailResponse) SetHeaders(v map[string]*string) *DescribeStrategyDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeStrategyDetailResponse) SetStatusCode(v int32) *DescribeStrategyDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStrategyDetailResponse) SetBody(v *DescribeStrategyDetailResponseBody) *DescribeStrategyDetailResponse {
	s.Body = v
	return s
}

type DescribeStrategyExecDetailRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The ID of the baseline check policy.
	StrategyId *int32 `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
}

func (s DescribeStrategyExecDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyExecDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeStrategyExecDetailRequest) SetCurrentPage(v int32) *DescribeStrategyExecDetailRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeStrategyExecDetailRequest) SetPageSize(v int32) *DescribeStrategyExecDetailRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeStrategyExecDetailRequest) SetSourceIp(v string) *DescribeStrategyExecDetailRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeStrategyExecDetailRequest) SetStrategyId(v int32) *DescribeStrategyExecDetailRequest {
	s.StrategyId = &v
	return s
}

type DescribeStrategyExecDetailResponseBody struct {
	// The time when the baseline check ends.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The number of check items that failed to pass the baseline check. This type of check item is considered risk items.
	FailCount *int32 `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	// An array consisting of the servers on which risk items were detected.
	FailedEcsList []*DescribeStrategyExecDetailResponseBodyFailedEcsList `json:"FailedEcsList,omitempty" xml:"FailedEcsList,omitempty" type:"Repeated"`
	// The number of tasks that are **running** based on the baseline check policy.
	InProcessCount *int32 `json:"InProcessCount,omitempty" xml:"InProcessCount,omitempty"`
	// The execution progress of the baseline check policy.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The type of the baseline check. Valid values:
	//
	// *   **Schedule**: automatic check that periodically runs
	// *   **Manual**: intermediate check that is manually performed
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The time when the baseline check starts.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The number of check items that **passed** the baseline check.
	SuccessCount *int32 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
}

func (s DescribeStrategyExecDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyExecDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStrategyExecDetailResponseBody) SetEndTime(v string) *DescribeStrategyExecDetailResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeStrategyExecDetailResponseBody) SetFailCount(v int32) *DescribeStrategyExecDetailResponseBody {
	s.FailCount = &v
	return s
}

func (s *DescribeStrategyExecDetailResponseBody) SetFailedEcsList(v []*DescribeStrategyExecDetailResponseBodyFailedEcsList) *DescribeStrategyExecDetailResponseBody {
	s.FailedEcsList = v
	return s
}

func (s *DescribeStrategyExecDetailResponseBody) SetInProcessCount(v int32) *DescribeStrategyExecDetailResponseBody {
	s.InProcessCount = &v
	return s
}

func (s *DescribeStrategyExecDetailResponseBody) SetPercent(v string) *DescribeStrategyExecDetailResponseBody {
	s.Percent = &v
	return s
}

func (s *DescribeStrategyExecDetailResponseBody) SetRequestId(v string) *DescribeStrategyExecDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStrategyExecDetailResponseBody) SetSource(v string) *DescribeStrategyExecDetailResponseBody {
	s.Source = &v
	return s
}

func (s *DescribeStrategyExecDetailResponseBody) SetStartTime(v string) *DescribeStrategyExecDetailResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeStrategyExecDetailResponseBody) SetSuccessCount(v int32) *DescribeStrategyExecDetailResponseBody {
	s.SuccessCount = &v
	return s
}

type DescribeStrategyExecDetailResponseBodyFailedEcsList struct {
	// The IP address of the server on which the baseline check was performed.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The name of the instance.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The failure cause for the check item.
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s DescribeStrategyExecDetailResponseBodyFailedEcsList) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyExecDetailResponseBodyFailedEcsList) GoString() string {
	return s.String()
}

func (s *DescribeStrategyExecDetailResponseBodyFailedEcsList) SetIP(v string) *DescribeStrategyExecDetailResponseBodyFailedEcsList {
	s.IP = &v
	return s
}

func (s *DescribeStrategyExecDetailResponseBodyFailedEcsList) SetInstanceName(v string) *DescribeStrategyExecDetailResponseBodyFailedEcsList {
	s.InstanceName = &v
	return s
}

func (s *DescribeStrategyExecDetailResponseBodyFailedEcsList) SetInternetIp(v string) *DescribeStrategyExecDetailResponseBodyFailedEcsList {
	s.InternetIp = &v
	return s
}

func (s *DescribeStrategyExecDetailResponseBodyFailedEcsList) SetIntranetIp(v string) *DescribeStrategyExecDetailResponseBodyFailedEcsList {
	s.IntranetIp = &v
	return s
}

func (s *DescribeStrategyExecDetailResponseBodyFailedEcsList) SetReason(v string) *DescribeStrategyExecDetailResponseBodyFailedEcsList {
	s.Reason = &v
	return s
}

type DescribeStrategyExecDetailResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeStrategyExecDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeStrategyExecDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyExecDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeStrategyExecDetailResponse) SetHeaders(v map[string]*string) *DescribeStrategyExecDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeStrategyExecDetailResponse) SetStatusCode(v int32) *DescribeStrategyExecDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStrategyExecDetailResponse) SetBody(v *DescribeStrategyExecDetailResponseBody) *DescribeStrategyExecDetailResponse {
	s.Body = v
	return s
}

type DescribeStrategyTargetRequest struct {
	// The ID of the baseline check policy.
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The type of the policy. Set the value to hc_strategy, which indicates baseline check policies.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeStrategyTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyTargetRequest) GoString() string {
	return s.String()
}

func (s *DescribeStrategyTargetRequest) SetConfig(v string) *DescribeStrategyTargetRequest {
	s.Config = &v
	return s
}

func (s *DescribeStrategyTargetRequest) SetSourceIp(v string) *DescribeStrategyTargetRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeStrategyTargetRequest) SetType(v string) *DescribeStrategyTargetRequest {
	s.Type = &v
	return s
}

type DescribeStrategyTargetResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array consisting of the assets to which the baseline check policy is applied.
	StrategyTargets []*DescribeStrategyTargetResponseBodyStrategyTargets `json:"StrategyTargets,omitempty" xml:"StrategyTargets,omitempty" type:"Repeated"`
}

func (s DescribeStrategyTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyTargetResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStrategyTargetResponseBody) SetRequestId(v string) *DescribeStrategyTargetResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStrategyTargetResponseBody) SetStrategyTargets(v []*DescribeStrategyTargetResponseBodyStrategyTargets) *DescribeStrategyTargetResponseBody {
	s.StrategyTargets = v
	return s
}

type DescribeStrategyTargetResponseBodyStrategyTargets struct {
	// The number of the assets that belong to the asset group.
	BindUuidCount *int32 `json:"BindUuidCount,omitempty" xml:"BindUuidCount,omitempty"`
	// Indicates whether the baseline check policy is applied to the asset group. Valid values:
	//
	// *   **add**: yes
	// *   **del**: no
	Flag *string `json:"Flag,omitempty" xml:"Flag,omitempty"`
	// The ID of the asset group to which the assets belong or the UUID of the asset.
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The method that is used to add the assets to the baseline check policy. Valid values:
	//
	// *   **groupId**: the ID of the asset group
	// *   **uuid**: the UUID of the asset
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s DescribeStrategyTargetResponseBodyStrategyTargets) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyTargetResponseBodyStrategyTargets) GoString() string {
	return s.String()
}

func (s *DescribeStrategyTargetResponseBodyStrategyTargets) SetBindUuidCount(v int32) *DescribeStrategyTargetResponseBodyStrategyTargets {
	s.BindUuidCount = &v
	return s
}

func (s *DescribeStrategyTargetResponseBodyStrategyTargets) SetFlag(v string) *DescribeStrategyTargetResponseBodyStrategyTargets {
	s.Flag = &v
	return s
}

func (s *DescribeStrategyTargetResponseBodyStrategyTargets) SetTarget(v string) *DescribeStrategyTargetResponseBodyStrategyTargets {
	s.Target = &v
	return s
}

func (s *DescribeStrategyTargetResponseBodyStrategyTargets) SetTargetType(v string) *DescribeStrategyTargetResponseBodyStrategyTargets {
	s.TargetType = &v
	return s
}

type DescribeStrategyTargetResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeStrategyTargetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeStrategyTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStrategyTargetResponse) GoString() string {
	return s.String()
}

func (s *DescribeStrategyTargetResponse) SetHeaders(v map[string]*string) *DescribeStrategyTargetResponse {
	s.Headers = v
	return s
}

func (s *DescribeStrategyTargetResponse) SetStatusCode(v int32) *DescribeStrategyTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStrategyTargetResponse) SetBody(v *DescribeStrategyTargetResponseBody) *DescribeStrategyTargetResponse {
	s.Body = v
	return s
}

type DescribeSummaryInfoRequest struct {
	// The language of the content within the request and response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeSummaryInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSummaryInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeSummaryInfoRequest) SetLang(v string) *DescribeSummaryInfoRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSummaryInfoRequest) SetSourceIp(v string) *DescribeSummaryInfoRequest {
	s.SourceIp = &v
	return s
}

type DescribeSummaryInfoResponseBody struct {
	// The number of unprotected assets.
	AegisClientOfflineCount *int32 `json:"AegisClientOfflineCount,omitempty" xml:"AegisClientOfflineCount,omitempty"`
	// The number of protected assets.
	AegisClientOnlineCount *int32 `json:"AegisClientOnlineCount,omitempty" xml:"AegisClientOnlineCount,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The security score of the assets. Valid values:
	//
	// *   95 to 100: The assets are secure.
	// *   85 to 94: The assets are exposed to a few security risks. We recommend that you reinforce your security system in a timely manner.
	// *   70 to 84: The assets are exposed to multiple security risks. We recommend that you reinforce your security system in a timely manner.
	// *   69 or lower: The current security system is unable to protect the assets against intrusions. We recommend that you reinforce your security system at the earliest opportunity.
	SecurityScore *int32 `json:"SecurityScore,omitempty" xml:"SecurityScore,omitempty"`
	// Indicates whether the request is successful. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSummaryInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSummaryInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSummaryInfoResponseBody) SetAegisClientOfflineCount(v int32) *DescribeSummaryInfoResponseBody {
	s.AegisClientOfflineCount = &v
	return s
}

func (s *DescribeSummaryInfoResponseBody) SetAegisClientOnlineCount(v int32) *DescribeSummaryInfoResponseBody {
	s.AegisClientOnlineCount = &v
	return s
}

func (s *DescribeSummaryInfoResponseBody) SetRequestId(v string) *DescribeSummaryInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSummaryInfoResponseBody) SetSecurityScore(v int32) *DescribeSummaryInfoResponseBody {
	s.SecurityScore = &v
	return s
}

func (s *DescribeSummaryInfoResponseBody) SetSuccess(v bool) *DescribeSummaryInfoResponseBody {
	s.Success = &v
	return s
}

type DescribeSummaryInfoResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSummaryInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSummaryInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSummaryInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeSummaryInfoResponse) SetHeaders(v map[string]*string) *DescribeSummaryInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeSummaryInfoResponse) SetStatusCode(v int32) *DescribeSummaryInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSummaryInfoResponse) SetBody(v *DescribeSummaryInfoResponseBody) *DescribeSummaryInfoResponse {
	s.Body = v
	return s
}

type DescribeSupportRegionResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The regions in which the anti-ransomware feature is supported.
	SupportRegion []*string `json:"SupportRegion,omitempty" xml:"SupportRegion,omitempty" type:"Repeated"`
}

func (s DescribeSupportRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSupportRegionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSupportRegionResponseBody) SetRequestId(v string) *DescribeSupportRegionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSupportRegionResponseBody) SetSupportRegion(v []*string) *DescribeSupportRegionResponseBody {
	s.SupportRegion = v
	return s
}

type DescribeSupportRegionResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSupportRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSupportRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSupportRegionResponse) GoString() string {
	return s.String()
}

func (s *DescribeSupportRegionResponse) SetHeaders(v map[string]*string) *DescribeSupportRegionResponse {
	s.Headers = v
	return s
}

func (s *DescribeSupportRegionResponse) SetStatusCode(v int32) *DescribeSupportRegionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSupportRegionResponse) SetBody(v *DescribeSupportRegionResponseBody) *DescribeSupportRegionResponse {
	s.Body = v
	return s
}

type DescribeSuspEventDetailRequest struct {
	// The data source of the exception. Set the value to sas.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The ID of the exception.
	SuspiciousEventId *int32 `json:"SuspiciousEventId,omitempty" xml:"SuspiciousEventId,omitempty"`
}

func (s DescribeSuspEventDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventDetailRequest) SetFrom(v string) *DescribeSuspEventDetailRequest {
	s.From = &v
	return s
}

func (s *DescribeSuspEventDetailRequest) SetLang(v string) *DescribeSuspEventDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSuspEventDetailRequest) SetSourceIp(v string) *DescribeSuspEventDetailRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeSuspEventDetailRequest) SetSuspiciousEventId(v int32) *DescribeSuspEventDetailRequest {
	s.SuspiciousEventId = &v
	return s
}

type DescribeSuspEventDetailResponseBody struct {
	// Indicates whether the online processing of exceptions is supported, such as blocking an exception, adding an exception to the whitelist, and ignoring an exception. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	CanBeDealOnLine *bool `json:"CanBeDealOnLine,omitempty" xml:"CanBeDealOnLine,omitempty"`
	// The data source of the exception.
	DataSource *string `json:"DataSource,omitempty" xml:"DataSource,omitempty"`
	// The details about the exception.
	Details []*DescribeSuspEventDetailResponseBodyDetails `json:"Details,omitempty" xml:"Details,omitempty" type:"Repeated"`
	// The description of the exception.
	EventDesc *string `json:"EventDesc,omitempty" xml:"EventDesc,omitempty"`
	// The name of the exception.
	EventName *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	// The status of the exception. Valid values:
	//
	// *   **1**: pending handling
	// *   **2**: ignored
	// *   **4**: confirmed
	// *   **8**: marked as a false positive
	// *   **16**: handling
	// *   **32**: handled
	// *   **64**: expired
	EventStatus *string `json:"EventStatus,omitempty" xml:"EventStatus,omitempty"`
	// The type of the exception.
	EventTypeDesc *string `json:"EventTypeDesc,omitempty" xml:"EventTypeDesc,omitempty"`
	// The ID of the exception.
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the server on which the exception was detected.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server on which the exception was detected.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server on which the exception was detected.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The time when the exception was last detected.
	LastTime *string `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	// The severity of the exception. Valid values:
	//
	// *   **serious**
	// *   **suspicious**
	// *   **remind**
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The code that indicates the handling result of the exception.
	OperateErrorCode *string `json:"OperateErrorCode,omitempty" xml:"OperateErrorCode,omitempty"`
	// The message that indicates the handling result of the exception.
	OperateMsg *string `json:"OperateMsg,omitempty" xml:"OperateMsg,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The edition of Security Center in which the exception can be detected. Valid values:
	//
	// *   **0**: Basic edition
	// *   **1**: Advanced edition
	// *   **2**: Enterprise edition
	SaleVersion *string `json:"SaleVersion,omitempty" xml:"SaleVersion,omitempty"`
	// The UUID of the server on which the exception was detected.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeSuspEventDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventDetailResponseBody) SetCanBeDealOnLine(v bool) *DescribeSuspEventDetailResponseBody {
	s.CanBeDealOnLine = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetDataSource(v string) *DescribeSuspEventDetailResponseBody {
	s.DataSource = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetDetails(v []*DescribeSuspEventDetailResponseBodyDetails) *DescribeSuspEventDetailResponseBody {
	s.Details = v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetEventDesc(v string) *DescribeSuspEventDetailResponseBody {
	s.EventDesc = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetEventName(v string) *DescribeSuspEventDetailResponseBody {
	s.EventName = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetEventStatus(v string) *DescribeSuspEventDetailResponseBody {
	s.EventStatus = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetEventTypeDesc(v string) *DescribeSuspEventDetailResponseBody {
	s.EventTypeDesc = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetId(v int32) *DescribeSuspEventDetailResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetInstanceName(v string) *DescribeSuspEventDetailResponseBody {
	s.InstanceName = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetInternetIp(v string) *DescribeSuspEventDetailResponseBody {
	s.InternetIp = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetIntranetIp(v string) *DescribeSuspEventDetailResponseBody {
	s.IntranetIp = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetLastTime(v string) *DescribeSuspEventDetailResponseBody {
	s.LastTime = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetLevel(v string) *DescribeSuspEventDetailResponseBody {
	s.Level = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetOperateErrorCode(v string) *DescribeSuspEventDetailResponseBody {
	s.OperateErrorCode = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetOperateMsg(v string) *DescribeSuspEventDetailResponseBody {
	s.OperateMsg = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetRequestId(v string) *DescribeSuspEventDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetSaleVersion(v string) *DescribeSuspEventDetailResponseBody {
	s.SaleVersion = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBody) SetUuid(v string) *DescribeSuspEventDetailResponseBody {
	s.Uuid = &v
	return s
}

type DescribeSuspEventDetailResponseBodyDetails struct {
	// The display name of the alert event.
	NameDisplay *string `json:"NameDisplay,omitempty" xml:"NameDisplay,omitempty"`
	// The format in which the details about the exception are displayed.
	//
	// Valid values:
	//
	// *   **text**
	// *   **html**
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The attribute information about the exception. For example, if the exception is associated with an alert that is triggered by an unusual logon, the information can include the time when the logon is initiated and the location from which the logon is initiated. If the exception is associated with an alert that is triggered by a webshell file, the information can include the path of the trojan file and the type of the trojan.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSuspEventDetailResponseBodyDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventDetailResponseBodyDetails) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventDetailResponseBodyDetails) SetNameDisplay(v string) *DescribeSuspEventDetailResponseBodyDetails {
	s.NameDisplay = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBodyDetails) SetType(v string) *DescribeSuspEventDetailResponseBodyDetails {
	s.Type = &v
	return s
}

func (s *DescribeSuspEventDetailResponseBodyDetails) SetValue(v string) *DescribeSuspEventDetailResponseBodyDetails {
	s.Value = &v
	return s
}

type DescribeSuspEventDetailResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSuspEventDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSuspEventDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventDetailResponse) SetHeaders(v map[string]*string) *DescribeSuspEventDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeSuspEventDetailResponse) SetStatusCode(v int32) *DescribeSuspEventDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSuspEventDetailResponse) SetBody(v *DescribeSuspEventDetailResponseBody) *DescribeSuspEventDetailResponse {
	s.Body = v
	return s
}

type DescribeSuspEventExportInfoRequest struct {
	ExportId *int32 `json:"ExportId,omitempty" xml:"ExportId,omitempty"`
}

func (s DescribeSuspEventExportInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventExportInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventExportInfoRequest) SetExportId(v int32) *DescribeSuspEventExportInfoRequest {
	s.ExportId = &v
	return s
}

type DescribeSuspEventExportInfoResponseBody struct {
	ExportStatus *string `json:"ExportStatus,omitempty" xml:"ExportStatus,omitempty"`
	FileName     *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	GmtCreate    *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified  *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id           *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	Link         *string `json:"Link,omitempty" xml:"Link,omitempty"`
	Progress     *int32  `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Properties   *string `json:"Properties,omitempty" xml:"Properties,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount   *int32  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeSuspEventExportInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventExportInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventExportInfoResponseBody) SetExportStatus(v string) *DescribeSuspEventExportInfoResponseBody {
	s.ExportStatus = &v
	return s
}

func (s *DescribeSuspEventExportInfoResponseBody) SetFileName(v string) *DescribeSuspEventExportInfoResponseBody {
	s.FileName = &v
	return s
}

func (s *DescribeSuspEventExportInfoResponseBody) SetGmtCreate(v int64) *DescribeSuspEventExportInfoResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeSuspEventExportInfoResponseBody) SetGmtModified(v int64) *DescribeSuspEventExportInfoResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeSuspEventExportInfoResponseBody) SetId(v int32) *DescribeSuspEventExportInfoResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeSuspEventExportInfoResponseBody) SetLink(v string) *DescribeSuspEventExportInfoResponseBody {
	s.Link = &v
	return s
}

func (s *DescribeSuspEventExportInfoResponseBody) SetProgress(v int32) *DescribeSuspEventExportInfoResponseBody {
	s.Progress = &v
	return s
}

func (s *DescribeSuspEventExportInfoResponseBody) SetProperties(v string) *DescribeSuspEventExportInfoResponseBody {
	s.Properties = &v
	return s
}

func (s *DescribeSuspEventExportInfoResponseBody) SetRequestId(v string) *DescribeSuspEventExportInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSuspEventExportInfoResponseBody) SetTotalCount(v int32) *DescribeSuspEventExportInfoResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeSuspEventExportInfoResponseBody) SetType(v string) *DescribeSuspEventExportInfoResponseBody {
	s.Type = &v
	return s
}

type DescribeSuspEventExportInfoResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSuspEventExportInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSuspEventExportInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventExportInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventExportInfoResponse) SetHeaders(v map[string]*string) *DescribeSuspEventExportInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeSuspEventExportInfoResponse) SetStatusCode(v int32) *DescribeSuspEventExportInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSuspEventExportInfoResponse) SetBody(v *DescribeSuspEventExportInfoResponseBody) *DescribeSuspEventExportInfoResponse {
	s.Body = v
	return s
}

type DescribeSuspEventQuaraFilesRequest struct {
	// The number of the page to return.
	CurrentPage *string `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The ID of the request source. Set the value to **sas**.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// Deprecated
	// The ID of the asset group.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the server group to which the server belongs. The quarantined file is located on the server.
	GroupingId *int64 `json:"GroupingId,omitempty" xml:"GroupingId,omitempty"`
	// The number of entries to return on each page.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The unique ID of the quarantined file.
	QuaraTag *string `json:"QuaraTag,omitempty" xml:"QuaraTag,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The status of the quarantined file that you want to query. Valid values:
	//
	// *   **quaraFailed**: The file fails to be quarantined.
	// *   **quaraDone**: The file is quarantined.
	// *   **quaraing**: The file is being quarantined.
	// *   **rollbackFailed**: The system fails to cancel quarantining the file.
	// *   **rollbackDone**: The system cancelled quarantining the file.
	// *   **rollbacking**: The system is cancelling quarantining the file.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSuspEventQuaraFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventQuaraFilesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventQuaraFilesRequest) SetCurrentPage(v string) *DescribeSuspEventQuaraFilesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesRequest) SetFrom(v string) *DescribeSuspEventQuaraFilesRequest {
	s.From = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesRequest) SetGroupId(v string) *DescribeSuspEventQuaraFilesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesRequest) SetGroupingId(v int64) *DescribeSuspEventQuaraFilesRequest {
	s.GroupingId = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesRequest) SetPageSize(v string) *DescribeSuspEventQuaraFilesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesRequest) SetQuaraTag(v string) *DescribeSuspEventQuaraFilesRequest {
	s.QuaraTag = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesRequest) SetSourceIp(v string) *DescribeSuspEventQuaraFilesRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesRequest) SetStatus(v string) *DescribeSuspEventQuaraFilesRequest {
	s.Status = &v
	return s
}

type DescribeSuspEventQuaraFilesResponseBody struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// An array that consists of the quarantined files.
	QuaraFiles []*DescribeSuspEventQuaraFilesResponseBodyQuaraFiles `json:"QuaraFiles,omitempty" xml:"QuaraFiles,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSuspEventQuaraFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventQuaraFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventQuaraFilesResponseBody) SetCount(v int32) *DescribeSuspEventQuaraFilesResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBody) SetCurrentPage(v int32) *DescribeSuspEventQuaraFilesResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBody) SetPageSize(v int32) *DescribeSuspEventQuaraFilesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBody) SetQuaraFiles(v []*DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) *DescribeSuspEventQuaraFilesResponseBody {
	s.QuaraFiles = v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBody) SetRequestId(v string) *DescribeSuspEventQuaraFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBody) SetTotalCount(v int32) *DescribeSuspEventQuaraFilesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSuspEventQuaraFilesResponseBodyQuaraFiles struct {
	// The name of the event.
	EventName *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	// The type of the event.
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The ID of the quarantined file.
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The instance ID of the asset.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server on which the quarantined file is located.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server on which the quarantined file is located.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The public IP address of the server on which the quarantined file is located.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The download link of the quarantined file.
	Link *string `json:"Link,omitempty" xml:"Link,omitempty"`
	// The MD5 hash value of the quarantined file.
	Md5 *string `json:"Md5,omitempty" xml:"Md5,omitempty"`
	// The time when the quarantined file was last modified.
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The path to the quarantined file on the server.
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The status of the quarantined file. Valid values:
	//
	// *   **quaraFailed**: The file fails to be quarantined.
	// *   **quaraDone**: The file is quarantined.
	// *   **quaraing**: The file is being quarantined.
	// *   **rollbackFailed**: The system fails to cancel quarantining the file.
	// *   **rollbackDone**: The system cancelled quarantining the file.
	// *   **rollbacking**: The system is cancelling quarantining the file.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The unique ID of the event.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetEventName(v string) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.EventName = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetEventType(v string) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.EventType = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetId(v int32) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.Id = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetInstanceId(v string) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.InstanceId = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetInstanceName(v string) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.InstanceName = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetInternetIp(v string) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.InternetIp = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetIp(v string) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.Ip = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetLink(v string) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.Link = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetMd5(v string) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.Md5 = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetModifyTime(v string) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.ModifyTime = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetPath(v string) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.Path = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetStatus(v string) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.Status = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetTag(v string) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.Tag = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles) SetUuid(v string) *DescribeSuspEventQuaraFilesResponseBodyQuaraFiles {
	s.Uuid = &v
	return s
}

type DescribeSuspEventQuaraFilesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSuspEventQuaraFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSuspEventQuaraFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventQuaraFilesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventQuaraFilesResponse) SetHeaders(v map[string]*string) *DescribeSuspEventQuaraFilesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponse) SetStatusCode(v int32) *DescribeSuspEventQuaraFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSuspEventQuaraFilesResponse) SetBody(v *DescribeSuspEventQuaraFilesResponseBody) *DescribeSuspEventQuaraFilesResponse {
	s.Body = v
	return s
}

type DescribeSuspEventUserSettingRequest struct {
	From     *string `json:"From,omitempty" xml:"From,omitempty"`
	Id       *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeSuspEventUserSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventUserSettingRequest) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventUserSettingRequest) SetFrom(v string) *DescribeSuspEventUserSettingRequest {
	s.From = &v
	return s
}

func (s *DescribeSuspEventUserSettingRequest) SetId(v int32) *DescribeSuspEventUserSettingRequest {
	s.Id = &v
	return s
}

func (s *DescribeSuspEventUserSettingRequest) SetSourceIp(v string) *DescribeSuspEventUserSettingRequest {
	s.SourceIp = &v
	return s
}

type DescribeSuspEventUserSettingResponseBody struct {
	LevelsOn  []*string `json:"LevelsOn,omitempty" xml:"LevelsOn,omitempty" type:"Repeated"`
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSuspEventUserSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventUserSettingResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventUserSettingResponseBody) SetLevelsOn(v []*string) *DescribeSuspEventUserSettingResponseBody {
	s.LevelsOn = v
	return s
}

func (s *DescribeSuspEventUserSettingResponseBody) SetRequestId(v string) *DescribeSuspEventUserSettingResponseBody {
	s.RequestId = &v
	return s
}

type DescribeSuspEventUserSettingResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSuspEventUserSettingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSuspEventUserSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventUserSettingResponse) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventUserSettingResponse) SetHeaders(v map[string]*string) *DescribeSuspEventUserSettingResponse {
	s.Headers = v
	return s
}

func (s *DescribeSuspEventUserSettingResponse) SetStatusCode(v int32) *DescribeSuspEventUserSettingResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSuspEventUserSettingResponse) SetBody(v *DescribeSuspEventUserSettingResponseBody) *DescribeSuspEventUserSettingResponse {
	s.Body = v
	return s
}

type DescribeSuspEventsRequest struct {
	// The ID of the alert event.
	//
	// >  To query the details about the exceptions of an alert event, you must specify the ID of the alert event. You can call the [DescribeAlarmEventList](~~DescribeAlarmEventList~~) operation to query the IDs of alert events.
	AlarmUniqueInfo *string `json:"AlarmUniqueInfo,omitempty" xml:"AlarmUniqueInfo,omitempty"`
	// The types of assets.
	AssetsTypeList []*string `json:"AssetsTypeList,omitempty" xml:"AssetsTypeList,omitempty" type:"Repeated"`
	// The ID of the cluster of whose alert events you want to query.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The key of the condition that is used to query alert events on containers. Valid values:
	//
	// *   **instanceId**: the ID of the asset
	// *   **appName**: the name of the application
	// *   **clusterId**: the ID of the cluster
	// *   **regionId**: the ID of the region
	// *   **nodeName**: the name of the node
	// *   **namespace**: the namespace
	// *   **clusterName**: the name of the cluster
	// *   **image**: the name of the image
	// *   **imageRepoName**: the name of the image repository
	// *   **imageRepoNamespace**: the namespace to which the image repository belongs
	// *   **imageRepoTag**: the tag that is added to the image
	// *   **imageDigest**: the digest of the image
	ContainerFieldName *string `json:"ContainerFieldName,omitempty" xml:"ContainerFieldName,omitempty"`
	// The value of the condition that is used to query alert events on containers.
	ContainerFieldValue *string `json:"ContainerFieldValue,omitempty" xml:"ContainerFieldValue,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *string `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether the alert event is handled. Valid values:
	//
	// *   **N**: unhandled
	// *   **Y**: handled
	Dealed *string `json:"Dealed,omitempty" xml:"Dealed,omitempty"`
	// The subtype of the alert event. Separate multiple subtypes with commas (,).
	EventNames *string `json:"EventNames,omitempty" xml:"EventNames,omitempty"`
	// The data source of the alert event. Set the value to sas.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// The ID of the asset group to which the affected asset belongs.
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the alert event.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The severity of the alert event. Separate multiple severities with commas (,). Valid values:
	//
	// *   **serious**
	// *   **suspicious**
	// *   **remind**
	Levels *string `json:"Levels,omitempty" xml:"Levels,omitempty"`
	// The name of the asset that is affected by the alert event.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// An array that consists of the handling result codes of alert events.
	OperateErrorCodeList []*string `json:"OperateErrorCodeList,omitempty" xml:"OperateErrorCodeList,omitempty" type:"Repeated"`
	// The timestamp when the handling operation ends.
	OperateTimeEnd *string `json:"OperateTimeEnd,omitempty" xml:"OperateTimeEnd,omitempty"`
	// The timestamp when the handling operation starts.
	OperateTimeStart *string `json:"OperateTimeStart,omitempty" xml:"OperateTimeStart,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The alert type of the alert event. Valid values:
	//
	// *   **Suspicious process**
	// *   **Webshell**
	// *   **Unusual logon**
	// *   **Exception**
	// *   **Sensitive file tampering**
	// *   **Malicious process (cloud threat detection)**
	// *   **Suspicious network connection**
	// *   **Suspicious account**
	// *   **Application intrusion event**
	// *   **Cloud threat detection**
	// *   **Precise defense**
	// *   **Application whitelist**
	// *   **Persistent webshell**
	// *   **Web application threat detection**
	// *   **Malicious script**
	// *   **Threat intelligence**
	// *   **Malicious network activity**
	// *   **Cluster exception**
	// *   **Webshell (on-premises threat detection)**
	// *   **Vulnerability exploitation**
	// *   **Malicious process (on-premises threat detection)**
	// *   **Trusted exception**
	// *   **Operations to manage other resources**
	ParentEventTypes *string `json:"ParentEventTypes,omitempty" xml:"ParentEventTypes,omitempty"`
	// The name of the alert or the information about the asset.
	//
	// >  Fuzzy search is supported. The asset information includes the name, public IP address, and private IP address of an asset.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The custom sorting field. Default value: **operateTime**. Valid values:
	//
	// *   **lastTime**: the latest occurrence time.
	// *   **operateTime**: the handling time.
	//
	// >  This parameter takes effect if you set the **Dealed** parameter to Y.
	SortColumn *string `json:"SortColumn,omitempty" xml:"SortColumn,omitempty"`
	// The custom sorting order. Default value: **desc**. Valid values:
	//
	// *   **asc**: the ascending order
	// *   **desc**: the descending order
	//
	// >  This parameter takes effect if you set the **Dealed** parameter to Y.
	SortType *string `json:"SortType,omitempty" xml:"SortType,omitempty"`
	// The source of the alert.
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The status of the alert event. Valid values:
	//
	// *   **0**: all
	// *   **1**: pending handling
	// *   **2**: ignored
	// *   **4**: confirmed
	// *   **8**: marked as a false positive
	// *   **16**: being handled
	// *   **32**: handled
	// *   **64**: expired
	// *   **128**: deleted
	// *   **512**: being automatically blocked
	// *   **513**: automatically blocked
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tactic ID of ATT\&CK.
	TacticId *string `json:"TacticId,omitempty" xml:"TacticId,omitempty"`
	// The item that is used to search for the container. Valid values:
	//
	// *   **containerId**: the ID of the container
	// *   **uuid**: the UUID of the server
	// *   **imageUuid**: the UUID of the image
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	// The end time when the alert event was last detected.
	TimeEnd *string `json:"TimeEnd,omitempty" xml:"TimeEnd,omitempty"`
	// The start time when the alert event was last detected.
	TimeStart *string `json:"TimeStart,omitempty" xml:"TimeStart,omitempty"`
	// The unique key of the alert.
	UniqueInfo *string `json:"UniqueInfo,omitempty" xml:"UniqueInfo,omitempty"`
	// The UUID of the server on which the alert is detected. Separate multiple UUIDs with commas (,).
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeSuspEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventsRequest) SetAlarmUniqueInfo(v string) *DescribeSuspEventsRequest {
	s.AlarmUniqueInfo = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetAssetsTypeList(v []*string) *DescribeSuspEventsRequest {
	s.AssetsTypeList = v
	return s
}

func (s *DescribeSuspEventsRequest) SetClusterId(v string) *DescribeSuspEventsRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetContainerFieldName(v string) *DescribeSuspEventsRequest {
	s.ContainerFieldName = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetContainerFieldValue(v string) *DescribeSuspEventsRequest {
	s.ContainerFieldValue = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetCurrentPage(v string) *DescribeSuspEventsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetDealed(v string) *DescribeSuspEventsRequest {
	s.Dealed = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetEventNames(v string) *DescribeSuspEventsRequest {
	s.EventNames = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetFrom(v string) *DescribeSuspEventsRequest {
	s.From = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetGroupId(v int64) *DescribeSuspEventsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetId(v int64) *DescribeSuspEventsRequest {
	s.Id = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetLang(v string) *DescribeSuspEventsRequest {
	s.Lang = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetLevels(v string) *DescribeSuspEventsRequest {
	s.Levels = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetName(v string) *DescribeSuspEventsRequest {
	s.Name = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetOperateErrorCodeList(v []*string) *DescribeSuspEventsRequest {
	s.OperateErrorCodeList = v
	return s
}

func (s *DescribeSuspEventsRequest) SetOperateTimeEnd(v string) *DescribeSuspEventsRequest {
	s.OperateTimeEnd = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetOperateTimeStart(v string) *DescribeSuspEventsRequest {
	s.OperateTimeStart = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetPageSize(v string) *DescribeSuspEventsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetParentEventTypes(v string) *DescribeSuspEventsRequest {
	s.ParentEventTypes = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetRemark(v string) *DescribeSuspEventsRequest {
	s.Remark = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetSortColumn(v string) *DescribeSuspEventsRequest {
	s.SortColumn = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetSortType(v string) *DescribeSuspEventsRequest {
	s.SortType = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetSource(v string) *DescribeSuspEventsRequest {
	s.Source = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetSourceIp(v string) *DescribeSuspEventsRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetStatus(v string) *DescribeSuspEventsRequest {
	s.Status = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetTacticId(v string) *DescribeSuspEventsRequest {
	s.TacticId = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetTargetType(v string) *DescribeSuspEventsRequest {
	s.TargetType = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetTimeEnd(v string) *DescribeSuspEventsRequest {
	s.TimeEnd = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetTimeStart(v string) *DescribeSuspEventsRequest {
	s.TimeStart = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetUniqueInfo(v string) *DescribeSuspEventsRequest {
	s.UniqueInfo = &v
	return s
}

func (s *DescribeSuspEventsRequest) SetUuids(v string) *DescribeSuspEventsRequest {
	s.Uuids = &v
	return s
}

type DescribeSuspEventsResponseBody struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of the information about the alert event.
	SuspEvents []*DescribeSuspEventsResponseBodySuspEvents `json:"SuspEvents,omitempty" xml:"SuspEvents,omitempty" type:"Repeated"`
	// The total number of alert events.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSuspEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventsResponseBody) SetCount(v int32) *DescribeSuspEventsResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeSuspEventsResponseBody) SetCurrentPage(v int32) *DescribeSuspEventsResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSuspEventsResponseBody) SetPageSize(v int32) *DescribeSuspEventsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSuspEventsResponseBody) SetRequestId(v string) *DescribeSuspEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSuspEventsResponseBody) SetSuspEvents(v []*DescribeSuspEventsResponseBodySuspEvents) *DescribeSuspEventsResponseBody {
	s.SuspEvents = v
	return s
}

func (s *DescribeSuspEventsResponseBody) SetTotalCount(v int32) *DescribeSuspEventsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSuspEventsResponseBodySuspEvents struct {
	// Indicates whether the alert was analyzed offline.
	Advanced *bool `json:"Advanced,omitempty" xml:"Advanced,omitempty"`
	// The name of the alert event.
	AlarmEventName *string `json:"AlarmEventName,omitempty" xml:"AlarmEventName,omitempty"`
	// The description of the alert event to which the alert event is associated.
	AlarmEventNameDisplay *string `json:"AlarmEventNameDisplay,omitempty" xml:"AlarmEventNameDisplay,omitempty"`
	// The type of the alert event.
	AlarmEventType *string `json:"AlarmEventType,omitempty" xml:"AlarmEventType,omitempty"`
	// The type of the alert event.
	AlarmEventTypeDisplay *string `json:"AlarmEventTypeDisplay,omitempty" xml:"AlarmEventTypeDisplay,omitempty"`
	// The ID of the alert event.
	AlarmUniqueInfo *string `json:"AlarmUniqueInfo,omitempty" xml:"AlarmUniqueInfo,omitempty"`
	// The name of the application to which the alert event belongs.
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// Indicates whether the exception is automatically blocked.
	AutoBreaking *bool `json:"AutoBreaking,omitempty" xml:"AutoBreaking,omitempty"`
	// Indicates whether the online handling of the alert event is supported, such as quarantining the source file of the malicious process. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	CanBeDealOnLine *bool `json:"CanBeDealOnLine,omitempty" xml:"CanBeDealOnLine,omitempty"`
	// Indicates whether you can cancel marking the alert event as a false positive.
	CanCancelFault *bool `json:"CanCancelFault,omitempty" xml:"CanCancelFault,omitempty"`
	// Indicates whether the Safeguard Mode For Major Activities mode is enabled for the server. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	ContainHwMode *bool `json:"ContainHwMode,omitempty" xml:"ContainHwMode,omitempty"`
	// The ID of the container.
	ContainerId *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	// The ID of the image to which the container belongs.
	ContainerImageId *string `json:"ContainerImageId,omitempty" xml:"ContainerImageId,omitempty"`
	// The name of the container image.
	ContainerImageName *string `json:"ContainerImageName,omitempty" xml:"ContainerImageName,omitempty"`
	// The source of data. This parameter can be ignored.
	DataSource *string `json:"DataSource,omitempty" xml:"DataSource,omitempty"`
	// The impact of the alert event.
	Desc *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	// The details of the alert event.
	Details []*DescribeSuspEventsResponseBodySuspEventsDetails `json:"Details,omitempty" xml:"Details,omitempty" type:"Repeated"`
	// Indicates whether the exception can be detected by cloud sandbox. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DisplaySandboxResult *bool `json:"DisplaySandboxResult,omitempty" xml:"DisplaySandboxResult,omitempty"`
	// An array that consists of the remarks on the exception.
	EventNotes []*DescribeSuspEventsResponseBodySuspEventsEventNotes `json:"EventNotes,omitempty" xml:"EventNotes,omitempty" type:"Repeated"`
	// The status of the alert event. Valid values:
	//
	// *   **1**: pending handling
	// *   **2**: ignored
	// *   **4**: confirmed
	// *   **8**: marked as a false positive
	// *   **16**: being handled
	// *   **32**: handled
	// *   **64**: expired
	EventStatus *int32 `json:"EventStatus,omitempty" xml:"EventStatus,omitempty"`
	// The name of the alert event.
	EventSubType *string `json:"EventSubType,omitempty" xml:"EventSubType,omitempty"`
	// Indicates whether the alert event has trace information. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	HasTraceInfo *bool `json:"HasTraceInfo,omitempty" xml:"HasTraceInfo,omitempty"`
	// The ID of the alert event.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the affected asset.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the associated instance.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the associated instance.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the associated instance.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The ID of the Kubernetes cluster.
	K8sClusterId *string `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	// The name of the Kubernetes cluster.
	K8sClusterName *string `json:"K8sClusterName,omitempty" xml:"K8sClusterName,omitempty"`
	// The namespace of the Kubernetes cluster.
	K8sNamespace *string `json:"K8sNamespace,omitempty" xml:"K8sNamespace,omitempty"`
	// The ID of the Kubernetes cluster node.
	K8sNodeId *string `json:"K8sNodeId,omitempty" xml:"K8sNodeId,omitempty"`
	// The name of the Kubernetes cluster node.
	K8sNodeName *string `json:"K8sNodeName,omitempty" xml:"K8sNodeName,omitempty"`
	// The name of the Kubernetes pod.
	K8sPodName *string `json:"K8sPodName,omitempty" xml:"K8sPodName,omitempty"`
	// The time when the alert event was last generated.
	LastTime *string `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	// The timestamp when the exception was last detected. Unit: milliseconds.
	LastTimeStamp *int64 `json:"LastTimeStamp,omitempty" xml:"LastTimeStamp,omitempty"`
	// The severity of the alert event. Valid values:
	//
	// *   **serious**
	// *   **suspicious**
	// *   **remind**
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The status of the malicious behavior defense rule. Valid values:
	//
	// *   **open**: enabled
	// *   **close**: disabled
	MaliciousRuleStatus *string `json:"MaliciousRuleStatus,omitempty" xml:"MaliciousRuleStatus,omitempty"`
	// The advanced whitelist rule.
	MarkMisRules *string `json:"MarkMisRules,omitempty" xml:"MarkMisRules,omitempty"`
	// The complete name of the alert event.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The time when the alert event was first detected.
	OccurrenceTime *string `json:"OccurrenceTime,omitempty" xml:"OccurrenceTime,omitempty"`
	// The timestamp when the exception was first detected. Unit: milliseconds.
	OccurrenceTimeStamp *int64 `json:"OccurrenceTimeStamp,omitempty" xml:"OccurrenceTimeStamp,omitempty"`
	// The handling result code of the alert event.
	OperateErrorCode *string `json:"OperateErrorCode,omitempty" xml:"OperateErrorCode,omitempty"`
	// The description of the handing result of the alert event.
	OperateMsg *string `json:"OperateMsg,omitempty" xml:"OperateMsg,omitempty"`
	// The handling timestamp of the alert event. Unit: milliseconds.
	OperateTime *int64 `json:"OperateTime,omitempty" xml:"OperateTime,omitempty"`
	// The edition of Security Center in which the exception can be detected. Valid values:
	//
	// *   **0**: Basic edition
	// *   **1**: Enterprise edition
	SaleVersion *string `json:"SaleVersion,omitempty" xml:"SaleVersion,omitempty"`
	// The IDs of the associated alert events.
	SecurityEventIds *string `json:"SecurityEventIds,omitempty" xml:"SecurityEventIds,omitempty"`
	// The stage at which the attack is detected.
	Stages *string `json:"Stages,omitempty" xml:"Stages,omitempty"`
	// The display name of the attack stage.
	TacticItems []*DescribeSuspEventsResponseBodySuspEventsTacticItems `json:"TacticItems,omitempty" xml:"TacticItems,omitempty" type:"Repeated"`
	// The unique key of the alert.
	UniqueInfo *string `json:"UniqueInfo,omitempty" xml:"UniqueInfo,omitempty"`
	// The ID of the associated instance.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty" xml:"clusterId,omitempty"`
}

func (s DescribeSuspEventsResponseBodySuspEvents) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventsResponseBodySuspEvents) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetAdvanced(v bool) *DescribeSuspEventsResponseBodySuspEvents {
	s.Advanced = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetAlarmEventName(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.AlarmEventName = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetAlarmEventNameDisplay(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.AlarmEventNameDisplay = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetAlarmEventType(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.AlarmEventType = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetAlarmEventTypeDisplay(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.AlarmEventTypeDisplay = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetAlarmUniqueInfo(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.AlarmUniqueInfo = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetAppName(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.AppName = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetAutoBreaking(v bool) *DescribeSuspEventsResponseBodySuspEvents {
	s.AutoBreaking = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetCanBeDealOnLine(v bool) *DescribeSuspEventsResponseBodySuspEvents {
	s.CanBeDealOnLine = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetCanCancelFault(v bool) *DescribeSuspEventsResponseBodySuspEvents {
	s.CanCancelFault = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetContainHwMode(v bool) *DescribeSuspEventsResponseBodySuspEvents {
	s.ContainHwMode = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetContainerId(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.ContainerId = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetContainerImageId(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.ContainerImageId = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetContainerImageName(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.ContainerImageName = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetDataSource(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.DataSource = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetDesc(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.Desc = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetDetails(v []*DescribeSuspEventsResponseBodySuspEventsDetails) *DescribeSuspEventsResponseBodySuspEvents {
	s.Details = v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetDisplaySandboxResult(v bool) *DescribeSuspEventsResponseBodySuspEvents {
	s.DisplaySandboxResult = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetEventNotes(v []*DescribeSuspEventsResponseBodySuspEventsEventNotes) *DescribeSuspEventsResponseBodySuspEvents {
	s.EventNotes = v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetEventStatus(v int32) *DescribeSuspEventsResponseBodySuspEvents {
	s.EventStatus = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetEventSubType(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.EventSubType = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetHasTraceInfo(v bool) *DescribeSuspEventsResponseBodySuspEvents {
	s.HasTraceInfo = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetId(v int64) *DescribeSuspEventsResponseBodySuspEvents {
	s.Id = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetInstanceId(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.InstanceId = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetInstanceName(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.InstanceName = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetInternetIp(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.InternetIp = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetIntranetIp(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.IntranetIp = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetK8sClusterId(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.K8sClusterId = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetK8sClusterName(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.K8sClusterName = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetK8sNamespace(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.K8sNamespace = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetK8sNodeId(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.K8sNodeId = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetK8sNodeName(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.K8sNodeName = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetK8sPodName(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.K8sPodName = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetLastTime(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.LastTime = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetLastTimeStamp(v int64) *DescribeSuspEventsResponseBodySuspEvents {
	s.LastTimeStamp = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetLevel(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.Level = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetMaliciousRuleStatus(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.MaliciousRuleStatus = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetMarkMisRules(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.MarkMisRules = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetName(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.Name = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetOccurrenceTime(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.OccurrenceTime = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetOccurrenceTimeStamp(v int64) *DescribeSuspEventsResponseBodySuspEvents {
	s.OccurrenceTimeStamp = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetOperateErrorCode(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.OperateErrorCode = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetOperateMsg(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.OperateMsg = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetOperateTime(v int64) *DescribeSuspEventsResponseBodySuspEvents {
	s.OperateTime = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetSaleVersion(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.SaleVersion = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetSecurityEventIds(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.SecurityEventIds = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetStages(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.Stages = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetTacticItems(v []*DescribeSuspEventsResponseBodySuspEventsTacticItems) *DescribeSuspEventsResponseBodySuspEvents {
	s.TacticItems = v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetUniqueInfo(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.UniqueInfo = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetUuid(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.Uuid = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEvents) SetClusterId(v string) *DescribeSuspEventsResponseBodySuspEvents {
	s.ClusterId = &v
	return s
}

type DescribeSuspEventsResponseBodySuspEventsDetails struct {
	// The display name of the alert event.
	NameDisplay *string `json:"NameDisplay,omitempty" xml:"NameDisplay,omitempty"`
	// The type of the alert event.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The path of the alert event.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
	// The display path of the alert event.
	ValueDisplay *string `json:"ValueDisplay,omitempty" xml:"ValueDisplay,omitempty"`
}

func (s DescribeSuspEventsResponseBodySuspEventsDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventsResponseBodySuspEventsDetails) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventsResponseBodySuspEventsDetails) SetNameDisplay(v string) *DescribeSuspEventsResponseBodySuspEventsDetails {
	s.NameDisplay = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEventsDetails) SetType(v string) *DescribeSuspEventsResponseBodySuspEventsDetails {
	s.Type = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEventsDetails) SetValue(v string) *DescribeSuspEventsResponseBodySuspEventsDetails {
	s.Value = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEventsDetails) SetValueDisplay(v string) *DescribeSuspEventsResponseBodySuspEventsDetails {
	s.ValueDisplay = &v
	return s
}

type DescribeSuspEventsResponseBodySuspEventsEventNotes struct {
	// The remarks.
	Note *string `json:"Note,omitempty" xml:"Note,omitempty"`
	// The ID of the event record.
	NoteId *int64 `json:"NoteId,omitempty" xml:"NoteId,omitempty"`
	// The time when the event record was created.
	NoteTime *string `json:"NoteTime,omitempty" xml:"NoteTime,omitempty"`
}

func (s DescribeSuspEventsResponseBodySuspEventsEventNotes) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventsResponseBodySuspEventsEventNotes) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventsResponseBodySuspEventsEventNotes) SetNote(v string) *DescribeSuspEventsResponseBodySuspEventsEventNotes {
	s.Note = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEventsEventNotes) SetNoteId(v int64) *DescribeSuspEventsResponseBodySuspEventsEventNotes {
	s.NoteId = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEventsEventNotes) SetNoteTime(v string) *DescribeSuspEventsResponseBodySuspEventsEventNotes {
	s.NoteTime = &v
	return s
}

type DescribeSuspEventsResponseBodySuspEventsTacticItems struct {
	// The tactic name of ATT\&CK.
	TacticDisplayName *string `json:"TacticDisplayName,omitempty" xml:"TacticDisplayName,omitempty"`
	// The stage information about ATT\&CK.
	TacticId *string `json:"TacticId,omitempty" xml:"TacticId,omitempty"`
}

func (s DescribeSuspEventsResponseBodySuspEventsTacticItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventsResponseBodySuspEventsTacticItems) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventsResponseBodySuspEventsTacticItems) SetTacticDisplayName(v string) *DescribeSuspEventsResponseBodySuspEventsTacticItems {
	s.TacticDisplayName = &v
	return s
}

func (s *DescribeSuspEventsResponseBodySuspEventsTacticItems) SetTacticId(v string) *DescribeSuspEventsResponseBodySuspEventsTacticItems {
	s.TacticId = &v
	return s
}

type DescribeSuspEventsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSuspEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSuspEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspEventsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSuspEventsResponse) SetHeaders(v map[string]*string) *DescribeSuspEventsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSuspEventsResponse) SetStatusCode(v int32) *DescribeSuspEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSuspEventsResponse) SetBody(v *DescribeSuspEventsResponseBody) *DescribeSuspEventsResponse {
	s.Body = v
	return s
}

type DescribeSuspiciousOverallConfigRequest struct {
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The type of the feature. Valid values:
	//
	// *   **auto_breaking**: Anti-Virus
	// *   **ransomware_breaking**: Anti-ransomware (Bait Capture)
	// *   **webshell\_cloud_breaking**: Webshell Protection
	// *   **alinet**: Behavior prevention
	// *   **k8s\_log_analysis**: K8s Threat Detection
	// *   **alisecguard**: Defense mode for Client Protection
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeSuspiciousOverallConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspiciousOverallConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeSuspiciousOverallConfigRequest) SetSourceIp(v string) *DescribeSuspiciousOverallConfigRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeSuspiciousOverallConfigRequest) SetType(v string) *DescribeSuspiciousOverallConfigRequest {
	s.Type = &v
	return s
}

type DescribeSuspiciousOverallConfigResponseBody struct {
	// The configuration.
	OverallConfig *DescribeSuspiciousOverallConfigResponseBodyOverallConfig `json:"OverallConfig,omitempty" xml:"OverallConfig,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSuspiciousOverallConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspiciousOverallConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSuspiciousOverallConfigResponseBody) SetOverallConfig(v *DescribeSuspiciousOverallConfigResponseBodyOverallConfig) *DescribeSuspiciousOverallConfigResponseBody {
	s.OverallConfig = v
	return s
}

func (s *DescribeSuspiciousOverallConfigResponseBody) SetRequestId(v string) *DescribeSuspiciousOverallConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeSuspiciousOverallConfigResponseBodyOverallConfig struct {
	// The status of the feature. Valid values:
	//
	// *   **off**: disabled
	// *   **on**: enabled
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The type of the feature. Valid values:
	//
	// *   **auto_breaking**: Anti-Virus
	// *   **ransomware_breaking**: Anti-ransomware (Bait Capture)
	// *   **webshell\_cloud_breaking**: Webshell Protection
	// *   **alinet**: Behavior prevention
	// *   **k8s\_log_analysis**: K8s Threat Detection
	// *   **alisecguard**: Defense mode for Client Protection
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeSuspiciousOverallConfigResponseBodyOverallConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspiciousOverallConfigResponseBodyOverallConfig) GoString() string {
	return s.String()
}

func (s *DescribeSuspiciousOverallConfigResponseBodyOverallConfig) SetConfig(v string) *DescribeSuspiciousOverallConfigResponseBodyOverallConfig {
	s.Config = &v
	return s
}

func (s *DescribeSuspiciousOverallConfigResponseBodyOverallConfig) SetType(v string) *DescribeSuspiciousOverallConfigResponseBodyOverallConfig {
	s.Type = &v
	return s
}

type DescribeSuspiciousOverallConfigResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSuspiciousOverallConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSuspiciousOverallConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspiciousOverallConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeSuspiciousOverallConfigResponse) SetHeaders(v map[string]*string) *DescribeSuspiciousOverallConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeSuspiciousOverallConfigResponse) SetStatusCode(v int32) *DescribeSuspiciousOverallConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSuspiciousOverallConfigResponse) SetBody(v *DescribeSuspiciousOverallConfigResponseBody) *DescribeSuspiciousOverallConfigResponse {
	s.Body = v
	return s
}

type DescribeSuspiciousUUIDConfigRequest struct {
	// The type of proactive defense. Valid values:
	//
	// *   **auto_breaking**: virus defense
	// *   **ransomware_breaking**: ransomware capture
	// *   **webshell\_cloud_breaking**: webshell defense
	// *   **alinet**: malicious behavior defense
	// *   **alisecguard**: client protection
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeSuspiciousUUIDConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspiciousUUIDConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeSuspiciousUUIDConfigRequest) SetType(v string) *DescribeSuspiciousUUIDConfigRequest {
	s.Type = &v
	return s
}

type DescribeSuspiciousUUIDConfigResponseBody struct {
	// The total number of servers on which proactive defense of the specified type takes effect.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The UUIDs of servers on which proactive defense of the specified type takes effect.
	UUIDList []*string `json:"UUIDList,omitempty" xml:"UUIDList,omitempty" type:"Repeated"`
}

func (s DescribeSuspiciousUUIDConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspiciousUUIDConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSuspiciousUUIDConfigResponseBody) SetCount(v int32) *DescribeSuspiciousUUIDConfigResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeSuspiciousUUIDConfigResponseBody) SetRequestId(v string) *DescribeSuspiciousUUIDConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSuspiciousUUIDConfigResponseBody) SetUUIDList(v []*string) *DescribeSuspiciousUUIDConfigResponseBody {
	s.UUIDList = v
	return s
}

type DescribeSuspiciousUUIDConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSuspiciousUUIDConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSuspiciousUUIDConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSuspiciousUUIDConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeSuspiciousUUIDConfigResponse) SetHeaders(v map[string]*string) *DescribeSuspiciousUUIDConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeSuspiciousUUIDConfigResponse) SetStatusCode(v int32) *DescribeSuspiciousUUIDConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSuspiciousUUIDConfigResponse) SetBody(v *DescribeSuspiciousUUIDConfigResponseBody) *DescribeSuspiciousUUIDConfigResponse {
	s.Body = v
	return s
}

type DescribeTargetRequest struct {
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTargetRequest) GoString() string {
	return s.String()
}

func (s *DescribeTargetRequest) SetConfig(v string) *DescribeTargetRequest {
	s.Config = &v
	return s
}

func (s *DescribeTargetRequest) SetType(v string) *DescribeTargetRequest {
	s.Type = &v
	return s
}

type DescribeTargetResponseBody struct {
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Targets    []*DescribeTargetResponseBodyTargets `json:"Targets,omitempty" xml:"Targets,omitempty" type:"Repeated"`
	TotalCount *int32                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTargetResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTargetResponseBody) SetRequestId(v string) *DescribeTargetResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTargetResponseBody) SetTargets(v []*DescribeTargetResponseBodyTargets) *DescribeTargetResponseBody {
	s.Targets = v
	return s
}

func (s *DescribeTargetResponseBody) SetTotalCount(v int32) *DescribeTargetResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeTargetResponseBodyTargets struct {
	Flag       *string `json:"Flag,omitempty" xml:"Flag,omitempty"`
	Target     *string `json:"Target,omitempty" xml:"Target,omitempty"`
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s DescribeTargetResponseBodyTargets) String() string {
	return tea.Prettify(s)
}

func (s DescribeTargetResponseBodyTargets) GoString() string {
	return s.String()
}

func (s *DescribeTargetResponseBodyTargets) SetFlag(v string) *DescribeTargetResponseBodyTargets {
	s.Flag = &v
	return s
}

func (s *DescribeTargetResponseBodyTargets) SetTarget(v string) *DescribeTargetResponseBodyTargets {
	s.Target = &v
	return s
}

func (s *DescribeTargetResponseBodyTargets) SetTargetType(v string) *DescribeTargetResponseBodyTargets {
	s.TargetType = &v
	return s
}

type DescribeTargetResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTargetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTargetResponse) GoString() string {
	return s.String()
}

func (s *DescribeTargetResponse) SetHeaders(v map[string]*string) *DescribeTargetResponse {
	s.Headers = v
	return s
}

func (s *DescribeTargetResponse) SetStatusCode(v int32) *DescribeTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTargetResponse) SetBody(v *DescribeTargetResponseBody) *DescribeTargetResponse {
	s.Body = v
	return s
}

type DescribeTaskErrorLogRequest struct {
	// The ID of the task that you create to fix an image vulnerability.
	BuildTaskId *string `json:"BuildTaskId,omitempty" xml:"BuildTaskId,omitempty"`
}

func (s DescribeTaskErrorLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskErrorLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeTaskErrorLogRequest) SetBuildTaskId(v string) *DescribeTaskErrorLogRequest {
	s.BuildTaskId = &v
	return s
}

type DescribeTaskErrorLogResponseBody struct {
	// The error logs that are returned.
	Logs []*DescribeTaskErrorLogResponseBodyLogs `json:"Logs,omitempty" xml:"Logs,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeTaskErrorLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskErrorLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTaskErrorLogResponseBody) SetLogs(v []*DescribeTaskErrorLogResponseBodyLogs) *DescribeTaskErrorLogResponseBody {
	s.Logs = v
	return s
}

func (s *DescribeTaskErrorLogResponseBody) SetRequestId(v string) *DescribeTaskErrorLogResponseBody {
	s.RequestId = &v
	return s
}

type DescribeTaskErrorLogResponseBodyLogs struct {
	// The error log.
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s DescribeTaskErrorLogResponseBodyLogs) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskErrorLogResponseBodyLogs) GoString() string {
	return s.String()
}

func (s *DescribeTaskErrorLogResponseBodyLogs) SetText(v string) *DescribeTaskErrorLogResponseBodyLogs {
	s.Text = &v
	return s
}

type DescribeTaskErrorLogResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTaskErrorLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTaskErrorLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTaskErrorLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeTaskErrorLogResponse) SetHeaders(v map[string]*string) *DescribeTaskErrorLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeTaskErrorLogResponse) SetStatusCode(v int32) *DescribeTaskErrorLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTaskErrorLogResponse) SetBody(v *DescribeTaskErrorLogResponseBody) *DescribeTaskErrorLogResponse {
	s.Body = v
	return s
}

type DescribeTotalStatisticsRequest struct {
	From    *string `json:"From,omitempty" xml:"From,omitempty"`
	GroupId *int64  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Remark  *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
}

func (s DescribeTotalStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTotalStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTotalStatisticsRequest) SetFrom(v string) *DescribeTotalStatisticsRequest {
	s.From = &v
	return s
}

func (s *DescribeTotalStatisticsRequest) SetGroupId(v int64) *DescribeTotalStatisticsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeTotalStatisticsRequest) SetRemark(v string) *DescribeTotalStatisticsRequest {
	s.Remark = &v
	return s
}

type DescribeTotalStatisticsResponseBody struct {
	Account                *int32  `json:"Account,omitempty" xml:"Account,omitempty"`
	Health                 *int32  `json:"Health,omitempty" xml:"Health,omitempty"`
	HealthTotal            *int32  `json:"HealthTotal,omitempty" xml:"HealthTotal,omitempty"`
	HealthdealedTotal      *int32  `json:"HealthdealedTotal,omitempty" xml:"HealthdealedTotal,omitempty"`
	HealthhighTotal        *int32  `json:"HealthhighTotal,omitempty" xml:"HealthhighTotal,omitempty"`
	HealthlowTotal         *int32  `json:"HealthlowTotal,omitempty" xml:"HealthlowTotal,omitempty"`
	HealthmediumTotal      *int32  `json:"HealthmediumTotal,omitempty" xml:"HealthmediumTotal,omitempty"`
	HealthseriousTotal     *int32  `json:"HealthseriousTotal,omitempty" xml:"HealthseriousTotal,omitempty"`
	Newsuspicious          *int32  `json:"Newsuspicious,omitempty" xml:"Newsuspicious,omitempty"`
	Online                 *bool   `json:"Online,omitempty" xml:"Online,omitempty"`
	Patch                  *int32  `json:"Patch,omitempty" xml:"Patch,omitempty"`
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Suspicious             *int32  `json:"Suspicious,omitempty" xml:"Suspicious,omitempty"`
	SuspiciousTotal        *int32  `json:"SuspiciousTotal,omitempty" xml:"SuspiciousTotal,omitempty"`
	SuspiciousdealedTotal  *int32  `json:"SuspiciousdealedTotal,omitempty" xml:"SuspiciousdealedTotal,omitempty"`
	SuspicioushighTotal    *int32  `json:"SuspicioushighTotal,omitempty" xml:"SuspicioushighTotal,omitempty"`
	SuspiciouslowTotal     *int32  `json:"SuspiciouslowTotal,omitempty" xml:"SuspiciouslowTotal,omitempty"`
	SuspiciousmediumTotal  *int32  `json:"SuspiciousmediumTotal,omitempty" xml:"SuspiciousmediumTotal,omitempty"`
	SuspiciousseriousTotal *int32  `json:"SuspiciousseriousTotal,omitempty" xml:"SuspiciousseriousTotal,omitempty"`
	Trojan                 *int32  `json:"Trojan,omitempty" xml:"Trojan,omitempty"`
	Vul                    *int32  `json:"Vul,omitempty" xml:"Vul,omitempty"`
	VulAsapSum             *int32  `json:"VulAsapSum,omitempty" xml:"VulAsapSum,omitempty"`
	VulDealedTotal         *int32  `json:"VulDealedTotal,omitempty" xml:"VulDealedTotal,omitempty"`
	VulLaterSum            *int32  `json:"VulLaterSum,omitempty" xml:"VulLaterSum,omitempty"`
	VulNntfSum             *int32  `json:"VulNntfSum,omitempty" xml:"VulNntfSum,omitempty"`
	VulTotal               *int32  `json:"VulTotal,omitempty" xml:"VulTotal,omitempty"`
}

func (s DescribeTotalStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTotalStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTotalStatisticsResponseBody) SetAccount(v int32) *DescribeTotalStatisticsResponseBody {
	s.Account = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetHealth(v int32) *DescribeTotalStatisticsResponseBody {
	s.Health = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetHealthTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.HealthTotal = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetHealthdealedTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.HealthdealedTotal = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetHealthhighTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.HealthhighTotal = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetHealthlowTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.HealthlowTotal = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetHealthmediumTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.HealthmediumTotal = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetHealthseriousTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.HealthseriousTotal = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetNewsuspicious(v int32) *DescribeTotalStatisticsResponseBody {
	s.Newsuspicious = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetOnline(v bool) *DescribeTotalStatisticsResponseBody {
	s.Online = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetPatch(v int32) *DescribeTotalStatisticsResponseBody {
	s.Patch = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetRequestId(v string) *DescribeTotalStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetSuspicious(v int32) *DescribeTotalStatisticsResponseBody {
	s.Suspicious = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetSuspiciousTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.SuspiciousTotal = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetSuspiciousdealedTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.SuspiciousdealedTotal = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetSuspicioushighTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.SuspicioushighTotal = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetSuspiciouslowTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.SuspiciouslowTotal = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetSuspiciousmediumTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.SuspiciousmediumTotal = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetSuspiciousseriousTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.SuspiciousseriousTotal = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetTrojan(v int32) *DescribeTotalStatisticsResponseBody {
	s.Trojan = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetVul(v int32) *DescribeTotalStatisticsResponseBody {
	s.Vul = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetVulAsapSum(v int32) *DescribeTotalStatisticsResponseBody {
	s.VulAsapSum = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetVulDealedTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.VulDealedTotal = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetVulLaterSum(v int32) *DescribeTotalStatisticsResponseBody {
	s.VulLaterSum = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetVulNntfSum(v int32) *DescribeTotalStatisticsResponseBody {
	s.VulNntfSum = &v
	return s
}

func (s *DescribeTotalStatisticsResponseBody) SetVulTotal(v int32) *DescribeTotalStatisticsResponseBody {
	s.VulTotal = &v
	return s
}

type DescribeTotalStatisticsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTotalStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTotalStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTotalStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTotalStatisticsResponse) SetHeaders(v map[string]*string) *DescribeTotalStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeTotalStatisticsResponse) SetStatusCode(v int32) *DescribeTotalStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTotalStatisticsResponse) SetBody(v *DescribeTotalStatisticsResponseBody) *DescribeTotalStatisticsResponse {
	s.Body = v
	return s
}

type DescribeTraceInfoDetailRequest struct {
	From         *string `json:"From,omitempty" xml:"From,omitempty"`
	IncidentTime *int64  `json:"IncidentTime,omitempty" xml:"IncidentTime,omitempty"`
	Lang         *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SourceIp     *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Uuid         *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	VertexId     *string `json:"VertexId,omitempty" xml:"VertexId,omitempty"`
}

func (s DescribeTraceInfoDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoDetailRequest) SetFrom(v string) *DescribeTraceInfoDetailRequest {
	s.From = &v
	return s
}

func (s *DescribeTraceInfoDetailRequest) SetIncidentTime(v int64) *DescribeTraceInfoDetailRequest {
	s.IncidentTime = &v
	return s
}

func (s *DescribeTraceInfoDetailRequest) SetLang(v string) *DescribeTraceInfoDetailRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTraceInfoDetailRequest) SetSourceIp(v string) *DescribeTraceInfoDetailRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeTraceInfoDetailRequest) SetType(v string) *DescribeTraceInfoDetailRequest {
	s.Type = &v
	return s
}

func (s *DescribeTraceInfoDetailRequest) SetUuid(v string) *DescribeTraceInfoDetailRequest {
	s.Uuid = &v
	return s
}

func (s *DescribeTraceInfoDetailRequest) SetVertexId(v string) *DescribeTraceInfoDetailRequest {
	s.VertexId = &v
	return s
}

type DescribeTraceInfoDetailResponseBody struct {
	RequestId       *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success         *bool                                               `json:"Success,omitempty" xml:"Success,omitempty"`
	TraceInfoDetail *DescribeTraceInfoDetailResponseBodyTraceInfoDetail `json:"TraceInfoDetail,omitempty" xml:"TraceInfoDetail,omitempty" type:"Struct"`
}

func (s DescribeTraceInfoDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoDetailResponseBody) SetRequestId(v string) *DescribeTraceInfoDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBody) SetSuccess(v bool) *DescribeTraceInfoDetailResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBody) SetTraceInfoDetail(v *DescribeTraceInfoDetailResponseBodyTraceInfoDetail) *DescribeTraceInfoDetailResponseBody {
	s.TraceInfoDetail = v
	return s
}

type DescribeTraceInfoDetailResponseBodyTraceInfoDetail struct {
	EdgeList         []*DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList         `json:"EdgeList,omitempty" xml:"EdgeList,omitempty" type:"Repeated"`
	EntityTypeList   []*DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList   `json:"EntityTypeList,omitempty" xml:"EntityTypeList,omitempty" type:"Repeated"`
	RelationTypeList []*DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList `json:"RelationTypeList,omitempty" xml:"RelationTypeList,omitempty" type:"Repeated"`
	VertexList       []*DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList       `json:"VertexList,omitempty" xml:"VertexList,omitempty" type:"Repeated"`
}

func (s DescribeTraceInfoDetailResponseBodyTraceInfoDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoDetailResponseBodyTraceInfoDetail) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetail) SetEdgeList(v []*DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList) *DescribeTraceInfoDetailResponseBodyTraceInfoDetail {
	s.EdgeList = v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetail) SetEntityTypeList(v []*DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) *DescribeTraceInfoDetailResponseBodyTraceInfoDetail {
	s.EntityTypeList = v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetail) SetRelationTypeList(v []*DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList) *DescribeTraceInfoDetailResponseBodyTraceInfoDetail {
	s.RelationTypeList = v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetail) SetVertexList(v []*DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList) *DescribeTraceInfoDetailResponseBodyTraceInfoDetail {
	s.VertexList = v
	return s
}

type DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList struct {
	Count   *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	EndId   *string `json:"EndId,omitempty" xml:"EndId,omitempty"`
	StartId *string `json:"StartId,omitempty" xml:"StartId,omitempty"`
	Time    *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList) SetCount(v int32) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList {
	s.Count = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList) SetEndId(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList {
	s.EndId = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList) SetStartId(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList {
	s.StartId = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList) SetTime(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList {
	s.Time = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList) SetType(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEdgeList {
	s.Type = &v
	return s
}

type DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList struct {
	DbId            *int32  `json:"DbId,omitempty" xml:"DbId,omitempty"`
	DisplayColor    *string `json:"DisplayColor,omitempty" xml:"DisplayColor,omitempty"`
	DisplayIcon     *string `json:"DisplayIcon,omitempty" xml:"DisplayIcon,omitempty"`
	DisplayTemplate *string `json:"DisplayTemplate,omitempty" xml:"DisplayTemplate,omitempty"`
	GmtCreate       *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified     *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Limit           *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace       *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Offset          *int32  `json:"Offset,omitempty" xml:"Offset,omitempty"`
}

func (s DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) SetDbId(v int32) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList {
	s.DbId = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) SetDisplayColor(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList {
	s.DisplayColor = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) SetDisplayIcon(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList {
	s.DisplayIcon = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) SetDisplayTemplate(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList {
	s.DisplayTemplate = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) SetGmtCreate(v int64) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList {
	s.GmtCreate = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) SetGmtModified(v int64) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList {
	s.GmtModified = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) SetId(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList {
	s.Id = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) SetLimit(v int32) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList {
	s.Limit = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) SetName(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList {
	s.Name = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) SetNamespace(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList {
	s.Namespace = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList) SetOffset(v int32) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailEntityTypeList {
	s.Offset = &v
	return s
}

type DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList struct {
	Directed       *int32  `json:"Directed,omitempty" xml:"Directed,omitempty"`
	DisplayColor   *string `json:"DisplayColor,omitempty" xml:"DisplayColor,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RelationTypeId *string `json:"RelationTypeId,omitempty" xml:"RelationTypeId,omitempty"`
	ShowType       *string `json:"ShowType,omitempty" xml:"ShowType,omitempty"`
}

func (s DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList) SetDirected(v int32) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList {
	s.Directed = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList) SetDisplayColor(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList {
	s.DisplayColor = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList) SetName(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList {
	s.Name = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList) SetRelationTypeId(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList {
	s.RelationTypeId = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList) SetShowType(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailRelationTypeList {
	s.ShowType = &v
	return s
}

type DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList struct {
	Count        *int32                                                                      `json:"Count,omitempty" xml:"Count,omitempty"`
	Id           *string                                                                     `json:"Id,omitempty" xml:"Id,omitempty"`
	Name         *string                                                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	NeighborList []*DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexListNeighborList `json:"NeighborList,omitempty" xml:"NeighborList,omitempty" type:"Repeated"`
	Time         *string                                                                     `json:"Time,omitempty" xml:"Time,omitempty"`
	Type         *string                                                                     `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList) SetCount(v int32) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList {
	s.Count = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList) SetId(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList {
	s.Id = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList) SetName(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList {
	s.Name = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList) SetNeighborList(v []*DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexListNeighborList) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList {
	s.NeighborList = v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList) SetTime(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList {
	s.Time = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList) SetType(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexList {
	s.Type = &v
	return s
}

type DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexListNeighborList struct {
	Count   *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	HasMore *bool   `json:"HasMore,omitempty" xml:"HasMore,omitempty"`
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexListNeighborList) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexListNeighborList) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexListNeighborList) SetCount(v int32) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexListNeighborList {
	s.Count = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexListNeighborList) SetHasMore(v bool) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexListNeighborList {
	s.HasMore = &v
	return s
}

func (s *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexListNeighborList) SetType(v string) *DescribeTraceInfoDetailResponseBodyTraceInfoDetailVertexListNeighborList {
	s.Type = &v
	return s
}

type DescribeTraceInfoDetailResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTraceInfoDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTraceInfoDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoDetailResponse) SetHeaders(v map[string]*string) *DescribeTraceInfoDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeTraceInfoDetailResponse) SetStatusCode(v int32) *DescribeTraceInfoDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTraceInfoDetailResponse) SetBody(v *DescribeTraceInfoDetailResponseBody) *DescribeTraceInfoDetailResponse {
	s.Body = v
	return s
}

type DescribeTraceInfoNodeRequest struct {
	EventName    *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	From         *string `json:"From,omitempty" xml:"From,omitempty"`
	IncidentTime *int64  `json:"IncidentTime,omitempty" xml:"IncidentTime,omitempty"`
	Lang         *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SourceIp     *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Uuid         *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	VertexId     *string `json:"VertexId,omitempty" xml:"VertexId,omitempty"`
}

func (s DescribeTraceInfoNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoNodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoNodeRequest) SetEventName(v string) *DescribeTraceInfoNodeRequest {
	s.EventName = &v
	return s
}

func (s *DescribeTraceInfoNodeRequest) SetFrom(v string) *DescribeTraceInfoNodeRequest {
	s.From = &v
	return s
}

func (s *DescribeTraceInfoNodeRequest) SetIncidentTime(v int64) *DescribeTraceInfoNodeRequest {
	s.IncidentTime = &v
	return s
}

func (s *DescribeTraceInfoNodeRequest) SetLang(v string) *DescribeTraceInfoNodeRequest {
	s.Lang = &v
	return s
}

func (s *DescribeTraceInfoNodeRequest) SetSourceIp(v string) *DescribeTraceInfoNodeRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeTraceInfoNodeRequest) SetType(v string) *DescribeTraceInfoNodeRequest {
	s.Type = &v
	return s
}

func (s *DescribeTraceInfoNodeRequest) SetUuid(v string) *DescribeTraceInfoNodeRequest {
	s.Uuid = &v
	return s
}

func (s *DescribeTraceInfoNodeRequest) SetVertexId(v string) *DescribeTraceInfoNodeRequest {
	s.VertexId = &v
	return s
}

type DescribeTraceInfoNodeResponseBody struct {
	Node      *DescribeTraceInfoNodeResponseBodyNode `json:"Node,omitempty" xml:"Node,omitempty" type:"Struct"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeTraceInfoNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoNodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoNodeResponseBody) SetNode(v *DescribeTraceInfoNodeResponseBodyNode) *DescribeTraceInfoNodeResponseBody {
	s.Node = v
	return s
}

func (s *DescribeTraceInfoNodeResponseBody) SetRequestId(v string) *DescribeTraceInfoNodeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeTraceInfoNodeResponseBodyNode struct {
	Name         *string                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	PropertyList []*DescribeTraceInfoNodeResponseBodyNodePropertyList `json:"PropertyList,omitempty" xml:"PropertyList,omitempty" type:"Repeated"`
	Type         *string                                              `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeTraceInfoNodeResponseBodyNode) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoNodeResponseBodyNode) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoNodeResponseBodyNode) SetName(v string) *DescribeTraceInfoNodeResponseBodyNode {
	s.Name = &v
	return s
}

func (s *DescribeTraceInfoNodeResponseBodyNode) SetPropertyList(v []*DescribeTraceInfoNodeResponseBodyNodePropertyList) *DescribeTraceInfoNodeResponseBodyNode {
	s.PropertyList = v
	return s
}

func (s *DescribeTraceInfoNodeResponseBodyNode) SetType(v string) *DescribeTraceInfoNodeResponseBodyNode {
	s.Type = &v
	return s
}

type DescribeTraceInfoNodeResponseBodyNodePropertyList struct {
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeTraceInfoNodeResponseBodyNodePropertyList) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoNodeResponseBodyNodePropertyList) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoNodeResponseBodyNodePropertyList) SetName(v string) *DescribeTraceInfoNodeResponseBodyNodePropertyList {
	s.Name = &v
	return s
}

func (s *DescribeTraceInfoNodeResponseBodyNodePropertyList) SetValue(v string) *DescribeTraceInfoNodeResponseBodyNodePropertyList {
	s.Value = &v
	return s
}

type DescribeTraceInfoNodeResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTraceInfoNodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTraceInfoNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTraceInfoNodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeTraceInfoNodeResponse) SetHeaders(v map[string]*string) *DescribeTraceInfoNodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeTraceInfoNodeResponse) SetStatusCode(v int32) *DescribeTraceInfoNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTraceInfoNodeResponse) SetBody(v *DescribeTraceInfoNodeResponseBody) *DescribeTraceInfoNodeResponse {
	s.Body = v
	return s
}

type DescribeUniBackupDatabaseRequest struct {
	CurrentPage  *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QueryType    *string `json:"QueryType,omitempty" xml:"QueryType,omitempty"`
	UniRegionId  *string `json:"UniRegionId,omitempty" xml:"UniRegionId,omitempty"`
}

func (s DescribeUniBackupDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupDatabaseRequest) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupDatabaseRequest) SetCurrentPage(v int32) *DescribeUniBackupDatabaseRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeUniBackupDatabaseRequest) SetDatabaseType(v string) *DescribeUniBackupDatabaseRequest {
	s.DatabaseType = &v
	return s
}

func (s *DescribeUniBackupDatabaseRequest) SetInstanceName(v string) *DescribeUniBackupDatabaseRequest {
	s.InstanceName = &v
	return s
}

func (s *DescribeUniBackupDatabaseRequest) SetPageSize(v int32) *DescribeUniBackupDatabaseRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeUniBackupDatabaseRequest) SetQueryType(v string) *DescribeUniBackupDatabaseRequest {
	s.QueryType = &v
	return s
}

func (s *DescribeUniBackupDatabaseRequest) SetUniRegionId(v string) *DescribeUniBackupDatabaseRequest {
	s.UniRegionId = &v
	return s
}

type DescribeUniBackupDatabaseResponseBody struct {
	DatabaseList []*DescribeUniBackupDatabaseResponseBodyDatabaseList `json:"DatabaseList,omitempty" xml:"DatabaseList,omitempty" type:"Repeated"`
	PageInfo     *DescribeUniBackupDatabaseResponseBodyPageInfo       `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId    *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUniBackupDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupDatabaseResponseBody) SetDatabaseList(v []*DescribeUniBackupDatabaseResponseBodyDatabaseList) *DescribeUniBackupDatabaseResponseBody {
	s.DatabaseList = v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBody) SetPageInfo(v *DescribeUniBackupDatabaseResponseBodyPageInfo) *DescribeUniBackupDatabaseResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBody) SetRequestId(v string) *DescribeUniBackupDatabaseResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUniBackupDatabaseResponseBodyDatabaseList struct {
	AgentStatus      *string `json:"AgentStatus,omitempty" xml:"AgentStatus,omitempty"`
	CreatedByProduct *string `json:"CreatedByProduct,omitempty" xml:"CreatedByProduct,omitempty"`
	DatabaseName     *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	DatabaseType     *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	DatabaseVersion  *string `json:"DatabaseVersion,omitempty" xml:"DatabaseVersion,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName     *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceUuid     *string `json:"InstanceUuid,omitempty" xml:"InstanceUuid,omitempty"`
	PolicyId         *int64  `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeUniBackupDatabaseResponseBodyDatabaseList) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupDatabaseResponseBodyDatabaseList) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupDatabaseResponseBodyDatabaseList) SetAgentStatus(v string) *DescribeUniBackupDatabaseResponseBodyDatabaseList {
	s.AgentStatus = &v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBodyDatabaseList) SetCreatedByProduct(v string) *DescribeUniBackupDatabaseResponseBodyDatabaseList {
	s.CreatedByProduct = &v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBodyDatabaseList) SetDatabaseName(v string) *DescribeUniBackupDatabaseResponseBodyDatabaseList {
	s.DatabaseName = &v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBodyDatabaseList) SetDatabaseType(v string) *DescribeUniBackupDatabaseResponseBodyDatabaseList {
	s.DatabaseType = &v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBodyDatabaseList) SetDatabaseVersion(v string) *DescribeUniBackupDatabaseResponseBodyDatabaseList {
	s.DatabaseVersion = &v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBodyDatabaseList) SetInstanceId(v string) *DescribeUniBackupDatabaseResponseBodyDatabaseList {
	s.InstanceId = &v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBodyDatabaseList) SetInstanceName(v string) *DescribeUniBackupDatabaseResponseBodyDatabaseList {
	s.InstanceName = &v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBodyDatabaseList) SetInstanceUuid(v string) *DescribeUniBackupDatabaseResponseBodyDatabaseList {
	s.InstanceUuid = &v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBodyDatabaseList) SetPolicyId(v int64) *DescribeUniBackupDatabaseResponseBodyDatabaseList {
	s.PolicyId = &v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBodyDatabaseList) SetStatus(v string) *DescribeUniBackupDatabaseResponseBodyDatabaseList {
	s.Status = &v
	return s
}

type DescribeUniBackupDatabaseResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeUniBackupDatabaseResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupDatabaseResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupDatabaseResponseBodyPageInfo) SetCount(v int32) *DescribeUniBackupDatabaseResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeUniBackupDatabaseResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBodyPageInfo) SetPageSize(v int32) *DescribeUniBackupDatabaseResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeUniBackupDatabaseResponseBodyPageInfo) SetTotalCount(v int32) *DescribeUniBackupDatabaseResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeUniBackupDatabaseResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUniBackupDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUniBackupDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupDatabaseResponse) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupDatabaseResponse) SetHeaders(v map[string]*string) *DescribeUniBackupDatabaseResponse {
	s.Headers = v
	return s
}

func (s *DescribeUniBackupDatabaseResponse) SetStatusCode(v int32) *DescribeUniBackupDatabaseResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUniBackupDatabaseResponse) SetBody(v *DescribeUniBackupDatabaseResponseBody) *DescribeUniBackupDatabaseResponse {
	s.Body = v
	return s
}

type DescribeUniBackupPoliciesRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PolicyName  *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
}

func (s DescribeUniBackupPoliciesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupPoliciesRequest) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupPoliciesRequest) SetCurrentPage(v int32) *DescribeUniBackupPoliciesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeUniBackupPoliciesRequest) SetPageSize(v int32) *DescribeUniBackupPoliciesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeUniBackupPoliciesRequest) SetPolicyName(v string) *DescribeUniBackupPoliciesRequest {
	s.PolicyName = &v
	return s
}

type DescribeUniBackupPoliciesResponseBody struct {
	PageInfo          *DescribeUniBackupPoliciesResponseBodyPageInfo            `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId         *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UniBackupPolicies []*DescribeUniBackupPoliciesResponseBodyUniBackupPolicies `json:"UniBackupPolicies,omitempty" xml:"UniBackupPolicies,omitempty" type:"Repeated"`
}

func (s DescribeUniBackupPoliciesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupPoliciesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupPoliciesResponseBody) SetPageInfo(v *DescribeUniBackupPoliciesResponseBodyPageInfo) *DescribeUniBackupPoliciesResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBody) SetRequestId(v string) *DescribeUniBackupPoliciesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBody) SetUniBackupPolicies(v []*DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) *DescribeUniBackupPoliciesResponseBody {
	s.UniBackupPolicies = v
	return s
}

type DescribeUniBackupPoliciesResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeUniBackupPoliciesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupPoliciesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupPoliciesResponseBodyPageInfo) SetCount(v int32) *DescribeUniBackupPoliciesResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeUniBackupPoliciesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyPageInfo) SetPageSize(v int32) *DescribeUniBackupPoliciesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyPageInfo) SetTotalCount(v int32) *DescribeUniBackupPoliciesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeUniBackupPoliciesResponseBodyUniBackupPolicies struct {
	AgentErrorMessage *string `json:"AgentErrorMessage,omitempty" xml:"AgentErrorMessage,omitempty"`
	AgentStatus       *string `json:"AgentStatus,omitempty" xml:"AgentStatus,omitempty"`
	DatabaseName      *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	DatabaseType      *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	ErrorCode         *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage      *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName      *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceStatus    *string `json:"InstanceStatus,omitempty" xml:"InstanceStatus,omitempty"`
	InstanceUuid      *string `json:"InstanceUuid,omitempty" xml:"InstanceUuid,omitempty"`
	LatestBackResult  *string `json:"LatestBackResult,omitempty" xml:"LatestBackResult,omitempty"`
	LatestBackupTime  *string `json:"LatestBackupTime,omitempty" xml:"LatestBackupTime,omitempty"`
	PlanStatus        *string `json:"PlanStatus,omitempty" xml:"PlanStatus,omitempty"`
	PolicyId          *int64  `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	PolicyName        *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	PolicyStatus      *string `json:"PolicyStatus,omitempty" xml:"PolicyStatus,omitempty"`
	UniRegionId       *string `json:"UniRegionId,omitempty" xml:"UniRegionId,omitempty"`
}

func (s DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetAgentErrorMessage(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.AgentErrorMessage = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetAgentStatus(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.AgentStatus = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetDatabaseName(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.DatabaseName = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetDatabaseType(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.DatabaseType = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetErrorCode(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.ErrorCode = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetErrorMessage(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetInstanceId(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.InstanceId = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetInstanceName(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.InstanceName = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetInstanceStatus(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.InstanceStatus = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetInstanceUuid(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.InstanceUuid = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetLatestBackResult(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.LatestBackResult = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetLatestBackupTime(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.LatestBackupTime = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetPlanStatus(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.PlanStatus = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetPolicyId(v int64) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.PolicyId = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetPolicyName(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.PolicyName = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetPolicyStatus(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.PolicyStatus = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies) SetUniRegionId(v string) *DescribeUniBackupPoliciesResponseBodyUniBackupPolicies {
	s.UniRegionId = &v
	return s
}

type DescribeUniBackupPoliciesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUniBackupPoliciesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUniBackupPoliciesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupPoliciesResponse) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupPoliciesResponse) SetHeaders(v map[string]*string) *DescribeUniBackupPoliciesResponse {
	s.Headers = v
	return s
}

func (s *DescribeUniBackupPoliciesResponse) SetStatusCode(v int32) *DescribeUniBackupPoliciesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUniBackupPoliciesResponse) SetBody(v *DescribeUniBackupPoliciesResponseBody) *DescribeUniBackupPoliciesResponse {
	s.Body = v
	return s
}

type DescribeUniBackupPolicyDetailRequest struct {
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
}

func (s DescribeUniBackupPolicyDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupPolicyDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupPolicyDetailRequest) SetPolicyId(v string) *DescribeUniBackupPolicyDetailRequest {
	s.PolicyId = &v
	return s
}

type DescribeUniBackupPolicyDetailResponseBody struct {
	RequestId          *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UniBackupPolicyDTO *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO `json:"UniBackupPolicyDTO,omitempty" xml:"UniBackupPolicyDTO,omitempty" type:"Struct"`
}

func (s DescribeUniBackupPolicyDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupPolicyDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupPolicyDetailResponseBody) SetRequestId(v string) *DescribeUniBackupPolicyDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBody) SetUniBackupPolicyDTO(v *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) *DescribeUniBackupPolicyDetailResponseBody {
	s.UniBackupPolicyDTO = v
	return s
}

type DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO struct {
	AccountName  *string                                                              `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	AgentStatus  *string                                                              `json:"AgentStatus,omitempty" xml:"AgentStatus,omitempty"`
	DatabaseType *string                                                              `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	FullPlan     *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOFullPlan `json:"FullPlan,omitempty" xml:"FullPlan,omitempty" type:"Struct"`
	IncPlan      *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOIncPlan  `json:"IncPlan,omitempty" xml:"IncPlan,omitempty" type:"Struct"`
	InstanceId   *string                                                              `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName *string                                                              `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	PolicyId     *int64                                                               `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	PolicyName   *string                                                              `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	PolicyStatus *string                                                              `json:"PolicyStatus,omitempty" xml:"PolicyStatus,omitempty"`
	Retention    *int32                                                               `json:"Retention,omitempty" xml:"Retention,omitempty"`
	SpeedLimiter *int64                                                               `json:"SpeedLimiter,omitempty" xml:"SpeedLimiter,omitempty"`
}

func (s DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) SetAccountName(v string) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO {
	s.AccountName = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) SetAgentStatus(v string) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO {
	s.AgentStatus = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) SetDatabaseType(v string) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO {
	s.DatabaseType = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) SetFullPlan(v *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOFullPlan) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO {
	s.FullPlan = v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) SetIncPlan(v *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOIncPlan) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO {
	s.IncPlan = v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) SetInstanceId(v string) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO {
	s.InstanceId = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) SetInstanceName(v string) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO {
	s.InstanceName = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) SetPolicyId(v int64) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO {
	s.PolicyId = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) SetPolicyName(v string) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO {
	s.PolicyName = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) SetPolicyStatus(v string) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO {
	s.PolicyStatus = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) SetRetention(v int32) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO {
	s.Retention = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO) SetSpeedLimiter(v int64) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTO {
	s.SpeedLimiter = &v
	return s
}

type DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOFullPlan struct {
	Days      []*string `json:"Days,omitempty" xml:"Days,omitempty" type:"Repeated"`
	Interval  *int32    `json:"Interval,omitempty" xml:"Interval,omitempty"`
	PlanType  *string   `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
	StartTime *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOFullPlan) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOFullPlan) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOFullPlan) SetDays(v []*string) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOFullPlan {
	s.Days = v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOFullPlan) SetInterval(v int32) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOFullPlan {
	s.Interval = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOFullPlan) SetPlanType(v string) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOFullPlan {
	s.PlanType = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOFullPlan) SetStartTime(v string) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOFullPlan {
	s.StartTime = &v
	return s
}

type DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOIncPlan struct {
	Days      []*string `json:"Days,omitempty" xml:"Days,omitempty" type:"Repeated"`
	Interval  *int32    `json:"Interval,omitempty" xml:"Interval,omitempty"`
	PlanType  *string   `json:"PlanType,omitempty" xml:"PlanType,omitempty"`
	StartTime *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOIncPlan) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOIncPlan) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOIncPlan) SetDays(v []*string) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOIncPlan {
	s.Days = v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOIncPlan) SetInterval(v int32) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOIncPlan {
	s.Interval = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOIncPlan) SetPlanType(v string) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOIncPlan {
	s.PlanType = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOIncPlan) SetStartTime(v string) *DescribeUniBackupPolicyDetailResponseBodyUniBackupPolicyDTOIncPlan {
	s.StartTime = &v
	return s
}

type DescribeUniBackupPolicyDetailResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUniBackupPolicyDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUniBackupPolicyDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniBackupPolicyDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeUniBackupPolicyDetailResponse) SetHeaders(v map[string]*string) *DescribeUniBackupPolicyDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponse) SetStatusCode(v int32) *DescribeUniBackupPolicyDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUniBackupPolicyDetailResponse) SetBody(v *DescribeUniBackupPolicyDetailResponseBody) *DescribeUniBackupPolicyDetailResponse {
	s.Body = v
	return s
}

type DescribeUniRecoverableListRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Database    *string `json:"Database,omitempty" xml:"Database,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PolicyId    *int64  `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
}

func (s DescribeUniRecoverableListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniRecoverableListRequest) GoString() string {
	return s.String()
}

func (s *DescribeUniRecoverableListRequest) SetCurrentPage(v int32) *DescribeUniRecoverableListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeUniRecoverableListRequest) SetDatabase(v string) *DescribeUniRecoverableListRequest {
	s.Database = &v
	return s
}

func (s *DescribeUniRecoverableListRequest) SetPageSize(v int32) *DescribeUniRecoverableListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeUniRecoverableListRequest) SetPolicyId(v int64) *DescribeUniRecoverableListRequest {
	s.PolicyId = &v
	return s
}

type DescribeUniRecoverableListResponseBody struct {
	Count               *int32                                                       `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage         *int32                                                       `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Database            *string                                                      `json:"Database,omitempty" xml:"Database,omitempty"`
	PageSize            *int32                                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RecoverableInfoList []*DescribeUniRecoverableListResponseBodyRecoverableInfoList `json:"RecoverableInfoList,omitempty" xml:"RecoverableInfoList,omitempty" type:"Repeated"`
	RequestId           *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount          *int32                                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeUniRecoverableListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniRecoverableListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUniRecoverableListResponseBody) SetCount(v int32) *DescribeUniRecoverableListResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeUniRecoverableListResponseBody) SetCurrentPage(v int32) *DescribeUniRecoverableListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeUniRecoverableListResponseBody) SetDatabase(v string) *DescribeUniRecoverableListResponseBody {
	s.Database = &v
	return s
}

func (s *DescribeUniRecoverableListResponseBody) SetPageSize(v int32) *DescribeUniRecoverableListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeUniRecoverableListResponseBody) SetRecoverableInfoList(v []*DescribeUniRecoverableListResponseBodyRecoverableInfoList) *DescribeUniRecoverableListResponseBody {
	s.RecoverableInfoList = v
	return s
}

func (s *DescribeUniRecoverableListResponseBody) SetRequestId(v string) *DescribeUniRecoverableListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUniRecoverableListResponseBody) SetTotalCount(v int32) *DescribeUniRecoverableListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeUniRecoverableListResponseBodyRecoverableInfoList struct {
	FirstTime   *int64  `json:"FirstTime,omitempty" xml:"FirstTime,omitempty"`
	LastTime    *int64  `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	ResetScn    *string `json:"ResetScn,omitempty" xml:"ResetScn,omitempty"`
	ResetTime   *int64  `json:"ResetTime,omitempty" xml:"ResetTime,omitempty"`
	RestoreInfo *string `json:"RestoreInfo,omitempty" xml:"RestoreInfo,omitempty"`
}

func (s DescribeUniRecoverableListResponseBodyRecoverableInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniRecoverableListResponseBodyRecoverableInfoList) GoString() string {
	return s.String()
}

func (s *DescribeUniRecoverableListResponseBodyRecoverableInfoList) SetFirstTime(v int64) *DescribeUniRecoverableListResponseBodyRecoverableInfoList {
	s.FirstTime = &v
	return s
}

func (s *DescribeUniRecoverableListResponseBodyRecoverableInfoList) SetLastTime(v int64) *DescribeUniRecoverableListResponseBodyRecoverableInfoList {
	s.LastTime = &v
	return s
}

func (s *DescribeUniRecoverableListResponseBodyRecoverableInfoList) SetResetScn(v string) *DescribeUniRecoverableListResponseBodyRecoverableInfoList {
	s.ResetScn = &v
	return s
}

func (s *DescribeUniRecoverableListResponseBodyRecoverableInfoList) SetResetTime(v int64) *DescribeUniRecoverableListResponseBodyRecoverableInfoList {
	s.ResetTime = &v
	return s
}

func (s *DescribeUniRecoverableListResponseBodyRecoverableInfoList) SetRestoreInfo(v string) *DescribeUniRecoverableListResponseBodyRecoverableInfoList {
	s.RestoreInfo = &v
	return s
}

type DescribeUniRecoverableListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUniRecoverableListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUniRecoverableListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniRecoverableListResponse) GoString() string {
	return s.String()
}

func (s *DescribeUniRecoverableListResponse) SetHeaders(v map[string]*string) *DescribeUniRecoverableListResponse {
	s.Headers = v
	return s
}

func (s *DescribeUniRecoverableListResponse) SetStatusCode(v int32) *DescribeUniRecoverableListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUniRecoverableListResponse) SetBody(v *DescribeUniRecoverableListResponseBody) *DescribeUniRecoverableListResponse {
	s.Body = v
	return s
}

type DescribeUniSupportRegionResponseBody struct {
	RequestId        *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UniSupportRegion []*string `json:"UniSupportRegion,omitempty" xml:"UniSupportRegion,omitempty" type:"Repeated"`
}

func (s DescribeUniSupportRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniSupportRegionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUniSupportRegionResponseBody) SetRequestId(v string) *DescribeUniSupportRegionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUniSupportRegionResponseBody) SetUniSupportRegion(v []*string) *DescribeUniSupportRegionResponseBody {
	s.UniSupportRegion = v
	return s
}

type DescribeUniSupportRegionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUniSupportRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUniSupportRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUniSupportRegionResponse) GoString() string {
	return s.String()
}

func (s *DescribeUniSupportRegionResponse) SetHeaders(v map[string]*string) *DescribeUniSupportRegionResponse {
	s.Headers = v
	return s
}

func (s *DescribeUniSupportRegionResponse) SetStatusCode(v int32) *DescribeUniSupportRegionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUniSupportRegionResponse) SetBody(v *DescribeUniSupportRegionResponseBody) *DescribeUniSupportRegionResponse {
	s.Body = v
	return s
}

type DescribeUserBackupMachinesResponseBody struct {
	// An array consisting of the servers to which the anti-ransomware policy is applied.
	Machines []*DescribeUserBackupMachinesResponseBodyMachines `json:"Machines,omitempty" xml:"Machines,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUserBackupMachinesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBackupMachinesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserBackupMachinesResponseBody) SetMachines(v []*DescribeUserBackupMachinesResponseBodyMachines) *DescribeUserBackupMachinesResponseBody {
	s.Machines = v
	return s
}

func (s *DescribeUserBackupMachinesResponseBody) SetRequestId(v string) *DescribeUserBackupMachinesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUserBackupMachinesResponseBodyMachines struct {
	// The ID of the anti-ransomware policy that is applied to the server.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the anti-ransomware policy that is applied to the server.
	PolicyName *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	// The UUID of the server to which the anti-ransomware policy is applied.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeUserBackupMachinesResponseBodyMachines) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBackupMachinesResponseBodyMachines) GoString() string {
	return s.String()
}

func (s *DescribeUserBackupMachinesResponseBodyMachines) SetId(v int64) *DescribeUserBackupMachinesResponseBodyMachines {
	s.Id = &v
	return s
}

func (s *DescribeUserBackupMachinesResponseBodyMachines) SetPolicyName(v string) *DescribeUserBackupMachinesResponseBodyMachines {
	s.PolicyName = &v
	return s
}

func (s *DescribeUserBackupMachinesResponseBodyMachines) SetUuid(v string) *DescribeUserBackupMachinesResponseBodyMachines {
	s.Uuid = &v
	return s
}

type DescribeUserBackupMachinesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUserBackupMachinesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUserBackupMachinesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBackupMachinesResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserBackupMachinesResponse) SetHeaders(v map[string]*string) *DescribeUserBackupMachinesResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserBackupMachinesResponse) SetStatusCode(v int32) *DescribeUserBackupMachinesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserBackupMachinesResponse) SetBody(v *DescribeUserBackupMachinesResponseBody) *DescribeUserBackupMachinesResponse {
	s.Body = v
	return s
}

type DescribeUserBaselineAuthorizationRequest struct {
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SourceIp        *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeUserBaselineAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBaselineAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserBaselineAuthorizationRequest) SetLang(v string) *DescribeUserBaselineAuthorizationRequest {
	s.Lang = &v
	return s
}

func (s *DescribeUserBaselineAuthorizationRequest) SetResourceOwnerId(v int64) *DescribeUserBaselineAuthorizationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeUserBaselineAuthorizationRequest) SetSourceIp(v string) *DescribeUserBaselineAuthorizationRequest {
	s.SourceIp = &v
	return s
}

type DescribeUserBaselineAuthorizationResponseBody struct {
	RequestId                 *string                                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserBaselineAuthorization *DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization `json:"UserBaselineAuthorization,omitempty" xml:"UserBaselineAuthorization,omitempty" type:"Struct"`
}

func (s DescribeUserBaselineAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBaselineAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserBaselineAuthorizationResponseBody) SetRequestId(v string) *DescribeUserBaselineAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUserBaselineAuthorizationResponseBody) SetUserBaselineAuthorization(v *DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization) *DescribeUserBaselineAuthorizationResponseBody {
	s.UserBaselineAuthorization = v
	return s
}

type DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization struct {
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization) GoString() string {
	return s.String()
}

func (s *DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization) SetStatus(v int32) *DescribeUserBaselineAuthorizationResponseBodyUserBaselineAuthorization {
	s.Status = &v
	return s
}

type DescribeUserBaselineAuthorizationResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUserBaselineAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUserBaselineAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBaselineAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserBaselineAuthorizationResponse) SetHeaders(v map[string]*string) *DescribeUserBaselineAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserBaselineAuthorizationResponse) SetStatusCode(v int32) *DescribeUserBaselineAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserBaselineAuthorizationResponse) SetBody(v *DescribeUserBaselineAuthorizationResponseBody) *DescribeUserBaselineAuthorizationResponse {
	s.Body = v
	return s
}

type DescribeUserLayoutAuthorizationRequest struct {
	// The language of the content within the request and response. Valid values:
	// - **zh**: Chinese
	// - **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The ID of the asset owner.
	ResourceOwnerId *int64 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeUserLayoutAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserLayoutAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserLayoutAuthorizationRequest) SetLang(v string) *DescribeUserLayoutAuthorizationRequest {
	s.Lang = &v
	return s
}

func (s *DescribeUserLayoutAuthorizationRequest) SetResourceOwnerId(v int64) *DescribeUserLayoutAuthorizationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeUserLayoutAuthorizationRequest) SetSourceIp(v string) *DescribeUserLayoutAuthorizationRequest {
	s.SourceIp = &v
	return s
}

type DescribeUserLayoutAuthorizationResponseBody struct {
	// The result of the query. Valid values:
	// - **true**: The brute-force attacks protection feature has been authorized.
	// - **false**: The brute-force attacks protection feature is not authorized.
	Authorized *bool `json:"Authorized,omitempty" xml:"Authorized,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUserLayoutAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserLayoutAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserLayoutAuthorizationResponseBody) SetAuthorized(v bool) *DescribeUserLayoutAuthorizationResponseBody {
	s.Authorized = &v
	return s
}

func (s *DescribeUserLayoutAuthorizationResponseBody) SetRequestId(v string) *DescribeUserLayoutAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUserLayoutAuthorizationResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUserLayoutAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUserLayoutAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserLayoutAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserLayoutAuthorizationResponse) SetHeaders(v map[string]*string) *DescribeUserLayoutAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserLayoutAuthorizationResponse) SetStatusCode(v int32) *DescribeUserLayoutAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserLayoutAuthorizationResponse) SetBody(v *DescribeUserLayoutAuthorizationResponseBody) *DescribeUserLayoutAuthorizationResponse {
	s.Body = v
	return s
}

type DescribeUuidsByVulNamesRequest struct {
	// Specifies whether the vulnerability is handled. Valid values:
	//
	// **y**: yes. **n**: no.
	Dealed *string `json:"Dealed,omitempty" xml:"Dealed,omitempty"`
	// The name of the search field that is used to query containers.
	FieldName *string `json:"FieldName,omitempty" xml:"FieldName,omitempty"`
	// The value of the search field that is used to query containers.
	FieldValue *string `json:"FieldValue,omitempty" xml:"FieldValue,omitempty"`
	// The ID of the asset group.
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The severity of the vulnerability. Separate multiple severities with commas (,). Valid values:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The priority based on which the vulnerability is fixed. Separate multiple priorities with commas (,). Valid values:
	//
	// *   **asap**: high
	// *   **later**: medium
	// *   **nntf**: low
	Necessity *string `json:"Necessity,omitempty" xml:"Necessity,omitempty"`
	// The remarks for the asset affected by the vulnerability. The value can be the private IP address, public IP address, or name of the asset. Fuzzy match is supported.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The tags that are used to search for the vulnerability.
	SearchTags *string `json:"SearchTags,omitempty" xml:"SearchTags,omitempty"`
	// The status of the vulnerability. Separate multiple states with commas (,). Valid values:
	//
	// *   **1**: unfixed
	// *   **4**: being fixed
	// *   **7**: fixed
	StatusList *string `json:"StatusList,omitempty" xml:"StatusList,omitempty"`
	// The tag that is added to the vulnerability.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The type of the query condition. Valid values:
	//
	// *   **containerId**: the ID of the container
	// *   **uuid**: the ID of the asset
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	// The type of the vulnerability. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	// *   **cms**: Web-CMS vulnerabilities
	// *   **app**: application vulnerability
	// *   **emg**: urgent vulnerabilities
	// *   **sca**: vulnerabilities that are detected based on software component analysis
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the virtual private cloud (VPC) in which the vulnerability is detected. Separate multiple IDs with commas (,).
	VpcInstanceIds *string `json:"VpcInstanceIds,omitempty" xml:"VpcInstanceIds,omitempty"`
	// An array that consists of the names of vulnerabilities.
	//
	// >  You can call the [DescribeGroupedVul](~~DescribeGroupedVul~~) operation to obtain the names of vulnerabilities.
	VulNames []*string `json:"VulNames,omitempty" xml:"VulNames,omitempty" type:"Repeated"`
}

func (s DescribeUuidsByVulNamesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUuidsByVulNamesRequest) GoString() string {
	return s.String()
}

func (s *DescribeUuidsByVulNamesRequest) SetDealed(v string) *DescribeUuidsByVulNamesRequest {
	s.Dealed = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetFieldName(v string) *DescribeUuidsByVulNamesRequest {
	s.FieldName = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetFieldValue(v string) *DescribeUuidsByVulNamesRequest {
	s.FieldValue = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetGroupId(v int64) *DescribeUuidsByVulNamesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetLang(v string) *DescribeUuidsByVulNamesRequest {
	s.Lang = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetLevel(v string) *DescribeUuidsByVulNamesRequest {
	s.Level = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetNecessity(v string) *DescribeUuidsByVulNamesRequest {
	s.Necessity = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetRemark(v string) *DescribeUuidsByVulNamesRequest {
	s.Remark = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetSearchTags(v string) *DescribeUuidsByVulNamesRequest {
	s.SearchTags = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetStatusList(v string) *DescribeUuidsByVulNamesRequest {
	s.StatusList = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetTag(v string) *DescribeUuidsByVulNamesRequest {
	s.Tag = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetTargetType(v string) *DescribeUuidsByVulNamesRequest {
	s.TargetType = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetType(v string) *DescribeUuidsByVulNamesRequest {
	s.Type = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetVpcInstanceIds(v string) *DescribeUuidsByVulNamesRequest {
	s.VpcInstanceIds = &v
	return s
}

func (s *DescribeUuidsByVulNamesRequest) SetVulNames(v []*string) *DescribeUuidsByVulNamesRequest {
	s.VulNames = v
	return s
}

type DescribeUuidsByVulNamesResponseBody struct {
	// An array that consists of the statistics about the assets.
	MachineInfoStatistics []*DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics `json:"MachineInfoStatistics,omitempty" xml:"MachineInfoStatistics,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUuidsByVulNamesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUuidsByVulNamesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUuidsByVulNamesResponseBody) SetMachineInfoStatistics(v []*DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics) *DescribeUuidsByVulNamesResponseBody {
	s.MachineInfoStatistics = v
	return s
}

func (s *DescribeUuidsByVulNamesResponseBody) SetRequestId(v string) *DescribeUuidsByVulNamesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics struct {
	// The ID of the server.
	MachineInstanceId *string `json:"MachineInstanceId,omitempty" xml:"MachineInstanceId,omitempty"`
	// The IP address of the server.
	MachineIp *string `json:"MachineIp,omitempty" xml:"MachineIp,omitempty"`
	// The name of the server.
	MachineName *string `json:"MachineName,omitempty" xml:"MachineName,omitempty"`
	// The name of the operating system that the server runs.
	Os *string `json:"Os,omitempty" xml:"Os,omitempty"`
	// The ID of the region in which the server resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics) String() string {
	return tea.Prettify(s)
}

func (s DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics) GoString() string {
	return s.String()
}

func (s *DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics) SetMachineInstanceId(v string) *DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics {
	s.MachineInstanceId = &v
	return s
}

func (s *DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics) SetMachineIp(v string) *DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics {
	s.MachineIp = &v
	return s
}

func (s *DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics) SetMachineName(v string) *DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics {
	s.MachineName = &v
	return s
}

func (s *DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics) SetOs(v string) *DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics {
	s.Os = &v
	return s
}

func (s *DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics) SetRegionId(v string) *DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics {
	s.RegionId = &v
	return s
}

func (s *DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics) SetUuid(v string) *DescribeUuidsByVulNamesResponseBodyMachineInfoStatistics {
	s.Uuid = &v
	return s
}

type DescribeUuidsByVulNamesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUuidsByVulNamesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUuidsByVulNamesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUuidsByVulNamesResponse) GoString() string {
	return s.String()
}

func (s *DescribeUuidsByVulNamesResponse) SetHeaders(v map[string]*string) *DescribeUuidsByVulNamesResponse {
	s.Headers = v
	return s
}

func (s *DescribeUuidsByVulNamesResponse) SetStatusCode(v int32) *DescribeUuidsByVulNamesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUuidsByVulNamesResponse) SetBody(v *DescribeUuidsByVulNamesResponseBody) *DescribeUuidsByVulNamesResponse {
	s.Body = v
	return s
}

type DescribeVendorListResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of the service providers.
	VendorNameList []*string `json:"VendorNameList,omitempty" xml:"VendorNameList,omitempty" type:"Repeated"`
}

func (s DescribeVendorListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVendorListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVendorListResponseBody) SetRequestId(v string) *DescribeVendorListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVendorListResponseBody) SetVendorNameList(v []*string) *DescribeVendorListResponseBody {
	s.VendorNameList = v
	return s
}

type DescribeVendorListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVendorListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVendorListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVendorListResponse) GoString() string {
	return s.String()
}

func (s *DescribeVendorListResponse) SetHeaders(v map[string]*string) *DescribeVendorListResponse {
	s.Headers = v
	return s
}

func (s *DescribeVendorListResponse) SetStatusCode(v int32) *DescribeVendorListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVendorListResponse) SetBody(v *DescribeVendorListResponseBody) *DescribeVendorListResponse {
	s.Body = v
	return s
}

type DescribeVersionConfigRequest struct {
	// The ID of the Alibaba Cloud account that uses Security Center.
	//
	// >  You can call the [GetUser](~~28681~~) operation to query the IDs of Alibaba Cloud accounts.
	ResourceDirectoryAccountId *string `json:"ResourceDirectoryAccountId,omitempty" xml:"ResourceDirectoryAccountId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeVersionConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVersionConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeVersionConfigRequest) SetResourceDirectoryAccountId(v string) *DescribeVersionConfigRequest {
	s.ResourceDirectoryAccountId = &v
	return s
}

func (s *DescribeVersionConfigRequest) SetSourceIp(v string) *DescribeVersionConfigRequest {
	s.SourceIp = &v
	return s
}

type DescribeVersionConfigResponseBody struct {
	// Indicates whether the pay-as-you-go billing method is supported.
	//
	// *   **0**: no
	// *   **1**: yes
	AllowPartialBuy *int32 `json:"AllowPartialBuy,omitempty" xml:"AllowPartialBuy,omitempty"`
	// Indicates whether the application whitelist feature is enabled. Valid values:
	//
	// *   **0**: no
	// *   **2**: yes
	AppWhiteList *int32 `json:"AppWhiteList,omitempty" xml:"AppWhiteList,omitempty"`
	// The quota for the application whitelist feature.
	//
	// >  The quantity of servers that are allowed by the quota is deducted by one each time you apply an application whitelist to a server. After you enable the application whitelist feature, the quota is 20 by default.
	AppWhiteListAuthCount *int64 `json:"AppWhiteListAuthCount,omitempty" xml:"AppWhiteListAuthCount,omitempty"`
	// The quota for servers that can be protected.
	AssetLevel *int32 `json:"AssetLevel,omitempty" xml:"AssetLevel,omitempty"`
	// The most advanced edition that is used. Valid values:
	//
	// *   **1**: Basic edition
	// *   **3**: Enterprise edition
	// *   **5**: Advanced edition
	// *   **6**: Anti-virus edition
	// *   **7**: Ultimate edition
	// *   **10**: Value-added Plan edition
	//
	// >  If you purchase the Multi-version edition of Security Center, the value indicates the most advanced edition that is used in the Multi-version edition. If you do not purchase the Multi-version edition of Security Center, the value indicates the edition of Security Center.
	HighestVersion *int32 `json:"HighestVersion,omitempty" xml:"HighestVersion,omitempty"`
	// The number of honeypots.
	HoneypotCapacity *int64 `json:"HoneypotCapacity,omitempty" xml:"HoneypotCapacity,omitempty"`
	// The quota for the container image scan feature.
	ImageScanCapacity *int64 `json:"ImageScanCapacity,omitempty" xml:"ImageScanCapacity,omitempty"`
	// The ID of purchased Security Center.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Indicates whether Security Center runs the latest version of the Ultimate edition.
	//
	// *   **true**: yes
	// *   **false**: no
	IsNewContainerVersion *bool `json:"IsNewContainerVersion,omitempty" xml:"IsNewContainerVersion,omitempty"`
	// Indicates whether the number of existing servers exceeds the purchased quota. Valid values:
	//
	// *   **false**: no
	// *   **true**: yes
	IsOverBalance *bool `json:"IsOverBalance,omitempty" xml:"IsOverBalance,omitempty"`
	// Indicates whether Security Center runs the free trial edition. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	IsTrialVersion *int32 `json:"IsTrialVersion,omitempty" xml:"IsTrialVersion,omitempty"`
	// The timestamp when the last trial ends. Unit: milliseconds.
	LastTrailEndTime *int64 `json:"LastTrailEndTime,omitempty" xml:"LastTrailEndTime,omitempty"`
	// The total quota in the Multi-version edition of purchased Security Center.
	MVAuthCount *int32 `json:"MVAuthCount,omitempty" xml:"MVAuthCount,omitempty"`
	// The total remaining quota in the Multi-version edition of purchased Security Center.
	MVUnusedAuthCount *int32 `json:"MVUnusedAuthCount,omitempty" xml:"MVUnusedAuthCount,omitempty"`
	// The timestamp when Security Center is purchased. Unit: milliseconds.
	OpenTime *int64 `json:"OpenTime,omitempty" xml:"OpenTime,omitempty"`
	// The timestamp when Security Center is released. Unit: milliseconds. The value of this parameter is seven days after Security Center expires.
	//
	// >  If you do not renew the subscription within seven days after the expiration date, the Value-added Plan, Basic Anti-Virus, Advanced, or Enterprise edition is downgraded to the Basic edition. In this case, you can no longer view the configurations of Security Center or historical statistics such as DDoS alerts. You must purchase another subscription of the Basic Anti-Virus, Advanced, or Enterprise edition to continue using relevant features. For more information, see [Purchase Security Center](~~42308~~).
	ReleaseTime *int64 `json:"ReleaseTime,omitempty" xml:"ReleaseTime,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether log analysis is purchased. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	SasLog *int32 `json:"SasLog,omitempty" xml:"SasLog,omitempty"`
	// Indicates whether the security screen feature is purchased. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	SasScreen *int32 `json:"SasScreen,omitempty" xml:"SasScreen,omitempty"`
	// The log storage capacity that you purchase. Unit: GB. Valid values: 0 to 200000.
	SlsCapacity *int64 `json:"SlsCapacity,omitempty" xml:"SlsCapacity,omitempty"`
	// The purchased log storage capacity for threat analysis. Unit: GB.
	ThreatAnalysisCapacity *int64 `json:"ThreatAnalysisCapacity,omitempty" xml:"ThreatAnalysisCapacity,omitempty"`
	// Indicates whether the custom alert feature is enabled. Valid values:
	//
	// *   **0**: no
	// *   **2**: yes
	UserDefinedAlarms *int32 `json:"UserDefinedAlarms,omitempty" xml:"UserDefinedAlarms,omitempty"`
	// The edition of purchased Security Center. Valid values:
	//
	// *   **1**: Basic edition
	// *   **3**: Enterprise edition
	// *   **5**: Advanced edition
	// *   **6**: Anti-virus edition
	// *   **7**: Ultimate edition
	// *   **8**: Multi-version edition
	// *   **10**: Value-added Plan edition
	Version *int32 `json:"Version,omitempty" xml:"Version,omitempty"`
	// The quota for the cores of servers that can be protected.
	VmCores *int32 `json:"VmCores,omitempty" xml:"VmCores,omitempty"`
	// Indicates whether the web tamper proofing feature is enabled. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	WebLock *int32 `json:"WebLock,omitempty" xml:"WebLock,omitempty"`
	// The quota for the web tamper proofing feature. The quantity of servers that are allowed by the quota is deducted by one each time a server is protected by the web tamper proofing feature. Valid values: 0 to N.
	//
	// >  N indicates the number of servers that you own.
	WebLockAuthCount *int64 `json:"WebLockAuthCount,omitempty" xml:"WebLockAuthCount,omitempty"`
}

func (s DescribeVersionConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVersionConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVersionConfigResponseBody) SetAllowPartialBuy(v int32) *DescribeVersionConfigResponseBody {
	s.AllowPartialBuy = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetAppWhiteList(v int32) *DescribeVersionConfigResponseBody {
	s.AppWhiteList = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetAppWhiteListAuthCount(v int64) *DescribeVersionConfigResponseBody {
	s.AppWhiteListAuthCount = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetAssetLevel(v int32) *DescribeVersionConfigResponseBody {
	s.AssetLevel = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetHighestVersion(v int32) *DescribeVersionConfigResponseBody {
	s.HighestVersion = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetHoneypotCapacity(v int64) *DescribeVersionConfigResponseBody {
	s.HoneypotCapacity = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetImageScanCapacity(v int64) *DescribeVersionConfigResponseBody {
	s.ImageScanCapacity = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetInstanceId(v string) *DescribeVersionConfigResponseBody {
	s.InstanceId = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetIsNewContainerVersion(v bool) *DescribeVersionConfigResponseBody {
	s.IsNewContainerVersion = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetIsOverBalance(v bool) *DescribeVersionConfigResponseBody {
	s.IsOverBalance = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetIsTrialVersion(v int32) *DescribeVersionConfigResponseBody {
	s.IsTrialVersion = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetLastTrailEndTime(v int64) *DescribeVersionConfigResponseBody {
	s.LastTrailEndTime = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetMVAuthCount(v int32) *DescribeVersionConfigResponseBody {
	s.MVAuthCount = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetMVUnusedAuthCount(v int32) *DescribeVersionConfigResponseBody {
	s.MVUnusedAuthCount = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetOpenTime(v int64) *DescribeVersionConfigResponseBody {
	s.OpenTime = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetReleaseTime(v int64) *DescribeVersionConfigResponseBody {
	s.ReleaseTime = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetRequestId(v string) *DescribeVersionConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetSasLog(v int32) *DescribeVersionConfigResponseBody {
	s.SasLog = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetSasScreen(v int32) *DescribeVersionConfigResponseBody {
	s.SasScreen = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetSlsCapacity(v int64) *DescribeVersionConfigResponseBody {
	s.SlsCapacity = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetThreatAnalysisCapacity(v int64) *DescribeVersionConfigResponseBody {
	s.ThreatAnalysisCapacity = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetUserDefinedAlarms(v int32) *DescribeVersionConfigResponseBody {
	s.UserDefinedAlarms = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetVersion(v int32) *DescribeVersionConfigResponseBody {
	s.Version = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetVmCores(v int32) *DescribeVersionConfigResponseBody {
	s.VmCores = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetWebLock(v int32) *DescribeVersionConfigResponseBody {
	s.WebLock = &v
	return s
}

func (s *DescribeVersionConfigResponseBody) SetWebLockAuthCount(v int64) *DescribeVersionConfigResponseBody {
	s.WebLockAuthCount = &v
	return s
}

type DescribeVersionConfigResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVersionConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVersionConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVersionConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeVersionConfigResponse) SetHeaders(v map[string]*string) *DescribeVersionConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeVersionConfigResponse) SetStatusCode(v int32) *DescribeVersionConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVersionConfigResponse) SetBody(v *DescribeVersionConfigResponseBody) *DescribeVersionConfigResponse {
	s.Body = v
	return s
}

type DescribeVpcHoneyPotCriteriaResponseBody struct {
	// An array consisting of the search conditions that can be used to query honeypots.
	CriteriaList []*DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList `json:"CriteriaList,omitempty" xml:"CriteriaList,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVpcHoneyPotCriteriaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHoneyPotCriteriaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVpcHoneyPotCriteriaResponseBody) SetCriteriaList(v []*DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList) *DescribeVpcHoneyPotCriteriaResponseBody {
	s.CriteriaList = v
	return s
}

func (s *DescribeVpcHoneyPotCriteriaResponseBody) SetRequestId(v string) *DescribeVpcHoneyPotCriteriaResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList struct {
	// The name of the search condition.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the search condition. Valid values:
	//
	// *   **input**: You must manually enter the search condition.
	// *   **select**: You must select a search condition from the **Values** drop-down list.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The values of the search condition. This parameter is returned only if the value of **Type** is **select**.
	//
	// >  If the value of **Type** is **input**, the value of this parameter is an empty string.
	Values *string `json:"Values,omitempty" xml:"Values,omitempty"`
}

func (s DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList) GoString() string {
	return s.String()
}

func (s *DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList) SetName(v string) *DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList {
	s.Name = &v
	return s
}

func (s *DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList) SetType(v string) *DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList {
	s.Type = &v
	return s
}

func (s *DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList) SetValues(v string) *DescribeVpcHoneyPotCriteriaResponseBodyCriteriaList {
	s.Values = &v
	return s
}

type DescribeVpcHoneyPotCriteriaResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVpcHoneyPotCriteriaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVpcHoneyPotCriteriaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHoneyPotCriteriaResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpcHoneyPotCriteriaResponse) SetHeaders(v map[string]*string) *DescribeVpcHoneyPotCriteriaResponse {
	s.Headers = v
	return s
}

func (s *DescribeVpcHoneyPotCriteriaResponse) SetStatusCode(v int32) *DescribeVpcHoneyPotCriteriaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVpcHoneyPotCriteriaResponse) SetBody(v *DescribeVpcHoneyPotCriteriaResponseBody) *DescribeVpcHoneyPotCriteriaResponse {
	s.Body = v
	return s
}

type DescribeVpcHoneyPotListRequest struct {
	CurrentPage       *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	HoneyPotExistence *bool   `json:"HoneyPotExistence,omitempty" xml:"HoneyPotExistence,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	VpcId             *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VpcName           *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
	VpcRegionId       *string `json:"VpcRegionId,omitempty" xml:"VpcRegionId,omitempty"`
}

func (s DescribeVpcHoneyPotListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHoneyPotListRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpcHoneyPotListRequest) SetCurrentPage(v int32) *DescribeVpcHoneyPotListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVpcHoneyPotListRequest) SetHoneyPotExistence(v bool) *DescribeVpcHoneyPotListRequest {
	s.HoneyPotExistence = &v
	return s
}

func (s *DescribeVpcHoneyPotListRequest) SetPageSize(v int32) *DescribeVpcHoneyPotListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVpcHoneyPotListRequest) SetVpcId(v string) *DescribeVpcHoneyPotListRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeVpcHoneyPotListRequest) SetVpcName(v string) *DescribeVpcHoneyPotListRequest {
	s.VpcName = &v
	return s
}

func (s *DescribeVpcHoneyPotListRequest) SetVpcRegionId(v string) *DescribeVpcHoneyPotListRequest {
	s.VpcRegionId = &v
	return s
}

type DescribeVpcHoneyPotListResponseBody struct {
	PageInfo           *DescribeVpcHoneyPotListResponseBodyPageInfo             `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId          *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VpcHoneyPotDTOList []*DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList `json:"VpcHoneyPotDTOList,omitempty" xml:"VpcHoneyPotDTOList,omitempty" type:"Repeated"`
}

func (s DescribeVpcHoneyPotListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHoneyPotListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVpcHoneyPotListResponseBody) SetPageInfo(v *DescribeVpcHoneyPotListResponseBodyPageInfo) *DescribeVpcHoneyPotListResponseBody {
	s.PageInfo = v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBody) SetRequestId(v string) *DescribeVpcHoneyPotListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBody) SetVpcHoneyPotDTOList(v []*DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) *DescribeVpcHoneyPotListResponseBody {
	s.VpcHoneyPotDTOList = v
	return s
}

type DescribeVpcHoneyPotListResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeVpcHoneyPotListResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHoneyPotListResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *DescribeVpcHoneyPotListResponseBodyPageInfo) SetCount(v int32) *DescribeVpcHoneyPotListResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyPageInfo) SetCurrentPage(v int32) *DescribeVpcHoneyPotListResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyPageInfo) SetPageSize(v int32) *DescribeVpcHoneyPotListResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyPageInfo) SetTotalCount(v int32) *DescribeVpcHoneyPotListResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList struct {
	CidrBlock                 *string                                                                 `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	CreateTime                *int64                                                                  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	HoneyPotEcsInstanceStatus *string                                                                 `json:"HoneyPotEcsInstanceStatus,omitempty" xml:"HoneyPotEcsInstanceStatus,omitempty"`
	HoneyPotEniInstanceId     *string                                                                 `json:"HoneyPotEniInstanceId,omitempty" xml:"HoneyPotEniInstanceId,omitempty"`
	HoneyPotExistence         *bool                                                                   `json:"HoneyPotExistence,omitempty" xml:"HoneyPotExistence,omitempty"`
	HoneyPotInstanceStatus    *string                                                                 `json:"HoneyPotInstanceStatus,omitempty" xml:"HoneyPotInstanceStatus,omitempty"`
	HoneyPotVpcSwitchId       *string                                                                 `json:"HoneyPotVpcSwitchId,omitempty" xml:"HoneyPotVpcSwitchId,omitempty"`
	VpcId                     *string                                                                 `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VpcName                   *string                                                                 `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
	VpcRegionId               *string                                                                 `json:"VpcRegionId,omitempty" xml:"VpcRegionId,omitempty"`
	VpcStatus                 *string                                                                 `json:"VpcStatus,omitempty" xml:"VpcStatus,omitempty"`
	VpcSwitchIdList           []*DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList `json:"VpcSwitchIdList,omitempty" xml:"VpcSwitchIdList,omitempty" type:"Repeated"`
}

func (s DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) GoString() string {
	return s.String()
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) SetCidrBlock(v string) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList {
	s.CidrBlock = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) SetCreateTime(v int64) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList {
	s.CreateTime = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) SetHoneyPotEcsInstanceStatus(v string) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList {
	s.HoneyPotEcsInstanceStatus = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) SetHoneyPotEniInstanceId(v string) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList {
	s.HoneyPotEniInstanceId = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) SetHoneyPotExistence(v bool) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList {
	s.HoneyPotExistence = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) SetHoneyPotInstanceStatus(v string) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList {
	s.HoneyPotInstanceStatus = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) SetHoneyPotVpcSwitchId(v string) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList {
	s.HoneyPotVpcSwitchId = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) SetVpcId(v string) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList {
	s.VpcId = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) SetVpcName(v string) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList {
	s.VpcName = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) SetVpcRegionId(v string) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList {
	s.VpcRegionId = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) SetVpcStatus(v string) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList {
	s.VpcStatus = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList) SetVpcSwitchIdList(v []*DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOList {
	s.VpcSwitchIdList = v
	return s
}

type DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList struct {
	VpcSwitchId   *string `json:"VpcSwitchId,omitempty" xml:"VpcSwitchId,omitempty"`
	VpcSwitchName *string `json:"VpcSwitchName,omitempty" xml:"VpcSwitchName,omitempty"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList) GoString() string {
	return s.String()
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList) SetVpcSwitchId(v string) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList {
	s.VpcSwitchId = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList) SetVpcSwitchName(v string) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList {
	s.VpcSwitchName = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList) SetZoneId(v string) *DescribeVpcHoneyPotListResponseBodyVpcHoneyPotDTOListVpcSwitchIdList {
	s.ZoneId = &v
	return s
}

type DescribeVpcHoneyPotListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVpcHoneyPotListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVpcHoneyPotListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcHoneyPotListResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpcHoneyPotListResponse) SetHeaders(v map[string]*string) *DescribeVpcHoneyPotListResponse {
	s.Headers = v
	return s
}

func (s *DescribeVpcHoneyPotListResponse) SetStatusCode(v int32) *DescribeVpcHoneyPotListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVpcHoneyPotListResponse) SetBody(v *DescribeVpcHoneyPotListResponseBody) *DescribeVpcHoneyPotListResponse {
	s.Body = v
	return s
}

type DescribeVpcListResponseBody struct {
	// The total number of entries returned.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of VPCs.
	VpcList []*DescribeVpcListResponseBodyVpcList `json:"VpcList,omitempty" xml:"VpcList,omitempty" type:"Repeated"`
}

func (s DescribeVpcListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVpcListResponseBody) SetCount(v int32) *DescribeVpcListResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeVpcListResponseBody) SetRequestId(v string) *DescribeVpcListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVpcListResponseBody) SetVpcList(v []*DescribeVpcListResponseBodyVpcList) *DescribeVpcListResponseBody {
	s.VpcList = v
	return s
}

type DescribeVpcListResponseBodyVpcList struct {
	// The number of ECS instances.
	EcsCount *int32 `json:"EcsCount,omitempty" xml:"EcsCount,omitempty"`
	// The information about the VPC.
	InstanceDesc *string `json:"InstanceDesc,omitempty" xml:"InstanceDesc,omitempty"`
	// The ID of the ECS instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the VPC.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The region in which the ECS instance resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeVpcListResponseBodyVpcList) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcListResponseBodyVpcList) GoString() string {
	return s.String()
}

func (s *DescribeVpcListResponseBodyVpcList) SetEcsCount(v int32) *DescribeVpcListResponseBodyVpcList {
	s.EcsCount = &v
	return s
}

func (s *DescribeVpcListResponseBodyVpcList) SetInstanceDesc(v string) *DescribeVpcListResponseBodyVpcList {
	s.InstanceDesc = &v
	return s
}

func (s *DescribeVpcListResponseBodyVpcList) SetInstanceId(v string) *DescribeVpcListResponseBodyVpcList {
	s.InstanceId = &v
	return s
}

func (s *DescribeVpcListResponseBodyVpcList) SetInstanceName(v string) *DescribeVpcListResponseBodyVpcList {
	s.InstanceName = &v
	return s
}

func (s *DescribeVpcListResponseBodyVpcList) SetRegionId(v string) *DescribeVpcListResponseBodyVpcList {
	s.RegionId = &v
	return s
}

type DescribeVpcListResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVpcListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVpcListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcListResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpcListResponse) SetHeaders(v map[string]*string) *DescribeVpcListResponse {
	s.Headers = v
	return s
}

func (s *DescribeVpcListResponse) SetStatusCode(v int32) *DescribeVpcListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVpcListResponse) SetBody(v *DescribeVpcListResponseBody) *DescribeVpcListResponse {
	s.Body = v
	return s
}

type DescribeVulCheckTaskStatusDetailRequest struct {
	TaskIds []*string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
	Types   []*string `json:"Types,omitempty" xml:"Types,omitempty" type:"Repeated"`
	Uuid    *string   `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeVulCheckTaskStatusDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulCheckTaskStatusDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeVulCheckTaskStatusDetailRequest) SetTaskIds(v []*string) *DescribeVulCheckTaskStatusDetailRequest {
	s.TaskIds = v
	return s
}

func (s *DescribeVulCheckTaskStatusDetailRequest) SetTypes(v []*string) *DescribeVulCheckTaskStatusDetailRequest {
	s.Types = v
	return s
}

func (s *DescribeVulCheckTaskStatusDetailRequest) SetUuid(v string) *DescribeVulCheckTaskStatusDetailRequest {
	s.Uuid = &v
	return s
}

type DescribeVulCheckTaskStatusDetailResponseBody struct {
	RequestId    *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskStatuses []*DescribeVulCheckTaskStatusDetailResponseBodyTaskStatuses `json:"TaskStatuses,omitempty" xml:"TaskStatuses,omitempty" type:"Repeated"`
	TotalCount   *int32                                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeVulCheckTaskStatusDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulCheckTaskStatusDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVulCheckTaskStatusDetailResponseBody) SetRequestId(v string) *DescribeVulCheckTaskStatusDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVulCheckTaskStatusDetailResponseBody) SetTaskStatuses(v []*DescribeVulCheckTaskStatusDetailResponseBodyTaskStatuses) *DescribeVulCheckTaskStatusDetailResponseBody {
	s.TaskStatuses = v
	return s
}

func (s *DescribeVulCheckTaskStatusDetailResponseBody) SetTotalCount(v int32) *DescribeVulCheckTaskStatusDetailResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeVulCheckTaskStatusDetailResponseBodyTaskStatuses struct {
	TaskId         *string                                                                   `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskStatusList []*DescribeVulCheckTaskStatusDetailResponseBodyTaskStatusesTaskStatusList `json:"TaskStatusList,omitempty" xml:"TaskStatusList,omitempty" type:"Repeated"`
}

func (s DescribeVulCheckTaskStatusDetailResponseBodyTaskStatuses) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulCheckTaskStatusDetailResponseBodyTaskStatuses) GoString() string {
	return s.String()
}

func (s *DescribeVulCheckTaskStatusDetailResponseBodyTaskStatuses) SetTaskId(v string) *DescribeVulCheckTaskStatusDetailResponseBodyTaskStatuses {
	s.TaskId = &v
	return s
}

func (s *DescribeVulCheckTaskStatusDetailResponseBodyTaskStatuses) SetTaskStatusList(v []*DescribeVulCheckTaskStatusDetailResponseBodyTaskStatusesTaskStatusList) *DescribeVulCheckTaskStatusDetailResponseBodyTaskStatuses {
	s.TaskStatusList = v
	return s
}

type DescribeVulCheckTaskStatusDetailResponseBodyTaskStatusesTaskStatusList struct {
	Code   *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeVulCheckTaskStatusDetailResponseBodyTaskStatusesTaskStatusList) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulCheckTaskStatusDetailResponseBodyTaskStatusesTaskStatusList) GoString() string {
	return s.String()
}

func (s *DescribeVulCheckTaskStatusDetailResponseBodyTaskStatusesTaskStatusList) SetCode(v string) *DescribeVulCheckTaskStatusDetailResponseBodyTaskStatusesTaskStatusList {
	s.Code = &v
	return s
}

func (s *DescribeVulCheckTaskStatusDetailResponseBodyTaskStatusesTaskStatusList) SetStatus(v string) *DescribeVulCheckTaskStatusDetailResponseBodyTaskStatusesTaskStatusList {
	s.Status = &v
	return s
}

func (s *DescribeVulCheckTaskStatusDetailResponseBodyTaskStatusesTaskStatusList) SetType(v string) *DescribeVulCheckTaskStatusDetailResponseBodyTaskStatusesTaskStatusList {
	s.Type = &v
	return s
}

type DescribeVulCheckTaskStatusDetailResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVulCheckTaskStatusDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVulCheckTaskStatusDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulCheckTaskStatusDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeVulCheckTaskStatusDetailResponse) SetHeaders(v map[string]*string) *DescribeVulCheckTaskStatusDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeVulCheckTaskStatusDetailResponse) SetStatusCode(v int32) *DescribeVulCheckTaskStatusDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVulCheckTaskStatusDetailResponse) SetBody(v *DescribeVulCheckTaskStatusDetailResponseBody) *DescribeVulCheckTaskStatusDetailResponse {
	s.Body = v
	return s
}

type DescribeVulConfigRequest struct {
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The type of configuration. By default, all types of configurations are queried. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	// *   **cms**: Web-CMS vulnerability
	// *   **app**: application vulnerability that is detected by using web scanner
	// *   **emg**: urgent vulnerability
	// *   **scanMode**: displays easily exploitable vulnerability
	// *   **imageVulClean**: vulnerability retention duration
	// *   **yum**: preferentially uses YUM or APT sources of Alibaba Cloud to fix vulnerabilities
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeVulConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeVulConfigRequest) SetSourceIp(v string) *DescribeVulConfigRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeVulConfigRequest) SetType(v string) *DescribeVulConfigRequest {
	s.Type = &v
	return s
}

type DescribeVulConfigResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of the configurations of vulnerability management.
	TargetConfigs []*DescribeVulConfigResponseBodyTargetConfigs `json:"TargetConfigs,omitempty" xml:"TargetConfigs,omitempty" type:"Repeated"`
	// The total number of configurations.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeVulConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVulConfigResponseBody) SetRequestId(v string) *DescribeVulConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVulConfigResponseBody) SetTargetConfigs(v []*DescribeVulConfigResponseBodyTargetConfigs) *DescribeVulConfigResponseBody {
	s.TargetConfigs = v
	return s
}

func (s *DescribeVulConfigResponseBody) SetTotalCount(v int32) *DescribeVulConfigResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeVulConfigResponseBodyTargetConfigs struct {
	// The configuartion of vulnerability scan.
	//
	// >
	//
	// Valid values of this parameter if **cve**, **sys**, **cms**, **app**, **emg**, or **yum** is returned for the Type parameter:
	//
	// *   **on**: enabled
	// *   **off**: disabled
	//
	// >
	//
	// Valid values of this parameter if **scanMode** is returned for the Type parameter:
	//
	// *   **real**: displays easily exploitable vulnerability
	// *   **all**: displays all vulnerabilities
	//
	// >
	//
	// If **imageVulClean** is returned for the Type parameter, the value of this parameter indicates the vulnerability retention duration.
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The status of vulnerability management. Valid values:
	//
	// *   **off**: disabled
	// *   **on**: enabled
	OverAllConfig *string `json:"OverAllConfig,omitempty" xml:"OverAllConfig,omitempty"`
	// The type of configuration. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	// *   **cms**: Web-CMS vulnerability
	// *   **app**: application vulnerability that is detected by using web scanner
	// *   **emg**: urgent vulnerability
	// *   **scanMode**: displays easily exploitable vulnerability
	// *   **imageVulClean**: vulnerability retention duration
	// *   **yum**: preferentially uses YUM or APT sources of Alibaba Cloud to fix vulnerabilities
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeVulConfigResponseBodyTargetConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulConfigResponseBodyTargetConfigs) GoString() string {
	return s.String()
}

func (s *DescribeVulConfigResponseBodyTargetConfigs) SetConfig(v string) *DescribeVulConfigResponseBodyTargetConfigs {
	s.Config = &v
	return s
}

func (s *DescribeVulConfigResponseBodyTargetConfigs) SetOverAllConfig(v string) *DescribeVulConfigResponseBodyTargetConfigs {
	s.OverAllConfig = &v
	return s
}

func (s *DescribeVulConfigResponseBodyTargetConfigs) SetType(v string) *DescribeVulConfigResponseBodyTargetConfigs {
	s.Type = &v
	return s
}

type DescribeVulConfigResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVulConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVulConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeVulConfigResponse) SetHeaders(v map[string]*string) *DescribeVulConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeVulConfigResponse) SetStatusCode(v int32) *DescribeVulConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVulConfigResponse) SetBody(v *DescribeVulConfigResponseBody) *DescribeVulConfigResponse {
	s.Body = v
	return s
}

type DescribeVulDetailsRequest struct {
	// The name in the **vulnerability introduction**.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The language of the content within the request and response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The name of the vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the vulnerability. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	// *   **cms**: Web-CMS vulnerability
	// *   **app**: application vulnerability
	// *   **emg**: urgent vulnerability
	// *   **sca**: vulnerability that is detected based on software component analysis
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeVulDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulDetailsRequest) GoString() string {
	return s.String()
}

func (s *DescribeVulDetailsRequest) SetAliasName(v string) *DescribeVulDetailsRequest {
	s.AliasName = &v
	return s
}

func (s *DescribeVulDetailsRequest) SetLang(v string) *DescribeVulDetailsRequest {
	s.Lang = &v
	return s
}

func (s *DescribeVulDetailsRequest) SetName(v string) *DescribeVulDetailsRequest {
	s.Name = &v
	return s
}

func (s *DescribeVulDetailsRequest) SetType(v string) *DescribeVulDetailsRequest {
	s.Type = &v
	return s
}

type DescribeVulDetailsResponseBody struct {
	// An array that consists of the details about the vulnerability.
	Cves []*DescribeVulDetailsResponseBodyCves `json:"Cves,omitempty" xml:"Cves,omitempty" type:"Repeated"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVulDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVulDetailsResponseBody) SetCves(v []*DescribeVulDetailsResponseBodyCves) *DescribeVulDetailsResponseBody {
	s.Cves = v
	return s
}

func (s *DescribeVulDetailsResponseBody) SetRequestId(v string) *DescribeVulDetailsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVulDetailsResponseBodyCves struct {
	// The type of the vulnerability.
	Classify *string `json:"Classify,omitempty" xml:"Classify,omitempty"`
	// An array that consists of vulnerability types.
	Classifys []*DescribeVulDetailsResponseBodyCvesClassifys `json:"Classifys,omitempty" xml:"Classifys,omitempty" type:"Repeated"`
	// The China National Vulnerability Database (CNVD) ID.
	CnvdId *string `json:"CnvdId,omitempty" xml:"CnvdId,omitempty"`
	// The difficulty level of exploiting the vulnerability. Valid values:
	//
	// *   **LOW**
	// *   **MEDIUM**
	// *   **HIGH**
	Complexity *string `json:"Complexity,omitempty" xml:"Complexity,omitempty"`
	// The CVE content.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The Common Vulnerabilities and Exposures (CVE) ID.
	CveId *string `json:"CveId,omitempty" xml:"CveId,omitempty"`
	// The Common Vulnerability Scoring System (CVSS) score of the vulnerability in the Alibaba Cloud vulnerability library.
	CvssScore *string `json:"CvssScore,omitempty" xml:"CvssScore,omitempty"`
	// The vector that is used to calculate the CVSS score.
	CvssVector   *string `json:"CvssVector,omitempty" xml:"CvssVector,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InternetIp   *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	IntranetIp   *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The POC content.
	Poc *string `json:"Poc,omitempty" xml:"Poc,omitempty"`
	// The timestamp when the proof of concept (POC) was created. Unit: milliseconds.
	PocCreateTime *int64 `json:"PocCreateTime,omitempty" xml:"PocCreateTime,omitempty"`
	// The timestamp when the POC was disclosed. Unit: milliseconds.
	PocDisclosureTime *int64 `json:"PocDisclosureTime,omitempty" xml:"PocDisclosureTime,omitempty"`
	// The service that is affected by the vulnerability.
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
	// The reference of the vulnerability in the Alibaba Cloud vulnerability library. The value is a URL.
	Reference *string `json:"Reference,omitempty" xml:"Reference,omitempty"`
	// The disclosure time that is displayed for the vulnerability in the Alibaba Cloud vulnerability library. The value is a UNIX timestamp. Unit: milliseconds.
	ReleaseTime *int64 `json:"ReleaseTime,omitempty" xml:"ReleaseTime,omitempty"`
	// The fixing suggestions of the vulnerability.
	Solution *string `json:"Solution,omitempty" xml:"Solution,omitempty"`
	// The introduction to the vulnerability.
	Summary    *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	TargetId   *string `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	TargetName *string `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	// The title of the vulnerability announcement.
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// The vendor that disclosed the vulnerability.
	Vendor *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
	// The severity of the vulnerability. Valid values:
	//
	// *   **serious**
	// *   **high**
	// *   **medium**
	// *   **low**
	VulLevel *string `json:"VulLevel,omitempty" xml:"VulLevel,omitempty"`
}

func (s DescribeVulDetailsResponseBodyCves) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulDetailsResponseBodyCves) GoString() string {
	return s.String()
}

func (s *DescribeVulDetailsResponseBodyCves) SetClassify(v string) *DescribeVulDetailsResponseBodyCves {
	s.Classify = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetClassifys(v []*DescribeVulDetailsResponseBodyCvesClassifys) *DescribeVulDetailsResponseBodyCves {
	s.Classifys = v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetCnvdId(v string) *DescribeVulDetailsResponseBodyCves {
	s.CnvdId = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetComplexity(v string) *DescribeVulDetailsResponseBodyCves {
	s.Complexity = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetContent(v string) *DescribeVulDetailsResponseBodyCves {
	s.Content = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetCveId(v string) *DescribeVulDetailsResponseBodyCves {
	s.CveId = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetCvssScore(v string) *DescribeVulDetailsResponseBodyCves {
	s.CvssScore = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetCvssVector(v string) *DescribeVulDetailsResponseBodyCves {
	s.CvssVector = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetInstanceName(v string) *DescribeVulDetailsResponseBodyCves {
	s.InstanceName = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetInternetIp(v string) *DescribeVulDetailsResponseBodyCves {
	s.InternetIp = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetIntranetIp(v string) *DescribeVulDetailsResponseBodyCves {
	s.IntranetIp = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetPoc(v string) *DescribeVulDetailsResponseBodyCves {
	s.Poc = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetPocCreateTime(v int64) *DescribeVulDetailsResponseBodyCves {
	s.PocCreateTime = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetPocDisclosureTime(v int64) *DescribeVulDetailsResponseBodyCves {
	s.PocDisclosureTime = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetProduct(v string) *DescribeVulDetailsResponseBodyCves {
	s.Product = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetReference(v string) *DescribeVulDetailsResponseBodyCves {
	s.Reference = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetReleaseTime(v int64) *DescribeVulDetailsResponseBodyCves {
	s.ReleaseTime = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetSolution(v string) *DescribeVulDetailsResponseBodyCves {
	s.Solution = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetSummary(v string) *DescribeVulDetailsResponseBodyCves {
	s.Summary = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetTargetId(v string) *DescribeVulDetailsResponseBodyCves {
	s.TargetId = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetTargetName(v string) *DescribeVulDetailsResponseBodyCves {
	s.TargetName = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetTitle(v string) *DescribeVulDetailsResponseBodyCves {
	s.Title = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetVendor(v string) *DescribeVulDetailsResponseBodyCves {
	s.Vendor = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCves) SetVulLevel(v string) *DescribeVulDetailsResponseBodyCves {
	s.VulLevel = &v
	return s
}

type DescribeVulDetailsResponseBodyCvesClassifys struct {
	// The type of the vulnerability.
	Classify *string `json:"Classify,omitempty" xml:"Classify,omitempty"`
	// The URL of the demo video for the vulnerability.
	DemoVideoUrl *string `json:"DemoVideoUrl,omitempty" xml:"DemoVideoUrl,omitempty"`
	// The description of the vulnerability type.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s DescribeVulDetailsResponseBodyCvesClassifys) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulDetailsResponseBodyCvesClassifys) GoString() string {
	return s.String()
}

func (s *DescribeVulDetailsResponseBodyCvesClassifys) SetClassify(v string) *DescribeVulDetailsResponseBodyCvesClassifys {
	s.Classify = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCvesClassifys) SetDemoVideoUrl(v string) *DescribeVulDetailsResponseBodyCvesClassifys {
	s.DemoVideoUrl = &v
	return s
}

func (s *DescribeVulDetailsResponseBodyCvesClassifys) SetDescription(v string) *DescribeVulDetailsResponseBodyCvesClassifys {
	s.Description = &v
	return s
}

type DescribeVulDetailsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVulDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVulDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulDetailsResponse) GoString() string {
	return s.String()
}

func (s *DescribeVulDetailsResponse) SetHeaders(v map[string]*string) *DescribeVulDetailsResponse {
	s.Headers = v
	return s
}

func (s *DescribeVulDetailsResponse) SetStatusCode(v int32) *DescribeVulDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVulDetailsResponse) SetBody(v *DescribeVulDetailsResponseBody) *DescribeVulDetailsResponse {
	s.Body = v
	return s
}

type DescribeVulExportInfoRequest struct {
	// The ID of the vulnerability export task.
	ExportId *int64 `json:"ExportId,omitempty" xml:"ExportId,omitempty"`
}

func (s DescribeVulExportInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulExportInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeVulExportInfoRequest) SetExportId(v int64) *DescribeVulExportInfoRequest {
	s.ExportId = &v
	return s
}

type DescribeVulExportInfoResponseBody struct {
	// The number of exported entries.
	CurrentCount *int32 `json:"CurrentCount,omitempty" xml:"CurrentCount,omitempty"`
	// The status of the export task. Valid values:
	//
	// - **init**: The task is being initialized.
	// - **exporting**: The task is in progress.
	// - **success**: The task is complete.
	ExportStatus *string `json:"ExportStatus,omitempty" xml:"ExportStatus,omitempty"`
	// The name of the exported Excel file.
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The ID of the vulnerability export task.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The URL at which you can download the exported Excel file.
	Link *string `json:"Link,omitempty" xml:"Link,omitempty"`
	// The message that shows the task result. The value is fixed as **success*, which indicates that the export task is completed.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The progress percentage of the asset export task.
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries in the Excel file.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeVulExportInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulExportInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVulExportInfoResponseBody) SetCurrentCount(v int32) *DescribeVulExportInfoResponseBody {
	s.CurrentCount = &v
	return s
}

func (s *DescribeVulExportInfoResponseBody) SetExportStatus(v string) *DescribeVulExportInfoResponseBody {
	s.ExportStatus = &v
	return s
}

func (s *DescribeVulExportInfoResponseBody) SetFileName(v string) *DescribeVulExportInfoResponseBody {
	s.FileName = &v
	return s
}

func (s *DescribeVulExportInfoResponseBody) SetId(v int64) *DescribeVulExportInfoResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeVulExportInfoResponseBody) SetLink(v string) *DescribeVulExportInfoResponseBody {
	s.Link = &v
	return s
}

func (s *DescribeVulExportInfoResponseBody) SetMessage(v string) *DescribeVulExportInfoResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeVulExportInfoResponseBody) SetProgress(v int32) *DescribeVulExportInfoResponseBody {
	s.Progress = &v
	return s
}

func (s *DescribeVulExportInfoResponseBody) SetRequestId(v string) *DescribeVulExportInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVulExportInfoResponseBody) SetTotalCount(v int32) *DescribeVulExportInfoResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeVulExportInfoResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVulExportInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVulExportInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulExportInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeVulExportInfoResponse) SetHeaders(v map[string]*string) *DescribeVulExportInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeVulExportInfoResponse) SetStatusCode(v int32) *DescribeVulExportInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVulExportInfoResponse) SetBody(v *DescribeVulExportInfoResponseBody) *DescribeVulExportInfoResponse {
	s.Body = v
	return s
}

type DescribeVulFixStatisticsResponseBody struct {
	// An array that consists of the statistics of vulnerability fixes by vulnerability type.
	FixStat []*DescribeVulFixStatisticsResponseBodyFixStat `json:"FixStat,omitempty" xml:"FixStat,omitempty" type:"Repeated"`
	// The total statistics of vulnerability fixes.
	FixTotal *DescribeVulFixStatisticsResponseBodyFixTotal `json:"FixTotal,omitempty" xml:"FixTotal,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeVulFixStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulFixStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVulFixStatisticsResponseBody) SetFixStat(v []*DescribeVulFixStatisticsResponseBodyFixStat) *DescribeVulFixStatisticsResponseBody {
	s.FixStat = v
	return s
}

func (s *DescribeVulFixStatisticsResponseBody) SetFixTotal(v *DescribeVulFixStatisticsResponseBodyFixTotal) *DescribeVulFixStatisticsResponseBody {
	s.FixTotal = v
	return s
}

func (s *DescribeVulFixStatisticsResponseBody) SetRequestId(v string) *DescribeVulFixStatisticsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeVulFixStatisticsResponseBodyFixStat struct {
	// The number of vulnerabilities that are fixed on the current day.
	FixedTodayNum *int32 `json:"FixedTodayNum,omitempty" xml:"FixedTodayNum,omitempty"`
	// The total number of fixed vulnerabilities.
	FixedTotalNum *int32 `json:"FixedTotalNum,omitempty" xml:"FixedTotalNum,omitempty"`
	// The number of vulnerabilities that are being fixed.
	FixingNum *int32 `json:"FixingNum,omitempty" xml:"FixingNum,omitempty"`
	// The number of unfixed vulnerabilities.
	NeedFixNum *int32 `json:"NeedFixNum,omitempty" xml:"NeedFixNum,omitempty"`
	// The type of the vulnerability. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	// *   **cms**: Web-CMS vulnerability
	// *   **app**: application vulnerability
	// *   **emg**: urgent vulnerability
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeVulFixStatisticsResponseBodyFixStat) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulFixStatisticsResponseBodyFixStat) GoString() string {
	return s.String()
}

func (s *DescribeVulFixStatisticsResponseBodyFixStat) SetFixedTodayNum(v int32) *DescribeVulFixStatisticsResponseBodyFixStat {
	s.FixedTodayNum = &v
	return s
}

func (s *DescribeVulFixStatisticsResponseBodyFixStat) SetFixedTotalNum(v int32) *DescribeVulFixStatisticsResponseBodyFixStat {
	s.FixedTotalNum = &v
	return s
}

func (s *DescribeVulFixStatisticsResponseBodyFixStat) SetFixingNum(v int32) *DescribeVulFixStatisticsResponseBodyFixStat {
	s.FixingNum = &v
	return s
}

func (s *DescribeVulFixStatisticsResponseBodyFixStat) SetNeedFixNum(v int32) *DescribeVulFixStatisticsResponseBodyFixStat {
	s.NeedFixNum = &v
	return s
}

func (s *DescribeVulFixStatisticsResponseBodyFixStat) SetType(v string) *DescribeVulFixStatisticsResponseBodyFixStat {
	s.Type = &v
	return s
}

type DescribeVulFixStatisticsResponseBodyFixTotal struct {
	// The number of vulnerabilities that are fixed on the current day.
	FixedTodayNum *int32 `json:"FixedTodayNum,omitempty" xml:"FixedTodayNum,omitempty"`
	// The total number of fixed vulnerabilities.
	FixedTotalNum *int32 `json:"FixedTotalNum,omitempty" xml:"FixedTotalNum,omitempty"`
	// The number of vulnerabilities that are being fixed.
	FixingNum *int32 `json:"FixingNum,omitempty" xml:"FixingNum,omitempty"`
	// The number of unfixed vulnerabilities.
	NeedFixNum *int32 `json:"NeedFixNum,omitempty" xml:"NeedFixNum,omitempty"`
}

func (s DescribeVulFixStatisticsResponseBodyFixTotal) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulFixStatisticsResponseBodyFixTotal) GoString() string {
	return s.String()
}

func (s *DescribeVulFixStatisticsResponseBodyFixTotal) SetFixedTodayNum(v int32) *DescribeVulFixStatisticsResponseBodyFixTotal {
	s.FixedTodayNum = &v
	return s
}

func (s *DescribeVulFixStatisticsResponseBodyFixTotal) SetFixedTotalNum(v int32) *DescribeVulFixStatisticsResponseBodyFixTotal {
	s.FixedTotalNum = &v
	return s
}

func (s *DescribeVulFixStatisticsResponseBodyFixTotal) SetFixingNum(v int32) *DescribeVulFixStatisticsResponseBodyFixTotal {
	s.FixingNum = &v
	return s
}

func (s *DescribeVulFixStatisticsResponseBodyFixTotal) SetNeedFixNum(v int32) *DescribeVulFixStatisticsResponseBodyFixTotal {
	s.NeedFixNum = &v
	return s
}

type DescribeVulFixStatisticsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVulFixStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVulFixStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulFixStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeVulFixStatisticsResponse) SetHeaders(v map[string]*string) *DescribeVulFixStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeVulFixStatisticsResponse) SetStatusCode(v int32) *DescribeVulFixStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVulFixStatisticsResponse) SetBody(v *DescribeVulFixStatisticsResponseBody) *DescribeVulFixStatisticsResponse {
	s.Body = v
	return s
}

type DescribeVulListRequest struct {
	// The name of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The additional type of the vulnerability. You can specify this parameter when you query application vulnerabilities. Set the value to **sca**. If you set **Type** to **app**, you must specify this parameter.
	//
	// >  If you set this parameter to **sca**, application vulnerabilities and the vulnerabilities that are detected based on software component analysis are queried. If you do not specify this parameter, only application vulnerabilities are queried.
	AttachTypes *string `json:"AttachTypes,omitempty" xml:"AttachTypes,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether the vulnerability is fixed. Valid values:
	//
	// *   **y**: yes
	// *   **n**: no
	Dealed *string `json:"Dealed,omitempty" xml:"Dealed,omitempty"`
	// The ID of the asset group.
	//
	// >  You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of asset groups.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The alias of the vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The priority to fix the vulnerability. Separate multiple priorities with commas (,). Valid values:
	//
	// *   **asap**: high
	// *   **later**: medium
	// *   **nntf**: low
	Necessity *string `json:"Necessity,omitempty" xml:"Necessity,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The remarks for the asset affected by the vulnerability. The value can be the private IP address, public IP address, or name of the asset.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The type of the vulnerabilities. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	// *   **cms**: Web-CMS vulnerability
	// *   **app**: application vulnerability that is detected by using web scanner
	// *   **emg**: urgent vulnerability
	// *   **sca**: application vulnerability that is detected by using software component analysis
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The UUIDs of the servers on which you want to query the vulnerabilities. Separate multiple UUIDs with commas (,).
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
	// The IDs of the virtual private clouds (VPCs) in which the vulnerability is detected. Separate multiple IDs with commas (,).
	VpcInstanceIds *string `json:"VpcInstanceIds,omitempty" xml:"VpcInstanceIds,omitempty"`
}

func (s DescribeVulListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulListRequest) GoString() string {
	return s.String()
}

func (s *DescribeVulListRequest) SetAliasName(v string) *DescribeVulListRequest {
	s.AliasName = &v
	return s
}

func (s *DescribeVulListRequest) SetAttachTypes(v string) *DescribeVulListRequest {
	s.AttachTypes = &v
	return s
}

func (s *DescribeVulListRequest) SetCurrentPage(v int32) *DescribeVulListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVulListRequest) SetDealed(v string) *DescribeVulListRequest {
	s.Dealed = &v
	return s
}

func (s *DescribeVulListRequest) SetGroupId(v string) *DescribeVulListRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeVulListRequest) SetLang(v string) *DescribeVulListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeVulListRequest) SetName(v string) *DescribeVulListRequest {
	s.Name = &v
	return s
}

func (s *DescribeVulListRequest) SetNecessity(v string) *DescribeVulListRequest {
	s.Necessity = &v
	return s
}

func (s *DescribeVulListRequest) SetPageSize(v int32) *DescribeVulListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVulListRequest) SetRemark(v string) *DescribeVulListRequest {
	s.Remark = &v
	return s
}

func (s *DescribeVulListRequest) SetType(v string) *DescribeVulListRequest {
	s.Type = &v
	return s
}

func (s *DescribeVulListRequest) SetUuids(v string) *DescribeVulListRequest {
	s.Uuids = &v
	return s
}

func (s *DescribeVulListRequest) SetVpcInstanceIds(v string) *DescribeVulListRequest {
	s.VpcInstanceIds = &v
	return s
}

type DescribeVulListResponseBody struct {
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of vulnerabilities returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// An array that consists of the vulnerabilities.
	VulRecords []*DescribeVulListResponseBodyVulRecords `json:"VulRecords,omitempty" xml:"VulRecords,omitempty" type:"Repeated"`
}

func (s DescribeVulListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVulListResponseBody) SetCurrentPage(v int32) *DescribeVulListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVulListResponseBody) SetPageSize(v int32) *DescribeVulListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVulListResponseBody) SetRequestId(v string) *DescribeVulListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVulListResponseBody) SetTotalCount(v int32) *DescribeVulListResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeVulListResponseBody) SetVulRecords(v []*DescribeVulListResponseBodyVulRecords) *DescribeVulListResponseBody {
	s.VulRecords = v
	return s
}

type DescribeVulListResponseBodyVulRecords struct {
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The edition of Security Center that is authorized to scan the asset. Valid values:
	//
	// *   **1**: Basic edition
	// *   **6**: Anti-virus edition
	// *   **5**: Advanced edition
	// *   **3**: Enterprise edition
	// *   **7**: Ultimate edition
	// *   **10**: Value-added Plan edition
	AuthVersion *string `json:"AuthVersion,omitempty" xml:"AuthVersion,omitempty"`
	// Indicates whether Security Center is authorized to scan the asset. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Bind *bool `json:"Bind,omitempty" xml:"Bind,omitempty"`
	// The extended information about the vulnerability.
	ExtendContentJson *DescribeVulListResponseBodyVulRecordsExtendContentJson `json:"ExtendContentJson,omitempty" xml:"ExtendContentJson,omitempty" type:"Struct"`
	// The timestamp when the vulnerability was first detected. Unit: milliseconds.
	FirstTs *int64 `json:"FirstTs,omitempty" xml:"FirstTs,omitempty"`
	// The ID of the asset group.
	GroupId *int32 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The instance ID of the asset.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the asset.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the asset.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the asset.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The timestamp when the vulnerability was last detected. Unit: milliseconds.
	LastTs *int64 `json:"LastTs,omitempty" xml:"LastTs,omitempty"`
	// The timestamp when the vulnerability status was modified. Unit: milliseconds.
	ModifyTs *int64 `json:"ModifyTs,omitempty" xml:"ModifyTs,omitempty"`
	// The name of the vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The priority to fix the vulnerability. Valid values:
	//
	// *   **asap**: high
	// *   **later**: medium
	// *   **nntf**: low
	//
	// >  We recommend that you fix the vulnerabilities that have the **high** priority at the earliest opportunity.
	Necessity *string `json:"Necessity,omitempty" xml:"Necessity,omitempty"`
	// Indicates whether the Security Center agent on the asset is online. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Online *bool `json:"Online,omitempty" xml:"Online,omitempty"`
	// The name of the operating system for your asset.
	OsName *string `json:"OsName,omitempty" xml:"OsName,omitempty"`
	// The name of the operating system for your asset.
	OsVersion *string `json:"OsVersion,omitempty" xml:"OsVersion,omitempty"`
	// The ID of the vulnerability.
	PrimaryId *int64 `json:"PrimaryId,omitempty" xml:"PrimaryId,omitempty"`
	// The region ID of the instance.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The Common Vulnerabilities and Exposures (CVE) IDs related to the vulnerability. Multiple CVE IDs are separated by commas (,).
	Related *string `json:"Related,omitempty" xml:"Related,omitempty"`
	// The timestamp when the vulnerability was fixed. Unit: milliseconds.
	RepairTs *int64 `json:"RepairTs,omitempty" xml:"RepairTs,omitempty"`
	// The code that indicates the vulnerability fixing result.
	ResultCode *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	// The message that indicates the vulnerability fixing result.
	ResultMessage *string `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	// The status of the vulnerability. Valid values:
	//
	// *   **1**: unfixed
	// *   **2**: fix failed
	// *   **3**: rollback failed
	// *   **4**: being fixed
	// *   **5**: being rolled back
	// *   **6**: being verified
	// *   **7**: fixed
	// *   **8**: fixed and to be restarted
	// *   **9**: rolled back
	// *   **10**: ignored
	// *   **11**: rolled back and to be restarted
	// *   **12**: not found
	// *   **20**: expired
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tag that is added to the vulnerability.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The type of the vulnerability. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	// *   **cms**: Web-CMS vulnerability
	// *   **emg**: urgent vulnerability
	// *   **app**: application vulnerability
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The instance UUID of the asset.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeVulListResponseBodyVulRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulListResponseBodyVulRecords) GoString() string {
	return s.String()
}

func (s *DescribeVulListResponseBodyVulRecords) SetAliasName(v string) *DescribeVulListResponseBodyVulRecords {
	s.AliasName = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetAuthVersion(v string) *DescribeVulListResponseBodyVulRecords {
	s.AuthVersion = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetBind(v bool) *DescribeVulListResponseBodyVulRecords {
	s.Bind = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetExtendContentJson(v *DescribeVulListResponseBodyVulRecordsExtendContentJson) *DescribeVulListResponseBodyVulRecords {
	s.ExtendContentJson = v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetFirstTs(v int64) *DescribeVulListResponseBodyVulRecords {
	s.FirstTs = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetGroupId(v int32) *DescribeVulListResponseBodyVulRecords {
	s.GroupId = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetInstanceId(v string) *DescribeVulListResponseBodyVulRecords {
	s.InstanceId = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetInstanceName(v string) *DescribeVulListResponseBodyVulRecords {
	s.InstanceName = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetInternetIp(v string) *DescribeVulListResponseBodyVulRecords {
	s.InternetIp = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetIntranetIp(v string) *DescribeVulListResponseBodyVulRecords {
	s.IntranetIp = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetLastTs(v int64) *DescribeVulListResponseBodyVulRecords {
	s.LastTs = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetModifyTs(v int64) *DescribeVulListResponseBodyVulRecords {
	s.ModifyTs = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetName(v string) *DescribeVulListResponseBodyVulRecords {
	s.Name = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetNecessity(v string) *DescribeVulListResponseBodyVulRecords {
	s.Necessity = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetOnline(v bool) *DescribeVulListResponseBodyVulRecords {
	s.Online = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetOsName(v string) *DescribeVulListResponseBodyVulRecords {
	s.OsName = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetOsVersion(v string) *DescribeVulListResponseBodyVulRecords {
	s.OsVersion = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetPrimaryId(v int64) *DescribeVulListResponseBodyVulRecords {
	s.PrimaryId = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetRegionId(v string) *DescribeVulListResponseBodyVulRecords {
	s.RegionId = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetRelated(v string) *DescribeVulListResponseBodyVulRecords {
	s.Related = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetRepairTs(v int64) *DescribeVulListResponseBodyVulRecords {
	s.RepairTs = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetResultCode(v string) *DescribeVulListResponseBodyVulRecords {
	s.ResultCode = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetResultMessage(v string) *DescribeVulListResponseBodyVulRecords {
	s.ResultMessage = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetStatus(v int32) *DescribeVulListResponseBodyVulRecords {
	s.Status = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetTag(v string) *DescribeVulListResponseBodyVulRecords {
	s.Tag = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetType(v string) *DescribeVulListResponseBodyVulRecords {
	s.Type = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecords) SetUuid(v string) *DescribeVulListResponseBodyVulRecords {
	s.Uuid = &v
	return s
}

type DescribeVulListResponseBodyVulRecordsExtendContentJson struct {
	// The package path of the software that has the vulnerability.
	AbsolutePath *string `json:"AbsolutePath,omitempty" xml:"AbsolutePath,omitempty"`
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The description of the vulnerability.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The public IP address of the asset that is associated with the vulnerability.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The timestamp when the vulnerability was last detected. Unit: milliseconds.
	LastTs *int64 `json:"LastTs,omitempty" xml:"LastTs,omitempty"`
	// Indicates whether the vulnerability needs to be fixed.
	Necessity *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity `json:"Necessity,omitempty" xml:"Necessity,omitempty" type:"Struct"`
	// The name of the operating system for your asset.
	Os *string `json:"Os,omitempty" xml:"Os,omitempty"`
	// The release of the operating system.
	OsRelease *string `json:"OsRelease,omitempty" xml:"OsRelease,omitempty"`
	// The ID of the vulnerability.
	PrimaryId *int64 `json:"PrimaryId,omitempty" xml:"PrimaryId,omitempty"`
	// An array that consists of the information about RPM Package Manager (RPM) packages.
	RpmEntityList []*DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList `json:"RpmEntityList,omitempty" xml:"RpmEntityList,omitempty" type:"Repeated"`
	// The status of the vulnerability. Valid values:
	//
	// *   **1**: unfixed
	// *   **2**: fix failed
	// *   3: rollback failed
	// *   **4**: being fixed
	// *   **5**: being rolled back
	// *   **6**: being verified
	// *   **7**: fixed
	// *   **8**: fixed and to be restarted
	// *   **9**: rolled back
	// *   **10**: ignored
	// *   **11**: rolled back and to be restarted
	// *   **12**: not found
	// *   **20**: expired
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tag that is added to the vulnerability.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The CVE list.
	CveList []*string `json:"cveList,omitempty" xml:"cveList,omitempty" type:"Repeated"`
}

func (s DescribeVulListResponseBodyVulRecordsExtendContentJson) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulListResponseBodyVulRecordsExtendContentJson) GoString() string {
	return s.String()
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJson) SetAbsolutePath(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJson {
	s.AbsolutePath = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJson) SetAliasName(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJson {
	s.AliasName = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJson) SetDescription(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJson {
	s.Description = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJson) SetIp(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJson {
	s.Ip = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJson) SetLastTs(v int64) *DescribeVulListResponseBodyVulRecordsExtendContentJson {
	s.LastTs = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJson) SetNecessity(v *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity) *DescribeVulListResponseBodyVulRecordsExtendContentJson {
	s.Necessity = v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJson) SetOs(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJson {
	s.Os = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJson) SetOsRelease(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJson {
	s.OsRelease = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJson) SetPrimaryId(v int64) *DescribeVulListResponseBodyVulRecordsExtendContentJson {
	s.PrimaryId = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJson) SetRpmEntityList(v []*DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) *DescribeVulListResponseBodyVulRecordsExtendContentJson {
	s.RpmEntityList = v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJson) SetStatus(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJson {
	s.Status = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJson) SetTag(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJson {
	s.Tag = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJson) SetCveList(v []*string) *DescribeVulListResponseBodyVulRecordsExtendContentJson {
	s.CveList = v
	return s
}

type DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity struct {
	// The asset importance score. Valid values:
	//
	// *   **2**: an important asset
	// *   **1**: a common asset
	// *   **0**: a test asset
	AssetsFactor *string `json:"Assets_factor,omitempty" xml:"Assets_factor,omitempty"`
	// The Common Vulnerability Scoring System (CVSS) score.
	CvssFactor *string `json:"Cvss_factor,omitempty" xml:"Cvss_factor,omitempty"`
	// The environment score.
	EnviromentFactor *string `json:"Enviroment_factor,omitempty" xml:"Enviroment_factor,omitempty"`
	// Indicates whether the score of urgency to fix a vulnerability is calculated. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	IsCalc *string `json:"Is_calc,omitempty" xml:"Is_calc,omitempty"`
	// The status of the score of urgency to fix a vulnerability. Valid values:
	//
	// *   **none**: No score is generated.
	// *   **pending**: The score is pending calculation.
	// *   **normal**: The calculation is normal.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time score.
	TimeFactor *string `json:"Time_factor,omitempty" xml:"Time_factor,omitempty"`
	// The score of urgency to fix a vulnerability.
	//
	// The following list describes scores and related fixing suggestions:
	//
	// *   If the score is from **13.5 to 15**, the vulnerability is a high-risk vulnerability. You must fix the vulnerability at the earliest opportunity.
	// *   If the score is **greater than or equal to 7 but less than 13.5**, the vulnerability is a medium-risk vulnerability. You can fix the vulnerability at your convenience.
	// *   If the score is **less than 7**, the vulnerability is a low-risk vulnerability. You can ignore the vulnerability.
	TotalScore *string `json:"Total_score,omitempty" xml:"Total_score,omitempty"`
}

func (s DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity) GoString() string {
	return s.String()
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity) SetAssetsFactor(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity {
	s.AssetsFactor = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity) SetCvssFactor(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity {
	s.CvssFactor = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity) SetEnviromentFactor(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity {
	s.EnviromentFactor = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity) SetIsCalc(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity {
	s.IsCalc = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity) SetStatus(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity {
	s.Status = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity) SetTimeFactor(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity {
	s.TimeFactor = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity) SetTotalScore(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonNecessity {
	s.TotalScore = &v
	return s
}

type DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList struct {
	// The name of the container.
	ContainerName *string `json:"ContainerName,omitempty" xml:"ContainerName,omitempty"`
	// The complete version number.
	FullVersion *string `json:"FullVersion,omitempty" xml:"FullVersion,omitempty"`
	// The name of the image.
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The reason why the vulnerability is detected.
	MatchDetail *string `json:"MatchDetail,omitempty" xml:"MatchDetail,omitempty"`
	// The rule that is used to detect the vulnerability.
	MatchList []*string `json:"MatchList,omitempty" xml:"MatchList,omitempty" type:"Repeated"`
	// The name of the RPM package.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The path of the software that has the vulnerability.
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The process ID.
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The command that is used to fix the vulnerability.
	UpdateCmd *string `json:"UpdateCmd,omitempty" xml:"UpdateCmd,omitempty"`
	// The package version number of the software that has the vulnerability.
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) GoString() string {
	return s.String()
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetContainerName(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.ContainerName = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetFullVersion(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.FullVersion = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetImageName(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.ImageName = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetMatchDetail(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.MatchDetail = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetMatchList(v []*string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.MatchList = v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetName(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.Name = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetPath(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.Path = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetPid(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.Pid = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetUpdateCmd(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.UpdateCmd = &v
	return s
}

func (s *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList) SetVersion(v string) *DescribeVulListResponseBodyVulRecordsExtendContentJsonRpmEntityList {
	s.Version = &v
	return s
}

type DescribeVulListResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVulListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVulListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulListResponse) GoString() string {
	return s.String()
}

func (s *DescribeVulListResponse) SetHeaders(v map[string]*string) *DescribeVulListResponse {
	s.Headers = v
	return s
}

func (s *DescribeVulListResponse) SetStatusCode(v int32) *DescribeVulListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVulListResponse) SetBody(v *DescribeVulListResponseBody) *DescribeVulListResponse {
	s.Body = v
	return s
}

type DescribeVulListPageRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	CveId       *string `json:"CveId,omitempty" xml:"CveId,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	VulNameLike *string `json:"VulNameLike,omitempty" xml:"VulNameLike,omitempty"`
}

func (s DescribeVulListPageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulListPageRequest) GoString() string {
	return s.String()
}

func (s *DescribeVulListPageRequest) SetCurrentPage(v int32) *DescribeVulListPageRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVulListPageRequest) SetCveId(v string) *DescribeVulListPageRequest {
	s.CveId = &v
	return s
}

func (s *DescribeVulListPageRequest) SetPageSize(v int32) *DescribeVulListPageRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVulListPageRequest) SetVulNameLike(v string) *DescribeVulListPageRequest {
	s.VulNameLike = &v
	return s
}

type DescribeVulListPageResponseBody struct {
	Data       []*DescribeVulListPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	RequestId  *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeVulListPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulListPageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVulListPageResponseBody) SetData(v []*DescribeVulListPageResponseBodyData) *DescribeVulListPageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeVulListPageResponseBody) SetRequestId(v string) *DescribeVulListPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVulListPageResponseBody) SetTotalCount(v int32) *DescribeVulListPageResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeVulListPageResponseBodyData struct {
	CveId       *string `json:"CveId,omitempty" xml:"CveId,omitempty"`
	ExtAegis    *string `json:"ExtAegis,omitempty" xml:"ExtAegis,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsAegis     *int32  `json:"IsAegis,omitempty" xml:"IsAegis,omitempty"`
	IsSas       *int32  `json:"IsSas,omitempty" xml:"IsSas,omitempty"`
	OtherId     *string `json:"OtherId,omitempty" xml:"OtherId,omitempty"`
	ReleaseTime *int64  `json:"ReleaseTime,omitempty" xml:"ReleaseTime,omitempty"`
	Title       *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribeVulListPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulListPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeVulListPageResponseBodyData) SetCveId(v string) *DescribeVulListPageResponseBodyData {
	s.CveId = &v
	return s
}

func (s *DescribeVulListPageResponseBodyData) SetExtAegis(v string) *DescribeVulListPageResponseBodyData {
	s.ExtAegis = &v
	return s
}

func (s *DescribeVulListPageResponseBodyData) SetId(v int64) *DescribeVulListPageResponseBodyData {
	s.Id = &v
	return s
}

func (s *DescribeVulListPageResponseBodyData) SetIsAegis(v int32) *DescribeVulListPageResponseBodyData {
	s.IsAegis = &v
	return s
}

func (s *DescribeVulListPageResponseBodyData) SetIsSas(v int32) *DescribeVulListPageResponseBodyData {
	s.IsSas = &v
	return s
}

func (s *DescribeVulListPageResponseBodyData) SetOtherId(v string) *DescribeVulListPageResponseBodyData {
	s.OtherId = &v
	return s
}

func (s *DescribeVulListPageResponseBodyData) SetReleaseTime(v int64) *DescribeVulListPageResponseBodyData {
	s.ReleaseTime = &v
	return s
}

func (s *DescribeVulListPageResponseBodyData) SetTitle(v string) *DescribeVulListPageResponseBodyData {
	s.Title = &v
	return s
}

type DescribeVulListPageResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVulListPageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVulListPageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulListPageResponse) GoString() string {
	return s.String()
}

func (s *DescribeVulListPageResponse) SetHeaders(v map[string]*string) *DescribeVulListPageResponse {
	s.Headers = v
	return s
}

func (s *DescribeVulListPageResponse) SetStatusCode(v int32) *DescribeVulListPageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVulListPageResponse) SetBody(v *DescribeVulListPageResponseBody) *DescribeVulListPageResponse {
	s.Body = v
	return s
}

type DescribeVulNumStatisticsRequest struct {
	From *string `json:"From,omitempty" xml:"From,omitempty"`
}

func (s DescribeVulNumStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulNumStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeVulNumStatisticsRequest) SetFrom(v string) *DescribeVulNumStatisticsRequest {
	s.From = &v
	return s
}

type DescribeVulNumStatisticsResponseBody struct {
	AppCnt            *int32  `json:"AppCnt,omitempty" xml:"AppCnt,omitempty"`
	AppNum            *int32  `json:"AppNum,omitempty" xml:"AppNum,omitempty"`
	CmsDealedTotalNum *int32  `json:"CmsDealedTotalNum,omitempty" xml:"CmsDealedTotalNum,omitempty"`
	CmsNum            *int32  `json:"CmsNum,omitempty" xml:"CmsNum,omitempty"`
	CveNum            *int32  `json:"CveNum,omitempty" xml:"CveNum,omitempty"`
	EmgNum            *int32  `json:"EmgNum,omitempty" xml:"EmgNum,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScaNum            *int32  `json:"ScaNum,omitempty" xml:"ScaNum,omitempty"`
	SysNum            *int32  `json:"SysNum,omitempty" xml:"SysNum,omitempty"`
	VulAsapSum        *int32  `json:"VulAsapSum,omitempty" xml:"VulAsapSum,omitempty"`
	VulDealedTotalNum *int32  `json:"VulDealedTotalNum,omitempty" xml:"VulDealedTotalNum,omitempty"`
	VulLaterSum       *int32  `json:"VulLaterSum,omitempty" xml:"VulLaterSum,omitempty"`
	VulNntfSum        *int32  `json:"VulNntfSum,omitempty" xml:"VulNntfSum,omitempty"`
}

func (s DescribeVulNumStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulNumStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVulNumStatisticsResponseBody) SetAppCnt(v int32) *DescribeVulNumStatisticsResponseBody {
	s.AppCnt = &v
	return s
}

func (s *DescribeVulNumStatisticsResponseBody) SetAppNum(v int32) *DescribeVulNumStatisticsResponseBody {
	s.AppNum = &v
	return s
}

func (s *DescribeVulNumStatisticsResponseBody) SetCmsDealedTotalNum(v int32) *DescribeVulNumStatisticsResponseBody {
	s.CmsDealedTotalNum = &v
	return s
}

func (s *DescribeVulNumStatisticsResponseBody) SetCmsNum(v int32) *DescribeVulNumStatisticsResponseBody {
	s.CmsNum = &v
	return s
}

func (s *DescribeVulNumStatisticsResponseBody) SetCveNum(v int32) *DescribeVulNumStatisticsResponseBody {
	s.CveNum = &v
	return s
}

func (s *DescribeVulNumStatisticsResponseBody) SetEmgNum(v int32) *DescribeVulNumStatisticsResponseBody {
	s.EmgNum = &v
	return s
}

func (s *DescribeVulNumStatisticsResponseBody) SetRequestId(v string) *DescribeVulNumStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVulNumStatisticsResponseBody) SetScaNum(v int32) *DescribeVulNumStatisticsResponseBody {
	s.ScaNum = &v
	return s
}

func (s *DescribeVulNumStatisticsResponseBody) SetSysNum(v int32) *DescribeVulNumStatisticsResponseBody {
	s.SysNum = &v
	return s
}

func (s *DescribeVulNumStatisticsResponseBody) SetVulAsapSum(v int32) *DescribeVulNumStatisticsResponseBody {
	s.VulAsapSum = &v
	return s
}

func (s *DescribeVulNumStatisticsResponseBody) SetVulDealedTotalNum(v int32) *DescribeVulNumStatisticsResponseBody {
	s.VulDealedTotalNum = &v
	return s
}

func (s *DescribeVulNumStatisticsResponseBody) SetVulLaterSum(v int32) *DescribeVulNumStatisticsResponseBody {
	s.VulLaterSum = &v
	return s
}

func (s *DescribeVulNumStatisticsResponseBody) SetVulNntfSum(v int32) *DescribeVulNumStatisticsResponseBody {
	s.VulNntfSum = &v
	return s
}

type DescribeVulNumStatisticsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVulNumStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVulNumStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulNumStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeVulNumStatisticsResponse) SetHeaders(v map[string]*string) *DescribeVulNumStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeVulNumStatisticsResponse) SetStatusCode(v int32) *DescribeVulNumStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVulNumStatisticsResponse) SetBody(v *DescribeVulNumStatisticsResponseBody) *DescribeVulNumStatisticsResponse {
	s.Body = v
	return s
}

type DescribeVulTargetConfigRequest struct {
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeVulTargetConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulTargetConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeVulTargetConfigRequest) SetType(v string) *DescribeVulTargetConfigRequest {
	s.Type = &v
	return s
}

func (s *DescribeVulTargetConfigRequest) SetUuid(v string) *DescribeVulTargetConfigRequest {
	s.Uuid = &v
	return s
}

type DescribeVulTargetConfigResponseBody struct {
	RequestId     *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TargetConfigs []*DescribeVulTargetConfigResponseBodyTargetConfigs `json:"TargetConfigs,omitempty" xml:"TargetConfigs,omitempty" type:"Repeated"`
	TotalCount    *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeVulTargetConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulTargetConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVulTargetConfigResponseBody) SetRequestId(v string) *DescribeVulTargetConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVulTargetConfigResponseBody) SetTargetConfigs(v []*DescribeVulTargetConfigResponseBodyTargetConfigs) *DescribeVulTargetConfigResponseBody {
	s.TargetConfigs = v
	return s
}

func (s *DescribeVulTargetConfigResponseBody) SetTotalCount(v int32) *DescribeVulTargetConfigResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeVulTargetConfigResponseBodyTargetConfigs struct {
	Config        *string `json:"Config,omitempty" xml:"Config,omitempty"`
	OverAllConfig *string `json:"OverAllConfig,omitempty" xml:"OverAllConfig,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeVulTargetConfigResponseBodyTargetConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulTargetConfigResponseBodyTargetConfigs) GoString() string {
	return s.String()
}

func (s *DescribeVulTargetConfigResponseBodyTargetConfigs) SetConfig(v string) *DescribeVulTargetConfigResponseBodyTargetConfigs {
	s.Config = &v
	return s
}

func (s *DescribeVulTargetConfigResponseBodyTargetConfigs) SetOverAllConfig(v string) *DescribeVulTargetConfigResponseBodyTargetConfigs {
	s.OverAllConfig = &v
	return s
}

func (s *DescribeVulTargetConfigResponseBodyTargetConfigs) SetType(v string) *DescribeVulTargetConfigResponseBodyTargetConfigs {
	s.Type = &v
	return s
}

type DescribeVulTargetConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVulTargetConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVulTargetConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulTargetConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeVulTargetConfigResponse) SetHeaders(v map[string]*string) *DescribeVulTargetConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeVulTargetConfigResponse) SetStatusCode(v int32) *DescribeVulTargetConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVulTargetConfigResponse) SetBody(v *DescribeVulTargetConfigResponseBody) *DescribeVulTargetConfigResponse {
	s.Body = v
	return s
}

type DescribeVulTargetStatisticsRequest struct {
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeVulTargetStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulTargetStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeVulTargetStatisticsRequest) SetType(v string) *DescribeVulTargetStatisticsRequest {
	s.Type = &v
	return s
}

type DescribeVulTargetStatisticsResponseBody struct {
	CurrentPage *int32                                                `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TargetStats []*DescribeVulTargetStatisticsResponseBodyTargetStats `json:"TargetStats,omitempty" xml:"TargetStats,omitempty" type:"Repeated"`
	TotalCount  *int32                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeVulTargetStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulTargetStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVulTargetStatisticsResponseBody) SetCurrentPage(v int32) *DescribeVulTargetStatisticsResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVulTargetStatisticsResponseBody) SetPageSize(v int32) *DescribeVulTargetStatisticsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVulTargetStatisticsResponseBody) SetRequestId(v string) *DescribeVulTargetStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVulTargetStatisticsResponseBody) SetTargetStats(v []*DescribeVulTargetStatisticsResponseBodyTargetStats) *DescribeVulTargetStatisticsResponseBody {
	s.TargetStats = v
	return s
}

func (s *DescribeVulTargetStatisticsResponseBody) SetTotalCount(v int32) *DescribeVulTargetStatisticsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeVulTargetStatisticsResponseBodyTargetStats struct {
	Targets    []*DescribeVulTargetStatisticsResponseBodyTargetStatsTargets `json:"Targets,omitempty" xml:"Targets,omitempty" type:"Repeated"`
	TotalCount *int32                                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	UuidCount  *int32                                                       `json:"UuidCount,omitempty" xml:"UuidCount,omitempty"`
	VulType    *string                                                      `json:"VulType,omitempty" xml:"VulType,omitempty"`
}

func (s DescribeVulTargetStatisticsResponseBodyTargetStats) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulTargetStatisticsResponseBodyTargetStats) GoString() string {
	return s.String()
}

func (s *DescribeVulTargetStatisticsResponseBodyTargetStats) SetTargets(v []*DescribeVulTargetStatisticsResponseBodyTargetStatsTargets) *DescribeVulTargetStatisticsResponseBodyTargetStats {
	s.Targets = v
	return s
}

func (s *DescribeVulTargetStatisticsResponseBodyTargetStats) SetTotalCount(v int32) *DescribeVulTargetStatisticsResponseBodyTargetStats {
	s.TotalCount = &v
	return s
}

func (s *DescribeVulTargetStatisticsResponseBodyTargetStats) SetUuidCount(v int32) *DescribeVulTargetStatisticsResponseBodyTargetStats {
	s.UuidCount = &v
	return s
}

func (s *DescribeVulTargetStatisticsResponseBodyTargetStats) SetVulType(v string) *DescribeVulTargetStatisticsResponseBodyTargetStats {
	s.VulType = &v
	return s
}

type DescribeVulTargetStatisticsResponseBodyTargetStatsTargets struct {
	Flag       *string `json:"Flag,omitempty" xml:"Flag,omitempty"`
	Target     *string `json:"Target,omitempty" xml:"Target,omitempty"`
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s DescribeVulTargetStatisticsResponseBodyTargetStatsTargets) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulTargetStatisticsResponseBodyTargetStatsTargets) GoString() string {
	return s.String()
}

func (s *DescribeVulTargetStatisticsResponseBodyTargetStatsTargets) SetFlag(v string) *DescribeVulTargetStatisticsResponseBodyTargetStatsTargets {
	s.Flag = &v
	return s
}

func (s *DescribeVulTargetStatisticsResponseBodyTargetStatsTargets) SetTarget(v string) *DescribeVulTargetStatisticsResponseBodyTargetStatsTargets {
	s.Target = &v
	return s
}

func (s *DescribeVulTargetStatisticsResponseBodyTargetStatsTargets) SetTargetType(v string) *DescribeVulTargetStatisticsResponseBodyTargetStatsTargets {
	s.TargetType = &v
	return s
}

type DescribeVulTargetStatisticsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVulTargetStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVulTargetStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulTargetStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeVulTargetStatisticsResponse) SetHeaders(v map[string]*string) *DescribeVulTargetStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeVulTargetStatisticsResponse) SetStatusCode(v int32) *DescribeVulTargetStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVulTargetStatisticsResponse) SetBody(v *DescribeVulTargetStatisticsResponseBody) *DescribeVulTargetStatisticsResponse {
	s.Body = v
	return s
}

type DescribeVulWhitelistRequest struct {
	// The number of the page to return. Pages start from page 1. Default value: 1.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries to return on each page. Default value: 10.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeVulWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulWhitelistRequest) GoString() string {
	return s.String()
}

func (s *DescribeVulWhitelistRequest) SetCurrentPage(v int32) *DescribeVulWhitelistRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVulWhitelistRequest) SetPageSize(v int32) *DescribeVulWhitelistRequest {
	s.PageSize = &v
	return s
}

type DescribeVulWhitelistResponseBody struct {
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// An array that consists of the whitelist of vulnerabilities.
	VulWhitelists []*DescribeVulWhitelistResponseBodyVulWhitelists `json:"VulWhitelists,omitempty" xml:"VulWhitelists,omitempty" type:"Repeated"`
}

func (s DescribeVulWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVulWhitelistResponseBody) SetCount(v int32) *DescribeVulWhitelistResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeVulWhitelistResponseBody) SetCurrentPage(v int32) *DescribeVulWhitelistResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeVulWhitelistResponseBody) SetPageSize(v int32) *DescribeVulWhitelistResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVulWhitelistResponseBody) SetRequestId(v string) *DescribeVulWhitelistResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVulWhitelistResponseBody) SetTotalCount(v int32) *DescribeVulWhitelistResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeVulWhitelistResponseBody) SetVulWhitelists(v []*DescribeVulWhitelistResponseBodyVulWhitelists) *DescribeVulWhitelistResponseBody {
	s.VulWhitelists = v
	return s
}

type DescribeVulWhitelistResponseBodyVulWhitelists struct {
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The ID of the rule.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The reason why the vulnerability is added to the whitelist.
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	// The application scope of the rule. The value is a JSON string that contains the following fields:
	//
	// *   **type**: the type of the asset to which the rule is applied. Valid values:
	//
	//        -  **Uuid**: server
	//        -  **GroupId**: server group
	//
	// *   **groupIds**: the IDs of server groups.
	//
	// *   **uuids**: the UUIDs of servers.
	//
	// >  If this field is empty, the rule is applied to all assets.
	TargetInfo *string `json:"TargetInfo,omitempty" xml:"TargetInfo,omitempty"`
	// The type of the vulnerability.
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Whitelist *string `json:"Whitelist,omitempty" xml:"Whitelist,omitempty"`
}

func (s DescribeVulWhitelistResponseBodyVulWhitelists) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulWhitelistResponseBodyVulWhitelists) GoString() string {
	return s.String()
}

func (s *DescribeVulWhitelistResponseBodyVulWhitelists) SetAliasName(v string) *DescribeVulWhitelistResponseBodyVulWhitelists {
	s.AliasName = &v
	return s
}

func (s *DescribeVulWhitelistResponseBodyVulWhitelists) SetId(v string) *DescribeVulWhitelistResponseBodyVulWhitelists {
	s.Id = &v
	return s
}

func (s *DescribeVulWhitelistResponseBodyVulWhitelists) SetName(v string) *DescribeVulWhitelistResponseBodyVulWhitelists {
	s.Name = &v
	return s
}

func (s *DescribeVulWhitelistResponseBodyVulWhitelists) SetReason(v string) *DescribeVulWhitelistResponseBodyVulWhitelists {
	s.Reason = &v
	return s
}

func (s *DescribeVulWhitelistResponseBodyVulWhitelists) SetTargetInfo(v string) *DescribeVulWhitelistResponseBodyVulWhitelists {
	s.TargetInfo = &v
	return s
}

func (s *DescribeVulWhitelistResponseBodyVulWhitelists) SetType(v string) *DescribeVulWhitelistResponseBodyVulWhitelists {
	s.Type = &v
	return s
}

func (s *DescribeVulWhitelistResponseBodyVulWhitelists) SetWhitelist(v string) *DescribeVulWhitelistResponseBodyVulWhitelists {
	s.Whitelist = &v
	return s
}

type DescribeVulWhitelistResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVulWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVulWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVulWhitelistResponse) GoString() string {
	return s.String()
}

func (s *DescribeVulWhitelistResponse) SetHeaders(v map[string]*string) *DescribeVulWhitelistResponse {
	s.Headers = v
	return s
}

func (s *DescribeVulWhitelistResponse) SetStatusCode(v int32) *DescribeVulWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVulWhitelistResponse) SetBody(v *DescribeVulWhitelistResponseBody) *DescribeVulWhitelistResponse {
	s.Body = v
	return s
}

type DescribeWarningExportInfoRequest struct {
	// The ID of the export task.
	//
	// >  You can can call the [ExportWarning](~~ExportWarning~~) operation to query the IDs of export tasks.
	ExportId *int64 `json:"ExportId,omitempty" xml:"ExportId,omitempty"`
}

func (s DescribeWarningExportInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWarningExportInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeWarningExportInfoRequest) SetExportId(v int64) *DescribeWarningExportInfoRequest {
	s.ExportId = &v
	return s
}

type DescribeWarningExportInfoResponseBody struct {
	// The number of baseline entries that are exported.
	CurrentCount *int32 `json:"CurrentCount,omitempty" xml:"CurrentCount,omitempty"`
	// The status of the export task.
	//
	// Valid values:
	//
	// *   **init**: The task is being initialized.
	// *   **exporting**: The task is in progress.
	// *   **success**: The task is successful.
	ExportStatus *string `json:"ExportStatus,omitempty" xml:"ExportStatus,omitempty"`
	// The name of the exported Excel file.
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The ID of the export task for the baseline check result.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The URL at which you can download the exported Excel file.
	Link *string `json:"Link,omitempty" xml:"Link,omitempty"`
	// The message that shows the export task result. The value is fixed as **successful**, which indicates that the export task is successful.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The progress percentage of the export task.
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of baseline entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWarningExportInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWarningExportInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWarningExportInfoResponseBody) SetCurrentCount(v int32) *DescribeWarningExportInfoResponseBody {
	s.CurrentCount = &v
	return s
}

func (s *DescribeWarningExportInfoResponseBody) SetExportStatus(v string) *DescribeWarningExportInfoResponseBody {
	s.ExportStatus = &v
	return s
}

func (s *DescribeWarningExportInfoResponseBody) SetFileName(v string) *DescribeWarningExportInfoResponseBody {
	s.FileName = &v
	return s
}

func (s *DescribeWarningExportInfoResponseBody) SetId(v int64) *DescribeWarningExportInfoResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeWarningExportInfoResponseBody) SetLink(v string) *DescribeWarningExportInfoResponseBody {
	s.Link = &v
	return s
}

func (s *DescribeWarningExportInfoResponseBody) SetMessage(v string) *DescribeWarningExportInfoResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeWarningExportInfoResponseBody) SetProgress(v int32) *DescribeWarningExportInfoResponseBody {
	s.Progress = &v
	return s
}

func (s *DescribeWarningExportInfoResponseBody) SetRequestId(v string) *DescribeWarningExportInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWarningExportInfoResponseBody) SetTotalCount(v int32) *DescribeWarningExportInfoResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWarningExportInfoResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWarningExportInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWarningExportInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWarningExportInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeWarningExportInfoResponse) SetHeaders(v map[string]*string) *DescribeWarningExportInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeWarningExportInfoResponse) SetStatusCode(v int32) *DescribeWarningExportInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWarningExportInfoResponse) SetBody(v *DescribeWarningExportInfoResponseBody) *DescribeWarningExportInfoResponse {
	s.Body = v
	return s
}

type DescribeWarningMachinesRequest struct {
	// The ID of the container cluster.
	//
	// >  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The name of the field that is used to search for the container. Valid values:
	//
	// *   **CONTAINER_ID**: the ID of the container
	// *   **IMAGE**: the name of the image
	// *   **NAMESPACE**: the namespace
	// *   **NODE_NAME**: the name of the node
	// *   **POD_IP**: the IP address of the pod
	// *   **HOST_IP**: the IP address of the host
	// *   **INSTANCE_ID**: the ID of the instance
	ContainerFieldName *string `json:"ContainerFieldName,omitempty" xml:"ContainerFieldName,omitempty"`
	// The value of the field that is used to search for the container.
	ContainerFieldValue *string `json:"ContainerFieldValue,omitempty" xml:"ContainerFieldValue,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	GroupId     *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// Specifies whether risks were detected. Valid values:
	//
	// *   **1**: yes
	// *   **0**: no
	HaveRisk *int32 `json:"HaveRisk,omitempty" xml:"HaveRisk,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The name of the server on which the baseline check is performed.
	MachineName *string `json:"MachineName,omitempty" xml:"MachineName,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the risk item.
	//
	// >  You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs of risk items.
	RiskId *int64 `json:"RiskId,omitempty" xml:"RiskId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The ID of the baseline check policy.
	StrategyId *int64 `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	// The type of the query condition. Valid values:
	//
	// *   **containerId**: the ID of the container
	// *   **uuid**: the UUID of the asset
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	// The UUID of the server on which the baseline check is performed. Separate multiple UUIDs with commas (,).
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s DescribeWarningMachinesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWarningMachinesRequest) GoString() string {
	return s.String()
}

func (s *DescribeWarningMachinesRequest) SetClusterId(v string) *DescribeWarningMachinesRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeWarningMachinesRequest) SetContainerFieldName(v string) *DescribeWarningMachinesRequest {
	s.ContainerFieldName = &v
	return s
}

func (s *DescribeWarningMachinesRequest) SetContainerFieldValue(v string) *DescribeWarningMachinesRequest {
	s.ContainerFieldValue = &v
	return s
}

func (s *DescribeWarningMachinesRequest) SetCurrentPage(v int32) *DescribeWarningMachinesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWarningMachinesRequest) SetGroupId(v int64) *DescribeWarningMachinesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeWarningMachinesRequest) SetHaveRisk(v int32) *DescribeWarningMachinesRequest {
	s.HaveRisk = &v
	return s
}

func (s *DescribeWarningMachinesRequest) SetLang(v string) *DescribeWarningMachinesRequest {
	s.Lang = &v
	return s
}

func (s *DescribeWarningMachinesRequest) SetMachineName(v string) *DescribeWarningMachinesRequest {
	s.MachineName = &v
	return s
}

func (s *DescribeWarningMachinesRequest) SetPageSize(v int32) *DescribeWarningMachinesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeWarningMachinesRequest) SetRiskId(v int64) *DescribeWarningMachinesRequest {
	s.RiskId = &v
	return s
}

func (s *DescribeWarningMachinesRequest) SetSourceIp(v string) *DescribeWarningMachinesRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeWarningMachinesRequest) SetStrategyId(v int64) *DescribeWarningMachinesRequest {
	s.StrategyId = &v
	return s
}

func (s *DescribeWarningMachinesRequest) SetTargetType(v string) *DescribeWarningMachinesRequest {
	s.TargetType = &v
	return s
}

func (s *DescribeWarningMachinesRequest) SetUuids(v string) *DescribeWarningMachinesRequest {
	s.Uuids = &v
	return s
}

type DescribeWarningMachinesResponseBody struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// An array that consists of the servers.
	WarningMachines []*DescribeWarningMachinesResponseBodyWarningMachines `json:"WarningMachines,omitempty" xml:"WarningMachines,omitempty" type:"Repeated"`
}

func (s DescribeWarningMachinesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWarningMachinesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWarningMachinesResponseBody) SetCount(v int32) *DescribeWarningMachinesResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeWarningMachinesResponseBody) SetCurrentPage(v int32) *DescribeWarningMachinesResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWarningMachinesResponseBody) SetPageSize(v int32) *DescribeWarningMachinesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeWarningMachinesResponseBody) SetRequestId(v string) *DescribeWarningMachinesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWarningMachinesResponseBody) SetTotalCount(v int32) *DescribeWarningMachinesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeWarningMachinesResponseBody) SetWarningMachines(v []*DescribeWarningMachinesResponseBodyWarningMachines) *DescribeWarningMachinesResponseBody {
	s.WarningMachines = v
	return s
}

type DescribeWarningMachinesResponseBodyWarningMachines struct {
	// The edition of Security Center that is authorized to protect the asset. Valid values:
	//
	// *   **1**: Basic edition
	// *   **6**: Anti-virus edition
	// *   **5**: Advanced edition
	// *   **3**: Enterprise edition
	// *   **7**: Ultimate edition
	// *   **10**: Value-added Plan edition
	AuthVersion *int32 `json:"AuthVersion,omitempty" xml:"AuthVersion,omitempty"`
	// Indicates whether Security Center is authorized to protect the asset. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Bind *bool `json:"Bind,omitempty" xml:"Bind,omitempty"`
	// The number of **high-risk** items on the server.
	HighWarningCount *int32 `json:"HighWarningCount,omitempty" xml:"HighWarningCount,omitempty"`
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The number of **low-risk** items on the server.
	LowWarningCount *int32 `json:"LowWarningCount,omitempty" xml:"LowWarningCount,omitempty"`
	// The number of **medium-risk** items on the server.
	MediumWarningCount *int32 `json:"MediumWarningCount,omitempty" xml:"MediumWarningCount,omitempty"`
	// The number of the check items that passed the baseline check on the server.
	PassCount *int32 `json:"PassCount,omitempty" xml:"PassCount,omitempty"`
	// Indicates whether a port on the server is accessible over the Internet. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	PortOpen *bool `json:"PortOpen,omitempty" xml:"PortOpen,omitempty"`
	// The ID of the region in which the server is deployed.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The verification status of the risk item after the risk item is fixed. Valid values:
	//
	// *   **1**: complete
	// *   **2**: verifying
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The UUID of the server on which the baseline check is performed.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeWarningMachinesResponseBodyWarningMachines) String() string {
	return tea.Prettify(s)
}

func (s DescribeWarningMachinesResponseBodyWarningMachines) GoString() string {
	return s.String()
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetAuthVersion(v int32) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.AuthVersion = &v
	return s
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetBind(v bool) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.Bind = &v
	return s
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetHighWarningCount(v int32) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.HighWarningCount = &v
	return s
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetInstanceId(v string) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.InstanceId = &v
	return s
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetInstanceName(v string) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.InstanceName = &v
	return s
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetInternetIp(v string) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.InternetIp = &v
	return s
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetIntranetIp(v string) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.IntranetIp = &v
	return s
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetLowWarningCount(v int32) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.LowWarningCount = &v
	return s
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetMediumWarningCount(v int32) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.MediumWarningCount = &v
	return s
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetPassCount(v int32) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.PassCount = &v
	return s
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetPortOpen(v bool) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.PortOpen = &v
	return s
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetRegionId(v string) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.RegionId = &v
	return s
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetStatus(v int32) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.Status = &v
	return s
}

func (s *DescribeWarningMachinesResponseBodyWarningMachines) SetUuid(v string) *DescribeWarningMachinesResponseBodyWarningMachines {
	s.Uuid = &v
	return s
}

type DescribeWarningMachinesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWarningMachinesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWarningMachinesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWarningMachinesResponse) GoString() string {
	return s.String()
}

func (s *DescribeWarningMachinesResponse) SetHeaders(v map[string]*string) *DescribeWarningMachinesResponse {
	s.Headers = v
	return s
}

func (s *DescribeWarningMachinesResponse) SetStatusCode(v int32) *DescribeWarningMachinesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWarningMachinesResponse) SetBody(v *DescribeWarningMachinesResponseBody) *DescribeWarningMachinesResponse {
	s.Body = v
	return s
}

type DescribeWebLockBindListRequest struct {
	// The number of the page to return. Pages start from page 1. Default value: 1.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The language of the content within the request and the response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The string that allows you to search for servers in fuzzy match mode. You can enter a server name or IP address.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The protection status of the server that you want to query. Valid values:
	//
	// *   **on**: protected
	// *   **off**: unprotected
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeWebLockBindListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockBindListRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebLockBindListRequest) SetCurrentPage(v int32) *DescribeWebLockBindListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWebLockBindListRequest) SetLang(v string) *DescribeWebLockBindListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeWebLockBindListRequest) SetPageSize(v int32) *DescribeWebLockBindListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeWebLockBindListRequest) SetRemark(v string) *DescribeWebLockBindListRequest {
	s.Remark = &v
	return s
}

func (s *DescribeWebLockBindListRequest) SetSourceIp(v string) *DescribeWebLockBindListRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeWebLockBindListRequest) SetStatus(v string) *DescribeWebLockBindListRequest {
	s.Status = &v
	return s
}

type DescribeWebLockBindListResponseBody struct {
	// The information about the servers that have web tamper proofing enabled.
	BindList []*DescribeWebLockBindListResponseBodyBindList `json:"BindList,omitempty" xml:"BindList,omitempty" type:"Repeated"`
	// The page number of the returned page. Pages start from page 1. Default value: 1.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of servers that have web tamper proofing enabled.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWebLockBindListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockBindListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWebLockBindListResponseBody) SetBindList(v []*DescribeWebLockBindListResponseBodyBindList) *DescribeWebLockBindListResponseBody {
	s.BindList = v
	return s
}

func (s *DescribeWebLockBindListResponseBody) SetCurrentPage(v int32) *DescribeWebLockBindListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWebLockBindListResponseBody) SetPageSize(v int32) *DescribeWebLockBindListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeWebLockBindListResponseBody) SetRequestId(v string) *DescribeWebLockBindListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWebLockBindListResponseBody) SetTotalCount(v int32) *DescribeWebLockBindListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWebLockBindListResponseBodyBindList struct {
	// The number of alerts.
	AuditCount *string `json:"AuditCount,omitempty" xml:"AuditCount,omitempty"`
	// The number of blocked tampering events.
	BlockCount *string `json:"BlockCount,omitempty" xml:"BlockCount,omitempty"`
	// The number of protected directories.
	DirCount *string `json:"DirCount,omitempty" xml:"DirCount,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The operating system that the server runs.
	Os *string `json:"Os,omitempty" xml:"Os,omitempty"`
	// The starting progress percentage of web tamper proofing. Valid values: 0 to 100.
	Percent *int32 `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The error code for web tamper proofing. Valid values:
	//
	// *   **2001**: The Security Center agent is offline.
	// *   **9999**: The connection timed out.
	ServiceCode *string `json:"ServiceCode,omitempty" xml:"ServiceCode,omitempty"`
	// The error message for web tamper proofing. Valid values:
	//
	// *   **client offline**: The Security Center agent is offline.
	// *   **timeout**: The connection timed out.
	ServiceDetail *string `json:"ServiceDetail,omitempty" xml:"ServiceDetail,omitempty"`
	// The status of web tamper proofing on the server. Valid values:
	//
	// *   **stop**: Web tamper proofing is disabled.
	// *   **initializing**: Web tamper proofing is being enabled.
	// *   **exception**: Web tamper proofing is not running as expected.
	// *   **running**: Web tamper proofing is running.
	// *   **closing**: Web tamper proofing is being disabled.
	ServiceStatus *string `json:"ServiceStatus,omitempty" xml:"ServiceStatus,omitempty"`
	// The protection status of the server. Valid values:
	//
	// *   **on**: protected
	// *   **off**: unprotected
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeWebLockBindListResponseBodyBindList) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockBindListResponseBodyBindList) GoString() string {
	return s.String()
}

func (s *DescribeWebLockBindListResponseBodyBindList) SetAuditCount(v string) *DescribeWebLockBindListResponseBodyBindList {
	s.AuditCount = &v
	return s
}

func (s *DescribeWebLockBindListResponseBodyBindList) SetBlockCount(v string) *DescribeWebLockBindListResponseBodyBindList {
	s.BlockCount = &v
	return s
}

func (s *DescribeWebLockBindListResponseBodyBindList) SetDirCount(v string) *DescribeWebLockBindListResponseBodyBindList {
	s.DirCount = &v
	return s
}

func (s *DescribeWebLockBindListResponseBodyBindList) SetInstanceName(v string) *DescribeWebLockBindListResponseBodyBindList {
	s.InstanceName = &v
	return s
}

func (s *DescribeWebLockBindListResponseBodyBindList) SetInternetIp(v string) *DescribeWebLockBindListResponseBodyBindList {
	s.InternetIp = &v
	return s
}

func (s *DescribeWebLockBindListResponseBodyBindList) SetIntranetIp(v string) *DescribeWebLockBindListResponseBodyBindList {
	s.IntranetIp = &v
	return s
}

func (s *DescribeWebLockBindListResponseBodyBindList) SetOs(v string) *DescribeWebLockBindListResponseBodyBindList {
	s.Os = &v
	return s
}

func (s *DescribeWebLockBindListResponseBodyBindList) SetPercent(v int32) *DescribeWebLockBindListResponseBodyBindList {
	s.Percent = &v
	return s
}

func (s *DescribeWebLockBindListResponseBodyBindList) SetServiceCode(v string) *DescribeWebLockBindListResponseBodyBindList {
	s.ServiceCode = &v
	return s
}

func (s *DescribeWebLockBindListResponseBodyBindList) SetServiceDetail(v string) *DescribeWebLockBindListResponseBodyBindList {
	s.ServiceDetail = &v
	return s
}

func (s *DescribeWebLockBindListResponseBodyBindList) SetServiceStatus(v string) *DescribeWebLockBindListResponseBodyBindList {
	s.ServiceStatus = &v
	return s
}

func (s *DescribeWebLockBindListResponseBodyBindList) SetStatus(v string) *DescribeWebLockBindListResponseBodyBindList {
	s.Status = &v
	return s
}

func (s *DescribeWebLockBindListResponseBodyBindList) SetUuid(v string) *DescribeWebLockBindListResponseBodyBindList {
	s.Uuid = &v
	return s
}

type DescribeWebLockBindListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWebLockBindListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWebLockBindListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockBindListResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebLockBindListResponse) SetHeaders(v map[string]*string) *DescribeWebLockBindListResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebLockBindListResponse) SetStatusCode(v int32) *DescribeWebLockBindListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebLockBindListResponse) SetBody(v *DescribeWebLockBindListResponseBody) *DescribeWebLockBindListResponse {
	s.Body = v
	return s
}

type DescribeWebLockConfigListRequest struct {
	// The language of the content within the request and the response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The UUID of the server for which you want to query the configurations.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeWebLockConfigListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockConfigListRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebLockConfigListRequest) SetLang(v string) *DescribeWebLockConfigListRequest {
	s.Lang = &v
	return s
}

func (s *DescribeWebLockConfigListRequest) SetSourceIp(v string) *DescribeWebLockConfigListRequest {
	s.SourceIp = &v
	return s
}

func (s *DescribeWebLockConfigListRequest) SetUuid(v string) *DescribeWebLockConfigListRequest {
	s.Uuid = &v
	return s
}

type DescribeWebLockConfigListResponseBody struct {
	// An array that consists of the configurations of web tamper proofing.
	ConfigList []*DescribeWebLockConfigListResponseBodyConfigList `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" type:"Repeated"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of directories that have web tamper proofing enabled on the specified server.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWebLockConfigListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockConfigListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWebLockConfigListResponseBody) SetConfigList(v []*DescribeWebLockConfigListResponseBodyConfigList) *DescribeWebLockConfigListResponseBody {
	s.ConfigList = v
	return s
}

func (s *DescribeWebLockConfigListResponseBody) SetRequestId(v string) *DescribeWebLockConfigListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWebLockConfigListResponseBody) SetTotalCount(v int32) *DescribeWebLockConfigListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWebLockConfigListResponseBodyConfigList struct {
	// The prevention mode. Valid values:
	//
	// *   **block**: Interception Mode
	// *   **audit**: Alert Mode
	DefenceMode *string `json:"DefenceMode,omitempty" xml:"DefenceMode,omitempty"`
	// The directory that has web tamper proofing enabled.
	Dir *string `json:"Dir,omitempty" xml:"Dir,omitempty"`
	// The directory that has web tamper proofing disabled.
	//
	// >  If the value of **Mode** is **blacklist**, this parameter is returned.
	ExclusiveDir *string `json:"ExclusiveDir,omitempty" xml:"ExclusiveDir,omitempty"`
	// The file that has web tamper proofing disabled.
	//
	// >  If the value of **Mode** is **blacklist**, this parameter is returned.
	ExclusiveFile *string `json:"ExclusiveFile,omitempty" xml:"ExclusiveFile,omitempty"`
	// The type of the file that has web tamper proofing disabled.
	//
	// >  If the value of **Mode** is **blacklist**, this parameter is returned.
	ExclusiveFileType *string `json:"ExclusiveFileType,omitempty" xml:"ExclusiveFileType,omitempty"`
	// The ID of the directory that has web tamper proofing enabled.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The file that has web tamper proofing enabled.
	//
	// >  If the value of **Mode** is **whitelist**, this parameter is returned.
	InclusiveFile *string `json:"InclusiveFile,omitempty" xml:"InclusiveFile,omitempty"`
	// The type of the file that has web tamper proofing enabled.
	//
	// >  If the value of **Mode** is **whitelist**, this parameter is returned.
	InclusiveFileType *string `json:"InclusiveFileType,omitempty" xml:"InclusiveFileType,omitempty"`
	// The local path to the backup files of the protected directory.
	LocalBackupDir *string `json:"LocalBackupDir,omitempty" xml:"LocalBackupDir,omitempty"`
	// The protection mode of web tamper proofing. Valid values:
	//
	// *   **whitelist**: In this mode, web tamper proofing is enabled for the specified directories and file types.
	// *   **blacklist**: In this mode, web tamper proofing is enabled for the unspecified sub-directories, file types, and files in the protected directories.
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// The UUID of the server that has web tamper proofing enabled.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeWebLockConfigListResponseBodyConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockConfigListResponseBodyConfigList) GoString() string {
	return s.String()
}

func (s *DescribeWebLockConfigListResponseBodyConfigList) SetDefenceMode(v string) *DescribeWebLockConfigListResponseBodyConfigList {
	s.DefenceMode = &v
	return s
}

func (s *DescribeWebLockConfigListResponseBodyConfigList) SetDir(v string) *DescribeWebLockConfigListResponseBodyConfigList {
	s.Dir = &v
	return s
}

func (s *DescribeWebLockConfigListResponseBodyConfigList) SetExclusiveDir(v string) *DescribeWebLockConfigListResponseBodyConfigList {
	s.ExclusiveDir = &v
	return s
}

func (s *DescribeWebLockConfigListResponseBodyConfigList) SetExclusiveFile(v string) *DescribeWebLockConfigListResponseBodyConfigList {
	s.ExclusiveFile = &v
	return s
}

func (s *DescribeWebLockConfigListResponseBodyConfigList) SetExclusiveFileType(v string) *DescribeWebLockConfigListResponseBodyConfigList {
	s.ExclusiveFileType = &v
	return s
}

func (s *DescribeWebLockConfigListResponseBodyConfigList) SetId(v string) *DescribeWebLockConfigListResponseBodyConfigList {
	s.Id = &v
	return s
}

func (s *DescribeWebLockConfigListResponseBodyConfigList) SetInclusiveFile(v string) *DescribeWebLockConfigListResponseBodyConfigList {
	s.InclusiveFile = &v
	return s
}

func (s *DescribeWebLockConfigListResponseBodyConfigList) SetInclusiveFileType(v string) *DescribeWebLockConfigListResponseBodyConfigList {
	s.InclusiveFileType = &v
	return s
}

func (s *DescribeWebLockConfigListResponseBodyConfigList) SetLocalBackupDir(v string) *DescribeWebLockConfigListResponseBodyConfigList {
	s.LocalBackupDir = &v
	return s
}

func (s *DescribeWebLockConfigListResponseBodyConfigList) SetMode(v string) *DescribeWebLockConfigListResponseBodyConfigList {
	s.Mode = &v
	return s
}

func (s *DescribeWebLockConfigListResponseBodyConfigList) SetUuid(v string) *DescribeWebLockConfigListResponseBodyConfigList {
	s.Uuid = &v
	return s
}

type DescribeWebLockConfigListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWebLockConfigListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWebLockConfigListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockConfigListResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebLockConfigListResponse) SetHeaders(v map[string]*string) *DescribeWebLockConfigListResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebLockConfigListResponse) SetStatusCode(v int32) *DescribeWebLockConfigListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebLockConfigListResponse) SetBody(v *DescribeWebLockConfigListResponseBody) *DescribeWebLockConfigListResponse {
	s.Body = v
	return s
}

type DescribeWebLockExclusiveFileTypeResponseBody struct {
	ExclusiveFileType []*string `json:"ExclusiveFileType,omitempty" xml:"ExclusiveFileType,omitempty" type:"Repeated"`
	RequestId         *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount        *int32    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWebLockExclusiveFileTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockExclusiveFileTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWebLockExclusiveFileTypeResponseBody) SetExclusiveFileType(v []*string) *DescribeWebLockExclusiveFileTypeResponseBody {
	s.ExclusiveFileType = v
	return s
}

func (s *DescribeWebLockExclusiveFileTypeResponseBody) SetRequestId(v string) *DescribeWebLockExclusiveFileTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWebLockExclusiveFileTypeResponseBody) SetTotalCount(v int32) *DescribeWebLockExclusiveFileTypeResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWebLockExclusiveFileTypeResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWebLockExclusiveFileTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWebLockExclusiveFileTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockExclusiveFileTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebLockExclusiveFileTypeResponse) SetHeaders(v map[string]*string) *DescribeWebLockExclusiveFileTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebLockExclusiveFileTypeResponse) SetStatusCode(v int32) *DescribeWebLockExclusiveFileTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebLockExclusiveFileTypeResponse) SetBody(v *DescribeWebLockExclusiveFileTypeResponseBody) *DescribeWebLockExclusiveFileTypeResponse {
	s.Body = v
	return s
}

type DescribeWebLockFileChangeStatisticsRequest struct {
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeWebLockFileChangeStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockFileChangeStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebLockFileChangeStatisticsRequest) SetCurrentPage(v int32) *DescribeWebLockFileChangeStatisticsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWebLockFileChangeStatisticsRequest) SetPageSize(v int32) *DescribeWebLockFileChangeStatisticsRequest {
	s.PageSize = &v
	return s
}

type DescribeWebLockFileChangeStatisticsResponseBody struct {
	CurrentPage *int32                                                 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	List        []*DescribeWebLockFileChangeStatisticsResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageSize    *int32                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWebLockFileChangeStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockFileChangeStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWebLockFileChangeStatisticsResponseBody) SetCurrentPage(v int32) *DescribeWebLockFileChangeStatisticsResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWebLockFileChangeStatisticsResponseBody) SetList(v []*DescribeWebLockFileChangeStatisticsResponseBodyList) *DescribeWebLockFileChangeStatisticsResponseBody {
	s.List = v
	return s
}

func (s *DescribeWebLockFileChangeStatisticsResponseBody) SetPageSize(v int32) *DescribeWebLockFileChangeStatisticsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeWebLockFileChangeStatisticsResponseBody) SetRequestId(v string) *DescribeWebLockFileChangeStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWebLockFileChangeStatisticsResponseBody) SetTotalCount(v int32) *DescribeWebLockFileChangeStatisticsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWebLockFileChangeStatisticsResponseBodyList struct {
	Count *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	File  *string `json:"File,omitempty" xml:"File,omitempty"`
}

func (s DescribeWebLockFileChangeStatisticsResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockFileChangeStatisticsResponseBodyList) GoString() string {
	return s.String()
}

func (s *DescribeWebLockFileChangeStatisticsResponseBodyList) SetCount(v int32) *DescribeWebLockFileChangeStatisticsResponseBodyList {
	s.Count = &v
	return s
}

func (s *DescribeWebLockFileChangeStatisticsResponseBodyList) SetFile(v string) *DescribeWebLockFileChangeStatisticsResponseBodyList {
	s.File = &v
	return s
}

type DescribeWebLockFileChangeStatisticsResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWebLockFileChangeStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWebLockFileChangeStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockFileChangeStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebLockFileChangeStatisticsResponse) SetHeaders(v map[string]*string) *DescribeWebLockFileChangeStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebLockFileChangeStatisticsResponse) SetStatusCode(v int32) *DescribeWebLockFileChangeStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebLockFileChangeStatisticsResponse) SetBody(v *DescribeWebLockFileChangeStatisticsResponseBody) *DescribeWebLockFileChangeStatisticsResponse {
	s.Body = v
	return s
}

type DescribeWebLockFileEventsRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// Specifies whether the event on web tamper proofing is handled. Valid values:
	//
	// *   **n**: no
	// *   **y**: yes
	Dealed *string `json:"Dealed,omitempty" xml:"Dealed,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The name of the process.
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	// The name of the asset.
	//
	// >  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the names of assets.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The beginning of the time range to query. The value is a UNIX timestamp.
	TsBegin *int64 `json:"TsBegin,omitempty" xml:"TsBegin,omitempty"`
	// The end of the time range to query. The value is a UNIX timestamp.
	TsEnd *int64 `json:"TsEnd,omitempty" xml:"TsEnd,omitempty"`
}

func (s DescribeWebLockFileEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockFileEventsRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebLockFileEventsRequest) SetCurrentPage(v int32) *DescribeWebLockFileEventsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWebLockFileEventsRequest) SetDealed(v string) *DescribeWebLockFileEventsRequest {
	s.Dealed = &v
	return s
}

func (s *DescribeWebLockFileEventsRequest) SetPageSize(v int32) *DescribeWebLockFileEventsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeWebLockFileEventsRequest) SetProcessName(v string) *DescribeWebLockFileEventsRequest {
	s.ProcessName = &v
	return s
}

func (s *DescribeWebLockFileEventsRequest) SetRemark(v string) *DescribeWebLockFileEventsRequest {
	s.Remark = &v
	return s
}

func (s *DescribeWebLockFileEventsRequest) SetTsBegin(v int64) *DescribeWebLockFileEventsRequest {
	s.TsBegin = &v
	return s
}

func (s *DescribeWebLockFileEventsRequest) SetTsEnd(v int64) *DescribeWebLockFileEventsRequest {
	s.TsEnd = &v
	return s
}

type DescribeWebLockFileEventsResponseBody struct {
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// An array that consists of events on web tamper proofing returned.
	List []*DescribeWebLockFileEventsResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of events on web tamper proofing returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWebLockFileEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockFileEventsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWebLockFileEventsResponseBody) SetCurrentPage(v int32) *DescribeWebLockFileEventsResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBody) SetList(v []*DescribeWebLockFileEventsResponseBodyList) *DescribeWebLockFileEventsResponseBody {
	s.List = v
	return s
}

func (s *DescribeWebLockFileEventsResponseBody) SetPageSize(v int32) *DescribeWebLockFileEventsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBody) SetRequestId(v string) *DescribeWebLockFileEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBody) SetTotalCount(v int32) *DescribeWebLockFileEventsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWebLockFileEventsResponseBodyList struct {
	// The number of attempts.
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The timestamp at which the event on web tamper proofing was first detected.
	Ds *int64 `json:"Ds,omitempty" xml:"Ds,omitempty"`
	// The name of the event on web tamper proofing.
	EventName *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	// The status of the event on web tamper proofing. Valid values:
	//
	// *   **1**: unhandled
	// *   **2**: ignored
	// *   **4**: deprecated
	// *   **8**: marked as false positive
	// *   **10**: added to the whitelist
	// *   **16**: being handled
	// *   **32**: defended
	// *   **64**: invalid
	// *   **128**: deleted
	// *   **512**: automatically handled
	EventStatus *string `json:"EventStatus,omitempty" xml:"EventStatus,omitempty"`
	// The prevention mode. Valid values:
	//
	// *   **audit**: Interception Mode
	// *   **web_lock**: Alert Mode
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The timestamp at which the event on web tamper proofing was last detected.
	GmtEvent *int64 `json:"GmtEvent,omitempty" xml:"GmtEvent,omitempty"`
	// The ID of the event on web tamper proofing.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the asset.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the affected asset.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the asset.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The IP address of the asset.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The severity of the event on web tamper proofing. Valid values: **medium**.
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The file path.
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The name of the process.
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	// The path of the process.
	ProcessPath *string `json:"ProcessPath,omitempty" xml:"ProcessPath,omitempty"`
	// The status of the event on web tamper proofing. Valid values:
	//
	// *   **1**: unhandled
	// *   **2**: ignored
	// *   **4**: deprecated
	// *   **8**: marked as false positive
	// *   **10**: added to the whitelist
	// *   **16**: being handled
	// *   **32**: defended
	// *   **64**: invalid
	// *   **128**: deleted
	// *   **512**: automatically handled
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The UUID of the asset.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeWebLockFileEventsResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockFileEventsResponseBodyList) GoString() string {
	return s.String()
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetCount(v int64) *DescribeWebLockFileEventsResponseBodyList {
	s.Count = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetDs(v int64) *DescribeWebLockFileEventsResponseBodyList {
	s.Ds = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetEventName(v string) *DescribeWebLockFileEventsResponseBodyList {
	s.EventName = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetEventStatus(v string) *DescribeWebLockFileEventsResponseBodyList {
	s.EventStatus = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetEventType(v string) *DescribeWebLockFileEventsResponseBodyList {
	s.EventType = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetGmtEvent(v int64) *DescribeWebLockFileEventsResponseBodyList {
	s.GmtEvent = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetId(v int64) *DescribeWebLockFileEventsResponseBodyList {
	s.Id = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetInstanceName(v string) *DescribeWebLockFileEventsResponseBodyList {
	s.InstanceName = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetInternetIp(v string) *DescribeWebLockFileEventsResponseBodyList {
	s.InternetIp = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetIntranetIp(v string) *DescribeWebLockFileEventsResponseBodyList {
	s.IntranetIp = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetIp(v string) *DescribeWebLockFileEventsResponseBodyList {
	s.Ip = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetLevel(v string) *DescribeWebLockFileEventsResponseBodyList {
	s.Level = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetPath(v string) *DescribeWebLockFileEventsResponseBodyList {
	s.Path = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetProcessName(v string) *DescribeWebLockFileEventsResponseBodyList {
	s.ProcessName = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetProcessPath(v string) *DescribeWebLockFileEventsResponseBodyList {
	s.ProcessPath = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetStatus(v string) *DescribeWebLockFileEventsResponseBodyList {
	s.Status = &v
	return s
}

func (s *DescribeWebLockFileEventsResponseBodyList) SetUuid(v string) *DescribeWebLockFileEventsResponseBodyList {
	s.Uuid = &v
	return s
}

type DescribeWebLockFileEventsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWebLockFileEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWebLockFileEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockFileEventsResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebLockFileEventsResponse) SetHeaders(v map[string]*string) *DescribeWebLockFileEventsResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebLockFileEventsResponse) SetStatusCode(v int32) *DescribeWebLockFileEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebLockFileEventsResponse) SetBody(v *DescribeWebLockFileEventsResponseBody) *DescribeWebLockFileEventsResponse {
	s.Body = v
	return s
}

type DescribeWebLockFileTypeSummaryResponseBody struct {
	List       []*DescribeWebLockFileTypeSummaryResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	RequestId  *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWebLockFileTypeSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockFileTypeSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWebLockFileTypeSummaryResponseBody) SetList(v []*DescribeWebLockFileTypeSummaryResponseBodyList) *DescribeWebLockFileTypeSummaryResponseBody {
	s.List = v
	return s
}

func (s *DescribeWebLockFileTypeSummaryResponseBody) SetRequestId(v string) *DescribeWebLockFileTypeSummaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWebLockFileTypeSummaryResponseBody) SetTotalCount(v int32) *DescribeWebLockFileTypeSummaryResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWebLockFileTypeSummaryResponseBodyList struct {
	Count *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeWebLockFileTypeSummaryResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockFileTypeSummaryResponseBodyList) GoString() string {
	return s.String()
}

func (s *DescribeWebLockFileTypeSummaryResponseBodyList) SetCount(v int32) *DescribeWebLockFileTypeSummaryResponseBodyList {
	s.Count = &v
	return s
}

func (s *DescribeWebLockFileTypeSummaryResponseBodyList) SetType(v string) *DescribeWebLockFileTypeSummaryResponseBodyList {
	s.Type = &v
	return s
}

type DescribeWebLockFileTypeSummaryResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWebLockFileTypeSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWebLockFileTypeSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockFileTypeSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebLockFileTypeSummaryResponse) SetHeaders(v map[string]*string) *DescribeWebLockFileTypeSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebLockFileTypeSummaryResponse) SetStatusCode(v int32) *DescribeWebLockFileTypeSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebLockFileTypeSummaryResponse) SetBody(v *DescribeWebLockFileTypeSummaryResponseBody) *DescribeWebLockFileTypeSummaryResponse {
	s.Body = v
	return s
}

type DescribeWebLockInclusiveFileTypeResponseBody struct {
	InclusiveFileType []*string `json:"InclusiveFileType,omitempty" xml:"InclusiveFileType,omitempty" type:"Repeated"`
	RequestId         *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount        *int32    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWebLockInclusiveFileTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockInclusiveFileTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWebLockInclusiveFileTypeResponseBody) SetInclusiveFileType(v []*string) *DescribeWebLockInclusiveFileTypeResponseBody {
	s.InclusiveFileType = v
	return s
}

func (s *DescribeWebLockInclusiveFileTypeResponseBody) SetRequestId(v string) *DescribeWebLockInclusiveFileTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWebLockInclusiveFileTypeResponseBody) SetTotalCount(v int32) *DescribeWebLockInclusiveFileTypeResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWebLockInclusiveFileTypeResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWebLockInclusiveFileTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWebLockInclusiveFileTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockInclusiveFileTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebLockInclusiveFileTypeResponse) SetHeaders(v map[string]*string) *DescribeWebLockInclusiveFileTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebLockInclusiveFileTypeResponse) SetStatusCode(v int32) *DescribeWebLockInclusiveFileTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebLockInclusiveFileTypeResponse) SetBody(v *DescribeWebLockInclusiveFileTypeResponseBody) *DescribeWebLockInclusiveFileTypeResponse {
	s.Body = v
	return s
}

type DescribeWebLockProcessBlockStatisticsRequest struct {
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeWebLockProcessBlockStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockProcessBlockStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebLockProcessBlockStatisticsRequest) SetCurrentPage(v int32) *DescribeWebLockProcessBlockStatisticsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWebLockProcessBlockStatisticsRequest) SetPageSize(v int32) *DescribeWebLockProcessBlockStatisticsRequest {
	s.PageSize = &v
	return s
}

type DescribeWebLockProcessBlockStatisticsResponseBody struct {
	CurrentPage *int32                                                   `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	List        []*DescribeWebLockProcessBlockStatisticsResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageSize    *int32                                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWebLockProcessBlockStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockProcessBlockStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWebLockProcessBlockStatisticsResponseBody) SetCurrentPage(v int32) *DescribeWebLockProcessBlockStatisticsResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWebLockProcessBlockStatisticsResponseBody) SetList(v []*DescribeWebLockProcessBlockStatisticsResponseBodyList) *DescribeWebLockProcessBlockStatisticsResponseBody {
	s.List = v
	return s
}

func (s *DescribeWebLockProcessBlockStatisticsResponseBody) SetPageSize(v int32) *DescribeWebLockProcessBlockStatisticsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeWebLockProcessBlockStatisticsResponseBody) SetRequestId(v string) *DescribeWebLockProcessBlockStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWebLockProcessBlockStatisticsResponseBody) SetTotalCount(v int32) *DescribeWebLockProcessBlockStatisticsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWebLockProcessBlockStatisticsResponseBodyList struct {
	Count   *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	Process *string `json:"Process,omitempty" xml:"Process,omitempty"`
}

func (s DescribeWebLockProcessBlockStatisticsResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockProcessBlockStatisticsResponseBodyList) GoString() string {
	return s.String()
}

func (s *DescribeWebLockProcessBlockStatisticsResponseBodyList) SetCount(v int32) *DescribeWebLockProcessBlockStatisticsResponseBodyList {
	s.Count = &v
	return s
}

func (s *DescribeWebLockProcessBlockStatisticsResponseBodyList) SetProcess(v string) *DescribeWebLockProcessBlockStatisticsResponseBodyList {
	s.Process = &v
	return s
}

type DescribeWebLockProcessBlockStatisticsResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWebLockProcessBlockStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWebLockProcessBlockStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockProcessBlockStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebLockProcessBlockStatisticsResponse) SetHeaders(v map[string]*string) *DescribeWebLockProcessBlockStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebLockProcessBlockStatisticsResponse) SetStatusCode(v int32) *DescribeWebLockProcessBlockStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebLockProcessBlockStatisticsResponse) SetBody(v *DescribeWebLockProcessBlockStatisticsResponseBody) *DescribeWebLockProcessBlockStatisticsResponse {
	s.Body = v
	return s
}

type DescribeWebLockProcessListRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	Status      *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeWebLockProcessListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockProcessListRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebLockProcessListRequest) SetCurrentPage(v int32) *DescribeWebLockProcessListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWebLockProcessListRequest) SetPageSize(v int32) *DescribeWebLockProcessListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeWebLockProcessListRequest) SetProcessName(v string) *DescribeWebLockProcessListRequest {
	s.ProcessName = &v
	return s
}

func (s *DescribeWebLockProcessListRequest) SetStatus(v int32) *DescribeWebLockProcessListRequest {
	s.Status = &v
	return s
}

type DescribeWebLockProcessListResponseBody struct {
	CurrentPage *int32                                        `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	List        []*DescribeWebLockProcessListResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageSize    *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWebLockProcessListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockProcessListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWebLockProcessListResponseBody) SetCurrentPage(v int32) *DescribeWebLockProcessListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWebLockProcessListResponseBody) SetList(v []*DescribeWebLockProcessListResponseBodyList) *DescribeWebLockProcessListResponseBody {
	s.List = v
	return s
}

func (s *DescribeWebLockProcessListResponseBody) SetPageSize(v int32) *DescribeWebLockProcessListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeWebLockProcessListResponseBody) SetRequestId(v string) *DescribeWebLockProcessListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWebLockProcessListResponseBody) SetTotalCount(v int32) *DescribeWebLockProcessListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWebLockProcessListResponseBodyList struct {
	Count        *string `json:"Count,omitempty" xml:"Count,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InternetIp   *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	IntranetIp   *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	ProcessName  *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	ProcessPath  *string `json:"ProcessPath,omitempty" xml:"ProcessPath,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Uuid         *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeWebLockProcessListResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockProcessListResponseBodyList) GoString() string {
	return s.String()
}

func (s *DescribeWebLockProcessListResponseBodyList) SetCount(v string) *DescribeWebLockProcessListResponseBodyList {
	s.Count = &v
	return s
}

func (s *DescribeWebLockProcessListResponseBodyList) SetInstanceName(v string) *DescribeWebLockProcessListResponseBodyList {
	s.InstanceName = &v
	return s
}

func (s *DescribeWebLockProcessListResponseBodyList) SetInternetIp(v string) *DescribeWebLockProcessListResponseBodyList {
	s.InternetIp = &v
	return s
}

func (s *DescribeWebLockProcessListResponseBodyList) SetIntranetIp(v string) *DescribeWebLockProcessListResponseBodyList {
	s.IntranetIp = &v
	return s
}

func (s *DescribeWebLockProcessListResponseBodyList) SetProcessName(v string) *DescribeWebLockProcessListResponseBodyList {
	s.ProcessName = &v
	return s
}

func (s *DescribeWebLockProcessListResponseBodyList) SetProcessPath(v string) *DescribeWebLockProcessListResponseBodyList {
	s.ProcessPath = &v
	return s
}

func (s *DescribeWebLockProcessListResponseBodyList) SetStatus(v int32) *DescribeWebLockProcessListResponseBodyList {
	s.Status = &v
	return s
}

func (s *DescribeWebLockProcessListResponseBodyList) SetUuid(v string) *DescribeWebLockProcessListResponseBodyList {
	s.Uuid = &v
	return s
}

type DescribeWebLockProcessListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWebLockProcessListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWebLockProcessListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockProcessListResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebLockProcessListResponse) SetHeaders(v map[string]*string) *DescribeWebLockProcessListResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebLockProcessListResponse) SetStatusCode(v int32) *DescribeWebLockProcessListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebLockProcessListResponse) SetBody(v *DescribeWebLockProcessListResponseBody) *DescribeWebLockProcessListResponse {
	s.Body = v
	return s
}

type DescribeWebLockStatusRequest struct {
	From     *string `json:"From,omitempty" xml:"From,omitempty"`
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s DescribeWebLockStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebLockStatusRequest) SetFrom(v string) *DescribeWebLockStatusRequest {
	s.From = &v
	return s
}

func (s *DescribeWebLockStatusRequest) SetLang(v string) *DescribeWebLockStatusRequest {
	s.Lang = &v
	return s
}

func (s *DescribeWebLockStatusRequest) SetSourceIp(v string) *DescribeWebLockStatusRequest {
	s.SourceIp = &v
	return s
}

type DescribeWebLockStatusResponseBody struct {
	AuthCount  *int32  `json:"AuthCount,omitempty" xml:"AuthCount,omitempty"`
	BindCount  *int32  `json:"BindCount,omitempty" xml:"BindCount,omitempty"`
	BlockCount *int32  `json:"BlockCount,omitempty" xml:"BlockCount,omitempty"`
	DirCount   *int32  `json:"DirCount,omitempty" xml:"DirCount,omitempty"`
	ExpireTime *int64  `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	WhiteCount *int32  `json:"WhiteCount,omitempty" xml:"WhiteCount,omitempty"`
}

func (s DescribeWebLockStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWebLockStatusResponseBody) SetAuthCount(v int32) *DescribeWebLockStatusResponseBody {
	s.AuthCount = &v
	return s
}

func (s *DescribeWebLockStatusResponseBody) SetBindCount(v int32) *DescribeWebLockStatusResponseBody {
	s.BindCount = &v
	return s
}

func (s *DescribeWebLockStatusResponseBody) SetBlockCount(v int32) *DescribeWebLockStatusResponseBody {
	s.BlockCount = &v
	return s
}

func (s *DescribeWebLockStatusResponseBody) SetDirCount(v int32) *DescribeWebLockStatusResponseBody {
	s.DirCount = &v
	return s
}

func (s *DescribeWebLockStatusResponseBody) SetExpireTime(v int64) *DescribeWebLockStatusResponseBody {
	s.ExpireTime = &v
	return s
}

func (s *DescribeWebLockStatusResponseBody) SetRequestId(v string) *DescribeWebLockStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWebLockStatusResponseBody) SetWhiteCount(v int32) *DescribeWebLockStatusResponseBody {
	s.WhiteCount = &v
	return s
}

type DescribeWebLockStatusResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWebLockStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWebLockStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebLockStatusResponse) SetHeaders(v map[string]*string) *DescribeWebLockStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebLockStatusResponse) SetStatusCode(v int32) *DescribeWebLockStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebLockStatusResponse) SetBody(v *DescribeWebLockStatusResponseBody) *DescribeWebLockStatusResponse {
	s.Body = v
	return s
}

type DescribeWebLockTotalFileChangeCountResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int64  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWebLockTotalFileChangeCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockTotalFileChangeCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWebLockTotalFileChangeCountResponseBody) SetRequestId(v string) *DescribeWebLockTotalFileChangeCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWebLockTotalFileChangeCountResponseBody) SetTotalCount(v int64) *DescribeWebLockTotalFileChangeCountResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWebLockTotalFileChangeCountResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWebLockTotalFileChangeCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWebLockTotalFileChangeCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebLockTotalFileChangeCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebLockTotalFileChangeCountResponse) SetHeaders(v map[string]*string) *DescribeWebLockTotalFileChangeCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebLockTotalFileChangeCountResponse) SetStatusCode(v int32) *DescribeWebLockTotalFileChangeCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebLockTotalFileChangeCountResponse) SetBody(v *DescribeWebLockTotalFileChangeCountResponseBody) *DescribeWebLockTotalFileChangeCountResponse {
	s.Body = v
	return s
}

type DescribeWebPathRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeWebPathRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebPathRequest) GoString() string {
	return s.String()
}

func (s *DescribeWebPathRequest) SetCurrentPage(v int32) *DescribeWebPathRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWebPathRequest) SetPageSize(v int32) *DescribeWebPathRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeWebPathRequest) SetType(v string) *DescribeWebPathRequest {
	s.Type = &v
	return s
}

type DescribeWebPathResponseBody struct {
	ConfigList  []*DescribeWebPathResponseBodyConfigList `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" type:"Repeated"`
	Count       *int32                                   `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32                                   `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeWebPathResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebPathResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWebPathResponseBody) SetConfigList(v []*DescribeWebPathResponseBodyConfigList) *DescribeWebPathResponseBody {
	s.ConfigList = v
	return s
}

func (s *DescribeWebPathResponseBody) SetCount(v int32) *DescribeWebPathResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeWebPathResponseBody) SetCurrentPage(v int32) *DescribeWebPathResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeWebPathResponseBody) SetPageSize(v int32) *DescribeWebPathResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeWebPathResponseBody) SetRequestId(v string) *DescribeWebPathResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWebPathResponseBody) SetTotalCount(v int32) *DescribeWebPathResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeWebPathResponseBodyConfigList struct {
	TargetList  []*DescribeWebPathResponseBodyConfigListTargetList `json:"TargetList,omitempty" xml:"TargetList,omitempty" type:"Repeated"`
	WebPath     *string                                            `json:"WebPath,omitempty" xml:"WebPath,omitempty"`
	WebPathType *string                                            `json:"WebPathType,omitempty" xml:"WebPathType,omitempty"`
}

func (s DescribeWebPathResponseBodyConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebPathResponseBodyConfigList) GoString() string {
	return s.String()
}

func (s *DescribeWebPathResponseBodyConfigList) SetTargetList(v []*DescribeWebPathResponseBodyConfigListTargetList) *DescribeWebPathResponseBodyConfigList {
	s.TargetList = v
	return s
}

func (s *DescribeWebPathResponseBodyConfigList) SetWebPath(v string) *DescribeWebPathResponseBodyConfigList {
	s.WebPath = &v
	return s
}

func (s *DescribeWebPathResponseBodyConfigList) SetWebPathType(v string) *DescribeWebPathResponseBodyConfigList {
	s.WebPathType = &v
	return s
}

type DescribeWebPathResponseBodyConfigListTargetList struct {
	Target     *string `json:"Target,omitempty" xml:"Target,omitempty"`
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s DescribeWebPathResponseBodyConfigListTargetList) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebPathResponseBodyConfigListTargetList) GoString() string {
	return s.String()
}

func (s *DescribeWebPathResponseBodyConfigListTargetList) SetTarget(v string) *DescribeWebPathResponseBodyConfigListTargetList {
	s.Target = &v
	return s
}

func (s *DescribeWebPathResponseBodyConfigListTargetList) SetTargetType(v string) *DescribeWebPathResponseBodyConfigListTargetList {
	s.TargetType = &v
	return s
}

type DescribeWebPathResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeWebPathResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeWebPathResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWebPathResponse) GoString() string {
	return s.String()
}

func (s *DescribeWebPathResponse) SetHeaders(v map[string]*string) *DescribeWebPathResponse {
	s.Headers = v
	return s
}

func (s *DescribeWebPathResponse) SetStatusCode(v int32) *DescribeWebPathResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWebPathResponse) SetBody(v *DescribeWebPathResponseBody) *DescribeWebPathResponse {
	s.Body = v
	return s
}

type DisableBruteForceRecordRequest struct {
	BlockIp         *string `json:"BlockIp,omitempty" xml:"BlockIp,omitempty"`
	Bound           *string `json:"Bound,omitempty" xml:"Bound,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Port            *string `json:"Port,omitempty" xml:"Port,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Uuid            *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DisableBruteForceRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableBruteForceRecordRequest) GoString() string {
	return s.String()
}

func (s *DisableBruteForceRecordRequest) SetBlockIp(v string) *DisableBruteForceRecordRequest {
	s.BlockIp = &v
	return s
}

func (s *DisableBruteForceRecordRequest) SetBound(v string) *DisableBruteForceRecordRequest {
	s.Bound = &v
	return s
}

func (s *DisableBruteForceRecordRequest) SetId(v int64) *DisableBruteForceRecordRequest {
	s.Id = &v
	return s
}

func (s *DisableBruteForceRecordRequest) SetPort(v string) *DisableBruteForceRecordRequest {
	s.Port = &v
	return s
}

func (s *DisableBruteForceRecordRequest) SetResourceOwnerId(v int64) *DisableBruteForceRecordRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DisableBruteForceRecordRequest) SetUuid(v string) *DisableBruteForceRecordRequest {
	s.Uuid = &v
	return s
}

type DisableBruteForceRecordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableBruteForceRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableBruteForceRecordResponseBody) GoString() string {
	return s.String()
}

func (s *DisableBruteForceRecordResponseBody) SetRequestId(v string) *DisableBruteForceRecordResponseBody {
	s.RequestId = &v
	return s
}

type DisableBruteForceRecordResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisableBruteForceRecordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableBruteForceRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableBruteForceRecordResponse) GoString() string {
	return s.String()
}

func (s *DisableBruteForceRecordResponse) SetHeaders(v map[string]*string) *DisableBruteForceRecordResponse {
	s.Headers = v
	return s
}

func (s *DisableBruteForceRecordResponse) SetStatusCode(v int32) *DisableBruteForceRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableBruteForceRecordResponse) SetBody(v *DisableBruteForceRecordResponseBody) *DisableBruteForceRecordResponse {
	s.Body = v
	return s
}

type DisableCustomBlockRecordRequest struct {
	BlockIp         *string `json:"BlockIp,omitempty" xml:"BlockIp,omitempty"`
	Bound           *string `json:"Bound,omitempty" xml:"Bound,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DisableCustomBlockRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableCustomBlockRecordRequest) GoString() string {
	return s.String()
}

func (s *DisableCustomBlockRecordRequest) SetBlockIp(v string) *DisableCustomBlockRecordRequest {
	s.BlockIp = &v
	return s
}

func (s *DisableCustomBlockRecordRequest) SetBound(v string) *DisableCustomBlockRecordRequest {
	s.Bound = &v
	return s
}

func (s *DisableCustomBlockRecordRequest) SetResourceOwnerId(v int64) *DisableCustomBlockRecordRequest {
	s.ResourceOwnerId = &v
	return s
}

type DisableCustomBlockRecordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableCustomBlockRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableCustomBlockRecordResponseBody) GoString() string {
	return s.String()
}

func (s *DisableCustomBlockRecordResponseBody) SetRequestId(v string) *DisableCustomBlockRecordResponseBody {
	s.RequestId = &v
	return s
}

type DisableCustomBlockRecordResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisableCustomBlockRecordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableCustomBlockRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableCustomBlockRecordResponse) GoString() string {
	return s.String()
}

func (s *DisableCustomBlockRecordResponse) SetHeaders(v map[string]*string) *DisableCustomBlockRecordResponse {
	s.Headers = v
	return s
}

func (s *DisableCustomBlockRecordResponse) SetStatusCode(v int32) *DisableCustomBlockRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableCustomBlockRecordResponse) SetBody(v *DisableCustomBlockRecordResponseBody) *DisableCustomBlockRecordResponse {
	s.Body = v
	return s
}

type EnableBruteForceRecordRequest struct {
	BlockIp         *string `json:"BlockIp,omitempty" xml:"BlockIp,omitempty"`
	Bound           *string `json:"Bound,omitempty" xml:"Bound,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Port            *string `json:"Port,omitempty" xml:"Port,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Uuid            *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s EnableBruteForceRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableBruteForceRecordRequest) GoString() string {
	return s.String()
}

func (s *EnableBruteForceRecordRequest) SetBlockIp(v string) *EnableBruteForceRecordRequest {
	s.BlockIp = &v
	return s
}

func (s *EnableBruteForceRecordRequest) SetBound(v string) *EnableBruteForceRecordRequest {
	s.Bound = &v
	return s
}

func (s *EnableBruteForceRecordRequest) SetId(v int64) *EnableBruteForceRecordRequest {
	s.Id = &v
	return s
}

func (s *EnableBruteForceRecordRequest) SetPort(v string) *EnableBruteForceRecordRequest {
	s.Port = &v
	return s
}

func (s *EnableBruteForceRecordRequest) SetResourceOwnerId(v int64) *EnableBruteForceRecordRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *EnableBruteForceRecordRequest) SetUuid(v string) *EnableBruteForceRecordRequest {
	s.Uuid = &v
	return s
}

type EnableBruteForceRecordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableBruteForceRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableBruteForceRecordResponseBody) GoString() string {
	return s.String()
}

func (s *EnableBruteForceRecordResponseBody) SetRequestId(v string) *EnableBruteForceRecordResponseBody {
	s.RequestId = &v
	return s
}

type EnableBruteForceRecordResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EnableBruteForceRecordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableBruteForceRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableBruteForceRecordResponse) GoString() string {
	return s.String()
}

func (s *EnableBruteForceRecordResponse) SetHeaders(v map[string]*string) *EnableBruteForceRecordResponse {
	s.Headers = v
	return s
}

func (s *EnableBruteForceRecordResponse) SetStatusCode(v int32) *EnableBruteForceRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableBruteForceRecordResponse) SetBody(v *EnableBruteForceRecordResponseBody) *EnableBruteForceRecordResponse {
	s.Body = v
	return s
}

type EnableCustomBlockRecordRequest struct {
	BlockIp         *string `json:"BlockIp,omitempty" xml:"BlockIp,omitempty"`
	Bound           *string `json:"Bound,omitempty" xml:"Bound,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s EnableCustomBlockRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableCustomBlockRecordRequest) GoString() string {
	return s.String()
}

func (s *EnableCustomBlockRecordRequest) SetBlockIp(v string) *EnableCustomBlockRecordRequest {
	s.BlockIp = &v
	return s
}

func (s *EnableCustomBlockRecordRequest) SetBound(v string) *EnableCustomBlockRecordRequest {
	s.Bound = &v
	return s
}

func (s *EnableCustomBlockRecordRequest) SetResourceOwnerId(v int64) *EnableCustomBlockRecordRequest {
	s.ResourceOwnerId = &v
	return s
}

type EnableCustomBlockRecordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableCustomBlockRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableCustomBlockRecordResponseBody) GoString() string {
	return s.String()
}

func (s *EnableCustomBlockRecordResponseBody) SetRequestId(v string) *EnableCustomBlockRecordResponseBody {
	s.RequestId = &v
	return s
}

type EnableCustomBlockRecordResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EnableCustomBlockRecordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableCustomBlockRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableCustomBlockRecordResponse) GoString() string {
	return s.String()
}

func (s *EnableCustomBlockRecordResponse) SetHeaders(v map[string]*string) *EnableCustomBlockRecordResponse {
	s.Headers = v
	return s
}

func (s *EnableCustomBlockRecordResponse) SetStatusCode(v int32) *EnableCustomBlockRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableCustomBlockRecordResponse) SetBody(v *EnableCustomBlockRecordResponseBody) *EnableCustomBlockRecordResponse {
	s.Body = v
	return s
}

type ExecStrategyRequest struct {
	Lang       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	StrategyId *int32  `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
}

func (s ExecStrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecStrategyRequest) GoString() string {
	return s.String()
}

func (s *ExecStrategyRequest) SetLang(v string) *ExecStrategyRequest {
	s.Lang = &v
	return s
}

func (s *ExecStrategyRequest) SetStrategyId(v int32) *ExecStrategyRequest {
	s.StrategyId = &v
	return s
}

type ExecStrategyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExecStrategyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExecStrategyResponseBody) GoString() string {
	return s.String()
}

func (s *ExecStrategyResponseBody) SetRequestId(v string) *ExecStrategyResponseBody {
	s.RequestId = &v
	return s
}

type ExecStrategyResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ExecStrategyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExecStrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecStrategyResponse) GoString() string {
	return s.String()
}

func (s *ExecStrategyResponse) SetHeaders(v map[string]*string) *ExecStrategyResponse {
	s.Headers = v
	return s
}

func (s *ExecStrategyResponse) SetStatusCode(v int32) *ExecStrategyResponse {
	s.StatusCode = &v
	return s
}

func (s *ExecStrategyResponse) SetBody(v *ExecStrategyResponseBody) *ExecStrategyResponse {
	s.Body = v
	return s
}

type ExportRecordRequest struct {
	// The type of the check result list to export. Valid values:
	//
	// *   **assetInstance**: the list of servers displayed on the Host page
	// *   **user**: the list of fingerprints for accounts
	// *   **port**: the list of fingerprints for ports
	// *   **process**: the list of fingerprints for processes
	// *   **sca**: the list of fingerprints for middleware assets
	// *   **database**: the list of fingerprints for databases
	// *   **web**: the list of fingerprints for web services
	// *   **software**: the list of fingerprints for software assets
	// *   **cron**: the list of fingerprints for scheduled tasks
	// *   **autorun**: the list of fingerprints for startup items
	// *   **lkm**: the list of fingerprints for kernel modules
	// *   **webserver**: the list of fingerprints for websites
	// *   **imageVulExport**: the list of image system vulnerabilities
	// *   **imageBaseLineExport**: the list of baseline check results for images
	// *   **imageAffectedMaliciousExport**: the list of check results for malicious image samples
	// *   **baseline**: the list of check results for configuration assessment
	// *   **attack**: the list of alerts for attack analysis
	// *   **accessKey**: the list of alerts that are generated for AccessKey pair leaks
	ExportType *string `json:"ExportType,omitempty" xml:"ExportType,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The conditions that are used to filter check results.
	//
	// >  This operation is a common export operation for multiple features of Security Center. The available configuration fields of this parameter vary based on the features. We recommend that you do not specify this parameter when you call the operation. You can export an information list without specifying this parameter, and then filter data in the exported Excel file.
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
}

func (s ExportRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportRecordRequest) GoString() string {
	return s.String()
}

func (s *ExportRecordRequest) SetExportType(v string) *ExportRecordRequest {
	s.ExportType = &v
	return s
}

func (s *ExportRecordRequest) SetLang(v string) *ExportRecordRequest {
	s.Lang = &v
	return s
}

func (s *ExportRecordRequest) SetParams(v string) *ExportRecordRequest {
	s.Params = &v
	return s
}

type ExportRecordResponseBody struct {
	// The name of the exported file.
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The ID of the exported file.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExportRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportRecordResponseBody) GoString() string {
	return s.String()
}

func (s *ExportRecordResponseBody) SetFileName(v string) *ExportRecordResponseBody {
	s.FileName = &v
	return s
}

func (s *ExportRecordResponseBody) SetId(v int64) *ExportRecordResponseBody {
	s.Id = &v
	return s
}

func (s *ExportRecordResponseBody) SetRequestId(v string) *ExportRecordResponseBody {
	s.RequestId = &v
	return s
}

type ExportRecordResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ExportRecordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExportRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportRecordResponse) GoString() string {
	return s.String()
}

func (s *ExportRecordResponse) SetHeaders(v map[string]*string) *ExportRecordResponse {
	s.Headers = v
	return s
}

func (s *ExportRecordResponse) SetStatusCode(v int32) *ExportRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportRecordResponse) SetBody(v *ExportRecordResponseBody) *ExportRecordResponse {
	s.Body = v
	return s
}

type ExportSuspEventsRequest struct {
	AssetsTypeList      []*string `json:"AssetsTypeList,omitempty" xml:"AssetsTypeList,omitempty" type:"Repeated"`
	ClusterId           *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ContainerFieldName  *string   `json:"ContainerFieldName,omitempty" xml:"ContainerFieldName,omitempty"`
	ContainerFieldValue *string   `json:"ContainerFieldValue,omitempty" xml:"ContainerFieldValue,omitempty"`
	CurrentPage         *string   `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Dealed              *string   `json:"Dealed,omitempty" xml:"Dealed,omitempty"`
	From                *string   `json:"From,omitempty" xml:"From,omitempty"`
	Lang                *string   `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Levels              *string   `json:"Levels,omitempty" xml:"Levels,omitempty"`
	Name                *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	PageSize            *string   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ParentEventTypes    *string   `json:"ParentEventTypes,omitempty" xml:"ParentEventTypes,omitempty"`
	Remark              *string   `json:"Remark,omitempty" xml:"Remark,omitempty"`
	SourceIp            *string   `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	Status              *string   `json:"Status,omitempty" xml:"Status,omitempty"`
	TargetType          *string   `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	TimeEnd             *string   `json:"TimeEnd,omitempty" xml:"TimeEnd,omitempty"`
	TimeStart           *string   `json:"TimeStart,omitempty" xml:"TimeStart,omitempty"`
}

func (s ExportSuspEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportSuspEventsRequest) GoString() string {
	return s.String()
}

func (s *ExportSuspEventsRequest) SetAssetsTypeList(v []*string) *ExportSuspEventsRequest {
	s.AssetsTypeList = v
	return s
}

func (s *ExportSuspEventsRequest) SetClusterId(v string) *ExportSuspEventsRequest {
	s.ClusterId = &v
	return s
}

func (s *ExportSuspEventsRequest) SetContainerFieldName(v string) *ExportSuspEventsRequest {
	s.ContainerFieldName = &v
	return s
}

func (s *ExportSuspEventsRequest) SetContainerFieldValue(v string) *ExportSuspEventsRequest {
	s.ContainerFieldValue = &v
	return s
}

func (s *ExportSuspEventsRequest) SetCurrentPage(v string) *ExportSuspEventsRequest {
	s.CurrentPage = &v
	return s
}

func (s *ExportSuspEventsRequest) SetDealed(v string) *ExportSuspEventsRequest {
	s.Dealed = &v
	return s
}

func (s *ExportSuspEventsRequest) SetFrom(v string) *ExportSuspEventsRequest {
	s.From = &v
	return s
}

func (s *ExportSuspEventsRequest) SetLang(v string) *ExportSuspEventsRequest {
	s.Lang = &v
	return s
}

func (s *ExportSuspEventsRequest) SetLevels(v string) *ExportSuspEventsRequest {
	s.Levels = &v
	return s
}

func (s *ExportSuspEventsRequest) SetName(v string) *ExportSuspEventsRequest {
	s.Name = &v
	return s
}

func (s *ExportSuspEventsRequest) SetPageSize(v string) *ExportSuspEventsRequest {
	s.PageSize = &v
	return s
}

func (s *ExportSuspEventsRequest) SetParentEventTypes(v string) *ExportSuspEventsRequest {
	s.ParentEventTypes = &v
	return s
}

func (s *ExportSuspEventsRequest) SetRemark(v string) *ExportSuspEventsRequest {
	s.Remark = &v
	return s
}

func (s *ExportSuspEventsRequest) SetSourceIp(v string) *ExportSuspEventsRequest {
	s.SourceIp = &v
	return s
}

func (s *ExportSuspEventsRequest) SetStatus(v string) *ExportSuspEventsRequest {
	s.Status = &v
	return s
}

func (s *ExportSuspEventsRequest) SetTargetType(v string) *ExportSuspEventsRequest {
	s.TargetType = &v
	return s
}

func (s *ExportSuspEventsRequest) SetTimeEnd(v string) *ExportSuspEventsRequest {
	s.TimeEnd = &v
	return s
}

func (s *ExportSuspEventsRequest) SetTimeStart(v string) *ExportSuspEventsRequest {
	s.TimeStart = &v
	return s
}

type ExportSuspEventsResponseBody struct {
	FileName  *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	Id        *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExportSuspEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportSuspEventsResponseBody) GoString() string {
	return s.String()
}

func (s *ExportSuspEventsResponseBody) SetFileName(v string) *ExportSuspEventsResponseBody {
	s.FileName = &v
	return s
}

func (s *ExportSuspEventsResponseBody) SetId(v int32) *ExportSuspEventsResponseBody {
	s.Id = &v
	return s
}

func (s *ExportSuspEventsResponseBody) SetRequestId(v string) *ExportSuspEventsResponseBody {
	s.RequestId = &v
	return s
}

type ExportSuspEventsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ExportSuspEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExportSuspEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportSuspEventsResponse) GoString() string {
	return s.String()
}

func (s *ExportSuspEventsResponse) SetHeaders(v map[string]*string) *ExportSuspEventsResponse {
	s.Headers = v
	return s
}

func (s *ExportSuspEventsResponse) SetStatusCode(v int32) *ExportSuspEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportSuspEventsResponse) SetBody(v *ExportSuspEventsResponseBody) *ExportSuspEventsResponse {
	s.Body = v
	return s
}

type ExportVulRequest struct {
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The additional type of the vulnerabilities. You can specify this parameter when you query application vulnerabilities. If you set Type to app, you must specify this parameter. If you set Type to a different value, this parameter is invalid. Set the value to **sca**.
	//
	// >  If this parameter is set to **sca**, application vulnerabilities and the vulnerabilities that are detected based on software component analysis are queried. If you do not specify this parameter, only application vulnerabilities are queried.
	AttachTypes *string `json:"AttachTypes,omitempty" xml:"AttachTypes,omitempty"`
	// Specifies whether the vulnerabilities are fixed. Valid values:
	//
	// *   **y**: yes
	// *   **n**: no
	Dealed *string `json:"Dealed,omitempty" xml:"Dealed,omitempty"`
	// The server group ID of the server on which the vulnerabilities are detected.
	//
	// >  You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of server groups.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   zh: Chinese
	// *   en: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The priority to fix the vulnerabilities. Separate multiple priorities with commas (,). Valid values:
	//
	// *   **asap**: high
	// *   **later**: medium
	// *   **nntf**: low
	Necessity *string `json:"Necessity,omitempty" xml:"Necessity,omitempty"`
	// The tag that is used to search for the vulnerabilities. Valid values:
	//
	// *   Restart required
	// *   Remote exploitation
	// *   Exploit exists
	// *   Exploitable
	// *   Privilege escalation
	// *   Code execution
	SearchTags *string `json:"SearchTags,omitempty" xml:"SearchTags,omitempty"`
	// The type of the vulnerabilities that you want to export. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	// *   **cms**: Web-CMS vulnerability
	// *   **app**: application vulnerability
	// *   **emg**: urgent vulnerability
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The UUID of the server on which the vulnerabilities are detected. Separate multiple UUIDs with commas (,).
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
	// The ID of the virtual private cloud (VPC) in which the vulnerabilities are detected. Separate multiple IDs with commas (,).
	//
	// >  You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to query the IDs of VPCs.
	VpcInstanceIds *string `json:"VpcInstanceIds,omitempty" xml:"VpcInstanceIds,omitempty"`
}

func (s ExportVulRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportVulRequest) GoString() string {
	return s.String()
}

func (s *ExportVulRequest) SetAliasName(v string) *ExportVulRequest {
	s.AliasName = &v
	return s
}

func (s *ExportVulRequest) SetAttachTypes(v string) *ExportVulRequest {
	s.AttachTypes = &v
	return s
}

func (s *ExportVulRequest) SetDealed(v string) *ExportVulRequest {
	s.Dealed = &v
	return s
}

func (s *ExportVulRequest) SetGroupId(v string) *ExportVulRequest {
	s.GroupId = &v
	return s
}

func (s *ExportVulRequest) SetLang(v string) *ExportVulRequest {
	s.Lang = &v
	return s
}

func (s *ExportVulRequest) SetNecessity(v string) *ExportVulRequest {
	s.Necessity = &v
	return s
}

func (s *ExportVulRequest) SetSearchTags(v string) *ExportVulRequest {
	s.SearchTags = &v
	return s
}

func (s *ExportVulRequest) SetType(v string) *ExportVulRequest {
	s.Type = &v
	return s
}

func (s *ExportVulRequest) SetUuids(v string) *ExportVulRequest {
	s.Uuids = &v
	return s
}

func (s *ExportVulRequest) SetVpcInstanceIds(v string) *ExportVulRequest {
	s.VpcInstanceIds = &v
	return s
}

type ExportVulResponseBody struct {
	// The name of the exported file.
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The ID of the exported file.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExportVulResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportVulResponseBody) GoString() string {
	return s.String()
}

func (s *ExportVulResponseBody) SetFileName(v string) *ExportVulResponseBody {
	s.FileName = &v
	return s
}

func (s *ExportVulResponseBody) SetId(v int64) *ExportVulResponseBody {
	s.Id = &v
	return s
}

func (s *ExportVulResponseBody) SetRequestId(v string) *ExportVulResponseBody {
	s.RequestId = &v
	return s
}

type ExportVulResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ExportVulResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExportVulResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportVulResponse) GoString() string {
	return s.String()
}

func (s *ExportVulResponse) SetHeaders(v map[string]*string) *ExportVulResponse {
	s.Headers = v
	return s
}

func (s *ExportVulResponse) SetStatusCode(v int32) *ExportVulResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportVulResponse) SetBody(v *ExportVulResponseBody) *ExportVulResponse {
	s.Body = v
	return s
}

type ExportWarningRequest struct {
	// Specifies whether the baseline risks are handled. Valid values:
	//
	// *   **Y**: yes
	// *   **N**: no
	Dealed *string `json:"Dealed,omitempty" xml:"Dealed,omitempty"`
	// The type of the export task. Set the value to **hc_check_warning**, which indicates tasks to export baseline check results.
	ExportType *string `json:"ExportType,omitempty" xml:"ExportType,omitempty"`
	// The export method of the results for the weak password baseline check. Valid values:
	//
	// *   **0**: exports the check results after it is masked.
	// *   **1**: exports the check results in plaintext.
	IsCleartextPwd *int32 `json:"IsCleartextPwd,omitempty" xml:"IsCleartextPwd,omitempty"`
	// Specifies whether the baseline check results are aggregated and exported. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	IsSummaryExport *int32 `json:"IsSummaryExport,omitempty" xml:"IsSummaryExport,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The ID of the risk item in the baseline check results. Separate multiple IDs with commas (,).
	RiskIds *string `json:"RiskIds,omitempty" xml:"RiskIds,omitempty"`
	// The severity of the baseline check item. Separate multiple severities with commas (,). Valid values:
	//
	// *   **high**
	// *   **medium**
	// *   **low**
	RiskLevels *string `json:"RiskLevels,omitempty" xml:"RiskLevels,omitempty"`
	// The name of the baseline.
	RiskName *string `json:"RiskName,omitempty" xml:"RiskName,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The status of the check item in the baseline check results. Separate multiple statuses with commas (,). Valid values:
	//
	// *   **3**: passed
	// *   **1**: failed
	StatusList *string `json:"StatusList,omitempty" xml:"StatusList,omitempty"`
	// The ID of the baseline check policy.
	StrategyId *int64 `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	// The subtypes of the baselines based on which baseline checks are performed. Separate multiple subtypes with commas (,).
	//
	// >  You must set the value of this parameter to the value of the **TypeName** parameter that is contained in the **SubTypes** parameter. You can call the [DescribeRiskType](~~DescribeRiskType~~) operation to obtain the value of the TypeName parameter.
	SubTypeNames *string `json:"SubTypeNames,omitempty" xml:"SubTypeNames,omitempty"`
	// The type of the baseline based on which baseline checks are performed.
	//
	// >  You must set the value of this parameter to the value of the **TypeName** parameter that is returned by calling the [DescribeRiskType](~~DescribeRiskType~~) operation. If both the **TypeName** and **TypeNames** parameters are specified, only the **TypeName** parameter takes effect.
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
	// The types of the baselines based on which baseline checks are performed. Separate multiple types with commas (,).
	//
	// >  You must set the value of this parameter to the value of the **TypeName** parameter that is returned by calling the [DescribeRiskType](~~DescribeRiskType~~) operation. If both the **TypeName** and **TypeNames** parameters are specified, only the **TypeName** parameter takes effect.
	TypeNames *string `json:"TypeNames,omitempty" xml:"TypeNames,omitempty"`
	// The UUID of the server whose baseline check results you want to export. Separate multiple UUIDs with commas (,).
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s ExportWarningRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportWarningRequest) GoString() string {
	return s.String()
}

func (s *ExportWarningRequest) SetDealed(v string) *ExportWarningRequest {
	s.Dealed = &v
	return s
}

func (s *ExportWarningRequest) SetExportType(v string) *ExportWarningRequest {
	s.ExportType = &v
	return s
}

func (s *ExportWarningRequest) SetIsCleartextPwd(v int32) *ExportWarningRequest {
	s.IsCleartextPwd = &v
	return s
}

func (s *ExportWarningRequest) SetIsSummaryExport(v int32) *ExportWarningRequest {
	s.IsSummaryExport = &v
	return s
}

func (s *ExportWarningRequest) SetLang(v string) *ExportWarningRequest {
	s.Lang = &v
	return s
}

func (s *ExportWarningRequest) SetRiskIds(v string) *ExportWarningRequest {
	s.RiskIds = &v
	return s
}

func (s *ExportWarningRequest) SetRiskLevels(v string) *ExportWarningRequest {
	s.RiskLevels = &v
	return s
}

func (s *ExportWarningRequest) SetRiskName(v string) *ExportWarningRequest {
	s.RiskName = &v
	return s
}

func (s *ExportWarningRequest) SetSourceIp(v string) *ExportWarningRequest {
	s.SourceIp = &v
	return s
}

func (s *ExportWarningRequest) SetStatusList(v string) *ExportWarningRequest {
	s.StatusList = &v
	return s
}

func (s *ExportWarningRequest) SetStrategyId(v int64) *ExportWarningRequest {
	s.StrategyId = &v
	return s
}

func (s *ExportWarningRequest) SetSubTypeNames(v string) *ExportWarningRequest {
	s.SubTypeNames = &v
	return s
}

func (s *ExportWarningRequest) SetTypeName(v string) *ExportWarningRequest {
	s.TypeName = &v
	return s
}

func (s *ExportWarningRequest) SetTypeNames(v string) *ExportWarningRequest {
	s.TypeNames = &v
	return s
}

func (s *ExportWarningRequest) SetUuids(v string) *ExportWarningRequest {
	s.Uuids = &v
	return s
}

type ExportWarningResponseBody struct {
	// The name of the file that contains exported baseline check results.
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The ID of the task to export baseline check results.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExportWarningResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportWarningResponseBody) GoString() string {
	return s.String()
}

func (s *ExportWarningResponseBody) SetFileName(v string) *ExportWarningResponseBody {
	s.FileName = &v
	return s
}

func (s *ExportWarningResponseBody) SetId(v int64) *ExportWarningResponseBody {
	s.Id = &v
	return s
}

func (s *ExportWarningResponseBody) SetRequestId(v string) *ExportWarningResponseBody {
	s.RequestId = &v
	return s
}

type ExportWarningResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ExportWarningResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExportWarningResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportWarningResponse) GoString() string {
	return s.String()
}

func (s *ExportWarningResponse) SetHeaders(v map[string]*string) *ExportWarningResponse {
	s.Headers = v
	return s
}

func (s *ExportWarningResponse) SetStatusCode(v int32) *ExportWarningResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportWarningResponse) SetBody(v *ExportWarningResponseBody) *ExportWarningResponse {
	s.Body = v
	return s
}

type FindContainerNetworkConnectRequest struct {
	CriteriaType *string                                    `json:"CriteriaType,omitempty" xml:"CriteriaType,omitempty"`
	CurrentPage  *int64                                     `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DstNode      *FindContainerNetworkConnectRequestDstNode `json:"DstNode,omitempty" xml:"DstNode,omitempty" type:"Struct"`
	EndTime      *int64                                     `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize     *int64                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SrcNode      *FindContainerNetworkConnectRequestSrcNode `json:"SrcNode,omitempty" xml:"SrcNode,omitempty" type:"Struct"`
	StartTime    *int64                                     `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s FindContainerNetworkConnectRequest) String() string {
	return tea.Prettify(s)
}

func (s FindContainerNetworkConnectRequest) GoString() string {
	return s.String()
}

func (s *FindContainerNetworkConnectRequest) SetCriteriaType(v string) *FindContainerNetworkConnectRequest {
	s.CriteriaType = &v
	return s
}

func (s *FindContainerNetworkConnectRequest) SetCurrentPage(v int64) *FindContainerNetworkConnectRequest {
	s.CurrentPage = &v
	return s
}

func (s *FindContainerNetworkConnectRequest) SetDstNode(v *FindContainerNetworkConnectRequestDstNode) *FindContainerNetworkConnectRequest {
	s.DstNode = v
	return s
}

func (s *FindContainerNetworkConnectRequest) SetEndTime(v int64) *FindContainerNetworkConnectRequest {
	s.EndTime = &v
	return s
}

func (s *FindContainerNetworkConnectRequest) SetPageSize(v int64) *FindContainerNetworkConnectRequest {
	s.PageSize = &v
	return s
}

func (s *FindContainerNetworkConnectRequest) SetSrcNode(v *FindContainerNetworkConnectRequestSrcNode) *FindContainerNetworkConnectRequest {
	s.SrcNode = v
	return s
}

func (s *FindContainerNetworkConnectRequest) SetStartTime(v int64) *FindContainerNetworkConnectRequest {
	s.StartTime = &v
	return s
}

type FindContainerNetworkConnectRequestDstNode struct {
	AppName   *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ClusterId *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Namespace *string   `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	NodeIds   []*string `json:"NodeIds,omitempty" xml:"NodeIds,omitempty" type:"Repeated"`
	NodeType  *string   `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	PodName   *string   `json:"PodName,omitempty" xml:"PodName,omitempty"`
}

func (s FindContainerNetworkConnectRequestDstNode) String() string {
	return tea.Prettify(s)
}

func (s FindContainerNetworkConnectRequestDstNode) GoString() string {
	return s.String()
}

func (s *FindContainerNetworkConnectRequestDstNode) SetAppName(v string) *FindContainerNetworkConnectRequestDstNode {
	s.AppName = &v
	return s
}

func (s *FindContainerNetworkConnectRequestDstNode) SetClusterId(v string) *FindContainerNetworkConnectRequestDstNode {
	s.ClusterId = &v
	return s
}

func (s *FindContainerNetworkConnectRequestDstNode) SetNamespace(v string) *FindContainerNetworkConnectRequestDstNode {
	s.Namespace = &v
	return s
}

func (s *FindContainerNetworkConnectRequestDstNode) SetNodeIds(v []*string) *FindContainerNetworkConnectRequestDstNode {
	s.NodeIds = v
	return s
}

func (s *FindContainerNetworkConnectRequestDstNode) SetNodeType(v string) *FindContainerNetworkConnectRequestDstNode {
	s.NodeType = &v
	return s
}

func (s *FindContainerNetworkConnectRequestDstNode) SetPodName(v string) *FindContainerNetworkConnectRequestDstNode {
	s.PodName = &v
	return s
}

type FindContainerNetworkConnectRequestSrcNode struct {
	AppName   *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ClusterId *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Namespace *string   `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	NodeIds   []*string `json:"NodeIds,omitempty" xml:"NodeIds,omitempty" type:"Repeated"`
	NodeType  *string   `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	PodName   *string   `json:"PodName,omitempty" xml:"PodName,omitempty"`
}

func (s FindContainerNetworkConnectRequestSrcNode) String() string {
	return tea.Prettify(s)
}

func (s FindContainerNetworkConnectRequestSrcNode) GoString() string {
	return s.String()
}

func (s *FindContainerNetworkConnectRequestSrcNode) SetAppName(v string) *FindContainerNetworkConnectRequestSrcNode {
	s.AppName = &v
	return s
}

func (s *FindContainerNetworkConnectRequestSrcNode) SetClusterId(v string) *FindContainerNetworkConnectRequestSrcNode {
	s.ClusterId = &v
	return s
}

func (s *FindContainerNetworkConnectRequestSrcNode) SetNamespace(v string) *FindContainerNetworkConnectRequestSrcNode {
	s.Namespace = &v
	return s
}

func (s *FindContainerNetworkConnectRequestSrcNode) SetNodeIds(v []*string) *FindContainerNetworkConnectRequestSrcNode {
	s.NodeIds = v
	return s
}

func (s *FindContainerNetworkConnectRequestSrcNode) SetNodeType(v string) *FindContainerNetworkConnectRequestSrcNode {
	s.NodeType = &v
	return s
}

func (s *FindContainerNetworkConnectRequestSrcNode) SetPodName(v string) *FindContainerNetworkConnectRequestSrcNode {
	s.PodName = &v
	return s
}

type FindContainerNetworkConnectShrinkRequest struct {
	CriteriaType  *string `json:"CriteriaType,omitempty" xml:"CriteriaType,omitempty"`
	CurrentPage   *int64  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DstNodeShrink *string `json:"DstNode,omitempty" xml:"DstNode,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize      *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SrcNodeShrink *string `json:"SrcNode,omitempty" xml:"SrcNode,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s FindContainerNetworkConnectShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s FindContainerNetworkConnectShrinkRequest) GoString() string {
	return s.String()
}

func (s *FindContainerNetworkConnectShrinkRequest) SetCriteriaType(v string) *FindContainerNetworkConnectShrinkRequest {
	s.CriteriaType = &v
	return s
}

func (s *FindContainerNetworkConnectShrinkRequest) SetCurrentPage(v int64) *FindContainerNetworkConnectShrinkRequest {
	s.CurrentPage = &v
	return s
}

func (s *FindContainerNetworkConnectShrinkRequest) SetDstNodeShrink(v string) *FindContainerNetworkConnectShrinkRequest {
	s.DstNodeShrink = &v
	return s
}

func (s *FindContainerNetworkConnectShrinkRequest) SetEndTime(v int64) *FindContainerNetworkConnectShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *FindContainerNetworkConnectShrinkRequest) SetPageSize(v int64) *FindContainerNetworkConnectShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *FindContainerNetworkConnectShrinkRequest) SetSrcNodeShrink(v string) *FindContainerNetworkConnectShrinkRequest {
	s.SrcNodeShrink = &v
	return s
}

func (s *FindContainerNetworkConnectShrinkRequest) SetStartTime(v int64) *FindContainerNetworkConnectShrinkRequest {
	s.StartTime = &v
	return s
}

type FindContainerNetworkConnectResponseBody struct {
	Connects  []*FindContainerNetworkConnectResponseBodyConnects `json:"Connects,omitempty" xml:"Connects,omitempty" type:"Repeated"`
	PageInfo  *FindContainerNetworkConnectResponseBodyPageInfo   `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s FindContainerNetworkConnectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FindContainerNetworkConnectResponseBody) GoString() string {
	return s.String()
}

func (s *FindContainerNetworkConnectResponseBody) SetConnects(v []*FindContainerNetworkConnectResponseBodyConnects) *FindContainerNetworkConnectResponseBody {
	s.Connects = v
	return s
}

func (s *FindContainerNetworkConnectResponseBody) SetPageInfo(v *FindContainerNetworkConnectResponseBodyPageInfo) *FindContainerNetworkConnectResponseBody {
	s.PageInfo = v
	return s
}

func (s *FindContainerNetworkConnectResponseBody) SetRequestId(v string) *FindContainerNetworkConnectResponseBody {
	s.RequestId = &v
	return s
}

type FindContainerNetworkConnectResponseBodyConnects struct {
	DstContainer *FindContainerNetworkConnectResponseBodyConnectsDstContainer `json:"DstContainer,omitempty" xml:"DstContainer,omitempty" type:"Struct"`
	DstIp        *string                                                      `json:"DstIp,omitempty" xml:"DstIp,omitempty"`
	DstPort      *string                                                      `json:"DstPort,omitempty" xml:"DstPort,omitempty"`
	FirstTime    *int64                                                       `json:"FirstTime,omitempty" xml:"FirstTime,omitempty"`
	Id           *int64                                                       `json:"Id,omitempty" xml:"Id,omitempty"`
	LastTime     *int64                                                       `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	SrcContainer *FindContainerNetworkConnectResponseBodyConnectsSrcContainer `json:"SrcContainer,omitempty" xml:"SrcContainer,omitempty" type:"Struct"`
	SrcIp        *string                                                      `json:"SrcIp,omitempty" xml:"SrcIp,omitempty"`
	SrcPort      *string                                                      `json:"SrcPort,omitempty" xml:"SrcPort,omitempty"`
}

func (s FindContainerNetworkConnectResponseBodyConnects) String() string {
	return tea.Prettify(s)
}

func (s FindContainerNetworkConnectResponseBodyConnects) GoString() string {
	return s.String()
}

func (s *FindContainerNetworkConnectResponseBodyConnects) SetDstContainer(v *FindContainerNetworkConnectResponseBodyConnectsDstContainer) *FindContainerNetworkConnectResponseBodyConnects {
	s.DstContainer = v
	return s
}

func (s *FindContainerNetworkConnectResponseBodyConnects) SetDstIp(v string) *FindContainerNetworkConnectResponseBodyConnects {
	s.DstIp = &v
	return s
}

func (s *FindContainerNetworkConnectResponseBodyConnects) SetDstPort(v string) *FindContainerNetworkConnectResponseBodyConnects {
	s.DstPort = &v
	return s
}

func (s *FindContainerNetworkConnectResponseBodyConnects) SetFirstTime(v int64) *FindContainerNetworkConnectResponseBodyConnects {
	s.FirstTime = &v
	return s
}

func (s *FindContainerNetworkConnectResponseBodyConnects) SetId(v int64) *FindContainerNetworkConnectResponseBodyConnects {
	s.Id = &v
	return s
}

func (s *FindContainerNetworkConnectResponseBodyConnects) SetLastTime(v int64) *FindContainerNetworkConnectResponseBodyConnects {
	s.LastTime = &v
	return s
}

func (s *FindContainerNetworkConnectResponseBodyConnects) SetSrcContainer(v *FindContainerNetworkConnectResponseBodyConnectsSrcContainer) *FindContainerNetworkConnectResponseBodyConnects {
	s.SrcContainer = v
	return s
}

func (s *FindContainerNetworkConnectResponseBodyConnects) SetSrcIp(v string) *FindContainerNetworkConnectResponseBodyConnects {
	s.SrcIp = &v
	return s
}

func (s *FindContainerNetworkConnectResponseBodyConnects) SetSrcPort(v string) *FindContainerNetworkConnectResponseBodyConnects {
	s.SrcPort = &v
	return s
}

type FindContainerNetworkConnectResponseBodyConnectsDstContainer struct {
	ContainerId *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
}

func (s FindContainerNetworkConnectResponseBodyConnectsDstContainer) String() string {
	return tea.Prettify(s)
}

func (s FindContainerNetworkConnectResponseBodyConnectsDstContainer) GoString() string {
	return s.String()
}

func (s *FindContainerNetworkConnectResponseBodyConnectsDstContainer) SetContainerId(v string) *FindContainerNetworkConnectResponseBodyConnectsDstContainer {
	s.ContainerId = &v
	return s
}

type FindContainerNetworkConnectResponseBodyConnectsSrcContainer struct {
	ContainerId *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
}

func (s FindContainerNetworkConnectResponseBodyConnectsSrcContainer) String() string {
	return tea.Prettify(s)
}

func (s FindContainerNetworkConnectResponseBodyConnectsSrcContainer) GoString() string {
	return s.String()
}

func (s *FindContainerNetworkConnectResponseBodyConnectsSrcContainer) SetContainerId(v string) *FindContainerNetworkConnectResponseBodyConnectsSrcContainer {
	s.ContainerId = &v
	return s
}

type FindContainerNetworkConnectResponseBodyPageInfo struct {
	Count       *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int64 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s FindContainerNetworkConnectResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s FindContainerNetworkConnectResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *FindContainerNetworkConnectResponseBodyPageInfo) SetCount(v int64) *FindContainerNetworkConnectResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *FindContainerNetworkConnectResponseBodyPageInfo) SetCurrentPage(v int64) *FindContainerNetworkConnectResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *FindContainerNetworkConnectResponseBodyPageInfo) SetPageSize(v int64) *FindContainerNetworkConnectResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *FindContainerNetworkConnectResponseBodyPageInfo) SetTotalCount(v int64) *FindContainerNetworkConnectResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type FindContainerNetworkConnectResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FindContainerNetworkConnectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FindContainerNetworkConnectResponse) String() string {
	return tea.Prettify(s)
}

func (s FindContainerNetworkConnectResponse) GoString() string {
	return s.String()
}

func (s *FindContainerNetworkConnectResponse) SetHeaders(v map[string]*string) *FindContainerNetworkConnectResponse {
	s.Headers = v
	return s
}

func (s *FindContainerNetworkConnectResponse) SetStatusCode(v int32) *FindContainerNetworkConnectResponse {
	s.StatusCode = &v
	return s
}

func (s *FindContainerNetworkConnectResponse) SetBody(v *FindContainerNetworkConnectResponseBody) *FindContainerNetworkConnectResponse {
	s.Body = v
	return s
}

type FixCheckWarningsRequest struct {
	// The parameters for the baseline risk item that you want to fix.
	//
	// *   **checkId**: the ID of the check item that corresponds to the baseline risk item.
	//
	// *   **rules**: an array that consists of the rules applied to fixes.
	//
	//     *   **value**: specifies whether a fix method is selected. Valid values: **0** and **1**. The value 0 indicates that no fix method is selected and the value 1 indicates that a fix method is selected.
	//     *   **ruleId**: the ID of the fix method.
	//     *   **paramList**: an array that consists of the details about the fix method.\
	//         • **paramName**: the name of the fix method.\
	//         • **value**: the value of the fix method.
	CheckParams *string `json:"CheckParams,omitempty" xml:"CheckParams,omitempty"`
	// The language of the content within the request and response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The ID of the baseline risk item.
	//
	// >  To query specified baseline risk items and the check items of a specified server, you must provide the IDs of the baseline risk items. You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs.
	RiskId *int64 `json:"RiskId,omitempty" xml:"RiskId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The UUID of the asset for which you want to fix the baseline risk item. You can call the [DescribeWarningMachines](~~DescribeWarningMachines~~) operation to query the UUIDs of assets.
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s FixCheckWarningsRequest) String() string {
	return tea.Prettify(s)
}

func (s FixCheckWarningsRequest) GoString() string {
	return s.String()
}

func (s *FixCheckWarningsRequest) SetCheckParams(v string) *FixCheckWarningsRequest {
	s.CheckParams = &v
	return s
}

func (s *FixCheckWarningsRequest) SetLang(v string) *FixCheckWarningsRequest {
	s.Lang = &v
	return s
}

func (s *FixCheckWarningsRequest) SetRiskId(v int64) *FixCheckWarningsRequest {
	s.RiskId = &v
	return s
}

func (s *FixCheckWarningsRequest) SetSourceIp(v string) *FixCheckWarningsRequest {
	s.SourceIp = &v
	return s
}

func (s *FixCheckWarningsRequest) SetUuids(v string) *FixCheckWarningsRequest {
	s.Uuids = &v
	return s
}

type FixCheckWarningsResponseBody struct {
	// The ID of the baseline risk item that has been fixed by using the Batch Repair feature.
	BatchId *int64 `json:"BatchId,omitempty" xml:"BatchId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s FixCheckWarningsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FixCheckWarningsResponseBody) GoString() string {
	return s.String()
}

func (s *FixCheckWarningsResponseBody) SetBatchId(v int64) *FixCheckWarningsResponseBody {
	s.BatchId = &v
	return s
}

func (s *FixCheckWarningsResponseBody) SetRequestId(v string) *FixCheckWarningsResponseBody {
	s.RequestId = &v
	return s
}

type FixCheckWarningsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FixCheckWarningsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FixCheckWarningsResponse) String() string {
	return tea.Prettify(s)
}

func (s FixCheckWarningsResponse) GoString() string {
	return s.String()
}

func (s *FixCheckWarningsResponse) SetHeaders(v map[string]*string) *FixCheckWarningsResponse {
	s.Headers = v
	return s
}

func (s *FixCheckWarningsResponse) SetStatusCode(v int32) *FixCheckWarningsResponse {
	s.StatusCode = &v
	return s
}

func (s *FixCheckWarningsResponse) SetBody(v *FixCheckWarningsResponseBody) *FixCheckWarningsResponse {
	s.Body = v
	return s
}

type GenerateOnceTaskRequest struct {
	Param    *string `json:"Param,omitempty" xml:"Param,omitempty"`
	Source   *string `json:"Source,omitempty" xml:"Source,omitempty"`
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s GenerateOnceTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateOnceTaskRequest) GoString() string {
	return s.String()
}

func (s *GenerateOnceTaskRequest) SetParam(v string) *GenerateOnceTaskRequest {
	s.Param = &v
	return s
}

func (s *GenerateOnceTaskRequest) SetSource(v string) *GenerateOnceTaskRequest {
	s.Source = &v
	return s
}

func (s *GenerateOnceTaskRequest) SetTaskName(v string) *GenerateOnceTaskRequest {
	s.TaskName = &v
	return s
}

func (s *GenerateOnceTaskRequest) SetTaskType(v string) *GenerateOnceTaskRequest {
	s.TaskType = &v
	return s
}

type GenerateOnceTaskResponseBody struct {
	CanCreate   *bool   `json:"CanCreate,omitempty" xml:"CanCreate,omitempty"`
	CollectTime *int64  `json:"CollectTime,omitempty" xml:"CollectTime,omitempty"`
	FinishCount *int32  `json:"FinishCount,omitempty" xml:"FinishCount,omitempty"`
	LastTask    *string `json:"LastTask,omitempty" xml:"LastTask,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TotalCount  *int32  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GenerateOnceTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateOnceTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateOnceTaskResponseBody) SetCanCreate(v bool) *GenerateOnceTaskResponseBody {
	s.CanCreate = &v
	return s
}

func (s *GenerateOnceTaskResponseBody) SetCollectTime(v int64) *GenerateOnceTaskResponseBody {
	s.CollectTime = &v
	return s
}

func (s *GenerateOnceTaskResponseBody) SetFinishCount(v int32) *GenerateOnceTaskResponseBody {
	s.FinishCount = &v
	return s
}

func (s *GenerateOnceTaskResponseBody) SetLastTask(v string) *GenerateOnceTaskResponseBody {
	s.LastTask = &v
	return s
}

func (s *GenerateOnceTaskResponseBody) SetRequestId(v string) *GenerateOnceTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateOnceTaskResponseBody) SetTaskId(v string) *GenerateOnceTaskResponseBody {
	s.TaskId = &v
	return s
}

func (s *GenerateOnceTaskResponseBody) SetTotalCount(v int32) *GenerateOnceTaskResponseBody {
	s.TotalCount = &v
	return s
}

type GenerateOnceTaskResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GenerateOnceTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GenerateOnceTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateOnceTaskResponse) GoString() string {
	return s.String()
}

func (s *GenerateOnceTaskResponse) SetHeaders(v map[string]*string) *GenerateOnceTaskResponse {
	s.Headers = v
	return s
}

func (s *GenerateOnceTaskResponse) SetStatusCode(v int32) *GenerateOnceTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateOnceTaskResponse) SetBody(v *GenerateOnceTaskResponseBody) *GenerateOnceTaskResponse {
	s.Body = v
	return s
}

type GetAlarmMachineCountRequest struct {
	From *string `json:"From,omitempty" xml:"From,omitempty"`
}

func (s GetAlarmMachineCountRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlarmMachineCountRequest) GoString() string {
	return s.String()
}

func (s *GetAlarmMachineCountRequest) SetFrom(v string) *GetAlarmMachineCountRequest {
	s.From = &v
	return s
}

type GetAlarmMachineCountResponseBody struct {
	Data      *GetAlarmMachineCountResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAlarmMachineCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAlarmMachineCountResponseBody) GoString() string {
	return s.String()
}

func (s *GetAlarmMachineCountResponseBody) SetData(v *GetAlarmMachineCountResponseBodyData) *GetAlarmMachineCountResponseBody {
	s.Data = v
	return s
}

func (s *GetAlarmMachineCountResponseBody) SetRequestId(v string) *GetAlarmMachineCountResponseBody {
	s.RequestId = &v
	return s
}

type GetAlarmMachineCountResponseBodyData struct {
	MachineCount *int32 `json:"MachineCount,omitempty" xml:"MachineCount,omitempty"`
}

func (s GetAlarmMachineCountResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAlarmMachineCountResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAlarmMachineCountResponseBodyData) SetMachineCount(v int32) *GetAlarmMachineCountResponseBodyData {
	s.MachineCount = &v
	return s
}

type GetAlarmMachineCountResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAlarmMachineCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAlarmMachineCountResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlarmMachineCountResponse) GoString() string {
	return s.String()
}

func (s *GetAlarmMachineCountResponse) SetHeaders(v map[string]*string) *GetAlarmMachineCountResponse {
	s.Headers = v
	return s
}

func (s *GetAlarmMachineCountResponse) SetStatusCode(v int32) *GetAlarmMachineCountResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAlarmMachineCountResponse) SetBody(v *GetAlarmMachineCountResponseBody) *GetAlarmMachineCountResponse {
	s.Body = v
	return s
}

type GetAppNetworkRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	EndTime   *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetAppNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppNetworkRequest) GoString() string {
	return s.String()
}

func (s *GetAppNetworkRequest) SetClusterId(v string) *GetAppNetworkRequest {
	s.ClusterId = &v
	return s
}

func (s *GetAppNetworkRequest) SetEndTime(v int64) *GetAppNetworkRequest {
	s.EndTime = &v
	return s
}

func (s *GetAppNetworkRequest) SetStartTime(v int64) *GetAppNetworkRequest {
	s.StartTime = &v
	return s
}

type GetAppNetworkResponseBody struct {
	AppNetwork *GetAppNetworkResponseBodyAppNetwork `json:"AppNetwork,omitempty" xml:"AppNetwork,omitempty" type:"Struct"`
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAppNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAppNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *GetAppNetworkResponseBody) SetAppNetwork(v *GetAppNetworkResponseBodyAppNetwork) *GetAppNetworkResponseBody {
	s.AppNetwork = v
	return s
}

func (s *GetAppNetworkResponseBody) SetRequestId(v string) *GetAppNetworkResponseBody {
	s.RequestId = &v
	return s
}

type GetAppNetworkResponseBodyAppNetwork struct {
	Edge      []*GetAppNetworkResponseBodyAppNetworkEdge      `json:"Edge,omitempty" xml:"Edge,omitempty" type:"Repeated"`
	Namespace []*GetAppNetworkResponseBodyAppNetworkNamespace `json:"Namespace,omitempty" xml:"Namespace,omitempty" type:"Repeated"`
	Node      []*GetAppNetworkResponseBodyAppNetworkNode      `json:"Node,omitempty" xml:"Node,omitempty" type:"Repeated"`
}

func (s GetAppNetworkResponseBodyAppNetwork) String() string {
	return tea.Prettify(s)
}

func (s GetAppNetworkResponseBodyAppNetwork) GoString() string {
	return s.String()
}

func (s *GetAppNetworkResponseBodyAppNetwork) SetEdge(v []*GetAppNetworkResponseBodyAppNetworkEdge) *GetAppNetworkResponseBodyAppNetwork {
	s.Edge = v
	return s
}

func (s *GetAppNetworkResponseBodyAppNetwork) SetNamespace(v []*GetAppNetworkResponseBodyAppNetworkNamespace) *GetAppNetworkResponseBodyAppNetwork {
	s.Namespace = v
	return s
}

func (s *GetAppNetworkResponseBodyAppNetwork) SetNode(v []*GetAppNetworkResponseBodyAppNetworkNode) *GetAppNetworkResponseBodyAppNetwork {
	s.Node = v
	return s
}

type GetAppNetworkResponseBodyAppNetworkEdge struct {
	DstNodeId   *string `json:"DstNodeId,omitempty" xml:"DstNodeId,omitempty"`
	DstNodeType *string `json:"DstNodeType,omitempty" xml:"DstNodeType,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Port        *string `json:"Port,omitempty" xml:"Port,omitempty"`
	SrcNodeId   *string `json:"SrcNodeId,omitempty" xml:"SrcNodeId,omitempty"`
	SrcNodeType *string `json:"SrcNodeType,omitempty" xml:"SrcNodeType,omitempty"`
}

func (s GetAppNetworkResponseBodyAppNetworkEdge) String() string {
	return tea.Prettify(s)
}

func (s GetAppNetworkResponseBodyAppNetworkEdge) GoString() string {
	return s.String()
}

func (s *GetAppNetworkResponseBodyAppNetworkEdge) SetDstNodeId(v string) *GetAppNetworkResponseBodyAppNetworkEdge {
	s.DstNodeId = &v
	return s
}

func (s *GetAppNetworkResponseBodyAppNetworkEdge) SetDstNodeType(v string) *GetAppNetworkResponseBodyAppNetworkEdge {
	s.DstNodeType = &v
	return s
}

func (s *GetAppNetworkResponseBodyAppNetworkEdge) SetId(v string) *GetAppNetworkResponseBodyAppNetworkEdge {
	s.Id = &v
	return s
}

func (s *GetAppNetworkResponseBodyAppNetworkEdge) SetPort(v string) *GetAppNetworkResponseBodyAppNetworkEdge {
	s.Port = &v
	return s
}

func (s *GetAppNetworkResponseBodyAppNetworkEdge) SetSrcNodeId(v string) *GetAppNetworkResponseBodyAppNetworkEdge {
	s.SrcNodeId = &v
	return s
}

func (s *GetAppNetworkResponseBodyAppNetworkEdge) SetSrcNodeType(v string) *GetAppNetworkResponseBodyAppNetworkEdge {
	s.SrcNodeType = &v
	return s
}

type GetAppNetworkResponseBodyAppNetworkNamespace struct {
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetAppNetworkResponseBodyAppNetworkNamespace) String() string {
	return tea.Prettify(s)
}

func (s GetAppNetworkResponseBodyAppNetworkNamespace) GoString() string {
	return s.String()
}

func (s *GetAppNetworkResponseBodyAppNetworkNamespace) SetId(v string) *GetAppNetworkResponseBodyAppNetworkNamespace {
	s.Id = &v
	return s
}

func (s *GetAppNetworkResponseBodyAppNetworkNamespace) SetName(v string) *GetAppNetworkResponseBodyAppNetworkNamespace {
	s.Name = &v
	return s
}

type GetAppNetworkResponseBodyAppNetworkNode struct {
	ContainerIds []*string `json:"ContainerIds,omitempty" xml:"ContainerIds,omitempty" type:"Repeated"`
	Id           *string   `json:"Id,omitempty" xml:"Id,omitempty"`
	Name         *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	NamespaceId  *string   `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
	RiskLevel    *string   `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	Type         *string   `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetAppNetworkResponseBodyAppNetworkNode) String() string {
	return tea.Prettify(s)
}

func (s GetAppNetworkResponseBodyAppNetworkNode) GoString() string {
	return s.String()
}

func (s *GetAppNetworkResponseBodyAppNetworkNode) SetContainerIds(v []*string) *GetAppNetworkResponseBodyAppNetworkNode {
	s.ContainerIds = v
	return s
}

func (s *GetAppNetworkResponseBodyAppNetworkNode) SetId(v string) *GetAppNetworkResponseBodyAppNetworkNode {
	s.Id = &v
	return s
}

func (s *GetAppNetworkResponseBodyAppNetworkNode) SetName(v string) *GetAppNetworkResponseBodyAppNetworkNode {
	s.Name = &v
	return s
}

func (s *GetAppNetworkResponseBodyAppNetworkNode) SetNamespaceId(v string) *GetAppNetworkResponseBodyAppNetworkNode {
	s.NamespaceId = &v
	return s
}

func (s *GetAppNetworkResponseBodyAppNetworkNode) SetRiskLevel(v string) *GetAppNetworkResponseBodyAppNetworkNode {
	s.RiskLevel = &v
	return s
}

func (s *GetAppNetworkResponseBodyAppNetworkNode) SetType(v string) *GetAppNetworkResponseBodyAppNetworkNode {
	s.Type = &v
	return s
}

type GetAppNetworkResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAppNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAppNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppNetworkResponse) GoString() string {
	return s.String()
}

func (s *GetAppNetworkResponse) SetHeaders(v map[string]*string) *GetAppNetworkResponse {
	s.Headers = v
	return s
}

func (s *GetAppNetworkResponse) SetStatusCode(v int32) *GetAppNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAppNetworkResponse) SetBody(v *GetAppNetworkResponseBody) *GetAppNetworkResponse {
	s.Body = v
	return s
}

type GetAssetsPropertyDetailRequest struct {
	Biz                *string                                             `json:"Biz,omitempty" xml:"Biz,omitempty"`
	CurrentPage        *int32                                              `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ItemName           *string                                             `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	Lang               *string                                             `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize           *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Remark             *string                                             `json:"Remark,omitempty" xml:"Remark,omitempty"`
	SearchCriteriaList []*GetAssetsPropertyDetailRequestSearchCriteriaList `json:"SearchCriteriaList,omitempty" xml:"SearchCriteriaList,omitempty" type:"Repeated"`
	Uuid               *string                                             `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s GetAssetsPropertyDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAssetsPropertyDetailRequest) GoString() string {
	return s.String()
}

func (s *GetAssetsPropertyDetailRequest) SetBiz(v string) *GetAssetsPropertyDetailRequest {
	s.Biz = &v
	return s
}

func (s *GetAssetsPropertyDetailRequest) SetCurrentPage(v int32) *GetAssetsPropertyDetailRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetAssetsPropertyDetailRequest) SetItemName(v string) *GetAssetsPropertyDetailRequest {
	s.ItemName = &v
	return s
}

func (s *GetAssetsPropertyDetailRequest) SetLang(v string) *GetAssetsPropertyDetailRequest {
	s.Lang = &v
	return s
}

func (s *GetAssetsPropertyDetailRequest) SetPageSize(v int32) *GetAssetsPropertyDetailRequest {
	s.PageSize = &v
	return s
}

func (s *GetAssetsPropertyDetailRequest) SetRemark(v string) *GetAssetsPropertyDetailRequest {
	s.Remark = &v
	return s
}

func (s *GetAssetsPropertyDetailRequest) SetSearchCriteriaList(v []*GetAssetsPropertyDetailRequestSearchCriteriaList) *GetAssetsPropertyDetailRequest {
	s.SearchCriteriaList = v
	return s
}

func (s *GetAssetsPropertyDetailRequest) SetUuid(v string) *GetAssetsPropertyDetailRequest {
	s.Uuid = &v
	return s
}

type GetAssetsPropertyDetailRequestSearchCriteriaList struct {
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetAssetsPropertyDetailRequestSearchCriteriaList) String() string {
	return tea.Prettify(s)
}

func (s GetAssetsPropertyDetailRequestSearchCriteriaList) GoString() string {
	return s.String()
}

func (s *GetAssetsPropertyDetailRequestSearchCriteriaList) SetName(v string) *GetAssetsPropertyDetailRequestSearchCriteriaList {
	s.Name = &v
	return s
}

func (s *GetAssetsPropertyDetailRequestSearchCriteriaList) SetValue(v string) *GetAssetsPropertyDetailRequestSearchCriteriaList {
	s.Value = &v
	return s
}

type GetAssetsPropertyDetailResponseBody struct {
	PageInfo  *GetAssetsPropertyDetailResponseBodyPageInfo    `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	Propertys []*GetAssetsPropertyDetailResponseBodyPropertys `json:"Propertys,omitempty" xml:"Propertys,omitempty" type:"Repeated"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAssetsPropertyDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAssetsPropertyDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetAssetsPropertyDetailResponseBody) SetPageInfo(v *GetAssetsPropertyDetailResponseBodyPageInfo) *GetAssetsPropertyDetailResponseBody {
	s.PageInfo = v
	return s
}

func (s *GetAssetsPropertyDetailResponseBody) SetPropertys(v []*GetAssetsPropertyDetailResponseBodyPropertys) *GetAssetsPropertyDetailResponseBody {
	s.Propertys = v
	return s
}

func (s *GetAssetsPropertyDetailResponseBody) SetRequestId(v string) *GetAssetsPropertyDetailResponseBody {
	s.RequestId = &v
	return s
}

type GetAssetsPropertyDetailResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetAssetsPropertyDetailResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s GetAssetsPropertyDetailResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *GetAssetsPropertyDetailResponseBodyPageInfo) SetCount(v int32) *GetAssetsPropertyDetailResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPageInfo) SetCurrentPage(v int32) *GetAssetsPropertyDetailResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPageInfo) SetPageSize(v int32) *GetAssetsPropertyDetailResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPageInfo) SetTotalCount(v int32) *GetAssetsPropertyDetailResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type GetAssetsPropertyDetailResponseBodyPropertys struct {
	ContainerName   *string `json:"ContainerName,omitempty" xml:"ContainerName,omitempty"`
	CreateTimestamp *int64  `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	Domain          *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Filepath        *string `json:"Filepath,omitempty" xml:"Filepath,omitempty"`
	ImageName       *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName    *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InternetIp      *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	IntranetIp      *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	Ip              *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	ListenProtocol  *string `json:"ListenProtocol,omitempty" xml:"ListenProtocol,omitempty"`
	ModuleName      *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
	Path            *string `json:"Path,omitempty" xml:"Path,omitempty"`
	PathMode        *string `json:"PathMode,omitempty" xml:"PathMode,omitempty"`
	Pid             *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	Port            *string `json:"Port,omitempty" xml:"Port,omitempty"`
	ProcessStarted  *int64  `json:"ProcessStarted,omitempty" xml:"ProcessStarted,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ServerType      *string `json:"ServerType,omitempty" xml:"ServerType,omitempty"`
	Size            *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	UsedByCount     *int32  `json:"UsedByCount,omitempty" xml:"UsedByCount,omitempty"`
	User            *string `json:"User,omitempty" xml:"User,omitempty"`
	Uuid            *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	WebPath         *string `json:"WebPath,omitempty" xml:"WebPath,omitempty"`
}

func (s GetAssetsPropertyDetailResponseBodyPropertys) String() string {
	return tea.Prettify(s)
}

func (s GetAssetsPropertyDetailResponseBodyPropertys) GoString() string {
	return s.String()
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetContainerName(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.ContainerName = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetCreateTimestamp(v int64) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.CreateTimestamp = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetDomain(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.Domain = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetFilepath(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.Filepath = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetImageName(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.ImageName = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetInstanceId(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.InstanceId = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetInstanceName(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.InstanceName = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetInternetIp(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.InternetIp = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetIntranetIp(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.IntranetIp = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetIp(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.Ip = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetListenProtocol(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.ListenProtocol = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetModuleName(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.ModuleName = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetPath(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.Path = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetPathMode(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.PathMode = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetPid(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.Pid = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetPort(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.Port = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetProcessStarted(v int64) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.ProcessStarted = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetRegionId(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.RegionId = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetServerType(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.ServerType = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetSize(v int32) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.Size = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetUsedByCount(v int32) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.UsedByCount = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetUser(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.User = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetUuid(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.Uuid = &v
	return s
}

func (s *GetAssetsPropertyDetailResponseBodyPropertys) SetWebPath(v string) *GetAssetsPropertyDetailResponseBodyPropertys {
	s.WebPath = &v
	return s
}

type GetAssetsPropertyDetailResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAssetsPropertyDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAssetsPropertyDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAssetsPropertyDetailResponse) GoString() string {
	return s.String()
}

func (s *GetAssetsPropertyDetailResponse) SetHeaders(v map[string]*string) *GetAssetsPropertyDetailResponse {
	s.Headers = v
	return s
}

func (s *GetAssetsPropertyDetailResponse) SetStatusCode(v int32) *GetAssetsPropertyDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAssetsPropertyDetailResponse) SetBody(v *GetAssetsPropertyDetailResponseBody) *GetAssetsPropertyDetailResponse {
	s.Body = v
	return s
}

type GetAssetsPropertyItemRequest struct {
	Biz         *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ForceFlush  *bool   `json:"ForceFlush,omitempty" xml:"ForceFlush,omitempty"`
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchInfo  *string `json:"SearchInfo,omitempty" xml:"SearchInfo,omitempty"`
	SearchItem  *string `json:"SearchItem,omitempty" xml:"SearchItem,omitempty"`
}

func (s GetAssetsPropertyItemRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAssetsPropertyItemRequest) GoString() string {
	return s.String()
}

func (s *GetAssetsPropertyItemRequest) SetBiz(v string) *GetAssetsPropertyItemRequest {
	s.Biz = &v
	return s
}

func (s *GetAssetsPropertyItemRequest) SetCurrentPage(v int32) *GetAssetsPropertyItemRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetAssetsPropertyItemRequest) SetForceFlush(v bool) *GetAssetsPropertyItemRequest {
	s.ForceFlush = &v
	return s
}

func (s *GetAssetsPropertyItemRequest) SetLang(v string) *GetAssetsPropertyItemRequest {
	s.Lang = &v
	return s
}

func (s *GetAssetsPropertyItemRequest) SetPageSize(v int32) *GetAssetsPropertyItemRequest {
	s.PageSize = &v
	return s
}

func (s *GetAssetsPropertyItemRequest) SetSearchInfo(v string) *GetAssetsPropertyItemRequest {
	s.SearchInfo = &v
	return s
}

func (s *GetAssetsPropertyItemRequest) SetSearchItem(v string) *GetAssetsPropertyItemRequest {
	s.SearchItem = &v
	return s
}

type GetAssetsPropertyItemResponseBody struct {
	PageInfo      *GetAssetsPropertyItemResponseBodyPageInfo        `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	PropertyItems []*GetAssetsPropertyItemResponseBodyPropertyItems `json:"PropertyItems,omitempty" xml:"PropertyItems,omitempty" type:"Repeated"`
	RequestId     *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAssetsPropertyItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAssetsPropertyItemResponseBody) GoString() string {
	return s.String()
}

func (s *GetAssetsPropertyItemResponseBody) SetPageInfo(v *GetAssetsPropertyItemResponseBodyPageInfo) *GetAssetsPropertyItemResponseBody {
	s.PageInfo = v
	return s
}

func (s *GetAssetsPropertyItemResponseBody) SetPropertyItems(v []*GetAssetsPropertyItemResponseBodyPropertyItems) *GetAssetsPropertyItemResponseBody {
	s.PropertyItems = v
	return s
}

func (s *GetAssetsPropertyItemResponseBody) SetRequestId(v string) *GetAssetsPropertyItemResponseBody {
	s.RequestId = &v
	return s
}

type GetAssetsPropertyItemResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetAssetsPropertyItemResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s GetAssetsPropertyItemResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *GetAssetsPropertyItemResponseBodyPageInfo) SetCount(v int32) *GetAssetsPropertyItemResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *GetAssetsPropertyItemResponseBodyPageInfo) SetCurrentPage(v int32) *GetAssetsPropertyItemResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *GetAssetsPropertyItemResponseBodyPageInfo) SetPageSize(v int32) *GetAssetsPropertyItemResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *GetAssetsPropertyItemResponseBodyPageInfo) SetTotalCount(v int32) *GetAssetsPropertyItemResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type GetAssetsPropertyItemResponseBodyPropertyItems struct {
	Count      *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	Domain     *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	ModuleName *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
	Path       *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s GetAssetsPropertyItemResponseBodyPropertyItems) String() string {
	return tea.Prettify(s)
}

func (s GetAssetsPropertyItemResponseBodyPropertyItems) GoString() string {
	return s.String()
}

func (s *GetAssetsPropertyItemResponseBodyPropertyItems) SetCount(v int32) *GetAssetsPropertyItemResponseBodyPropertyItems {
	s.Count = &v
	return s
}

func (s *GetAssetsPropertyItemResponseBodyPropertyItems) SetDomain(v string) *GetAssetsPropertyItemResponseBodyPropertyItems {
	s.Domain = &v
	return s
}

func (s *GetAssetsPropertyItemResponseBodyPropertyItems) SetModuleName(v string) *GetAssetsPropertyItemResponseBodyPropertyItems {
	s.ModuleName = &v
	return s
}

func (s *GetAssetsPropertyItemResponseBodyPropertyItems) SetPath(v string) *GetAssetsPropertyItemResponseBodyPropertyItems {
	s.Path = &v
	return s
}

type GetAssetsPropertyItemResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAssetsPropertyItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAssetsPropertyItemResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAssetsPropertyItemResponse) GoString() string {
	return s.String()
}

func (s *GetAssetsPropertyItemResponse) SetHeaders(v map[string]*string) *GetAssetsPropertyItemResponse {
	s.Headers = v
	return s
}

func (s *GetAssetsPropertyItemResponse) SetStatusCode(v int32) *GetAssetsPropertyItemResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAssetsPropertyItemResponse) SetBody(v *GetAssetsPropertyItemResponseBody) *GetAssetsPropertyItemResponse {
	s.Body = v
	return s
}

type GetBackupStorageCountResponseBody struct {
	// The details about the anti-ransomware capacity.
	BackupStorageCount *GetBackupStorageCountResponseBodyBackupStorageCount `json:"BackupStorageCount,omitempty" xml:"BackupStorageCount,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetBackupStorageCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBackupStorageCountResponseBody) GoString() string {
	return s.String()
}

func (s *GetBackupStorageCountResponseBody) SetBackupStorageCount(v *GetBackupStorageCountResponseBodyBackupStorageCount) *GetBackupStorageCountResponseBody {
	s.BackupStorageCount = v
	return s
}

func (s *GetBackupStorageCountResponseBody) SetRequestId(v string) *GetBackupStorageCountResponseBody {
	s.RequestId = &v
	return s
}

type GetBackupStorageCountResponseBodyBackupStorageCount struct {
	// The anti-ransomware capacity that you purchased. Unit: bytes.
	BuyStorageByte *int64 `json:"BuyStorageByte,omitempty" xml:"BuyStorageByte,omitempty"`
	// The storage capacity that is occupied by the backup data of your servers. Unit: bytes.
	EcsUsageStorageByte *int64 `json:"EcsUsageStorageByte,omitempty" xml:"EcsUsageStorageByte,omitempty"`
	// Indicates whether the anti-ransomware capacity that is used exceeds the anti-ransomware capacity that you purchased. Valid values:
	//
	// *   **0**: no
	// *   **1**: yes
	Overflow *int32 `json:"Overflow,omitempty" xml:"Overflow,omitempty"`
	// The storage capacity that is occupied by the backup data of your databases. Unit: bytes.
	UniUsageStorageByte *int64 `json:"UniUsageStorageByte,omitempty" xml:"UniUsageStorageByte,omitempty"`
	// The total anti-ransomware capacity that is used. Unit: bytes.
	UsageStorageByte *int64 `json:"UsageStorageByte,omitempty" xml:"UsageStorageByte,omitempty"`
}

func (s GetBackupStorageCountResponseBodyBackupStorageCount) String() string {
	return tea.Prettify(s)
}

func (s GetBackupStorageCountResponseBodyBackupStorageCount) GoString() string {
	return s.String()
}

func (s *GetBackupStorageCountResponseBodyBackupStorageCount) SetBuyStorageByte(v int64) *GetBackupStorageCountResponseBodyBackupStorageCount {
	s.BuyStorageByte = &v
	return s
}

func (s *GetBackupStorageCountResponseBodyBackupStorageCount) SetEcsUsageStorageByte(v int64) *GetBackupStorageCountResponseBodyBackupStorageCount {
	s.EcsUsageStorageByte = &v
	return s
}

func (s *GetBackupStorageCountResponseBodyBackupStorageCount) SetOverflow(v int32) *GetBackupStorageCountResponseBodyBackupStorageCount {
	s.Overflow = &v
	return s
}

func (s *GetBackupStorageCountResponseBodyBackupStorageCount) SetUniUsageStorageByte(v int64) *GetBackupStorageCountResponseBodyBackupStorageCount {
	s.UniUsageStorageByte = &v
	return s
}

func (s *GetBackupStorageCountResponseBodyBackupStorageCount) SetUsageStorageByte(v int64) *GetBackupStorageCountResponseBodyBackupStorageCount {
	s.UsageStorageByte = &v
	return s
}

type GetBackupStorageCountResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetBackupStorageCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetBackupStorageCountResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBackupStorageCountResponse) GoString() string {
	return s.String()
}

func (s *GetBackupStorageCountResponse) SetHeaders(v map[string]*string) *GetBackupStorageCountResponse {
	s.Headers = v
	return s
}

func (s *GetBackupStorageCountResponse) SetStatusCode(v int32) *GetBackupStorageCountResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBackupStorageCountResponse) SetBody(v *GetBackupStorageCountResponseBody) *GetBackupStorageCountResponse {
	s.Body = v
	return s
}

type GetCheckConfigRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s GetCheckConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCheckConfigRequest) GoString() string {
	return s.String()
}

func (s *GetCheckConfigRequest) SetLang(v string) *GetCheckConfigRequest {
	s.Lang = &v
	return s
}

type GetCheckConfigResponseBody struct {
	CycleDays []*int32                               `json:"CycleDays,omitempty" xml:"CycleDays,omitempty" type:"Repeated"`
	EndTime   *int32                                 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Standards []*GetCheckConfigResponseBodyStandards `json:"Standards,omitempty" xml:"Standards,omitempty" type:"Repeated"`
	StartTime *int32                                 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetCheckConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCheckConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetCheckConfigResponseBody) SetCycleDays(v []*int32) *GetCheckConfigResponseBody {
	s.CycleDays = v
	return s
}

func (s *GetCheckConfigResponseBody) SetEndTime(v int32) *GetCheckConfigResponseBody {
	s.EndTime = &v
	return s
}

func (s *GetCheckConfigResponseBody) SetRequestId(v string) *GetCheckConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCheckConfigResponseBody) SetStandards(v []*GetCheckConfigResponseBodyStandards) *GetCheckConfigResponseBody {
	s.Standards = v
	return s
}

func (s *GetCheckConfigResponseBody) SetStartTime(v int32) *GetCheckConfigResponseBody {
	s.StartTime = &v
	return s
}

type GetCheckConfigResponseBodyStandards struct {
	Id       *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	ShowName *string `json:"ShowName,omitempty" xml:"ShowName,omitempty"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCheckConfigResponseBodyStandards) String() string {
	return tea.Prettify(s)
}

func (s GetCheckConfigResponseBodyStandards) GoString() string {
	return s.String()
}

func (s *GetCheckConfigResponseBodyStandards) SetId(v int64) *GetCheckConfigResponseBodyStandards {
	s.Id = &v
	return s
}

func (s *GetCheckConfigResponseBodyStandards) SetShowName(v string) *GetCheckConfigResponseBodyStandards {
	s.ShowName = &v
	return s
}

func (s *GetCheckConfigResponseBodyStandards) SetStatus(v string) *GetCheckConfigResponseBodyStandards {
	s.Status = &v
	return s
}

func (s *GetCheckConfigResponseBodyStandards) SetType(v string) *GetCheckConfigResponseBodyStandards {
	s.Type = &v
	return s
}

type GetCheckConfigResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetCheckConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCheckConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCheckConfigResponse) GoString() string {
	return s.String()
}

func (s *GetCheckConfigResponse) SetHeaders(v map[string]*string) *GetCheckConfigResponse {
	s.Headers = v
	return s
}

func (s *GetCheckConfigResponse) SetStatusCode(v int32) *GetCheckConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCheckConfigResponse) SetBody(v *GetCheckConfigResponseBody) *GetCheckConfigResponse {
	s.Body = v
	return s
}

type GetCheckDetailRequest struct {
	// The ID of the check item.
	CheckId *int64 `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s GetCheckDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCheckDetailRequest) GoString() string {
	return s.String()
}

func (s *GetCheckDetailRequest) SetCheckId(v int64) *GetCheckDetailRequest {
	s.CheckId = &v
	return s
}

func (s *GetCheckDetailRequest) SetLang(v string) *GetCheckDetailRequest {
	s.Lang = &v
	return s
}

type GetCheckDetailResponseBody struct {
	// The help information about the check item.
	AssistInfo *GetCheckDetailResponseBodyAssistInfo `json:"AssistInfo,omitempty" xml:"AssistInfo,omitempty" type:"Struct"`
	// The description of the check item.
	Description *GetCheckDetailResponseBodyDescription `json:"Description,omitempty" xml:"Description,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The solution to handle the risk item.
	Solution *GetCheckDetailResponseBodySolution `json:"Solution,omitempty" xml:"Solution,omitempty" type:"Struct"`
}

func (s GetCheckDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCheckDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetCheckDetailResponseBody) SetAssistInfo(v *GetCheckDetailResponseBodyAssistInfo) *GetCheckDetailResponseBody {
	s.AssistInfo = v
	return s
}

func (s *GetCheckDetailResponseBody) SetDescription(v *GetCheckDetailResponseBodyDescription) *GetCheckDetailResponseBody {
	s.Description = v
	return s
}

func (s *GetCheckDetailResponseBody) SetRequestId(v string) *GetCheckDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCheckDetailResponseBody) SetSolution(v *GetCheckDetailResponseBodySolution) *GetCheckDetailResponseBody {
	s.Solution = v
	return s
}

type GetCheckDetailResponseBodyAssistInfo struct {
	// The link to the help information about the risk item when the Type parameter is set to link.
	Link *string `json:"Link,omitempty" xml:"Link,omitempty"`
	// The type of the help information about the risk item. Valid values:
	//
	// *   **text**
	// *   **link**
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The content in the help information about the risk item when the Type parameter is set to text.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetCheckDetailResponseBodyAssistInfo) String() string {
	return tea.Prettify(s)
}

func (s GetCheckDetailResponseBodyAssistInfo) GoString() string {
	return s.String()
}

func (s *GetCheckDetailResponseBodyAssistInfo) SetLink(v string) *GetCheckDetailResponseBodyAssistInfo {
	s.Link = &v
	return s
}

func (s *GetCheckDetailResponseBodyAssistInfo) SetType(v string) *GetCheckDetailResponseBodyAssistInfo {
	s.Type = &v
	return s
}

func (s *GetCheckDetailResponseBodyAssistInfo) SetValue(v string) *GetCheckDetailResponseBodyAssistInfo {
	s.Value = &v
	return s
}

type GetCheckDetailResponseBodyDescription struct {
	// The link to the description of the check item.
	Link *string `json:"Link,omitempty" xml:"Link,omitempty"`
	// The type of the description of the check item. The value is fixed as text.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The content in the description of the check item.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetCheckDetailResponseBodyDescription) String() string {
	return tea.Prettify(s)
}

func (s GetCheckDetailResponseBodyDescription) GoString() string {
	return s.String()
}

func (s *GetCheckDetailResponseBodyDescription) SetLink(v string) *GetCheckDetailResponseBodyDescription {
	s.Link = &v
	return s
}

func (s *GetCheckDetailResponseBodyDescription) SetType(v string) *GetCheckDetailResponseBodyDescription {
	s.Type = &v
	return s
}

func (s *GetCheckDetailResponseBodyDescription) SetValue(v string) *GetCheckDetailResponseBodyDescription {
	s.Value = &v
	return s
}

type GetCheckDetailResponseBodySolution struct {
	// The link to the solution to handle the risk item when the Type parameter is set to link.
	Link *string `json:"Link,omitempty" xml:"Link,omitempty"`
	// The type of the solution to handle to the risk item. Valid values:
	//
	// *   **text**
	// *   **link**
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The content of the solution to handle the risk item when the Type parameter is set to text.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetCheckDetailResponseBodySolution) String() string {
	return tea.Prettify(s)
}

func (s GetCheckDetailResponseBodySolution) GoString() string {
	return s.String()
}

func (s *GetCheckDetailResponseBodySolution) SetLink(v string) *GetCheckDetailResponseBodySolution {
	s.Link = &v
	return s
}

func (s *GetCheckDetailResponseBodySolution) SetType(v string) *GetCheckDetailResponseBodySolution {
	s.Type = &v
	return s
}

func (s *GetCheckDetailResponseBodySolution) SetValue(v string) *GetCheckDetailResponseBodySolution {
	s.Value = &v
	return s
}

type GetCheckDetailResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetCheckDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCheckDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCheckDetailResponse) GoString() string {
	return s.String()
}

func (s *GetCheckDetailResponse) SetHeaders(v map[string]*string) *GetCheckDetailResponse {
	s.Headers = v
	return s
}

func (s *GetCheckDetailResponse) SetStatusCode(v int32) *GetCheckDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCheckDetailResponse) SetBody(v *GetCheckDetailResponseBody) *GetCheckDetailResponse {
	s.Body = v
	return s
}

type GetCheckProcessRequest struct {
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetCheckProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCheckProcessRequest) GoString() string {
	return s.String()
}

func (s *GetCheckProcessRequest) SetTaskId(v string) *GetCheckProcessRequest {
	s.TaskId = &v
	return s
}

type GetCheckProcessResponseBody struct {
	FinishCount *int32  `json:"FinishCount,omitempty" xml:"FinishCount,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetCheckProcessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCheckProcessResponseBody) GoString() string {
	return s.String()
}

func (s *GetCheckProcessResponseBody) SetFinishCount(v int32) *GetCheckProcessResponseBody {
	s.FinishCount = &v
	return s
}

func (s *GetCheckProcessResponseBody) SetRequestId(v string) *GetCheckProcessResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCheckProcessResponseBody) SetTotalCount(v int32) *GetCheckProcessResponseBody {
	s.TotalCount = &v
	return s
}

type GetCheckProcessResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetCheckProcessResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCheckProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCheckProcessResponse) GoString() string {
	return s.String()
}

func (s *GetCheckProcessResponse) SetHeaders(v map[string]*string) *GetCheckProcessResponse {
	s.Headers = v
	return s
}

func (s *GetCheckProcessResponse) SetStatusCode(v int32) *GetCheckProcessResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCheckProcessResponse) SetBody(v *GetCheckProcessResponseBody) *GetCheckProcessResponse {
	s.Body = v
	return s
}

type GetCheckRiskStatisticsRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetCheckRiskStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRiskStatisticsRequest) GoString() string {
	return s.String()
}

func (s *GetCheckRiskStatisticsRequest) SetCurrentPage(v int32) *GetCheckRiskStatisticsRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetCheckRiskStatisticsRequest) SetLang(v string) *GetCheckRiskStatisticsRequest {
	s.Lang = &v
	return s
}

func (s *GetCheckRiskStatisticsRequest) SetPageSize(v int32) *GetCheckRiskStatisticsRequest {
	s.PageSize = &v
	return s
}

type GetCheckRiskStatisticsResponseBody struct {
	Count     *int32                                    `json:"Count,omitempty" xml:"Count,omitempty"`
	Data      []*GetCheckRiskStatisticsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetCheckRiskStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRiskStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *GetCheckRiskStatisticsResponseBody) SetCount(v int32) *GetCheckRiskStatisticsResponseBody {
	s.Count = &v
	return s
}

func (s *GetCheckRiskStatisticsResponseBody) SetData(v []*GetCheckRiskStatisticsResponseBodyData) *GetCheckRiskStatisticsResponseBody {
	s.Data = v
	return s
}

func (s *GetCheckRiskStatisticsResponseBody) SetRequestId(v string) *GetCheckRiskStatisticsResponseBody {
	s.RequestId = &v
	return s
}

type GetCheckRiskStatisticsResponseBodyData struct {
	HighWarningCount   *int32                                                 `json:"HighWarningCount,omitempty" xml:"HighWarningCount,omitempty"`
	LowWarningCount    *int32                                                 `json:"LowWarningCount,omitempty" xml:"LowWarningCount,omitempty"`
	MediumWarningCount *int32                                                 `json:"MediumWarningCount,omitempty" xml:"MediumWarningCount,omitempty"`
	PassCount          *int32                                                 `json:"PassCount,omitempty" xml:"PassCount,omitempty"`
	SceneName          *string                                                `json:"SceneName,omitempty" xml:"SceneName,omitempty"`
	SubStatistics      []*GetCheckRiskStatisticsResponseBodyDataSubStatistics `json:"SubStatistics,omitempty" xml:"SubStatistics,omitempty" type:"Repeated"`
	TotalCount         *int32                                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetCheckRiskStatisticsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRiskStatisticsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCheckRiskStatisticsResponseBodyData) SetHighWarningCount(v int32) *GetCheckRiskStatisticsResponseBodyData {
	s.HighWarningCount = &v
	return s
}

func (s *GetCheckRiskStatisticsResponseBodyData) SetLowWarningCount(v int32) *GetCheckRiskStatisticsResponseBodyData {
	s.LowWarningCount = &v
	return s
}

func (s *GetCheckRiskStatisticsResponseBodyData) SetMediumWarningCount(v int32) *GetCheckRiskStatisticsResponseBodyData {
	s.MediumWarningCount = &v
	return s
}

func (s *GetCheckRiskStatisticsResponseBodyData) SetPassCount(v int32) *GetCheckRiskStatisticsResponseBodyData {
	s.PassCount = &v
	return s
}

func (s *GetCheckRiskStatisticsResponseBodyData) SetSceneName(v string) *GetCheckRiskStatisticsResponseBodyData {
	s.SceneName = &v
	return s
}

func (s *GetCheckRiskStatisticsResponseBodyData) SetSubStatistics(v []*GetCheckRiskStatisticsResponseBodyDataSubStatistics) *GetCheckRiskStatisticsResponseBodyData {
	s.SubStatistics = v
	return s
}

func (s *GetCheckRiskStatisticsResponseBodyData) SetTotalCount(v int32) *GetCheckRiskStatisticsResponseBodyData {
	s.TotalCount = &v
	return s
}

type GetCheckRiskStatisticsResponseBodyDataSubStatistics struct {
	Alias              *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	HighWarningCount   *int32  `json:"HighWarningCount,omitempty" xml:"HighWarningCount,omitempty"`
	LowWarningCount    *int32  `json:"LowWarningCount,omitempty" xml:"LowWarningCount,omitempty"`
	MediumWarningCount *int32  `json:"MediumWarningCount,omitempty" xml:"MediumWarningCount,omitempty"`
	PassCount          *int32  `json:"PassCount,omitempty" xml:"PassCount,omitempty"`
	TotalCount         *int32  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TypeName           *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s GetCheckRiskStatisticsResponseBodyDataSubStatistics) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRiskStatisticsResponseBodyDataSubStatistics) GoString() string {
	return s.String()
}

func (s *GetCheckRiskStatisticsResponseBodyDataSubStatistics) SetAlias(v string) *GetCheckRiskStatisticsResponseBodyDataSubStatistics {
	s.Alias = &v
	return s
}

func (s *GetCheckRiskStatisticsResponseBodyDataSubStatistics) SetHighWarningCount(v int32) *GetCheckRiskStatisticsResponseBodyDataSubStatistics {
	s.HighWarningCount = &v
	return s
}

func (s *GetCheckRiskStatisticsResponseBodyDataSubStatistics) SetLowWarningCount(v int32) *GetCheckRiskStatisticsResponseBodyDataSubStatistics {
	s.LowWarningCount = &v
	return s
}

func (s *GetCheckRiskStatisticsResponseBodyDataSubStatistics) SetMediumWarningCount(v int32) *GetCheckRiskStatisticsResponseBodyDataSubStatistics {
	s.MediumWarningCount = &v
	return s
}

func (s *GetCheckRiskStatisticsResponseBodyDataSubStatistics) SetPassCount(v int32) *GetCheckRiskStatisticsResponseBodyDataSubStatistics {
	s.PassCount = &v
	return s
}

func (s *GetCheckRiskStatisticsResponseBodyDataSubStatistics) SetTotalCount(v int32) *GetCheckRiskStatisticsResponseBodyDataSubStatistics {
	s.TotalCount = &v
	return s
}

func (s *GetCheckRiskStatisticsResponseBodyDataSubStatistics) SetTypeName(v string) *GetCheckRiskStatisticsResponseBodyDataSubStatistics {
	s.TypeName = &v
	return s
}

type GetCheckRiskStatisticsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetCheckRiskStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCheckRiskStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRiskStatisticsResponse) GoString() string {
	return s.String()
}

func (s *GetCheckRiskStatisticsResponse) SetHeaders(v map[string]*string) *GetCheckRiskStatisticsResponse {
	s.Headers = v
	return s
}

func (s *GetCheckRiskStatisticsResponse) SetStatusCode(v int32) *GetCheckRiskStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCheckRiskStatisticsResponse) SetBody(v *GetCheckRiskStatisticsResponseBody) *GetCheckRiskStatisticsResponse {
	s.Body = v
	return s
}

type GetCheckSummaryRequest struct {
	Lang                       *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ResourceDirectoryAccountId *string `json:"ResourceDirectoryAccountId,omitempty" xml:"ResourceDirectoryAccountId,omitempty"`
}

func (s GetCheckSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCheckSummaryRequest) GoString() string {
	return s.String()
}

func (s *GetCheckSummaryRequest) SetLang(v string) *GetCheckSummaryRequest {
	s.Lang = &v
	return s
}

func (s *GetCheckSummaryRequest) SetResourceDirectoryAccountId(v string) *GetCheckSummaryRequest {
	s.ResourceDirectoryAccountId = &v
	return s
}

type GetCheckSummaryResponseBody struct {
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Summarys  []*GetCheckSummaryResponseBodySummarys `json:"Summarys,omitempty" xml:"Summarys,omitempty" type:"Repeated"`
}

func (s GetCheckSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCheckSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *GetCheckSummaryResponseBody) SetRequestId(v string) *GetCheckSummaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCheckSummaryResponseBody) SetSummarys(v []*GetCheckSummaryResponseBodySummarys) *GetCheckSummaryResponseBody {
	s.Summarys = v
	return s
}

type GetCheckSummaryResponseBodySummarys struct {
	FailCount *int32                                          `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	PassCount *int64                                          `json:"PassCount,omitempty" xml:"PassCount,omitempty"`
	Standards []*GetCheckSummaryResponseBodySummarysStandards `json:"Standards,omitempty" xml:"Standards,omitempty" type:"Repeated"`
	Type      *string                                         `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCheckSummaryResponseBodySummarys) String() string {
	return tea.Prettify(s)
}

func (s GetCheckSummaryResponseBodySummarys) GoString() string {
	return s.String()
}

func (s *GetCheckSummaryResponseBodySummarys) SetFailCount(v int32) *GetCheckSummaryResponseBodySummarys {
	s.FailCount = &v
	return s
}

func (s *GetCheckSummaryResponseBodySummarys) SetPassCount(v int64) *GetCheckSummaryResponseBodySummarys {
	s.PassCount = &v
	return s
}

func (s *GetCheckSummaryResponseBodySummarys) SetStandards(v []*GetCheckSummaryResponseBodySummarysStandards) *GetCheckSummaryResponseBodySummarys {
	s.Standards = v
	return s
}

func (s *GetCheckSummaryResponseBodySummarys) SetType(v string) *GetCheckSummaryResponseBodySummarys {
	s.Type = &v
	return s
}

type GetCheckSummaryResponseBodySummarysStandards struct {
	FailCount            *int32  `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	Id                   *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	PassCount            *int32  `json:"PassCount,omitempty" xml:"PassCount,omitempty"`
	RiskLevelHighCount   *int32  `json:"RiskLevelHighCount,omitempty" xml:"RiskLevelHighCount,omitempty"`
	RiskLevelLowCount    *int32  `json:"RiskLevelLowCount,omitempty" xml:"RiskLevelLowCount,omitempty"`
	RiskLevelMediumCount *int32  `json:"RiskLevelMediumCount,omitempty" xml:"RiskLevelMediumCount,omitempty"`
	ShowName             *string `json:"ShowName,omitempty" xml:"ShowName,omitempty"`
}

func (s GetCheckSummaryResponseBodySummarysStandards) String() string {
	return tea.Prettify(s)
}

func (s GetCheckSummaryResponseBodySummarysStandards) GoString() string {
	return s.String()
}

func (s *GetCheckSummaryResponseBodySummarysStandards) SetFailCount(v int32) *GetCheckSummaryResponseBodySummarysStandards {
	s.FailCount = &v
	return s
}

func (s *GetCheckSummaryResponseBodySummarysStandards) SetId(v int64) *GetCheckSummaryResponseBodySummarysStandards {
	s.Id = &v
	return s
}

func (s *GetCheckSummaryResponseBodySummarysStandards) SetPassCount(v int32) *GetCheckSummaryResponseBodySummarysStandards {
	s.PassCount = &v
	return s
}

func (s *GetCheckSummaryResponseBodySummarysStandards) SetRiskLevelHighCount(v int32) *GetCheckSummaryResponseBodySummarysStandards {
	s.RiskLevelHighCount = &v
	return s
}

func (s *GetCheckSummaryResponseBodySummarysStandards) SetRiskLevelLowCount(v int32) *GetCheckSummaryResponseBodySummarysStandards {
	s.RiskLevelLowCount = &v
	return s
}

func (s *GetCheckSummaryResponseBodySummarysStandards) SetRiskLevelMediumCount(v int32) *GetCheckSummaryResponseBodySummarysStandards {
	s.RiskLevelMediumCount = &v
	return s
}

func (s *GetCheckSummaryResponseBodySummarysStandards) SetShowName(v string) *GetCheckSummaryResponseBodySummarysStandards {
	s.ShowName = &v
	return s
}

type GetCheckSummaryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetCheckSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCheckSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCheckSummaryResponse) GoString() string {
	return s.String()
}

func (s *GetCheckSummaryResponse) SetHeaders(v map[string]*string) *GetCheckSummaryResponse {
	s.Headers = v
	return s
}

func (s *GetCheckSummaryResponse) SetStatusCode(v int32) *GetCheckSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCheckSummaryResponse) SetBody(v *GetCheckSummaryResponseBody) *GetCheckSummaryResponse {
	s.Body = v
	return s
}

type GetClientUserDefineRuleRequest struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetClientUserDefineRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetClientUserDefineRuleRequest) GoString() string {
	return s.String()
}

func (s *GetClientUserDefineRuleRequest) SetId(v int64) *GetClientUserDefineRuleRequest {
	s.Id = &v
	return s
}

type GetClientUserDefineRuleResponseBody struct {
	RequestId            *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserDefineRuleDetail *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail `json:"UserDefineRuleDetail,omitempty" xml:"UserDefineRuleDetail,omitempty" type:"Struct"`
}

func (s GetClientUserDefineRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetClientUserDefineRuleResponseBody) GoString() string {
	return s.String()
}

func (s *GetClientUserDefineRuleResponseBody) SetRequestId(v string) *GetClientUserDefineRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBody) SetUserDefineRuleDetail(v *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) *GetClientUserDefineRuleResponseBody {
	s.UserDefineRuleDetail = v
	return s
}

type GetClientUserDefineRuleResponseBodyUserDefineRuleDetail struct {
	ActionType      *string `json:"ActionType,omitempty" xml:"ActionType,omitempty"`
	Cmdline         *string `json:"Cmdline,omitempty" xml:"Cmdline,omitempty"`
	FilePath        *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	GmtCreate       *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified     *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	IP              *string `json:"IP,omitempty" xml:"IP,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Md5List         *string `json:"Md5List,omitempty" xml:"Md5List,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NewFilePath     *string `json:"NewFilePath,omitempty" xml:"NewFilePath,omitempty"`
	ParentCmdline   *string `json:"ParentCmdline,omitempty" xml:"ParentCmdline,omitempty"`
	ParentProcPath  *string `json:"ParentProcPath,omitempty" xml:"ParentProcPath,omitempty"`
	Platform        *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Port            *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	PortStr         *string `json:"PortStr,omitempty" xml:"PortStr,omitempty"`
	ProcPath        *string `json:"ProcPath,omitempty" xml:"ProcPath,omitempty"`
	RegistryContent *string `json:"RegistryContent,omitempty" xml:"RegistryContent,omitempty"`
	RegistryKey     *string `json:"RegistryKey,omitempty" xml:"RegistryKey,omitempty"`
	Type            *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) String() string {
	return tea.Prettify(s)
}

func (s GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) GoString() string {
	return s.String()
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetActionType(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.ActionType = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetCmdline(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.Cmdline = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetFilePath(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.FilePath = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetGmtCreate(v int64) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.GmtCreate = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetGmtModified(v int64) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.GmtModified = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetIP(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.IP = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetId(v int64) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.Id = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetMd5List(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.Md5List = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetName(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.Name = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetNewFilePath(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.NewFilePath = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetParentCmdline(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.ParentCmdline = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetParentProcPath(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.ParentProcPath = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetPlatform(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.Platform = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetPort(v int32) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.Port = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetPortStr(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.PortStr = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetProcPath(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.ProcPath = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetRegistryContent(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.RegistryContent = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetRegistryKey(v string) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.RegistryKey = &v
	return s
}

func (s *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail) SetType(v int32) *GetClientUserDefineRuleResponseBodyUserDefineRuleDetail {
	s.Type = &v
	return s
}

type GetClientUserDefineRuleResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetClientUserDefineRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetClientUserDefineRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetClientUserDefineRuleResponse) GoString() string {
	return s.String()
}

func (s *GetClientUserDefineRuleResponse) SetHeaders(v map[string]*string) *GetClientUserDefineRuleResponse {
	s.Headers = v
	return s
}

func (s *GetClientUserDefineRuleResponse) SetStatusCode(v int32) *GetClientUserDefineRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetClientUserDefineRuleResponse) SetBody(v *GetClientUserDefineRuleResponseBody) *GetClientUserDefineRuleResponse {
	s.Body = v
	return s
}

type GetCloudAssetDetailRequest struct {
	AssetSubType        *int32                                           `json:"AssetSubType,omitempty" xml:"AssetSubType,omitempty"`
	AssetType           *int32                                           `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
	CloudAssetInstances []*GetCloudAssetDetailRequestCloudAssetInstances `json:"CloudAssetInstances,omitempty" xml:"CloudAssetInstances,omitempty" type:"Repeated"`
	Vendor              *int32                                           `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s GetCloudAssetDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCloudAssetDetailRequest) GoString() string {
	return s.String()
}

func (s *GetCloudAssetDetailRequest) SetAssetSubType(v int32) *GetCloudAssetDetailRequest {
	s.AssetSubType = &v
	return s
}

func (s *GetCloudAssetDetailRequest) SetAssetType(v int32) *GetCloudAssetDetailRequest {
	s.AssetType = &v
	return s
}

func (s *GetCloudAssetDetailRequest) SetCloudAssetInstances(v []*GetCloudAssetDetailRequestCloudAssetInstances) *GetCloudAssetDetailRequest {
	s.CloudAssetInstances = v
	return s
}

func (s *GetCloudAssetDetailRequest) SetVendor(v int32) *GetCloudAssetDetailRequest {
	s.Vendor = &v
	return s
}

type GetCloudAssetDetailRequestCloudAssetInstances struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetCloudAssetDetailRequestCloudAssetInstances) String() string {
	return tea.Prettify(s)
}

func (s GetCloudAssetDetailRequestCloudAssetInstances) GoString() string {
	return s.String()
}

func (s *GetCloudAssetDetailRequestCloudAssetInstances) SetInstanceId(v string) *GetCloudAssetDetailRequestCloudAssetInstances {
	s.InstanceId = &v
	return s
}

func (s *GetCloudAssetDetailRequestCloudAssetInstances) SetRegionId(v string) *GetCloudAssetDetailRequestCloudAssetInstances {
	s.RegionId = &v
	return s
}

type GetCloudAssetDetailResponseBody struct {
	Count     *int32                                      `json:"Count,omitempty" xml:"Count,omitempty"`
	Instances []*GetCloudAssetDetailResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetCloudAssetDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCloudAssetDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetCloudAssetDetailResponseBody) SetCount(v int32) *GetCloudAssetDetailResponseBody {
	s.Count = &v
	return s
}

func (s *GetCloudAssetDetailResponseBody) SetInstances(v []*GetCloudAssetDetailResponseBodyInstances) *GetCloudAssetDetailResponseBody {
	s.Instances = v
	return s
}

func (s *GetCloudAssetDetailResponseBody) SetRequestId(v string) *GetCloudAssetDetailResponseBody {
	s.RequestId = &v
	return s
}

type GetCloudAssetDetailResponseBodyInstances struct {
	AlarmStatus      *string `json:"AlarmStatus,omitempty" xml:"AlarmStatus,omitempty"`
	AssetSubType     *int32  `json:"AssetSubType,omitempty" xml:"AssetSubType,omitempty"`
	AssetSubTypeName *string `json:"AssetSubTypeName,omitempty" xml:"AssetSubTypeName,omitempty"`
	AssetType        *int32  `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
	AssetTypeName    *string `json:"AssetTypeName,omitempty" xml:"AssetTypeName,omitempty"`
	CreatedTime      *int64  `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	DetailLink       *string `json:"DetailLink,omitempty" xml:"DetailLink,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName     *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InternetIp       *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RiskStatus       *string `json:"RiskStatus,omitempty" xml:"RiskStatus,omitempty"`
	SecurityInfo     *string `json:"SecurityInfo,omitempty" xml:"SecurityInfo,omitempty"`
	Vendor           *int32  `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s GetCloudAssetDetailResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s GetCloudAssetDetailResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetAlarmStatus(v string) *GetCloudAssetDetailResponseBodyInstances {
	s.AlarmStatus = &v
	return s
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetAssetSubType(v int32) *GetCloudAssetDetailResponseBodyInstances {
	s.AssetSubType = &v
	return s
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetAssetSubTypeName(v string) *GetCloudAssetDetailResponseBodyInstances {
	s.AssetSubTypeName = &v
	return s
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetAssetType(v int32) *GetCloudAssetDetailResponseBodyInstances {
	s.AssetType = &v
	return s
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetAssetTypeName(v string) *GetCloudAssetDetailResponseBodyInstances {
	s.AssetTypeName = &v
	return s
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetCreatedTime(v int64) *GetCloudAssetDetailResponseBodyInstances {
	s.CreatedTime = &v
	return s
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetDetailLink(v string) *GetCloudAssetDetailResponseBodyInstances {
	s.DetailLink = &v
	return s
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetInstanceId(v string) *GetCloudAssetDetailResponseBodyInstances {
	s.InstanceId = &v
	return s
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetInstanceName(v string) *GetCloudAssetDetailResponseBodyInstances {
	s.InstanceName = &v
	return s
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetInternetIp(v string) *GetCloudAssetDetailResponseBodyInstances {
	s.InternetIp = &v
	return s
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetRegionId(v string) *GetCloudAssetDetailResponseBodyInstances {
	s.RegionId = &v
	return s
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetRiskStatus(v string) *GetCloudAssetDetailResponseBodyInstances {
	s.RiskStatus = &v
	return s
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetSecurityInfo(v string) *GetCloudAssetDetailResponseBodyInstances {
	s.SecurityInfo = &v
	return s
}

func (s *GetCloudAssetDetailResponseBodyInstances) SetVendor(v int32) *GetCloudAssetDetailResponseBodyInstances {
	s.Vendor = &v
	return s
}

type GetCloudAssetDetailResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetCloudAssetDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCloudAssetDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCloudAssetDetailResponse) GoString() string {
	return s.String()
}

func (s *GetCloudAssetDetailResponse) SetHeaders(v map[string]*string) *GetCloudAssetDetailResponse {
	s.Headers = v
	return s
}

func (s *GetCloudAssetDetailResponse) SetStatusCode(v int32) *GetCloudAssetDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCloudAssetDetailResponse) SetBody(v *GetCloudAssetDetailResponseBody) *GetCloudAssetDetailResponse {
	s.Body = v
	return s
}

type GetCloudAssetSummaryResponseBody struct {
	GroupedFields *GetCloudAssetSummaryResponseBodyGroupedFields `json:"GroupedFields,omitempty" xml:"GroupedFields,omitempty" type:"Struct"`
	RequestId     *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetCloudAssetSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCloudAssetSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *GetCloudAssetSummaryResponseBody) SetGroupedFields(v *GetCloudAssetSummaryResponseBodyGroupedFields) *GetCloudAssetSummaryResponseBody {
	s.GroupedFields = v
	return s
}

func (s *GetCloudAssetSummaryResponseBody) SetRequestId(v string) *GetCloudAssetSummaryResponseBody {
	s.RequestId = &v
	return s
}

type GetCloudAssetSummaryResponseBodyGroupedFields struct {
	CloudAssetSummaryMetas []*GetCloudAssetSummaryResponseBodyGroupedFieldsCloudAssetSummaryMetas `json:"CloudAssetSummaryMetas,omitempty" xml:"CloudAssetSummaryMetas,omitempty" type:"Repeated"`
	InstanceCountTotal     *int32                                                                 `json:"InstanceCountTotal,omitempty" xml:"InstanceCountTotal,omitempty"`
	InstanceRiskCountTotal *int32                                                                 `json:"InstanceRiskCountTotal,omitempty" xml:"InstanceRiskCountTotal,omitempty"`
}

func (s GetCloudAssetSummaryResponseBodyGroupedFields) String() string {
	return tea.Prettify(s)
}

func (s GetCloudAssetSummaryResponseBodyGroupedFields) GoString() string {
	return s.String()
}

func (s *GetCloudAssetSummaryResponseBodyGroupedFields) SetCloudAssetSummaryMetas(v []*GetCloudAssetSummaryResponseBodyGroupedFieldsCloudAssetSummaryMetas) *GetCloudAssetSummaryResponseBodyGroupedFields {
	s.CloudAssetSummaryMetas = v
	return s
}

func (s *GetCloudAssetSummaryResponseBodyGroupedFields) SetInstanceCountTotal(v int32) *GetCloudAssetSummaryResponseBodyGroupedFields {
	s.InstanceCountTotal = &v
	return s
}

func (s *GetCloudAssetSummaryResponseBodyGroupedFields) SetInstanceRiskCountTotal(v int32) *GetCloudAssetSummaryResponseBodyGroupedFields {
	s.InstanceRiskCountTotal = &v
	return s
}

type GetCloudAssetSummaryResponseBodyGroupedFieldsCloudAssetSummaryMetas struct {
	AssetSubType      *int32 `json:"AssetSubType,omitempty" xml:"AssetSubType,omitempty"`
	AssetType         *int32 `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
	InstanceCount     *int32 `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	InstanceRiskCount *int32 `json:"InstanceRiskCount,omitempty" xml:"InstanceRiskCount,omitempty"`
}

func (s GetCloudAssetSummaryResponseBodyGroupedFieldsCloudAssetSummaryMetas) String() string {
	return tea.Prettify(s)
}

func (s GetCloudAssetSummaryResponseBodyGroupedFieldsCloudAssetSummaryMetas) GoString() string {
	return s.String()
}

func (s *GetCloudAssetSummaryResponseBodyGroupedFieldsCloudAssetSummaryMetas) SetAssetSubType(v int32) *GetCloudAssetSummaryResponseBodyGroupedFieldsCloudAssetSummaryMetas {
	s.AssetSubType = &v
	return s
}

func (s *GetCloudAssetSummaryResponseBodyGroupedFieldsCloudAssetSummaryMetas) SetAssetType(v int32) *GetCloudAssetSummaryResponseBodyGroupedFieldsCloudAssetSummaryMetas {
	s.AssetType = &v
	return s
}

func (s *GetCloudAssetSummaryResponseBodyGroupedFieldsCloudAssetSummaryMetas) SetInstanceCount(v int32) *GetCloudAssetSummaryResponseBodyGroupedFieldsCloudAssetSummaryMetas {
	s.InstanceCount = &v
	return s
}

func (s *GetCloudAssetSummaryResponseBodyGroupedFieldsCloudAssetSummaryMetas) SetInstanceRiskCount(v int32) *GetCloudAssetSummaryResponseBodyGroupedFieldsCloudAssetSummaryMetas {
	s.InstanceRiskCount = &v
	return s
}

type GetCloudAssetSummaryResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetCloudAssetSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCloudAssetSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCloudAssetSummaryResponse) GoString() string {
	return s.String()
}

func (s *GetCloudAssetSummaryResponse) SetHeaders(v map[string]*string) *GetCloudAssetSummaryResponse {
	s.Headers = v
	return s
}

func (s *GetCloudAssetSummaryResponse) SetStatusCode(v int32) *GetCloudAssetSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCloudAssetSummaryResponse) SetBody(v *GetCloudAssetSummaryResponseBody) *GetCloudAssetSummaryResponse {
	s.Body = v
	return s
}

type GetClusterCheckItemWarningStatisticsRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s GetClusterCheckItemWarningStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetClusterCheckItemWarningStatisticsRequest) GoString() string {
	return s.String()
}

func (s *GetClusterCheckItemWarningStatisticsRequest) SetClusterId(v string) *GetClusterCheckItemWarningStatisticsRequest {
	s.ClusterId = &v
	return s
}

type GetClusterCheckItemWarningStatisticsResponseBody struct {
	Data      *GetClusterCheckItemWarningStatisticsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetClusterCheckItemWarningStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetClusterCheckItemWarningStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *GetClusterCheckItemWarningStatisticsResponseBody) SetData(v *GetClusterCheckItemWarningStatisticsResponseBodyData) *GetClusterCheckItemWarningStatisticsResponseBody {
	s.Data = v
	return s
}

func (s *GetClusterCheckItemWarningStatisticsResponseBody) SetRequestId(v string) *GetClusterCheckItemWarningStatisticsResponseBody {
	s.RequestId = &v
	return s
}

type GetClusterCheckItemWarningStatisticsResponseBodyData struct {
	HighWarningCount   *int32 `json:"HighWarningCount,omitempty" xml:"HighWarningCount,omitempty"`
	LowWarningCount    *int32 `json:"LowWarningCount,omitempty" xml:"LowWarningCount,omitempty"`
	MediumWarningCount *int32 `json:"MediumWarningCount,omitempty" xml:"MediumWarningCount,omitempty"`
}

func (s GetClusterCheckItemWarningStatisticsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetClusterCheckItemWarningStatisticsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetClusterCheckItemWarningStatisticsResponseBodyData) SetHighWarningCount(v int32) *GetClusterCheckItemWarningStatisticsResponseBodyData {
	s.HighWarningCount = &v
	return s
}

func (s *GetClusterCheckItemWarningStatisticsResponseBodyData) SetLowWarningCount(v int32) *GetClusterCheckItemWarningStatisticsResponseBodyData {
	s.LowWarningCount = &v
	return s
}

func (s *GetClusterCheckItemWarningStatisticsResponseBodyData) SetMediumWarningCount(v int32) *GetClusterCheckItemWarningStatisticsResponseBodyData {
	s.MediumWarningCount = &v
	return s
}

type GetClusterCheckItemWarningStatisticsResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetClusterCheckItemWarningStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetClusterCheckItemWarningStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetClusterCheckItemWarningStatisticsResponse) GoString() string {
	return s.String()
}

func (s *GetClusterCheckItemWarningStatisticsResponse) SetHeaders(v map[string]*string) *GetClusterCheckItemWarningStatisticsResponse {
	s.Headers = v
	return s
}

func (s *GetClusterCheckItemWarningStatisticsResponse) SetStatusCode(v int32) *GetClusterCheckItemWarningStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetClusterCheckItemWarningStatisticsResponse) SetBody(v *GetClusterCheckItemWarningStatisticsResponseBody) *GetClusterCheckItemWarningStatisticsResponse {
	s.Body = v
	return s
}

type GetClusterRuleSummaryRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s GetClusterRuleSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetClusterRuleSummaryRequest) GoString() string {
	return s.String()
}

func (s *GetClusterRuleSummaryRequest) SetClusterId(v string) *GetClusterRuleSummaryRequest {
	s.ClusterId = &v
	return s
}

type GetClusterRuleSummaryResponseBody struct {
	ClusterRuleSummary *GetClusterRuleSummaryResponseBodyClusterRuleSummary `json:"ClusterRuleSummary,omitempty" xml:"ClusterRuleSummary,omitempty" type:"Struct"`
	RequestId          *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetClusterRuleSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetClusterRuleSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *GetClusterRuleSummaryResponseBody) SetClusterRuleSummary(v *GetClusterRuleSummaryResponseBodyClusterRuleSummary) *GetClusterRuleSummaryResponseBody {
	s.ClusterRuleSummary = v
	return s
}

func (s *GetClusterRuleSummaryResponseBody) SetRequestId(v string) *GetClusterRuleSummaryResponseBody {
	s.RequestId = &v
	return s
}

type GetClusterRuleSummaryResponseBodyClusterRuleSummary struct {
	CloseRuleCount        *int32 `json:"CloseRuleCount,omitempty" xml:"CloseRuleCount,omitempty"`
	InterceptionCount7Day *int64 `json:"InterceptionCount7Day,omitempty" xml:"InterceptionCount7Day,omitempty"`
	InterceptionSwitch    *int32 `json:"InterceptionSwitch,omitempty" xml:"InterceptionSwitch,omitempty"`
	InterceptionType      *int32 `json:"InterceptionType,omitempty" xml:"InterceptionType,omitempty"`
	OpenRuleCount         *int32 `json:"OpenRuleCount,omitempty" xml:"OpenRuleCount,omitempty"`
	RuleCount             *int32 `json:"RuleCount,omitempty" xml:"RuleCount,omitempty"`
	SuggestRuleCount      *int32 `json:"SuggestRuleCount,omitempty" xml:"SuggestRuleCount,omitempty"`
}

func (s GetClusterRuleSummaryResponseBodyClusterRuleSummary) String() string {
	return tea.Prettify(s)
}

func (s GetClusterRuleSummaryResponseBodyClusterRuleSummary) GoString() string {
	return s.String()
}

func (s *GetClusterRuleSummaryResponseBodyClusterRuleSummary) SetCloseRuleCount(v int32) *GetClusterRuleSummaryResponseBodyClusterRuleSummary {
	s.CloseRuleCount = &v
	return s
}

func (s *GetClusterRuleSummaryResponseBodyClusterRuleSummary) SetInterceptionCount7Day(v int64) *GetClusterRuleSummaryResponseBodyClusterRuleSummary {
	s.InterceptionCount7Day = &v
	return s
}

func (s *GetClusterRuleSummaryResponseBodyClusterRuleSummary) SetInterceptionSwitch(v int32) *GetClusterRuleSummaryResponseBodyClusterRuleSummary {
	s.InterceptionSwitch = &v
	return s
}

func (s *GetClusterRuleSummaryResponseBodyClusterRuleSummary) SetInterceptionType(v int32) *GetClusterRuleSummaryResponseBodyClusterRuleSummary {
	s.InterceptionType = &v
	return s
}

func (s *GetClusterRuleSummaryResponseBodyClusterRuleSummary) SetOpenRuleCount(v int32) *GetClusterRuleSummaryResponseBodyClusterRuleSummary {
	s.OpenRuleCount = &v
	return s
}

func (s *GetClusterRuleSummaryResponseBodyClusterRuleSummary) SetRuleCount(v int32) *GetClusterRuleSummaryResponseBodyClusterRuleSummary {
	s.RuleCount = &v
	return s
}

func (s *GetClusterRuleSummaryResponseBodyClusterRuleSummary) SetSuggestRuleCount(v int32) *GetClusterRuleSummaryResponseBodyClusterRuleSummary {
	s.SuggestRuleCount = &v
	return s
}

type GetClusterRuleSummaryResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetClusterRuleSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetClusterRuleSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetClusterRuleSummaryResponse) GoString() string {
	return s.String()
}

func (s *GetClusterRuleSummaryResponse) SetHeaders(v map[string]*string) *GetClusterRuleSummaryResponse {
	s.Headers = v
	return s
}

func (s *GetClusterRuleSummaryResponse) SetStatusCode(v int32) *GetClusterRuleSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *GetClusterRuleSummaryResponse) SetBody(v *GetClusterRuleSummaryResponseBody) *GetClusterRuleSummaryResponse {
	s.Body = v
	return s
}

type GetClusterSuspEventStatisticsRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	From      *string `json:"From,omitempty" xml:"From,omitempty"`
}

func (s GetClusterSuspEventStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetClusterSuspEventStatisticsRequest) GoString() string {
	return s.String()
}

func (s *GetClusterSuspEventStatisticsRequest) SetClusterId(v string) *GetClusterSuspEventStatisticsRequest {
	s.ClusterId = &v
	return s
}

func (s *GetClusterSuspEventStatisticsRequest) SetFrom(v string) *GetClusterSuspEventStatisticsRequest {
	s.From = &v
	return s
}

type GetClusterSuspEventStatisticsResponseBody struct {
	RequestId      *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SuspStatistics *GetClusterSuspEventStatisticsResponseBodySuspStatistics `json:"SuspStatistics,omitempty" xml:"SuspStatistics,omitempty" type:"Struct"`
}

func (s GetClusterSuspEventStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetClusterSuspEventStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *GetClusterSuspEventStatisticsResponseBody) SetRequestId(v string) *GetClusterSuspEventStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetClusterSuspEventStatisticsResponseBody) SetSuspStatistics(v *GetClusterSuspEventStatisticsResponseBodySuspStatistics) *GetClusterSuspEventStatisticsResponseBody {
	s.SuspStatistics = v
	return s
}

type GetClusterSuspEventStatisticsResponseBodySuspStatistics struct {
	Remind     *int32 `json:"Remind,omitempty" xml:"Remind,omitempty"`
	Serious    *int32 `json:"Serious,omitempty" xml:"Serious,omitempty"`
	Suspicious *int32 `json:"Suspicious,omitempty" xml:"Suspicious,omitempty"`
}

func (s GetClusterSuspEventStatisticsResponseBodySuspStatistics) String() string {
	return tea.Prettify(s)
}

func (s GetClusterSuspEventStatisticsResponseBodySuspStatistics) GoString() string {
	return s.String()
}

func (s *GetClusterSuspEventStatisticsResponseBodySuspStatistics) SetRemind(v int32) *GetClusterSuspEventStatisticsResponseBodySuspStatistics {
	s.Remind = &v
	return s
}

func (s *GetClusterSuspEventStatisticsResponseBodySuspStatistics) SetSerious(v int32) *GetClusterSuspEventStatisticsResponseBodySuspStatistics {
	s.Serious = &v
	return s
}

func (s *GetClusterSuspEventStatisticsResponseBodySuspStatistics) SetSuspicious(v int32) *GetClusterSuspEventStatisticsResponseBodySuspStatistics {
	s.Suspicious = &v
	return s
}

type GetClusterSuspEventStatisticsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetClusterSuspEventStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetClusterSuspEventStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetClusterSuspEventStatisticsResponse) GoString() string {
	return s.String()
}

func (s *GetClusterSuspEventStatisticsResponse) SetHeaders(v map[string]*string) *GetClusterSuspEventStatisticsResponse {
	s.Headers = v
	return s
}

func (s *GetClusterSuspEventStatisticsResponse) SetStatusCode(v int32) *GetClusterSuspEventStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetClusterSuspEventStatisticsResponse) SetBody(v *GetClusterSuspEventStatisticsResponseBody) *GetClusterSuspEventStatisticsResponse {
	s.Body = v
	return s
}

type GetFileDetectApiInvokeInfoResponseBody struct {
	Data      *GetFileDetectApiInvokeInfoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetFileDetectApiInvokeInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFileDetectApiInvokeInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetFileDetectApiInvokeInfoResponseBody) SetData(v *GetFileDetectApiInvokeInfoResponseBodyData) *GetFileDetectApiInvokeInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetFileDetectApiInvokeInfoResponseBody) SetRequestId(v string) *GetFileDetectApiInvokeInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetFileDetectApiInvokeInfoResponseBodyData struct {
	AuthCount       *int64  `json:"AuthCount,omitempty" xml:"AuthCount,omitempty"`
	Expire          *int64  `json:"Expire,omitempty" xml:"Expire,omitempty"`
	FlowRate        *int32  `json:"FlowRate,omitempty" xml:"FlowRate,omitempty"`
	RemainAuthCount *int64  `json:"RemainAuthCount,omitempty" xml:"RemainAuthCount,omitempty"`
	SaleVersion     *int32  `json:"SaleVersion,omitempty" xml:"SaleVersion,omitempty"`
	TimeUnit        *string `json:"TimeUnit,omitempty" xml:"TimeUnit,omitempty"`
}

func (s GetFileDetectApiInvokeInfoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFileDetectApiInvokeInfoResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFileDetectApiInvokeInfoResponseBodyData) SetAuthCount(v int64) *GetFileDetectApiInvokeInfoResponseBodyData {
	s.AuthCount = &v
	return s
}

func (s *GetFileDetectApiInvokeInfoResponseBodyData) SetExpire(v int64) *GetFileDetectApiInvokeInfoResponseBodyData {
	s.Expire = &v
	return s
}

func (s *GetFileDetectApiInvokeInfoResponseBodyData) SetFlowRate(v int32) *GetFileDetectApiInvokeInfoResponseBodyData {
	s.FlowRate = &v
	return s
}

func (s *GetFileDetectApiInvokeInfoResponseBodyData) SetRemainAuthCount(v int64) *GetFileDetectApiInvokeInfoResponseBodyData {
	s.RemainAuthCount = &v
	return s
}

func (s *GetFileDetectApiInvokeInfoResponseBodyData) SetSaleVersion(v int32) *GetFileDetectApiInvokeInfoResponseBodyData {
	s.SaleVersion = &v
	return s
}

func (s *GetFileDetectApiInvokeInfoResponseBodyData) SetTimeUnit(v string) *GetFileDetectApiInvokeInfoResponseBodyData {
	s.TimeUnit = &v
	return s
}

type GetFileDetectApiInvokeInfoResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetFileDetectApiInvokeInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetFileDetectApiInvokeInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileDetectApiInvokeInfoResponse) GoString() string {
	return s.String()
}

func (s *GetFileDetectApiInvokeInfoResponse) SetHeaders(v map[string]*string) *GetFileDetectApiInvokeInfoResponse {
	s.Headers = v
	return s
}

func (s *GetFileDetectApiInvokeInfoResponse) SetStatusCode(v int32) *GetFileDetectApiInvokeInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFileDetectApiInvokeInfoResponse) SetBody(v *GetFileDetectApiInvokeInfoResponseBody) *GetFileDetectApiInvokeInfoResponse {
	s.Body = v
	return s
}

type GetFileDetectResultRequest struct {
	// An array that consists of the identifiers of files. Only MD5 hash values are supported.
	HashKeyList []*string `json:"HashKeyList,omitempty" xml:"HashKeyList,omitempty" type:"Repeated"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The type of the file. Valid values:
	//
	// *   **0**: unknown file
	// *   **1**: binary file
	// *   **2**: webshell file
	// *   **4**: script file
	//
	// >  If you do not know the type of the file, set this parameter to 0.
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetFileDetectResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileDetectResultRequest) GoString() string {
	return s.String()
}

func (s *GetFileDetectResultRequest) SetHashKeyList(v []*string) *GetFileDetectResultRequest {
	s.HashKeyList = v
	return s
}

func (s *GetFileDetectResultRequest) SetSourceIp(v string) *GetFileDetectResultRequest {
	s.SourceIp = &v
	return s
}

func (s *GetFileDetectResultRequest) SetType(v int32) *GetFileDetectResultRequest {
	s.Type = &v
	return s
}

type GetFileDetectResultResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array that consists of file detection results.
	ResultList []*GetFileDetectResultResponseBodyResultList `json:"ResultList,omitempty" xml:"ResultList,omitempty" type:"Repeated"`
}

func (s GetFileDetectResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFileDetectResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetFileDetectResultResponseBody) SetRequestId(v string) *GetFileDetectResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFileDetectResultResponseBody) SetResultList(v []*GetFileDetectResultResponseBodyResultList) *GetFileDetectResultResponseBody {
	s.ResultList = v
	return s
}

type GetFileDetectResultResponseBodyResultList struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The extended information about the file detection result.
	Ext *string `json:"Ext,omitempty" xml:"Ext,omitempty"`
	// The identifier of the file. Only MD5 hash values are supported.
	HashKey *string `json:"HashKey,omitempty" xml:"HashKey,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The file detection result. Valid values:
	//
	// *   **0**: normal file.
	// *   **1**: suspicious file.
	// *   **3**: The detection is in progress.
	Result *int32 `json:"Result,omitempty" xml:"Result,omitempty"`
	// The score of file detection result.
	//
	// >  A higher score indicates a more suspicious file.
	Score *int32 `json:"Score,omitempty" xml:"Score,omitempty"`
	// The type of virus. Valid values:
	//
	// *   **Trojan**: self-mutating trojan
	// *   **WebShell**: webshell
	// *   **Backdoor**: backdoor program
	// *   **RansomWare**: ransomware
	// *   **Scanner**: scanner
	// *   **Stealer**: tool that is used to steal information
	// *   **Malbaseware**: tainted basic software
	// *   **Hacktool**: attacker tool
	// *   **Engtest**: engine test program
	// *   **Downloader**: trojan downloader
	// *   **Virus**: infectious virus
	// *   **Miner**: mining program
	// *   **Worm**: worm
	// *   **DDoS**: DDoS trojan
	// *   **Malware**: malicious program
	// *   **Backdoor**: reverse shell
	// *   **RiskWare**: software that has risks
	// *   **Proxytool**: proxy
	// *   **Suspicious**: suspicious program
	// *   **MalScript**: malicious script
	// *   **Rootkit**: rootkit
	// *   **Exploit**: exploit
	VirusType *string `json:"VirusType,omitempty" xml:"VirusType,omitempty"`
}

func (s GetFileDetectResultResponseBodyResultList) String() string {
	return tea.Prettify(s)
}

func (s GetFileDetectResultResponseBodyResultList) GoString() string {
	return s.String()
}

func (s *GetFileDetectResultResponseBodyResultList) SetCode(v string) *GetFileDetectResultResponseBodyResultList {
	s.Code = &v
	return s
}

func (s *GetFileDetectResultResponseBodyResultList) SetExt(v string) *GetFileDetectResultResponseBodyResultList {
	s.Ext = &v
	return s
}

func (s *GetFileDetectResultResponseBodyResultList) SetHashKey(v string) *GetFileDetectResultResponseBodyResultList {
	s.HashKey = &v
	return s
}

func (s *GetFileDetectResultResponseBodyResultList) SetMessage(v string) *GetFileDetectResultResponseBodyResultList {
	s.Message = &v
	return s
}

func (s *GetFileDetectResultResponseBodyResultList) SetResult(v int32) *GetFileDetectResultResponseBodyResultList {
	s.Result = &v
	return s
}

func (s *GetFileDetectResultResponseBodyResultList) SetScore(v int32) *GetFileDetectResultResponseBodyResultList {
	s.Score = &v
	return s
}

func (s *GetFileDetectResultResponseBodyResultList) SetVirusType(v string) *GetFileDetectResultResponseBodyResultList {
	s.VirusType = &v
	return s
}

type GetFileDetectResultResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetFileDetectResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetFileDetectResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileDetectResultResponse) GoString() string {
	return s.String()
}

func (s *GetFileDetectResultResponse) SetHeaders(v map[string]*string) *GetFileDetectResultResponse {
	s.Headers = v
	return s
}

func (s *GetFileDetectResultResponse) SetStatusCode(v int32) *GetFileDetectResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFileDetectResultResponse) SetBody(v *GetFileDetectResultResponseBody) *GetFileDetectResultResponse {
	s.Body = v
	return s
}

type GetHoneypotNodeRequest struct {
	// The ID of the management node.
	//
	// >  You can call the [ListHoneypotNode](~~ListHoneypotNode~~) operation to query the IDs of management nodes.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s GetHoneypotNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotNodeRequest) GoString() string {
	return s.String()
}

func (s *GetHoneypotNodeRequest) SetNodeId(v string) *GetHoneypotNodeRequest {
	s.NodeId = &v
	return s
}

type GetHoneypotNodeResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the management node.
	HoneypotNode *GetHoneypotNodeResponseBodyHoneypotNode `json:"HoneypotNode,omitempty" xml:"HoneypotNode,omitempty" type:"Struct"`
	// The HTTP status code of the request.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetHoneypotNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotNodeResponseBody) GoString() string {
	return s.String()
}

func (s *GetHoneypotNodeResponseBody) SetCode(v string) *GetHoneypotNodeResponseBody {
	s.Code = &v
	return s
}

func (s *GetHoneypotNodeResponseBody) SetHoneypotNode(v *GetHoneypotNodeResponseBodyHoneypotNode) *GetHoneypotNodeResponseBody {
	s.HoneypotNode = v
	return s
}

func (s *GetHoneypotNodeResponseBody) SetHttpStatusCode(v int32) *GetHoneypotNodeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetHoneypotNodeResponseBody) SetMessage(v string) *GetHoneypotNodeResponseBody {
	s.Message = &v
	return s
}

func (s *GetHoneypotNodeResponseBody) SetRequestId(v string) *GetHoneypotNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetHoneypotNodeResponseBody) SetSuccess(v bool) *GetHoneypotNodeResponseBody {
	s.Success = &v
	return s
}

type GetHoneypotNodeResponseBodyHoneypotNode struct {
	// Indicates whether the honeypot is allowed to access the Internet. Valid values:
	//
	// *   **true**: The honeypot is allowed to access the Internet.
	// *   **false**: The honeypot is not allowed to access the Internet.
	AllowHoneypotAccessInternet *bool `json:"AllowHoneypotAccessInternet,omitempty" xml:"AllowHoneypotAccessInternet,omitempty"`
	// The time when the management node is created.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the instance.
	EcsInstanceId *string `json:"EcsInstanceId,omitempty" xml:"EcsInstanceId,omitempty"`
	// The maximum number of honeypots that can be deployed to the management node.
	HoneypotTotalCount *int32 `json:"HoneypotTotalCount,omitempty" xml:"HoneypotTotalCount,omitempty"`
	// The number of honeypots that are deployed on the management node.
	HoneypotUsedCount *int32 `json:"HoneypotUsedCount,omitempty" xml:"HoneypotUsedCount,omitempty"`
	// The ID of the management node.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The IP address of the management node.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The name of the management node.
	NodeName *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	// The maximum number of probes that can be deployed for the management node.
	ProbeTotalCount *int32 `json:"ProbeTotalCount,omitempty" xml:"ProbeTotalCount,omitempty"`
	// The number of probes that are deployed for the management node.
	ProbeUsedCount *int32 `json:"ProbeUsedCount,omitempty" xml:"ProbeUsedCount,omitempty"`
	// An array that consists of the allowed CIDR blocks.
	SecurityGroupProbeIpList []*string `json:"SecurityGroupProbeIpList,omitempty" xml:"SecurityGroupProbeIpList,omitempty" type:"Repeated"`
	// The status of the management node. Valid values:
	//
	// *   **0**: preparing
	// *   **1**: normally running
	// *   **2**: abnormal
	// *   **4**: starting
	// *   **5**: upgrading
	TotalStatus *int32 `json:"TotalStatus,omitempty" xml:"TotalStatus,omitempty"`
	// Indicates whether the management node can be upgraded. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	UpgradeAvailable *bool `json:"UpgradeAvailable,omitempty" xml:"UpgradeAvailable,omitempty"`
}

func (s GetHoneypotNodeResponseBodyHoneypotNode) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotNodeResponseBodyHoneypotNode) GoString() string {
	return s.String()
}

func (s *GetHoneypotNodeResponseBodyHoneypotNode) SetAllowHoneypotAccessInternet(v bool) *GetHoneypotNodeResponseBodyHoneypotNode {
	s.AllowHoneypotAccessInternet = &v
	return s
}

func (s *GetHoneypotNodeResponseBodyHoneypotNode) SetCreateTime(v string) *GetHoneypotNodeResponseBodyHoneypotNode {
	s.CreateTime = &v
	return s
}

func (s *GetHoneypotNodeResponseBodyHoneypotNode) SetEcsInstanceId(v string) *GetHoneypotNodeResponseBodyHoneypotNode {
	s.EcsInstanceId = &v
	return s
}

func (s *GetHoneypotNodeResponseBodyHoneypotNode) SetHoneypotTotalCount(v int32) *GetHoneypotNodeResponseBodyHoneypotNode {
	s.HoneypotTotalCount = &v
	return s
}

func (s *GetHoneypotNodeResponseBodyHoneypotNode) SetHoneypotUsedCount(v int32) *GetHoneypotNodeResponseBodyHoneypotNode {
	s.HoneypotUsedCount = &v
	return s
}

func (s *GetHoneypotNodeResponseBodyHoneypotNode) SetNodeId(v string) *GetHoneypotNodeResponseBodyHoneypotNode {
	s.NodeId = &v
	return s
}

func (s *GetHoneypotNodeResponseBodyHoneypotNode) SetNodeIp(v string) *GetHoneypotNodeResponseBodyHoneypotNode {
	s.NodeIp = &v
	return s
}

func (s *GetHoneypotNodeResponseBodyHoneypotNode) SetNodeName(v string) *GetHoneypotNodeResponseBodyHoneypotNode {
	s.NodeName = &v
	return s
}

func (s *GetHoneypotNodeResponseBodyHoneypotNode) SetProbeTotalCount(v int32) *GetHoneypotNodeResponseBodyHoneypotNode {
	s.ProbeTotalCount = &v
	return s
}

func (s *GetHoneypotNodeResponseBodyHoneypotNode) SetProbeUsedCount(v int32) *GetHoneypotNodeResponseBodyHoneypotNode {
	s.ProbeUsedCount = &v
	return s
}

func (s *GetHoneypotNodeResponseBodyHoneypotNode) SetSecurityGroupProbeIpList(v []*string) *GetHoneypotNodeResponseBodyHoneypotNode {
	s.SecurityGroupProbeIpList = v
	return s
}

func (s *GetHoneypotNodeResponseBodyHoneypotNode) SetTotalStatus(v int32) *GetHoneypotNodeResponseBodyHoneypotNode {
	s.TotalStatus = &v
	return s
}

func (s *GetHoneypotNodeResponseBodyHoneypotNode) SetUpgradeAvailable(v bool) *GetHoneypotNodeResponseBodyHoneypotNode {
	s.UpgradeAvailable = &v
	return s
}

type GetHoneypotNodeResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetHoneypotNodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetHoneypotNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotNodeResponse) GoString() string {
	return s.String()
}

func (s *GetHoneypotNodeResponse) SetHeaders(v map[string]*string) *GetHoneypotNodeResponse {
	s.Headers = v
	return s
}

func (s *GetHoneypotNodeResponse) SetStatusCode(v int32) *GetHoneypotNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHoneypotNodeResponse) SetBody(v *GetHoneypotNodeResponseBody) *GetHoneypotNodeResponse {
	s.Body = v
	return s
}

type GetHoneypotPresetRequest struct {
	HoneypotPresetId *string `json:"HoneypotPresetId,omitempty" xml:"HoneypotPresetId,omitempty"`
	Lang             *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s GetHoneypotPresetRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotPresetRequest) GoString() string {
	return s.String()
}

func (s *GetHoneypotPresetRequest) SetHoneypotPresetId(v string) *GetHoneypotPresetRequest {
	s.HoneypotPresetId = &v
	return s
}

func (s *GetHoneypotPresetRequest) SetLang(v string) *GetHoneypotPresetRequest {
	s.Lang = &v
	return s
}

type GetHoneypotPresetResponseBody struct {
	Code           *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *GetHoneypotPresetResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetHoneypotPresetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotPresetResponseBody) GoString() string {
	return s.String()
}

func (s *GetHoneypotPresetResponseBody) SetCode(v string) *GetHoneypotPresetResponseBody {
	s.Code = &v
	return s
}

func (s *GetHoneypotPresetResponseBody) SetData(v *GetHoneypotPresetResponseBodyData) *GetHoneypotPresetResponseBody {
	s.Data = v
	return s
}

func (s *GetHoneypotPresetResponseBody) SetHttpStatusCode(v int32) *GetHoneypotPresetResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetHoneypotPresetResponseBody) SetMessage(v string) *GetHoneypotPresetResponseBody {
	s.Message = &v
	return s
}

func (s *GetHoneypotPresetResponseBody) SetRequestId(v string) *GetHoneypotPresetResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetHoneypotPresetResponseBody) SetSuccess(v bool) *GetHoneypotPresetResponseBody {
	s.Success = &v
	return s
}

type GetHoneypotPresetResponseBodyData struct {
	ControlNodeName          *string                                          `json:"ControlNodeName,omitempty" xml:"ControlNodeName,omitempty"`
	FileInfoList             []*GetHoneypotPresetResponseBodyDataFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	HoneypotImageDisplayName *string                                          `json:"HoneypotImageDisplayName,omitempty" xml:"HoneypotImageDisplayName,omitempty"`
	HoneypotImageName        *string                                          `json:"HoneypotImageName,omitempty" xml:"HoneypotImageName,omitempty"`
	HoneypotPresetId         *string                                          `json:"HoneypotPresetId,omitempty" xml:"HoneypotPresetId,omitempty"`
	Meta                     *string                                          `json:"Meta,omitempty" xml:"Meta,omitempty"`
	NodeId                   *string                                          `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	PresetName               *string                                          `json:"PresetName,omitempty" xml:"PresetName,omitempty"`
	PresetType               *string                                          `json:"PresetType,omitempty" xml:"PresetType,omitempty"`
}

func (s GetHoneypotPresetResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotPresetResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetHoneypotPresetResponseBodyData) SetControlNodeName(v string) *GetHoneypotPresetResponseBodyData {
	s.ControlNodeName = &v
	return s
}

func (s *GetHoneypotPresetResponseBodyData) SetFileInfoList(v []*GetHoneypotPresetResponseBodyDataFileInfoList) *GetHoneypotPresetResponseBodyData {
	s.FileInfoList = v
	return s
}

func (s *GetHoneypotPresetResponseBodyData) SetHoneypotImageDisplayName(v string) *GetHoneypotPresetResponseBodyData {
	s.HoneypotImageDisplayName = &v
	return s
}

func (s *GetHoneypotPresetResponseBodyData) SetHoneypotImageName(v string) *GetHoneypotPresetResponseBodyData {
	s.HoneypotImageName = &v
	return s
}

func (s *GetHoneypotPresetResponseBodyData) SetHoneypotPresetId(v string) *GetHoneypotPresetResponseBodyData {
	s.HoneypotPresetId = &v
	return s
}

func (s *GetHoneypotPresetResponseBodyData) SetMeta(v string) *GetHoneypotPresetResponseBodyData {
	s.Meta = &v
	return s
}

func (s *GetHoneypotPresetResponseBodyData) SetNodeId(v string) *GetHoneypotPresetResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *GetHoneypotPresetResponseBodyData) SetPresetName(v string) *GetHoneypotPresetResponseBodyData {
	s.PresetName = &v
	return s
}

func (s *GetHoneypotPresetResponseBodyData) SetPresetType(v string) *GetHoneypotPresetResponseBodyData {
	s.PresetType = &v
	return s
}

type GetHoneypotPresetResponseBodyDataFileInfoList struct {
	FileId   *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	OssUrl   *string `json:"OssUrl,omitempty" xml:"OssUrl,omitempty"`
}

func (s GetHoneypotPresetResponseBodyDataFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotPresetResponseBodyDataFileInfoList) GoString() string {
	return s.String()
}

func (s *GetHoneypotPresetResponseBodyDataFileInfoList) SetFileId(v string) *GetHoneypotPresetResponseBodyDataFileInfoList {
	s.FileId = &v
	return s
}

func (s *GetHoneypotPresetResponseBodyDataFileInfoList) SetFileName(v string) *GetHoneypotPresetResponseBodyDataFileInfoList {
	s.FileName = &v
	return s
}

func (s *GetHoneypotPresetResponseBodyDataFileInfoList) SetOssUrl(v string) *GetHoneypotPresetResponseBodyDataFileInfoList {
	s.OssUrl = &v
	return s
}

type GetHoneypotPresetResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetHoneypotPresetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetHoneypotPresetResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotPresetResponse) GoString() string {
	return s.String()
}

func (s *GetHoneypotPresetResponse) SetHeaders(v map[string]*string) *GetHoneypotPresetResponse {
	s.Headers = v
	return s
}

func (s *GetHoneypotPresetResponse) SetStatusCode(v int32) *GetHoneypotPresetResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHoneypotPresetResponse) SetBody(v *GetHoneypotPresetResponseBody) *GetHoneypotPresetResponse {
	s.Body = v
	return s
}

type GetHoneypotProbeRequest struct {
	ProbeId *string `json:"ProbeId,omitempty" xml:"ProbeId,omitempty"`
}

func (s GetHoneypotProbeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotProbeRequest) GoString() string {
	return s.String()
}

func (s *GetHoneypotProbeRequest) SetProbeId(v string) *GetHoneypotProbeRequest {
	s.ProbeId = &v
	return s
}

type GetHoneypotProbeResponseBody struct {
	Code           *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *GetHoneypotProbeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                            `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetHoneypotProbeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotProbeResponseBody) GoString() string {
	return s.String()
}

func (s *GetHoneypotProbeResponseBody) SetCode(v string) *GetHoneypotProbeResponseBody {
	s.Code = &v
	return s
}

func (s *GetHoneypotProbeResponseBody) SetData(v *GetHoneypotProbeResponseBodyData) *GetHoneypotProbeResponseBody {
	s.Data = v
	return s
}

func (s *GetHoneypotProbeResponseBody) SetHttpStatusCode(v int32) *GetHoneypotProbeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetHoneypotProbeResponseBody) SetMessage(v string) *GetHoneypotProbeResponseBody {
	s.Message = &v
	return s
}

func (s *GetHoneypotProbeResponseBody) SetRequestId(v string) *GetHoneypotProbeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetHoneypotProbeResponseBody) SetSuccess(v bool) *GetHoneypotProbeResponseBody {
	s.Success = &v
	return s
}

type GetHoneypotProbeResponseBodyData struct {
	Arp                   *bool                                                    `json:"Arp,omitempty" xml:"Arp,omitempty"`
	CanListenIpList       []*string                                                `json:"CanListenIpList,omitempty" xml:"CanListenIpList,omitempty" type:"Repeated"`
	CidrList              []*string                                                `json:"CidrList,omitempty" xml:"CidrList,omitempty" type:"Repeated"`
	ControlNode           *GetHoneypotProbeResponseBodyDataControlNode             `json:"ControlNode,omitempty" xml:"ControlNode,omitempty" type:"Struct"`
	CpuLoad               *float64                                                 `json:"CpuLoad,omitempty" xml:"CpuLoad,omitempty"`
	DeployTime            *int64                                                   `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	DisplayName           *string                                                  `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	HoneyPotProbeScanPort *GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort   `json:"HoneyPotProbeScanPort,omitempty" xml:"HoneyPotProbeScanPort,omitempty" type:"Struct"`
	HoneypotProbeBindList []*GetHoneypotProbeResponseBodyDataHoneypotProbeBindList `json:"HoneypotProbeBindList,omitempty" xml:"HoneypotProbeBindList,omitempty" type:"Repeated"`
	HostIp                *string                                                  `json:"HostIp,omitempty" xml:"HostIp,omitempty"`
	ListenIpList          []*string                                                `json:"ListenIpList,omitempty" xml:"ListenIpList,omitempty" type:"Repeated"`
	MemoryLoad            *float64                                                 `json:"MemoryLoad,omitempty" xml:"MemoryLoad,omitempty"`
	OsType                *string                                                  `json:"OsType,omitempty" xml:"OsType,omitempty"`
	Ping                  *bool                                                    `json:"Ping,omitempty" xml:"Ping,omitempty"`
	ProbeId               *string                                                  `json:"ProbeId,omitempty" xml:"ProbeId,omitempty"`
	ProbeType             *string                                                  `json:"ProbeType,omitempty" xml:"ProbeType,omitempty"`
	ProbeVersion          *string                                                  `json:"ProbeVersion,omitempty" xml:"ProbeVersion,omitempty"`
	ProxyIp               *string                                                  `json:"ProxyIp,omitempty" xml:"ProxyIp,omitempty"`
	Status                *int32                                                   `json:"Status,omitempty" xml:"Status,omitempty"`
	Uuid                  *string                                                  `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	VpcId                 *string                                                  `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s GetHoneypotProbeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotProbeResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetHoneypotProbeResponseBodyData) SetArp(v bool) *GetHoneypotProbeResponseBodyData {
	s.Arp = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetCanListenIpList(v []*string) *GetHoneypotProbeResponseBodyData {
	s.CanListenIpList = v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetCidrList(v []*string) *GetHoneypotProbeResponseBodyData {
	s.CidrList = v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetControlNode(v *GetHoneypotProbeResponseBodyDataControlNode) *GetHoneypotProbeResponseBodyData {
	s.ControlNode = v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetCpuLoad(v float64) *GetHoneypotProbeResponseBodyData {
	s.CpuLoad = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetDeployTime(v int64) *GetHoneypotProbeResponseBodyData {
	s.DeployTime = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetDisplayName(v string) *GetHoneypotProbeResponseBodyData {
	s.DisplayName = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetHoneyPotProbeScanPort(v *GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort) *GetHoneypotProbeResponseBodyData {
	s.HoneyPotProbeScanPort = v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetHoneypotProbeBindList(v []*GetHoneypotProbeResponseBodyDataHoneypotProbeBindList) *GetHoneypotProbeResponseBodyData {
	s.HoneypotProbeBindList = v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetHostIp(v string) *GetHoneypotProbeResponseBodyData {
	s.HostIp = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetListenIpList(v []*string) *GetHoneypotProbeResponseBodyData {
	s.ListenIpList = v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetMemoryLoad(v float64) *GetHoneypotProbeResponseBodyData {
	s.MemoryLoad = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetOsType(v string) *GetHoneypotProbeResponseBodyData {
	s.OsType = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetPing(v bool) *GetHoneypotProbeResponseBodyData {
	s.Ping = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetProbeId(v string) *GetHoneypotProbeResponseBodyData {
	s.ProbeId = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetProbeType(v string) *GetHoneypotProbeResponseBodyData {
	s.ProbeType = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetProbeVersion(v string) *GetHoneypotProbeResponseBodyData {
	s.ProbeVersion = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetProxyIp(v string) *GetHoneypotProbeResponseBodyData {
	s.ProxyIp = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetStatus(v int32) *GetHoneypotProbeResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetUuid(v string) *GetHoneypotProbeResponseBodyData {
	s.Uuid = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyData) SetVpcId(v string) *GetHoneypotProbeResponseBodyData {
	s.VpcId = &v
	return s
}

type GetHoneypotProbeResponseBodyDataControlNode struct {
	EcsInstanceId *string `json:"EcsInstanceId,omitempty" xml:"EcsInstanceId,omitempty"`
	NodeId        *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName      *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
}

func (s GetHoneypotProbeResponseBodyDataControlNode) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotProbeResponseBodyDataControlNode) GoString() string {
	return s.String()
}

func (s *GetHoneypotProbeResponseBodyDataControlNode) SetEcsInstanceId(v string) *GetHoneypotProbeResponseBodyDataControlNode {
	s.EcsInstanceId = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataControlNode) SetNodeId(v string) *GetHoneypotProbeResponseBodyDataControlNode {
	s.NodeId = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataControlNode) SetNodeName(v string) *GetHoneypotProbeResponseBodyDataControlNode {
	s.NodeName = &v
	return s
}

type GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort struct {
	Id            *int64    `json:"Id,omitempty" xml:"Id,omitempty"`
	Ports         *string   `json:"Ports,omitempty" xml:"Ports,omitempty"`
	ProbeId       *string   `json:"ProbeId,omitempty" xml:"ProbeId,omitempty"`
	ServiceIpList []*string `json:"ServiceIpList,omitempty" xml:"ServiceIpList,omitempty" type:"Repeated"`
	Status        *int32    `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort) GoString() string {
	return s.String()
}

func (s *GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort) SetId(v int64) *GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort {
	s.Id = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort) SetPorts(v string) *GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort {
	s.Ports = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort) SetProbeId(v string) *GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort {
	s.ProbeId = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort) SetServiceIpList(v []*string) *GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort {
	s.ServiceIpList = v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort) SetStatus(v int32) *GetHoneypotProbeResponseBodyDataHoneyPotProbeScanPort {
	s.Status = &v
	return s
}

type GetHoneypotProbeResponseBodyDataHoneypotProbeBindList struct {
	BindId        *string                                                              `json:"BindId,omitempty" xml:"BindId,omitempty"`
	BindPortList  []*GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList `json:"BindPortList,omitempty" xml:"BindPortList,omitempty" type:"Repeated"`
	HoneypotId    *string                                                              `json:"HoneypotId,omitempty" xml:"HoneypotId,omitempty"`
	ServiceIpList []*string                                                            `json:"ServiceIpList,omitempty" xml:"ServiceIpList,omitempty" type:"Repeated"`
	Status        *int32                                                               `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetHoneypotProbeResponseBodyDataHoneypotProbeBindList) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotProbeResponseBodyDataHoneypotProbeBindList) GoString() string {
	return s.String()
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindList) SetBindId(v string) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindList {
	s.BindId = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindList) SetBindPortList(v []*GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindList {
	s.BindPortList = v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindList) SetHoneypotId(v string) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindList {
	s.HoneypotId = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindList) SetServiceIpList(v []*string) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindList {
	s.ServiceIpList = v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindList) SetStatus(v int32) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindList {
	s.Status = &v
	return s
}

type GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList struct {
	BindPort   *bool   `json:"BindPort,omitempty" xml:"BindPort,omitempty"`
	EndPort    *int32  `json:"EndPort,omitempty" xml:"EndPort,omitempty"`
	Err        *string `json:"Err,omitempty" xml:"Err,omitempty"`
	Fixed      *bool   `json:"Fixed,omitempty" xml:"Fixed,omitempty"`
	Id         *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Msg        *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	Proto      *string `json:"Proto,omitempty" xml:"Proto,omitempty"`
	StartPort  *int32  `json:"StartPort,omitempty" xml:"StartPort,omitempty"`
	Status     *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	TargetPort *int32  `json:"TargetPort,omitempty" xml:"TargetPort,omitempty"`
}

func (s GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList) GoString() string {
	return s.String()
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList) SetBindPort(v bool) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList {
	s.BindPort = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList) SetEndPort(v int32) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList {
	s.EndPort = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList) SetErr(v string) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList {
	s.Err = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList) SetFixed(v bool) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList {
	s.Fixed = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList) SetId(v int64) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList {
	s.Id = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList) SetMsg(v string) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList {
	s.Msg = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList) SetProto(v string) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList {
	s.Proto = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList) SetStartPort(v int32) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList {
	s.StartPort = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList) SetStatus(v int32) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList {
	s.Status = &v
	return s
}

func (s *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList) SetTargetPort(v int32) *GetHoneypotProbeResponseBodyDataHoneypotProbeBindListBindPortList {
	s.TargetPort = &v
	return s
}

type GetHoneypotProbeResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetHoneypotProbeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetHoneypotProbeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHoneypotProbeResponse) GoString() string {
	return s.String()
}

func (s *GetHoneypotProbeResponse) SetHeaders(v map[string]*string) *GetHoneypotProbeResponse {
	s.Headers = v
	return s
}

func (s *GetHoneypotProbeResponse) SetStatusCode(v int32) *GetHoneypotProbeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHoneypotProbeResponse) SetBody(v *GetHoneypotProbeResponseBody) *GetHoneypotProbeResponse {
	s.Body = v
	return s
}

type GetImageScanNumInPeriodRequest struct {
	PastDay *string `json:"PastDay,omitempty" xml:"PastDay,omitempty"`
}

func (s GetImageScanNumInPeriodRequest) String() string {
	return tea.Prettify(s)
}

func (s GetImageScanNumInPeriodRequest) GoString() string {
	return s.String()
}

func (s *GetImageScanNumInPeriodRequest) SetPastDay(v string) *GetImageScanNumInPeriodRequest {
	s.PastDay = &v
	return s
}

type GetImageScanNumInPeriodResponseBody struct {
	ImageScanData *GetImageScanNumInPeriodResponseBodyImageScanData `json:"ImageScanData,omitempty" xml:"ImageScanData,omitempty" type:"Struct"`
	RequestId     *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetImageScanNumInPeriodResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetImageScanNumInPeriodResponseBody) GoString() string {
	return s.String()
}

func (s *GetImageScanNumInPeriodResponseBody) SetImageScanData(v *GetImageScanNumInPeriodResponseBodyImageScanData) *GetImageScanNumInPeriodResponseBody {
	s.ImageScanData = v
	return s
}

func (s *GetImageScanNumInPeriodResponseBody) SetRequestId(v string) *GetImageScanNumInPeriodResponseBody {
	s.RequestId = &v
	return s
}

type GetImageScanNumInPeriodResponseBodyImageScanData struct {
	ImageScanCount *int32 `json:"ImageScanCount,omitempty" xml:"ImageScanCount,omitempty"`
}

func (s GetImageScanNumInPeriodResponseBodyImageScanData) String() string {
	return tea.Prettify(s)
}

func (s GetImageScanNumInPeriodResponseBodyImageScanData) GoString() string {
	return s.String()
}

func (s *GetImageScanNumInPeriodResponseBodyImageScanData) SetImageScanCount(v int32) *GetImageScanNumInPeriodResponseBodyImageScanData {
	s.ImageScanCount = &v
	return s
}

type GetImageScanNumInPeriodResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetImageScanNumInPeriodResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetImageScanNumInPeriodResponse) String() string {
	return tea.Prettify(s)
}

func (s GetImageScanNumInPeriodResponse) GoString() string {
	return s.String()
}

func (s *GetImageScanNumInPeriodResponse) SetHeaders(v map[string]*string) *GetImageScanNumInPeriodResponse {
	s.Headers = v
	return s
}

func (s *GetImageScanNumInPeriodResponse) SetStatusCode(v int32) *GetImageScanNumInPeriodResponse {
	s.StatusCode = &v
	return s
}

func (s *GetImageScanNumInPeriodResponse) SetBody(v *GetImageScanNumInPeriodResponseBody) *GetImageScanNumInPeriodResponse {
	s.Body = v
	return s
}

type GetInterceptionRuleDetailRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RuleId    *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s GetInterceptionRuleDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInterceptionRuleDetailRequest) GoString() string {
	return s.String()
}

func (s *GetInterceptionRuleDetailRequest) SetClusterId(v string) *GetInterceptionRuleDetailRequest {
	s.ClusterId = &v
	return s
}

func (s *GetInterceptionRuleDetailRequest) SetRuleId(v string) *GetInterceptionRuleDetailRequest {
	s.RuleId = &v
	return s
}

type GetInterceptionRuleDetailResponseBody struct {
	InterceptionRuleDetail *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail `json:"InterceptionRuleDetail,omitempty" xml:"InterceptionRuleDetail,omitempty" type:"Struct"`
	RequestId              *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetInterceptionRuleDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInterceptionRuleDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetInterceptionRuleDetailResponseBody) SetInterceptionRuleDetail(v *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail) *GetInterceptionRuleDetailResponseBody {
	s.InterceptionRuleDetail = v
	return s
}

func (s *GetInterceptionRuleDetailResponseBody) SetRequestId(v string) *GetInterceptionRuleDetailResponseBody {
	s.RequestId = &v
	return s
}

type GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail struct {
	DstTarget     *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget `json:"DstTarget,omitempty" xml:"DstTarget,omitempty" type:"Struct"`
	InterceptType *int64                                                                `json:"InterceptType,omitempty" xml:"InterceptType,omitempty"`
	OrderIndex    *int64                                                                `json:"OrderIndex,omitempty" xml:"OrderIndex,omitempty"`
	RuleId        *int64                                                                `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	RuleName      *string                                                               `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleSwitch    *int32                                                                `json:"RuleSwitch,omitempty" xml:"RuleSwitch,omitempty"`
	RuleType      *string                                                               `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	SrcTarget     *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget `json:"SrcTarget,omitempty" xml:"SrcTarget,omitempty" type:"Struct"`
}

func (s GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail) String() string {
	return tea.Prettify(s)
}

func (s GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail) GoString() string {
	return s.String()
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail) SetDstTarget(v *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail {
	s.DstTarget = v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail) SetInterceptType(v int64) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail {
	s.InterceptType = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail) SetOrderIndex(v int64) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail {
	s.OrderIndex = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail) SetRuleId(v int64) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail {
	s.RuleId = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail) SetRuleName(v string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail {
	s.RuleName = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail) SetRuleSwitch(v int32) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail {
	s.RuleSwitch = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail) SetRuleType(v string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail {
	s.RuleType = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail) SetSrcTarget(v *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetail {
	s.SrcTarget = v
	return s
}

type GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget struct {
	AppName    *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ImageList  []*string `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	Namespace  *string   `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Ports      []*string `json:"Ports,omitempty" xml:"Ports,omitempty" type:"Repeated"`
	RuleType   *string   `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	TagList    []*string `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	TargetId   *int32    `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	TargetName *string   `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	TargetType *string   `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget) String() string {
	return tea.Prettify(s)
}

func (s GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget) GoString() string {
	return s.String()
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget) SetAppName(v string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget {
	s.AppName = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget) SetImageList(v []*string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget {
	s.ImageList = v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget) SetNamespace(v string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget {
	s.Namespace = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget) SetPorts(v []*string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget {
	s.Ports = v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget) SetRuleType(v string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget {
	s.RuleType = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget) SetTagList(v []*string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget {
	s.TagList = v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget) SetTargetId(v int32) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget {
	s.TargetId = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget) SetTargetName(v string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget {
	s.TargetName = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget) SetTargetType(v string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailDstTarget {
	s.TargetType = &v
	return s
}

type GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget struct {
	AppName    *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ImageList  []*string `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	Namespace  *string   `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RuleType   *string   `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	TagList    []*string `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	TargetId   *int32    `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	TargetName *string   `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	TargetType *string   `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget) String() string {
	return tea.Prettify(s)
}

func (s GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget) GoString() string {
	return s.String()
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget) SetAppName(v string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget {
	s.AppName = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget) SetImageList(v []*string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget {
	s.ImageList = v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget) SetNamespace(v string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget {
	s.Namespace = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget) SetRuleType(v string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget {
	s.RuleType = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget) SetTagList(v []*string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget {
	s.TagList = v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget) SetTargetId(v int32) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget {
	s.TargetId = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget) SetTargetName(v string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget {
	s.TargetName = &v
	return s
}

func (s *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget) SetTargetType(v string) *GetInterceptionRuleDetailResponseBodyInterceptionRuleDetailSrcTarget {
	s.TargetType = &v
	return s
}

type GetInterceptionRuleDetailResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetInterceptionRuleDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInterceptionRuleDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInterceptionRuleDetailResponse) GoString() string {
	return s.String()
}

func (s *GetInterceptionRuleDetailResponse) SetHeaders(v map[string]*string) *GetInterceptionRuleDetailResponse {
	s.Headers = v
	return s
}

func (s *GetInterceptionRuleDetailResponse) SetStatusCode(v int32) *GetInterceptionRuleDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInterceptionRuleDetailResponse) SetBody(v *GetInterceptionRuleDetailResponseBody) *GetInterceptionRuleDetailResponse {
	s.Body = v
	return s
}

type GetInterceptionSummaryResponseBody struct {
	InterceptionSummary *GetInterceptionSummaryResponseBodyInterceptionSummary `json:"InterceptionSummary,omitempty" xml:"InterceptionSummary,omitempty" type:"Struct"`
	RequestId           *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetInterceptionSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInterceptionSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *GetInterceptionSummaryResponseBody) SetInterceptionSummary(v *GetInterceptionSummaryResponseBodyInterceptionSummary) *GetInterceptionSummaryResponseBody {
	s.InterceptionSummary = v
	return s
}

func (s *GetInterceptionSummaryResponseBody) SetRequestId(v string) *GetInterceptionSummaryResponseBody {
	s.RequestId = &v
	return s
}

type GetInterceptionSummaryResponseBodyInterceptionSummary struct {
	CloseClusterCount *int32 `json:"CloseClusterCount,omitempty" xml:"CloseClusterCount,omitempty"`
	CloseRuleCount    *int32 `json:"CloseRuleCount,omitempty" xml:"CloseRuleCount,omitempty"`
	ClusterCount      *int32 `json:"ClusterCount,omitempty" xml:"ClusterCount,omitempty"`
	OpenClusterCount  *int32 `json:"OpenClusterCount,omitempty" xml:"OpenClusterCount,omitempty"`
	OpenRuleCount     *int32 `json:"OpenRuleCount,omitempty" xml:"OpenRuleCount,omitempty"`
	RiskCount180Day   *int64 `json:"RiskCount180Day,omitempty" xml:"RiskCount180Day,omitempty"`
	RiskCount30Day    *int64 `json:"RiskCount30Day,omitempty" xml:"RiskCount30Day,omitempty"`
	RiskCountToday    *int64 `json:"RiskCountToday,omitempty" xml:"RiskCountToday,omitempty"`
	RuleCount         *int32 `json:"RuleCount,omitempty" xml:"RuleCount,omitempty"`
}

func (s GetInterceptionSummaryResponseBodyInterceptionSummary) String() string {
	return tea.Prettify(s)
}

func (s GetInterceptionSummaryResponseBodyInterceptionSummary) GoString() string {
	return s.String()
}

func (s *GetInterceptionSummaryResponseBodyInterceptionSummary) SetCloseClusterCount(v int32) *GetInterceptionSummaryResponseBodyInterceptionSummary {
	s.CloseClusterCount = &v
	return s
}

func (s *GetInterceptionSummaryResponseBodyInterceptionSummary) SetCloseRuleCount(v int32) *GetInterceptionSummaryResponseBodyInterceptionSummary {
	s.CloseRuleCount = &v
	return s
}

func (s *GetInterceptionSummaryResponseBodyInterceptionSummary) SetClusterCount(v int32) *GetInterceptionSummaryResponseBodyInterceptionSummary {
	s.ClusterCount = &v
	return s
}

func (s *GetInterceptionSummaryResponseBodyInterceptionSummary) SetOpenClusterCount(v int32) *GetInterceptionSummaryResponseBodyInterceptionSummary {
	s.OpenClusterCount = &v
	return s
}

func (s *GetInterceptionSummaryResponseBodyInterceptionSummary) SetOpenRuleCount(v int32) *GetInterceptionSummaryResponseBodyInterceptionSummary {
	s.OpenRuleCount = &v
	return s
}

func (s *GetInterceptionSummaryResponseBodyInterceptionSummary) SetRiskCount180Day(v int64) *GetInterceptionSummaryResponseBodyInterceptionSummary {
	s.RiskCount180Day = &v
	return s
}

func (s *GetInterceptionSummaryResponseBodyInterceptionSummary) SetRiskCount30Day(v int64) *GetInterceptionSummaryResponseBodyInterceptionSummary {
	s.RiskCount30Day = &v
	return s
}

func (s *GetInterceptionSummaryResponseBodyInterceptionSummary) SetRiskCountToday(v int64) *GetInterceptionSummaryResponseBodyInterceptionSummary {
	s.RiskCountToday = &v
	return s
}

func (s *GetInterceptionSummaryResponseBodyInterceptionSummary) SetRuleCount(v int32) *GetInterceptionSummaryResponseBodyInterceptionSummary {
	s.RuleCount = &v
	return s
}

type GetInterceptionSummaryResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetInterceptionSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInterceptionSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInterceptionSummaryResponse) GoString() string {
	return s.String()
}

func (s *GetInterceptionSummaryResponse) SetHeaders(v map[string]*string) *GetInterceptionSummaryResponse {
	s.Headers = v
	return s
}

func (s *GetInterceptionSummaryResponse) SetStatusCode(v int32) *GetInterceptionSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInterceptionSummaryResponse) SetBody(v *GetInterceptionSummaryResponseBody) *GetInterceptionSummaryResponse {
	s.Body = v
	return s
}

type GetInterceptionTargetDetailRequest struct {
	TargetId *int64 `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
}

func (s GetInterceptionTargetDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInterceptionTargetDetailRequest) GoString() string {
	return s.String()
}

func (s *GetInterceptionTargetDetailRequest) SetTargetId(v int64) *GetInterceptionTargetDetailRequest {
	s.TargetId = &v
	return s
}

type GetInterceptionTargetDetailResponseBody struct {
	RequestId  *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RuleTarget *GetInterceptionTargetDetailResponseBodyRuleTarget `json:"RuleTarget,omitempty" xml:"RuleTarget,omitempty" type:"Struct"`
}

func (s GetInterceptionTargetDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInterceptionTargetDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetInterceptionTargetDetailResponseBody) SetRequestId(v string) *GetInterceptionTargetDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInterceptionTargetDetailResponseBody) SetRuleTarget(v *GetInterceptionTargetDetailResponseBodyRuleTarget) *GetInterceptionTargetDetailResponseBody {
	s.RuleTarget = v
	return s
}

type GetInterceptionTargetDetailResponseBodyRuleTarget struct {
	AppName     *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ClusterId   *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName *string   `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ImageList   []*string `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	Namespace   *string   `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	TagList     []*string `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	TargetId    *int64    `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	TargetName  *string   `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	TargetType  *string   `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s GetInterceptionTargetDetailResponseBodyRuleTarget) String() string {
	return tea.Prettify(s)
}

func (s GetInterceptionTargetDetailResponseBodyRuleTarget) GoString() string {
	return s.String()
}

func (s *GetInterceptionTargetDetailResponseBodyRuleTarget) SetAppName(v string) *GetInterceptionTargetDetailResponseBodyRuleTarget {
	s.AppName = &v
	return s
}

func (s *GetInterceptionTargetDetailResponseBodyRuleTarget) SetClusterId(v string) *GetInterceptionTargetDetailResponseBodyRuleTarget {
	s.ClusterId = &v
	return s
}

func (s *GetInterceptionTargetDetailResponseBodyRuleTarget) SetClusterName(v string) *GetInterceptionTargetDetailResponseBodyRuleTarget {
	s.ClusterName = &v
	return s
}

func (s *GetInterceptionTargetDetailResponseBodyRuleTarget) SetImageList(v []*string) *GetInterceptionTargetDetailResponseBodyRuleTarget {
	s.ImageList = v
	return s
}

func (s *GetInterceptionTargetDetailResponseBodyRuleTarget) SetNamespace(v string) *GetInterceptionTargetDetailResponseBodyRuleTarget {
	s.Namespace = &v
	return s
}

func (s *GetInterceptionTargetDetailResponseBodyRuleTarget) SetTagList(v []*string) *GetInterceptionTargetDetailResponseBodyRuleTarget {
	s.TagList = v
	return s
}

func (s *GetInterceptionTargetDetailResponseBodyRuleTarget) SetTargetId(v int64) *GetInterceptionTargetDetailResponseBodyRuleTarget {
	s.TargetId = &v
	return s
}

func (s *GetInterceptionTargetDetailResponseBodyRuleTarget) SetTargetName(v string) *GetInterceptionTargetDetailResponseBodyRuleTarget {
	s.TargetName = &v
	return s
}

func (s *GetInterceptionTargetDetailResponseBodyRuleTarget) SetTargetType(v string) *GetInterceptionTargetDetailResponseBodyRuleTarget {
	s.TargetType = &v
	return s
}

type GetInterceptionTargetDetailResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetInterceptionTargetDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInterceptionTargetDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInterceptionTargetDetailResponse) GoString() string {
	return s.String()
}

func (s *GetInterceptionTargetDetailResponse) SetHeaders(v map[string]*string) *GetInterceptionTargetDetailResponse {
	s.Headers = v
	return s
}

func (s *GetInterceptionTargetDetailResponse) SetStatusCode(v int32) *GetInterceptionTargetDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInterceptionTargetDetailResponse) SetBody(v *GetInterceptionTargetDetailResponseBody) *GetInterceptionTargetDetailResponse {
	s.Body = v
	return s
}

type GetLastOnceTaskInfoRequest struct {
	Source   *string `json:"Source,omitempty" xml:"Source,omitempty"`
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s GetLastOnceTaskInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLastOnceTaskInfoRequest) GoString() string {
	return s.String()
}

func (s *GetLastOnceTaskInfoRequest) SetSource(v string) *GetLastOnceTaskInfoRequest {
	s.Source = &v
	return s
}

func (s *GetLastOnceTaskInfoRequest) SetTaskName(v string) *GetLastOnceTaskInfoRequest {
	s.TaskName = &v
	return s
}

func (s *GetLastOnceTaskInfoRequest) SetTaskType(v string) *GetLastOnceTaskInfoRequest {
	s.TaskType = &v
	return s
}

type GetLastOnceTaskInfoResponseBody struct {
	CollectTime *int64                                   `json:"CollectTime,omitempty" xml:"CollectTime,omitempty"`
	FinishCount *int32                                   `json:"FinishCount,omitempty" xml:"FinishCount,omitempty"`
	RequestId   *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId      *int64                                   `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskInfo    *GetLastOnceTaskInfoResponseBodyTaskInfo `json:"TaskInfo,omitempty" xml:"TaskInfo,omitempty" type:"Struct"`
	TotalCount  *int32                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetLastOnceTaskInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLastOnceTaskInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetLastOnceTaskInfoResponseBody) SetCollectTime(v int64) *GetLastOnceTaskInfoResponseBody {
	s.CollectTime = &v
	return s
}

func (s *GetLastOnceTaskInfoResponseBody) SetFinishCount(v int32) *GetLastOnceTaskInfoResponseBody {
	s.FinishCount = &v
	return s
}

func (s *GetLastOnceTaskInfoResponseBody) SetRequestId(v string) *GetLastOnceTaskInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLastOnceTaskInfoResponseBody) SetTaskId(v int64) *GetLastOnceTaskInfoResponseBody {
	s.TaskId = &v
	return s
}

func (s *GetLastOnceTaskInfoResponseBody) SetTaskInfo(v *GetLastOnceTaskInfoResponseBodyTaskInfo) *GetLastOnceTaskInfoResponseBody {
	s.TaskInfo = v
	return s
}

func (s *GetLastOnceTaskInfoResponseBody) SetTotalCount(v int32) *GetLastOnceTaskInfoResponseBody {
	s.TotalCount = &v
	return s
}

type GetLastOnceTaskInfoResponseBodyTaskInfo struct {
	Progress *int32  `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Result   *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetLastOnceTaskInfoResponseBodyTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s GetLastOnceTaskInfoResponseBodyTaskInfo) GoString() string {
	return s.String()
}

func (s *GetLastOnceTaskInfoResponseBodyTaskInfo) SetProgress(v int32) *GetLastOnceTaskInfoResponseBodyTaskInfo {
	s.Progress = &v
	return s
}

func (s *GetLastOnceTaskInfoResponseBodyTaskInfo) SetResult(v string) *GetLastOnceTaskInfoResponseBodyTaskInfo {
	s.Result = &v
	return s
}

func (s *GetLastOnceTaskInfoResponseBodyTaskInfo) SetStatus(v string) *GetLastOnceTaskInfoResponseBodyTaskInfo {
	s.Status = &v
	return s
}

type GetLastOnceTaskInfoResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetLastOnceTaskInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetLastOnceTaskInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLastOnceTaskInfoResponse) GoString() string {
	return s.String()
}

func (s *GetLastOnceTaskInfoResponse) SetHeaders(v map[string]*string) *GetLastOnceTaskInfoResponse {
	s.Headers = v
	return s
}

func (s *GetLastOnceTaskInfoResponse) SetStatusCode(v int32) *GetLastOnceTaskInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLastOnceTaskInfoResponse) SetBody(v *GetLastOnceTaskInfoResponseBody) *GetLastOnceTaskInfoResponse {
	s.Body = v
	return s
}

type GetModuleConfigRequest struct {
	CurrentPage *string `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetModuleConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetModuleConfigRequest) GoString() string {
	return s.String()
}

func (s *GetModuleConfigRequest) SetCurrentPage(v string) *GetModuleConfigRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetModuleConfigRequest) SetPageSize(v string) *GetModuleConfigRequest {
	s.PageSize = &v
	return s
}

type GetModuleConfigResponseBody struct {
	HttpStatusCode   *int32                                         `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	ModuleConfigList []*GetModuleConfigResponseBodyModuleConfigList `json:"ModuleConfigList,omitempty" xml:"ModuleConfigList,omitempty" type:"Repeated"`
	PageInfo         *GetModuleConfigResponseBodyPageInfo           `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId        *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success          *bool                                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetModuleConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetModuleConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetModuleConfigResponseBody) SetHttpStatusCode(v int32) *GetModuleConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetModuleConfigResponseBody) SetModuleConfigList(v []*GetModuleConfigResponseBodyModuleConfigList) *GetModuleConfigResponseBody {
	s.ModuleConfigList = v
	return s
}

func (s *GetModuleConfigResponseBody) SetPageInfo(v *GetModuleConfigResponseBodyPageInfo) *GetModuleConfigResponseBody {
	s.PageInfo = v
	return s
}

func (s *GetModuleConfigResponseBody) SetRequestId(v string) *GetModuleConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetModuleConfigResponseBody) SetSuccess(v bool) *GetModuleConfigResponseBody {
	s.Success = &v
	return s
}

type GetModuleConfigResponseBodyModuleConfigList struct {
	ConfigName *string                                             `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	Items      []*GetModuleConfigResponseBodyModuleConfigListItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	ModuleName *string                                             `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
}

func (s GetModuleConfigResponseBodyModuleConfigList) String() string {
	return tea.Prettify(s)
}

func (s GetModuleConfigResponseBodyModuleConfigList) GoString() string {
	return s.String()
}

func (s *GetModuleConfigResponseBodyModuleConfigList) SetConfigName(v string) *GetModuleConfigResponseBodyModuleConfigList {
	s.ConfigName = &v
	return s
}

func (s *GetModuleConfigResponseBodyModuleConfigList) SetItems(v []*GetModuleConfigResponseBodyModuleConfigListItems) *GetModuleConfigResponseBodyModuleConfigList {
	s.Items = v
	return s
}

func (s *GetModuleConfigResponseBodyModuleConfigList) SetModuleName(v string) *GetModuleConfigResponseBodyModuleConfigList {
	s.ModuleName = &v
	return s
}

type GetModuleConfigResponseBodyModuleConfigListItems struct {
	GroupId      *int32  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	Ip           *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Region       *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Uuid         *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s GetModuleConfigResponseBodyModuleConfigListItems) String() string {
	return tea.Prettify(s)
}

func (s GetModuleConfigResponseBodyModuleConfigListItems) GoString() string {
	return s.String()
}

func (s *GetModuleConfigResponseBodyModuleConfigListItems) SetGroupId(v int32) *GetModuleConfigResponseBodyModuleConfigListItems {
	s.GroupId = &v
	return s
}

func (s *GetModuleConfigResponseBodyModuleConfigListItems) SetInstanceId(v string) *GetModuleConfigResponseBodyModuleConfigListItems {
	s.InstanceId = &v
	return s
}

func (s *GetModuleConfigResponseBodyModuleConfigListItems) SetInstanceName(v string) *GetModuleConfigResponseBodyModuleConfigListItems {
	s.InstanceName = &v
	return s
}

func (s *GetModuleConfigResponseBodyModuleConfigListItems) SetIp(v string) *GetModuleConfigResponseBodyModuleConfigListItems {
	s.Ip = &v
	return s
}

func (s *GetModuleConfigResponseBodyModuleConfigListItems) SetRegion(v string) *GetModuleConfigResponseBodyModuleConfigListItems {
	s.Region = &v
	return s
}

func (s *GetModuleConfigResponseBodyModuleConfigListItems) SetUuid(v string) *GetModuleConfigResponseBodyModuleConfigListItems {
	s.Uuid = &v
	return s
}

type GetModuleConfigResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetModuleConfigResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s GetModuleConfigResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *GetModuleConfigResponseBodyPageInfo) SetCount(v int32) *GetModuleConfigResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *GetModuleConfigResponseBodyPageInfo) SetCurrentPage(v int32) *GetModuleConfigResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *GetModuleConfigResponseBodyPageInfo) SetPageSize(v int32) *GetModuleConfigResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *GetModuleConfigResponseBodyPageInfo) SetTotalCount(v int32) *GetModuleConfigResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type GetModuleConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetModuleConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetModuleConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetModuleConfigResponse) GoString() string {
	return s.String()
}

func (s *GetModuleConfigResponse) SetHeaders(v map[string]*string) *GetModuleConfigResponse {
	s.Headers = v
	return s
}

func (s *GetModuleConfigResponse) SetStatusCode(v int32) *GetModuleConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetModuleConfigResponse) SetBody(v *GetModuleConfigResponseBody) *GetModuleConfigResponse {
	s.Body = v
	return s
}

type GetOnceTaskResultInfoRequest struct {
	TaskId   *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s GetOnceTaskResultInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOnceTaskResultInfoRequest) GoString() string {
	return s.String()
}

func (s *GetOnceTaskResultInfoRequest) SetTaskId(v string) *GetOnceTaskResultInfoRequest {
	s.TaskId = &v
	return s
}

func (s *GetOnceTaskResultInfoRequest) SetTaskName(v string) *GetOnceTaskResultInfoRequest {
	s.TaskName = &v
	return s
}

func (s *GetOnceTaskResultInfoRequest) SetTaskType(v string) *GetOnceTaskResultInfoRequest {
	s.TaskType = &v
	return s
}

type GetOnceTaskResultInfoResponseBody struct {
	CollectTime *int64                                     `json:"CollectTime,omitempty" xml:"CollectTime,omitempty"`
	FinishCount *int32                                     `json:"FinishCount,omitempty" xml:"FinishCount,omitempty"`
	RequestId   *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId      *int64                                     `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskInfo    *GetOnceTaskResultInfoResponseBodyTaskInfo `json:"TaskInfo,omitempty" xml:"TaskInfo,omitempty" type:"Struct"`
	TotalCount  *int32                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetOnceTaskResultInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetOnceTaskResultInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetOnceTaskResultInfoResponseBody) SetCollectTime(v int64) *GetOnceTaskResultInfoResponseBody {
	s.CollectTime = &v
	return s
}

func (s *GetOnceTaskResultInfoResponseBody) SetFinishCount(v int32) *GetOnceTaskResultInfoResponseBody {
	s.FinishCount = &v
	return s
}

func (s *GetOnceTaskResultInfoResponseBody) SetRequestId(v string) *GetOnceTaskResultInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetOnceTaskResultInfoResponseBody) SetTaskId(v int64) *GetOnceTaskResultInfoResponseBody {
	s.TaskId = &v
	return s
}

func (s *GetOnceTaskResultInfoResponseBody) SetTaskInfo(v *GetOnceTaskResultInfoResponseBodyTaskInfo) *GetOnceTaskResultInfoResponseBody {
	s.TaskInfo = v
	return s
}

func (s *GetOnceTaskResultInfoResponseBody) SetTotalCount(v int32) *GetOnceTaskResultInfoResponseBody {
	s.TotalCount = &v
	return s
}

type GetOnceTaskResultInfoResponseBodyTaskInfo struct {
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetOnceTaskResultInfoResponseBodyTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s GetOnceTaskResultInfoResponseBodyTaskInfo) GoString() string {
	return s.String()
}

func (s *GetOnceTaskResultInfoResponseBodyTaskInfo) SetStatus(v string) *GetOnceTaskResultInfoResponseBodyTaskInfo {
	s.Status = &v
	return s
}

type GetOnceTaskResultInfoResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetOnceTaskResultInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetOnceTaskResultInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOnceTaskResultInfoResponse) GoString() string {
	return s.String()
}

func (s *GetOnceTaskResultInfoResponse) SetHeaders(v map[string]*string) *GetOnceTaskResultInfoResponse {
	s.Headers = v
	return s
}

func (s *GetOnceTaskResultInfoResponse) SetStatusCode(v int32) *GetOnceTaskResultInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetOnceTaskResultInfoResponse) SetBody(v *GetOnceTaskResultInfoResponseBody) *GetOnceTaskResultInfoResponse {
	s.Body = v
	return s
}

type GetPropertyScheduleConfigRequest struct {
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s GetPropertyScheduleConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPropertyScheduleConfigRequest) GoString() string {
	return s.String()
}

func (s *GetPropertyScheduleConfigRequest) SetType(v string) *GetPropertyScheduleConfigRequest {
	s.Type = &v
	return s
}

func (s *GetPropertyScheduleConfigRequest) SetUuid(v string) *GetPropertyScheduleConfigRequest {
	s.Uuid = &v
	return s
}

type GetPropertyScheduleConfigResponseBody struct {
	PropertyScheduleConfig *GetPropertyScheduleConfigResponseBodyPropertyScheduleConfig `json:"PropertyScheduleConfig,omitempty" xml:"PropertyScheduleConfig,omitempty" type:"Struct"`
	RequestId              *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPropertyScheduleConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPropertyScheduleConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetPropertyScheduleConfigResponseBody) SetPropertyScheduleConfig(v *GetPropertyScheduleConfigResponseBodyPropertyScheduleConfig) *GetPropertyScheduleConfigResponseBody {
	s.PropertyScheduleConfig = v
	return s
}

func (s *GetPropertyScheduleConfigResponseBody) SetRequestId(v string) *GetPropertyScheduleConfigResponseBody {
	s.RequestId = &v
	return s
}

type GetPropertyScheduleConfigResponseBodyPropertyScheduleConfig struct {
	NextScheduleTime *int64  `json:"NextScheduleTime,omitempty" xml:"NextScheduleTime,omitempty"`
	ScheduleTime     *string `json:"ScheduleTime,omitempty" xml:"ScheduleTime,omitempty"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetPropertyScheduleConfigResponseBodyPropertyScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetPropertyScheduleConfigResponseBodyPropertyScheduleConfig) GoString() string {
	return s.String()
}

func (s *GetPropertyScheduleConfigResponseBodyPropertyScheduleConfig) SetNextScheduleTime(v int64) *GetPropertyScheduleConfigResponseBodyPropertyScheduleConfig {
	s.NextScheduleTime = &v
	return s
}

func (s *GetPropertyScheduleConfigResponseBodyPropertyScheduleConfig) SetScheduleTime(v string) *GetPropertyScheduleConfigResponseBodyPropertyScheduleConfig {
	s.ScheduleTime = &v
	return s
}

func (s *GetPropertyScheduleConfigResponseBodyPropertyScheduleConfig) SetType(v string) *GetPropertyScheduleConfigResponseBodyPropertyScheduleConfig {
	s.Type = &v
	return s
}

type GetPropertyScheduleConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetPropertyScheduleConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPropertyScheduleConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPropertyScheduleConfigResponse) GoString() string {
	return s.String()
}

func (s *GetPropertyScheduleConfigResponse) SetHeaders(v map[string]*string) *GetPropertyScheduleConfigResponse {
	s.Headers = v
	return s
}

func (s *GetPropertyScheduleConfigResponse) SetStatusCode(v int32) *GetPropertyScheduleConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPropertyScheduleConfigResponse) SetBody(v *GetPropertyScheduleConfigResponseBody) *GetPropertyScheduleConfigResponse {
	s.Body = v
	return s
}

type GetRulesCountResponseBody struct {
	RequestId                  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalSystemClientRuleCount *int64  `json:"TotalSystemClientRuleCount,omitempty" xml:"TotalSystemClientRuleCount,omitempty"`
	TotalUserDefineRuleCount   *int64  `json:"TotalUserDefineRuleCount,omitempty" xml:"TotalUserDefineRuleCount,omitempty"`
}

func (s GetRulesCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRulesCountResponseBody) GoString() string {
	return s.String()
}

func (s *GetRulesCountResponseBody) SetRequestId(v string) *GetRulesCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRulesCountResponseBody) SetTotalSystemClientRuleCount(v int64) *GetRulesCountResponseBody {
	s.TotalSystemClientRuleCount = &v
	return s
}

func (s *GetRulesCountResponseBody) SetTotalUserDefineRuleCount(v int64) *GetRulesCountResponseBody {
	s.TotalUserDefineRuleCount = &v
	return s
}

type GetRulesCountResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetRulesCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetRulesCountResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRulesCountResponse) GoString() string {
	return s.String()
}

func (s *GetRulesCountResponse) SetHeaders(v map[string]*string) *GetRulesCountResponse {
	s.Headers = v
	return s
}

func (s *GetRulesCountResponse) SetStatusCode(v int32) *GetRulesCountResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRulesCountResponse) SetBody(v *GetRulesCountResponseBody) *GetRulesCountResponse {
	s.Body = v
	return s
}

type GetSuspiciousStatisticsRequest struct {
	GroupIdList *string `json:"GroupIdList,omitempty" xml:"GroupIdList,omitempty"`
	SourceIp    *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s GetSuspiciousStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSuspiciousStatisticsRequest) GoString() string {
	return s.String()
}

func (s *GetSuspiciousStatisticsRequest) SetGroupIdList(v string) *GetSuspiciousStatisticsRequest {
	s.GroupIdList = &v
	return s
}

func (s *GetSuspiciousStatisticsRequest) SetSourceIp(v string) *GetSuspiciousStatisticsRequest {
	s.SourceIp = &v
	return s
}

type GetSuspiciousStatisticsResponseBody struct {
	RemindCount     *int32  `json:"RemindCount,omitempty" xml:"RemindCount,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SeriousCount    *int32  `json:"SeriousCount,omitempty" xml:"SeriousCount,omitempty"`
	SuspiciousCount *int32  `json:"SuspiciousCount,omitempty" xml:"SuspiciousCount,omitempty"`
	TotalCount      *int32  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetSuspiciousStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSuspiciousStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *GetSuspiciousStatisticsResponseBody) SetRemindCount(v int32) *GetSuspiciousStatisticsResponseBody {
	s.RemindCount = &v
	return s
}

func (s *GetSuspiciousStatisticsResponseBody) SetRequestId(v string) *GetSuspiciousStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSuspiciousStatisticsResponseBody) SetSeriousCount(v int32) *GetSuspiciousStatisticsResponseBody {
	s.SeriousCount = &v
	return s
}

func (s *GetSuspiciousStatisticsResponseBody) SetSuspiciousCount(v int32) *GetSuspiciousStatisticsResponseBody {
	s.SuspiciousCount = &v
	return s
}

func (s *GetSuspiciousStatisticsResponseBody) SetTotalCount(v int32) *GetSuspiciousStatisticsResponseBody {
	s.TotalCount = &v
	return s
}

type GetSuspiciousStatisticsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetSuspiciousStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSuspiciousStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSuspiciousStatisticsResponse) GoString() string {
	return s.String()
}

func (s *GetSuspiciousStatisticsResponse) SetHeaders(v map[string]*string) *GetSuspiciousStatisticsResponse {
	s.Headers = v
	return s
}

func (s *GetSuspiciousStatisticsResponse) SetStatusCode(v int32) *GetSuspiciousStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSuspiciousStatisticsResponse) SetBody(v *GetSuspiciousStatisticsResponseBody) *GetSuspiciousStatisticsResponse {
	s.Body = v
	return s
}

type GetVulStatisticsRequest struct {
	// The ID of the asset group. Separate multiple IDs with commas (,).
	// > You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of asset groups
	GroupIdList *string `json:"GroupIdList,omitempty" xml:"GroupIdList,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The type of the vulnerability whose statistics you want to query. Separate multiple vulnerability types with commas (,). Valid values:
	// - **cve**:Linux software vulnerabilities
	// - **sys**:Windows system vulnerabilities
	// - **cms**: Web-CMS vulnerabilities
	// - **emg**: urgent vulnerabilities
	// - **app**: application vulnerabilities
	// - **sca**: vulnerabilities that are detected based on software component analysis
	TypeList *string `json:"TypeList,omitempty" xml:"TypeList,omitempty"`
}

func (s GetVulStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetVulStatisticsRequest) GoString() string {
	return s.String()
}

func (s *GetVulStatisticsRequest) SetGroupIdList(v string) *GetVulStatisticsRequest {
	s.GroupIdList = &v
	return s
}

func (s *GetVulStatisticsRequest) SetSourceIp(v string) *GetVulStatisticsRequest {
	s.SourceIp = &v
	return s
}

func (s *GetVulStatisticsRequest) SetTypeList(v string) *GetVulStatisticsRequest {
	s.TypeList = &v
	return s
}

type GetVulStatisticsResponseBody struct {
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The number of vulnerabilities that have the high priority.
	VulAsapSum *int32 `json:"VulAsapSum,omitempty" xml:"VulAsapSum,omitempty"`
	// The number of vulnerabilities that have the medium priority.
	VulLaterSum *int32 `json:"VulLaterSum,omitempty" xml:"VulLaterSum,omitempty"`
	// The number of vulnerabilities that have the low priority.
	VulNntfSum *int32 `json:"VulNntfSum,omitempty" xml:"VulNntfSum,omitempty"`
}

func (s GetVulStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVulStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *GetVulStatisticsResponseBody) SetRequestId(v string) *GetVulStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetVulStatisticsResponseBody) SetVulAsapSum(v int32) *GetVulStatisticsResponseBody {
	s.VulAsapSum = &v
	return s
}

func (s *GetVulStatisticsResponseBody) SetVulLaterSum(v int32) *GetVulStatisticsResponseBody {
	s.VulLaterSum = &v
	return s
}

func (s *GetVulStatisticsResponseBody) SetVulNntfSum(v int32) *GetVulStatisticsResponseBody {
	s.VulNntfSum = &v
	return s
}

type GetVulStatisticsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetVulStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetVulStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVulStatisticsResponse) GoString() string {
	return s.String()
}

func (s *GetVulStatisticsResponse) SetHeaders(v map[string]*string) *GetVulStatisticsResponse {
	s.Headers = v
	return s
}

func (s *GetVulStatisticsResponse) SetStatusCode(v int32) *GetVulStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetVulStatisticsResponse) SetBody(v *GetVulStatisticsResponseBody) *GetVulStatisticsResponse {
	s.Body = v
	return s
}

type GetVulWhitelistRequest struct {
	// The ID of the whitelist.
	VulWhitelistId *int64 `json:"VulWhitelistId,omitempty" xml:"VulWhitelistId,omitempty"`
}

func (s GetVulWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s GetVulWhitelistRequest) GoString() string {
	return s.String()
}

func (s *GetVulWhitelistRequest) SetVulWhitelistId(v int64) *GetVulWhitelistRequest {
	s.VulWhitelistId = &v
	return s
}

type GetVulWhitelistResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the whitelist.
	VulWhitelist *GetVulWhitelistResponseBodyVulWhitelist `json:"VulWhitelist,omitempty" xml:"VulWhitelist,omitempty" type:"Struct"`
}

func (s GetVulWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVulWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *GetVulWhitelistResponseBody) SetRequestId(v string) *GetVulWhitelistResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetVulWhitelistResponseBody) SetVulWhitelist(v *GetVulWhitelistResponseBodyVulWhitelist) *GetVulWhitelistResponseBody {
	s.VulWhitelist = v
	return s
}

type GetVulWhitelistResponseBodyVulWhitelist struct {
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The ID of the whitelist.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The reason why the vulnerability is added to the whitelist.
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	// The application scope of the rule. The value is a JSON string that contains the following fields:
	//
	// *   **type**: the type of the assets to which the rule is applied. Valid values:
	//
	//     *   **Uuid**: server
	//     *   **GroupId**: server group
	//
	// *   **groupIds**: the IDs of server groups.
	//
	// *   **uuids**: the UUIDs of servers.
	//
	// >  If this parameter is empty, the rule is applied to all assets.
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The type of the vulnerability.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The information about the vulnerability that is added to the whitelist. The value is a JSON string that contains the following fields:
	//
	// *   **Name**: the name of the vulnerability.
	//
	// *   **Type**: the type of the vulnerability. Valid values:
	//
	//     *   **cve**: Linux software vulnerability
	//     *   **sys**: Windows system vulnerability
	//     *   **cms**: Web-CMS vulnerability
	//     *   **app**: application vulnerability
	//     *   **emg**: urgent vulnerability
	//
	// *   **AliasName**: the alias of the vulnerability.
	Whitelist *string `json:"Whitelist,omitempty" xml:"Whitelist,omitempty"`
}

func (s GetVulWhitelistResponseBodyVulWhitelist) String() string {
	return tea.Prettify(s)
}

func (s GetVulWhitelistResponseBodyVulWhitelist) GoString() string {
	return s.String()
}

func (s *GetVulWhitelistResponseBodyVulWhitelist) SetAliasName(v string) *GetVulWhitelistResponseBodyVulWhitelist {
	s.AliasName = &v
	return s
}

func (s *GetVulWhitelistResponseBodyVulWhitelist) SetId(v int64) *GetVulWhitelistResponseBodyVulWhitelist {
	s.Id = &v
	return s
}

func (s *GetVulWhitelistResponseBodyVulWhitelist) SetName(v string) *GetVulWhitelistResponseBodyVulWhitelist {
	s.Name = &v
	return s
}

func (s *GetVulWhitelistResponseBodyVulWhitelist) SetReason(v string) *GetVulWhitelistResponseBodyVulWhitelist {
	s.Reason = &v
	return s
}

func (s *GetVulWhitelistResponseBodyVulWhitelist) SetTarget(v string) *GetVulWhitelistResponseBodyVulWhitelist {
	s.Target = &v
	return s
}

func (s *GetVulWhitelistResponseBodyVulWhitelist) SetType(v string) *GetVulWhitelistResponseBodyVulWhitelist {
	s.Type = &v
	return s
}

func (s *GetVulWhitelistResponseBodyVulWhitelist) SetWhitelist(v string) *GetVulWhitelistResponseBodyVulWhitelist {
	s.Whitelist = &v
	return s
}

type GetVulWhitelistResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetVulWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetVulWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVulWhitelistResponse) GoString() string {
	return s.String()
}

func (s *GetVulWhitelistResponse) SetHeaders(v map[string]*string) *GetVulWhitelistResponse {
	s.Headers = v
	return s
}

func (s *GetVulWhitelistResponse) SetStatusCode(v int32) *GetVulWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *GetVulWhitelistResponse) SetBody(v *GetVulWhitelistResponseBody) *GetVulWhitelistResponse {
	s.Body = v
	return s
}

type HandleSecurityEventsRequest struct {
	MarkBatch        *string   `json:"MarkBatch,omitempty" xml:"MarkBatch,omitempty"`
	MarkMissParam    *string   `json:"MarkMissParam,omitempty" xml:"MarkMissParam,omitempty"`
	OperationCode    *string   `json:"OperationCode,omitempty" xml:"OperationCode,omitempty"`
	OperationParams  *string   `json:"OperationParams,omitempty" xml:"OperationParams,omitempty"`
	SecurityEventIds []*string `json:"SecurityEventIds,omitempty" xml:"SecurityEventIds,omitempty" type:"Repeated"`
	SourceIp         *string   `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s HandleSecurityEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s HandleSecurityEventsRequest) GoString() string {
	return s.String()
}

func (s *HandleSecurityEventsRequest) SetMarkBatch(v string) *HandleSecurityEventsRequest {
	s.MarkBatch = &v
	return s
}

func (s *HandleSecurityEventsRequest) SetMarkMissParam(v string) *HandleSecurityEventsRequest {
	s.MarkMissParam = &v
	return s
}

func (s *HandleSecurityEventsRequest) SetOperationCode(v string) *HandleSecurityEventsRequest {
	s.OperationCode = &v
	return s
}

func (s *HandleSecurityEventsRequest) SetOperationParams(v string) *HandleSecurityEventsRequest {
	s.OperationParams = &v
	return s
}

func (s *HandleSecurityEventsRequest) SetSecurityEventIds(v []*string) *HandleSecurityEventsRequest {
	s.SecurityEventIds = v
	return s
}

func (s *HandleSecurityEventsRequest) SetSourceIp(v string) *HandleSecurityEventsRequest {
	s.SourceIp = &v
	return s
}

type HandleSecurityEventsResponseBody struct {
	HandleSecurityEventsResponse *HandleSecurityEventsResponseBodyHandleSecurityEventsResponse `json:"HandleSecurityEventsResponse,omitempty" xml:"HandleSecurityEventsResponse,omitempty" type:"Struct"`
	RequestId                    *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s HandleSecurityEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s HandleSecurityEventsResponseBody) GoString() string {
	return s.String()
}

func (s *HandleSecurityEventsResponseBody) SetHandleSecurityEventsResponse(v *HandleSecurityEventsResponseBodyHandleSecurityEventsResponse) *HandleSecurityEventsResponseBody {
	s.HandleSecurityEventsResponse = v
	return s
}

func (s *HandleSecurityEventsResponseBody) SetRequestId(v string) *HandleSecurityEventsResponseBody {
	s.RequestId = &v
	return s
}

type HandleSecurityEventsResponseBodyHandleSecurityEventsResponse struct {
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s HandleSecurityEventsResponseBodyHandleSecurityEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s HandleSecurityEventsResponseBodyHandleSecurityEventsResponse) GoString() string {
	return s.String()
}

func (s *HandleSecurityEventsResponseBodyHandleSecurityEventsResponse) SetTaskId(v int64) *HandleSecurityEventsResponseBodyHandleSecurityEventsResponse {
	s.TaskId = &v
	return s
}

type HandleSecurityEventsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *HandleSecurityEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s HandleSecurityEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s HandleSecurityEventsResponse) GoString() string {
	return s.String()
}

func (s *HandleSecurityEventsResponse) SetHeaders(v map[string]*string) *HandleSecurityEventsResponse {
	s.Headers = v
	return s
}

func (s *HandleSecurityEventsResponse) SetStatusCode(v int32) *HandleSecurityEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *HandleSecurityEventsResponse) SetBody(v *HandleSecurityEventsResponseBody) *HandleSecurityEventsResponse {
	s.Body = v
	return s
}

type HandleSimilarSecurityEventsRequest struct {
	// The whitelist rule. For example, if you want to add a file that contains the string a to the whitelist based on the MD5 hash value, set this parameter to {"field":"md5","operate":"contains","fieldValue":"aa"}.
	MarkMissParam *string `json:"MarkMissParam,omitempty" xml:"MarkMissParam,omitempty"`
	// The operation that you want to perform to handle the alert events.
	//
	// >  You can call the [DescribeSecurityEventOperations](~~DescribeSecurityEventOperations~~) operation to query the operations.
	OperationCode *string `json:"OperationCode,omitempty" xml:"OperationCode,omitempty"`
	// The configuration of the operation that you want to perform to handle the alert events. The value of this parameter is in the JSON format.
	//
	// >  If you set **OperationCode** to **kill\_and\_quara**, **block\_ip**, or **virus\_quara**, you must specify OperationParams. If you set **OperationCode** to other values, you can leave OperationParams empty. If you set **OperationCode** to **block_ip**, the value of OperationParams must consist of the following fields:
	//
	// > *   **expireTime**: the end time of locking. Unit: milliseconds.
	//
	// >  If you set **OperationCode** to **kill\_and_quara**, the value of OperationParams must consist of the following fields:
	//
	// > *   **subOperation**: the method of detection and removal. Valid values:
	//
	// >     *   **killAndQuaraFileByMd5andPath**: terminates the process and quarantines the source file of the process.
	// >     *   **killByMd5andPath**: terminates the running process.
	//
	// >  If you set **OperationCode** to **virus_quara**, the value of OperationParams consists of the following fields:
	//
	// > *   **subOperation**: the method of detection and removal. Valid values:
	//
	// >     *   **quaraFileByMd5andPath**: quarantines the source file of the process.
	OperationParams *string `json:"OperationParams,omitempty" xml:"OperationParams,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The ID of the task that handles the alert events at a time.
	//
	// >  You can call the [CreateSimilarSecurityEventsQueryTask](~~CreateSimilarSecurityEventsQueryTask~~) operation to query the IDs of tasks.
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s HandleSimilarSecurityEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s HandleSimilarSecurityEventsRequest) GoString() string {
	return s.String()
}

func (s *HandleSimilarSecurityEventsRequest) SetMarkMissParam(v string) *HandleSimilarSecurityEventsRequest {
	s.MarkMissParam = &v
	return s
}

func (s *HandleSimilarSecurityEventsRequest) SetOperationCode(v string) *HandleSimilarSecurityEventsRequest {
	s.OperationCode = &v
	return s
}

func (s *HandleSimilarSecurityEventsRequest) SetOperationParams(v string) *HandleSimilarSecurityEventsRequest {
	s.OperationParams = &v
	return s
}

func (s *HandleSimilarSecurityEventsRequest) SetResourceOwnerId(v int64) *HandleSimilarSecurityEventsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *HandleSimilarSecurityEventsRequest) SetSourceIp(v string) *HandleSimilarSecurityEventsRequest {
	s.SourceIp = &v
	return s
}

func (s *HandleSimilarSecurityEventsRequest) SetTaskId(v int64) *HandleSimilarSecurityEventsRequest {
	s.TaskId = &v
	return s
}

type HandleSimilarSecurityEventsResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s HandleSimilarSecurityEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s HandleSimilarSecurityEventsResponseBody) GoString() string {
	return s.String()
}

func (s *HandleSimilarSecurityEventsResponseBody) SetRequestId(v string) *HandleSimilarSecurityEventsResponseBody {
	s.RequestId = &v
	return s
}

type HandleSimilarSecurityEventsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *HandleSimilarSecurityEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s HandleSimilarSecurityEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s HandleSimilarSecurityEventsResponse) GoString() string {
	return s.String()
}

func (s *HandleSimilarSecurityEventsResponse) SetHeaders(v map[string]*string) *HandleSimilarSecurityEventsResponse {
	s.Headers = v
	return s
}

func (s *HandleSimilarSecurityEventsResponse) SetStatusCode(v int32) *HandleSimilarSecurityEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *HandleSimilarSecurityEventsResponse) SetBody(v *HandleSimilarSecurityEventsResponseBody) *HandleSimilarSecurityEventsResponse {
	s.Body = v
	return s
}

type IgnoreCheckItemsRequest struct {
	CheckAndRiskTypeList []*IgnoreCheckItemsRequestCheckAndRiskTypeList `json:"CheckAndRiskTypeList,omitempty" xml:"CheckAndRiskTypeList,omitempty" type:"Repeated"`
	Lang                 *string                                        `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Reason               *string                                        `json:"Reason,omitempty" xml:"Reason,omitempty"`
	Type                 *int32                                         `json:"Type,omitempty" xml:"Type,omitempty"`
	UuidList             []*string                                      `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s IgnoreCheckItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s IgnoreCheckItemsRequest) GoString() string {
	return s.String()
}

func (s *IgnoreCheckItemsRequest) SetCheckAndRiskTypeList(v []*IgnoreCheckItemsRequestCheckAndRiskTypeList) *IgnoreCheckItemsRequest {
	s.CheckAndRiskTypeList = v
	return s
}

func (s *IgnoreCheckItemsRequest) SetLang(v string) *IgnoreCheckItemsRequest {
	s.Lang = &v
	return s
}

func (s *IgnoreCheckItemsRequest) SetReason(v string) *IgnoreCheckItemsRequest {
	s.Reason = &v
	return s
}

func (s *IgnoreCheckItemsRequest) SetType(v int32) *IgnoreCheckItemsRequest {
	s.Type = &v
	return s
}

func (s *IgnoreCheckItemsRequest) SetUuidList(v []*string) *IgnoreCheckItemsRequest {
	s.UuidList = v
	return s
}

type IgnoreCheckItemsRequestCheckAndRiskTypeList struct {
	CheckId  *int64  `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	RiskType *string `json:"RiskType,omitempty" xml:"RiskType,omitempty"`
}

func (s IgnoreCheckItemsRequestCheckAndRiskTypeList) String() string {
	return tea.Prettify(s)
}

func (s IgnoreCheckItemsRequestCheckAndRiskTypeList) GoString() string {
	return s.String()
}

func (s *IgnoreCheckItemsRequestCheckAndRiskTypeList) SetCheckId(v int64) *IgnoreCheckItemsRequestCheckAndRiskTypeList {
	s.CheckId = &v
	return s
}

func (s *IgnoreCheckItemsRequestCheckAndRiskTypeList) SetRiskType(v string) *IgnoreCheckItemsRequestCheckAndRiskTypeList {
	s.RiskType = &v
	return s
}

type IgnoreCheckItemsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s IgnoreCheckItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s IgnoreCheckItemsResponseBody) GoString() string {
	return s.String()
}

func (s *IgnoreCheckItemsResponseBody) SetRequestId(v string) *IgnoreCheckItemsResponseBody {
	s.RequestId = &v
	return s
}

type IgnoreCheckItemsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *IgnoreCheckItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s IgnoreCheckItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s IgnoreCheckItemsResponse) GoString() string {
	return s.String()
}

func (s *IgnoreCheckItemsResponse) SetHeaders(v map[string]*string) *IgnoreCheckItemsResponse {
	s.Headers = v
	return s
}

func (s *IgnoreCheckItemsResponse) SetStatusCode(v int32) *IgnoreCheckItemsResponse {
	s.StatusCode = &v
	return s
}

func (s *IgnoreCheckItemsResponse) SetBody(v *IgnoreCheckItemsResponseBody) *IgnoreCheckItemsResponse {
	s.Body = v
	return s
}

type IgnoreHcCheckWarningsRequest struct {
	// The ID of the check item.
	//
	// >  You can call the [DescribeCheckWarnings](~~DescribeCheckWarnings~~) operation to query the IDs of check items.
	CheckIds *string `json:"CheckIds,omitempty" xml:"CheckIds,omitempty"`
	// The ID of the alert that is triggered by the check item. Separate multiple IDs with commas (,).
	//
	// >  You can call the [DescribeCheckWarnings](~~DescribeCheckWarnings~~) operation to query the IDs of alerts that are triggered by check items.
	CheckWarningIds *string `json:"CheckWarningIds,omitempty" xml:"CheckWarningIds,omitempty"`
	// The reason for the current operation.
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	// The ID of the risk item that you want to ignore or cancel ignoring.
	//
	// >  You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs of risk items.
	RiskId *string `json:"RiskId,omitempty" xml:"RiskId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The type of the operation that you want to perform. Valid values:
	//
	// *   **1**: ignores a risk item
	// *   **2**: cancels ignoring a risk item
	Type *int64 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s IgnoreHcCheckWarningsRequest) String() string {
	return tea.Prettify(s)
}

func (s IgnoreHcCheckWarningsRequest) GoString() string {
	return s.String()
}

func (s *IgnoreHcCheckWarningsRequest) SetCheckIds(v string) *IgnoreHcCheckWarningsRequest {
	s.CheckIds = &v
	return s
}

func (s *IgnoreHcCheckWarningsRequest) SetCheckWarningIds(v string) *IgnoreHcCheckWarningsRequest {
	s.CheckWarningIds = &v
	return s
}

func (s *IgnoreHcCheckWarningsRequest) SetReason(v string) *IgnoreHcCheckWarningsRequest {
	s.Reason = &v
	return s
}

func (s *IgnoreHcCheckWarningsRequest) SetRiskId(v string) *IgnoreHcCheckWarningsRequest {
	s.RiskId = &v
	return s
}

func (s *IgnoreHcCheckWarningsRequest) SetSourceIp(v string) *IgnoreHcCheckWarningsRequest {
	s.SourceIp = &v
	return s
}

func (s *IgnoreHcCheckWarningsRequest) SetType(v int64) *IgnoreHcCheckWarningsRequest {
	s.Type = &v
	return s
}

type IgnoreHcCheckWarningsResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s IgnoreHcCheckWarningsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s IgnoreHcCheckWarningsResponseBody) GoString() string {
	return s.String()
}

func (s *IgnoreHcCheckWarningsResponseBody) SetRequestId(v string) *IgnoreHcCheckWarningsResponseBody {
	s.RequestId = &v
	return s
}

type IgnoreHcCheckWarningsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *IgnoreHcCheckWarningsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s IgnoreHcCheckWarningsResponse) String() string {
	return tea.Prettify(s)
}

func (s IgnoreHcCheckWarningsResponse) GoString() string {
	return s.String()
}

func (s *IgnoreHcCheckWarningsResponse) SetHeaders(v map[string]*string) *IgnoreHcCheckWarningsResponse {
	s.Headers = v
	return s
}

func (s *IgnoreHcCheckWarningsResponse) SetStatusCode(v int32) *IgnoreHcCheckWarningsResponse {
	s.StatusCode = &v
	return s
}

func (s *IgnoreHcCheckWarningsResponse) SetBody(v *IgnoreHcCheckWarningsResponseBody) *IgnoreHcCheckWarningsResponse {
	s.Body = v
	return s
}

type InstallBackupClientRequest struct {
	// The version of the anti-ransomware policy. You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the versions of anti-ransomware policies. Valid values:
	//
	// *   **1.0.0**
	// *   **2.0.0**
	PolicyVersion *string `json:"PolicyVersion,omitempty" xml:"PolicyVersion,omitempty"`
	// The UUID of the server on which you want to install the anti-ransomware agent.
	//
	// >  You must specify at least one of the UuidList and Uuid parameters.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The UUIDs of servers on which you want to install the anti-ransomware agent.
	//
	// >  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
	UuidList []*string `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s InstallBackupClientRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallBackupClientRequest) GoString() string {
	return s.String()
}

func (s *InstallBackupClientRequest) SetPolicyVersion(v string) *InstallBackupClientRequest {
	s.PolicyVersion = &v
	return s
}

func (s *InstallBackupClientRequest) SetUuid(v string) *InstallBackupClientRequest {
	s.Uuid = &v
	return s
}

func (s *InstallBackupClientRequest) SetUuidList(v []*string) *InstallBackupClientRequest {
	s.UuidList = v
	return s
}

type InstallBackupClientResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InstallBackupClientResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallBackupClientResponseBody) GoString() string {
	return s.String()
}

func (s *InstallBackupClientResponseBody) SetRequestId(v string) *InstallBackupClientResponseBody {
	s.RequestId = &v
	return s
}

type InstallBackupClientResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InstallBackupClientResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InstallBackupClientResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallBackupClientResponse) GoString() string {
	return s.String()
}

func (s *InstallBackupClientResponse) SetHeaders(v map[string]*string) *InstallBackupClientResponse {
	s.Headers = v
	return s
}

func (s *InstallBackupClientResponse) SetStatusCode(v int32) *InstallBackupClientResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallBackupClientResponse) SetBody(v *InstallBackupClientResponseBody) *InstallBackupClientResponse {
	s.Body = v
	return s
}

type InstallCloudMonitorRequest struct {
	// The AccessKey ID that is required to install the CloudMonitor agent. You can call the [DescribeMonitoringAgentAccessKey](~~114948~~) operation to query the AccessKey ID.
	//
	// >  This parameter is required only when you install the CloudMonitor agent on servers that are not deployed on Alibaba Cloud.
	AgentAccessKey *string `json:"AgentAccessKey,omitempty" xml:"AgentAccessKey,omitempty"`
	// The AccessKey secret that is required to install the CloudMonitor agent. You can call the [DescribeMonitoringAgentAccessKey](~~114948~~) operation to query the AccessKey secret.
	//
	// >  This parameter is required only when you install the CloudMonitor agent on servers that are not deployed on Alibaba Cloud.
	AgentSecretKey *string `json:"AgentSecretKey,omitempty" xml:"AgentSecretKey,omitempty"`
	// The version of the CloudMonitor agent that you want to install on the servers. For more information about the latest version of the CloudMonitor agent, see [Overview](~~183431~~).
	ArgusVersion *string `json:"ArgusVersion,omitempty" xml:"ArgusVersion,omitempty"`
	// The IDs of the servers on which you want to install the CloudMonitor agent. Separate multiple IDs with commas (,).
	InstanceIdList []*string `json:"InstanceIdList,omitempty" xml:"InstanceIdList,omitempty" type:"Repeated"`
	// The UUIDs of the servers on which you want to install the CloudMonitor agent. Separate multiple UUIDs with commas (,).
	UuidList []*string `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s InstallCloudMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallCloudMonitorRequest) GoString() string {
	return s.String()
}

func (s *InstallCloudMonitorRequest) SetAgentAccessKey(v string) *InstallCloudMonitorRequest {
	s.AgentAccessKey = &v
	return s
}

func (s *InstallCloudMonitorRequest) SetAgentSecretKey(v string) *InstallCloudMonitorRequest {
	s.AgentSecretKey = &v
	return s
}

func (s *InstallCloudMonitorRequest) SetArgusVersion(v string) *InstallCloudMonitorRequest {
	s.ArgusVersion = &v
	return s
}

func (s *InstallCloudMonitorRequest) SetInstanceIdList(v []*string) *InstallCloudMonitorRequest {
	s.InstanceIdList = v
	return s
}

func (s *InstallCloudMonitorRequest) SetUuidList(v []*string) *InstallCloudMonitorRequest {
	s.UuidList = v
	return s
}

type InstallCloudMonitorResponseBody struct {
	// The error code returned if the request fails.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InstallCloudMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallCloudMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *InstallCloudMonitorResponseBody) SetCode(v string) *InstallCloudMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *InstallCloudMonitorResponseBody) SetHttpStatusCode(v int32) *InstallCloudMonitorResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *InstallCloudMonitorResponseBody) SetMessage(v string) *InstallCloudMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *InstallCloudMonitorResponseBody) SetRequestId(v string) *InstallCloudMonitorResponseBody {
	s.RequestId = &v
	return s
}

func (s *InstallCloudMonitorResponseBody) SetSuccess(v bool) *InstallCloudMonitorResponseBody {
	s.Success = &v
	return s
}

type InstallCloudMonitorResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InstallCloudMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InstallCloudMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallCloudMonitorResponse) GoString() string {
	return s.String()
}

func (s *InstallCloudMonitorResponse) SetHeaders(v map[string]*string) *InstallCloudMonitorResponse {
	s.Headers = v
	return s
}

func (s *InstallCloudMonitorResponse) SetStatusCode(v int32) *InstallCloudMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallCloudMonitorResponse) SetBody(v *InstallCloudMonitorResponseBody) *InstallCloudMonitorResponse {
	s.Body = v
	return s
}

type InstallPmAgentRequest struct {
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Uuids    *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s InstallPmAgentRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallPmAgentRequest) GoString() string {
	return s.String()
}

func (s *InstallPmAgentRequest) SetLang(v string) *InstallPmAgentRequest {
	s.Lang = &v
	return s
}

func (s *InstallPmAgentRequest) SetSourceIp(v string) *InstallPmAgentRequest {
	s.SourceIp = &v
	return s
}

func (s *InstallPmAgentRequest) SetType(v string) *InstallPmAgentRequest {
	s.Type = &v
	return s
}

func (s *InstallPmAgentRequest) SetUuids(v string) *InstallPmAgentRequest {
	s.Uuids = &v
	return s
}

type InstallPmAgentResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InstallPmAgentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallPmAgentResponseBody) GoString() string {
	return s.String()
}

func (s *InstallPmAgentResponseBody) SetRequestId(v string) *InstallPmAgentResponseBody {
	s.RequestId = &v
	return s
}

type InstallPmAgentResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InstallPmAgentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InstallPmAgentResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallPmAgentResponse) GoString() string {
	return s.String()
}

func (s *InstallPmAgentResponse) SetHeaders(v map[string]*string) *InstallPmAgentResponse {
	s.Headers = v
	return s
}

func (s *InstallPmAgentResponse) SetStatusCode(v int32) *InstallPmAgentResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallPmAgentResponse) SetBody(v *InstallPmAgentResponseBody) *InstallPmAgentResponse {
	s.Body = v
	return s
}

type InstallUniBackupAgentRequest struct {
	PolicyId *int64 `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
}

func (s InstallUniBackupAgentRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallUniBackupAgentRequest) GoString() string {
	return s.String()
}

func (s *InstallUniBackupAgentRequest) SetPolicyId(v int64) *InstallUniBackupAgentRequest {
	s.PolicyId = &v
	return s
}

type InstallUniBackupAgentResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InstallUniBackupAgentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallUniBackupAgentResponseBody) GoString() string {
	return s.String()
}

func (s *InstallUniBackupAgentResponseBody) SetRequestId(v string) *InstallUniBackupAgentResponseBody {
	s.RequestId = &v
	return s
}

type InstallUniBackupAgentResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InstallUniBackupAgentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InstallUniBackupAgentResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallUniBackupAgentResponse) GoString() string {
	return s.String()
}

func (s *InstallUniBackupAgentResponse) SetHeaders(v map[string]*string) *InstallUniBackupAgentResponse {
	s.Headers = v
	return s
}

func (s *InstallUniBackupAgentResponse) SetStatusCode(v int32) *InstallUniBackupAgentResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallUniBackupAgentResponse) SetBody(v *InstallUniBackupAgentResponseBody) *InstallUniBackupAgentResponse {
	s.Body = v
	return s
}

type JoinWebLockProcessWhiteListRequest struct {
	ProcessPaths []*string `json:"ProcessPaths,omitempty" xml:"ProcessPaths,omitempty" type:"Repeated"`
	Uuids        *string   `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s JoinWebLockProcessWhiteListRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinWebLockProcessWhiteListRequest) GoString() string {
	return s.String()
}

func (s *JoinWebLockProcessWhiteListRequest) SetProcessPaths(v []*string) *JoinWebLockProcessWhiteListRequest {
	s.ProcessPaths = v
	return s
}

func (s *JoinWebLockProcessWhiteListRequest) SetUuids(v string) *JoinWebLockProcessWhiteListRequest {
	s.Uuids = &v
	return s
}

type JoinWebLockProcessWhiteListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s JoinWebLockProcessWhiteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinWebLockProcessWhiteListResponseBody) GoString() string {
	return s.String()
}

func (s *JoinWebLockProcessWhiteListResponseBody) SetRequestId(v string) *JoinWebLockProcessWhiteListResponseBody {
	s.RequestId = &v
	return s
}

type JoinWebLockProcessWhiteListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *JoinWebLockProcessWhiteListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s JoinWebLockProcessWhiteListResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinWebLockProcessWhiteListResponse) GoString() string {
	return s.String()
}

func (s *JoinWebLockProcessWhiteListResponse) SetHeaders(v map[string]*string) *JoinWebLockProcessWhiteListResponse {
	s.Headers = v
	return s
}

func (s *JoinWebLockProcessWhiteListResponse) SetStatusCode(v int32) *JoinWebLockProcessWhiteListResponse {
	s.StatusCode = &v
	return s
}

func (s *JoinWebLockProcessWhiteListResponse) SetBody(v *JoinWebLockProcessWhiteListResponseBody) *JoinWebLockProcessWhiteListResponse {
	s.Body = v
	return s
}

type ListAvailableHoneypotRequest struct {
	// The ID of the management node to which the honeypot is deployed.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s ListAvailableHoneypotRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAvailableHoneypotRequest) GoString() string {
	return s.String()
}

func (s *ListAvailableHoneypotRequest) SetNodeId(v string) *ListAvailableHoneypotRequest {
	s.NodeId = &v
	return s
}

type ListAvailableHoneypotResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The number of images that are used for the honeypot.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// An array consisting of the information about the images that are used for the honeypot.
	Data []*ListAvailableHoneypotResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAvailableHoneypotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAvailableHoneypotResponseBody) GoString() string {
	return s.String()
}

func (s *ListAvailableHoneypotResponseBody) SetCode(v string) *ListAvailableHoneypotResponseBody {
	s.Code = &v
	return s
}

func (s *ListAvailableHoneypotResponseBody) SetCount(v int32) *ListAvailableHoneypotResponseBody {
	s.Count = &v
	return s
}

func (s *ListAvailableHoneypotResponseBody) SetData(v []*ListAvailableHoneypotResponseBodyData) *ListAvailableHoneypotResponseBody {
	s.Data = v
	return s
}

func (s *ListAvailableHoneypotResponseBody) SetHttpStatusCode(v int32) *ListAvailableHoneypotResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAvailableHoneypotResponseBody) SetMessage(v string) *ListAvailableHoneypotResponseBody {
	s.Message = &v
	return s
}

func (s *ListAvailableHoneypotResponseBody) SetRequestId(v string) *ListAvailableHoneypotResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAvailableHoneypotResponseBody) SetSuccess(v bool) *ListAvailableHoneypotResponseBody {
	s.Success = &v
	return s
}

type ListAvailableHoneypotResponseBodyData struct {
	// The display name of the image that is used for the honeypot.
	HoneypotImageDisplayName *string `json:"HoneypotImageDisplayName,omitempty" xml:"HoneypotImageDisplayName,omitempty"`
	// The ID of the image that is used for the honeypot.
	HoneypotImageId *string `json:"HoneypotImageId,omitempty" xml:"HoneypotImageId,omitempty"`
	// The name of the image that is used for the honeypot.
	HoneypotImageName *string `json:"HoneypotImageName,omitempty" xml:"HoneypotImageName,omitempty"`
	// The type of the image that is used for the honeypot.
	HoneypotImageType *string `json:"HoneypotImageType,omitempty" xml:"HoneypotImageType,omitempty"`
	// The version of the image that is used for the honeypot.
	HoneypotImageVersion *string `json:"HoneypotImageVersion,omitempty" xml:"HoneypotImageVersion,omitempty"`
	// The port that is supported by the honeypot. The value is in the JSON format. The value contains the following fields:
	//
	// *   **log_type**: the log type
	// *   **proto**: the supported protocol
	// *   **description**: the description
	// *   **ports**: the supported ports
	// *   **port_str**: the supported port number of the string type
	// *   **type**: the type
	Multiports *string `json:"Multiports,omitempty" xml:"Multiports,omitempty"`
	// The protocol that is supported by the honeypot.
	Proto *string `json:"Proto,omitempty" xml:"Proto,omitempty"`
	// The service port of the honeypot.
	ServicePort *string `json:"ServicePort,omitempty" xml:"ServicePort,omitempty"`
	// The configuration template of the honeypot.
	Template *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s ListAvailableHoneypotResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAvailableHoneypotResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAvailableHoneypotResponseBodyData) SetHoneypotImageDisplayName(v string) *ListAvailableHoneypotResponseBodyData {
	s.HoneypotImageDisplayName = &v
	return s
}

func (s *ListAvailableHoneypotResponseBodyData) SetHoneypotImageId(v string) *ListAvailableHoneypotResponseBodyData {
	s.HoneypotImageId = &v
	return s
}

func (s *ListAvailableHoneypotResponseBodyData) SetHoneypotImageName(v string) *ListAvailableHoneypotResponseBodyData {
	s.HoneypotImageName = &v
	return s
}

func (s *ListAvailableHoneypotResponseBodyData) SetHoneypotImageType(v string) *ListAvailableHoneypotResponseBodyData {
	s.HoneypotImageType = &v
	return s
}

func (s *ListAvailableHoneypotResponseBodyData) SetHoneypotImageVersion(v string) *ListAvailableHoneypotResponseBodyData {
	s.HoneypotImageVersion = &v
	return s
}

func (s *ListAvailableHoneypotResponseBodyData) SetMultiports(v string) *ListAvailableHoneypotResponseBodyData {
	s.Multiports = &v
	return s
}

func (s *ListAvailableHoneypotResponseBodyData) SetProto(v string) *ListAvailableHoneypotResponseBodyData {
	s.Proto = &v
	return s
}

func (s *ListAvailableHoneypotResponseBodyData) SetServicePort(v string) *ListAvailableHoneypotResponseBodyData {
	s.ServicePort = &v
	return s
}

func (s *ListAvailableHoneypotResponseBodyData) SetTemplate(v string) *ListAvailableHoneypotResponseBodyData {
	s.Template = &v
	return s
}

type ListAvailableHoneypotResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAvailableHoneypotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAvailableHoneypotResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAvailableHoneypotResponse) GoString() string {
	return s.String()
}

func (s *ListAvailableHoneypotResponse) SetHeaders(v map[string]*string) *ListAvailableHoneypotResponse {
	s.Headers = v
	return s
}

func (s *ListAvailableHoneypotResponse) SetStatusCode(v int32) *ListAvailableHoneypotResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAvailableHoneypotResponse) SetBody(v *ListAvailableHoneypotResponseBody) *ListAvailableHoneypotResponse {
	s.Body = v
	return s
}

type ListCheckInstanceResultRequest struct {
	// The ID of the check item.
	CheckId *int64 `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	// The number of the page to return.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The instance ID of the check item.
	InstanceIdKey *string `json:"InstanceIdKey,omitempty" xml:"InstanceIdKey,omitempty"`
	// The instance IDs of cloud services.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The instance name of the check item.
	InstanceNameKey *string `json:"InstanceNameKey,omitempty" xml:"InstanceNameKey,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the instance.
	RegionIdKey *string `json:"RegionIdKey,omitempty" xml:"RegionIdKey,omitempty"`
	// The type of the condition based on which the check items are sorted. Set the value to **STATUS**.
	SortTypes []*string `json:"SortTypes,omitempty" xml:"SortTypes,omitempty" type:"Repeated"`
	// The statuses of check items.
	Statuses []*string `json:"Statuses,omitempty" xml:"Statuses,omitempty" type:"Repeated"`
}

func (s ListCheckInstanceResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCheckInstanceResultRequest) GoString() string {
	return s.String()
}

func (s *ListCheckInstanceResultRequest) SetCheckId(v int64) *ListCheckInstanceResultRequest {
	s.CheckId = &v
	return s
}

func (s *ListCheckInstanceResultRequest) SetCurrentPage(v int32) *ListCheckInstanceResultRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListCheckInstanceResultRequest) SetInstanceIdKey(v string) *ListCheckInstanceResultRequest {
	s.InstanceIdKey = &v
	return s
}

func (s *ListCheckInstanceResultRequest) SetInstanceIds(v []*string) *ListCheckInstanceResultRequest {
	s.InstanceIds = v
	return s
}

func (s *ListCheckInstanceResultRequest) SetInstanceNameKey(v string) *ListCheckInstanceResultRequest {
	s.InstanceNameKey = &v
	return s
}

func (s *ListCheckInstanceResultRequest) SetLang(v string) *ListCheckInstanceResultRequest {
	s.Lang = &v
	return s
}

func (s *ListCheckInstanceResultRequest) SetPageSize(v int32) *ListCheckInstanceResultRequest {
	s.PageSize = &v
	return s
}

func (s *ListCheckInstanceResultRequest) SetRegionIdKey(v string) *ListCheckInstanceResultRequest {
	s.RegionIdKey = &v
	return s
}

func (s *ListCheckInstanceResultRequest) SetSortTypes(v []*string) *ListCheckInstanceResultRequest {
	s.SortTypes = v
	return s
}

func (s *ListCheckInstanceResultRequest) SetStatuses(v []*string) *ListCheckInstanceResultRequest {
	s.Statuses = v
	return s
}

type ListCheckInstanceResultResponseBody struct {
	// An array that consists of the basic information about the instances.
	BasicData []*ListCheckInstanceResultResponseBodyBasicData `json:"BasicData,omitempty" xml:"BasicData,omitempty" type:"Repeated"`
	// The extended information about the instances.
	Checks []map[string]interface{} `json:"Checks,omitempty" xml:"Checks,omitempty" type:"Repeated"`
	// The metadata information about the search conditions that can be used to filter instances.
	Columns []*ListCheckInstanceResultResponseBodyColumns `json:"Columns,omitempty" xml:"Columns,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *ListCheckInstanceResultResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCheckInstanceResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCheckInstanceResultResponseBody) GoString() string {
	return s.String()
}

func (s *ListCheckInstanceResultResponseBody) SetBasicData(v []*ListCheckInstanceResultResponseBodyBasicData) *ListCheckInstanceResultResponseBody {
	s.BasicData = v
	return s
}

func (s *ListCheckInstanceResultResponseBody) SetChecks(v []map[string]interface{}) *ListCheckInstanceResultResponseBody {
	s.Checks = v
	return s
}

func (s *ListCheckInstanceResultResponseBody) SetColumns(v []*ListCheckInstanceResultResponseBodyColumns) *ListCheckInstanceResultResponseBody {
	s.Columns = v
	return s
}

func (s *ListCheckInstanceResultResponseBody) SetPageInfo(v *ListCheckInstanceResultResponseBodyPageInfo) *ListCheckInstanceResultResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListCheckInstanceResultResponseBody) SetRequestId(v string) *ListCheckInstanceResultResponseBody {
	s.RequestId = &v
	return s
}

type ListCheckInstanceResultResponseBodyBasicData struct {
	// The ID of the check result for the instance.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The region ID of the instance.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The statuses of check items. Multiple statuses are separated by commas (,). Valid values:
	//
	// *   **PASS**
	// *   **NOT_PASS**
	// *   **CHECKING**
	// *   **NOT_CHECK**
	// *   **WHITELIST**
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListCheckInstanceResultResponseBodyBasicData) String() string {
	return tea.Prettify(s)
}

func (s ListCheckInstanceResultResponseBodyBasicData) GoString() string {
	return s.String()
}

func (s *ListCheckInstanceResultResponseBodyBasicData) SetId(v int64) *ListCheckInstanceResultResponseBodyBasicData {
	s.Id = &v
	return s
}

func (s *ListCheckInstanceResultResponseBodyBasicData) SetInstanceId(v string) *ListCheckInstanceResultResponseBodyBasicData {
	s.InstanceId = &v
	return s
}

func (s *ListCheckInstanceResultResponseBodyBasicData) SetInstanceName(v string) *ListCheckInstanceResultResponseBodyBasicData {
	s.InstanceName = &v
	return s
}

func (s *ListCheckInstanceResultResponseBodyBasicData) SetRegionId(v string) *ListCheckInstanceResultResponseBodyBasicData {
	s.RegionId = &v
	return s
}

func (s *ListCheckInstanceResultResponseBodyBasicData) SetStatus(v string) *ListCheckInstanceResultResponseBodyBasicData {
	s.Status = &v
	return s
}

type ListCheckInstanceResultResponseBodyColumns struct {
	// The metadata information about the details of the instances.
	Grids []*ListCheckInstanceResultResponseBodyColumnsGrids `json:"Grids,omitempty" xml:"Grids,omitempty" type:"Repeated"`
	// The search condition.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// Indicates whether the search condition is used. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Search *bool `json:"Search,omitempty" xml:"Search,omitempty"`
	// The value of the search condition.
	SearchKey *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	// The display name of the search condition.
	ShowName *string `json:"ShowName,omitempty" xml:"ShowName,omitempty"`
	// The format of the check results for the instances. Valid values:
	//
	// *   **text**
	// *   **link**
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListCheckInstanceResultResponseBodyColumns) String() string {
	return tea.Prettify(s)
}

func (s ListCheckInstanceResultResponseBodyColumns) GoString() string {
	return s.String()
}

func (s *ListCheckInstanceResultResponseBodyColumns) SetGrids(v []*ListCheckInstanceResultResponseBodyColumnsGrids) *ListCheckInstanceResultResponseBodyColumns {
	s.Grids = v
	return s
}

func (s *ListCheckInstanceResultResponseBodyColumns) SetKey(v string) *ListCheckInstanceResultResponseBodyColumns {
	s.Key = &v
	return s
}

func (s *ListCheckInstanceResultResponseBodyColumns) SetSearch(v bool) *ListCheckInstanceResultResponseBodyColumns {
	s.Search = &v
	return s
}

func (s *ListCheckInstanceResultResponseBodyColumns) SetSearchKey(v string) *ListCheckInstanceResultResponseBodyColumns {
	s.SearchKey = &v
	return s
}

func (s *ListCheckInstanceResultResponseBodyColumns) SetShowName(v string) *ListCheckInstanceResultResponseBodyColumns {
	s.ShowName = &v
	return s
}

func (s *ListCheckInstanceResultResponseBodyColumns) SetType(v string) *ListCheckInstanceResultResponseBodyColumns {
	s.Type = &v
	return s
}

type ListCheckInstanceResultResponseBodyColumnsGrids struct {
	// The search condition.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The display name of the search condition.
	ShowName *string `json:"ShowName,omitempty" xml:"ShowName,omitempty"`
	// The format of the check results for the instances. Valid values:
	//
	// *   **text**
	// *   **link**
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListCheckInstanceResultResponseBodyColumnsGrids) String() string {
	return tea.Prettify(s)
}

func (s ListCheckInstanceResultResponseBodyColumnsGrids) GoString() string {
	return s.String()
}

func (s *ListCheckInstanceResultResponseBodyColumnsGrids) SetKey(v string) *ListCheckInstanceResultResponseBodyColumnsGrids {
	s.Key = &v
	return s
}

func (s *ListCheckInstanceResultResponseBodyColumnsGrids) SetShowName(v string) *ListCheckInstanceResultResponseBodyColumnsGrids {
	s.ShowName = &v
	return s
}

func (s *ListCheckInstanceResultResponseBodyColumnsGrids) SetType(v string) *ListCheckInstanceResultResponseBodyColumnsGrids {
	s.Type = &v
	return s
}

type ListCheckInstanceResultResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *string `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCheckInstanceResultResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListCheckInstanceResultResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListCheckInstanceResultResponseBodyPageInfo) SetCount(v string) *ListCheckInstanceResultResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListCheckInstanceResultResponseBodyPageInfo) SetCurrentPage(v int32) *ListCheckInstanceResultResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListCheckInstanceResultResponseBodyPageInfo) SetPageSize(v int32) *ListCheckInstanceResultResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListCheckInstanceResultResponseBodyPageInfo) SetTotalCount(v int32) *ListCheckInstanceResultResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListCheckInstanceResultResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListCheckInstanceResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCheckInstanceResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCheckInstanceResultResponse) GoString() string {
	return s.String()
}

func (s *ListCheckInstanceResultResponse) SetHeaders(v map[string]*string) *ListCheckInstanceResultResponse {
	s.Headers = v
	return s
}

func (s *ListCheckInstanceResultResponse) SetStatusCode(v int32) *ListCheckInstanceResultResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCheckInstanceResultResponse) SetBody(v *ListCheckInstanceResultResponseBody) *ListCheckInstanceResultResponse {
	s.Body = v
	return s
}

type ListCheckItemWarningMachineRequest struct {
	CheckId             *int64  `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	ContainerFieldName  *string `json:"ContainerFieldName,omitempty" xml:"ContainerFieldName,omitempty"`
	ContainerFieldValue *string `json:"ContainerFieldValue,omitempty" xml:"ContainerFieldValue,omitempty"`
	CurrentPage         *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	GroupId             *int64  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Lang                *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize            *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Remark              *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	RiskType            *string `json:"RiskType,omitempty" xml:"RiskType,omitempty"`
	Status              *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListCheckItemWarningMachineRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCheckItemWarningMachineRequest) GoString() string {
	return s.String()
}

func (s *ListCheckItemWarningMachineRequest) SetCheckId(v int64) *ListCheckItemWarningMachineRequest {
	s.CheckId = &v
	return s
}

func (s *ListCheckItemWarningMachineRequest) SetContainerFieldName(v string) *ListCheckItemWarningMachineRequest {
	s.ContainerFieldName = &v
	return s
}

func (s *ListCheckItemWarningMachineRequest) SetContainerFieldValue(v string) *ListCheckItemWarningMachineRequest {
	s.ContainerFieldValue = &v
	return s
}

func (s *ListCheckItemWarningMachineRequest) SetCurrentPage(v int32) *ListCheckItemWarningMachineRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListCheckItemWarningMachineRequest) SetGroupId(v int64) *ListCheckItemWarningMachineRequest {
	s.GroupId = &v
	return s
}

func (s *ListCheckItemWarningMachineRequest) SetLang(v string) *ListCheckItemWarningMachineRequest {
	s.Lang = &v
	return s
}

func (s *ListCheckItemWarningMachineRequest) SetPageSize(v int32) *ListCheckItemWarningMachineRequest {
	s.PageSize = &v
	return s
}

func (s *ListCheckItemWarningMachineRequest) SetRemark(v string) *ListCheckItemWarningMachineRequest {
	s.Remark = &v
	return s
}

func (s *ListCheckItemWarningMachineRequest) SetRiskType(v string) *ListCheckItemWarningMachineRequest {
	s.RiskType = &v
	return s
}

func (s *ListCheckItemWarningMachineRequest) SetStatus(v int32) *ListCheckItemWarningMachineRequest {
	s.Status = &v
	return s
}

type ListCheckItemWarningMachineResponseBody struct {
	List      []*ListCheckItemWarningMachineResponseBodyList   `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageInfo  *ListCheckItemWarningMachineResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCheckItemWarningMachineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCheckItemWarningMachineResponseBody) GoString() string {
	return s.String()
}

func (s *ListCheckItemWarningMachineResponseBody) SetList(v []*ListCheckItemWarningMachineResponseBodyList) *ListCheckItemWarningMachineResponseBody {
	s.List = v
	return s
}

func (s *ListCheckItemWarningMachineResponseBody) SetPageInfo(v *ListCheckItemWarningMachineResponseBodyPageInfo) *ListCheckItemWarningMachineResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListCheckItemWarningMachineResponseBody) SetRequestId(v string) *ListCheckItemWarningMachineResponseBody {
	s.RequestId = &v
	return s
}

type ListCheckItemWarningMachineResponseBodyList struct {
	AuthVersion     *int32                                                        `json:"AuthVersion,omitempty" xml:"AuthVersion,omitempty"`
	Bind            *bool                                                         `json:"Bind,omitempty" xml:"Bind,omitempty"`
	FixList         []*ListCheckItemWarningMachineResponseBodyListFixList         `json:"FixList,omitempty" xml:"FixList,omitempty" type:"Repeated"`
	InstanceId      *string                                                       `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName    *string                                                       `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InternetIp      *string                                                       `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	IntranetIp      *string                                                       `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	PortOpen        *bool                                                         `json:"PortOpen,omitempty" xml:"PortOpen,omitempty"`
	Prompt          *string                                                       `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	RegionId        *string                                                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status          *int32                                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	Uuid            *string                                                       `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	WarningRiskList []*ListCheckItemWarningMachineResponseBodyListWarningRiskList `json:"WarningRiskList,omitempty" xml:"WarningRiskList,omitempty" type:"Repeated"`
}

func (s ListCheckItemWarningMachineResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s ListCheckItemWarningMachineResponseBodyList) GoString() string {
	return s.String()
}

func (s *ListCheckItemWarningMachineResponseBodyList) SetAuthVersion(v int32) *ListCheckItemWarningMachineResponseBodyList {
	s.AuthVersion = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyList) SetBind(v bool) *ListCheckItemWarningMachineResponseBodyList {
	s.Bind = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyList) SetFixList(v []*ListCheckItemWarningMachineResponseBodyListFixList) *ListCheckItemWarningMachineResponseBodyList {
	s.FixList = v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyList) SetInstanceId(v string) *ListCheckItemWarningMachineResponseBodyList {
	s.InstanceId = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyList) SetInstanceName(v string) *ListCheckItemWarningMachineResponseBodyList {
	s.InstanceName = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyList) SetInternetIp(v string) *ListCheckItemWarningMachineResponseBodyList {
	s.InternetIp = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyList) SetIntranetIp(v string) *ListCheckItemWarningMachineResponseBodyList {
	s.IntranetIp = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyList) SetPortOpen(v bool) *ListCheckItemWarningMachineResponseBodyList {
	s.PortOpen = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyList) SetPrompt(v string) *ListCheckItemWarningMachineResponseBodyList {
	s.Prompt = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyList) SetRegionId(v string) *ListCheckItemWarningMachineResponseBodyList {
	s.RegionId = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyList) SetStatus(v int32) *ListCheckItemWarningMachineResponseBodyList {
	s.Status = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyList) SetUuid(v string) *ListCheckItemWarningMachineResponseBodyList {
	s.Uuid = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyList) SetWarningRiskList(v []*ListCheckItemWarningMachineResponseBodyListWarningRiskList) *ListCheckItemWarningMachineResponseBodyList {
	s.WarningRiskList = v
	return s
}

type ListCheckItemWarningMachineResponseBodyListFixList struct {
	RiskId   *int64  `json:"RiskId,omitempty" xml:"RiskId,omitempty"`
	RiskName *string `json:"RiskName,omitempty" xml:"RiskName,omitempty"`
}

func (s ListCheckItemWarningMachineResponseBodyListFixList) String() string {
	return tea.Prettify(s)
}

func (s ListCheckItemWarningMachineResponseBodyListFixList) GoString() string {
	return s.String()
}

func (s *ListCheckItemWarningMachineResponseBodyListFixList) SetRiskId(v int64) *ListCheckItemWarningMachineResponseBodyListFixList {
	s.RiskId = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyListFixList) SetRiskName(v string) *ListCheckItemWarningMachineResponseBodyListFixList {
	s.RiskName = &v
	return s
}

type ListCheckItemWarningMachineResponseBodyListWarningRiskList struct {
	RiskId   *int64  `json:"RiskId,omitempty" xml:"RiskId,omitempty"`
	RiskName *string `json:"RiskName,omitempty" xml:"RiskName,omitempty"`
}

func (s ListCheckItemWarningMachineResponseBodyListWarningRiskList) String() string {
	return tea.Prettify(s)
}

func (s ListCheckItemWarningMachineResponseBodyListWarningRiskList) GoString() string {
	return s.String()
}

func (s *ListCheckItemWarningMachineResponseBodyListWarningRiskList) SetRiskId(v int64) *ListCheckItemWarningMachineResponseBodyListWarningRiskList {
	s.RiskId = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyListWarningRiskList) SetRiskName(v string) *ListCheckItemWarningMachineResponseBodyListWarningRiskList {
	s.RiskName = &v
	return s
}

type ListCheckItemWarningMachineResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCheckItemWarningMachineResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListCheckItemWarningMachineResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListCheckItemWarningMachineResponseBodyPageInfo) SetCount(v int32) *ListCheckItemWarningMachineResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyPageInfo) SetCurrentPage(v int32) *ListCheckItemWarningMachineResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyPageInfo) SetPageSize(v int32) *ListCheckItemWarningMachineResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListCheckItemWarningMachineResponseBodyPageInfo) SetTotalCount(v int32) *ListCheckItemWarningMachineResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListCheckItemWarningMachineResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListCheckItemWarningMachineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCheckItemWarningMachineResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCheckItemWarningMachineResponse) GoString() string {
	return s.String()
}

func (s *ListCheckItemWarningMachineResponse) SetHeaders(v map[string]*string) *ListCheckItemWarningMachineResponse {
	s.Headers = v
	return s
}

func (s *ListCheckItemWarningMachineResponse) SetStatusCode(v int32) *ListCheckItemWarningMachineResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCheckItemWarningMachineResponse) SetBody(v *ListCheckItemWarningMachineResponseBody) *ListCheckItemWarningMachineResponse {
	s.Body = v
	return s
}

type ListCheckItemWarningSummaryRequest struct {
	CheckItemFuzzy      *string `json:"CheckItemFuzzy,omitempty" xml:"CheckItemFuzzy,omitempty"`
	CheckLevel          *string `json:"CheckLevel,omitempty" xml:"CheckLevel,omitempty"`
	CheckType           *string `json:"CheckType,omitempty" xml:"CheckType,omitempty"`
	CheckWarningStatus  *int32  `json:"CheckWarningStatus,omitempty" xml:"CheckWarningStatus,omitempty"`
	ContainerFieldName  *string `json:"ContainerFieldName,omitempty" xml:"ContainerFieldName,omitempty"`
	ContainerFieldValue *string `json:"ContainerFieldValue,omitempty" xml:"ContainerFieldValue,omitempty"`
	CurrentPage         *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	GroupId             *int64  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Lang                *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize            *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RiskType            *string `json:"RiskType,omitempty" xml:"RiskType,omitempty"`
}

func (s ListCheckItemWarningSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCheckItemWarningSummaryRequest) GoString() string {
	return s.String()
}

func (s *ListCheckItemWarningSummaryRequest) SetCheckItemFuzzy(v string) *ListCheckItemWarningSummaryRequest {
	s.CheckItemFuzzy = &v
	return s
}

func (s *ListCheckItemWarningSummaryRequest) SetCheckLevel(v string) *ListCheckItemWarningSummaryRequest {
	s.CheckLevel = &v
	return s
}

func (s *ListCheckItemWarningSummaryRequest) SetCheckType(v string) *ListCheckItemWarningSummaryRequest {
	s.CheckType = &v
	return s
}

func (s *ListCheckItemWarningSummaryRequest) SetCheckWarningStatus(v int32) *ListCheckItemWarningSummaryRequest {
	s.CheckWarningStatus = &v
	return s
}

func (s *ListCheckItemWarningSummaryRequest) SetContainerFieldName(v string) *ListCheckItemWarningSummaryRequest {
	s.ContainerFieldName = &v
	return s
}

func (s *ListCheckItemWarningSummaryRequest) SetContainerFieldValue(v string) *ListCheckItemWarningSummaryRequest {
	s.ContainerFieldValue = &v
	return s
}

func (s *ListCheckItemWarningSummaryRequest) SetCurrentPage(v int32) *ListCheckItemWarningSummaryRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListCheckItemWarningSummaryRequest) SetGroupId(v int64) *ListCheckItemWarningSummaryRequest {
	s.GroupId = &v
	return s
}

func (s *ListCheckItemWarningSummaryRequest) SetLang(v string) *ListCheckItemWarningSummaryRequest {
	s.Lang = &v
	return s
}

func (s *ListCheckItemWarningSummaryRequest) SetPageSize(v int32) *ListCheckItemWarningSummaryRequest {
	s.PageSize = &v
	return s
}

func (s *ListCheckItemWarningSummaryRequest) SetRiskType(v string) *ListCheckItemWarningSummaryRequest {
	s.RiskType = &v
	return s
}

type ListCheckItemWarningSummaryResponseBody struct {
	List      []*ListCheckItemWarningSummaryResponseBodyList   `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageInfo  *ListCheckItemWarningSummaryResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCheckItemWarningSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCheckItemWarningSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *ListCheckItemWarningSummaryResponseBody) SetList(v []*ListCheckItemWarningSummaryResponseBodyList) *ListCheckItemWarningSummaryResponseBody {
	s.List = v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBody) SetPageInfo(v *ListCheckItemWarningSummaryResponseBodyPageInfo) *ListCheckItemWarningSummaryResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBody) SetRequestId(v string) *ListCheckItemWarningSummaryResponseBody {
	s.RequestId = &v
	return s
}

type ListCheckItemWarningSummaryResponseBodyList struct {
	Advice              *string `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Alias               *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	CheckId             *int64  `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	CheckItem           *string `json:"CheckItem,omitempty" xml:"CheckItem,omitempty"`
	CheckLevel          *string `json:"CheckLevel,omitempty" xml:"CheckLevel,omitempty"`
	CheckType           *string `json:"CheckType,omitempty" xml:"CheckType,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RiskType            *string `json:"RiskType,omitempty" xml:"RiskType,omitempty"`
	Status              *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	WarningMachineCount *int32  `json:"WarningMachineCount,omitempty" xml:"WarningMachineCount,omitempty"`
}

func (s ListCheckItemWarningSummaryResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s ListCheckItemWarningSummaryResponseBodyList) GoString() string {
	return s.String()
}

func (s *ListCheckItemWarningSummaryResponseBodyList) SetAdvice(v string) *ListCheckItemWarningSummaryResponseBodyList {
	s.Advice = &v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBodyList) SetAlias(v string) *ListCheckItemWarningSummaryResponseBodyList {
	s.Alias = &v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBodyList) SetCheckId(v int64) *ListCheckItemWarningSummaryResponseBodyList {
	s.CheckId = &v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBodyList) SetCheckItem(v string) *ListCheckItemWarningSummaryResponseBodyList {
	s.CheckItem = &v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBodyList) SetCheckLevel(v string) *ListCheckItemWarningSummaryResponseBodyList {
	s.CheckLevel = &v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBodyList) SetCheckType(v string) *ListCheckItemWarningSummaryResponseBodyList {
	s.CheckType = &v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBodyList) SetDescription(v string) *ListCheckItemWarningSummaryResponseBodyList {
	s.Description = &v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBodyList) SetRiskType(v string) *ListCheckItemWarningSummaryResponseBodyList {
	s.RiskType = &v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBodyList) SetStatus(v int32) *ListCheckItemWarningSummaryResponseBodyList {
	s.Status = &v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBodyList) SetWarningMachineCount(v int32) *ListCheckItemWarningSummaryResponseBodyList {
	s.WarningMachineCount = &v
	return s
}

type ListCheckItemWarningSummaryResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCheckItemWarningSummaryResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListCheckItemWarningSummaryResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListCheckItemWarningSummaryResponseBodyPageInfo) SetCount(v int32) *ListCheckItemWarningSummaryResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBodyPageInfo) SetCurrentPage(v int32) *ListCheckItemWarningSummaryResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBodyPageInfo) SetPageSize(v int32) *ListCheckItemWarningSummaryResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListCheckItemWarningSummaryResponseBodyPageInfo) SetTotalCount(v int32) *ListCheckItemWarningSummaryResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListCheckItemWarningSummaryResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListCheckItemWarningSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCheckItemWarningSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCheckItemWarningSummaryResponse) GoString() string {
	return s.String()
}

func (s *ListCheckItemWarningSummaryResponse) SetHeaders(v map[string]*string) *ListCheckItemWarningSummaryResponse {
	s.Headers = v
	return s
}

func (s *ListCheckItemWarningSummaryResponse) SetStatusCode(v int32) *ListCheckItemWarningSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCheckItemWarningSummaryResponse) SetBody(v *ListCheckItemWarningSummaryResponseBody) *ListCheckItemWarningSummaryResponse {
	s.Body = v
	return s
}

type ListCheckResultRequest struct {
	// The key that you want to use to search for check items in fuzzy match mode.
	CheckKey *string `json:"CheckKey,omitempty" xml:"CheckKey,omitempty"`
	// The number of the page to return.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The instance IDs of the cloud services that you want to query. Separate multiple IDs with commas (,).
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The asset types of cloud services. Valid values:
	//
	// *   **ECS**: Elastic Compute Service (ECS)
	// *   **SLB**: Server Load Balancer (SLB)
	// *   **RDS**: ApsaraDB RDS
	// *   **MONGODB**: ApsaraDB for MongoDB (MongoDB)
	// *   **KVSTORE**: ApsaraDB for Redis (Redis)
	// *   **ACR**: Container Registry
	// *   **CSK**: Container Service for Kubernetes (ACK)
	// *   **VPC**: Virtual Private Cloud (VPC)
	// *   **ACTIONTRAIL**: ActionTrail
	// *   **CDN**: Alibaba Cloud CDN (CDN)
	// *   **CAS**: Certificate Management Service (formerly SSL Certificates Service)
	// *   **RDC**: Apsara Devops
	// *   **RAM**: Resource Access Management (RAM)
	// *   **DDOS**: Anti-DDoS
	// *   **WAF**: Web Application Firewall (WAF)
	// *   **OSS**: Object Storage Service (OSS)
	// *   **POLARDB**: PolarDB
	// *   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL
	// *   **MSE**: Microservices Engine (MSE)
	// *   **NAS**: Apsara File Storage NAS (NAS)
	// *   **SDDP**: Sensitive Data Discovery and Protection (SDDP)
	// *   **EIP**: Elastic IP Address (EIP)
	InstanceTypes []*string `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty" type:"Repeated"`
	// The language of the content within the request and the response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The IDs of requirement items.
	RequirementIds []*int64 `json:"RequirementIds,omitempty" xml:"RequirementIds,omitempty" type:"Repeated"`
	// The severities of check items. Separate multiple severities with commas (,). Valid values:
	//
	// *   **HIGH**
	// *   **MEDIUM**
	// *   **LOW**
	RiskLevels []*string `json:"RiskLevels,omitempty" xml:"RiskLevels,omitempty" type:"Repeated"`
	// The types of the conditions based on which check items are sorted. Valid values:
	//
	// *   **RISK_LEVEL**: risk level
	// *   **STATUS**: state
	SortTypes []*string `json:"SortTypes,omitempty" xml:"SortTypes,omitempty" type:"Repeated"`
	// The IDs of standards.
	StandardIds []*int64 `json:"StandardIds,omitempty" xml:"StandardIds,omitempty" type:"Repeated"`
	// The states of check items. Separate multiple states with commas (,). Valid values:
	//
	// *   **PASS**
	// *   **NOT_PASS**
	// *   **CHECKING**
	// *   **NOT_CHECK**
	// *   **WHITELIST**
	Statuses []*string `json:"Statuses,omitempty" xml:"Statuses,omitempty" type:"Repeated"`
	// The cloud service providers. Valid values:
	//
	// *   **ALIYUN**: Alibaba Cloud
	Vendors []*string `json:"Vendors,omitempty" xml:"Vendors,omitempty" type:"Repeated"`
}

func (s ListCheckResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCheckResultRequest) GoString() string {
	return s.String()
}

func (s *ListCheckResultRequest) SetCheckKey(v string) *ListCheckResultRequest {
	s.CheckKey = &v
	return s
}

func (s *ListCheckResultRequest) SetCurrentPage(v int32) *ListCheckResultRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListCheckResultRequest) SetInstanceIds(v []*string) *ListCheckResultRequest {
	s.InstanceIds = v
	return s
}

func (s *ListCheckResultRequest) SetInstanceTypes(v []*string) *ListCheckResultRequest {
	s.InstanceTypes = v
	return s
}

func (s *ListCheckResultRequest) SetLang(v string) *ListCheckResultRequest {
	s.Lang = &v
	return s
}

func (s *ListCheckResultRequest) SetPageSize(v int32) *ListCheckResultRequest {
	s.PageSize = &v
	return s
}

func (s *ListCheckResultRequest) SetRequirementIds(v []*int64) *ListCheckResultRequest {
	s.RequirementIds = v
	return s
}

func (s *ListCheckResultRequest) SetRiskLevels(v []*string) *ListCheckResultRequest {
	s.RiskLevels = v
	return s
}

func (s *ListCheckResultRequest) SetSortTypes(v []*string) *ListCheckResultRequest {
	s.SortTypes = v
	return s
}

func (s *ListCheckResultRequest) SetStandardIds(v []*int64) *ListCheckResultRequest {
	s.StandardIds = v
	return s
}

func (s *ListCheckResultRequest) SetStatuses(v []*string) *ListCheckResultRequest {
	s.Statuses = v
	return s
}

func (s *ListCheckResultRequest) SetVendors(v []*string) *ListCheckResultRequest {
	s.Vendors = v
	return s
}

type ListCheckResultResponseBody struct {
	// An array that consists of the check items.
	Checks []*ListCheckResultResponseBodyChecks `json:"Checks,omitempty" xml:"Checks,omitempty" type:"Repeated"`
	// The pagination information.
	PageInfo *ListCheckResultResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCheckResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCheckResultResponseBody) GoString() string {
	return s.String()
}

func (s *ListCheckResultResponseBody) SetChecks(v []*ListCheckResultResponseBodyChecks) *ListCheckResultResponseBody {
	s.Checks = v
	return s
}

func (s *ListCheckResultResponseBody) SetPageInfo(v *ListCheckResultResponseBodyPageInfo) *ListCheckResultResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListCheckResultResponseBody) SetRequestId(v string) *ListCheckResultResponseBody {
	s.RequestId = &v
	return s
}

type ListCheckResultResponseBodyChecks struct {
	// The ID of the check item.
	CheckId *int64 `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	// The check policies.
	CheckPolicies []*ListCheckResultResponseBodyChecksCheckPolicies `json:"CheckPolicies,omitempty" xml:"CheckPolicies,omitempty" type:"Repeated"`
	// The name of the check item.
	CheckShowName *string `json:"CheckShowName,omitempty" xml:"CheckShowName,omitempty"`
	// The asset subtype of the cloud service. Valid values:
	//
	// *   If the **InstanceType** parameter is set to **ECS**, this parameter supports the following valid values:
	//
	//     *   **INSTANCE**
	//     *   **DISK**
	//     *   **SECURITY_GROUP**
	//
	// *   If the **InstanceType** parameter is set to **ACR**, this parameter supports the following valid values:
	//
	//     *   **REPOSITORY_ENTERPRISE**
	//     *   **REPOSITORY_PERSON**
	//
	// *   If the **InstanceType** parameter is set to **RAM**, this parameter supports the following valid values:
	//
	//     *   **ALIAS**
	//     *   **USER**
	//     *   **POLICY**
	//     *   **GROUP**
	//
	// *   If the **InstanceType** parameter is set to **WAF**, this parameter supports the following valid values:
	//
	//     *   **DOMAIN**
	//
	// *   If the **InstanceType** parameter is set to other values, this parameter supports the following valid values:
	//
	//     *   **INSTANCE**
	InstanceSubType *string `json:"InstanceSubType,omitempty" xml:"InstanceSubType,omitempty"`
	// The asset type of the cloud service. Valid values:
	//
	// *   **ECS**: ECS
	// *   **SLB**: SLB
	// *   **RDS**: ApsaraDB RDS
	// *   **MONGODB**: MongoDB
	// *   **KVSTORE**: Redis
	// *   **ACR**: Container Registry
	// *   **CSK**: ACK
	// *   **VPC**: VPC
	// *   **ACTIONTRAIL**: ActionTrail
	// *   **CDN**: CDN
	// *   **CAS**: Certificate Management Service (formerly SSL Certificates Service)
	// *   **RDC**: Apsara Devops
	// *   **RAM**: RAM
	// *   **DDOS**: Anti-DDoS
	// *   **WAF**: WAF
	// *   **OSS**: OSS
	// *   **POLARDB**: PolarDB
	// *   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL
	// *   **MSE**: MSE
	// *   **NAS**: NAS
	// *   **SDDP**: SDDP
	// *   **EIP**: EIP
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The timestamp when the last check was performed. Unit: milliseconds.
	LastCheckTime *int64 `json:"LastCheckTime,omitempty" xml:"LastCheckTime,omitempty"`
	// The risk level of the check item. Valid values:
	//
	// *   **HIGH**
	// *   **MEDIUM**
	// *   **LOW**
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// The state of the check item. Valid values:
	//
	// *   **PASS**
	// *   **NOT_PASS**
	// *   **CHECKING**
	// *   **NOT_CHECK**
	// *   **WHITELIST**
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the check task.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The flag that whether this check item needs trial permission.
	TrialPermission *bool `json:"TrialPermission,omitempty" xml:"TrialPermission,omitempty"`
	// The value of the cloud service provider.
	Vendor *string `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
	// The name of the cloud service provider.
	VendorShowName *string `json:"VendorShowName,omitempty" xml:"VendorShowName,omitempty"`
}

func (s ListCheckResultResponseBodyChecks) String() string {
	return tea.Prettify(s)
}

func (s ListCheckResultResponseBodyChecks) GoString() string {
	return s.String()
}

func (s *ListCheckResultResponseBodyChecks) SetCheckId(v int64) *ListCheckResultResponseBodyChecks {
	s.CheckId = &v
	return s
}

func (s *ListCheckResultResponseBodyChecks) SetCheckPolicies(v []*ListCheckResultResponseBodyChecksCheckPolicies) *ListCheckResultResponseBodyChecks {
	s.CheckPolicies = v
	return s
}

func (s *ListCheckResultResponseBodyChecks) SetCheckShowName(v string) *ListCheckResultResponseBodyChecks {
	s.CheckShowName = &v
	return s
}

func (s *ListCheckResultResponseBodyChecks) SetInstanceSubType(v string) *ListCheckResultResponseBodyChecks {
	s.InstanceSubType = &v
	return s
}

func (s *ListCheckResultResponseBodyChecks) SetInstanceType(v string) *ListCheckResultResponseBodyChecks {
	s.InstanceType = &v
	return s
}

func (s *ListCheckResultResponseBodyChecks) SetLastCheckTime(v int64) *ListCheckResultResponseBodyChecks {
	s.LastCheckTime = &v
	return s
}

func (s *ListCheckResultResponseBodyChecks) SetRiskLevel(v string) *ListCheckResultResponseBodyChecks {
	s.RiskLevel = &v
	return s
}

func (s *ListCheckResultResponseBodyChecks) SetStatus(v string) *ListCheckResultResponseBodyChecks {
	s.Status = &v
	return s
}

func (s *ListCheckResultResponseBodyChecks) SetTaskId(v string) *ListCheckResultResponseBodyChecks {
	s.TaskId = &v
	return s
}

func (s *ListCheckResultResponseBodyChecks) SetTrialPermission(v bool) *ListCheckResultResponseBodyChecks {
	s.TrialPermission = &v
	return s
}

func (s *ListCheckResultResponseBodyChecks) SetVendor(v string) *ListCheckResultResponseBodyChecks {
	s.Vendor = &v
	return s
}

func (s *ListCheckResultResponseBodyChecks) SetVendorShowName(v string) *ListCheckResultResponseBodyChecks {
	s.VendorShowName = &v
	return s
}

type ListCheckResultResponseBodyChecksCheckPolicies struct {
	// The requirement item ID of the check item.
	RequirementId *int64 `json:"RequirementId,omitempty" xml:"RequirementId,omitempty"`
	// The item display name of the check item.
	RequirementShowName *string `json:"RequirementShowName,omitempty" xml:"RequirementShowName,omitempty"`
	// The section ID of the check item.
	SectionId *int64 `json:"SectionId,omitempty" xml:"SectionId,omitempty"`
	// The section display name of the check item.
	SectionShowName *string `json:"SectionShowName,omitempty" xml:"SectionShowName,omitempty"`
	// The standard ID of the check item.
	StandardId *int64 `json:"StandardId,omitempty" xml:"StandardId,omitempty"`
	// The standard display name of the check item.
	StandardShowName *string `json:"StandardShowName,omitempty" xml:"StandardShowName,omitempty"`
}

func (s ListCheckResultResponseBodyChecksCheckPolicies) String() string {
	return tea.Prettify(s)
}

func (s ListCheckResultResponseBodyChecksCheckPolicies) GoString() string {
	return s.String()
}

func (s *ListCheckResultResponseBodyChecksCheckPolicies) SetRequirementId(v int64) *ListCheckResultResponseBodyChecksCheckPolicies {
	s.RequirementId = &v
	return s
}

func (s *ListCheckResultResponseBodyChecksCheckPolicies) SetRequirementShowName(v string) *ListCheckResultResponseBodyChecksCheckPolicies {
	s.RequirementShowName = &v
	return s
}

func (s *ListCheckResultResponseBodyChecksCheckPolicies) SetSectionId(v int64) *ListCheckResultResponseBodyChecksCheckPolicies {
	s.SectionId = &v
	return s
}

func (s *ListCheckResultResponseBodyChecksCheckPolicies) SetSectionShowName(v string) *ListCheckResultResponseBodyChecksCheckPolicies {
	s.SectionShowName = &v
	return s
}

func (s *ListCheckResultResponseBodyChecksCheckPolicies) SetStandardId(v int64) *ListCheckResultResponseBodyChecksCheckPolicies {
	s.StandardId = &v
	return s
}

func (s *ListCheckResultResponseBodyChecksCheckPolicies) SetStandardShowName(v string) *ListCheckResultResponseBodyChecksCheckPolicies {
	s.StandardShowName = &v
	return s
}

type ListCheckResultResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCheckResultResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListCheckResultResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListCheckResultResponseBodyPageInfo) SetCount(v int32) *ListCheckResultResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListCheckResultResponseBodyPageInfo) SetCurrentPage(v int32) *ListCheckResultResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListCheckResultResponseBodyPageInfo) SetPageSize(v int32) *ListCheckResultResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListCheckResultResponseBodyPageInfo) SetTotalCount(v int32) *ListCheckResultResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListCheckResultResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListCheckResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCheckResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCheckResultResponse) GoString() string {
	return s.String()
}

func (s *ListCheckResultResponse) SetHeaders(v map[string]*string) *ListCheckResultResponse {
	s.Headers = v
	return s
}

func (s *ListCheckResultResponse) SetStatusCode(v int32) *ListCheckResultResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCheckResultResponse) SetBody(v *ListCheckResultResponseBody) *ListCheckResultResponse {
	s.Body = v
	return s
}

type ListCheckStandardRequest struct {
	InstanceIds      []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	InstanceSubTypes []*string `json:"InstanceSubTypes,omitempty" xml:"InstanceSubTypes,omitempty" type:"Repeated"`
	InstanceTypes    []*string `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty" type:"Repeated"`
	Lang             *string   `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Vendors          []*string `json:"Vendors,omitempty" xml:"Vendors,omitempty" type:"Repeated"`
}

func (s ListCheckStandardRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCheckStandardRequest) GoString() string {
	return s.String()
}

func (s *ListCheckStandardRequest) SetInstanceIds(v []*string) *ListCheckStandardRequest {
	s.InstanceIds = v
	return s
}

func (s *ListCheckStandardRequest) SetInstanceSubTypes(v []*string) *ListCheckStandardRequest {
	s.InstanceSubTypes = v
	return s
}

func (s *ListCheckStandardRequest) SetInstanceTypes(v []*string) *ListCheckStandardRequest {
	s.InstanceTypes = v
	return s
}

func (s *ListCheckStandardRequest) SetLang(v string) *ListCheckStandardRequest {
	s.Lang = &v
	return s
}

func (s *ListCheckStandardRequest) SetVendors(v []*string) *ListCheckStandardRequest {
	s.Vendors = v
	return s
}

type ListCheckStandardResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Standards []*ListCheckStandardResponseBodyStandards `json:"Standards,omitempty" xml:"Standards,omitempty" type:"Repeated"`
}

func (s ListCheckStandardResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCheckStandardResponseBody) GoString() string {
	return s.String()
}

func (s *ListCheckStandardResponseBody) SetRequestId(v string) *ListCheckStandardResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCheckStandardResponseBody) SetStandards(v []*ListCheckStandardResponseBodyStandards) *ListCheckStandardResponseBody {
	s.Standards = v
	return s
}

type ListCheckStandardResponseBodyStandards struct {
	Id           *int64                                                `json:"Id,omitempty" xml:"Id,omitempty"`
	Requirements []*ListCheckStandardResponseBodyStandardsRequirements `json:"Requirements,omitempty" xml:"Requirements,omitempty" type:"Repeated"`
	ShowName     *string                                               `json:"ShowName,omitempty" xml:"ShowName,omitempty"`
	Type         *string                                               `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListCheckStandardResponseBodyStandards) String() string {
	return tea.Prettify(s)
}

func (s ListCheckStandardResponseBodyStandards) GoString() string {
	return s.String()
}

func (s *ListCheckStandardResponseBodyStandards) SetId(v int64) *ListCheckStandardResponseBodyStandards {
	s.Id = &v
	return s
}

func (s *ListCheckStandardResponseBodyStandards) SetRequirements(v []*ListCheckStandardResponseBodyStandardsRequirements) *ListCheckStandardResponseBodyStandards {
	s.Requirements = v
	return s
}

func (s *ListCheckStandardResponseBodyStandards) SetShowName(v string) *ListCheckStandardResponseBodyStandards {
	s.ShowName = &v
	return s
}

func (s *ListCheckStandardResponseBodyStandards) SetType(v string) *ListCheckStandardResponseBodyStandards {
	s.Type = &v
	return s
}

type ListCheckStandardResponseBodyStandardsRequirements struct {
	Id             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RiskCheckCount *int64  `json:"RiskCheckCount,omitempty" xml:"RiskCheckCount,omitempty"`
	ShowName       *string `json:"ShowName,omitempty" xml:"ShowName,omitempty"`
}

func (s ListCheckStandardResponseBodyStandardsRequirements) String() string {
	return tea.Prettify(s)
}

func (s ListCheckStandardResponseBodyStandardsRequirements) GoString() string {
	return s.String()
}

func (s *ListCheckStandardResponseBodyStandardsRequirements) SetId(v int64) *ListCheckStandardResponseBodyStandardsRequirements {
	s.Id = &v
	return s
}

func (s *ListCheckStandardResponseBodyStandardsRequirements) SetRiskCheckCount(v int64) *ListCheckStandardResponseBodyStandardsRequirements {
	s.RiskCheckCount = &v
	return s
}

func (s *ListCheckStandardResponseBodyStandardsRequirements) SetShowName(v string) *ListCheckStandardResponseBodyStandardsRequirements {
	s.ShowName = &v
	return s
}

type ListCheckStandardResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListCheckStandardResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCheckStandardResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCheckStandardResponse) GoString() string {
	return s.String()
}

func (s *ListCheckStandardResponse) SetHeaders(v map[string]*string) *ListCheckStandardResponse {
	s.Headers = v
	return s
}

func (s *ListCheckStandardResponse) SetStatusCode(v int32) *ListCheckStandardResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCheckStandardResponse) SetBody(v *ListCheckStandardResponseBody) *ListCheckStandardResponse {
	s.Body = v
	return s
}

type ListClientUserDefineRuleTypesResponseBody struct {
	RequestId           *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserDefineRuleTypes []*string `json:"UserDefineRuleTypes,omitempty" xml:"UserDefineRuleTypes,omitempty" type:"Repeated"`
}

func (s ListClientUserDefineRuleTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClientUserDefineRuleTypesResponseBody) GoString() string {
	return s.String()
}

func (s *ListClientUserDefineRuleTypesResponseBody) SetRequestId(v string) *ListClientUserDefineRuleTypesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClientUserDefineRuleTypesResponseBody) SetUserDefineRuleTypes(v []*string) *ListClientUserDefineRuleTypesResponseBody {
	s.UserDefineRuleTypes = v
	return s
}

type ListClientUserDefineRuleTypesResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListClientUserDefineRuleTypesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClientUserDefineRuleTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClientUserDefineRuleTypesResponse) GoString() string {
	return s.String()
}

func (s *ListClientUserDefineRuleTypesResponse) SetHeaders(v map[string]*string) *ListClientUserDefineRuleTypesResponse {
	s.Headers = v
	return s
}

func (s *ListClientUserDefineRuleTypesResponse) SetStatusCode(v int32) *ListClientUserDefineRuleTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClientUserDefineRuleTypesResponse) SetBody(v *ListClientUserDefineRuleTypesResponseBody) *ListClientUserDefineRuleTypesResponse {
	s.Body = v
	return s
}

type ListClientUserDefineRulesRequest struct {
	CurrentPage *int32   `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Name        *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	PageSize    *int32   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Type        []*int32 `json:"Type,omitempty" xml:"Type,omitempty" type:"Repeated"`
}

func (s ListClientUserDefineRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClientUserDefineRulesRequest) GoString() string {
	return s.String()
}

func (s *ListClientUserDefineRulesRequest) SetCurrentPage(v int32) *ListClientUserDefineRulesRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListClientUserDefineRulesRequest) SetName(v string) *ListClientUserDefineRulesRequest {
	s.Name = &v
	return s
}

func (s *ListClientUserDefineRulesRequest) SetPageSize(v int32) *ListClientUserDefineRulesRequest {
	s.PageSize = &v
	return s
}

func (s *ListClientUserDefineRulesRequest) SetType(v []*int32) *ListClientUserDefineRulesRequest {
	s.Type = v
	return s
}

type ListClientUserDefineRulesResponseBody struct {
	PageInfo           *ListClientUserDefineRulesResponseBodyPageInfo             `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId          *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserDefineRuleList []*ListClientUserDefineRulesResponseBodyUserDefineRuleList `json:"UserDefineRuleList,omitempty" xml:"UserDefineRuleList,omitempty" type:"Repeated"`
}

func (s ListClientUserDefineRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClientUserDefineRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListClientUserDefineRulesResponseBody) SetPageInfo(v *ListClientUserDefineRulesResponseBodyPageInfo) *ListClientUserDefineRulesResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListClientUserDefineRulesResponseBody) SetRequestId(v string) *ListClientUserDefineRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClientUserDefineRulesResponseBody) SetUserDefineRuleList(v []*ListClientUserDefineRulesResponseBodyUserDefineRuleList) *ListClientUserDefineRulesResponseBody {
	s.UserDefineRuleList = v
	return s
}

type ListClientUserDefineRulesResponseBodyPageInfo struct {
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListClientUserDefineRulesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListClientUserDefineRulesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListClientUserDefineRulesResponseBodyPageInfo) SetCurrentPage(v int32) *ListClientUserDefineRulesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListClientUserDefineRulesResponseBodyPageInfo) SetPageSize(v int32) *ListClientUserDefineRulesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListClientUserDefineRulesResponseBodyPageInfo) SetTotalCount(v int32) *ListClientUserDefineRulesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListClientUserDefineRulesResponseBodyUserDefineRuleList struct {
	ActionType *int32  `json:"ActionType,omitempty" xml:"ActionType,omitempty"`
	Id         *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Platform   *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	SwitchId   *string `json:"SwitchId,omitempty" xml:"SwitchId,omitempty"`
	Type       *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListClientUserDefineRulesResponseBodyUserDefineRuleList) String() string {
	return tea.Prettify(s)
}

func (s ListClientUserDefineRulesResponseBodyUserDefineRuleList) GoString() string {
	return s.String()
}

func (s *ListClientUserDefineRulesResponseBodyUserDefineRuleList) SetActionType(v int32) *ListClientUserDefineRulesResponseBodyUserDefineRuleList {
	s.ActionType = &v
	return s
}

func (s *ListClientUserDefineRulesResponseBodyUserDefineRuleList) SetId(v int64) *ListClientUserDefineRulesResponseBodyUserDefineRuleList {
	s.Id = &v
	return s
}

func (s *ListClientUserDefineRulesResponseBodyUserDefineRuleList) SetName(v string) *ListClientUserDefineRulesResponseBodyUserDefineRuleList {
	s.Name = &v
	return s
}

func (s *ListClientUserDefineRulesResponseBodyUserDefineRuleList) SetPlatform(v string) *ListClientUserDefineRulesResponseBodyUserDefineRuleList {
	s.Platform = &v
	return s
}

func (s *ListClientUserDefineRulesResponseBodyUserDefineRuleList) SetSwitchId(v string) *ListClientUserDefineRulesResponseBodyUserDefineRuleList {
	s.SwitchId = &v
	return s
}

func (s *ListClientUserDefineRulesResponseBodyUserDefineRuleList) SetType(v int32) *ListClientUserDefineRulesResponseBodyUserDefineRuleList {
	s.Type = &v
	return s
}

type ListClientUserDefineRulesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListClientUserDefineRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClientUserDefineRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClientUserDefineRulesResponse) GoString() string {
	return s.String()
}

func (s *ListClientUserDefineRulesResponse) SetHeaders(v map[string]*string) *ListClientUserDefineRulesResponse {
	s.Headers = v
	return s
}

func (s *ListClientUserDefineRulesResponse) SetStatusCode(v int32) *ListClientUserDefineRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClientUserDefineRulesResponse) SetBody(v *ListClientUserDefineRulesResponseBody) *ListClientUserDefineRulesResponse {
	s.Body = v
	return s
}

type ListClusterCnnfStatusDetailRequest struct {
	ClusterIds []*string `json:"ClusterIds,omitempty" xml:"ClusterIds,omitempty" type:"Repeated"`
}

func (s ListClusterCnnfStatusDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterCnnfStatusDetailRequest) GoString() string {
	return s.String()
}

func (s *ListClusterCnnfStatusDetailRequest) SetClusterIds(v []*string) *ListClusterCnnfStatusDetailRequest {
	s.ClusterIds = v
	return s
}

type ListClusterCnnfStatusDetailResponseBody struct {
	Data      []*ListClusterCnnfStatusDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListClusterCnnfStatusDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterCnnfStatusDetailResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterCnnfStatusDetailResponseBody) SetData(v []*ListClusterCnnfStatusDetailResponseBodyData) *ListClusterCnnfStatusDetailResponseBody {
	s.Data = v
	return s
}

func (s *ListClusterCnnfStatusDetailResponseBody) SetRequestId(v string) *ListClusterCnnfStatusDetailResponseBody {
	s.RequestId = &v
	return s
}

type ListClusterCnnfStatusDetailResponseBodyData struct {
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Installed     *bool   `json:"Installed,omitempty" xml:"Installed,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InternetIp    *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	IntranetIp    *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	InvalidType   *string `json:"InvalidType,omitempty" xml:"InvalidType,omitempty"`
	MachineName   *string `json:"MachineName,omitempty" xml:"MachineName,omitempty"`
	MachineType   *int32  `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	PluginName    *string `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	PluginVersion *string `json:"PluginVersion,omitempty" xml:"PluginVersion,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Uuid          *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ListClusterCnnfStatusDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListClusterCnnfStatusDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListClusterCnnfStatusDetailResponseBodyData) SetClusterId(v string) *ListClusterCnnfStatusDetailResponseBodyData {
	s.ClusterId = &v
	return s
}

func (s *ListClusterCnnfStatusDetailResponseBodyData) SetInstalled(v bool) *ListClusterCnnfStatusDetailResponseBodyData {
	s.Installed = &v
	return s
}

func (s *ListClusterCnnfStatusDetailResponseBodyData) SetInstanceId(v string) *ListClusterCnnfStatusDetailResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ListClusterCnnfStatusDetailResponseBodyData) SetInternetIp(v string) *ListClusterCnnfStatusDetailResponseBodyData {
	s.InternetIp = &v
	return s
}

func (s *ListClusterCnnfStatusDetailResponseBodyData) SetIntranetIp(v string) *ListClusterCnnfStatusDetailResponseBodyData {
	s.IntranetIp = &v
	return s
}

func (s *ListClusterCnnfStatusDetailResponseBodyData) SetInvalidType(v string) *ListClusterCnnfStatusDetailResponseBodyData {
	s.InvalidType = &v
	return s
}

func (s *ListClusterCnnfStatusDetailResponseBodyData) SetMachineName(v string) *ListClusterCnnfStatusDetailResponseBodyData {
	s.MachineName = &v
	return s
}

func (s *ListClusterCnnfStatusDetailResponseBodyData) SetMachineType(v int32) *ListClusterCnnfStatusDetailResponseBodyData {
	s.MachineType = &v
	return s
}

func (s *ListClusterCnnfStatusDetailResponseBodyData) SetPluginName(v string) *ListClusterCnnfStatusDetailResponseBodyData {
	s.PluginName = &v
	return s
}

func (s *ListClusterCnnfStatusDetailResponseBodyData) SetPluginVersion(v string) *ListClusterCnnfStatusDetailResponseBodyData {
	s.PluginVersion = &v
	return s
}

func (s *ListClusterCnnfStatusDetailResponseBodyData) SetStatus(v string) *ListClusterCnnfStatusDetailResponseBodyData {
	s.Status = &v
	return s
}

func (s *ListClusterCnnfStatusDetailResponseBodyData) SetUuid(v string) *ListClusterCnnfStatusDetailResponseBodyData {
	s.Uuid = &v
	return s
}

type ListClusterCnnfStatusDetailResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListClusterCnnfStatusDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterCnnfStatusDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterCnnfStatusDetailResponse) GoString() string {
	return s.String()
}

func (s *ListClusterCnnfStatusDetailResponse) SetHeaders(v map[string]*string) *ListClusterCnnfStatusDetailResponse {
	s.Headers = v
	return s
}

func (s *ListClusterCnnfStatusDetailResponse) SetStatusCode(v int32) *ListClusterCnnfStatusDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterCnnfStatusDetailResponse) SetBody(v *ListClusterCnnfStatusDetailResponseBody) *ListClusterCnnfStatusDetailResponse {
	s.Body = v
	return s
}

type ListClusterInterceptionConfigRequest struct {
	ClusterCNNFStatus *int32  `json:"ClusterCNNFStatus,omitempty" xml:"ClusterCNNFStatus,omitempty"`
	ClusterId         *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName       *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	CurrentPage       *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListClusterInterceptionConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInterceptionConfigRequest) GoString() string {
	return s.String()
}

func (s *ListClusterInterceptionConfigRequest) SetClusterCNNFStatus(v int32) *ListClusterInterceptionConfigRequest {
	s.ClusterCNNFStatus = &v
	return s
}

func (s *ListClusterInterceptionConfigRequest) SetClusterId(v string) *ListClusterInterceptionConfigRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterInterceptionConfigRequest) SetClusterName(v string) *ListClusterInterceptionConfigRequest {
	s.ClusterName = &v
	return s
}

func (s *ListClusterInterceptionConfigRequest) SetCurrentPage(v int32) *ListClusterInterceptionConfigRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListClusterInterceptionConfigRequest) SetPageSize(v int32) *ListClusterInterceptionConfigRequest {
	s.PageSize = &v
	return s
}

type ListClusterInterceptionConfigResponseBody struct {
	ClusterConfigList []*ListClusterInterceptionConfigResponseBodyClusterConfigList `json:"ClusterConfigList,omitempty" xml:"ClusterConfigList,omitempty" type:"Repeated"`
	PageInfo          *ListClusterInterceptionConfigResponseBodyPageInfo            `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId         *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListClusterInterceptionConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInterceptionConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterInterceptionConfigResponseBody) SetClusterConfigList(v []*ListClusterInterceptionConfigResponseBodyClusterConfigList) *ListClusterInterceptionConfigResponseBody {
	s.ClusterConfigList = v
	return s
}

func (s *ListClusterInterceptionConfigResponseBody) SetPageInfo(v *ListClusterInterceptionConfigResponseBodyPageInfo) *ListClusterInterceptionConfigResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListClusterInterceptionConfigResponseBody) SetRequestId(v string) *ListClusterInterceptionConfigResponseBody {
	s.RequestId = &v
	return s
}

type ListClusterInterceptionConfigResponseBodyClusterConfigList struct {
	ClusterCNNFStatus  *int32  `json:"ClusterCNNFStatus,omitempty" xml:"ClusterCNNFStatus,omitempty"`
	ClusterId          *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName        *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterType        *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	InterceptionSwitch *int32  `json:"InterceptionSwitch,omitempty" xml:"InterceptionSwitch,omitempty"`
	OpenRuleCount      *int64  `json:"OpenRuleCount,omitempty" xml:"OpenRuleCount,omitempty"`
	SupportCNNF        *bool   `json:"SupportCNNF,omitempty" xml:"SupportCNNF,omitempty"`
	TotalRuleCount     *int64  `json:"TotalRuleCount,omitempty" xml:"TotalRuleCount,omitempty"`
}

func (s ListClusterInterceptionConfigResponseBodyClusterConfigList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInterceptionConfigResponseBodyClusterConfigList) GoString() string {
	return s.String()
}

func (s *ListClusterInterceptionConfigResponseBodyClusterConfigList) SetClusterCNNFStatus(v int32) *ListClusterInterceptionConfigResponseBodyClusterConfigList {
	s.ClusterCNNFStatus = &v
	return s
}

func (s *ListClusterInterceptionConfigResponseBodyClusterConfigList) SetClusterId(v string) *ListClusterInterceptionConfigResponseBodyClusterConfigList {
	s.ClusterId = &v
	return s
}

func (s *ListClusterInterceptionConfigResponseBodyClusterConfigList) SetClusterName(v string) *ListClusterInterceptionConfigResponseBodyClusterConfigList {
	s.ClusterName = &v
	return s
}

func (s *ListClusterInterceptionConfigResponseBodyClusterConfigList) SetClusterType(v string) *ListClusterInterceptionConfigResponseBodyClusterConfigList {
	s.ClusterType = &v
	return s
}

func (s *ListClusterInterceptionConfigResponseBodyClusterConfigList) SetInterceptionSwitch(v int32) *ListClusterInterceptionConfigResponseBodyClusterConfigList {
	s.InterceptionSwitch = &v
	return s
}

func (s *ListClusterInterceptionConfigResponseBodyClusterConfigList) SetOpenRuleCount(v int64) *ListClusterInterceptionConfigResponseBodyClusterConfigList {
	s.OpenRuleCount = &v
	return s
}

func (s *ListClusterInterceptionConfigResponseBodyClusterConfigList) SetSupportCNNF(v bool) *ListClusterInterceptionConfigResponseBodyClusterConfigList {
	s.SupportCNNF = &v
	return s
}

func (s *ListClusterInterceptionConfigResponseBodyClusterConfigList) SetTotalRuleCount(v int64) *ListClusterInterceptionConfigResponseBodyClusterConfigList {
	s.TotalRuleCount = &v
	return s
}

type ListClusterInterceptionConfigResponseBodyPageInfo struct {
	Count        *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrrentPage *int32 `json:"CurrrentPage,omitempty" xml:"CurrrentPage,omitempty"`
	PageSize     *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount   *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListClusterInterceptionConfigResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInterceptionConfigResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListClusterInterceptionConfigResponseBodyPageInfo) SetCount(v int32) *ListClusterInterceptionConfigResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListClusterInterceptionConfigResponseBodyPageInfo) SetCurrrentPage(v int32) *ListClusterInterceptionConfigResponseBodyPageInfo {
	s.CurrrentPage = &v
	return s
}

func (s *ListClusterInterceptionConfigResponseBodyPageInfo) SetPageSize(v int32) *ListClusterInterceptionConfigResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListClusterInterceptionConfigResponseBodyPageInfo) SetTotalCount(v int32) *ListClusterInterceptionConfigResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListClusterInterceptionConfigResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListClusterInterceptionConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterInterceptionConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInterceptionConfigResponse) GoString() string {
	return s.String()
}

func (s *ListClusterInterceptionConfigResponse) SetHeaders(v map[string]*string) *ListClusterInterceptionConfigResponse {
	s.Headers = v
	return s
}

func (s *ListClusterInterceptionConfigResponse) SetStatusCode(v int32) *ListClusterInterceptionConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterInterceptionConfigResponse) SetBody(v *ListClusterInterceptionConfigResponseBody) *ListClusterInterceptionConfigResponse {
	s.Body = v
	return s
}

type ListHoneypotRequest struct {
	// The number of the page to return.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The IDs of honeypots.
	HoneypotIds []*string `json:"HoneypotIds,omitempty" xml:"HoneypotIds,omitempty" type:"Repeated"`
	// The name of the honeypot.
	HoneypotName *string `json:"HoneypotName,omitempty" xml:"HoneypotName,omitempty"`
	// The ID of the management node to which the honeypot belongs.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The name of the management node to which the honeypot belongs.
	NodeName *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListHoneypotRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotRequest) GoString() string {
	return s.String()
}

func (s *ListHoneypotRequest) SetCurrentPage(v int32) *ListHoneypotRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListHoneypotRequest) SetHoneypotIds(v []*string) *ListHoneypotRequest {
	s.HoneypotIds = v
	return s
}

func (s *ListHoneypotRequest) SetHoneypotName(v string) *ListHoneypotRequest {
	s.HoneypotName = &v
	return s
}

func (s *ListHoneypotRequest) SetNodeId(v string) *ListHoneypotRequest {
	s.NodeId = &v
	return s
}

func (s *ListHoneypotRequest) SetNodeName(v string) *ListHoneypotRequest {
	s.NodeName = &v
	return s
}

func (s *ListHoneypotRequest) SetPageSize(v int32) *ListHoneypotRequest {
	s.PageSize = &v
	return s
}

type ListHoneypotResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The HTTP status code returned.
	HttpStatusCode *int32                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	List           []*ListHoneypotResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The pagination information.
	PageInfo *ListHoneypotResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListHoneypotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotResponseBody) GoString() string {
	return s.String()
}

func (s *ListHoneypotResponseBody) SetCode(v string) *ListHoneypotResponseBody {
	s.Code = &v
	return s
}

func (s *ListHoneypotResponseBody) SetHttpStatusCode(v int32) *ListHoneypotResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListHoneypotResponseBody) SetList(v []*ListHoneypotResponseBodyList) *ListHoneypotResponseBody {
	s.List = v
	return s
}

func (s *ListHoneypotResponseBody) SetMessage(v string) *ListHoneypotResponseBody {
	s.Message = &v
	return s
}

func (s *ListHoneypotResponseBody) SetPageInfo(v *ListHoneypotResponseBodyPageInfo) *ListHoneypotResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListHoneypotResponseBody) SetRequestId(v string) *ListHoneypotResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHoneypotResponseBody) SetSuccess(v bool) *ListHoneypotResponseBody {
	s.Success = &v
	return s
}

type ListHoneypotResponseBodyList struct {
	// The name of the management node to which the honeypot is deployed.
	ControlNodeName *string `json:"ControlNodeName,omitempty" xml:"ControlNodeName,omitempty"`
	// The ID of the honeypot.
	HoneypotId *string `json:"HoneypotId,omitempty" xml:"HoneypotId,omitempty"`
	// The display name of the image that is used for the honeypot.
	HoneypotImageDisplayName *string `json:"HoneypotImageDisplayName,omitempty" xml:"HoneypotImageDisplayName,omitempty"`
	// The ID of the image that is used for the honeypot.
	HoneypotImageId *string `json:"HoneypotImageId,omitempty" xml:"HoneypotImageId,omitempty"`
	// The name of the image that is used for the honeypot.
	HoneypotImageName *string `json:"HoneypotImageName,omitempty" xml:"HoneypotImageName,omitempty"`
	// The name of the honeypot.
	HoneypotName *string `json:"HoneypotName,omitempty" xml:"HoneypotName,omitempty"`
	// The ID of the management node.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The ID of the custom configuration for the honeypot.
	PresetId *string `json:"PresetId,omitempty" xml:"PresetId,omitempty"`
	// An array that consists of the status information of the honeypot.
	State []*string `json:"State,omitempty" xml:"State,omitempty" type:"Repeated"`
}

func (s ListHoneypotResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotResponseBodyList) GoString() string {
	return s.String()
}

func (s *ListHoneypotResponseBodyList) SetControlNodeName(v string) *ListHoneypotResponseBodyList {
	s.ControlNodeName = &v
	return s
}

func (s *ListHoneypotResponseBodyList) SetHoneypotId(v string) *ListHoneypotResponseBodyList {
	s.HoneypotId = &v
	return s
}

func (s *ListHoneypotResponseBodyList) SetHoneypotImageDisplayName(v string) *ListHoneypotResponseBodyList {
	s.HoneypotImageDisplayName = &v
	return s
}

func (s *ListHoneypotResponseBodyList) SetHoneypotImageId(v string) *ListHoneypotResponseBodyList {
	s.HoneypotImageId = &v
	return s
}

func (s *ListHoneypotResponseBodyList) SetHoneypotImageName(v string) *ListHoneypotResponseBodyList {
	s.HoneypotImageName = &v
	return s
}

func (s *ListHoneypotResponseBodyList) SetHoneypotName(v string) *ListHoneypotResponseBodyList {
	s.HoneypotName = &v
	return s
}

func (s *ListHoneypotResponseBodyList) SetNodeId(v string) *ListHoneypotResponseBodyList {
	s.NodeId = &v
	return s
}

func (s *ListHoneypotResponseBodyList) SetPresetId(v string) *ListHoneypotResponseBodyList {
	s.PresetId = &v
	return s
}

func (s *ListHoneypotResponseBodyList) SetState(v []*string) *ListHoneypotResponseBodyList {
	s.State = v
	return s
}

type ListHoneypotResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHoneypotResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListHoneypotResponseBodyPageInfo) SetCount(v int32) *ListHoneypotResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListHoneypotResponseBodyPageInfo) SetCurrentPage(v int32) *ListHoneypotResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListHoneypotResponseBodyPageInfo) SetPageSize(v int32) *ListHoneypotResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListHoneypotResponseBodyPageInfo) SetTotalCount(v int32) *ListHoneypotResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListHoneypotResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListHoneypotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListHoneypotResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotResponse) GoString() string {
	return s.String()
}

func (s *ListHoneypotResponse) SetHeaders(v map[string]*string) *ListHoneypotResponse {
	s.Headers = v
	return s
}

func (s *ListHoneypotResponse) SetStatusCode(v int32) *ListHoneypotResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHoneypotResponse) SetBody(v *ListHoneypotResponseBody) *ListHoneypotResponse {
	s.Body = v
	return s
}

type ListHoneypotAlarmEventsRequest struct {
	CurrentPage   *int32    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Dealed        *string   `json:"Dealed,omitempty" xml:"Dealed,omitempty"`
	DstIp         *string   `json:"DstIp,omitempty" xml:"DstIp,omitempty"`
	PageSize      *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId     *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RiskLevelList []*string `json:"RiskLevelList,omitempty" xml:"RiskLevelList,omitempty" type:"Repeated"`
	SrcIp         *string   `json:"SrcIp,omitempty" xml:"SrcIp,omitempty"`
}

func (s ListHoneypotAlarmEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotAlarmEventsRequest) GoString() string {
	return s.String()
}

func (s *ListHoneypotAlarmEventsRequest) SetCurrentPage(v int32) *ListHoneypotAlarmEventsRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListHoneypotAlarmEventsRequest) SetDealed(v string) *ListHoneypotAlarmEventsRequest {
	s.Dealed = &v
	return s
}

func (s *ListHoneypotAlarmEventsRequest) SetDstIp(v string) *ListHoneypotAlarmEventsRequest {
	s.DstIp = &v
	return s
}

func (s *ListHoneypotAlarmEventsRequest) SetPageSize(v int32) *ListHoneypotAlarmEventsRequest {
	s.PageSize = &v
	return s
}

func (s *ListHoneypotAlarmEventsRequest) SetRequestId(v string) *ListHoneypotAlarmEventsRequest {
	s.RequestId = &v
	return s
}

func (s *ListHoneypotAlarmEventsRequest) SetRiskLevelList(v []*string) *ListHoneypotAlarmEventsRequest {
	s.RiskLevelList = v
	return s
}

func (s *ListHoneypotAlarmEventsRequest) SetSrcIp(v string) *ListHoneypotAlarmEventsRequest {
	s.SrcIp = &v
	return s
}

type ListHoneypotAlarmEventsResponseBody struct {
	HoneypotAlarmEvents []*ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents `json:"HoneypotAlarmEvents,omitempty" xml:"HoneypotAlarmEvents,omitempty" type:"Repeated"`
	PageInfo            *ListHoneypotAlarmEventsResponseBodyPageInfo              `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId           *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListHoneypotAlarmEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotAlarmEventsResponseBody) GoString() string {
	return s.String()
}

func (s *ListHoneypotAlarmEventsResponseBody) SetHoneypotAlarmEvents(v []*ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents) *ListHoneypotAlarmEventsResponseBody {
	s.HoneypotAlarmEvents = v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBody) SetPageInfo(v *ListHoneypotAlarmEventsResponseBodyPageInfo) *ListHoneypotAlarmEventsResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBody) SetRequestId(v string) *ListHoneypotAlarmEventsResponseBody {
	s.RequestId = &v
	return s
}

type ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents struct {
	AlarmEventId    *int64                                                                  `json:"AlarmEventId,omitempty" xml:"AlarmEventId,omitempty"`
	AlarmEventName  *string                                                                 `json:"AlarmEventName,omitempty" xml:"AlarmEventName,omitempty"`
	AlarmEventType  *string                                                                 `json:"AlarmEventType,omitempty" xml:"AlarmEventType,omitempty"`
	AlarmUniqueInfo *string                                                                 `json:"AlarmUniqueInfo,omitempty" xml:"AlarmUniqueInfo,omitempty"`
	EventCount      *int32                                                                  `json:"EventCount,omitempty" xml:"EventCount,omitempty"`
	FirstTime       *int64                                                                  `json:"FirstTime,omitempty" xml:"FirstTime,omitempty"`
	LastTime        *int64                                                                  `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	MergeFieldList  []*ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEventsMergeFieldList `json:"MergeFieldList,omitempty" xml:"MergeFieldList,omitempty" type:"Repeated"`
	OperateStatus   *int32                                                                  `json:"OperateStatus,omitempty" xml:"OperateStatus,omitempty"`
	RiskLevel       *string                                                                 `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
}

func (s ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents) GoString() string {
	return s.String()
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents) SetAlarmEventId(v int64) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents {
	s.AlarmEventId = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents) SetAlarmEventName(v string) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents {
	s.AlarmEventName = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents) SetAlarmEventType(v string) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents {
	s.AlarmEventType = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents) SetAlarmUniqueInfo(v string) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents {
	s.AlarmUniqueInfo = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents) SetEventCount(v int32) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents {
	s.EventCount = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents) SetFirstTime(v int64) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents {
	s.FirstTime = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents) SetLastTime(v int64) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents {
	s.LastTime = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents) SetMergeFieldList(v []*ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEventsMergeFieldList) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents {
	s.MergeFieldList = v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents) SetOperateStatus(v int32) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents {
	s.OperateStatus = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents) SetRiskLevel(v string) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEvents {
	s.RiskLevel = &v
	return s
}

type ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEventsMergeFieldList struct {
	FieldExtInfo *string `json:"FieldExtInfo,omitempty" xml:"FieldExtInfo,omitempty"`
	FieldKey     *string `json:"FieldKey,omitempty" xml:"FieldKey,omitempty"`
	FieldType    *string `json:"FieldType,omitempty" xml:"FieldType,omitempty"`
	FieldValue   *string `json:"FieldValue,omitempty" xml:"FieldValue,omitempty"`
}

func (s ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEventsMergeFieldList) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEventsMergeFieldList) GoString() string {
	return s.String()
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEventsMergeFieldList) SetFieldExtInfo(v string) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEventsMergeFieldList {
	s.FieldExtInfo = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEventsMergeFieldList) SetFieldKey(v string) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEventsMergeFieldList {
	s.FieldKey = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEventsMergeFieldList) SetFieldType(v string) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEventsMergeFieldList {
	s.FieldType = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEventsMergeFieldList) SetFieldValue(v string) *ListHoneypotAlarmEventsResponseBodyHoneypotAlarmEventsMergeFieldList {
	s.FieldValue = &v
	return s
}

type ListHoneypotAlarmEventsResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHoneypotAlarmEventsResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotAlarmEventsResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListHoneypotAlarmEventsResponseBodyPageInfo) SetCount(v int32) *ListHoneypotAlarmEventsResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyPageInfo) SetCurrentPage(v int32) *ListHoneypotAlarmEventsResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyPageInfo) SetPageSize(v int32) *ListHoneypotAlarmEventsResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponseBodyPageInfo) SetTotalCount(v int32) *ListHoneypotAlarmEventsResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListHoneypotAlarmEventsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListHoneypotAlarmEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListHoneypotAlarmEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotAlarmEventsResponse) GoString() string {
	return s.String()
}

func (s *ListHoneypotAlarmEventsResponse) SetHeaders(v map[string]*string) *ListHoneypotAlarmEventsResponse {
	s.Headers = v
	return s
}

func (s *ListHoneypotAlarmEventsResponse) SetStatusCode(v int32) *ListHoneypotAlarmEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHoneypotAlarmEventsResponse) SetBody(v *ListHoneypotAlarmEventsResponseBody) *ListHoneypotAlarmEventsResponse {
	s.Body = v
	return s
}

type ListHoneypotNodeRequest struct {
	// The number of the page to return.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The ID of the management node.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The name of the management node.
	NodeName *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListHoneypotNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotNodeRequest) GoString() string {
	return s.String()
}

func (s *ListHoneypotNodeRequest) SetCurrentPage(v int32) *ListHoneypotNodeRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListHoneypotNodeRequest) SetNodeId(v string) *ListHoneypotNodeRequest {
	s.NodeId = &v
	return s
}

func (s *ListHoneypotNodeRequest) SetNodeName(v string) *ListHoneypotNodeRequest {
	s.NodeName = &v
	return s
}

func (s *ListHoneypotNodeRequest) SetPageSize(v int32) *ListHoneypotNodeRequest {
	s.PageSize = &v
	return s
}

type ListHoneypotNodeResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// An array that consists of the information about the management nodes.
	HoneypotNodeList []*ListHoneypotNodeResponseBodyHoneypotNodeList `json:"HoneypotNodeList,omitempty" xml:"HoneypotNodeList,omitempty" type:"Repeated"`
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The pagination information.
	PageInfo *ListHoneypotNodeResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListHoneypotNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotNodeResponseBody) GoString() string {
	return s.String()
}

func (s *ListHoneypotNodeResponseBody) SetCode(v string) *ListHoneypotNodeResponseBody {
	s.Code = &v
	return s
}

func (s *ListHoneypotNodeResponseBody) SetHoneypotNodeList(v []*ListHoneypotNodeResponseBodyHoneypotNodeList) *ListHoneypotNodeResponseBody {
	s.HoneypotNodeList = v
	return s
}

func (s *ListHoneypotNodeResponseBody) SetHttpStatusCode(v int32) *ListHoneypotNodeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListHoneypotNodeResponseBody) SetMessage(v string) *ListHoneypotNodeResponseBody {
	s.Message = &v
	return s
}

func (s *ListHoneypotNodeResponseBody) SetPageInfo(v *ListHoneypotNodeResponseBodyPageInfo) *ListHoneypotNodeResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListHoneypotNodeResponseBody) SetRequestId(v string) *ListHoneypotNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHoneypotNodeResponseBody) SetSuccess(v bool) *ListHoneypotNodeResponseBody {
	s.Success = &v
	return s
}

type ListHoneypotNodeResponseBodyHoneypotNodeList struct {
	// Indicates whether the honeypot is allowed to access the Internet.
	//
	// *   **true**: The honeypot is allowed to access the Internet.
	// *   **false**: The honeypot is not allowed to access the Internet.
	AllowHoneypotAccessInternet *bool `json:"AllowHoneypotAccessInternet,omitempty" xml:"AllowHoneypotAccessInternet,omitempty"`
	// The time when the management node was created.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The type of the management node. Default value: **false**. Valid values:
	//
	// *   **false**: non-default type
	// *   **true**: default type
	DefaultNode *bool `json:"DefaultNode,omitempty" xml:"DefaultNode,omitempty"`
	// The ID of the Elastic Compute Service (ECS) instance.
	EcsInstanceId *string `json:"EcsInstanceId,omitempty" xml:"EcsInstanceId,omitempty"`
	// The maximum number of honeypots that can be deployed on the management node.
	HoneypotTotalCount *int32 `json:"HoneypotTotalCount,omitempty" xml:"HoneypotTotalCount,omitempty"`
	// The number of honeypots that are deployed on the management node.
	HoneypotUsedCount *int32 `json:"HoneypotUsedCount,omitempty" xml:"HoneypotUsedCount,omitempty"`
	// The ID of the management node.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The IP address of the management node.
	NodeIp *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	// The name of the management node.
	NodeName *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	// The maximum number of probes that can be used.
	ProbeTotalCount *int32 `json:"ProbeTotalCount,omitempty" xml:"ProbeTotalCount,omitempty"`
	// The number of probes that are used.
	ProbeUsedCount *int32 `json:"ProbeUsedCount,omitempty" xml:"ProbeUsedCount,omitempty"`
	// An array that consists of the allowed CIDR blocks.
	SecurityGroupProbeIpList []*string `json:"SecurityGroupProbeIpList,omitempty" xml:"SecurityGroupProbeIpList,omitempty" type:"Repeated"`
	// The status of the management node. Valid values:
	//
	// *   **1**: normal
	// *   **2**: abnormal
	TotalStatus      *int32 `json:"TotalStatus,omitempty" xml:"TotalStatus,omitempty"`
	UpgradeAvailable *bool  `json:"UpgradeAvailable,omitempty" xml:"UpgradeAvailable,omitempty"`
}

func (s ListHoneypotNodeResponseBodyHoneypotNodeList) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotNodeResponseBodyHoneypotNodeList) GoString() string {
	return s.String()
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetAllowHoneypotAccessInternet(v bool) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.AllowHoneypotAccessInternet = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetCreateTime(v string) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.CreateTime = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetDefaultNode(v bool) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.DefaultNode = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetEcsInstanceId(v string) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.EcsInstanceId = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetHoneypotTotalCount(v int32) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.HoneypotTotalCount = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetHoneypotUsedCount(v int32) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.HoneypotUsedCount = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetNodeId(v string) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.NodeId = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetNodeIp(v string) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.NodeIp = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetNodeName(v string) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.NodeName = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetProbeTotalCount(v int32) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.ProbeTotalCount = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetProbeUsedCount(v int32) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.ProbeUsedCount = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetSecurityGroupProbeIpList(v []*string) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.SecurityGroupProbeIpList = v
	return s
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetTotalStatus(v int32) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.TotalStatus = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyHoneypotNodeList) SetUpgradeAvailable(v bool) *ListHoneypotNodeResponseBodyHoneypotNodeList {
	s.UpgradeAvailable = &v
	return s
}

type ListHoneypotNodeResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHoneypotNodeResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotNodeResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListHoneypotNodeResponseBodyPageInfo) SetCount(v int32) *ListHoneypotNodeResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyPageInfo) SetCurrentPage(v int32) *ListHoneypotNodeResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyPageInfo) SetPageSize(v int32) *ListHoneypotNodeResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListHoneypotNodeResponseBodyPageInfo) SetTotalCount(v int32) *ListHoneypotNodeResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListHoneypotNodeResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListHoneypotNodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListHoneypotNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotNodeResponse) GoString() string {
	return s.String()
}

func (s *ListHoneypotNodeResponse) SetHeaders(v map[string]*string) *ListHoneypotNodeResponse {
	s.Headers = v
	return s
}

func (s *ListHoneypotNodeResponse) SetStatusCode(v int32) *ListHoneypotNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHoneypotNodeResponse) SetBody(v *ListHoneypotNodeResponseBody) *ListHoneypotNodeResponse {
	s.Body = v
	return s
}

type ListHoneypotPresetRequest struct {
	CurrentPage       *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	HoneypotImageName *string `json:"HoneypotImageName,omitempty" xml:"HoneypotImageName,omitempty"`
	Lang              *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	NodeId            *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName          *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PresetName        *string `json:"PresetName,omitempty" xml:"PresetName,omitempty"`
}

func (s ListHoneypotPresetRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotPresetRequest) GoString() string {
	return s.String()
}

func (s *ListHoneypotPresetRequest) SetCurrentPage(v int32) *ListHoneypotPresetRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListHoneypotPresetRequest) SetHoneypotImageName(v string) *ListHoneypotPresetRequest {
	s.HoneypotImageName = &v
	return s
}

func (s *ListHoneypotPresetRequest) SetLang(v string) *ListHoneypotPresetRequest {
	s.Lang = &v
	return s
}

func (s *ListHoneypotPresetRequest) SetNodeId(v string) *ListHoneypotPresetRequest {
	s.NodeId = &v
	return s
}

func (s *ListHoneypotPresetRequest) SetNodeName(v string) *ListHoneypotPresetRequest {
	s.NodeName = &v
	return s
}

func (s *ListHoneypotPresetRequest) SetPageSize(v int32) *ListHoneypotPresetRequest {
	s.PageSize = &v
	return s
}

func (s *ListHoneypotPresetRequest) SetPresetName(v string) *ListHoneypotPresetRequest {
	s.PresetName = &v
	return s
}

type ListHoneypotPresetResponseBody struct {
	Code           *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	List           []*ListHoneypotPresetResponseBodyList   `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	Message        *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	PageInfo       *ListHoneypotPresetResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListHoneypotPresetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotPresetResponseBody) GoString() string {
	return s.String()
}

func (s *ListHoneypotPresetResponseBody) SetCode(v string) *ListHoneypotPresetResponseBody {
	s.Code = &v
	return s
}

func (s *ListHoneypotPresetResponseBody) SetHttpStatusCode(v int32) *ListHoneypotPresetResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListHoneypotPresetResponseBody) SetList(v []*ListHoneypotPresetResponseBodyList) *ListHoneypotPresetResponseBody {
	s.List = v
	return s
}

func (s *ListHoneypotPresetResponseBody) SetMessage(v string) *ListHoneypotPresetResponseBody {
	s.Message = &v
	return s
}

func (s *ListHoneypotPresetResponseBody) SetPageInfo(v *ListHoneypotPresetResponseBodyPageInfo) *ListHoneypotPresetResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListHoneypotPresetResponseBody) SetRequestId(v string) *ListHoneypotPresetResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHoneypotPresetResponseBody) SetSuccess(v bool) *ListHoneypotPresetResponseBody {
	s.Success = &v
	return s
}

type ListHoneypotPresetResponseBodyList struct {
	ControlNodeName          *string `json:"ControlNodeName,omitempty" xml:"ControlNodeName,omitempty"`
	HoneypotImageDisplayName *string `json:"HoneypotImageDisplayName,omitempty" xml:"HoneypotImageDisplayName,omitempty"`
	HoneypotImageName        *string `json:"HoneypotImageName,omitempty" xml:"HoneypotImageName,omitempty"`
	HoneypotPresetId         *string `json:"HoneypotPresetId,omitempty" xml:"HoneypotPresetId,omitempty"`
	NodeId                   *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	PresetName               *string `json:"PresetName,omitempty" xml:"PresetName,omitempty"`
	PresetType               *string `json:"PresetType,omitempty" xml:"PresetType,omitempty"`
}

func (s ListHoneypotPresetResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotPresetResponseBodyList) GoString() string {
	return s.String()
}

func (s *ListHoneypotPresetResponseBodyList) SetControlNodeName(v string) *ListHoneypotPresetResponseBodyList {
	s.ControlNodeName = &v
	return s
}

func (s *ListHoneypotPresetResponseBodyList) SetHoneypotImageDisplayName(v string) *ListHoneypotPresetResponseBodyList {
	s.HoneypotImageDisplayName = &v
	return s
}

func (s *ListHoneypotPresetResponseBodyList) SetHoneypotImageName(v string) *ListHoneypotPresetResponseBodyList {
	s.HoneypotImageName = &v
	return s
}

func (s *ListHoneypotPresetResponseBodyList) SetHoneypotPresetId(v string) *ListHoneypotPresetResponseBodyList {
	s.HoneypotPresetId = &v
	return s
}

func (s *ListHoneypotPresetResponseBodyList) SetNodeId(v string) *ListHoneypotPresetResponseBodyList {
	s.NodeId = &v
	return s
}

func (s *ListHoneypotPresetResponseBodyList) SetPresetName(v string) *ListHoneypotPresetResponseBodyList {
	s.PresetName = &v
	return s
}

func (s *ListHoneypotPresetResponseBodyList) SetPresetType(v string) *ListHoneypotPresetResponseBodyList {
	s.PresetType = &v
	return s
}

type ListHoneypotPresetResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHoneypotPresetResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotPresetResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListHoneypotPresetResponseBodyPageInfo) SetCount(v int32) *ListHoneypotPresetResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListHoneypotPresetResponseBodyPageInfo) SetCurrentPage(v int32) *ListHoneypotPresetResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListHoneypotPresetResponseBodyPageInfo) SetPageSize(v int32) *ListHoneypotPresetResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListHoneypotPresetResponseBodyPageInfo) SetTotalCount(v int32) *ListHoneypotPresetResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListHoneypotPresetResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListHoneypotPresetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListHoneypotPresetResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotPresetResponse) GoString() string {
	return s.String()
}

func (s *ListHoneypotPresetResponse) SetHeaders(v map[string]*string) *ListHoneypotPresetResponse {
	s.Headers = v
	return s
}

func (s *ListHoneypotPresetResponse) SetStatusCode(v int32) *ListHoneypotPresetResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHoneypotPresetResponse) SetBody(v *ListHoneypotPresetResponseBody) *ListHoneypotPresetResponse {
	s.Body = v
	return s
}

type ListHoneypotProbeRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProbeStatus *string `json:"ProbeStatus,omitempty" xml:"ProbeStatus,omitempty"`
	ProbeType   *string `json:"ProbeType,omitempty" xml:"ProbeType,omitempty"`
}

func (s ListHoneypotProbeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotProbeRequest) GoString() string {
	return s.String()
}

func (s *ListHoneypotProbeRequest) SetCurrentPage(v int32) *ListHoneypotProbeRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListHoneypotProbeRequest) SetDisplayName(v string) *ListHoneypotProbeRequest {
	s.DisplayName = &v
	return s
}

func (s *ListHoneypotProbeRequest) SetLang(v string) *ListHoneypotProbeRequest {
	s.Lang = &v
	return s
}

func (s *ListHoneypotProbeRequest) SetPageSize(v int32) *ListHoneypotProbeRequest {
	s.PageSize = &v
	return s
}

func (s *ListHoneypotProbeRequest) SetProbeStatus(v string) *ListHoneypotProbeRequest {
	s.ProbeStatus = &v
	return s
}

func (s *ListHoneypotProbeRequest) SetProbeType(v string) *ListHoneypotProbeRequest {
	s.ProbeType = &v
	return s
}

type ListHoneypotProbeResponseBody struct {
	Code           *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	List           []*ListHoneypotProbeResponseBodyList   `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	Message        *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	PageInfo       *ListHoneypotProbeResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListHoneypotProbeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotProbeResponseBody) GoString() string {
	return s.String()
}

func (s *ListHoneypotProbeResponseBody) SetCode(v string) *ListHoneypotProbeResponseBody {
	s.Code = &v
	return s
}

func (s *ListHoneypotProbeResponseBody) SetHttpStatusCode(v int32) *ListHoneypotProbeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListHoneypotProbeResponseBody) SetList(v []*ListHoneypotProbeResponseBodyList) *ListHoneypotProbeResponseBody {
	s.List = v
	return s
}

func (s *ListHoneypotProbeResponseBody) SetMessage(v string) *ListHoneypotProbeResponseBody {
	s.Message = &v
	return s
}

func (s *ListHoneypotProbeResponseBody) SetPageInfo(v *ListHoneypotProbeResponseBodyPageInfo) *ListHoneypotProbeResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListHoneypotProbeResponseBody) SetRequestId(v string) *ListHoneypotProbeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHoneypotProbeResponseBody) SetSuccess(v bool) *ListHoneypotProbeResponseBody {
	s.Success = &v
	return s
}

type ListHoneypotProbeResponseBodyList struct {
	ControlNode  *ListHoneypotProbeResponseBodyListControlNode `json:"ControlNode,omitempty" xml:"ControlNode,omitempty" type:"Struct"`
	DeployTime   *int64                                        `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	DisplayName  *string                                       `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	HostIp       *string                                       `json:"HostIp,omitempty" xml:"HostIp,omitempty"`
	OsType       *string                                       `json:"OsType,omitempty" xml:"OsType,omitempty"`
	ProbeId      *string                                       `json:"ProbeId,omitempty" xml:"ProbeId,omitempty"`
	ProbeType    *string                                       `json:"ProbeType,omitempty" xml:"ProbeType,omitempty"`
	ProbeVersion *string                                       `json:"ProbeVersion,omitempty" xml:"ProbeVersion,omitempty"`
	Status       *string                                       `json:"Status,omitempty" xml:"Status,omitempty"`
	Uuid         *string                                       `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	VpcId        *string                                       `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ListHoneypotProbeResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotProbeResponseBodyList) GoString() string {
	return s.String()
}

func (s *ListHoneypotProbeResponseBodyList) SetControlNode(v *ListHoneypotProbeResponseBodyListControlNode) *ListHoneypotProbeResponseBodyList {
	s.ControlNode = v
	return s
}

func (s *ListHoneypotProbeResponseBodyList) SetDeployTime(v int64) *ListHoneypotProbeResponseBodyList {
	s.DeployTime = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyList) SetDisplayName(v string) *ListHoneypotProbeResponseBodyList {
	s.DisplayName = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyList) SetHostIp(v string) *ListHoneypotProbeResponseBodyList {
	s.HostIp = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyList) SetOsType(v string) *ListHoneypotProbeResponseBodyList {
	s.OsType = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyList) SetProbeId(v string) *ListHoneypotProbeResponseBodyList {
	s.ProbeId = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyList) SetProbeType(v string) *ListHoneypotProbeResponseBodyList {
	s.ProbeType = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyList) SetProbeVersion(v string) *ListHoneypotProbeResponseBodyList {
	s.ProbeVersion = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyList) SetStatus(v string) *ListHoneypotProbeResponseBodyList {
	s.Status = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyList) SetUuid(v string) *ListHoneypotProbeResponseBodyList {
	s.Uuid = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyList) SetVpcId(v string) *ListHoneypotProbeResponseBodyList {
	s.VpcId = &v
	return s
}

type ListHoneypotProbeResponseBodyListControlNode struct {
	EcsInstanceId *string `json:"EcsInstanceId,omitempty" xml:"EcsInstanceId,omitempty"`
	NodeId        *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName      *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
}

func (s ListHoneypotProbeResponseBodyListControlNode) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotProbeResponseBodyListControlNode) GoString() string {
	return s.String()
}

func (s *ListHoneypotProbeResponseBodyListControlNode) SetEcsInstanceId(v string) *ListHoneypotProbeResponseBodyListControlNode {
	s.EcsInstanceId = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyListControlNode) SetNodeId(v string) *ListHoneypotProbeResponseBodyListControlNode {
	s.NodeId = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyListControlNode) SetNodeName(v string) *ListHoneypotProbeResponseBodyListControlNode {
	s.NodeName = &v
	return s
}

type ListHoneypotProbeResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHoneypotProbeResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotProbeResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListHoneypotProbeResponseBodyPageInfo) SetCount(v int32) *ListHoneypotProbeResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyPageInfo) SetCurrentPage(v int32) *ListHoneypotProbeResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyPageInfo) SetPageSize(v int32) *ListHoneypotProbeResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListHoneypotProbeResponseBodyPageInfo) SetTotalCount(v int32) *ListHoneypotProbeResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListHoneypotProbeResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListHoneypotProbeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListHoneypotProbeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHoneypotProbeResponse) GoString() string {
	return s.String()
}

func (s *ListHoneypotProbeResponse) SetHeaders(v map[string]*string) *ListHoneypotProbeResponse {
	s.Headers = v
	return s
}

func (s *ListHoneypotProbeResponse) SetStatusCode(v int32) *ListHoneypotProbeResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHoneypotProbeResponse) SetBody(v *ListHoneypotProbeResponseBody) *ListHoneypotProbeResponse {
	s.Body = v
	return s
}

type ListImageRegistryRegionResponseBody struct {
	Regions   []*ListImageRegistryRegionResponseBodyRegions `json:"Regions,omitempty" xml:"Regions,omitempty" type:"Repeated"`
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListImageRegistryRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListImageRegistryRegionResponseBody) GoString() string {
	return s.String()
}

func (s *ListImageRegistryRegionResponseBody) SetRegions(v []*ListImageRegistryRegionResponseBodyRegions) *ListImageRegistryRegionResponseBody {
	s.Regions = v
	return s
}

func (s *ListImageRegistryRegionResponseBody) SetRequestId(v string) *ListImageRegistryRegionResponseBody {
	s.RequestId = &v
	return s
}

type ListImageRegistryRegionResponseBodyRegions struct {
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegionName *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
}

func (s ListImageRegistryRegionResponseBodyRegions) String() string {
	return tea.Prettify(s)
}

func (s ListImageRegistryRegionResponseBodyRegions) GoString() string {
	return s.String()
}

func (s *ListImageRegistryRegionResponseBodyRegions) SetRegionId(v string) *ListImageRegistryRegionResponseBodyRegions {
	s.RegionId = &v
	return s
}

func (s *ListImageRegistryRegionResponseBodyRegions) SetRegionName(v string) *ListImageRegistryRegionResponseBodyRegions {
	s.RegionName = &v
	return s
}

type ListImageRegistryRegionResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListImageRegistryRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListImageRegistryRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListImageRegistryRegionResponse) GoString() string {
	return s.String()
}

func (s *ListImageRegistryRegionResponse) SetHeaders(v map[string]*string) *ListImageRegistryRegionResponse {
	s.Headers = v
	return s
}

func (s *ListImageRegistryRegionResponse) SetStatusCode(v int32) *ListImageRegistryRegionResponse {
	s.StatusCode = &v
	return s
}

func (s *ListImageRegistryRegionResponse) SetBody(v *ListImageRegistryRegionResponseBody) *ListImageRegistryRegionResponse {
	s.Body = v
	return s
}

type ListImageRiskRequest struct {
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ImageName   *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	Namespace   *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListImageRiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ListImageRiskRequest) GoString() string {
	return s.String()
}

func (s *ListImageRiskRequest) SetAppName(v string) *ListImageRiskRequest {
	s.AppName = &v
	return s
}

func (s *ListImageRiskRequest) SetClusterId(v string) *ListImageRiskRequest {
	s.ClusterId = &v
	return s
}

func (s *ListImageRiskRequest) SetCurrentPage(v int32) *ListImageRiskRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListImageRiskRequest) SetImageName(v string) *ListImageRiskRequest {
	s.ImageName = &v
	return s
}

func (s *ListImageRiskRequest) SetNamespace(v string) *ListImageRiskRequest {
	s.Namespace = &v
	return s
}

func (s *ListImageRiskRequest) SetPageSize(v int32) *ListImageRiskRequest {
	s.PageSize = &v
	return s
}

type ListImageRiskResponseBody struct {
	ImageRiskList []*ListImageRiskResponseBodyImageRiskList `json:"ImageRiskList,omitempty" xml:"ImageRiskList,omitempty" type:"Repeated"`
	PageInfo      *ListImageRiskResponseBodyPageInfo        `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId     *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListImageRiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListImageRiskResponseBody) GoString() string {
	return s.String()
}

func (s *ListImageRiskResponseBody) SetImageRiskList(v []*ListImageRiskResponseBodyImageRiskList) *ListImageRiskResponseBody {
	s.ImageRiskList = v
	return s
}

func (s *ListImageRiskResponseBody) SetPageInfo(v *ListImageRiskResponseBodyPageInfo) *ListImageRiskResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListImageRiskResponseBody) SetRequestId(v string) *ListImageRiskResponseBody {
	s.RequestId = &v
	return s
}

type ListImageRiskResponseBodyImageRiskList struct {
	Digest          *string                                               `json:"Digest,omitempty" xml:"Digest,omitempty"`
	EndPointList    []*ListImageRiskResponseBodyImageRiskListEndPointList `json:"EndPointList,omitempty" xml:"EndPointList,omitempty" type:"Repeated"`
	Endpoints       *string                                               `json:"Endpoints,omitempty" xml:"Endpoints,omitempty"`
	Image           *string                                               `json:"Image,omitempty" xml:"Image,omitempty"`
	ImageAccessType *string                                               `json:"ImageAccessType,omitempty" xml:"ImageAccessType,omitempty"`
	ImageId         *string                                               `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InternetURLs    *string                                               `json:"InternetURLs,omitempty" xml:"InternetURLs,omitempty"`
	RegionId        *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegistryType    *string                                               `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
	RepoId          *string                                               `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	RepoName        *string                                               `json:"RepoName,omitempty" xml:"RepoName,omitempty"`
	RepoNamespace   *string                                               `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty"`
	RepoType        *string                                               `json:"RepoType,omitempty" xml:"RepoType,omitempty"`
	Statistics      *string                                               `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Tag             *string                                               `json:"Tag,omitempty" xml:"Tag,omitempty"`
	TagImmutable    *int32                                                `json:"TagImmutable,omitempty" xml:"TagImmutable,omitempty"`
	Uuid            *string                                               `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	VpcURLs         *string                                               `json:"VpcURLs,omitempty" xml:"VpcURLs,omitempty"`
}

func (s ListImageRiskResponseBodyImageRiskList) String() string {
	return tea.Prettify(s)
}

func (s ListImageRiskResponseBodyImageRiskList) GoString() string {
	return s.String()
}

func (s *ListImageRiskResponseBodyImageRiskList) SetDigest(v string) *ListImageRiskResponseBodyImageRiskList {
	s.Digest = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetEndPointList(v []*ListImageRiskResponseBodyImageRiskListEndPointList) *ListImageRiskResponseBodyImageRiskList {
	s.EndPointList = v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetEndpoints(v string) *ListImageRiskResponseBodyImageRiskList {
	s.Endpoints = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetImage(v string) *ListImageRiskResponseBodyImageRiskList {
	s.Image = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetImageAccessType(v string) *ListImageRiskResponseBodyImageRiskList {
	s.ImageAccessType = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetImageId(v string) *ListImageRiskResponseBodyImageRiskList {
	s.ImageId = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetInternetURLs(v string) *ListImageRiskResponseBodyImageRiskList {
	s.InternetURLs = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetRegionId(v string) *ListImageRiskResponseBodyImageRiskList {
	s.RegionId = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetRegistryType(v string) *ListImageRiskResponseBodyImageRiskList {
	s.RegistryType = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetRepoId(v string) *ListImageRiskResponseBodyImageRiskList {
	s.RepoId = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetRepoName(v string) *ListImageRiskResponseBodyImageRiskList {
	s.RepoName = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetRepoNamespace(v string) *ListImageRiskResponseBodyImageRiskList {
	s.RepoNamespace = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetRepoType(v string) *ListImageRiskResponseBodyImageRiskList {
	s.RepoType = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetStatistics(v string) *ListImageRiskResponseBodyImageRiskList {
	s.Statistics = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetTag(v string) *ListImageRiskResponseBodyImageRiskList {
	s.Tag = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetTagImmutable(v int32) *ListImageRiskResponseBodyImageRiskList {
	s.TagImmutable = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetUuid(v string) *ListImageRiskResponseBodyImageRiskList {
	s.Uuid = &v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskList) SetVpcURLs(v string) *ListImageRiskResponseBodyImageRiskList {
	s.VpcURLs = &v
	return s
}

type ListImageRiskResponseBodyImageRiskListEndPointList struct {
	Domains []*string `json:"Domains,omitempty" xml:"Domains,omitempty" type:"Repeated"`
	Type    *string   `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListImageRiskResponseBodyImageRiskListEndPointList) String() string {
	return tea.Prettify(s)
}

func (s ListImageRiskResponseBodyImageRiskListEndPointList) GoString() string {
	return s.String()
}

func (s *ListImageRiskResponseBodyImageRiskListEndPointList) SetDomains(v []*string) *ListImageRiskResponseBodyImageRiskListEndPointList {
	s.Domains = v
	return s
}

func (s *ListImageRiskResponseBodyImageRiskListEndPointList) SetType(v string) *ListImageRiskResponseBodyImageRiskListEndPointList {
	s.Type = &v
	return s
}

type ListImageRiskResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListImageRiskResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListImageRiskResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListImageRiskResponseBodyPageInfo) SetCount(v int32) *ListImageRiskResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListImageRiskResponseBodyPageInfo) SetCurrentPage(v int32) *ListImageRiskResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListImageRiskResponseBodyPageInfo) SetPageSize(v int32) *ListImageRiskResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListImageRiskResponseBodyPageInfo) SetTotalCount(v int32) *ListImageRiskResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListImageRiskResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListImageRiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListImageRiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ListImageRiskResponse) GoString() string {
	return s.String()
}

func (s *ListImageRiskResponse) SetHeaders(v map[string]*string) *ListImageRiskResponse {
	s.Headers = v
	return s
}

func (s *ListImageRiskResponse) SetStatusCode(v int32) *ListImageRiskResponse {
	s.StatusCode = &v
	return s
}

func (s *ListImageRiskResponse) SetBody(v *ListImageRiskResponseBody) *ListImageRiskResponse {
	s.Body = v
	return s
}

type ListInterceptionHistoryRequest struct {
	ClusterId         *string  `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CurrentPage       *int32   `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	EndTime           *int64   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	HistoryName       *string  `json:"HistoryName,omitempty" xml:"HistoryName,omitempty"`
	InterceptionTypes []*int32 `json:"InterceptionTypes,omitempty" xml:"InterceptionTypes,omitempty" type:"Repeated"`
	PageSize          *int32   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime         *int64   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListInterceptionHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionHistoryRequest) GoString() string {
	return s.String()
}

func (s *ListInterceptionHistoryRequest) SetClusterId(v string) *ListInterceptionHistoryRequest {
	s.ClusterId = &v
	return s
}

func (s *ListInterceptionHistoryRequest) SetCurrentPage(v int32) *ListInterceptionHistoryRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListInterceptionHistoryRequest) SetEndTime(v int64) *ListInterceptionHistoryRequest {
	s.EndTime = &v
	return s
}

func (s *ListInterceptionHistoryRequest) SetHistoryName(v string) *ListInterceptionHistoryRequest {
	s.HistoryName = &v
	return s
}

func (s *ListInterceptionHistoryRequest) SetInterceptionTypes(v []*int32) *ListInterceptionHistoryRequest {
	s.InterceptionTypes = v
	return s
}

func (s *ListInterceptionHistoryRequest) SetPageSize(v int32) *ListInterceptionHistoryRequest {
	s.PageSize = &v
	return s
}

func (s *ListInterceptionHistoryRequest) SetStartTime(v int64) *ListInterceptionHistoryRequest {
	s.StartTime = &v
	return s
}

type ListInterceptionHistoryResponseBody struct {
	InterceptionHistoryList []*ListInterceptionHistoryResponseBodyInterceptionHistoryList `json:"InterceptionHistoryList,omitempty" xml:"InterceptionHistoryList,omitempty" type:"Repeated"`
	PageInfo                *ListInterceptionHistoryResponseBodyPageInfo                  `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId               *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListInterceptionHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *ListInterceptionHistoryResponseBody) SetInterceptionHistoryList(v []*ListInterceptionHistoryResponseBodyInterceptionHistoryList) *ListInterceptionHistoryResponseBody {
	s.InterceptionHistoryList = v
	return s
}

func (s *ListInterceptionHistoryResponseBody) SetPageInfo(v *ListInterceptionHistoryResponseBodyPageInfo) *ListInterceptionHistoryResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListInterceptionHistoryResponseBody) SetRequestId(v string) *ListInterceptionHistoryResponseBody {
	s.RequestId = &v
	return s
}

type ListInterceptionHistoryResponseBodyInterceptionHistoryList struct {
	ClusterId            *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName          *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	DstAppName           *string `json:"DstAppName,omitempty" xml:"DstAppName,omitempty"`
	DstNamespace         *string `json:"DstNamespace,omitempty" xml:"DstNamespace,omitempty"`
	DstPort              *int64  `json:"DstPort,omitempty" xml:"DstPort,omitempty"`
	DstRuleTargetName    *string `json:"DstRuleTargetName,omitempty" xml:"DstRuleTargetName,omitempty"`
	FirstTime            *int64  `json:"FirstTime,omitempty" xml:"FirstTime,omitempty"`
	Id                   *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	InterceptionName     *int64  `json:"InterceptionName,omitempty" xml:"InterceptionName,omitempty"`
	InterceptionType     *int32  `json:"InterceptionType,omitempty" xml:"InterceptionType,omitempty"`
	LastTime             *int64  `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	RealDstAppName       *string `json:"RealDstAppName,omitempty" xml:"RealDstAppName,omitempty"`
	RealDstImageName     *string `json:"RealDstImageName,omitempty" xml:"RealDstImageName,omitempty"`
	RealDstNamespace     *string `json:"RealDstNamespace,omitempty" xml:"RealDstNamespace,omitempty"`
	RealDstPodName       *string `json:"RealDstPodName,omitempty" xml:"RealDstPodName,omitempty"`
	RealInterceptionType *int32  `json:"RealInterceptionType,omitempty" xml:"RealInterceptionType,omitempty"`
	RealSrcAppName       *string `json:"RealSrcAppName,omitempty" xml:"RealSrcAppName,omitempty"`
	RealSrcImageName     *string `json:"RealSrcImageName,omitempty" xml:"RealSrcImageName,omitempty"`
	RealSrcNamespace     *string `json:"RealSrcNamespace,omitempty" xml:"RealSrcNamespace,omitempty"`
	RealSrcPodName       *string `json:"RealSrcPodName,omitempty" xml:"RealSrcPodName,omitempty"`
	RiskLevel            *int64  `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	RuleId               *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	RuleName             *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	SrcAppName           *string `json:"SrcAppName,omitempty" xml:"SrcAppName,omitempty"`
	SrcNamespace         *string `json:"SrcNamespace,omitempty" xml:"SrcNamespace,omitempty"`
	SrcRuleTargetName    *string `json:"SrcRuleTargetName,omitempty" xml:"SrcRuleTargetName,omitempty"`
	Status               *int64  `json:"Status,omitempty" xml:"Status,omitempty"`
	TryCount             *int32  `json:"TryCount,omitempty" xml:"TryCount,omitempty"`
}

func (s ListInterceptionHistoryResponseBodyInterceptionHistoryList) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionHistoryResponseBodyInterceptionHistoryList) GoString() string {
	return s.String()
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetClusterId(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.ClusterId = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetClusterName(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.ClusterName = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetDstAppName(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.DstAppName = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetDstNamespace(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.DstNamespace = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetDstPort(v int64) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.DstPort = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetDstRuleTargetName(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.DstRuleTargetName = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetFirstTime(v int64) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.FirstTime = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetId(v int64) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.Id = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetInterceptionName(v int64) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.InterceptionName = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetInterceptionType(v int32) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.InterceptionType = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetLastTime(v int64) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.LastTime = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetRealDstAppName(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.RealDstAppName = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetRealDstImageName(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.RealDstImageName = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetRealDstNamespace(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.RealDstNamespace = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetRealDstPodName(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.RealDstPodName = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetRealInterceptionType(v int32) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.RealInterceptionType = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetRealSrcAppName(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.RealSrcAppName = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetRealSrcImageName(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.RealSrcImageName = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetRealSrcNamespace(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.RealSrcNamespace = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetRealSrcPodName(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.RealSrcPodName = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetRiskLevel(v int64) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.RiskLevel = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetRuleId(v int64) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.RuleId = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetRuleName(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.RuleName = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetSrcAppName(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.SrcAppName = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetSrcNamespace(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.SrcNamespace = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetSrcRuleTargetName(v string) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.SrcRuleTargetName = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetStatus(v int64) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.Status = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyInterceptionHistoryList) SetTryCount(v int32) *ListInterceptionHistoryResponseBodyInterceptionHistoryList {
	s.TryCount = &v
	return s
}

type ListInterceptionHistoryResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListInterceptionHistoryResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionHistoryResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListInterceptionHistoryResponseBodyPageInfo) SetCount(v int32) *ListInterceptionHistoryResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyPageInfo) SetCurrentPage(v int32) *ListInterceptionHistoryResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyPageInfo) SetPageSize(v int32) *ListInterceptionHistoryResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListInterceptionHistoryResponseBodyPageInfo) SetTotalCount(v int32) *ListInterceptionHistoryResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListInterceptionHistoryResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListInterceptionHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListInterceptionHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionHistoryResponse) GoString() string {
	return s.String()
}

func (s *ListInterceptionHistoryResponse) SetHeaders(v map[string]*string) *ListInterceptionHistoryResponse {
	s.Headers = v
	return s
}

func (s *ListInterceptionHistoryResponse) SetStatusCode(v int32) *ListInterceptionHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInterceptionHistoryResponse) SetBody(v *ListInterceptionHistoryResponseBody) *ListInterceptionHistoryResponse {
	s.Body = v
	return s
}

type ListInterceptionImageResponseBody struct {
	ImageList []*ListInterceptionImageResponseBodyImageList `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListInterceptionImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionImageResponseBody) GoString() string {
	return s.String()
}

func (s *ListInterceptionImageResponseBody) SetImageList(v []*ListInterceptionImageResponseBodyImageList) *ListInterceptionImageResponseBody {
	s.ImageList = v
	return s
}

func (s *ListInterceptionImageResponseBody) SetRequestId(v string) *ListInterceptionImageResponseBody {
	s.RequestId = &v
	return s
}

type ListInterceptionImageResponseBodyImageList struct {
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	ImageUuid *string `json:"ImageUuid,omitempty" xml:"ImageUuid,omitempty"`
}

func (s ListInterceptionImageResponseBodyImageList) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionImageResponseBodyImageList) GoString() string {
	return s.String()
}

func (s *ListInterceptionImageResponseBodyImageList) SetImageName(v string) *ListInterceptionImageResponseBodyImageList {
	s.ImageName = &v
	return s
}

func (s *ListInterceptionImageResponseBodyImageList) SetImageUuid(v string) *ListInterceptionImageResponseBodyImageList {
	s.ImageUuid = &v
	return s
}

type ListInterceptionImageResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListInterceptionImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListInterceptionImageResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionImageResponse) GoString() string {
	return s.String()
}

func (s *ListInterceptionImageResponse) SetHeaders(v map[string]*string) *ListInterceptionImageResponse {
	s.Headers = v
	return s
}

func (s *ListInterceptionImageResponse) SetStatusCode(v int32) *ListInterceptionImageResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInterceptionImageResponse) SetBody(v *ListInterceptionImageResponseBody) *ListInterceptionImageResponse {
	s.Body = v
	return s
}

type ListInterceptionRulePageRequest struct {
	ClusterId    *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Criteria     *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	CriteriaType *string `json:"CriteriaType,omitempty" xml:"CriteriaType,omitempty"`
	CurrentPage  *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListInterceptionRulePageRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionRulePageRequest) GoString() string {
	return s.String()
}

func (s *ListInterceptionRulePageRequest) SetClusterId(v string) *ListInterceptionRulePageRequest {
	s.ClusterId = &v
	return s
}

func (s *ListInterceptionRulePageRequest) SetCriteria(v string) *ListInterceptionRulePageRequest {
	s.Criteria = &v
	return s
}

func (s *ListInterceptionRulePageRequest) SetCriteriaType(v string) *ListInterceptionRulePageRequest {
	s.CriteriaType = &v
	return s
}

func (s *ListInterceptionRulePageRequest) SetCurrentPage(v int32) *ListInterceptionRulePageRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListInterceptionRulePageRequest) SetPageSize(v int32) *ListInterceptionRulePageRequest {
	s.PageSize = &v
	return s
}

type ListInterceptionRulePageResponseBody struct {
	InterceptionRuleList []*ListInterceptionRulePageResponseBodyInterceptionRuleList `json:"InterceptionRuleList,omitempty" xml:"InterceptionRuleList,omitempty" type:"Repeated"`
	PageInfo             *ListInterceptionRulePageResponseBodyPageInfo               `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId            *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListInterceptionRulePageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionRulePageResponseBody) GoString() string {
	return s.String()
}

func (s *ListInterceptionRulePageResponseBody) SetInterceptionRuleList(v []*ListInterceptionRulePageResponseBodyInterceptionRuleList) *ListInterceptionRulePageResponseBody {
	s.InterceptionRuleList = v
	return s
}

func (s *ListInterceptionRulePageResponseBody) SetPageInfo(v *ListInterceptionRulePageResponseBodyPageInfo) *ListInterceptionRulePageResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListInterceptionRulePageResponseBody) SetRequestId(v string) *ListInterceptionRulePageResponseBody {
	s.RequestId = &v
	return s
}

type ListInterceptionRulePageResponseBodyInterceptionRuleList struct {
	DstTarget     *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget `json:"DstTarget,omitempty" xml:"DstTarget,omitempty" type:"Struct"`
	InterceptType *int64                                                             `json:"InterceptType,omitempty" xml:"InterceptType,omitempty"`
	OrderIndex    *int64                                                             `json:"OrderIndex,omitempty" xml:"OrderIndex,omitempty"`
	RuleId        *int64                                                             `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	RuleName      *string                                                            `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleSwitch    *int32                                                             `json:"RuleSwitch,omitempty" xml:"RuleSwitch,omitempty"`
	RuleType      *string                                                            `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	SrcTarget     *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget `json:"SrcTarget,omitempty" xml:"SrcTarget,omitempty" type:"Struct"`
}

func (s ListInterceptionRulePageResponseBodyInterceptionRuleList) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionRulePageResponseBodyInterceptionRuleList) GoString() string {
	return s.String()
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleList) SetDstTarget(v *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget) *ListInterceptionRulePageResponseBodyInterceptionRuleList {
	s.DstTarget = v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleList) SetInterceptType(v int64) *ListInterceptionRulePageResponseBodyInterceptionRuleList {
	s.InterceptType = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleList) SetOrderIndex(v int64) *ListInterceptionRulePageResponseBodyInterceptionRuleList {
	s.OrderIndex = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleList) SetRuleId(v int64) *ListInterceptionRulePageResponseBodyInterceptionRuleList {
	s.RuleId = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleList) SetRuleName(v string) *ListInterceptionRulePageResponseBodyInterceptionRuleList {
	s.RuleName = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleList) SetRuleSwitch(v int32) *ListInterceptionRulePageResponseBodyInterceptionRuleList {
	s.RuleSwitch = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleList) SetRuleType(v string) *ListInterceptionRulePageResponseBodyInterceptionRuleList {
	s.RuleType = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleList) SetSrcTarget(v *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget) *ListInterceptionRulePageResponseBodyInterceptionRuleList {
	s.SrcTarget = v
	return s
}

type ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget struct {
	AppName    *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ImageList  []*string `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	Namespace  *string   `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Ports      []*string `json:"Ports,omitempty" xml:"Ports,omitempty" type:"Repeated"`
	RuleType   *string   `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	TagList    []*string `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	TargetId   *int32    `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	TargetName *string   `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	TargetType *string   `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget) GoString() string {
	return s.String()
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget) SetAppName(v string) *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget {
	s.AppName = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget) SetImageList(v []*string) *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget {
	s.ImageList = v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget) SetNamespace(v string) *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget {
	s.Namespace = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget) SetPorts(v []*string) *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget {
	s.Ports = v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget) SetRuleType(v string) *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget {
	s.RuleType = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget) SetTagList(v []*string) *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget {
	s.TagList = v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget) SetTargetId(v int32) *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget {
	s.TargetId = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget) SetTargetName(v string) *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget {
	s.TargetName = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget) SetTargetType(v string) *ListInterceptionRulePageResponseBodyInterceptionRuleListDstTarget {
	s.TargetType = &v
	return s
}

type ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget struct {
	AppName    *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ImageList  []*string `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	Namespace  *string   `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RuleType   *string   `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	TagList    []*string `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	TargetId   *int32    `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	TargetName *string   `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	TargetType *string   `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget) GoString() string {
	return s.String()
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget) SetAppName(v string) *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget {
	s.AppName = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget) SetImageList(v []*string) *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget {
	s.ImageList = v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget) SetNamespace(v string) *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget {
	s.Namespace = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget) SetRuleType(v string) *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget {
	s.RuleType = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget) SetTagList(v []*string) *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget {
	s.TagList = v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget) SetTargetId(v int32) *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget {
	s.TargetId = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget) SetTargetName(v string) *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget {
	s.TargetName = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget) SetTargetType(v string) *ListInterceptionRulePageResponseBodyInterceptionRuleListSrcTarget {
	s.TargetType = &v
	return s
}

type ListInterceptionRulePageResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListInterceptionRulePageResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionRulePageResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListInterceptionRulePageResponseBodyPageInfo) SetCount(v int32) *ListInterceptionRulePageResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyPageInfo) SetCurrentPage(v int32) *ListInterceptionRulePageResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyPageInfo) SetPageSize(v int32) *ListInterceptionRulePageResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListInterceptionRulePageResponseBodyPageInfo) SetTotalCount(v int32) *ListInterceptionRulePageResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListInterceptionRulePageResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListInterceptionRulePageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListInterceptionRulePageResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionRulePageResponse) GoString() string {
	return s.String()
}

func (s *ListInterceptionRulePageResponse) SetHeaders(v map[string]*string) *ListInterceptionRulePageResponse {
	s.Headers = v
	return s
}

func (s *ListInterceptionRulePageResponse) SetStatusCode(v int32) *ListInterceptionRulePageResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInterceptionRulePageResponse) SetBody(v *ListInterceptionRulePageResponseBody) *ListInterceptionRulePageResponse {
	s.Body = v
	return s
}

type ListInterceptionTargetPageRequest struct {
	AppName     *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CurrentPage *int32    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ImageList   []*string `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	Namespace   *string   `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	PageSize    *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TagList     []*string `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	TargetName  *string   `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	TargetType  *string   `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s ListInterceptionTargetPageRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionTargetPageRequest) GoString() string {
	return s.String()
}

func (s *ListInterceptionTargetPageRequest) SetAppName(v string) *ListInterceptionTargetPageRequest {
	s.AppName = &v
	return s
}

func (s *ListInterceptionTargetPageRequest) SetCurrentPage(v int32) *ListInterceptionTargetPageRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListInterceptionTargetPageRequest) SetImageList(v []*string) *ListInterceptionTargetPageRequest {
	s.ImageList = v
	return s
}

func (s *ListInterceptionTargetPageRequest) SetNamespace(v string) *ListInterceptionTargetPageRequest {
	s.Namespace = &v
	return s
}

func (s *ListInterceptionTargetPageRequest) SetPageSize(v int32) *ListInterceptionTargetPageRequest {
	s.PageSize = &v
	return s
}

func (s *ListInterceptionTargetPageRequest) SetTagList(v []*string) *ListInterceptionTargetPageRequest {
	s.TagList = v
	return s
}

func (s *ListInterceptionTargetPageRequest) SetTargetName(v string) *ListInterceptionTargetPageRequest {
	s.TargetName = &v
	return s
}

func (s *ListInterceptionTargetPageRequest) SetTargetType(v string) *ListInterceptionTargetPageRequest {
	s.TargetType = &v
	return s
}

type ListInterceptionTargetPageResponseBody struct {
	PageInfo       *ListInterceptionTargetPageResponseBodyPageInfo         `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId      *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RuleTargetList []*ListInterceptionTargetPageResponseBodyRuleTargetList `json:"RuleTargetList,omitempty" xml:"RuleTargetList,omitempty" type:"Repeated"`
}

func (s ListInterceptionTargetPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionTargetPageResponseBody) GoString() string {
	return s.String()
}

func (s *ListInterceptionTargetPageResponseBody) SetPageInfo(v *ListInterceptionTargetPageResponseBodyPageInfo) *ListInterceptionTargetPageResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListInterceptionTargetPageResponseBody) SetRequestId(v string) *ListInterceptionTargetPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInterceptionTargetPageResponseBody) SetRuleTargetList(v []*ListInterceptionTargetPageResponseBodyRuleTargetList) *ListInterceptionTargetPageResponseBody {
	s.RuleTargetList = v
	return s
}

type ListInterceptionTargetPageResponseBodyPageInfo struct {
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListInterceptionTargetPageResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionTargetPageResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListInterceptionTargetPageResponseBodyPageInfo) SetCurrentPage(v int32) *ListInterceptionTargetPageResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListInterceptionTargetPageResponseBodyPageInfo) SetPageSize(v int32) *ListInterceptionTargetPageResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListInterceptionTargetPageResponseBodyPageInfo) SetTotalCount(v int32) *ListInterceptionTargetPageResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListInterceptionTargetPageResponseBodyRuleTargetList struct {
	AppName     *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ClusterId   *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName *string   `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ImageList   []*string `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	Namespace   *string   `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RuleType    *string   `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	TagList     []*string `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	TargetId    *int64    `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	TargetName  *string   `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	TargetType  *string   `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s ListInterceptionTargetPageResponseBodyRuleTargetList) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionTargetPageResponseBodyRuleTargetList) GoString() string {
	return s.String()
}

func (s *ListInterceptionTargetPageResponseBodyRuleTargetList) SetAppName(v string) *ListInterceptionTargetPageResponseBodyRuleTargetList {
	s.AppName = &v
	return s
}

func (s *ListInterceptionTargetPageResponseBodyRuleTargetList) SetClusterId(v string) *ListInterceptionTargetPageResponseBodyRuleTargetList {
	s.ClusterId = &v
	return s
}

func (s *ListInterceptionTargetPageResponseBodyRuleTargetList) SetClusterName(v string) *ListInterceptionTargetPageResponseBodyRuleTargetList {
	s.ClusterName = &v
	return s
}

func (s *ListInterceptionTargetPageResponseBodyRuleTargetList) SetImageList(v []*string) *ListInterceptionTargetPageResponseBodyRuleTargetList {
	s.ImageList = v
	return s
}

func (s *ListInterceptionTargetPageResponseBodyRuleTargetList) SetNamespace(v string) *ListInterceptionTargetPageResponseBodyRuleTargetList {
	s.Namespace = &v
	return s
}

func (s *ListInterceptionTargetPageResponseBodyRuleTargetList) SetRuleType(v string) *ListInterceptionTargetPageResponseBodyRuleTargetList {
	s.RuleType = &v
	return s
}

func (s *ListInterceptionTargetPageResponseBodyRuleTargetList) SetTagList(v []*string) *ListInterceptionTargetPageResponseBodyRuleTargetList {
	s.TagList = v
	return s
}

func (s *ListInterceptionTargetPageResponseBodyRuleTargetList) SetTargetId(v int64) *ListInterceptionTargetPageResponseBodyRuleTargetList {
	s.TargetId = &v
	return s
}

func (s *ListInterceptionTargetPageResponseBodyRuleTargetList) SetTargetName(v string) *ListInterceptionTargetPageResponseBodyRuleTargetList {
	s.TargetName = &v
	return s
}

func (s *ListInterceptionTargetPageResponseBodyRuleTargetList) SetTargetType(v string) *ListInterceptionTargetPageResponseBodyRuleTargetList {
	s.TargetType = &v
	return s
}

type ListInterceptionTargetPageResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListInterceptionTargetPageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListInterceptionTargetPageResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInterceptionTargetPageResponse) GoString() string {
	return s.String()
}

func (s *ListInterceptionTargetPageResponse) SetHeaders(v map[string]*string) *ListInterceptionTargetPageResponse {
	s.Headers = v
	return s
}

func (s *ListInterceptionTargetPageResponse) SetStatusCode(v int32) *ListInterceptionTargetPageResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInterceptionTargetPageResponse) SetBody(v *ListInterceptionTargetPageResponseBody) *ListInterceptionTargetPageResponse {
	s.Body = v
	return s
}

type ListPluginForUuidRequest struct {
	Types []*string `json:"Types,omitempty" xml:"Types,omitempty" type:"Repeated"`
	Uuid  *string   `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ListPluginForUuidRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPluginForUuidRequest) GoString() string {
	return s.String()
}

func (s *ListPluginForUuidRequest) SetTypes(v []*string) *ListPluginForUuidRequest {
	s.Types = v
	return s
}

func (s *ListPluginForUuidRequest) SetUuid(v string) *ListPluginForUuidRequest {
	s.Uuid = &v
	return s
}

type ListPluginForUuidShrinkRequest struct {
	TypesShrink *string `json:"Types,omitempty" xml:"Types,omitempty"`
	Uuid        *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ListPluginForUuidShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPluginForUuidShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListPluginForUuidShrinkRequest) SetTypesShrink(v string) *ListPluginForUuidShrinkRequest {
	s.TypesShrink = &v
	return s
}

func (s *ListPluginForUuidShrinkRequest) SetUuid(v string) *ListPluginForUuidShrinkRequest {
	s.Uuid = &v
	return s
}

type ListPluginForUuidResponseBody struct {
	AegisUuidTargetPluginConfigList []*ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList `json:"AegisUuidTargetPluginConfigList,omitempty" xml:"AegisUuidTargetPluginConfigList,omitempty" type:"Repeated"`
	Code                            *int32                                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Message                         *string                                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId                       *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPluginForUuidResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPluginForUuidResponseBody) GoString() string {
	return s.String()
}

func (s *ListPluginForUuidResponseBody) SetAegisUuidTargetPluginConfigList(v []*ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList) *ListPluginForUuidResponseBody {
	s.AegisUuidTargetPluginConfigList = v
	return s
}

func (s *ListPluginForUuidResponseBody) SetCode(v int32) *ListPluginForUuidResponseBody {
	s.Code = &v
	return s
}

func (s *ListPluginForUuidResponseBody) SetMessage(v string) *ListPluginForUuidResponseBody {
	s.Message = &v
	return s
}

func (s *ListPluginForUuidResponseBody) SetRequestId(v string) *ListPluginForUuidResponseBody {
	s.RequestId = &v
	return s
}

type ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList struct {
	AegisSuspiciousConfigList []*ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigListAegisSuspiciousConfigList `json:"AegisSuspiciousConfigList,omitempty" xml:"AegisSuspiciousConfigList,omitempty" type:"Repeated"`
	PluginInstallCode         *string                                                                                  `json:"PluginInstallCode,omitempty" xml:"PluginInstallCode,omitempty"`
	PluginName                *string                                                                                  `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	PluginOnlineInstalled     *bool                                                                                    `json:"PluginOnlineInstalled,omitempty" xml:"PluginOnlineInstalled,omitempty"`
	PluginOnlineStatus        *bool                                                                                    `json:"PluginOnlineStatus,omitempty" xml:"PluginOnlineStatus,omitempty"`
	PluginVersion             *string                                                                                  `json:"PluginVersion,omitempty" xml:"PluginVersion,omitempty"`
}

func (s ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList) String() string {
	return tea.Prettify(s)
}

func (s ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList) GoString() string {
	return s.String()
}

func (s *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList) SetAegisSuspiciousConfigList(v []*ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigListAegisSuspiciousConfigList) *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList {
	s.AegisSuspiciousConfigList = v
	return s
}

func (s *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList) SetPluginInstallCode(v string) *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList {
	s.PluginInstallCode = &v
	return s
}

func (s *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList) SetPluginName(v string) *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList {
	s.PluginName = &v
	return s
}

func (s *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList) SetPluginOnlineInstalled(v bool) *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList {
	s.PluginOnlineInstalled = &v
	return s
}

func (s *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList) SetPluginOnlineStatus(v bool) *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList {
	s.PluginOnlineStatus = &v
	return s
}

func (s *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList) SetPluginVersion(v string) *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigList {
	s.PluginVersion = &v
	return s
}

type ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigListAegisSuspiciousConfigList struct {
	Config        *bool   `json:"Config,omitempty" xml:"Config,omitempty"`
	Msg           *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	OverallConfig *bool   `json:"OverallConfig,omitempty" xml:"OverallConfig,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigListAegisSuspiciousConfigList) String() string {
	return tea.Prettify(s)
}

func (s ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigListAegisSuspiciousConfigList) GoString() string {
	return s.String()
}

func (s *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigListAegisSuspiciousConfigList) SetConfig(v bool) *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigListAegisSuspiciousConfigList {
	s.Config = &v
	return s
}

func (s *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigListAegisSuspiciousConfigList) SetMsg(v string) *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigListAegisSuspiciousConfigList {
	s.Msg = &v
	return s
}

func (s *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigListAegisSuspiciousConfigList) SetOverallConfig(v bool) *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigListAegisSuspiciousConfigList {
	s.OverallConfig = &v
	return s
}

func (s *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigListAegisSuspiciousConfigList) SetType(v string) *ListPluginForUuidResponseBodyAegisUuidTargetPluginConfigListAegisSuspiciousConfigList {
	s.Type = &v
	return s
}

type ListPluginForUuidResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListPluginForUuidResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPluginForUuidResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPluginForUuidResponse) GoString() string {
	return s.String()
}

func (s *ListPluginForUuidResponse) SetHeaders(v map[string]*string) *ListPluginForUuidResponse {
	s.Headers = v
	return s
}

func (s *ListPluginForUuidResponse) SetStatusCode(v int32) *ListPluginForUuidResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPluginForUuidResponse) SetBody(v *ListPluginForUuidResponseBody) *ListPluginForUuidResponse {
	s.Body = v
	return s
}

type ListPodRiskRequest struct {
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CurrentPage *int64  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Namespace   *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	PageSize    *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PodName     *string `json:"PodName,omitempty" xml:"PodName,omitempty"`
}

func (s ListPodRiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPodRiskRequest) GoString() string {
	return s.String()
}

func (s *ListPodRiskRequest) SetAppName(v string) *ListPodRiskRequest {
	s.AppName = &v
	return s
}

func (s *ListPodRiskRequest) SetClusterId(v string) *ListPodRiskRequest {
	s.ClusterId = &v
	return s
}

func (s *ListPodRiskRequest) SetCurrentPage(v int64) *ListPodRiskRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListPodRiskRequest) SetNamespace(v string) *ListPodRiskRequest {
	s.Namespace = &v
	return s
}

func (s *ListPodRiskRequest) SetPageSize(v int64) *ListPodRiskRequest {
	s.PageSize = &v
	return s
}

func (s *ListPodRiskRequest) SetPodName(v string) *ListPodRiskRequest {
	s.PodName = &v
	return s
}

type ListPodRiskResponseBody struct {
	PageInfo    *ListPodRiskResponseBodyPageInfo      `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	PodRiskList []*ListPodRiskResponseBodyPodRiskList `json:"PodRiskList,omitempty" xml:"PodRiskList,omitempty" type:"Repeated"`
	RequestId   *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPodRiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPodRiskResponseBody) GoString() string {
	return s.String()
}

func (s *ListPodRiskResponseBody) SetPageInfo(v *ListPodRiskResponseBodyPageInfo) *ListPodRiskResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListPodRiskResponseBody) SetPodRiskList(v []*ListPodRiskResponseBodyPodRiskList) *ListPodRiskResponseBody {
	s.PodRiskList = v
	return s
}

func (s *ListPodRiskResponseBody) SetRequestId(v string) *ListPodRiskResponseBody {
	s.RequestId = &v
	return s
}

type ListPodRiskResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPodRiskResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListPodRiskResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListPodRiskResponseBodyPageInfo) SetCount(v int32) *ListPodRiskResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListPodRiskResponseBodyPageInfo) SetCurrentPage(v int32) *ListPodRiskResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListPodRiskResponseBodyPageInfo) SetPageSize(v int32) *ListPodRiskResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListPodRiskResponseBodyPageInfo) SetTotalCount(v int32) *ListPodRiskResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListPodRiskResponseBodyPodRiskList struct {
	AlarmCount  *int32  `json:"AlarmCount,omitempty" xml:"AlarmCount,omitempty"`
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	HcCount     *int32  `json:"HcCount,omitempty" xml:"HcCount,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Namespace   *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	NodeName    *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Pod         *string `json:"Pod,omitempty" xml:"Pod,omitempty"`
	PodIp       *string `json:"PodIp,omitempty" xml:"PodIp,omitempty"`
	VulCount    *int32  `json:"VulCount,omitempty" xml:"VulCount,omitempty"`
}

func (s ListPodRiskResponseBodyPodRiskList) String() string {
	return tea.Prettify(s)
}

func (s ListPodRiskResponseBodyPodRiskList) GoString() string {
	return s.String()
}

func (s *ListPodRiskResponseBodyPodRiskList) SetAlarmCount(v int32) *ListPodRiskResponseBodyPodRiskList {
	s.AlarmCount = &v
	return s
}

func (s *ListPodRiskResponseBodyPodRiskList) SetClusterId(v string) *ListPodRiskResponseBodyPodRiskList {
	s.ClusterId = &v
	return s
}

func (s *ListPodRiskResponseBodyPodRiskList) SetClusterName(v string) *ListPodRiskResponseBodyPodRiskList {
	s.ClusterName = &v
	return s
}

func (s *ListPodRiskResponseBodyPodRiskList) SetCreateTime(v int64) *ListPodRiskResponseBodyPodRiskList {
	s.CreateTime = &v
	return s
}

func (s *ListPodRiskResponseBodyPodRiskList) SetHcCount(v int32) *ListPodRiskResponseBodyPodRiskList {
	s.HcCount = &v
	return s
}

func (s *ListPodRiskResponseBodyPodRiskList) SetInstanceId(v string) *ListPodRiskResponseBodyPodRiskList {
	s.InstanceId = &v
	return s
}

func (s *ListPodRiskResponseBodyPodRiskList) SetNamespace(v string) *ListPodRiskResponseBodyPodRiskList {
	s.Namespace = &v
	return s
}

func (s *ListPodRiskResponseBodyPodRiskList) SetNodeName(v string) *ListPodRiskResponseBodyPodRiskList {
	s.NodeName = &v
	return s
}

func (s *ListPodRiskResponseBodyPodRiskList) SetPod(v string) *ListPodRiskResponseBodyPodRiskList {
	s.Pod = &v
	return s
}

func (s *ListPodRiskResponseBodyPodRiskList) SetPodIp(v string) *ListPodRiskResponseBodyPodRiskList {
	s.PodIp = &v
	return s
}

func (s *ListPodRiskResponseBodyPodRiskList) SetVulCount(v int32) *ListPodRiskResponseBodyPodRiskList {
	s.VulCount = &v
	return s
}

type ListPodRiskResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListPodRiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPodRiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPodRiskResponse) GoString() string {
	return s.String()
}

func (s *ListPodRiskResponse) SetHeaders(v map[string]*string) *ListPodRiskResponse {
	s.Headers = v
	return s
}

func (s *ListPodRiskResponse) SetStatusCode(v int32) *ListPodRiskResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPodRiskResponse) SetBody(v *ListPodRiskResponseBody) *ListPodRiskResponse {
	s.Body = v
	return s
}

type ListPrivateRegistryListRequest struct {
	RegistryType *string `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
}

func (s ListPrivateRegistryListRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPrivateRegistryListRequest) GoString() string {
	return s.String()
}

func (s *ListPrivateRegistryListRequest) SetRegistryType(v string) *ListPrivateRegistryListRequest {
	s.RegistryType = &v
	return s
}

type ListPrivateRegistryListResponseBody struct {
	ImageRegistryInfos []*ListPrivateRegistryListResponseBodyImageRegistryInfos `json:"ImageRegistryInfos,omitempty" xml:"ImageRegistryInfos,omitempty" type:"Repeated"`
	RequestId          *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPrivateRegistryListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPrivateRegistryListResponseBody) GoString() string {
	return s.String()
}

func (s *ListPrivateRegistryListResponseBody) SetImageRegistryInfos(v []*ListPrivateRegistryListResponseBodyImageRegistryInfos) *ListPrivateRegistryListResponseBody {
	s.ImageRegistryInfos = v
	return s
}

func (s *ListPrivateRegistryListResponseBody) SetRequestId(v string) *ListPrivateRegistryListResponseBody {
	s.RequestId = &v
	return s
}

type ListPrivateRegistryListResponseBodyImageRegistryInfos struct {
	AliUid          *int64  `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	DomainName      *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	JenkinsEnv      *string `json:"JenkinsEnv,omitempty" xml:"JenkinsEnv,omitempty"`
	NetType         *int64  `json:"NetType,omitempty" xml:"NetType,omitempty"`
	Password        *string `json:"Password,omitempty" xml:"Password,omitempty"`
	PersistenceDay  *int64  `json:"PersistenceDay,omitempty" xml:"PersistenceDay,omitempty"`
	ProtocolType    *int64  `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegistryHostIp  *string `json:"RegistryHostIp,omitempty" xml:"RegistryHostIp,omitempty"`
	RegistryName    *string `json:"RegistryName,omitempty" xml:"RegistryName,omitempty"`
	RegistryType    *string `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
	RegistryVersion *string `json:"RegistryVersion,omitempty" xml:"RegistryVersion,omitempty"`
	Token           *string `json:"Token,omitempty" xml:"Token,omitempty"`
	TransPerHour    *int32  `json:"TransPerHour,omitempty" xml:"TransPerHour,omitempty"`
	UserName        *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	WhiteList       *string `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s ListPrivateRegistryListResponseBodyImageRegistryInfos) String() string {
	return tea.Prettify(s)
}

func (s ListPrivateRegistryListResponseBodyImageRegistryInfos) GoString() string {
	return s.String()
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetAliUid(v int64) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.AliUid = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetDomainName(v string) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.DomainName = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetId(v int64) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.Id = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetJenkinsEnv(v string) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.JenkinsEnv = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetNetType(v int64) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.NetType = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetPassword(v string) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.Password = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetPersistenceDay(v int64) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.PersistenceDay = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetProtocolType(v int64) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.ProtocolType = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetRegionId(v string) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.RegionId = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetRegistryHostIp(v string) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.RegistryHostIp = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetRegistryName(v string) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.RegistryName = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetRegistryType(v string) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.RegistryType = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetRegistryVersion(v string) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.RegistryVersion = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetToken(v string) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.Token = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetTransPerHour(v int32) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.TransPerHour = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetUserName(v string) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.UserName = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetVpcId(v string) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.VpcId = &v
	return s
}

func (s *ListPrivateRegistryListResponseBodyImageRegistryInfos) SetWhiteList(v string) *ListPrivateRegistryListResponseBodyImageRegistryInfos {
	s.WhiteList = &v
	return s
}

type ListPrivateRegistryListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListPrivateRegistryListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPrivateRegistryListResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPrivateRegistryListResponse) GoString() string {
	return s.String()
}

func (s *ListPrivateRegistryListResponse) SetHeaders(v map[string]*string) *ListPrivateRegistryListResponse {
	s.Headers = v
	return s
}

func (s *ListPrivateRegistryListResponse) SetStatusCode(v int32) *ListPrivateRegistryListResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPrivateRegistryListResponse) SetBody(v *ListPrivateRegistryListResponseBody) *ListPrivateRegistryListResponse {
	s.Body = v
	return s
}

type ListPrivateRegistryTypeResponseBody struct {
	RegistryTypeInfos []*ListPrivateRegistryTypeResponseBodyRegistryTypeInfos `json:"RegistryTypeInfos,omitempty" xml:"RegistryTypeInfos,omitempty" type:"Repeated"`
	RequestId         *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPrivateRegistryTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPrivateRegistryTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ListPrivateRegistryTypeResponseBody) SetRegistryTypeInfos(v []*ListPrivateRegistryTypeResponseBodyRegistryTypeInfos) *ListPrivateRegistryTypeResponseBody {
	s.RegistryTypeInfos = v
	return s
}

func (s *ListPrivateRegistryTypeResponseBody) SetRequestId(v string) *ListPrivateRegistryTypeResponseBody {
	s.RequestId = &v
	return s
}

type ListPrivateRegistryTypeResponseBodyRegistryTypeInfos struct {
	Count        *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
	RegistryType *string `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
}

func (s ListPrivateRegistryTypeResponseBodyRegistryTypeInfos) String() string {
	return tea.Prettify(s)
}

func (s ListPrivateRegistryTypeResponseBodyRegistryTypeInfos) GoString() string {
	return s.String()
}

func (s *ListPrivateRegistryTypeResponseBodyRegistryTypeInfos) SetCount(v int64) *ListPrivateRegistryTypeResponseBodyRegistryTypeInfos {
	s.Count = &v
	return s
}

func (s *ListPrivateRegistryTypeResponseBodyRegistryTypeInfos) SetRegistryType(v string) *ListPrivateRegistryTypeResponseBodyRegistryTypeInfos {
	s.RegistryType = &v
	return s
}

type ListPrivateRegistryTypeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListPrivateRegistryTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPrivateRegistryTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPrivateRegistryTypeResponse) GoString() string {
	return s.String()
}

func (s *ListPrivateRegistryTypeResponse) SetHeaders(v map[string]*string) *ListPrivateRegistryTypeResponse {
	s.Headers = v
	return s
}

func (s *ListPrivateRegistryTypeResponse) SetStatusCode(v int32) *ListPrivateRegistryTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPrivateRegistryTypeResponse) SetBody(v *ListPrivateRegistryTypeResponseBody) *ListPrivateRegistryTypeResponse {
	s.Body = v
	return s
}

type ListRuleTargetAllRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s ListRuleTargetAllRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRuleTargetAllRequest) GoString() string {
	return s.String()
}

func (s *ListRuleTargetAllRequest) SetClusterId(v string) *ListRuleTargetAllRequest {
	s.ClusterId = &v
	return s
}

type ListRuleTargetAllResponseBody struct {
	RequestId      *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RuleTargetList []*ListRuleTargetAllResponseBodyRuleTargetList `json:"RuleTargetList,omitempty" xml:"RuleTargetList,omitempty" type:"Repeated"`
}

func (s ListRuleTargetAllResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRuleTargetAllResponseBody) GoString() string {
	return s.String()
}

func (s *ListRuleTargetAllResponseBody) SetRequestId(v string) *ListRuleTargetAllResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRuleTargetAllResponseBody) SetRuleTargetList(v []*ListRuleTargetAllResponseBodyRuleTargetList) *ListRuleTargetAllResponseBody {
	s.RuleTargetList = v
	return s
}

type ListRuleTargetAllResponseBodyRuleTargetList struct {
	TargetId   *int64  `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	TargetName *string `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s ListRuleTargetAllResponseBodyRuleTargetList) String() string {
	return tea.Prettify(s)
}

func (s ListRuleTargetAllResponseBodyRuleTargetList) GoString() string {
	return s.String()
}

func (s *ListRuleTargetAllResponseBodyRuleTargetList) SetTargetId(v int64) *ListRuleTargetAllResponseBodyRuleTargetList {
	s.TargetId = &v
	return s
}

func (s *ListRuleTargetAllResponseBodyRuleTargetList) SetTargetName(v string) *ListRuleTargetAllResponseBodyRuleTargetList {
	s.TargetName = &v
	return s
}

func (s *ListRuleTargetAllResponseBodyRuleTargetList) SetTargetType(v string) *ListRuleTargetAllResponseBodyRuleTargetList {
	s.TargetType = &v
	return s
}

type ListRuleTargetAllResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListRuleTargetAllResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRuleTargetAllResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRuleTargetAllResponse) GoString() string {
	return s.String()
}

func (s *ListRuleTargetAllResponse) SetHeaders(v map[string]*string) *ListRuleTargetAllResponse {
	s.Headers = v
	return s
}

func (s *ListRuleTargetAllResponse) SetStatusCode(v int32) *ListRuleTargetAllResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRuleTargetAllResponse) SetBody(v *ListRuleTargetAllResponseBody) *ListRuleTargetAllResponse {
	s.Body = v
	return s
}

type ListSystemAggregationRulesRequest struct {
	AggregationIds []*int32 `json:"AggregationIds,omitempty" xml:"AggregationIds,omitempty" type:"Repeated"`
	CurrentPage    *int32   `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Lang           *string  `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize       *int32   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RuleName       *string  `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleTypes      []*int32 `json:"RuleTypes,omitempty" xml:"RuleTypes,omitempty" type:"Repeated"`
	SystemType     *int32   `json:"SystemType,omitempty" xml:"SystemType,omitempty"`
}

func (s ListSystemAggregationRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSystemAggregationRulesRequest) GoString() string {
	return s.String()
}

func (s *ListSystemAggregationRulesRequest) SetAggregationIds(v []*int32) *ListSystemAggregationRulesRequest {
	s.AggregationIds = v
	return s
}

func (s *ListSystemAggregationRulesRequest) SetCurrentPage(v int32) *ListSystemAggregationRulesRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListSystemAggregationRulesRequest) SetLang(v string) *ListSystemAggregationRulesRequest {
	s.Lang = &v
	return s
}

func (s *ListSystemAggregationRulesRequest) SetPageSize(v int32) *ListSystemAggregationRulesRequest {
	s.PageSize = &v
	return s
}

func (s *ListSystemAggregationRulesRequest) SetRuleName(v string) *ListSystemAggregationRulesRequest {
	s.RuleName = &v
	return s
}

func (s *ListSystemAggregationRulesRequest) SetRuleTypes(v []*int32) *ListSystemAggregationRulesRequest {
	s.RuleTypes = v
	return s
}

func (s *ListSystemAggregationRulesRequest) SetSystemType(v int32) *ListSystemAggregationRulesRequest {
	s.SystemType = &v
	return s
}

type ListSystemAggregationRulesResponseBody struct {
	AggregationList []*ListSystemAggregationRulesResponseBodyAggregationList `json:"AggregationList,omitempty" xml:"AggregationList,omitempty" type:"Repeated"`
	PageInfo        *ListSystemAggregationRulesResponseBodyPageInfo          `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId       *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListSystemAggregationRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSystemAggregationRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSystemAggregationRulesResponseBody) SetAggregationList(v []*ListSystemAggregationRulesResponseBodyAggregationList) *ListSystemAggregationRulesResponseBody {
	s.AggregationList = v
	return s
}

func (s *ListSystemAggregationRulesResponseBody) SetPageInfo(v *ListSystemAggregationRulesResponseBodyPageInfo) *ListSystemAggregationRulesResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListSystemAggregationRulesResponseBody) SetRequestId(v string) *ListSystemAggregationRulesResponseBody {
	s.RequestId = &v
	return s
}

type ListSystemAggregationRulesResponseBodyAggregationList struct {
	Id        *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RuleCount *int32  `json:"RuleCount,omitempty" xml:"RuleCount,omitempty"`
}

func (s ListSystemAggregationRulesResponseBodyAggregationList) String() string {
	return tea.Prettify(s)
}

func (s ListSystemAggregationRulesResponseBodyAggregationList) GoString() string {
	return s.String()
}

func (s *ListSystemAggregationRulesResponseBodyAggregationList) SetId(v int32) *ListSystemAggregationRulesResponseBodyAggregationList {
	s.Id = &v
	return s
}

func (s *ListSystemAggregationRulesResponseBodyAggregationList) SetName(v string) *ListSystemAggregationRulesResponseBodyAggregationList {
	s.Name = &v
	return s
}

func (s *ListSystemAggregationRulesResponseBodyAggregationList) SetRuleCount(v int32) *ListSystemAggregationRulesResponseBodyAggregationList {
	s.RuleCount = &v
	return s
}

type ListSystemAggregationRulesResponseBodyPageInfo struct {
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSystemAggregationRulesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListSystemAggregationRulesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListSystemAggregationRulesResponseBodyPageInfo) SetCurrentPage(v int32) *ListSystemAggregationRulesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListSystemAggregationRulesResponseBodyPageInfo) SetPageSize(v int32) *ListSystemAggregationRulesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListSystemAggregationRulesResponseBodyPageInfo) SetTotalCount(v int32) *ListSystemAggregationRulesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListSystemAggregationRulesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSystemAggregationRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSystemAggregationRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSystemAggregationRulesResponse) GoString() string {
	return s.String()
}

func (s *ListSystemAggregationRulesResponse) SetHeaders(v map[string]*string) *ListSystemAggregationRulesResponse {
	s.Headers = v
	return s
}

func (s *ListSystemAggregationRulesResponse) SetStatusCode(v int32) *ListSystemAggregationRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSystemAggregationRulesResponse) SetBody(v *ListSystemAggregationRulesResponseBody) *ListSystemAggregationRulesResponse {
	s.Body = v
	return s
}

type ListSystemClientRuleTypesResponseBody struct {
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RuleTypes []*string `json:"RuleTypes,omitempty" xml:"RuleTypes,omitempty" type:"Repeated"`
}

func (s ListSystemClientRuleTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSystemClientRuleTypesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSystemClientRuleTypesResponseBody) SetRequestId(v string) *ListSystemClientRuleTypesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSystemClientRuleTypesResponseBody) SetRuleTypes(v []*string) *ListSystemClientRuleTypesResponseBody {
	s.RuleTypes = v
	return s
}

type ListSystemClientRuleTypesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSystemClientRuleTypesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSystemClientRuleTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSystemClientRuleTypesResponse) GoString() string {
	return s.String()
}

func (s *ListSystemClientRuleTypesResponse) SetHeaders(v map[string]*string) *ListSystemClientRuleTypesResponse {
	s.Headers = v
	return s
}

func (s *ListSystemClientRuleTypesResponse) SetStatusCode(v int32) *ListSystemClientRuleTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSystemClientRuleTypesResponse) SetBody(v *ListSystemClientRuleTypesResponseBody) *ListSystemClientRuleTypesResponse {
	s.Body = v
	return s
}

type ListSystemClientRulesRequest struct {
	AggregationIds []*int32 `json:"AggregationIds,omitempty" xml:"AggregationIds,omitempty" type:"Repeated"`
	CurrentPage    *int32   `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	IsContainer    *int32   `json:"IsContainer,omitempty" xml:"IsContainer,omitempty"`
	Lang           *string  `json:"Lang,omitempty" xml:"Lang,omitempty"`
	PageSize       *int32   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RuleName       *string  `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleTypes      []*int32 `json:"RuleTypes,omitempty" xml:"RuleTypes,omitempty" type:"Repeated"`
	SystemType     *int32   `json:"SystemType,omitempty" xml:"SystemType,omitempty"`
}

func (s ListSystemClientRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSystemClientRulesRequest) GoString() string {
	return s.String()
}

func (s *ListSystemClientRulesRequest) SetAggregationIds(v []*int32) *ListSystemClientRulesRequest {
	s.AggregationIds = v
	return s
}

func (s *ListSystemClientRulesRequest) SetCurrentPage(v int32) *ListSystemClientRulesRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListSystemClientRulesRequest) SetIsContainer(v int32) *ListSystemClientRulesRequest {
	s.IsContainer = &v
	return s
}

func (s *ListSystemClientRulesRequest) SetLang(v string) *ListSystemClientRulesRequest {
	s.Lang = &v
	return s
}

func (s *ListSystemClientRulesRequest) SetPageSize(v int32) *ListSystemClientRulesRequest {
	s.PageSize = &v
	return s
}

func (s *ListSystemClientRulesRequest) SetRuleName(v string) *ListSystemClientRulesRequest {
	s.RuleName = &v
	return s
}

func (s *ListSystemClientRulesRequest) SetRuleTypes(v []*int32) *ListSystemClientRulesRequest {
	s.RuleTypes = v
	return s
}

func (s *ListSystemClientRulesRequest) SetSystemType(v int32) *ListSystemClientRulesRequest {
	s.SystemType = &v
	return s
}

type ListSystemClientRulesResponseBody struct {
	PageInfo  *ListSystemClientRulesResponseBodyPageInfo   `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RuleList  []*ListSystemClientRulesResponseBodyRuleList `json:"RuleList,omitempty" xml:"RuleList,omitempty" type:"Repeated"`
}

func (s ListSystemClientRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSystemClientRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSystemClientRulesResponseBody) SetPageInfo(v *ListSystemClientRulesResponseBodyPageInfo) *ListSystemClientRulesResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListSystemClientRulesResponseBody) SetRequestId(v string) *ListSystemClientRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSystemClientRulesResponseBody) SetRuleList(v []*ListSystemClientRulesResponseBodyRuleList) *ListSystemClientRulesResponseBody {
	s.RuleList = v
	return s
}

type ListSystemClientRulesResponseBodyPageInfo struct {
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSystemClientRulesResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListSystemClientRulesResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListSystemClientRulesResponseBodyPageInfo) SetCurrentPage(v int32) *ListSystemClientRulesResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListSystemClientRulesResponseBodyPageInfo) SetPageSize(v int32) *ListSystemClientRulesResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListSystemClientRulesResponseBodyPageInfo) SetTotalCount(v int32) *ListSystemClientRulesResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListSystemClientRulesResponseBodyRuleList struct {
	AggregationName *string                                              `json:"AggregationName,omitempty" xml:"AggregationName,omitempty"`
	Description     *string                                              `json:"Description,omitempty" xml:"Description,omitempty"`
	Platform        *string                                              `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Policies        []*ListSystemClientRulesResponseBodyRuleListPolicies `json:"Policies,omitempty" xml:"Policies,omitempty" type:"Repeated"`
	RuleId          *int64                                               `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	RuleName        *string                                              `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleType        *int32                                               `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	Status          *int32                                               `json:"Status,omitempty" xml:"Status,omitempty"`
	SwitchId        *string                                              `json:"SwitchId,omitempty" xml:"SwitchId,omitempty"`
}

func (s ListSystemClientRulesResponseBodyRuleList) String() string {
	return tea.Prettify(s)
}

func (s ListSystemClientRulesResponseBodyRuleList) GoString() string {
	return s.String()
}

func (s *ListSystemClientRulesResponseBodyRuleList) SetAggregationName(v string) *ListSystemClientRulesResponseBodyRuleList {
	s.AggregationName = &v
	return s
}

func (s *ListSystemClientRulesResponseBodyRuleList) SetDescription(v string) *ListSystemClientRulesResponseBodyRuleList {
	s.Description = &v
	return s
}

func (s *ListSystemClientRulesResponseBodyRuleList) SetPlatform(v string) *ListSystemClientRulesResponseBodyRuleList {
	s.Platform = &v
	return s
}

func (s *ListSystemClientRulesResponseBodyRuleList) SetPolicies(v []*ListSystemClientRulesResponseBodyRuleListPolicies) *ListSystemClientRulesResponseBodyRuleList {
	s.Policies = v
	return s
}

func (s *ListSystemClientRulesResponseBodyRuleList) SetRuleId(v int64) *ListSystemClientRulesResponseBodyRuleList {
	s.RuleId = &v
	return s
}

func (s *ListSystemClientRulesResponseBodyRuleList) SetRuleName(v string) *ListSystemClientRulesResponseBodyRuleList {
	s.RuleName = &v
	return s
}

func (s *ListSystemClientRulesResponseBodyRuleList) SetRuleType(v int32) *ListSystemClientRulesResponseBodyRuleList {
	s.RuleType = &v
	return s
}

func (s *ListSystemClientRulesResponseBodyRuleList) SetStatus(v int32) *ListSystemClientRulesResponseBodyRuleList {
	s.Status = &v
	return s
}

func (s *ListSystemClientRulesResponseBodyRuleList) SetSwitchId(v string) *ListSystemClientRulesResponseBodyRuleList {
	s.SwitchId = &v
	return s
}

type ListSystemClientRulesResponseBodyRuleListPolicies struct {
	PolicyKey  *string `json:"PolicyKey,omitempty" xml:"PolicyKey,omitempty"`
	PolicyName *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
}

func (s ListSystemClientRulesResponseBodyRuleListPolicies) String() string {
	return tea.Prettify(s)
}

func (s ListSystemClientRulesResponseBodyRuleListPolicies) GoString() string {
	return s.String()
}

func (s *ListSystemClientRulesResponseBodyRuleListPolicies) SetPolicyKey(v string) *ListSystemClientRulesResponseBodyRuleListPolicies {
	s.PolicyKey = &v
	return s
}

func (s *ListSystemClientRulesResponseBodyRuleListPolicies) SetPolicyName(v string) *ListSystemClientRulesResponseBodyRuleListPolicies {
	s.PolicyName = &v
	return s
}

type ListSystemClientRulesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSystemClientRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSystemClientRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSystemClientRulesResponse) GoString() string {
	return s.String()
}

func (s *ListSystemClientRulesResponse) SetHeaders(v map[string]*string) *ListSystemClientRulesResponse {
	s.Headers = v
	return s
}

func (s *ListSystemClientRulesResponse) SetStatusCode(v int32) *ListSystemClientRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSystemClientRulesResponse) SetBody(v *ListSystemClientRulesResponseBody) *ListSystemClientRulesResponse {
	s.Body = v
	return s
}

type ListSystemRuleAggregationTypesRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s ListSystemRuleAggregationTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSystemRuleAggregationTypesRequest) GoString() string {
	return s.String()
}

func (s *ListSystemRuleAggregationTypesRequest) SetLang(v string) *ListSystemRuleAggregationTypesRequest {
	s.Lang = &v
	return s
}

type ListSystemRuleAggregationTypesResponseBody struct {
	AggregationTypeList []*ListSystemRuleAggregationTypesResponseBodyAggregationTypeList `json:"AggregationTypeList,omitempty" xml:"AggregationTypeList,omitempty" type:"Repeated"`
	RequestId           *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListSystemRuleAggregationTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSystemRuleAggregationTypesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSystemRuleAggregationTypesResponseBody) SetAggregationTypeList(v []*ListSystemRuleAggregationTypesResponseBodyAggregationTypeList) *ListSystemRuleAggregationTypesResponseBody {
	s.AggregationTypeList = v
	return s
}

func (s *ListSystemRuleAggregationTypesResponseBody) SetRequestId(v string) *ListSystemRuleAggregationTypesResponseBody {
	s.RequestId = &v
	return s
}

type ListSystemRuleAggregationTypesResponseBodyAggregationTypeList struct {
	Id   *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListSystemRuleAggregationTypesResponseBodyAggregationTypeList) String() string {
	return tea.Prettify(s)
}

func (s ListSystemRuleAggregationTypesResponseBodyAggregationTypeList) GoString() string {
	return s.String()
}

func (s *ListSystemRuleAggregationTypesResponseBodyAggregationTypeList) SetId(v int32) *ListSystemRuleAggregationTypesResponseBodyAggregationTypeList {
	s.Id = &v
	return s
}

func (s *ListSystemRuleAggregationTypesResponseBodyAggregationTypeList) SetName(v string) *ListSystemRuleAggregationTypesResponseBodyAggregationTypeList {
	s.Name = &v
	return s
}

type ListSystemRuleAggregationTypesResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSystemRuleAggregationTypesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSystemRuleAggregationTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSystemRuleAggregationTypesResponse) GoString() string {
	return s.String()
}

func (s *ListSystemRuleAggregationTypesResponse) SetHeaders(v map[string]*string) *ListSystemRuleAggregationTypesResponse {
	s.Headers = v
	return s
}

func (s *ListSystemRuleAggregationTypesResponse) SetStatusCode(v int32) *ListSystemRuleAggregationTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSystemRuleAggregationTypesResponse) SetBody(v *ListSystemRuleAggregationTypesResponseBody) *ListSystemRuleAggregationTypesResponse {
	s.Body = v
	return s
}

type ListUninstallAegisMachinesRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The operating system of the server.
	//
	// >  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **osType**, the value of the **Values** parameter indicates an operating system.
	Os *string `json:"Os,omitempty" xml:"Os,omitempty"`
	// The number of entries to return on each page. Default value: **5**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region in which the server resides.
	//
	// >  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **regionId**, the value of the **Values** parameter indicates a region ID.
	RegionIdStr *string `json:"RegionIdStr,omitempty" xml:"RegionIdStr,omitempty"`
	// The region in which the server resides.
	//
	// >  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **regionId**, the value of the **Values** parameter indicates a region ID.
	RegionNo *string `json:"RegionNo,omitempty" xml:"RegionNo,omitempty"`
	// The information about the server that you want to query. The value can be the name or the public IP address of the server.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The source of the server. Valid values:
	//
	// *   **0**: an asset provided by Alibaba Cloud.
	// *   **1**: a third-party cloud server
	// *   **2**: a server in a data center
	// *   **3**, **4**, **5**, and **7**: other cloud asset
	// *   **8**: a lightweight asset
	Vendor *int32 `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s ListUninstallAegisMachinesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUninstallAegisMachinesRequest) GoString() string {
	return s.String()
}

func (s *ListUninstallAegisMachinesRequest) SetCurrentPage(v int32) *ListUninstallAegisMachinesRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListUninstallAegisMachinesRequest) SetOs(v string) *ListUninstallAegisMachinesRequest {
	s.Os = &v
	return s
}

func (s *ListUninstallAegisMachinesRequest) SetPageSize(v int32) *ListUninstallAegisMachinesRequest {
	s.PageSize = &v
	return s
}

func (s *ListUninstallAegisMachinesRequest) SetRegionIdStr(v string) *ListUninstallAegisMachinesRequest {
	s.RegionIdStr = &v
	return s
}

func (s *ListUninstallAegisMachinesRequest) SetRegionNo(v string) *ListUninstallAegisMachinesRequest {
	s.RegionNo = &v
	return s
}

func (s *ListUninstallAegisMachinesRequest) SetRemark(v string) *ListUninstallAegisMachinesRequest {
	s.Remark = &v
	return s
}

func (s *ListUninstallAegisMachinesRequest) SetSourceIp(v string) *ListUninstallAegisMachinesRequest {
	s.SourceIp = &v
	return s
}

func (s *ListUninstallAegisMachinesRequest) SetVendor(v int32) *ListUninstallAegisMachinesRequest {
	s.Vendor = &v
	return s
}

type ListUninstallAegisMachinesResponseBody struct {
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// An array that consists of the information about servers.
	MachineList []*ListUninstallAegisMachinesResponseBodyMachineList `json:"MachineList,omitempty" xml:"MachineList,omitempty" type:"Repeated"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListUninstallAegisMachinesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUninstallAegisMachinesResponseBody) GoString() string {
	return s.String()
}

func (s *ListUninstallAegisMachinesResponseBody) SetCurrentPage(v int32) *ListUninstallAegisMachinesResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *ListUninstallAegisMachinesResponseBody) SetMachineList(v []*ListUninstallAegisMachinesResponseBodyMachineList) *ListUninstallAegisMachinesResponseBody {
	s.MachineList = v
	return s
}

func (s *ListUninstallAegisMachinesResponseBody) SetPageSize(v int32) *ListUninstallAegisMachinesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListUninstallAegisMachinesResponseBody) SetRequestId(v string) *ListUninstallAegisMachinesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListUninstallAegisMachinesResponseBody) SetTotalCount(v int32) *ListUninstallAegisMachinesResponseBody {
	s.TotalCount = &v
	return s
}

type ListUninstallAegisMachinesResponseBodyMachineList struct {
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The public IP address of the server.
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// The private IP address of the server.
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The region in which the server resides.
	MachineRegion *string `json:"MachineRegion,omitempty" xml:"MachineRegion,omitempty"`
	// The operating system of the server. Valid values:
	//
	// *   **linux**
	// *   **windows**
	// *   **windows-2003**
	Os *string `json:"Os,omitempty" xml:"Os,omitempty"`
	// The ID of the region in which the server resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The source of the server. Valid values:
	//
	// *   **0**: an asset provided by Alibaba Cloud
	// *   **1**: a third-party cloud server
	// *   **2**: a server in a data center
	// *   **3**, **4**, **5**, and **7**: other cloud asset
	// *   **8**: a lightweight asset
	Vendor *int32 `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
	// The name of the service provider (SP) for the server.
	//
	// Valid values:
	//
	// *   **ALIYUN**: Alibaba Cloud
	// *   **OUT**: a third-party service provider
	// *   **IDC**: a data center
	// *   **TENCENT**: Tencent Cloud
	// *   **HUAWEICLOUD**: Huawei Cloud
	// *   **Microsoft**: Microsoft
	// *   **AWS**: Amazon Web Services (AWS)
	// *   **TRIPARTITE**: a lightweight server
	VendorName *string `json:"VendorName,omitempty" xml:"VendorName,omitempty"`
}

func (s ListUninstallAegisMachinesResponseBodyMachineList) String() string {
	return tea.Prettify(s)
}

func (s ListUninstallAegisMachinesResponseBodyMachineList) GoString() string {
	return s.String()
}

func (s *ListUninstallAegisMachinesResponseBodyMachineList) SetInstanceId(v string) *ListUninstallAegisMachinesResponseBodyMachineList {
	s.InstanceId = &v
	return s
}

func (s *ListUninstallAegisMachinesResponseBodyMachineList) SetInstanceName(v string) *ListUninstallAegisMachinesResponseBodyMachineList {
	s.InstanceName = &v
	return s
}

func (s *ListUninstallAegisMachinesResponseBodyMachineList) SetInternetIp(v string) *ListUninstallAegisMachinesResponseBodyMachineList {
	s.InternetIp = &v
	return s
}

func (s *ListUninstallAegisMachinesResponseBodyMachineList) SetIntranetIp(v string) *ListUninstallAegisMachinesResponseBodyMachineList {
	s.IntranetIp = &v
	return s
}

func (s *ListUninstallAegisMachinesResponseBodyMachineList) SetMachineRegion(v string) *ListUninstallAegisMachinesResponseBodyMachineList {
	s.MachineRegion = &v
	return s
}

func (s *ListUninstallAegisMachinesResponseBodyMachineList) SetOs(v string) *ListUninstallAegisMachinesResponseBodyMachineList {
	s.Os = &v
	return s
}

func (s *ListUninstallAegisMachinesResponseBodyMachineList) SetRegionId(v string) *ListUninstallAegisMachinesResponseBodyMachineList {
	s.RegionId = &v
	return s
}

func (s *ListUninstallAegisMachinesResponseBodyMachineList) SetUuid(v string) *ListUninstallAegisMachinesResponseBodyMachineList {
	s.Uuid = &v
	return s
}

func (s *ListUninstallAegisMachinesResponseBodyMachineList) SetVendor(v int32) *ListUninstallAegisMachinesResponseBodyMachineList {
	s.Vendor = &v
	return s
}

func (s *ListUninstallAegisMachinesResponseBodyMachineList) SetVendorName(v string) *ListUninstallAegisMachinesResponseBodyMachineList {
	s.VendorName = &v
	return s
}

type ListUninstallAegisMachinesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListUninstallAegisMachinesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListUninstallAegisMachinesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUninstallAegisMachinesResponse) GoString() string {
	return s.String()
}

func (s *ListUninstallAegisMachinesResponse) SetHeaders(v map[string]*string) *ListUninstallAegisMachinesResponse {
	s.Headers = v
	return s
}

func (s *ListUninstallAegisMachinesResponse) SetStatusCode(v int32) *ListUninstallAegisMachinesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUninstallAegisMachinesResponse) SetBody(v *ListUninstallAegisMachinesResponseBody) *ListUninstallAegisMachinesResponse {
	s.Body = v
	return s
}

type ListUuidsByWebPathRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
	WebPath     *string `json:"WebPath,omitempty" xml:"WebPath,omitempty"`
}

func (s ListUuidsByWebPathRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUuidsByWebPathRequest) GoString() string {
	return s.String()
}

func (s *ListUuidsByWebPathRequest) SetCurrentPage(v int32) *ListUuidsByWebPathRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListUuidsByWebPathRequest) SetPageSize(v int32) *ListUuidsByWebPathRequest {
	s.PageSize = &v
	return s
}

func (s *ListUuidsByWebPathRequest) SetType(v string) *ListUuidsByWebPathRequest {
	s.Type = &v
	return s
}

func (s *ListUuidsByWebPathRequest) SetWebPath(v string) *ListUuidsByWebPathRequest {
	s.WebPath = &v
	return s
}

type ListUuidsByWebPathResponseBody struct {
	List      []*ListUuidsByWebPathResponseBodyList   `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageInfo  *ListUuidsByWebPathResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListUuidsByWebPathResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUuidsByWebPathResponseBody) GoString() string {
	return s.String()
}

func (s *ListUuidsByWebPathResponseBody) SetList(v []*ListUuidsByWebPathResponseBodyList) *ListUuidsByWebPathResponseBody {
	s.List = v
	return s
}

func (s *ListUuidsByWebPathResponseBody) SetPageInfo(v *ListUuidsByWebPathResponseBodyPageInfo) *ListUuidsByWebPathResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListUuidsByWebPathResponseBody) SetRequestId(v string) *ListUuidsByWebPathResponseBody {
	s.RequestId = &v
	return s
}

type ListUuidsByWebPathResponseBodyList struct {
	InternetIp  *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	IntranetIp  *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	MachineName *string `json:"MachineName,omitempty" xml:"MachineName,omitempty"`
	Uuid        *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ListUuidsByWebPathResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s ListUuidsByWebPathResponseBodyList) GoString() string {
	return s.String()
}

func (s *ListUuidsByWebPathResponseBodyList) SetInternetIp(v string) *ListUuidsByWebPathResponseBodyList {
	s.InternetIp = &v
	return s
}

func (s *ListUuidsByWebPathResponseBodyList) SetIntranetIp(v string) *ListUuidsByWebPathResponseBodyList {
	s.IntranetIp = &v
	return s
}

func (s *ListUuidsByWebPathResponseBodyList) SetMachineName(v string) *ListUuidsByWebPathResponseBodyList {
	s.MachineName = &v
	return s
}

func (s *ListUuidsByWebPathResponseBodyList) SetUuid(v string) *ListUuidsByWebPathResponseBodyList {
	s.Uuid = &v
	return s
}

type ListUuidsByWebPathResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListUuidsByWebPathResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListUuidsByWebPathResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListUuidsByWebPathResponseBodyPageInfo) SetCount(v int32) *ListUuidsByWebPathResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListUuidsByWebPathResponseBodyPageInfo) SetCurrentPage(v int32) *ListUuidsByWebPathResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListUuidsByWebPathResponseBodyPageInfo) SetPageSize(v int32) *ListUuidsByWebPathResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListUuidsByWebPathResponseBodyPageInfo) SetTotalCount(v int32) *ListUuidsByWebPathResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListUuidsByWebPathResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListUuidsByWebPathResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListUuidsByWebPathResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUuidsByWebPathResponse) GoString() string {
	return s.String()
}

func (s *ListUuidsByWebPathResponse) SetHeaders(v map[string]*string) *ListUuidsByWebPathResponse {
	s.Headers = v
	return s
}

func (s *ListUuidsByWebPathResponse) SetStatusCode(v int32) *ListUuidsByWebPathResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUuidsByWebPathResponse) SetBody(v *ListUuidsByWebPathResponseBody) *ListUuidsByWebPathResponse {
	s.Body = v
	return s
}

type ListVulAutoRepairConfigRequest struct {
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The type of the vulnerability. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListVulAutoRepairConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ListVulAutoRepairConfigRequest) GoString() string {
	return s.String()
}

func (s *ListVulAutoRepairConfigRequest) SetAliasName(v string) *ListVulAutoRepairConfigRequest {
	s.AliasName = &v
	return s
}

func (s *ListVulAutoRepairConfigRequest) SetCurrentPage(v int32) *ListVulAutoRepairConfigRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListVulAutoRepairConfigRequest) SetPageSize(v int32) *ListVulAutoRepairConfigRequest {
	s.PageSize = &v
	return s
}

func (s *ListVulAutoRepairConfigRequest) SetType(v string) *ListVulAutoRepairConfigRequest {
	s.Type = &v
	return s
}

type ListVulAutoRepairConfigResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The pagination information.
	PageInfo *ListVulAutoRepairConfigResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// An array consisting of the existing configurations of vulnerabilities that can be automatically fixed.
	VulAutoRepairConfigList []*ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList `json:"VulAutoRepairConfigList,omitempty" xml:"VulAutoRepairConfigList,omitempty" type:"Repeated"`
}

func (s ListVulAutoRepairConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListVulAutoRepairConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ListVulAutoRepairConfigResponseBody) SetCode(v string) *ListVulAutoRepairConfigResponseBody {
	s.Code = &v
	return s
}

func (s *ListVulAutoRepairConfigResponseBody) SetHttpStatusCode(v int32) *ListVulAutoRepairConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListVulAutoRepairConfigResponseBody) SetMessage(v string) *ListVulAutoRepairConfigResponseBody {
	s.Message = &v
	return s
}

func (s *ListVulAutoRepairConfigResponseBody) SetPageInfo(v *ListVulAutoRepairConfigResponseBodyPageInfo) *ListVulAutoRepairConfigResponseBody {
	s.PageInfo = v
	return s
}

func (s *ListVulAutoRepairConfigResponseBody) SetRequestId(v string) *ListVulAutoRepairConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListVulAutoRepairConfigResponseBody) SetSuccess(v bool) *ListVulAutoRepairConfigResponseBody {
	s.Success = &v
	return s
}

func (s *ListVulAutoRepairConfigResponseBody) SetVulAutoRepairConfigList(v []*ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList) *ListVulAutoRepairConfigResponseBody {
	s.VulAutoRepairConfigList = v
	return s
}

type ListVulAutoRepairConfigResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **10**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListVulAutoRepairConfigResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s ListVulAutoRepairConfigResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *ListVulAutoRepairConfigResponseBodyPageInfo) SetCount(v int32) *ListVulAutoRepairConfigResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *ListVulAutoRepairConfigResponseBodyPageInfo) SetCurrentPage(v int32) *ListVulAutoRepairConfigResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *ListVulAutoRepairConfigResponseBodyPageInfo) SetPageSize(v int32) *ListVulAutoRepairConfigResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *ListVulAutoRepairConfigResponseBodyPageInfo) SetTotalCount(v int32) *ListVulAutoRepairConfigResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList struct {
	// The alias of the vulnerability.
	AliasName *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	// The configuration ID of the vulnerability.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The reason why the vulnerability can be automatically fixed.
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	// The type of the vulnerability. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList) String() string {
	return tea.Prettify(s)
}

func (s ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList) GoString() string {
	return s.String()
}

func (s *ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList) SetAliasName(v string) *ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList {
	s.AliasName = &v
	return s
}

func (s *ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList) SetId(v int64) *ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList {
	s.Id = &v
	return s
}

func (s *ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList) SetName(v string) *ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList {
	s.Name = &v
	return s
}

func (s *ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList) SetReason(v string) *ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList {
	s.Reason = &v
	return s
}

func (s *ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList) SetType(v string) *ListVulAutoRepairConfigResponseBodyVulAutoRepairConfigList {
	s.Type = &v
	return s
}

type ListVulAutoRepairConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListVulAutoRepairConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListVulAutoRepairConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ListVulAutoRepairConfigResponse) GoString() string {
	return s.String()
}

func (s *ListVulAutoRepairConfigResponse) SetHeaders(v map[string]*string) *ListVulAutoRepairConfigResponse {
	s.Headers = v
	return s
}

func (s *ListVulAutoRepairConfigResponse) SetStatusCode(v int32) *ListVulAutoRepairConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ListVulAutoRepairConfigResponse) SetBody(v *ListVulAutoRepairConfigResponseBody) *ListVulAutoRepairConfigResponse {
	s.Body = v
	return s
}

type ModifyAccessKeyLeakDealRequest struct {
	Id     *int64   `json:"Id,omitempty" xml:"Id,omitempty"`
	IdList []*int64 `json:"IdList,omitempty" xml:"IdList,omitempty" type:"Repeated"`
	Remark *string  `json:"Remark,omitempty" xml:"Remark,omitempty"`
	Type   *string  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyAccessKeyLeakDealRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccessKeyLeakDealRequest) GoString() string {
	return s.String()
}

func (s *ModifyAccessKeyLeakDealRequest) SetId(v int64) *ModifyAccessKeyLeakDealRequest {
	s.Id = &v
	return s
}

func (s *ModifyAccessKeyLeakDealRequest) SetIdList(v []*int64) *ModifyAccessKeyLeakDealRequest {
	s.IdList = v
	return s
}

func (s *ModifyAccessKeyLeakDealRequest) SetRemark(v string) *ModifyAccessKeyLeakDealRequest {
	s.Remark = &v
	return s
}

func (s *ModifyAccessKeyLeakDealRequest) SetType(v string) *ModifyAccessKeyLeakDealRequest {
	s.Type = &v
	return s
}

type ModifyAccessKeyLeakDealResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAccessKeyLeakDealResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccessKeyLeakDealResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAccessKeyLeakDealResponseBody) SetRequestId(v string) *ModifyAccessKeyLeakDealResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAccessKeyLeakDealResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyAccessKeyLeakDealResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyAccessKeyLeakDealResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccessKeyLeakDealResponse) GoString() string {
	return s.String()
}

func (s *ModifyAccessKeyLeakDealResponse) SetHeaders(v map[string]*string) *ModifyAccessKeyLeakDealResponse {
	s.Headers = v
	return s
}

func (s *ModifyAccessKeyLeakDealResponse) SetStatusCode(v int32) *ModifyAccessKeyLeakDealResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAccessKeyLeakDealResponse) SetBody(v *ModifyAccessKeyLeakDealResponseBody) *ModifyAccessKeyLeakDealResponse {
	s.Body = v
	return s
}

type ModifyAntiBruteForceRuleRequest struct {
	// Specifies whether to set the defense rule as the default rule. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DefaultRule *bool `json:"DefaultRule,omitempty" xml:"DefaultRule,omitempty"`
	// The threshold of logon failures that you specify. Valid values:
	//
	// *   **2**
	// *   **3**
	// *   **4**
	// *   **5**
	// *   **10**
	// *   **50**
	// *   **80**
	// *   **100**
	FailCount *int32 `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	// The period of time during which logons from an account are not allowed. Unit: minutes. Valid values:
	//
	// *   **5**
	// *   **15**
	// *   **30**
	// *   **60**
	// *   **120**
	// *   **360**
	// *   **720**
	// *   **1440**
	// *   **10080**
	// *   **52560000**: permanent
	ForbiddenTime *int32 `json:"ForbiddenTime,omitempty" xml:"ForbiddenTime,omitempty"`
	// The ID of the defense rule.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the defense rule.
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The period of time during which logon failures from an account are measured. Unit: minutes. Valid values:
	//
	// *   **1**
	// *   **2**
	// *   **5**
	// *   **10**
	// *   **15**
	Span *int32 `json:"Span,omitempty" xml:"Span,omitempty"`
	// An array consisting of the UUIDs of the servers to which the defense rule is applied.
	UuidList []*string `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s ModifyAntiBruteForceRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAntiBruteForceRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifyAntiBruteForceRuleRequest) SetDefaultRule(v bool) *ModifyAntiBruteForceRuleRequest {
	s.DefaultRule = &v
	return s
}

func (s *ModifyAntiBruteForceRuleRequest) SetFailCount(v int32) *ModifyAntiBruteForceRuleRequest {
	s.FailCount = &v
	return s
}

func (s *ModifyAntiBruteForceRuleRequest) SetForbiddenTime(v int32) *ModifyAntiBruteForceRuleRequest {
	s.ForbiddenTime = &v
	return s
}

func (s *ModifyAntiBruteForceRuleRequest) SetId(v int64) *ModifyAntiBruteForceRuleRequest {
	s.Id = &v
	return s
}

func (s *ModifyAntiBruteForceRuleRequest) SetName(v string) *ModifyAntiBruteForceRuleRequest {
	s.Name = &v
	return s
}

func (s *ModifyAntiBruteForceRuleRequest) SetResourceOwnerId(v int64) *ModifyAntiBruteForceRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyAntiBruteForceRuleRequest) SetSourceIp(v string) *ModifyAntiBruteForceRuleRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyAntiBruteForceRuleRequest) SetSpan(v int32) *ModifyAntiBruteForceRuleRequest {
	s.Span = &v
	return s
}

func (s *ModifyAntiBruteForceRuleRequest) SetUuidList(v []*string) *ModifyAntiBruteForceRuleRequest {
	s.UuidList = v
	return s
}

type ModifyAntiBruteForceRuleResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAntiBruteForceRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAntiBruteForceRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAntiBruteForceRuleResponseBody) SetRequestId(v string) *ModifyAntiBruteForceRuleResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAntiBruteForceRuleResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyAntiBruteForceRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyAntiBruteForceRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAntiBruteForceRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifyAntiBruteForceRuleResponse) SetHeaders(v map[string]*string) *ModifyAntiBruteForceRuleResponse {
	s.Headers = v
	return s
}

func (s *ModifyAntiBruteForceRuleResponse) SetStatusCode(v int32) *ModifyAntiBruteForceRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAntiBruteForceRuleResponse) SetBody(v *ModifyAntiBruteForceRuleResponseBody) *ModifyAntiBruteForceRuleResponse {
	s.Body = v
	return s
}

type ModifyAppVulScanCycleRequest struct {
	Cycle *string `json:"Cycle,omitempty" xml:"Cycle,omitempty"`
}

func (s ModifyAppVulScanCycleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppVulScanCycleRequest) GoString() string {
	return s.String()
}

func (s *ModifyAppVulScanCycleRequest) SetCycle(v string) *ModifyAppVulScanCycleRequest {
	s.Cycle = &v
	return s
}

type ModifyAppVulScanCycleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAppVulScanCycleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppVulScanCycleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAppVulScanCycleResponseBody) SetRequestId(v string) *ModifyAppVulScanCycleResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAppVulScanCycleResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyAppVulScanCycleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyAppVulScanCycleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppVulScanCycleResponse) GoString() string {
	return s.String()
}

func (s *ModifyAppVulScanCycleResponse) SetHeaders(v map[string]*string) *ModifyAppVulScanCycleResponse {
	s.Headers = v
	return s
}

func (s *ModifyAppVulScanCycleResponse) SetStatusCode(v int32) *ModifyAppVulScanCycleResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAppVulScanCycleResponse) SetBody(v *ModifyAppVulScanCycleResponseBody) *ModifyAppVulScanCycleResponse {
	s.Body = v
	return s
}

type ModifyAssetGroupRequest struct {
	// The ID of the new server group to which the servers belong.
	//
	// >  You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of server groups.
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The UUIDs of the servers for which you want to change the server group. Separate multiple UUIDs with commas (,).
	//
	// >  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s ModifyAssetGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAssetGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyAssetGroupRequest) SetGroupId(v int64) *ModifyAssetGroupRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyAssetGroupRequest) SetSourceIp(v string) *ModifyAssetGroupRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyAssetGroupRequest) SetUuids(v string) *ModifyAssetGroupRequest {
	s.Uuids = &v
	return s
}

type ModifyAssetGroupResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAssetGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAssetGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAssetGroupResponseBody) SetRequestId(v string) *ModifyAssetGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAssetGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyAssetGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyAssetGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAssetGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyAssetGroupResponse) SetHeaders(v map[string]*string) *ModifyAssetGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyAssetGroupResponse) SetStatusCode(v int32) *ModifyAssetGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAssetGroupResponse) SetBody(v *ModifyAssetGroupResponseBody) *ModifyAssetGroupResponse {
	s.Body = v
	return s
}

type ModifyAssetImportantRequest struct {
	ImportantCode *int32  `json:"ImportantCode,omitempty" xml:"ImportantCode,omitempty"`
	UuidList      *string `json:"UuidList,omitempty" xml:"UuidList,omitempty"`
}

func (s ModifyAssetImportantRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAssetImportantRequest) GoString() string {
	return s.String()
}

func (s *ModifyAssetImportantRequest) SetImportantCode(v int32) *ModifyAssetImportantRequest {
	s.ImportantCode = &v
	return s
}

func (s *ModifyAssetImportantRequest) SetUuidList(v string) *ModifyAssetImportantRequest {
	s.UuidList = &v
	return s
}

type ModifyAssetImportantResponseBody struct {
	ErrCode        *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	ErrMessage     *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyAssetImportantResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAssetImportantResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAssetImportantResponseBody) SetErrCode(v string) *ModifyAssetImportantResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifyAssetImportantResponseBody) SetErrMessage(v string) *ModifyAssetImportantResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifyAssetImportantResponseBody) SetHttpStatusCode(v int32) *ModifyAssetImportantResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyAssetImportantResponseBody) SetRequestId(v string) *ModifyAssetImportantResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyAssetImportantResponseBody) SetSuccess(v bool) *ModifyAssetImportantResponseBody {
	s.Success = &v
	return s
}

type ModifyAssetImportantResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyAssetImportantResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyAssetImportantResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAssetImportantResponse) GoString() string {
	return s.String()
}

func (s *ModifyAssetImportantResponse) SetHeaders(v map[string]*string) *ModifyAssetImportantResponse {
	s.Headers = v
	return s
}

func (s *ModifyAssetImportantResponse) SetStatusCode(v int32) *ModifyAssetImportantResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAssetImportantResponse) SetBody(v *ModifyAssetImportantResponseBody) *ModifyAssetImportantResponse {
	s.Body = v
	return s
}

type ModifyAutoDelConfigRequest struct {
	// The number of days after which a detected vulnerability is automatically deleted. Valid values:
	//
	// - 7
	// - 30
	// - 90
	Days *int32 `json:"Days,omitempty" xml:"Days,omitempty"`
}

func (s ModifyAutoDelConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoDelConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyAutoDelConfigRequest) SetDays(v int32) *ModifyAutoDelConfigRequest {
	s.Days = &v
	return s
}

type ModifyAutoDelConfigResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAutoDelConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoDelConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAutoDelConfigResponseBody) SetRequestId(v string) *ModifyAutoDelConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAutoDelConfigResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyAutoDelConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyAutoDelConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoDelConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyAutoDelConfigResponse) SetHeaders(v map[string]*string) *ModifyAutoDelConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyAutoDelConfigResponse) SetStatusCode(v int32) *ModifyAutoDelConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAutoDelConfigResponse) SetBody(v *ModifyAutoDelConfigResponseBody) *ModifyAutoDelConfigResponse {
	s.Body = v
	return s
}

type ModifyBackupPolicyRequest struct {
	Id             *int64                 `json:"Id,omitempty" xml:"Id,omitempty"`
	Name           *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	Policy         map[string]interface{} `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PolicyRegionId *string                `json:"PolicyRegionId,omitempty" xml:"PolicyRegionId,omitempty"`
	PolicyVersion  *string                `json:"PolicyVersion,omitempty" xml:"PolicyVersion,omitempty"`
	UuidList       []*string              `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s ModifyBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyRequest) SetId(v int64) *ModifyBackupPolicyRequest {
	s.Id = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetName(v string) *ModifyBackupPolicyRequest {
	s.Name = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetPolicy(v map[string]interface{}) *ModifyBackupPolicyRequest {
	s.Policy = v
	return s
}

func (s *ModifyBackupPolicyRequest) SetPolicyRegionId(v string) *ModifyBackupPolicyRequest {
	s.PolicyRegionId = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetPolicyVersion(v string) *ModifyBackupPolicyRequest {
	s.PolicyVersion = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetUuidList(v []*string) *ModifyBackupPolicyRequest {
	s.UuidList = v
	return s
}

type ModifyBackupPolicyShrinkRequest struct {
	Id             *int64    `json:"Id,omitempty" xml:"Id,omitempty"`
	Name           *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	PolicyShrink   *string   `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PolicyRegionId *string   `json:"PolicyRegionId,omitempty" xml:"PolicyRegionId,omitempty"`
	PolicyVersion  *string   `json:"PolicyVersion,omitempty" xml:"PolicyVersion,omitempty"`
	UuidList       []*string `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s ModifyBackupPolicyShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyShrinkRequest) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyShrinkRequest) SetId(v int64) *ModifyBackupPolicyShrinkRequest {
	s.Id = &v
	return s
}

func (s *ModifyBackupPolicyShrinkRequest) SetName(v string) *ModifyBackupPolicyShrinkRequest {
	s.Name = &v
	return s
}

func (s *ModifyBackupPolicyShrinkRequest) SetPolicyShrink(v string) *ModifyBackupPolicyShrinkRequest {
	s.PolicyShrink = &v
	return s
}

func (s *ModifyBackupPolicyShrinkRequest) SetPolicyRegionId(v string) *ModifyBackupPolicyShrinkRequest {
	s.PolicyRegionId = &v
	return s
}

func (s *ModifyBackupPolicyShrinkRequest) SetPolicyVersion(v string) *ModifyBackupPolicyShrinkRequest {
	s.PolicyVersion = &v
	return s
}

func (s *ModifyBackupPolicyShrinkRequest) SetUuidList(v []*string) *ModifyBackupPolicyShrinkRequest {
	s.UuidList = v
	return s
}

type ModifyBackupPolicyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyBackupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyResponseBody) SetRequestId(v string) *ModifyBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyBackupPolicyResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyResponse) SetHeaders(v map[string]*string) *ModifyBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyBackupPolicyResponse) SetStatusCode(v int32) *ModifyBackupPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyBackupPolicyResponse) SetBody(v *ModifyBackupPolicyResponseBody) *ModifyBackupPolicyResponse {
	s.Body = v
	return s
}

type ModifyBackupPolicyStatusRequest struct {
	Id            *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	PolicyVersion *string `json:"PolicyVersion,omitempty" xml:"PolicyVersion,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyBackupPolicyStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyStatusRequest) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyStatusRequest) SetId(v int64) *ModifyBackupPolicyStatusRequest {
	s.Id = &v
	return s
}

func (s *ModifyBackupPolicyStatusRequest) SetPolicyVersion(v string) *ModifyBackupPolicyStatusRequest {
	s.PolicyVersion = &v
	return s
}

func (s *ModifyBackupPolicyStatusRequest) SetStatus(v string) *ModifyBackupPolicyStatusRequest {
	s.Status = &v
	return s
}

type ModifyBackupPolicyStatusResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyBackupPolicyStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyStatusResponseBody) SetRequestId(v string) *ModifyBackupPolicyStatusResponseBody {
	s.RequestId = &v
	return s
}

type ModifyBackupPolicyStatusResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyBackupPolicyStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyBackupPolicyStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyStatusResponse) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyStatusResponse) SetHeaders(v map[string]*string) *ModifyBackupPolicyStatusResponse {
	s.Headers = v
	return s
}

func (s *ModifyBackupPolicyStatusResponse) SetStatusCode(v int32) *ModifyBackupPolicyStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyBackupPolicyStatusResponse) SetBody(v *ModifyBackupPolicyStatusResponseBody) *ModifyBackupPolicyStatusResponse {
	s.Body = v
	return s
}

type ModifyClearLogstoreStorageRequest struct {
	// The ID of the request source. Set the value to **sas**.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The name of the Logstore that stores logs.
	UserLogStore *string `json:"UserLogStore,omitempty" xml:"UserLogStore,omitempty"`
	// The name of the project.
	UserProject *string `json:"UserProject,omitempty" xml:"UserProject,omitempty"`
}

func (s ModifyClearLogstoreStorageRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClearLogstoreStorageRequest) GoString() string {
	return s.String()
}

func (s *ModifyClearLogstoreStorageRequest) SetFrom(v string) *ModifyClearLogstoreStorageRequest {
	s.From = &v
	return s
}

func (s *ModifyClearLogstoreStorageRequest) SetLang(v string) *ModifyClearLogstoreStorageRequest {
	s.Lang = &v
	return s
}

func (s *ModifyClearLogstoreStorageRequest) SetUserLogStore(v string) *ModifyClearLogstoreStorageRequest {
	s.UserLogStore = &v
	return s
}

func (s *ModifyClearLogstoreStorageRequest) SetUserProject(v string) *ModifyClearLogstoreStorageRequest {
	s.UserProject = &v
	return s
}

type ModifyClearLogstoreStorageResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClearLogstoreStorageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClearLogstoreStorageResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClearLogstoreStorageResponseBody) SetRequestId(v string) *ModifyClearLogstoreStorageResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClearLogstoreStorageResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyClearLogstoreStorageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyClearLogstoreStorageResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClearLogstoreStorageResponse) GoString() string {
	return s.String()
}

func (s *ModifyClearLogstoreStorageResponse) SetHeaders(v map[string]*string) *ModifyClearLogstoreStorageResponse {
	s.Headers = v
	return s
}

func (s *ModifyClearLogstoreStorageResponse) SetStatusCode(v int32) *ModifyClearLogstoreStorageResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyClearLogstoreStorageResponse) SetBody(v *ModifyClearLogstoreStorageResponseBody) *ModifyClearLogstoreStorageResponse {
	s.Body = v
	return s
}

type ModifyClientConfSetupRequest struct {
	StrategyConfig   *string `json:"StrategyConfig,omitempty" xml:"StrategyConfig,omitempty"`
	StrategyTag      *string `json:"StrategyTag,omitempty" xml:"StrategyTag,omitempty"`
	StrategyTagValue *string `json:"StrategyTagValue,omitempty" xml:"StrategyTagValue,omitempty"`
}

func (s ModifyClientConfSetupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClientConfSetupRequest) GoString() string {
	return s.String()
}

func (s *ModifyClientConfSetupRequest) SetStrategyConfig(v string) *ModifyClientConfSetupRequest {
	s.StrategyConfig = &v
	return s
}

func (s *ModifyClientConfSetupRequest) SetStrategyTag(v string) *ModifyClientConfSetupRequest {
	s.StrategyTag = &v
	return s
}

func (s *ModifyClientConfSetupRequest) SetStrategyTagValue(v string) *ModifyClientConfSetupRequest {
	s.StrategyTagValue = &v
	return s
}

type ModifyClientConfSetupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClientConfSetupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClientConfSetupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClientConfSetupResponseBody) SetRequestId(v string) *ModifyClientConfSetupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClientConfSetupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyClientConfSetupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyClientConfSetupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClientConfSetupResponse) GoString() string {
	return s.String()
}

func (s *ModifyClientConfSetupResponse) SetHeaders(v map[string]*string) *ModifyClientConfSetupResponse {
	s.Headers = v
	return s
}

func (s *ModifyClientConfSetupResponse) SetStatusCode(v int32) *ModifyClientConfSetupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyClientConfSetupResponse) SetBody(v *ModifyClientConfSetupResponseBody) *ModifyClientConfSetupResponse {
	s.Body = v
	return s
}

type ModifyClientConfStrategyRequest struct {
	Tag      *string   `json:"Tag,omitempty" xml:"Tag,omitempty"`
	TagExt   *string   `json:"TagExt,omitempty" xml:"TagExt,omitempty"`
	TagValue *string   `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	Uuid     *string   `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	Uuids    []*string `json:"Uuids,omitempty" xml:"Uuids,omitempty" type:"Repeated"`
}

func (s ModifyClientConfStrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClientConfStrategyRequest) GoString() string {
	return s.String()
}

func (s *ModifyClientConfStrategyRequest) SetTag(v string) *ModifyClientConfStrategyRequest {
	s.Tag = &v
	return s
}

func (s *ModifyClientConfStrategyRequest) SetTagExt(v string) *ModifyClientConfStrategyRequest {
	s.TagExt = &v
	return s
}

func (s *ModifyClientConfStrategyRequest) SetTagValue(v string) *ModifyClientConfStrategyRequest {
	s.TagValue = &v
	return s
}

func (s *ModifyClientConfStrategyRequest) SetUuid(v string) *ModifyClientConfStrategyRequest {
	s.Uuid = &v
	return s
}

func (s *ModifyClientConfStrategyRequest) SetUuids(v []*string) *ModifyClientConfStrategyRequest {
	s.Uuids = v
	return s
}

type ModifyClientConfStrategyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClientConfStrategyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClientConfStrategyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClientConfStrategyResponseBody) SetRequestId(v string) *ModifyClientConfStrategyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClientConfStrategyResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyClientConfStrategyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyClientConfStrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClientConfStrategyResponse) GoString() string {
	return s.String()
}

func (s *ModifyClientConfStrategyResponse) SetHeaders(v map[string]*string) *ModifyClientConfStrategyResponse {
	s.Headers = v
	return s
}

func (s *ModifyClientConfStrategyResponse) SetStatusCode(v int32) *ModifyClientConfStrategyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyClientConfStrategyResponse) SetBody(v *ModifyClientConfStrategyResponseBody) *ModifyClientConfStrategyResponse {
	s.Body = v
	return s
}

type ModifyClientUserDefineRuleRequest struct {
	ActionType      *int32  `json:"ActionType,omitempty" xml:"ActionType,omitempty"`
	Cmdline         *string `json:"Cmdline,omitempty" xml:"Cmdline,omitempty"`
	FilePath        *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	IP              *string `json:"IP,omitempty" xml:"IP,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Md5List         *string `json:"Md5List,omitempty" xml:"Md5List,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NewFilePath     *string `json:"NewFilePath,omitempty" xml:"NewFilePath,omitempty"`
	ParentCmdline   *string `json:"ParentCmdline,omitempty" xml:"ParentCmdline,omitempty"`
	ParentProcPath  *string `json:"ParentProcPath,omitempty" xml:"ParentProcPath,omitempty"`
	Platform        *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Port            *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	PortStr         *string `json:"PortStr,omitempty" xml:"PortStr,omitempty"`
	ProcPath        *string `json:"ProcPath,omitempty" xml:"ProcPath,omitempty"`
	RegistryContent *string `json:"RegistryContent,omitempty" xml:"RegistryContent,omitempty"`
	RegistryKey     *string `json:"RegistryKey,omitempty" xml:"RegistryKey,omitempty"`
	Type            *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyClientUserDefineRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClientUserDefineRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifyClientUserDefineRuleRequest) SetActionType(v int32) *ModifyClientUserDefineRuleRequest {
	s.ActionType = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetCmdline(v string) *ModifyClientUserDefineRuleRequest {
	s.Cmdline = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetFilePath(v string) *ModifyClientUserDefineRuleRequest {
	s.FilePath = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetIP(v string) *ModifyClientUserDefineRuleRequest {
	s.IP = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetId(v int64) *ModifyClientUserDefineRuleRequest {
	s.Id = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetMd5List(v string) *ModifyClientUserDefineRuleRequest {
	s.Md5List = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetName(v string) *ModifyClientUserDefineRuleRequest {
	s.Name = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetNewFilePath(v string) *ModifyClientUserDefineRuleRequest {
	s.NewFilePath = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetParentCmdline(v string) *ModifyClientUserDefineRuleRequest {
	s.ParentCmdline = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetParentProcPath(v string) *ModifyClientUserDefineRuleRequest {
	s.ParentProcPath = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetPlatform(v string) *ModifyClientUserDefineRuleRequest {
	s.Platform = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetPort(v int32) *ModifyClientUserDefineRuleRequest {
	s.Port = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetPortStr(v string) *ModifyClientUserDefineRuleRequest {
	s.PortStr = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetProcPath(v string) *ModifyClientUserDefineRuleRequest {
	s.ProcPath = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetRegistryContent(v string) *ModifyClientUserDefineRuleRequest {
	s.RegistryContent = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetRegistryKey(v string) *ModifyClientUserDefineRuleRequest {
	s.RegistryKey = &v
	return s
}

func (s *ModifyClientUserDefineRuleRequest) SetType(v int32) *ModifyClientUserDefineRuleRequest {
	s.Type = &v
	return s
}

type ModifyClientUserDefineRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClientUserDefineRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClientUserDefineRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClientUserDefineRuleResponseBody) SetRequestId(v string) *ModifyClientUserDefineRuleResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClientUserDefineRuleResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyClientUserDefineRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyClientUserDefineRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClientUserDefineRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifyClientUserDefineRuleResponse) SetHeaders(v map[string]*string) *ModifyClientUserDefineRuleResponse {
	s.Headers = v
	return s
}

func (s *ModifyClientUserDefineRuleResponse) SetStatusCode(v int32) *ModifyClientUserDefineRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyClientUserDefineRuleResponse) SetBody(v *ModifyClientUserDefineRuleResponseBody) *ModifyClientUserDefineRuleResponse {
	s.Body = v
	return s
}

type ModifyClusterCnnfStatusUserConfirmRequest struct {
	ClusterIds  []*string `json:"ClusterIds,omitempty" xml:"ClusterIds,omitempty" type:"Repeated"`
	UserConfirm *bool     `json:"UserConfirm,omitempty" xml:"UserConfirm,omitempty"`
}

func (s ModifyClusterCnnfStatusUserConfirmRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterCnnfStatusUserConfirmRequest) GoString() string {
	return s.String()
}

func (s *ModifyClusterCnnfStatusUserConfirmRequest) SetClusterIds(v []*string) *ModifyClusterCnnfStatusUserConfirmRequest {
	s.ClusterIds = v
	return s
}

func (s *ModifyClusterCnnfStatusUserConfirmRequest) SetUserConfirm(v bool) *ModifyClusterCnnfStatusUserConfirmRequest {
	s.UserConfirm = &v
	return s
}

type ModifyClusterCnnfStatusUserConfirmResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClusterCnnfStatusUserConfirmResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterCnnfStatusUserConfirmResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClusterCnnfStatusUserConfirmResponseBody) SetRequestId(v string) *ModifyClusterCnnfStatusUserConfirmResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClusterCnnfStatusUserConfirmResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyClusterCnnfStatusUserConfirmResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyClusterCnnfStatusUserConfirmResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterCnnfStatusUserConfirmResponse) GoString() string {
	return s.String()
}

func (s *ModifyClusterCnnfStatusUserConfirmResponse) SetHeaders(v map[string]*string) *ModifyClusterCnnfStatusUserConfirmResponse {
	s.Headers = v
	return s
}

func (s *ModifyClusterCnnfStatusUserConfirmResponse) SetStatusCode(v int32) *ModifyClusterCnnfStatusUserConfirmResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyClusterCnnfStatusUserConfirmResponse) SetBody(v *ModifyClusterCnnfStatusUserConfirmResponseBody) *ModifyClusterCnnfStatusUserConfirmResponse {
	s.Body = v
	return s
}

type ModifyConcernNecessityRequest struct {
	ConcernNecessity *string `json:"ConcernNecessity,omitempty" xml:"ConcernNecessity,omitempty"`
}

func (s ModifyConcernNecessityRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyConcernNecessityRequest) GoString() string {
	return s.String()
}

func (s *ModifyConcernNecessityRequest) SetConcernNecessity(v string) *ModifyConcernNecessityRequest {
	s.ConcernNecessity = &v
	return s
}

type ModifyConcernNecessityResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyConcernNecessityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyConcernNecessityResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyConcernNecessityResponseBody) SetRequestId(v string) *ModifyConcernNecessityResponseBody {
	s.RequestId = &v
	return s
}

type ModifyConcernNecessityResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyConcernNecessityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyConcernNecessityResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyConcernNecessityResponse) GoString() string {
	return s.String()
}

func (s *ModifyConcernNecessityResponse) SetHeaders(v map[string]*string) *ModifyConcernNecessityResponse {
	s.Headers = v
	return s
}

func (s *ModifyConcernNecessityResponse) SetStatusCode(v int32) *ModifyConcernNecessityResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyConcernNecessityResponse) SetBody(v *ModifyConcernNecessityResponseBody) *ModifyConcernNecessityResponse {
	s.Body = v
	return s
}

type ModifyCreateVulWhitelistRequest struct {
	Reason     *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	TargetInfo *string `json:"TargetInfo,omitempty" xml:"TargetInfo,omitempty"`
	Whitelist  *string `json:"Whitelist,omitempty" xml:"Whitelist,omitempty"`
}

func (s ModifyCreateVulWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCreateVulWhitelistRequest) GoString() string {
	return s.String()
}

func (s *ModifyCreateVulWhitelistRequest) SetReason(v string) *ModifyCreateVulWhitelistRequest {
	s.Reason = &v
	return s
}

func (s *ModifyCreateVulWhitelistRequest) SetTargetInfo(v string) *ModifyCreateVulWhitelistRequest {
	s.TargetInfo = &v
	return s
}

func (s *ModifyCreateVulWhitelistRequest) SetWhitelist(v string) *ModifyCreateVulWhitelistRequest {
	s.Whitelist = &v
	return s
}

type ModifyCreateVulWhitelistResponseBody struct {
	RequestId        *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VulWhitelistList []*ModifyCreateVulWhitelistResponseBodyVulWhitelistList `json:"VulWhitelistList,omitempty" xml:"VulWhitelistList,omitempty" type:"Repeated"`
}

func (s ModifyCreateVulWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCreateVulWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCreateVulWhitelistResponseBody) SetRequestId(v string) *ModifyCreateVulWhitelistResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyCreateVulWhitelistResponseBody) SetVulWhitelistList(v []*ModifyCreateVulWhitelistResponseBodyVulWhitelistList) *ModifyCreateVulWhitelistResponseBody {
	s.VulWhitelistList = v
	return s
}

type ModifyCreateVulWhitelistResponseBodyVulWhitelistList struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ModifyCreateVulWhitelistResponseBodyVulWhitelistList) String() string {
	return tea.Prettify(s)
}

func (s ModifyCreateVulWhitelistResponseBodyVulWhitelistList) GoString() string {
	return s.String()
}

func (s *ModifyCreateVulWhitelistResponseBodyVulWhitelistList) SetId(v int64) *ModifyCreateVulWhitelistResponseBodyVulWhitelistList {
	s.Id = &v
	return s
}

type ModifyCreateVulWhitelistResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyCreateVulWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCreateVulWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCreateVulWhitelistResponse) GoString() string {
	return s.String()
}

func (s *ModifyCreateVulWhitelistResponse) SetHeaders(v map[string]*string) *ModifyCreateVulWhitelistResponse {
	s.Headers = v
	return s
}

func (s *ModifyCreateVulWhitelistResponse) SetStatusCode(v int32) *ModifyCreateVulWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCreateVulWhitelistResponse) SetBody(v *ModifyCreateVulWhitelistResponseBody) *ModifyCreateVulWhitelistResponse {
	s.Body = v
	return s
}

type ModifyCustomBlockRecordRequest struct {
	BlockIp         *string `json:"BlockIp,omitempty" xml:"BlockIp,omitempty"`
	Bound           *string `json:"Bound,omitempty" xml:"Bound,omitempty"`
	ExpireTime      *int64  `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Uuids           *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s ModifyCustomBlockRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustomBlockRecordRequest) GoString() string {
	return s.String()
}

func (s *ModifyCustomBlockRecordRequest) SetBlockIp(v string) *ModifyCustomBlockRecordRequest {
	s.BlockIp = &v
	return s
}

func (s *ModifyCustomBlockRecordRequest) SetBound(v string) *ModifyCustomBlockRecordRequest {
	s.Bound = &v
	return s
}

func (s *ModifyCustomBlockRecordRequest) SetExpireTime(v int64) *ModifyCustomBlockRecordRequest {
	s.ExpireTime = &v
	return s
}

func (s *ModifyCustomBlockRecordRequest) SetResourceOwnerId(v int64) *ModifyCustomBlockRecordRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyCustomBlockRecordRequest) SetUuids(v string) *ModifyCustomBlockRecordRequest {
	s.Uuids = &v
	return s
}

type ModifyCustomBlockRecordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyCustomBlockRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustomBlockRecordResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCustomBlockRecordResponseBody) SetRequestId(v string) *ModifyCustomBlockRecordResponseBody {
	s.RequestId = &v
	return s
}

type ModifyCustomBlockRecordResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyCustomBlockRecordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCustomBlockRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustomBlockRecordResponse) GoString() string {
	return s.String()
}

func (s *ModifyCustomBlockRecordResponse) SetHeaders(v map[string]*string) *ModifyCustomBlockRecordResponse {
	s.Headers = v
	return s
}

func (s *ModifyCustomBlockRecordResponse) SetStatusCode(v int32) *ModifyCustomBlockRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCustomBlockRecordResponse) SetBody(v *ModifyCustomBlockRecordResponseBody) *ModifyCustomBlockRecordResponse {
	s.Body = v
	return s
}

type ModifyCycleTaskRequest struct {
	ConfigId        *string `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
	Enable          *int32  `json:"Enable,omitempty" xml:"Enable,omitempty"`
	FirstDateStr    *int64  `json:"FirstDateStr,omitempty" xml:"FirstDateStr,omitempty"`
	IntervalPeriod  *int32  `json:"IntervalPeriod,omitempty" xml:"IntervalPeriod,omitempty"`
	Param           *string `json:"Param,omitempty" xml:"Param,omitempty"`
	PeriodUnit      *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	TargetEndTime   *int32  `json:"TargetEndTime,omitempty" xml:"TargetEndTime,omitempty"`
	TargetStartTime *int32  `json:"TargetStartTime,omitempty" xml:"TargetStartTime,omitempty"`
	TaskName        *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskType        *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s ModifyCycleTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCycleTaskRequest) GoString() string {
	return s.String()
}

func (s *ModifyCycleTaskRequest) SetConfigId(v string) *ModifyCycleTaskRequest {
	s.ConfigId = &v
	return s
}

func (s *ModifyCycleTaskRequest) SetEnable(v int32) *ModifyCycleTaskRequest {
	s.Enable = &v
	return s
}

func (s *ModifyCycleTaskRequest) SetFirstDateStr(v int64) *ModifyCycleTaskRequest {
	s.FirstDateStr = &v
	return s
}

func (s *ModifyCycleTaskRequest) SetIntervalPeriod(v int32) *ModifyCycleTaskRequest {
	s.IntervalPeriod = &v
	return s
}

func (s *ModifyCycleTaskRequest) SetParam(v string) *ModifyCycleTaskRequest {
	s.Param = &v
	return s
}

func (s *ModifyCycleTaskRequest) SetPeriodUnit(v string) *ModifyCycleTaskRequest {
	s.PeriodUnit = &v
	return s
}

func (s *ModifyCycleTaskRequest) SetTargetEndTime(v int32) *ModifyCycleTaskRequest {
	s.TargetEndTime = &v
	return s
}

func (s *ModifyCycleTaskRequest) SetTargetStartTime(v int32) *ModifyCycleTaskRequest {
	s.TargetStartTime = &v
	return s
}

func (s *ModifyCycleTaskRequest) SetTaskName(v string) *ModifyCycleTaskRequest {
	s.TaskName = &v
	return s
}

func (s *ModifyCycleTaskRequest) SetTaskType(v string) *ModifyCycleTaskRequest {
	s.TaskType = &v
	return s
}

type ModifyCycleTaskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyCycleTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCycleTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCycleTaskResponseBody) SetRequestId(v string) *ModifyCycleTaskResponseBody {
	s.RequestId = &v
	return s
}

type ModifyCycleTaskResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyCycleTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCycleTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCycleTaskResponse) GoString() string {
	return s.String()
}

func (s *ModifyCycleTaskResponse) SetHeaders(v map[string]*string) *ModifyCycleTaskResponse {
	s.Headers = v
	return s
}

func (s *ModifyCycleTaskResponse) SetStatusCode(v int32) *ModifyCycleTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCycleTaskResponse) SetBody(v *ModifyCycleTaskResponseBody) *ModifyCycleTaskResponse {
	s.Body = v
	return s
}

type ModifyEmgVulSubmitRequest struct {
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The name of the vulnerability.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Specifies whether to scan for urgent vulnerabilities. Valid values:
	//
	// *   **yes**
	// *   **no**
	UserAgreement *string `json:"UserAgreement,omitempty" xml:"UserAgreement,omitempty"`
}

func (s ModifyEmgVulSubmitRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEmgVulSubmitRequest) GoString() string {
	return s.String()
}

func (s *ModifyEmgVulSubmitRequest) SetLang(v string) *ModifyEmgVulSubmitRequest {
	s.Lang = &v
	return s
}

func (s *ModifyEmgVulSubmitRequest) SetName(v string) *ModifyEmgVulSubmitRequest {
	s.Name = &v
	return s
}

func (s *ModifyEmgVulSubmitRequest) SetUserAgreement(v string) *ModifyEmgVulSubmitRequest {
	s.UserAgreement = &v
	return s
}

type ModifyEmgVulSubmitResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyEmgVulSubmitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyEmgVulSubmitResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyEmgVulSubmitResponseBody) SetRequestId(v string) *ModifyEmgVulSubmitResponseBody {
	s.RequestId = &v
	return s
}

type ModifyEmgVulSubmitResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyEmgVulSubmitResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyEmgVulSubmitResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEmgVulSubmitResponse) GoString() string {
	return s.String()
}

func (s *ModifyEmgVulSubmitResponse) SetHeaders(v map[string]*string) *ModifyEmgVulSubmitResponse {
	s.Headers = v
	return s
}

func (s *ModifyEmgVulSubmitResponse) SetStatusCode(v int32) *ModifyEmgVulSubmitResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyEmgVulSubmitResponse) SetBody(v *ModifyEmgVulSubmitResponseBody) *ModifyEmgVulSubmitResponse {
	s.Body = v
	return s
}

type ModifyGroupPropertyRequest struct {
	// The new attributes of the server group. You can specify the following parameters to configure the attributes:
	//
	// *   **groupFlag**: the type of the server group. Valid values: 0 and 1. The value **0** specifies the Default server group. The value **1** specifies other server groups.
	// *   **groupId**: the ID of the server group.
	// *   **groupIndex**: no meaning. You can leave this parameter empty.
	// *   **groupName**: the name of the server group. The value is the new name of the server group. The new name cannot be the same as the original name of the server group.
	//
	// >  You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to obtain the values of the groupFlag and groupId parameters. You cannot change the value of the groupFlag or groupId parameter. You can change only the value of the groupName parameter.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ModifyGroupPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyGroupPropertyRequest) GoString() string {
	return s.String()
}

func (s *ModifyGroupPropertyRequest) SetData(v string) *ModifyGroupPropertyRequest {
	s.Data = &v
	return s
}

type ModifyGroupPropertyResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyGroupPropertyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyGroupPropertyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyGroupPropertyResponseBody) SetRequestId(v string) *ModifyGroupPropertyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyGroupPropertyResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyGroupPropertyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyGroupPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyGroupPropertyResponse) GoString() string {
	return s.String()
}

func (s *ModifyGroupPropertyResponse) SetHeaders(v map[string]*string) *ModifyGroupPropertyResponse {
	s.Headers = v
	return s
}

func (s *ModifyGroupPropertyResponse) SetStatusCode(v int32) *ModifyGroupPropertyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyGroupPropertyResponse) SetBody(v *ModifyGroupPropertyResponseBody) *ModifyGroupPropertyResponse {
	s.Body = v
	return s
}

type ModifyInstanceAntiBruteForceRuleRequest struct {
	NewRuleId       *int64  `json:"NewRuleId,omitempty" xml:"NewRuleId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SourceIp        *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	Uuid            *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ModifyInstanceAntiBruteForceRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAntiBruteForceRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAntiBruteForceRuleRequest) SetNewRuleId(v int64) *ModifyInstanceAntiBruteForceRuleRequest {
	s.NewRuleId = &v
	return s
}

func (s *ModifyInstanceAntiBruteForceRuleRequest) SetResourceOwnerId(v int64) *ModifyInstanceAntiBruteForceRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceAntiBruteForceRuleRequest) SetSourceIp(v string) *ModifyInstanceAntiBruteForceRuleRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyInstanceAntiBruteForceRuleRequest) SetUuid(v string) *ModifyInstanceAntiBruteForceRuleRequest {
	s.Uuid = &v
	return s
}

type ModifyInstanceAntiBruteForceRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceAntiBruteForceRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAntiBruteForceRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAntiBruteForceRuleResponseBody) SetRequestId(v string) *ModifyInstanceAntiBruteForceRuleResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceAntiBruteForceRuleResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyInstanceAntiBruteForceRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceAntiBruteForceRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAntiBruteForceRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAntiBruteForceRuleResponse) SetHeaders(v map[string]*string) *ModifyInstanceAntiBruteForceRuleResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceAntiBruteForceRuleResponse) SetStatusCode(v int32) *ModifyInstanceAntiBruteForceRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceAntiBruteForceRuleResponse) SetBody(v *ModifyInstanceAntiBruteForceRuleResponseBody) *ModifyInstanceAntiBruteForceRuleResponse {
	s.Body = v
	return s
}

type ModifyInterceptionRuleRequest struct {
	ClusterId     *string                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DstTarget     map[string]interface{} `json:"DstTarget,omitempty" xml:"DstTarget,omitempty"`
	InterceptType *int32                 `json:"InterceptType,omitempty" xml:"InterceptType,omitempty"`
	OrderIndex    *int64                 `json:"OrderIndex,omitempty" xml:"OrderIndex,omitempty"`
	RuleId        *int64                 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	RuleName      *string                `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleSwitch    *int32                 `json:"RuleSwitch,omitempty" xml:"RuleSwitch,omitempty"`
	SrcTarget     map[string]interface{} `json:"SrcTarget,omitempty" xml:"SrcTarget,omitempty"`
}

func (s ModifyInterceptionRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInterceptionRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifyInterceptionRuleRequest) SetClusterId(v string) *ModifyInterceptionRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyInterceptionRuleRequest) SetDstTarget(v map[string]interface{}) *ModifyInterceptionRuleRequest {
	s.DstTarget = v
	return s
}

func (s *ModifyInterceptionRuleRequest) SetInterceptType(v int32) *ModifyInterceptionRuleRequest {
	s.InterceptType = &v
	return s
}

func (s *ModifyInterceptionRuleRequest) SetOrderIndex(v int64) *ModifyInterceptionRuleRequest {
	s.OrderIndex = &v
	return s
}

func (s *ModifyInterceptionRuleRequest) SetRuleId(v int64) *ModifyInterceptionRuleRequest {
	s.RuleId = &v
	return s
}

func (s *ModifyInterceptionRuleRequest) SetRuleName(v string) *ModifyInterceptionRuleRequest {
	s.RuleName = &v
	return s
}

func (s *ModifyInterceptionRuleRequest) SetRuleSwitch(v int32) *ModifyInterceptionRuleRequest {
	s.RuleSwitch = &v
	return s
}

func (s *ModifyInterceptionRuleRequest) SetSrcTarget(v map[string]interface{}) *ModifyInterceptionRuleRequest {
	s.SrcTarget = v
	return s
}

type ModifyInterceptionRuleShrinkRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DstTargetShrink *string `json:"DstTarget,omitempty" xml:"DstTarget,omitempty"`
	InterceptType   *int32  `json:"InterceptType,omitempty" xml:"InterceptType,omitempty"`
	OrderIndex      *int64  `json:"OrderIndex,omitempty" xml:"OrderIndex,omitempty"`
	RuleId          *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	RuleName        *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleSwitch      *int32  `json:"RuleSwitch,omitempty" xml:"RuleSwitch,omitempty"`
	SrcTargetShrink *string `json:"SrcTarget,omitempty" xml:"SrcTarget,omitempty"`
}

func (s ModifyInterceptionRuleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInterceptionRuleShrinkRequest) GoString() string {
	return s.String()
}

func (s *ModifyInterceptionRuleShrinkRequest) SetClusterId(v string) *ModifyInterceptionRuleShrinkRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyInterceptionRuleShrinkRequest) SetDstTargetShrink(v string) *ModifyInterceptionRuleShrinkRequest {
	s.DstTargetShrink = &v
	return s
}

func (s *ModifyInterceptionRuleShrinkRequest) SetInterceptType(v int32) *ModifyInterceptionRuleShrinkRequest {
	s.InterceptType = &v
	return s
}

func (s *ModifyInterceptionRuleShrinkRequest) SetOrderIndex(v int64) *ModifyInterceptionRuleShrinkRequest {
	s.OrderIndex = &v
	return s
}

func (s *ModifyInterceptionRuleShrinkRequest) SetRuleId(v int64) *ModifyInterceptionRuleShrinkRequest {
	s.RuleId = &v
	return s
}

func (s *ModifyInterceptionRuleShrinkRequest) SetRuleName(v string) *ModifyInterceptionRuleShrinkRequest {
	s.RuleName = &v
	return s
}

func (s *ModifyInterceptionRuleShrinkRequest) SetRuleSwitch(v int32) *ModifyInterceptionRuleShrinkRequest {
	s.RuleSwitch = &v
	return s
}

func (s *ModifyInterceptionRuleShrinkRequest) SetSrcTargetShrink(v string) *ModifyInterceptionRuleShrinkRequest {
	s.SrcTargetShrink = &v
	return s
}

type ModifyInterceptionRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInterceptionRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInterceptionRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInterceptionRuleResponseBody) SetRequestId(v string) *ModifyInterceptionRuleResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInterceptionRuleResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyInterceptionRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInterceptionRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInterceptionRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifyInterceptionRuleResponse) SetHeaders(v map[string]*string) *ModifyInterceptionRuleResponse {
	s.Headers = v
	return s
}

func (s *ModifyInterceptionRuleResponse) SetStatusCode(v int32) *ModifyInterceptionRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInterceptionRuleResponse) SetBody(v *ModifyInterceptionRuleResponseBody) *ModifyInterceptionRuleResponse {
	s.Body = v
	return s
}

type ModifyInterceptionRuleSwitchRequest struct {
	ClusterId  *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RuleIds    *string `json:"RuleIds,omitempty" xml:"RuleIds,omitempty"`
	RuleSwitch *int32  `json:"RuleSwitch,omitempty" xml:"RuleSwitch,omitempty"`
}

func (s ModifyInterceptionRuleSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInterceptionRuleSwitchRequest) GoString() string {
	return s.String()
}

func (s *ModifyInterceptionRuleSwitchRequest) SetClusterId(v string) *ModifyInterceptionRuleSwitchRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyInterceptionRuleSwitchRequest) SetRuleIds(v string) *ModifyInterceptionRuleSwitchRequest {
	s.RuleIds = &v
	return s
}

func (s *ModifyInterceptionRuleSwitchRequest) SetRuleSwitch(v int32) *ModifyInterceptionRuleSwitchRequest {
	s.RuleSwitch = &v
	return s
}

type ModifyInterceptionRuleSwitchResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInterceptionRuleSwitchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInterceptionRuleSwitchResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInterceptionRuleSwitchResponseBody) SetRequestId(v string) *ModifyInterceptionRuleSwitchResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInterceptionRuleSwitchResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyInterceptionRuleSwitchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInterceptionRuleSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInterceptionRuleSwitchResponse) GoString() string {
	return s.String()
}

func (s *ModifyInterceptionRuleSwitchResponse) SetHeaders(v map[string]*string) *ModifyInterceptionRuleSwitchResponse {
	s.Headers = v
	return s
}

func (s *ModifyInterceptionRuleSwitchResponse) SetStatusCode(v int32) *ModifyInterceptionRuleSwitchResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInterceptionRuleSwitchResponse) SetBody(v *ModifyInterceptionRuleSwitchResponseBody) *ModifyInterceptionRuleSwitchResponse {
	s.Body = v
	return s
}

type ModifyInterceptionTargetRequest struct {
	AppName    *string   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ImageList  []*string `json:"ImageList,omitempty" xml:"ImageList,omitempty" type:"Repeated"`
	Namespace  *string   `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	TagList    []*string `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	TargetId   *int64    `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	TargetName *string   `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
	TargetType *string   `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s ModifyInterceptionTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInterceptionTargetRequest) GoString() string {
	return s.String()
}

func (s *ModifyInterceptionTargetRequest) SetAppName(v string) *ModifyInterceptionTargetRequest {
	s.AppName = &v
	return s
}

func (s *ModifyInterceptionTargetRequest) SetImageList(v []*string) *ModifyInterceptionTargetRequest {
	s.ImageList = v
	return s
}

func (s *ModifyInterceptionTargetRequest) SetNamespace(v string) *ModifyInterceptionTargetRequest {
	s.Namespace = &v
	return s
}

func (s *ModifyInterceptionTargetRequest) SetTagList(v []*string) *ModifyInterceptionTargetRequest {
	s.TagList = v
	return s
}

func (s *ModifyInterceptionTargetRequest) SetTargetId(v int64) *ModifyInterceptionTargetRequest {
	s.TargetId = &v
	return s
}

func (s *ModifyInterceptionTargetRequest) SetTargetName(v string) *ModifyInterceptionTargetRequest {
	s.TargetName = &v
	return s
}

func (s *ModifyInterceptionTargetRequest) SetTargetType(v string) *ModifyInterceptionTargetRequest {
	s.TargetType = &v
	return s
}

type ModifyInterceptionTargetResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ModifyInterceptionTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInterceptionTargetResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInterceptionTargetResponseBody) SetRequestId(v string) *ModifyInterceptionTargetResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyInterceptionTargetResponseBody) SetResult(v bool) *ModifyInterceptionTargetResponseBody {
	s.Result = &v
	return s
}

type ModifyInterceptionTargetResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyInterceptionTargetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInterceptionTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInterceptionTargetResponse) GoString() string {
	return s.String()
}

func (s *ModifyInterceptionTargetResponse) SetHeaders(v map[string]*string) *ModifyInterceptionTargetResponse {
	s.Headers = v
	return s
}

func (s *ModifyInterceptionTargetResponse) SetStatusCode(v int32) *ModifyInterceptionTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInterceptionTargetResponse) SetBody(v *ModifyInterceptionTargetResponseBody) *ModifyInterceptionTargetResponse {
	s.Body = v
	return s
}

type ModifyLogMetaStatusRequest struct {
	From     *string `json:"From,omitempty" xml:"From,omitempty"`
	LogStore *string `json:"LogStore,omitempty" xml:"LogStore,omitempty"`
	Project  *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyLogMetaStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLogMetaStatusRequest) GoString() string {
	return s.String()
}

func (s *ModifyLogMetaStatusRequest) SetFrom(v string) *ModifyLogMetaStatusRequest {
	s.From = &v
	return s
}

func (s *ModifyLogMetaStatusRequest) SetLogStore(v string) *ModifyLogMetaStatusRequest {
	s.LogStore = &v
	return s
}

func (s *ModifyLogMetaStatusRequest) SetProject(v string) *ModifyLogMetaStatusRequest {
	s.Project = &v
	return s
}

func (s *ModifyLogMetaStatusRequest) SetStatus(v string) *ModifyLogMetaStatusRequest {
	s.Status = &v
	return s
}

type ModifyLogMetaStatusResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyLogMetaStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyLogMetaStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyLogMetaStatusResponseBody) SetRequestId(v string) *ModifyLogMetaStatusResponseBody {
	s.RequestId = &v
	return s
}

type ModifyLogMetaStatusResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyLogMetaStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyLogMetaStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLogMetaStatusResponse) GoString() string {
	return s.String()
}

func (s *ModifyLogMetaStatusResponse) SetHeaders(v map[string]*string) *ModifyLogMetaStatusResponse {
	s.Headers = v
	return s
}

func (s *ModifyLogMetaStatusResponse) SetStatusCode(v int32) *ModifyLogMetaStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyLogMetaStatusResponse) SetBody(v *ModifyLogMetaStatusResponseBody) *ModifyLogMetaStatusResponse {
	s.Body = v
	return s
}

type ModifyLoginBaseConfigRequest struct {
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyLoginBaseConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLoginBaseConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyLoginBaseConfigRequest) SetConfig(v string) *ModifyLoginBaseConfigRequest {
	s.Config = &v
	return s
}

func (s *ModifyLoginBaseConfigRequest) SetTarget(v string) *ModifyLoginBaseConfigRequest {
	s.Target = &v
	return s
}

func (s *ModifyLoginBaseConfigRequest) SetType(v string) *ModifyLoginBaseConfigRequest {
	s.Type = &v
	return s
}

type ModifyLoginBaseConfigResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyLoginBaseConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyLoginBaseConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyLoginBaseConfigResponseBody) SetCode(v string) *ModifyLoginBaseConfigResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyLoginBaseConfigResponseBody) SetMessage(v string) *ModifyLoginBaseConfigResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyLoginBaseConfigResponseBody) SetRequestId(v string) *ModifyLoginBaseConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyLoginBaseConfigResponseBody) SetSuccess(v bool) *ModifyLoginBaseConfigResponseBody {
	s.Success = &v
	return s
}

type ModifyLoginBaseConfigResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyLoginBaseConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyLoginBaseConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLoginBaseConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyLoginBaseConfigResponse) SetHeaders(v map[string]*string) *ModifyLoginBaseConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyLoginBaseConfigResponse) SetStatusCode(v int32) *ModifyLoginBaseConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyLoginBaseConfigResponse) SetBody(v *ModifyLoginBaseConfigResponseBody) *ModifyLoginBaseConfigResponse {
	s.Body = v
	return s
}

type ModifyLoginSwitchConfigRequest struct {
	// The type of the alert that you want to enable or disable. Valid values:
	//
	// *   **login\_common_ip**: alerts for unapproved logon IP addresses
	// *   **login\_common_time**: alerts for unapproved logon time ranges
	// *   **login\_common_account**: alerts for unapproved logon accounts
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// Specifies whether to enable the logon security settings. Valid values:
	//
	// *   **0**: disables the logon security settings
	// *   **1**: enables the logon security settings
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyLoginSwitchConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLoginSwitchConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyLoginSwitchConfigRequest) SetItem(v string) *ModifyLoginSwitchConfigRequest {
	s.Item = &v
	return s
}

func (s *ModifyLoginSwitchConfigRequest) SetStatus(v int32) *ModifyLoginSwitchConfigRequest {
	s.Status = &v
	return s
}

type ModifyLoginSwitchConfigResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyLoginSwitchConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyLoginSwitchConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyLoginSwitchConfigResponseBody) SetRequestId(v string) *ModifyLoginSwitchConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyLoginSwitchConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyLoginSwitchConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyLoginSwitchConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLoginSwitchConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyLoginSwitchConfigResponse) SetHeaders(v map[string]*string) *ModifyLoginSwitchConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyLoginSwitchConfigResponse) SetStatusCode(v int32) *ModifyLoginSwitchConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyLoginSwitchConfigResponse) SetBody(v *ModifyLoginSwitchConfigResponseBody) *ModifyLoginSwitchConfigResponse {
	s.Body = v
	return s
}

type ModifyNoticeConfigRequest struct {
	Project   *string `json:"Project,omitempty" xml:"Project,omitempty"`
	Route     *int32  `json:"Route,omitempty" xml:"Route,omitempty"`
	SourceIp  *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	TimeLimit *int32  `json:"TimeLimit,omitempty" xml:"TimeLimit,omitempty"`
}

func (s ModifyNoticeConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyNoticeConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyNoticeConfigRequest) SetProject(v string) *ModifyNoticeConfigRequest {
	s.Project = &v
	return s
}

func (s *ModifyNoticeConfigRequest) SetRoute(v int32) *ModifyNoticeConfigRequest {
	s.Route = &v
	return s
}

func (s *ModifyNoticeConfigRequest) SetSourceIp(v string) *ModifyNoticeConfigRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyNoticeConfigRequest) SetTimeLimit(v int32) *ModifyNoticeConfigRequest {
	s.TimeLimit = &v
	return s
}

type ModifyNoticeConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyNoticeConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyNoticeConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyNoticeConfigResponseBody) SetRequestId(v string) *ModifyNoticeConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyNoticeConfigResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyNoticeConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyNoticeConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyNoticeConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyNoticeConfigResponse) SetHeaders(v map[string]*string) *ModifyNoticeConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyNoticeConfigResponse) SetStatusCode(v int32) *ModifyNoticeConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyNoticeConfigResponse) SetBody(v *ModifyNoticeConfigResponseBody) *ModifyNoticeConfigResponse {
	s.Body = v
	return s
}

type ModifyOpenLogShipperRequest struct {
	// The ID of the request source. The default value is **aegis**. Valid values:
	// - **aegis**: Server Guard
	// - **sas**: Security Center
	//
	// > If you use Server Guard, set the value to **aegis**. If you use Security Center, set the value to **sas**.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
}

func (s ModifyOpenLogShipperRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyOpenLogShipperRequest) GoString() string {
	return s.String()
}

func (s *ModifyOpenLogShipperRequest) SetFrom(v string) *ModifyOpenLogShipperRequest {
	s.From = &v
	return s
}

type ModifyOpenLogShipperResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyOpenLogShipperResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyOpenLogShipperResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyOpenLogShipperResponseBody) SetRequestId(v string) *ModifyOpenLogShipperResponseBody {
	s.RequestId = &v
	return s
}

type ModifyOpenLogShipperResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyOpenLogShipperResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyOpenLogShipperResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyOpenLogShipperResponse) GoString() string {
	return s.String()
}

func (s *ModifyOpenLogShipperResponse) SetHeaders(v map[string]*string) *ModifyOpenLogShipperResponse {
	s.Headers = v
	return s
}

func (s *ModifyOpenLogShipperResponse) SetStatusCode(v int32) *ModifyOpenLogShipperResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyOpenLogShipperResponse) SetBody(v *ModifyOpenLogShipperResponseBody) *ModifyOpenLogShipperResponse {
	s.Body = v
	return s
}

type ModifyOperateVulRequest struct {
	// The details of the vulnerability. The value of this parameter is in the JSON format and contains the following fields:
	//
	// *   **name**: the name of the vulnerability.
	//
	// *   **uuid**: the UUID of the server on which the vulnerability is detected.
	//
	// *   **tag**: the tag that is added to the vulnerability. Valid values:
	//
	//     *   **oval**: Linux software vulnerability
	//     *   **system**: Windows system vulnerability
	//     *   **cms**: Web-CMS vulnerability
	//
	// >  You can call the [DescribeVulList](~~DescribeVulList~~) operation to query the tags that are added to vulnerabilities of other types.
	//
	// *   **isFront**: specifies whether a pre-patch is required to fix the Windows system vulnerability. This field is required only for Windows system vulnerabilities. Valid values:
	//
	//     *   **0**: no
	//     *   **1**: yes
	//
	// >  You can fix multiple vulnerabilities at a time. Separate the details of multiple vulnerabilities with commas (,). You can call the [DescribeVulLIst](~~DescribeVulList~~) operation to query the details of vulnerabilities.
	Info *string `json:"Info,omitempty" xml:"Info,omitempty"`
	// The operation that you want to perform on the vulnerability. Valid values:
	//
	// *   **vul_fix**: fixes the vulnerability.
	// *   **vul_verify**: verifies the vulnerability.
	// *   **vul_ignore**: ignores the vulnerability.
	// *   **vul\_undo_ignore**: cancels ignoring the vulnerability.
	// *   **vul_delete**: deletes the vulnerability.
	OperateType *string `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	// The reason why the vulnerability is **ignored**.
	//
	// >  This parameter is required only when you set **OperateType** to **vul_ignore**.
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	// The type of the vulnerability. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	// *   **cms**: Web-CMS vulnerability
	// *   **emg**: urgent vulnerability
	// *   **app**: application vulnerability
	// *   **sca**: vulnerability that is detected based on software component analysis
	//
	// >  You cannot fix the urgent vulnerabilities, application vulnerabilities, or vulnerabilities that are detected based on software component analysis.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyOperateVulRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyOperateVulRequest) GoString() string {
	return s.String()
}

func (s *ModifyOperateVulRequest) SetInfo(v string) *ModifyOperateVulRequest {
	s.Info = &v
	return s
}

func (s *ModifyOperateVulRequest) SetOperateType(v string) *ModifyOperateVulRequest {
	s.OperateType = &v
	return s
}

func (s *ModifyOperateVulRequest) SetReason(v string) *ModifyOperateVulRequest {
	s.Reason = &v
	return s
}

func (s *ModifyOperateVulRequest) SetType(v string) *ModifyOperateVulRequest {
	s.Type = &v
	return s
}

type ModifyOperateVulResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyOperateVulResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyOperateVulResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyOperateVulResponseBody) SetRequestId(v string) *ModifyOperateVulResponseBody {
	s.RequestId = &v
	return s
}

type ModifyOperateVulResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyOperateVulResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyOperateVulResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyOperateVulResponse) GoString() string {
	return s.String()
}

func (s *ModifyOperateVulResponse) SetHeaders(v map[string]*string) *ModifyOperateVulResponse {
	s.Headers = v
	return s
}

func (s *ModifyOperateVulResponse) SetStatusCode(v int32) *ModifyOperateVulResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyOperateVulResponse) SetBody(v *ModifyOperateVulResponseBody) *ModifyOperateVulResponse {
	s.Body = v
	return s
}

type ModifyPropertyScheduleConfigRequest struct {
	// The new collection frequency of asset fingerprints. Valid values:
	//
	// *   **0**: disabled, which indicates that the asset fingerprints are not automatically or periodically collected.
	// *   **1**: collects asset fingerprints once an hour.
	// *   **3**: collects asset fingerprints once every 3 hours.
	// *   **12**: collects asset fingerprints once every 12 hours.
	// *   **24**: collects asset fingerprints once a day.
	// *   **168**: collects asset fingerprints once every 7 days.
	ScheduleTime *string `json:"ScheduleTime,omitempty" xml:"ScheduleTime,omitempty"`
	// The type of the asset fingerprints for which you want to modify the collection frequency. Valid values:
	//
	// *   **scheduler\_port_period**: listening port
	// *   **scheduler\_process_period**: running process
	// *   **scheduler\_account_period**: account
	// *   **scheduler\_software_period**: software
	// *   **scheduler\_cron_period**: scheduled task
	// *   **scheduler\_sca_period**: middleware, database, or web service
	// *   **scheduler\_autorun_period**: startup item
	// *   **scheduler\_lkm_period**: kernel module
	// *   **scheduler\_sca\_proxy_period**: website
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyPropertyScheduleConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPropertyScheduleConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyPropertyScheduleConfigRequest) SetScheduleTime(v string) *ModifyPropertyScheduleConfigRequest {
	s.ScheduleTime = &v
	return s
}

func (s *ModifyPropertyScheduleConfigRequest) SetType(v string) *ModifyPropertyScheduleConfigRequest {
	s.Type = &v
	return s
}

type ModifyPropertyScheduleConfigResponseBody struct {
	// Indicates whether the collection frequency of asset fingerprints is modified. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	ModifyResult *bool `json:"ModifyResult,omitempty" xml:"ModifyResult,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyPropertyScheduleConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPropertyScheduleConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPropertyScheduleConfigResponseBody) SetModifyResult(v bool) *ModifyPropertyScheduleConfigResponseBody {
	s.ModifyResult = &v
	return s
}

func (s *ModifyPropertyScheduleConfigResponseBody) SetRequestId(v string) *ModifyPropertyScheduleConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyPropertyScheduleConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyPropertyScheduleConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyPropertyScheduleConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPropertyScheduleConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyPropertyScheduleConfigResponse) SetHeaders(v map[string]*string) *ModifyPropertyScheduleConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyPropertyScheduleConfigResponse) SetStatusCode(v int32) *ModifyPropertyScheduleConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPropertyScheduleConfigResponse) SetBody(v *ModifyPropertyScheduleConfigResponseBody) *ModifyPropertyScheduleConfigResponse {
	s.Body = v
	return s
}

type ModifyPushAllTaskRequest struct {
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The check items. Separate multiple check items with commas (,). Valid values:
	//
	// *   **OVAL_ENTITY**: Common Vulnerabilities and Exposures (CVE) vulnerabilities
	// *   **CMS**: Web-CMS vulnerabilities
	// *   **SYSVUL**: Windows system vulnerabilities
	// *   **SCA**: application vulnerabilities
	// *   **HEALTH_CHECK**: baselines
	// *   **WEBSHELL**: webshells
	// *   **PROC_SNAPSHOT**: processes
	// *   **PORT_SNAPSHOT**: ports
	// *   **ACCOUNT_SNAPSHOT**: accounts
	// *   **SOFTWARE_SNAPSHOT**: software assets
	// *   **SCA_SNAPSHOT**: middleware
	Tasks *string `json:"Tasks,omitempty" xml:"Tasks,omitempty"`
	// The UUIDs of servers on which you want to perform security check tasks. Separate multiple UUIDs with commas (,).
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s ModifyPushAllTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPushAllTaskRequest) GoString() string {
	return s.String()
}

func (s *ModifyPushAllTaskRequest) SetSourceIp(v string) *ModifyPushAllTaskRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyPushAllTaskRequest) SetTasks(v string) *ModifyPushAllTaskRequest {
	s.Tasks = &v
	return s
}

func (s *ModifyPushAllTaskRequest) SetUuids(v string) *ModifyPushAllTaskRequest {
	s.Uuids = &v
	return s
}

type ModifyPushAllTaskResponseBody struct {
	// The results of security check tasks.
	PushTaskRsp *ModifyPushAllTaskResponseBodyPushTaskRsp `json:"PushTaskRsp,omitempty" xml:"PushTaskRsp,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyPushAllTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPushAllTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPushAllTaskResponseBody) SetPushTaskRsp(v *ModifyPushAllTaskResponseBodyPushTaskRsp) *ModifyPushAllTaskResponseBody {
	s.PushTaskRsp = v
	return s
}

func (s *ModifyPushAllTaskResponseBody) SetRequestId(v string) *ModifyPushAllTaskResponseBody {
	s.RequestId = &v
	return s
}

type ModifyPushAllTaskResponseBodyPushTaskRsp struct {
	// An array consisting of the servers on which security check tasks failed.
	PushTaskResultList []*ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList `json:"PushTaskResultList,omitempty" xml:"PushTaskResultList,omitempty" type:"Repeated"`
}

func (s ModifyPushAllTaskResponseBodyPushTaskRsp) String() string {
	return tea.Prettify(s)
}

func (s ModifyPushAllTaskResponseBodyPushTaskRsp) GoString() string {
	return s.String()
}

func (s *ModifyPushAllTaskResponseBodyPushTaskRsp) SetPushTaskResultList(v []*ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList) *ModifyPushAllTaskResponseBodyPushTaskRsp {
	s.PushTaskResultList = v
	return s
}

type ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList struct {
	// The ID of the server group to which the server belongs.
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the server.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the server.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The IP address of the server.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The message that describes the security check failure.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Indicates whether the Security Center agent is online. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	//
	// >  If the Security Center agent of the server is offline, Security Center does not protect the server.
	Online *bool `json:"Online,omitempty" xml:"Online,omitempty"`
	// The operating system version of the server.
	OsVersion *string `json:"OsVersion,omitempty" xml:"OsVersion,omitempty"`
	// The region in which the server resides.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// Indicates whether the security check task is successful. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList) String() string {
	return tea.Prettify(s)
}

func (s ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList) GoString() string {
	return s.String()
}

func (s *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList) SetGroupId(v int64) *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList {
	s.GroupId = &v
	return s
}

func (s *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList) SetInstanceId(v string) *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList {
	s.InstanceId = &v
	return s
}

func (s *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList) SetInstanceName(v string) *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList {
	s.InstanceName = &v
	return s
}

func (s *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList) SetIp(v string) *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList {
	s.Ip = &v
	return s
}

func (s *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList) SetMessage(v string) *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList {
	s.Message = &v
	return s
}

func (s *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList) SetOnline(v bool) *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList {
	s.Online = &v
	return s
}

func (s *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList) SetOsVersion(v string) *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList {
	s.OsVersion = &v
	return s
}

func (s *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList) SetRegion(v string) *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList {
	s.Region = &v
	return s
}

func (s *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList) SetSuccess(v bool) *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList {
	s.Success = &v
	return s
}

func (s *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList) SetUuid(v string) *ModifyPushAllTaskResponseBodyPushTaskRspPushTaskResultList {
	s.Uuid = &v
	return s
}

type ModifyPushAllTaskResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyPushAllTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyPushAllTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPushAllTaskResponse) GoString() string {
	return s.String()
}

func (s *ModifyPushAllTaskResponse) SetHeaders(v map[string]*string) *ModifyPushAllTaskResponse {
	s.Headers = v
	return s
}

func (s *ModifyPushAllTaskResponse) SetStatusCode(v int32) *ModifyPushAllTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPushAllTaskResponse) SetBody(v *ModifyPushAllTaskResponseBody) *ModifyPushAllTaskResponse {
	s.Body = v
	return s
}

type ModifyRiskCheckStatusRequest struct {
	// The ID of the check item.
	ItemId *int64 `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	// The language of the content within the request and the response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The method to handle the check item. Valid values:
	//
	// *   **ignored**: ignores the check item.
	// *   **reset**: cancels ignoring the check item.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the check task to which the check item belongs.
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ModifyRiskCheckStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRiskCheckStatusRequest) GoString() string {
	return s.String()
}

func (s *ModifyRiskCheckStatusRequest) SetItemId(v int64) *ModifyRiskCheckStatusRequest {
	s.ItemId = &v
	return s
}

func (s *ModifyRiskCheckStatusRequest) SetLang(v string) *ModifyRiskCheckStatusRequest {
	s.Lang = &v
	return s
}

func (s *ModifyRiskCheckStatusRequest) SetResourceOwnerId(v int64) *ModifyRiskCheckStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyRiskCheckStatusRequest) SetSourceIp(v string) *ModifyRiskCheckStatusRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyRiskCheckStatusRequest) SetStatus(v string) *ModifyRiskCheckStatusRequest {
	s.Status = &v
	return s
}

func (s *ModifyRiskCheckStatusRequest) SetTaskId(v int64) *ModifyRiskCheckStatusRequest {
	s.TaskId = &v
	return s
}

type ModifyRiskCheckStatusResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyRiskCheckStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyRiskCheckStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyRiskCheckStatusResponseBody) SetRequestId(v string) *ModifyRiskCheckStatusResponseBody {
	s.RequestId = &v
	return s
}

type ModifyRiskCheckStatusResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyRiskCheckStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyRiskCheckStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRiskCheckStatusResponse) GoString() string {
	return s.String()
}

func (s *ModifyRiskCheckStatusResponse) SetHeaders(v map[string]*string) *ModifyRiskCheckStatusResponse {
	s.Headers = v
	return s
}

func (s *ModifyRiskCheckStatusResponse) SetStatusCode(v int32) *ModifyRiskCheckStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyRiskCheckStatusResponse) SetBody(v *ModifyRiskCheckStatusResponseBody) *ModifyRiskCheckStatusResponse {
	s.Body = v
	return s
}

type ModifyRiskSingleResultStatusRequest struct {
	// The IDs of the affected assets.
	Ids []*string `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// The language of the content within the request and response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The method to handle the risk item. Valid values:
	//
	// *   **ignored**: ignores the risk item.
	// *   **failed**: cancels the ignore operation on the risk item.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the check task to which the affected asset belongs.
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ModifyRiskSingleResultStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRiskSingleResultStatusRequest) GoString() string {
	return s.String()
}

func (s *ModifyRiskSingleResultStatusRequest) SetIds(v []*string) *ModifyRiskSingleResultStatusRequest {
	s.Ids = v
	return s
}

func (s *ModifyRiskSingleResultStatusRequest) SetLang(v string) *ModifyRiskSingleResultStatusRequest {
	s.Lang = &v
	return s
}

func (s *ModifyRiskSingleResultStatusRequest) SetResourceOwnerId(v int64) *ModifyRiskSingleResultStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyRiskSingleResultStatusRequest) SetSourceIp(v string) *ModifyRiskSingleResultStatusRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyRiskSingleResultStatusRequest) SetStatus(v string) *ModifyRiskSingleResultStatusRequest {
	s.Status = &v
	return s
}

func (s *ModifyRiskSingleResultStatusRequest) SetTaskId(v int64) *ModifyRiskSingleResultStatusRequest {
	s.TaskId = &v
	return s
}

type ModifyRiskSingleResultStatusResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyRiskSingleResultStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyRiskSingleResultStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyRiskSingleResultStatusResponseBody) SetRequestId(v string) *ModifyRiskSingleResultStatusResponseBody {
	s.RequestId = &v
	return s
}

type ModifyRiskSingleResultStatusResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyRiskSingleResultStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyRiskSingleResultStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRiskSingleResultStatusResponse) GoString() string {
	return s.String()
}

func (s *ModifyRiskSingleResultStatusResponse) SetHeaders(v map[string]*string) *ModifyRiskSingleResultStatusResponse {
	s.Headers = v
	return s
}

func (s *ModifyRiskSingleResultStatusResponse) SetStatusCode(v int32) *ModifyRiskSingleResultStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyRiskSingleResultStatusResponse) SetBody(v *ModifyRiskSingleResultStatusResponseBody) *ModifyRiskSingleResultStatusResponse {
	s.Body = v
	return s
}

type ModifySecurityCheckScheduleConfigRequest struct {
	// The days on which the automatic configuration check runs. You can specify multiple days. Separate multiple days with commas (,). Valid values:
	//
	// *   **1**: Monday
	// *   **2**: Tuesday
	// *   **3**: Wednesday
	// *   **4**: Thursday
	// *   **5**: Friday
	// *   **6**: Saturday
	// *   **7**: Sunday
	DaysOfWeek *string `json:"DaysOfWeek,omitempty" xml:"DaysOfWeek,omitempty"`
	// The time period during which the automatic configuration check ends. Valid values:
	//
	// *   **0**: 00:00 to 06:00
	// *   **6**: 06:00 to 12:00
	// *   **12**: 12:00 to 18:00
	// *   **18**: 18:00 to 24:00
	EndTime *int32 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The time period during which the automatic configuration check starts. Valid values:
	//
	// *   **0**: 00:00 to 06:00
	// *   **6**: 06:00 to 12:00
	// *   **12**: 12:00 to 18:00
	// *   **18**: 18:00 to 24:00
	StartTime *int32 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ModifySecurityCheckScheduleConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityCheckScheduleConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityCheckScheduleConfigRequest) SetDaysOfWeek(v string) *ModifySecurityCheckScheduleConfigRequest {
	s.DaysOfWeek = &v
	return s
}

func (s *ModifySecurityCheckScheduleConfigRequest) SetEndTime(v int32) *ModifySecurityCheckScheduleConfigRequest {
	s.EndTime = &v
	return s
}

func (s *ModifySecurityCheckScheduleConfigRequest) SetLang(v string) *ModifySecurityCheckScheduleConfigRequest {
	s.Lang = &v
	return s
}

func (s *ModifySecurityCheckScheduleConfigRequest) SetResourceOwnerId(v int64) *ModifySecurityCheckScheduleConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySecurityCheckScheduleConfigRequest) SetSourceIp(v string) *ModifySecurityCheckScheduleConfigRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifySecurityCheckScheduleConfigRequest) SetStartTime(v int32) *ModifySecurityCheckScheduleConfigRequest {
	s.StartTime = &v
	return s
}

type ModifySecurityCheckScheduleConfigResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySecurityCheckScheduleConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityCheckScheduleConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySecurityCheckScheduleConfigResponseBody) SetRequestId(v string) *ModifySecurityCheckScheduleConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifySecurityCheckScheduleConfigResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySecurityCheckScheduleConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySecurityCheckScheduleConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityCheckScheduleConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityCheckScheduleConfigResponse) SetHeaders(v map[string]*string) *ModifySecurityCheckScheduleConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifySecurityCheckScheduleConfigResponse) SetStatusCode(v int32) *ModifySecurityCheckScheduleConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySecurityCheckScheduleConfigResponse) SetBody(v *ModifySecurityCheckScheduleConfigResponseBody) *ModifySecurityCheckScheduleConfigResponse {
	s.Body = v
	return s
}

type ModifySecurityEventMarkMissIndividuallyRequest struct {
	DeleteMarkMissParam *string `json:"DeleteMarkMissParam,omitempty" xml:"DeleteMarkMissParam,omitempty"`
	From                *string `json:"From,omitempty" xml:"From,omitempty"`
	InsertMarkMissParam *string `json:"InsertMarkMissParam,omitempty" xml:"InsertMarkMissParam,omitempty"`
	Lang                *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SourceIp            *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s ModifySecurityEventMarkMissIndividuallyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityEventMarkMissIndividuallyRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityEventMarkMissIndividuallyRequest) SetDeleteMarkMissParam(v string) *ModifySecurityEventMarkMissIndividuallyRequest {
	s.DeleteMarkMissParam = &v
	return s
}

func (s *ModifySecurityEventMarkMissIndividuallyRequest) SetFrom(v string) *ModifySecurityEventMarkMissIndividuallyRequest {
	s.From = &v
	return s
}

func (s *ModifySecurityEventMarkMissIndividuallyRequest) SetInsertMarkMissParam(v string) *ModifySecurityEventMarkMissIndividuallyRequest {
	s.InsertMarkMissParam = &v
	return s
}

func (s *ModifySecurityEventMarkMissIndividuallyRequest) SetLang(v string) *ModifySecurityEventMarkMissIndividuallyRequest {
	s.Lang = &v
	return s
}

func (s *ModifySecurityEventMarkMissIndividuallyRequest) SetSourceIp(v string) *ModifySecurityEventMarkMissIndividuallyRequest {
	s.SourceIp = &v
	return s
}

type ModifySecurityEventMarkMissIndividuallyResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	TimeCost       *int64  `json:"TimeCost,omitempty" xml:"TimeCost,omitempty"`
}

func (s ModifySecurityEventMarkMissIndividuallyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityEventMarkMissIndividuallyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySecurityEventMarkMissIndividuallyResponseBody) SetCode(v string) *ModifySecurityEventMarkMissIndividuallyResponseBody {
	s.Code = &v
	return s
}

func (s *ModifySecurityEventMarkMissIndividuallyResponseBody) SetHttpStatusCode(v int32) *ModifySecurityEventMarkMissIndividuallyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifySecurityEventMarkMissIndividuallyResponseBody) SetMessage(v string) *ModifySecurityEventMarkMissIndividuallyResponseBody {
	s.Message = &v
	return s
}

func (s *ModifySecurityEventMarkMissIndividuallyResponseBody) SetRequestId(v string) *ModifySecurityEventMarkMissIndividuallyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySecurityEventMarkMissIndividuallyResponseBody) SetSuccess(v bool) *ModifySecurityEventMarkMissIndividuallyResponseBody {
	s.Success = &v
	return s
}

func (s *ModifySecurityEventMarkMissIndividuallyResponseBody) SetTimeCost(v int64) *ModifySecurityEventMarkMissIndividuallyResponseBody {
	s.TimeCost = &v
	return s
}

type ModifySecurityEventMarkMissIndividuallyResponse struct {
	Headers    map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySecurityEventMarkMissIndividuallyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySecurityEventMarkMissIndividuallyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityEventMarkMissIndividuallyResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityEventMarkMissIndividuallyResponse) SetHeaders(v map[string]*string) *ModifySecurityEventMarkMissIndividuallyResponse {
	s.Headers = v
	return s
}

func (s *ModifySecurityEventMarkMissIndividuallyResponse) SetStatusCode(v int32) *ModifySecurityEventMarkMissIndividuallyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySecurityEventMarkMissIndividuallyResponse) SetBody(v *ModifySecurityEventMarkMissIndividuallyResponseBody) *ModifySecurityEventMarkMissIndividuallyResponse {
	s.Body = v
	return s
}

type ModifyStartVulScanRequest struct {
	// The types of vulnerabilities that can be detected. Valid values:
	//
	// *   **cve**: Linux software vulnerabilities
	// *   **sys**: Windows system vulnerabilities
	// *   **cms**: Web-CMS vulnerabilities
	// *   **app**: application vulnerabilities
	// *   **emg**: urgent vulnerabilities
	// *   **image**: container image vulnerabilities
	//
	// >  If you leave this parameter empty, all types of vulnerabilities can be detected.
	Types *string `json:"Types,omitempty" xml:"Types,omitempty"`
	// The UUIDs of servers.
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s ModifyStartVulScanRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStartVulScanRequest) GoString() string {
	return s.String()
}

func (s *ModifyStartVulScanRequest) SetTypes(v string) *ModifyStartVulScanRequest {
	s.Types = &v
	return s
}

func (s *ModifyStartVulScanRequest) SetUuids(v string) *ModifyStartVulScanRequest {
	s.Uuids = &v
	return s
}

type ModifyStartVulScanResponseBody struct {
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyStartVulScanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyStartVulScanResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStartVulScanResponseBody) SetRequestId(v string) *ModifyStartVulScanResponseBody {
	s.RequestId = &v
	return s
}

type ModifyStartVulScanResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyStartVulScanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyStartVulScanResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyStartVulScanResponse) GoString() string {
	return s.String()
}

func (s *ModifyStartVulScanResponse) SetHeaders(v map[string]*string) *ModifyStartVulScanResponse {
	s.Headers = v
	return s
}

func (s *ModifyStartVulScanResponse) SetStatusCode(v int32) *ModifyStartVulScanResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyStartVulScanResponse) SetBody(v *ModifyStartVulScanResponseBody) *ModifyStartVulScanResponse {
	s.Body = v
	return s
}

type ModifyStrategyRequest struct {
	// The type of the baseline check policy. Valid values:
	//
	// *   **custom**: a custom baseline check policy
	// *   **common**: a standard baseline check policy
	CustomType *string `json:"CustomType,omitempty" xml:"CustomType,omitempty"`
	// The new interval of the baseline check. Valid values:
	//
	// *   **1**: every 2 days
	// *   **3**: every 4 days
	// *   **7**: every 8 days
	// *   **30**: every 31 days
	CycleDays *string `json:"CycleDays,omitempty" xml:"CycleDays,omitempty"`
	// The new time range during which the baseline check starts. Valid values:
	//
	// *   **0**: The baseline check starts within the time range from 00:00 to 06:00.
	// *   **6**: The baseline check starts within the time range from 06:00 to 12:00.
	// *   **12**: The baseline check starts within the time range from 12:00 to 18:00.
	// *   **18**: The baseline check starts within the time range from 18:00 to 24:00.
	//
	// >  This parameter is deprecated.
	CycleStartTime *string `json:"CycleStartTime,omitempty" xml:"CycleStartTime,omitempty"`
	// The time when the baseline check based on the baseline check policy ends.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the baseline check policy.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The new name of the baseline check policy.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The custom configurations of the baseline. The value of this parameter is in the JSON format and contains the following fields:
	//
	// *   **typeName**: the name of the baseline.
	//
	// *   **checkDetails**: the details of the baseline. The value is in the JSON format.
	//
	//     *   **checkId**: the ID of the check item.
	//
	//     *   **rules**: the rule configurations. The value is in the JSON format.
	//
	//         *   **ruleId**: the ID of the rule.
	//
	//         *   **paramList**: the list of parameters in the rule. The value is in the JSON format.
	//
	//             *   **paramName**: the name of the parameter.
	//             *   **value**: the value of the parameter.
	RiskCustomParams *string `json:"RiskCustomParams,omitempty" xml:"RiskCustomParams,omitempty"`
	// The subtype of the baselines. You can call the [DescribeRiskType](~~DescribeRiskType~~) operation to query the subtypes of baselines.
	RiskSubTypeName *string `json:"RiskSubTypeName,omitempty" xml:"RiskSubTypeName,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The time when the baseline check based on the baseline check policy starts.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The method that is used to apply the baseline check policy. Valid values:
	//
	// *   **groupId**: asset groups
	// *   **uuid**: assets
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
}

func (s ModifyStrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStrategyRequest) GoString() string {
	return s.String()
}

func (s *ModifyStrategyRequest) SetCustomType(v string) *ModifyStrategyRequest {
	s.CustomType = &v
	return s
}

func (s *ModifyStrategyRequest) SetCycleDays(v string) *ModifyStrategyRequest {
	s.CycleDays = &v
	return s
}

func (s *ModifyStrategyRequest) SetCycleStartTime(v string) *ModifyStrategyRequest {
	s.CycleStartTime = &v
	return s
}

func (s *ModifyStrategyRequest) SetEndTime(v string) *ModifyStrategyRequest {
	s.EndTime = &v
	return s
}

func (s *ModifyStrategyRequest) SetId(v string) *ModifyStrategyRequest {
	s.Id = &v
	return s
}

func (s *ModifyStrategyRequest) SetName(v string) *ModifyStrategyRequest {
	s.Name = &v
	return s
}

func (s *ModifyStrategyRequest) SetRiskCustomParams(v string) *ModifyStrategyRequest {
	s.RiskCustomParams = &v
	return s
}

func (s *ModifyStrategyRequest) SetRiskSubTypeName(v string) *ModifyStrategyRequest {
	s.RiskSubTypeName = &v
	return s
}

func (s *ModifyStrategyRequest) SetSourceIp(v string) *ModifyStrategyRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyStrategyRequest) SetStartTime(v string) *ModifyStrategyRequest {
	s.StartTime = &v
	return s
}

func (s *ModifyStrategyRequest) SetTargetType(v string) *ModifyStrategyRequest {
	s.TargetType = &v
	return s
}

type ModifyStrategyResponseBody struct {
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result returned.
	Result *ModifyStrategyResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyStrategyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyStrategyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStrategyResponseBody) SetHttpStatusCode(v int32) *ModifyStrategyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyStrategyResponseBody) SetRequestId(v string) *ModifyStrategyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyStrategyResponseBody) SetResult(v *ModifyStrategyResponseBodyResult) *ModifyStrategyResponseBody {
	s.Result = v
	return s
}

func (s *ModifyStrategyResponseBody) SetSuccess(v bool) *ModifyStrategyResponseBody {
	s.Success = &v
	return s
}

type ModifyStrategyResponseBodyResult struct {
	// The ID of the baseline check policy.
	StrategyId *int32 `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
}

func (s ModifyStrategyResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ModifyStrategyResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ModifyStrategyResponseBodyResult) SetStrategyId(v int32) *ModifyStrategyResponseBodyResult {
	s.StrategyId = &v
	return s
}

type ModifyStrategyResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyStrategyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyStrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyStrategyResponse) GoString() string {
	return s.String()
}

func (s *ModifyStrategyResponse) SetHeaders(v map[string]*string) *ModifyStrategyResponse {
	s.Headers = v
	return s
}

func (s *ModifyStrategyResponse) SetStatusCode(v int32) *ModifyStrategyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyStrategyResponse) SetBody(v *ModifyStrategyResponseBody) *ModifyStrategyResponse {
	s.Body = v
	return s
}

type ModifyStrategyTargetRequest struct {
	// The ID of the baseline check policy. The ID is returned after the policy is created. The value of this parameter is in the JSON format and contains the following field:
	//
	// *   **strategyId**: the ID of the policy
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The information about the asset group to which the policy is applied. The value of this parameter is in the JSON format and contains the following fields:
	//
	// *   **TargetType**: the type of the asset to which the policy is applied. Set the value to **groupId**, which indicates that the policy is applied to an asset group.
	//
	// *   **BindUuidCount**: the number of servers to which the policy is applied.
	//
	// *   **Target**: the ID of the asset group.
	//
	// *   **Flag**: the operation that you want to perform on the asset group. Valid values:
	//
	//     *   **del**: removes the asset group from the policy.
	//     *   **add**: adds the asset group to the policy.
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The configuration type. Set the value to **hc_strategy**.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyStrategyTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyStrategyTargetRequest) GoString() string {
	return s.String()
}

func (s *ModifyStrategyTargetRequest) SetConfig(v string) *ModifyStrategyTargetRequest {
	s.Config = &v
	return s
}

func (s *ModifyStrategyTargetRequest) SetSourceIp(v string) *ModifyStrategyTargetRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyStrategyTargetRequest) SetTarget(v string) *ModifyStrategyTargetRequest {
	s.Target = &v
	return s
}

func (s *ModifyStrategyTargetRequest) SetType(v string) *ModifyStrategyTargetRequest {
	s.Type = &v
	return s
}

type ModifyStrategyTargetResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyStrategyTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyStrategyTargetResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyStrategyTargetResponseBody) SetRequestId(v string) *ModifyStrategyTargetResponseBody {
	s.RequestId = &v
	return s
}

type ModifyStrategyTargetResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyStrategyTargetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyStrategyTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyStrategyTargetResponse) GoString() string {
	return s.String()
}

func (s *ModifyStrategyTargetResponse) SetHeaders(v map[string]*string) *ModifyStrategyTargetResponse {
	s.Headers = v
	return s
}

func (s *ModifyStrategyTargetResponse) SetStatusCode(v int32) *ModifyStrategyTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyStrategyTargetResponse) SetBody(v *ModifyStrategyTargetResponseBody) *ModifyStrategyTargetResponse {
	s.Body = v
	return s
}

type ModifyTagWithUuidRequest struct {
	MachineTypes *string `json:"MachineTypes,omitempty" xml:"MachineTypes,omitempty"`
	TagId        *string `json:"TagId,omitempty" xml:"TagId,omitempty"`
	TagList      *string `json:"TagList,omitempty" xml:"TagList,omitempty"`
	UuidList     *string `json:"UuidList,omitempty" xml:"UuidList,omitempty"`
}

func (s ModifyTagWithUuidRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTagWithUuidRequest) GoString() string {
	return s.String()
}

func (s *ModifyTagWithUuidRequest) SetMachineTypes(v string) *ModifyTagWithUuidRequest {
	s.MachineTypes = &v
	return s
}

func (s *ModifyTagWithUuidRequest) SetTagId(v string) *ModifyTagWithUuidRequest {
	s.TagId = &v
	return s
}

func (s *ModifyTagWithUuidRequest) SetTagList(v string) *ModifyTagWithUuidRequest {
	s.TagList = &v
	return s
}

func (s *ModifyTagWithUuidRequest) SetUuidList(v string) *ModifyTagWithUuidRequest {
	s.UuidList = &v
	return s
}

type ModifyTagWithUuidResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyTagWithUuidResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTagWithUuidResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTagWithUuidResponseBody) SetRequestId(v string) *ModifyTagWithUuidResponseBody {
	s.RequestId = &v
	return s
}

type ModifyTagWithUuidResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyTagWithUuidResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyTagWithUuidResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTagWithUuidResponse) GoString() string {
	return s.String()
}

func (s *ModifyTagWithUuidResponse) SetHeaders(v map[string]*string) *ModifyTagWithUuidResponse {
	s.Headers = v
	return s
}

func (s *ModifyTagWithUuidResponse) SetStatusCode(v int32) *ModifyTagWithUuidResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTagWithUuidResponse) SetBody(v *ModifyTagWithUuidResponseBody) *ModifyTagWithUuidResponse {
	s.Body = v
	return s
}

type ModifyUniBackupPolicyRequest struct {
	AccountName     *string                `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	AccountPassword *string                `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	FullPlan        map[string]interface{} `json:"FullPlan,omitempty" xml:"FullPlan,omitempty"`
	IncPlan         map[string]interface{} `json:"IncPlan,omitempty" xml:"IncPlan,omitempty"`
	PolicyId        *int64                 `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	PolicyName      *string                `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	PolicyStatus    *string                `json:"PolicyStatus,omitempty" xml:"PolicyStatus,omitempty"`
	Retention       *int32                 `json:"Retention,omitempty" xml:"Retention,omitempty"`
	SpeedLimiter    *int64                 `json:"SpeedLimiter,omitempty" xml:"SpeedLimiter,omitempty"`
}

func (s ModifyUniBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyUniBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyUniBackupPolicyRequest) SetAccountName(v string) *ModifyUniBackupPolicyRequest {
	s.AccountName = &v
	return s
}

func (s *ModifyUniBackupPolicyRequest) SetAccountPassword(v string) *ModifyUniBackupPolicyRequest {
	s.AccountPassword = &v
	return s
}

func (s *ModifyUniBackupPolicyRequest) SetFullPlan(v map[string]interface{}) *ModifyUniBackupPolicyRequest {
	s.FullPlan = v
	return s
}

func (s *ModifyUniBackupPolicyRequest) SetIncPlan(v map[string]interface{}) *ModifyUniBackupPolicyRequest {
	s.IncPlan = v
	return s
}

func (s *ModifyUniBackupPolicyRequest) SetPolicyId(v int64) *ModifyUniBackupPolicyRequest {
	s.PolicyId = &v
	return s
}

func (s *ModifyUniBackupPolicyRequest) SetPolicyName(v string) *ModifyUniBackupPolicyRequest {
	s.PolicyName = &v
	return s
}

func (s *ModifyUniBackupPolicyRequest) SetPolicyStatus(v string) *ModifyUniBackupPolicyRequest {
	s.PolicyStatus = &v
	return s
}

func (s *ModifyUniBackupPolicyRequest) SetRetention(v int32) *ModifyUniBackupPolicyRequest {
	s.Retention = &v
	return s
}

func (s *ModifyUniBackupPolicyRequest) SetSpeedLimiter(v int64) *ModifyUniBackupPolicyRequest {
	s.SpeedLimiter = &v
	return s
}

type ModifyUniBackupPolicyShrinkRequest struct {
	AccountName     *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	FullPlanShrink  *string `json:"FullPlan,omitempty" xml:"FullPlan,omitempty"`
	IncPlanShrink   *string `json:"IncPlan,omitempty" xml:"IncPlan,omitempty"`
	PolicyId        *int64  `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	PolicyName      *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	PolicyStatus    *string `json:"PolicyStatus,omitempty" xml:"PolicyStatus,omitempty"`
	Retention       *int32  `json:"Retention,omitempty" xml:"Retention,omitempty"`
	SpeedLimiter    *int64  `json:"SpeedLimiter,omitempty" xml:"SpeedLimiter,omitempty"`
}

func (s ModifyUniBackupPolicyShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyUniBackupPolicyShrinkRequest) GoString() string {
	return s.String()
}

func (s *ModifyUniBackupPolicyShrinkRequest) SetAccountName(v string) *ModifyUniBackupPolicyShrinkRequest {
	s.AccountName = &v
	return s
}

func (s *ModifyUniBackupPolicyShrinkRequest) SetAccountPassword(v string) *ModifyUniBackupPolicyShrinkRequest {
	s.AccountPassword = &v
	return s
}

func (s *ModifyUniBackupPolicyShrinkRequest) SetFullPlanShrink(v string) *ModifyUniBackupPolicyShrinkRequest {
	s.FullPlanShrink = &v
	return s
}

func (s *ModifyUniBackupPolicyShrinkRequest) SetIncPlanShrink(v string) *ModifyUniBackupPolicyShrinkRequest {
	s.IncPlanShrink = &v
	return s
}

func (s *ModifyUniBackupPolicyShrinkRequest) SetPolicyId(v int64) *ModifyUniBackupPolicyShrinkRequest {
	s.PolicyId = &v
	return s
}

func (s *ModifyUniBackupPolicyShrinkRequest) SetPolicyName(v string) *ModifyUniBackupPolicyShrinkRequest {
	s.PolicyName = &v
	return s
}

func (s *ModifyUniBackupPolicyShrinkRequest) SetPolicyStatus(v string) *ModifyUniBackupPolicyShrinkRequest {
	s.PolicyStatus = &v
	return s
}

func (s *ModifyUniBackupPolicyShrinkRequest) SetRetention(v int32) *ModifyUniBackupPolicyShrinkRequest {
	s.Retention = &v
	return s
}

func (s *ModifyUniBackupPolicyShrinkRequest) SetSpeedLimiter(v int64) *ModifyUniBackupPolicyShrinkRequest {
	s.SpeedLimiter = &v
	return s
}

type ModifyUniBackupPolicyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyUniBackupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyUniBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyUniBackupPolicyResponseBody) SetRequestId(v string) *ModifyUniBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyUniBackupPolicyResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyUniBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyUniBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyUniBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyUniBackupPolicyResponse) SetHeaders(v map[string]*string) *ModifyUniBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyUniBackupPolicyResponse) SetStatusCode(v int32) *ModifyUniBackupPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyUniBackupPolicyResponse) SetBody(v *ModifyUniBackupPolicyResponseBody) *ModifyUniBackupPolicyResponse {
	s.Body = v
	return s
}

type ModifyVpcHoneyPotRequest struct {
	HoneyPotAction *string `json:"HoneyPotAction,omitempty" xml:"HoneyPotAction,omitempty"`
	VpcId          *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ModifyVpcHoneyPotRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcHoneyPotRequest) GoString() string {
	return s.String()
}

func (s *ModifyVpcHoneyPotRequest) SetHoneyPotAction(v string) *ModifyVpcHoneyPotRequest {
	s.HoneyPotAction = &v
	return s
}

func (s *ModifyVpcHoneyPotRequest) SetVpcId(v string) *ModifyVpcHoneyPotRequest {
	s.VpcId = &v
	return s
}

type ModifyVpcHoneyPotResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyVpcHoneyPotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcHoneyPotResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVpcHoneyPotResponseBody) SetRequestId(v string) *ModifyVpcHoneyPotResponseBody {
	s.RequestId = &v
	return s
}

type ModifyVpcHoneyPotResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyVpcHoneyPotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyVpcHoneyPotResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcHoneyPotResponse) GoString() string {
	return s.String()
}

func (s *ModifyVpcHoneyPotResponse) SetHeaders(v map[string]*string) *ModifyVpcHoneyPotResponse {
	s.Headers = v
	return s
}

func (s *ModifyVpcHoneyPotResponse) SetStatusCode(v int32) *ModifyVpcHoneyPotResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyVpcHoneyPotResponse) SetBody(v *ModifyVpcHoneyPotResponseBody) *ModifyVpcHoneyPotResponse {
	s.Body = v
	return s
}

type ModifyVulConfigRequest struct {
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyVulConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVulConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyVulConfigRequest) SetConfig(v string) *ModifyVulConfigRequest {
	s.Config = &v
	return s
}

func (s *ModifyVulConfigRequest) SetType(v string) *ModifyVulConfigRequest {
	s.Type = &v
	return s
}

type ModifyVulConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyVulConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVulConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVulConfigResponseBody) SetRequestId(v string) *ModifyVulConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyVulConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyVulConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyVulConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVulConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyVulConfigResponse) SetHeaders(v map[string]*string) *ModifyVulConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyVulConfigResponse) SetStatusCode(v int32) *ModifyVulConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyVulConfigResponse) SetBody(v *ModifyVulConfigResponseBody) *ModifyVulConfigResponse {
	s.Body = v
	return s
}

type ModifyVulTargetRequest struct {
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
}

func (s ModifyVulTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVulTargetRequest) GoString() string {
	return s.String()
}

func (s *ModifyVulTargetRequest) SetConfig(v string) *ModifyVulTargetRequest {
	s.Config = &v
	return s
}

func (s *ModifyVulTargetRequest) SetTarget(v string) *ModifyVulTargetRequest {
	s.Target = &v
	return s
}

type ModifyVulTargetResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyVulTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVulTargetResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVulTargetResponseBody) SetRequestId(v string) *ModifyVulTargetResponseBody {
	s.RequestId = &v
	return s
}

type ModifyVulTargetResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyVulTargetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyVulTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVulTargetResponse) GoString() string {
	return s.String()
}

func (s *ModifyVulTargetResponse) SetHeaders(v map[string]*string) *ModifyVulTargetResponse {
	s.Headers = v
	return s
}

func (s *ModifyVulTargetResponse) SetStatusCode(v int32) *ModifyVulTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyVulTargetResponse) SetBody(v *ModifyVulTargetResponseBody) *ModifyVulTargetResponse {
	s.Body = v
	return s
}

type ModifyVulTargetConfigRequest struct {
	// Specifies whether to enable vulnerability detection. Valid values:
	//
	// *   **on**: yes
	// *   **off**: no
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The type of the vulnerability. Valid values:
	//
	// *   **cve**: Linux software vulnerability
	// *   **sys**: Windows system vulnerability
	// *   **cms**: Web-CMS vulnerability
	// *   **emg**: urgent vulnerability
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The UUID of the server.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ModifyVulTargetConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVulTargetConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyVulTargetConfigRequest) SetConfig(v string) *ModifyVulTargetConfigRequest {
	s.Config = &v
	return s
}

func (s *ModifyVulTargetConfigRequest) SetSourceIp(v string) *ModifyVulTargetConfigRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyVulTargetConfigRequest) SetType(v string) *ModifyVulTargetConfigRequest {
	s.Type = &v
	return s
}

func (s *ModifyVulTargetConfigRequest) SetUuid(v string) *ModifyVulTargetConfigRequest {
	s.Uuid = &v
	return s
}

type ModifyVulTargetConfigResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyVulTargetConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVulTargetConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVulTargetConfigResponseBody) SetRequestId(v string) *ModifyVulTargetConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyVulTargetConfigResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyVulTargetConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyVulTargetConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVulTargetConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyVulTargetConfigResponse) SetHeaders(v map[string]*string) *ModifyVulTargetConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyVulTargetConfigResponse) SetStatusCode(v int32) *ModifyVulTargetConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyVulTargetConfigResponse) SetBody(v *ModifyVulTargetConfigResponseBody) *ModifyVulTargetConfigResponse {
	s.Body = v
	return s
}

type ModifyVulWhitelistTargetRequest struct {
	// The ID of the whitelist.
	//
	// >  You can call the [DescribeVulWhitelist](~~DescribeVulWhitelist~~) operation to query the IDs of whitelists.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The reason why you add the server to the whitelist.
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The applicable scope of the whitelist. The value of this parameter is in the JSON format and contains the following fields:
	//
	// *   **type**: the type of the applicable scope. Valid values:
	//
	//     *   **GroupId**: the ID of a server group
	//     *   **Uuid**: the UUID of a server
	//
	// *   **uuids**: the UUIDs of servers
	//
	// *   **groupIds**: the IDs of server groups
	//
	// >  If you leave this parameter empty, all servers are added to the whitelist. If you set the **type** field to **GroupId**, you must also specify the **groupIds** field. If you set the **type** field to **Uuid**, you must also specify the **uuids** field.
	TargetInfo *string `json:"TargetInfo,omitempty" xml:"TargetInfo,omitempty"`
}

func (s ModifyVulWhitelistTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVulWhitelistTargetRequest) GoString() string {
	return s.String()
}

func (s *ModifyVulWhitelistTargetRequest) SetId(v int64) *ModifyVulWhitelistTargetRequest {
	s.Id = &v
	return s
}

func (s *ModifyVulWhitelistTargetRequest) SetReason(v string) *ModifyVulWhitelistTargetRequest {
	s.Reason = &v
	return s
}

func (s *ModifyVulWhitelistTargetRequest) SetSourceIp(v string) *ModifyVulWhitelistTargetRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyVulWhitelistTargetRequest) SetTargetInfo(v string) *ModifyVulWhitelistTargetRequest {
	s.TargetInfo = &v
	return s
}

type ModifyVulWhitelistTargetResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyVulWhitelistTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVulWhitelistTargetResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVulWhitelistTargetResponseBody) SetRequestId(v string) *ModifyVulWhitelistTargetResponseBody {
	s.RequestId = &v
	return s
}

type ModifyVulWhitelistTargetResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyVulWhitelistTargetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyVulWhitelistTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVulWhitelistTargetResponse) GoString() string {
	return s.String()
}

func (s *ModifyVulWhitelistTargetResponse) SetHeaders(v map[string]*string) *ModifyVulWhitelistTargetResponse {
	s.Headers = v
	return s
}

func (s *ModifyVulWhitelistTargetResponse) SetStatusCode(v int32) *ModifyVulWhitelistTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyVulWhitelistTargetResponse) SetBody(v *ModifyVulWhitelistTargetResponseBody) *ModifyVulWhitelistTargetResponse {
	s.Body = v
	return s
}

type ModifyWebLockCreateConfigRequest struct {
	// The prevention mode. Valid values:
	//
	// *   **block**: Interception Mode
	// *   **audit**: Alert Mode
	DefenceMode *string `json:"DefenceMode,omitempty" xml:"DefenceMode,omitempty"`
	// The directory that you want to protect.
	Dir *string `json:"Dir,omitempty" xml:"Dir,omitempty"`
	// The directory for which you want to disable web tamper proofing.
	//
	// >  If you set **Mode** to **blacklist**, you must specify this parameter.
	ExclusiveDir *string `json:"ExclusiveDir,omitempty" xml:"ExclusiveDir,omitempty"`
	// The file for which you want to disable web tamper proofing.
	//
	// >  If you set **Mode** to **blacklist**, you must specify this parameter.
	ExclusiveFile *string `json:"ExclusiveFile,omitempty" xml:"ExclusiveFile,omitempty"`
	// The type of file for which you want to disable web tamper proofing. Separate multiple types with semicolons (;). Valid values:
	//
	// *   php
	// *   jsp
	// *   asp
	// *   aspx
	// *   js
	// *   cgi
	// *   html
	// *   htm
	// *   xml
	// *   shtml
	// *   shtm
	// *   jpg
	// *   gif
	// *   png
	//
	// >  If you set **Mode** to **blacklist**, you must specify this parameter.
	ExclusiveFileType *string `json:"ExclusiveFileType,omitempty" xml:"ExclusiveFileType,omitempty"`
	// The file for which you want to enable web tamper proofing.
	//
	// >  If you set **Mode** to **whitelist**, you must specify this parameter.
	InclusiveFile *string `json:"InclusiveFile,omitempty" xml:"InclusiveFile,omitempty"`
	// The type of file for which you want to enable web tamper proofing. Separate multiple types with semicolons (;). Valid values:
	//
	// *   php
	// *   jsp
	// *   asp
	// *   aspx
	// *   js
	// *   cgi
	// *   html
	// *   htm
	// *   xml
	// *   shtml
	// *   shtm
	// *   jpg
	// *   gif
	// *   png
	//
	// >  If you set **Mode** to **whitelist**, you must specify this parameter.
	InclusiveFileType *string `json:"InclusiveFileType,omitempty" xml:"InclusiveFileType,omitempty"`
	// The language of the content within the request and the response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The local path to the backup files of the protected directory.
	LocalBackupDir *string `json:"LocalBackupDir,omitempty" xml:"LocalBackupDir,omitempty"`
	// The protection mode of web tamper proofing. Valid values:
	//
	// *   **whitelist**: In this mode, web tamper proofing is enabled for the specified directories and file types.
	// *   **blacklist**: In this mode, web tamper proofing is enabled for the unspecified sub-directories, file types, and files in the protected directories.
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The UUID of the server for which you want to add a directory to protect.
	//
	// >  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ModifyWebLockCreateConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockCreateConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyWebLockCreateConfigRequest) SetDefenceMode(v string) *ModifyWebLockCreateConfigRequest {
	s.DefenceMode = &v
	return s
}

func (s *ModifyWebLockCreateConfigRequest) SetDir(v string) *ModifyWebLockCreateConfigRequest {
	s.Dir = &v
	return s
}

func (s *ModifyWebLockCreateConfigRequest) SetExclusiveDir(v string) *ModifyWebLockCreateConfigRequest {
	s.ExclusiveDir = &v
	return s
}

func (s *ModifyWebLockCreateConfigRequest) SetExclusiveFile(v string) *ModifyWebLockCreateConfigRequest {
	s.ExclusiveFile = &v
	return s
}

func (s *ModifyWebLockCreateConfigRequest) SetExclusiveFileType(v string) *ModifyWebLockCreateConfigRequest {
	s.ExclusiveFileType = &v
	return s
}

func (s *ModifyWebLockCreateConfigRequest) SetInclusiveFile(v string) *ModifyWebLockCreateConfigRequest {
	s.InclusiveFile = &v
	return s
}

func (s *ModifyWebLockCreateConfigRequest) SetInclusiveFileType(v string) *ModifyWebLockCreateConfigRequest {
	s.InclusiveFileType = &v
	return s
}

func (s *ModifyWebLockCreateConfigRequest) SetLang(v string) *ModifyWebLockCreateConfigRequest {
	s.Lang = &v
	return s
}

func (s *ModifyWebLockCreateConfigRequest) SetLocalBackupDir(v string) *ModifyWebLockCreateConfigRequest {
	s.LocalBackupDir = &v
	return s
}

func (s *ModifyWebLockCreateConfigRequest) SetMode(v string) *ModifyWebLockCreateConfigRequest {
	s.Mode = &v
	return s
}

func (s *ModifyWebLockCreateConfigRequest) SetSourceIp(v string) *ModifyWebLockCreateConfigRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyWebLockCreateConfigRequest) SetUuid(v string) *ModifyWebLockCreateConfigRequest {
	s.Uuid = &v
	return s
}

type ModifyWebLockCreateConfigResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyWebLockCreateConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockCreateConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyWebLockCreateConfigResponseBody) SetRequestId(v string) *ModifyWebLockCreateConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyWebLockCreateConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyWebLockCreateConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyWebLockCreateConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockCreateConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyWebLockCreateConfigResponse) SetHeaders(v map[string]*string) *ModifyWebLockCreateConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyWebLockCreateConfigResponse) SetStatusCode(v int32) *ModifyWebLockCreateConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyWebLockCreateConfigResponse) SetBody(v *ModifyWebLockCreateConfigResponseBody) *ModifyWebLockCreateConfigResponse {
	s.Body = v
	return s
}

type ModifyWebLockDeleteConfigRequest struct {
	// The ID of the protected directory that you want to delete.
	// > You can call the [DescribeWebLockConfigList](~~DescribeWebLockConfigList~~) operation to query the IDs of protected directories.
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The UUID of the server for which you want to delete the protected directory.
	// > You can call the [DescribeWebLockConfigList](~~DescribeWebLockConfigList~~) operation to query the UUID of servers.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ModifyWebLockDeleteConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockDeleteConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyWebLockDeleteConfigRequest) SetId(v int32) *ModifyWebLockDeleteConfigRequest {
	s.Id = &v
	return s
}

func (s *ModifyWebLockDeleteConfigRequest) SetLang(v string) *ModifyWebLockDeleteConfigRequest {
	s.Lang = &v
	return s
}

func (s *ModifyWebLockDeleteConfigRequest) SetSourceIp(v string) *ModifyWebLockDeleteConfigRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyWebLockDeleteConfigRequest) SetUuid(v string) *ModifyWebLockDeleteConfigRequest {
	s.Uuid = &v
	return s
}

type ModifyWebLockDeleteConfigResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyWebLockDeleteConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockDeleteConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyWebLockDeleteConfigResponseBody) SetRequestId(v string) *ModifyWebLockDeleteConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyWebLockDeleteConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyWebLockDeleteConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyWebLockDeleteConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockDeleteConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyWebLockDeleteConfigResponse) SetHeaders(v map[string]*string) *ModifyWebLockDeleteConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyWebLockDeleteConfigResponse) SetStatusCode(v int32) *ModifyWebLockDeleteConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyWebLockDeleteConfigResponse) SetBody(v *ModifyWebLockDeleteConfigResponseBody) *ModifyWebLockDeleteConfigResponse {
	s.Body = v
	return s
}

type ModifyWebLockProcessStatusRequest struct {
	DealAll     *int32    `json:"DealAll,omitempty" xml:"DealAll,omitempty"`
	OperateInfo *string   `json:"OperateInfo,omitempty" xml:"OperateInfo,omitempty"`
	ProcessPath []*string `json:"ProcessPath,omitempty" xml:"ProcessPath,omitempty" type:"Repeated"`
	Status      *int32    `json:"Status,omitempty" xml:"Status,omitempty"`
	Uuid        *string   `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ModifyWebLockProcessStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockProcessStatusRequest) GoString() string {
	return s.String()
}

func (s *ModifyWebLockProcessStatusRequest) SetDealAll(v int32) *ModifyWebLockProcessStatusRequest {
	s.DealAll = &v
	return s
}

func (s *ModifyWebLockProcessStatusRequest) SetOperateInfo(v string) *ModifyWebLockProcessStatusRequest {
	s.OperateInfo = &v
	return s
}

func (s *ModifyWebLockProcessStatusRequest) SetProcessPath(v []*string) *ModifyWebLockProcessStatusRequest {
	s.ProcessPath = v
	return s
}

func (s *ModifyWebLockProcessStatusRequest) SetStatus(v int32) *ModifyWebLockProcessStatusRequest {
	s.Status = &v
	return s
}

func (s *ModifyWebLockProcessStatusRequest) SetUuid(v string) *ModifyWebLockProcessStatusRequest {
	s.Uuid = &v
	return s
}

type ModifyWebLockProcessStatusResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyWebLockProcessStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockProcessStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyWebLockProcessStatusResponseBody) SetRequestId(v string) *ModifyWebLockProcessStatusResponseBody {
	s.RequestId = &v
	return s
}

type ModifyWebLockProcessStatusResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyWebLockProcessStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyWebLockProcessStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockProcessStatusResponse) GoString() string {
	return s.String()
}

func (s *ModifyWebLockProcessStatusResponse) SetHeaders(v map[string]*string) *ModifyWebLockProcessStatusResponse {
	s.Headers = v
	return s
}

func (s *ModifyWebLockProcessStatusResponse) SetStatusCode(v int32) *ModifyWebLockProcessStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyWebLockProcessStatusResponse) SetBody(v *ModifyWebLockProcessStatusResponseBody) *ModifyWebLockProcessStatusResponse {
	s.Body = v
	return s
}

type ModifyWebLockStartRequest struct {
	// The prevention mode. Valid values:
	//
	// *   **block**: Interception Mode
	// *   **audit**: Alert Mode
	DefenceMode *string `json:"DefenceMode,omitempty" xml:"DefenceMode,omitempty"`
	// The directory for which you want to enable web tamper proofing. Separate multiple directories with commas (,).
	Dir *string `json:"Dir,omitempty" xml:"Dir,omitempty"`
	// The directory for which you want to disable web tamper proofing.
	//
	// >  If you set **Mode** to **blacklist**, you must specify this parameter.
	ExclusiveDir *string `json:"ExclusiveDir,omitempty" xml:"ExclusiveDir,omitempty"`
	// The file for which you want to disable web tamper proofing.
	//
	// >  If you set **Mode** to **blacklist**, you must specify this parameter.
	ExclusiveFile *string `json:"ExclusiveFile,omitempty" xml:"ExclusiveFile,omitempty"`
	// The type of file for which you want to disable web tamper proofing. Separate multiple types with semicolons (;). Valid values:
	//
	// *   php
	// *   jsp
	// *   asp
	// *   aspx
	// *   js
	// *   cgi
	// *   html
	// *   htm
	// *   xml
	// *   shtml
	// *   shtm
	// *   jpg
	// *   gif
	// *   png
	//
	// >  If you set **Mode** to **blacklist**, you must specify this parameter.
	ExclusiveFileType *string `json:"ExclusiveFileType,omitempty" xml:"ExclusiveFileType,omitempty"`
	// The type of file for which you want to enable web tamper proofing. Separate multiple types with semicolons (;). Valid values:
	//
	// *   php
	// *   jsp
	// *   asp
	// *   aspx
	// *   js
	// *   cgi
	// *   html
	// *   htm
	// *   xml
	// *   shtml
	// *   shtm
	// *   jpg
	// *   gif
	// *   png
	//
	// >  If you set **Mode** to **whitelist**, you must specify this parameter.
	InclusiveFileType *string `json:"InclusiveFileType,omitempty" xml:"InclusiveFileType,omitempty"`
	// The local path to the backup files of the protected directory.\
	// The directory format of a Linux server is different from that of a Windows server. You must enter the directory in the required format based on your operating system. Examples of directory formats:
	//
	// *   Linux server: /usr/local/aegis/bak
	// *   Windows server: C:\Program Files (x86)\Alibaba\Aegis\bak
	LocalBackupDir *string `json:"LocalBackupDir,omitempty" xml:"LocalBackupDir,omitempty"`
	// The protection mode of web tamper proofing. Valid values:
	//
	// *   **whitelist**: In this mode, web tamper proofing is enabled for the specified directories and file types.
	// *   **blacklist**: In this mode, web tamper proofing is enabled for the unspecified sub-directories, file types, and files in the protected directories.
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// The UUID of the server for which you want to enable web tamper proofing.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ModifyWebLockStartRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockStartRequest) GoString() string {
	return s.String()
}

func (s *ModifyWebLockStartRequest) SetDefenceMode(v string) *ModifyWebLockStartRequest {
	s.DefenceMode = &v
	return s
}

func (s *ModifyWebLockStartRequest) SetDir(v string) *ModifyWebLockStartRequest {
	s.Dir = &v
	return s
}

func (s *ModifyWebLockStartRequest) SetExclusiveDir(v string) *ModifyWebLockStartRequest {
	s.ExclusiveDir = &v
	return s
}

func (s *ModifyWebLockStartRequest) SetExclusiveFile(v string) *ModifyWebLockStartRequest {
	s.ExclusiveFile = &v
	return s
}

func (s *ModifyWebLockStartRequest) SetExclusiveFileType(v string) *ModifyWebLockStartRequest {
	s.ExclusiveFileType = &v
	return s
}

func (s *ModifyWebLockStartRequest) SetInclusiveFileType(v string) *ModifyWebLockStartRequest {
	s.InclusiveFileType = &v
	return s
}

func (s *ModifyWebLockStartRequest) SetLocalBackupDir(v string) *ModifyWebLockStartRequest {
	s.LocalBackupDir = &v
	return s
}

func (s *ModifyWebLockStartRequest) SetMode(v string) *ModifyWebLockStartRequest {
	s.Mode = &v
	return s
}

func (s *ModifyWebLockStartRequest) SetUuid(v string) *ModifyWebLockStartRequest {
	s.Uuid = &v
	return s
}

type ModifyWebLockStartResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyWebLockStartResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockStartResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyWebLockStartResponseBody) SetRequestId(v string) *ModifyWebLockStartResponseBody {
	s.RequestId = &v
	return s
}

type ModifyWebLockStartResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyWebLockStartResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyWebLockStartResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockStartResponse) GoString() string {
	return s.String()
}

func (s *ModifyWebLockStartResponse) SetHeaders(v map[string]*string) *ModifyWebLockStartResponse {
	s.Headers = v
	return s
}

func (s *ModifyWebLockStartResponse) SetStatusCode(v int32) *ModifyWebLockStartResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyWebLockStartResponse) SetBody(v *ModifyWebLockStartResponseBody) *ModifyWebLockStartResponse {
	s.Body = v
	return s
}

type ModifyWebLockStatusRequest struct {
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// Specifies whether to enable or disable web tamper proofing for the specified server. Valid values:
	//
	// *   **on**: enables web tamper proofing
	// *   **off**: disables web tamper proofing
	//
	// >  After you disable web tamper proofing for the specified server, one quota is released.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The UUID of the server for which you want to enable or disable web tamper proofing. You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ModifyWebLockStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockStatusRequest) GoString() string {
	return s.String()
}

func (s *ModifyWebLockStatusRequest) SetLang(v string) *ModifyWebLockStatusRequest {
	s.Lang = &v
	return s
}

func (s *ModifyWebLockStatusRequest) SetSourceIp(v string) *ModifyWebLockStatusRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyWebLockStatusRequest) SetStatus(v string) *ModifyWebLockStatusRequest {
	s.Status = &v
	return s
}

func (s *ModifyWebLockStatusRequest) SetUuid(v string) *ModifyWebLockStatusRequest {
	s.Uuid = &v
	return s
}

type ModifyWebLockStatusResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyWebLockStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyWebLockStatusResponseBody) SetRequestId(v string) *ModifyWebLockStatusResponseBody {
	s.RequestId = &v
	return s
}

type ModifyWebLockStatusResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyWebLockStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyWebLockStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockStatusResponse) GoString() string {
	return s.String()
}

func (s *ModifyWebLockStatusResponse) SetHeaders(v map[string]*string) *ModifyWebLockStatusResponse {
	s.Headers = v
	return s
}

func (s *ModifyWebLockStatusResponse) SetStatusCode(v int32) *ModifyWebLockStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyWebLockStatusResponse) SetBody(v *ModifyWebLockStatusResponseBody) *ModifyWebLockStatusResponse {
	s.Body = v
	return s
}

type ModifyWebLockUnbindRequest struct {
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ModifyWebLockUnbindRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockUnbindRequest) GoString() string {
	return s.String()
}

func (s *ModifyWebLockUnbindRequest) SetUuid(v string) *ModifyWebLockUnbindRequest {
	s.Uuid = &v
	return s
}

type ModifyWebLockUnbindResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyWebLockUnbindResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockUnbindResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyWebLockUnbindResponseBody) SetRequestId(v string) *ModifyWebLockUnbindResponseBody {
	s.RequestId = &v
	return s
}

type ModifyWebLockUnbindResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyWebLockUnbindResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyWebLockUnbindResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockUnbindResponse) GoString() string {
	return s.String()
}

func (s *ModifyWebLockUnbindResponse) SetHeaders(v map[string]*string) *ModifyWebLockUnbindResponse {
	s.Headers = v
	return s
}

func (s *ModifyWebLockUnbindResponse) SetStatusCode(v int32) *ModifyWebLockUnbindResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyWebLockUnbindResponse) SetBody(v *ModifyWebLockUnbindResponseBody) *ModifyWebLockUnbindResponse {
	s.Body = v
	return s
}

type ModifyWebLockUpdateConfigRequest struct {
	// The prevention mode. Valid values:
	//
	// *   **block**: Interception Mode
	// *   **audit**: Alert Mode
	DefenceMode *string `json:"DefenceMode,omitempty" xml:"DefenceMode,omitempty"`
	// The directory for which you want to enable web tamper proofing.
	Dir *string `json:"Dir,omitempty" xml:"Dir,omitempty"`
	// The directory for which you want to disable web tamper proofing.
	//
	// >  If you set **Mode** to **blacklist**, you must specify this parameter.
	ExclusiveDir *string `json:"ExclusiveDir,omitempty" xml:"ExclusiveDir,omitempty"`
	// The file for which you want to disable web tamper proofing.
	//
	// >  If you set **Mode** to **blacklist**, you must specify this parameter.
	ExclusiveFile *string `json:"ExclusiveFile,omitempty" xml:"ExclusiveFile,omitempty"`
	// The type of file for which you want to disable web tamper proofing. Separate multiple types with semicolons (;). Valid values:
	//
	// *   php
	// *   jsp
	// *   asp
	// *   aspx
	// *   js
	// *   cgi
	// *   html
	// *   htm
	// *   xml
	// *   shtml
	// *   shtm
	// *   jpg
	// *   gif
	// *   png
	//
	// >  If you set **Mode** to **blacklist**, you must specify this parameter.
	ExclusiveFileType *string `json:"ExclusiveFileType,omitempty" xml:"ExclusiveFileType,omitempty"`
	// The ID of the protected directory that you want to modify.
	//
	// >  You can call the [DescribeWebLockConfigList](~~DescribeWebLockConfigListl~~) operation to query the IDs of protected directories.
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The file for which you want to enable web tamper proofing.
	//
	// >  If you set **Mode** to **whitelist**, you must specify this parameter.
	InclusiveFile *string `json:"InclusiveFile,omitempty" xml:"InclusiveFile,omitempty"`
	// The type of file for which you want to enable web tamper proofing. Separate multiple types with semicolons (;). Valid values:
	//
	// *   php
	// *   jsp
	// *   asp
	// *   aspx
	// *   js
	// *   cgi
	// *   html
	// *   htm
	// *   xml
	// *   shtml
	// *   shtm
	// *   jpg
	// *   gif
	// *   png
	//
	// >  If you set **Mode** to **whitelist**, you must specify this parameter.
	InclusiveFileType *string `json:"InclusiveFileType,omitempty" xml:"InclusiveFileType,omitempty"`
	// The language of the content within the request and the response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The local path to the backup files of the protected directory.\
	// The directory format of a Linux server is different from that of a Windows server. You must enter the directory in the required format based on your operating system. Examples of directory formats:
	//
	// *   Linux server: /usr/local/aegis/bak
	// *   Windows server: C:\Program Files (x86)\Alibaba\Aegis\bak
	LocalBackupDir *string `json:"LocalBackupDir,omitempty" xml:"LocalBackupDir,omitempty"`
	// The protection mode of web tamper proofing. Valid values:
	//
	// *   **whitelist**: In this mode, web tamper proofing is enabled for the specified directories and file types.
	// *   **blacklist**: In this mode, web tamper proofing is enabled for the unspecified sub-directories, file types, and files in the protected directories.
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The UUID of the server whose protected directory you want to modify.
	//
	// >  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ModifyWebLockUpdateConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockUpdateConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyWebLockUpdateConfigRequest) SetDefenceMode(v string) *ModifyWebLockUpdateConfigRequest {
	s.DefenceMode = &v
	return s
}

func (s *ModifyWebLockUpdateConfigRequest) SetDir(v string) *ModifyWebLockUpdateConfigRequest {
	s.Dir = &v
	return s
}

func (s *ModifyWebLockUpdateConfigRequest) SetExclusiveDir(v string) *ModifyWebLockUpdateConfigRequest {
	s.ExclusiveDir = &v
	return s
}

func (s *ModifyWebLockUpdateConfigRequest) SetExclusiveFile(v string) *ModifyWebLockUpdateConfigRequest {
	s.ExclusiveFile = &v
	return s
}

func (s *ModifyWebLockUpdateConfigRequest) SetExclusiveFileType(v string) *ModifyWebLockUpdateConfigRequest {
	s.ExclusiveFileType = &v
	return s
}

func (s *ModifyWebLockUpdateConfigRequest) SetId(v int32) *ModifyWebLockUpdateConfigRequest {
	s.Id = &v
	return s
}

func (s *ModifyWebLockUpdateConfigRequest) SetInclusiveFile(v string) *ModifyWebLockUpdateConfigRequest {
	s.InclusiveFile = &v
	return s
}

func (s *ModifyWebLockUpdateConfigRequest) SetInclusiveFileType(v string) *ModifyWebLockUpdateConfigRequest {
	s.InclusiveFileType = &v
	return s
}

func (s *ModifyWebLockUpdateConfigRequest) SetLang(v string) *ModifyWebLockUpdateConfigRequest {
	s.Lang = &v
	return s
}

func (s *ModifyWebLockUpdateConfigRequest) SetLocalBackupDir(v string) *ModifyWebLockUpdateConfigRequest {
	s.LocalBackupDir = &v
	return s
}

func (s *ModifyWebLockUpdateConfigRequest) SetMode(v string) *ModifyWebLockUpdateConfigRequest {
	s.Mode = &v
	return s
}

func (s *ModifyWebLockUpdateConfigRequest) SetSourceIp(v string) *ModifyWebLockUpdateConfigRequest {
	s.SourceIp = &v
	return s
}

func (s *ModifyWebLockUpdateConfigRequest) SetUuid(v string) *ModifyWebLockUpdateConfigRequest {
	s.Uuid = &v
	return s
}

type ModifyWebLockUpdateConfigResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyWebLockUpdateConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockUpdateConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyWebLockUpdateConfigResponseBody) SetRequestId(v string) *ModifyWebLockUpdateConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyWebLockUpdateConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyWebLockUpdateConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyWebLockUpdateConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebLockUpdateConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyWebLockUpdateConfigResponse) SetHeaders(v map[string]*string) *ModifyWebLockUpdateConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyWebLockUpdateConfigResponse) SetStatusCode(v int32) *ModifyWebLockUpdateConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyWebLockUpdateConfigResponse) SetBody(v *ModifyWebLockUpdateConfigResponseBody) *ModifyWebLockUpdateConfigResponse {
	s.Body = v
	return s
}

type ModifyWebPathRequest struct {
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyWebPathRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebPathRequest) GoString() string {
	return s.String()
}

func (s *ModifyWebPathRequest) SetConfig(v string) *ModifyWebPathRequest {
	s.Config = &v
	return s
}

func (s *ModifyWebPathRequest) SetTarget(v string) *ModifyWebPathRequest {
	s.Target = &v
	return s
}

func (s *ModifyWebPathRequest) SetType(v string) *ModifyWebPathRequest {
	s.Type = &v
	return s
}

type ModifyWebPathResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyWebPathResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebPathResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyWebPathResponseBody) SetRequestId(v string) *ModifyWebPathResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyWebPathResponseBody) SetSuccess(v bool) *ModifyWebPathResponseBody {
	s.Success = &v
	return s
}

type ModifyWebPathResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyWebPathResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyWebPathResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyWebPathResponse) GoString() string {
	return s.String()
}

func (s *ModifyWebPathResponse) SetHeaders(v map[string]*string) *ModifyWebPathResponse {
	s.Headers = v
	return s
}

func (s *ModifyWebPathResponse) SetStatusCode(v int32) *ModifyWebPathResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyWebPathResponse) SetBody(v *ModifyWebPathResponseBody) *ModifyWebPathResponse {
	s.Body = v
	return s
}

type OpenSensitiveFileScanRequest struct {
	// Specifies whether to enable or disable sensitive file scan. Valid values:
	//
	// *   **on**: enables sensitive file scan
	// *   **off**: disables sensitive file scan
	SwitchOn *string `json:"SwitchOn,omitempty" xml:"SwitchOn,omitempty"`
}

func (s OpenSensitiveFileScanRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenSensitiveFileScanRequest) GoString() string {
	return s.String()
}

func (s *OpenSensitiveFileScanRequest) SetSwitchOn(v string) *OpenSensitiveFileScanRequest {
	s.SwitchOn = &v
	return s
}

type OpenSensitiveFileScanResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data.
	Data *OpenSensitiveFileScanResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s OpenSensitiveFileScanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenSensitiveFileScanResponseBody) GoString() string {
	return s.String()
}

func (s *OpenSensitiveFileScanResponseBody) SetCode(v string) *OpenSensitiveFileScanResponseBody {
	s.Code = &v
	return s
}

func (s *OpenSensitiveFileScanResponseBody) SetData(v *OpenSensitiveFileScanResponseBodyData) *OpenSensitiveFileScanResponseBody {
	s.Data = v
	return s
}

func (s *OpenSensitiveFileScanResponseBody) SetHttpStatusCode(v int32) *OpenSensitiveFileScanResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *OpenSensitiveFileScanResponseBody) SetMessage(v string) *OpenSensitiveFileScanResponseBody {
	s.Message = &v
	return s
}

func (s *OpenSensitiveFileScanResponseBody) SetRequestId(v string) *OpenSensitiveFileScanResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenSensitiveFileScanResponseBody) SetSuccess(v bool) *OpenSensitiveFileScanResponseBody {
	s.Success = &v
	return s
}

type OpenSensitiveFileScanResponseBodyData struct {
	// Indicates whether sensitive file scan is enabled or disabled. Valid values:
	//
	// *   **on**: enabled
	// *   **off**: disabled
	SwitchOn *string `json:"SwitchOn,omitempty" xml:"SwitchOn,omitempty"`
}

func (s OpenSensitiveFileScanResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s OpenSensitiveFileScanResponseBodyData) GoString() string {
	return s.String()
}

func (s *OpenSensitiveFileScanResponseBodyData) SetSwitchOn(v string) *OpenSensitiveFileScanResponseBodyData {
	s.SwitchOn = &v
	return s
}

type OpenSensitiveFileScanResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenSensitiveFileScanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenSensitiveFileScanResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenSensitiveFileScanResponse) GoString() string {
	return s.String()
}

func (s *OpenSensitiveFileScanResponse) SetHeaders(v map[string]*string) *OpenSensitiveFileScanResponse {
	s.Headers = v
	return s
}

func (s *OpenSensitiveFileScanResponse) SetStatusCode(v int32) *OpenSensitiveFileScanResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenSensitiveFileScanResponse) SetBody(v *OpenSensitiveFileScanResponseBody) *OpenSensitiveFileScanResponse {
	s.Body = v
	return s
}

type OperateAgentClientInstallRequest struct {
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	Lang        *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Uuids       *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s OperateAgentClientInstallRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateAgentClientInstallRequest) GoString() string {
	return s.String()
}

func (s *OperateAgentClientInstallRequest) SetInstanceIds(v string) *OperateAgentClientInstallRequest {
	s.InstanceIds = &v
	return s
}

func (s *OperateAgentClientInstallRequest) SetLang(v string) *OperateAgentClientInstallRequest {
	s.Lang = &v
	return s
}

func (s *OperateAgentClientInstallRequest) SetUuids(v string) *OperateAgentClientInstallRequest {
	s.Uuids = &v
	return s
}

type OperateAgentClientInstallResponseBody struct {
	AegisCelintInstallResposeList []*OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList `json:"AegisCelintInstallResposeList,omitempty" xml:"AegisCelintInstallResposeList,omitempty" type:"Repeated"`
	RequestId                     *string                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OperateAgentClientInstallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperateAgentClientInstallResponseBody) GoString() string {
	return s.String()
}

func (s *OperateAgentClientInstallResponseBody) SetAegisCelintInstallResposeList(v []*OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList) *OperateAgentClientInstallResponseBody {
	s.AegisCelintInstallResposeList = v
	return s
}

func (s *OperateAgentClientInstallResponseBody) SetRequestId(v string) *OperateAgentClientInstallResponseBody {
	s.RequestId = &v
	return s
}

type OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RecordId   *int64  `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	Uuid       *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList) String() string {
	return tea.Prettify(s)
}

func (s OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList) GoString() string {
	return s.String()
}

func (s *OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList) SetInstanceId(v string) *OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList {
	s.InstanceId = &v
	return s
}

func (s *OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList) SetRecordId(v int64) *OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList {
	s.RecordId = &v
	return s
}

func (s *OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList) SetUuid(v string) *OperateAgentClientInstallResponseBodyAegisCelintInstallResposeList {
	s.Uuid = &v
	return s
}

type OperateAgentClientInstallResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OperateAgentClientInstallResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OperateAgentClientInstallResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateAgentClientInstallResponse) GoString() string {
	return s.String()
}

func (s *OperateAgentClientInstallResponse) SetHeaders(v map[string]*string) *OperateAgentClientInstallResponse {
	s.Headers = v
	return s
}

func (s *OperateAgentClientInstallResponse) SetStatusCode(v int32) *OperateAgentClientInstallResponse {
	s.StatusCode = &v
	return s
}

func (s *OperateAgentClientInstallResponse) SetBody(v *OperateAgentClientInstallResponseBody) *OperateAgentClientInstallResponse {
	s.Body = v
	return s
}

type OperateCommonOverallConfigRequest struct {
	// Specifies whether to enable or disable the feature. Valid values:
	//
	// *   **on**: enable
	// *   **off**: disable
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The type of the feature. Valid values:
	//
	// *   **kdump_switch**: Active defense experience optimization
	// *   **threat_detect**: Dynamic adaptive threat detection capability
	// *   **suspicious_aggregation**: Alert Association
	// *   **alidetect**: File Test
	// *   **USER-ENABLE-SWITCH-TYPE\_38857**: Entrance service execution high-risk operation (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_50858**: Web service performs high-risk operations (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_50859**: Entrance service execution suspicious operation (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_50862**: Cloud Assistant Advanced Protection (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_50867**: Create malicious files (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_50868**: Create suspicious files (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_64025**: Ingress service execute command \[enhanced mode] (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_51229**: Browser service execution a high-risk operation (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_51230**: Entrance service execution suspicious operation (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_51232**: System processes execution high-risk operations (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_51233**: Java service execution high-risk operations (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_51234**: Office components execution high-risk operations (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_51235**: Web service performs high-risk operations (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_52820**: Create malicious files (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_52826**: Entrance service execution high-risk operation (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_55251**: Database services execution high-risk operations (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_63725**: Ingress service implants suspicious script/binary file (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_3277**: Suspicious process startup (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_50983**: obfuscated command (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_51200**: Command line download and run malicious files (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_71131**: Ingress service executes sequence of suspicious behavior (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_51225**: Powershell executes high-risk commands (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_51226**: Powershell execute suspicious command (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_52821**: Suspicious process startup (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_57242**: Malicious command execution (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_57340**: Command line download and run malicious files (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_39659**: Sensitive Registry Key Protection (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_52816**: high-risk account manipulation behavior (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_54365**: Create service autorun item (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_54366**: Create high-risk autorun item (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_54367**: Create scheduled task autorun item (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_54368**: Create registry autorun item (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_54369**: Create WMI autorun item (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_50869**: Unauthorized execution of high-risk orders (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_53272**: Exploiting Kernel Vulnerabilities to Elevate Privileges (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_54395**: Unauthorized reading and writing of sensitive files (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_57897**: suspected privilege escalation (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_52825**: Unauthorized execution of high-risk orders (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_5507**: malicious drivers (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_50876**: Against security software (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_53168**: process debugging (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_54699**: Hijack dynamic link library (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_62981**: Bypassing security monitoring (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_52815**: Load high-risk drivers (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_52823**: Running high-risk ARK tools (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_54373**: Against security software (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_54374**: Intrusion trace cleanup (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_54265**: Hijacking the PAM Module (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_54953**: Hashdump Attack (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_54383**: MimiKatz Credential Stealing (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_54384**: Hashdump Attack (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_50861**: Information detection (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_52818**: Information detection (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_54034**: Intranet scan (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_51228**: High-risk lateral penetration tools (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_50870**: Rebound Shell (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_50873**: WebShell execute command
	// *   **USER-ENABLE-SWITCH-TYPE\_51236**: Rebound Shell (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_50877**: Malicious soft communication (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_50884**: Suspicious worm script behavior (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_50885**: malicious script behavior (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_51201**: ransomware (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_51202**: Suspected Extortion (Linux)
	// *   **USER-ENABLE-SWITCH-TYPE\_52827**: ransomware (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_52828**: Suspected Extortion (Windows)
	// *   **USER-ENABLE-SWITCH-TYPE\_52829**: delete system backup behavior (Windows)
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s OperateCommonOverallConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateCommonOverallConfigRequest) GoString() string {
	return s.String()
}

func (s *OperateCommonOverallConfigRequest) SetConfig(v string) *OperateCommonOverallConfigRequest {
	s.Config = &v
	return s
}

func (s *OperateCommonOverallConfigRequest) SetSourceIp(v string) *OperateCommonOverallConfigRequest {
	s.SourceIp = &v
	return s
}

func (s *OperateCommonOverallConfigRequest) SetType(v string) *OperateCommonOverallConfigRequest {
	s.Type = &v
	return s
}

type OperateCommonOverallConfigResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OperateCommonOverallConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperateCommonOverallConfigResponseBody) GoString() string {
	return s.String()
}

func (s *OperateCommonOverallConfigResponseBody) SetRequestId(v string) *OperateCommonOverallConfigResponseBody {
	s.RequestId = &v
	return s
}

type OperateCommonOverallConfigResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OperateCommonOverallConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OperateCommonOverallConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateCommonOverallConfigResponse) GoString() string {
	return s.String()
}

func (s *OperateCommonOverallConfigResponse) SetHeaders(v map[string]*string) *OperateCommonOverallConfigResponse {
	s.Headers = v
	return s
}

func (s *OperateCommonOverallConfigResponse) SetStatusCode(v int32) *OperateCommonOverallConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *OperateCommonOverallConfigResponse) SetBody(v *OperateCommonOverallConfigResponseBody) *OperateCommonOverallConfigResponse {
	s.Body = v
	return s
}

type OperateCommonTargetConfigRequest struct {
	FieldName        *string `json:"FieldName,omitempty" xml:"FieldName,omitempty"`
	FieldValue       *string `json:"FieldValue,omitempty" xml:"FieldValue,omitempty"`
	SourceIp         *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	TargetOperations *string `json:"TargetOperations,omitempty" xml:"TargetOperations,omitempty"`
	TargetType       *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s OperateCommonTargetConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateCommonTargetConfigRequest) GoString() string {
	return s.String()
}

func (s *OperateCommonTargetConfigRequest) SetFieldName(v string) *OperateCommonTargetConfigRequest {
	s.FieldName = &v
	return s
}

func (s *OperateCommonTargetConfigRequest) SetFieldValue(v string) *OperateCommonTargetConfigRequest {
	s.FieldValue = &v
	return s
}

func (s *OperateCommonTargetConfigRequest) SetSourceIp(v string) *OperateCommonTargetConfigRequest {
	s.SourceIp = &v
	return s
}

func (s *OperateCommonTargetConfigRequest) SetTargetOperations(v string) *OperateCommonTargetConfigRequest {
	s.TargetOperations = &v
	return s
}

func (s *OperateCommonTargetConfigRequest) SetTargetType(v string) *OperateCommonTargetConfigRequest {
	s.TargetType = &v
	return s
}

func (s *OperateCommonTargetConfigRequest) SetType(v string) *OperateCommonTargetConfigRequest {
	s.Type = &v
	return s
}

type OperateCommonTargetConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OperateCommonTargetConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperateCommonTargetConfigResponseBody) GoString() string {
	return s.String()
}

func (s *OperateCommonTargetConfigResponseBody) SetRequestId(v string) *OperateCommonTargetConfigResponseBody {
	s.RequestId = &v
	return s
}

type OperateCommonTargetConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OperateCommonTargetConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OperateCommonTargetConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateCommonTargetConfigResponse) GoString() string {
	return s.String()
}

func (s *OperateCommonTargetConfigResponse) SetHeaders(v map[string]*string) *OperateCommonTargetConfigResponse {
	s.Headers = v
	return s
}

func (s *OperateCommonTargetConfigResponse) SetStatusCode(v int32) *OperateCommonTargetConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *OperateCommonTargetConfigResponse) SetBody(v *OperateCommonTargetConfigResponseBody) *OperateCommonTargetConfigResponse {
	s.Body = v
	return s
}

type OperateImageBaselineWhitelistRequest struct {
	BaselineItemKeyList *string   `json:"BaselineItemKeyList,omitempty" xml:"BaselineItemKeyList,omitempty"`
	ImageUuid           *string   `json:"ImageUuid,omitempty" xml:"ImageUuid,omitempty"`
	Lang                *string   `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Operation           *string   `json:"Operation,omitempty" xml:"Operation,omitempty"`
	ScanRange           []*string `json:"ScanRange,omitempty" xml:"ScanRange,omitempty" type:"Repeated"`
}

func (s OperateImageBaselineWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateImageBaselineWhitelistRequest) GoString() string {
	return s.String()
}

func (s *OperateImageBaselineWhitelistRequest) SetBaselineItemKeyList(v string) *OperateImageBaselineWhitelistRequest {
	s.BaselineItemKeyList = &v
	return s
}

func (s *OperateImageBaselineWhitelistRequest) SetImageUuid(v string) *OperateImageBaselineWhitelistRequest {
	s.ImageUuid = &v
	return s
}

func (s *OperateImageBaselineWhitelistRequest) SetLang(v string) *OperateImageBaselineWhitelistRequest {
	s.Lang = &v
	return s
}

func (s *OperateImageBaselineWhitelistRequest) SetOperation(v string) *OperateImageBaselineWhitelistRequest {
	s.Operation = &v
	return s
}

func (s *OperateImageBaselineWhitelistRequest) SetScanRange(v []*string) *OperateImageBaselineWhitelistRequest {
	s.ScanRange = v
	return s
}

type OperateImageBaselineWhitelistResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OperateImageBaselineWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperateImageBaselineWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *OperateImageBaselineWhitelistResponseBody) SetRequestId(v string) *OperateImageBaselineWhitelistResponseBody {
	s.RequestId = &v
	return s
}

type OperateImageBaselineWhitelistResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OperateImageBaselineWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OperateImageBaselineWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateImageBaselineWhitelistResponse) GoString() string {
	return s.String()
}

func (s *OperateImageBaselineWhitelistResponse) SetHeaders(v map[string]*string) *OperateImageBaselineWhitelistResponse {
	s.Headers = v
	return s
}

func (s *OperateImageBaselineWhitelistResponse) SetStatusCode(v int32) *OperateImageBaselineWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *OperateImageBaselineWhitelistResponse) SetBody(v *OperateImageBaselineWhitelistResponseBody) *OperateImageBaselineWhitelistResponse {
	s.Body = v
	return s
}

type OperateImageVulRequest struct {
	Info        *string `json:"Info,omitempty" xml:"Info,omitempty"`
	OperateType *string `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s OperateImageVulRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateImageVulRequest) GoString() string {
	return s.String()
}

func (s *OperateImageVulRequest) SetInfo(v string) *OperateImageVulRequest {
	s.Info = &v
	return s
}

func (s *OperateImageVulRequest) SetOperateType(v string) *OperateImageVulRequest {
	s.OperateType = &v
	return s
}

func (s *OperateImageVulRequest) SetType(v string) *OperateImageVulRequest {
	s.Type = &v
	return s
}

type OperateImageVulResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OperateImageVulResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperateImageVulResponseBody) GoString() string {
	return s.String()
}

func (s *OperateImageVulResponseBody) SetRequestId(v string) *OperateImageVulResponseBody {
	s.RequestId = &v
	return s
}

type OperateImageVulResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OperateImageVulResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OperateImageVulResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateImageVulResponse) GoString() string {
	return s.String()
}

func (s *OperateImageVulResponse) SetHeaders(v map[string]*string) *OperateImageVulResponse {
	s.Headers = v
	return s
}

func (s *OperateImageVulResponse) SetStatusCode(v int32) *OperateImageVulResponse {
	s.StatusCode = &v
	return s
}

func (s *OperateImageVulResponse) SetBody(v *OperateImageVulResponseBody) *OperateImageVulResponse {
	s.Body = v
	return s
}

type OperateSuspiciousOverallConfigRequest struct {
	Config       *string `json:"Config,omitempty" xml:"Config,omitempty"`
	Lang         *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	NoTargetAsOn *bool   `json:"NoTargetAsOn,omitempty" xml:"NoTargetAsOn,omitempty"`
	SourceIp     *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s OperateSuspiciousOverallConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateSuspiciousOverallConfigRequest) GoString() string {
	return s.String()
}

func (s *OperateSuspiciousOverallConfigRequest) SetConfig(v string) *OperateSuspiciousOverallConfigRequest {
	s.Config = &v
	return s
}

func (s *OperateSuspiciousOverallConfigRequest) SetLang(v string) *OperateSuspiciousOverallConfigRequest {
	s.Lang = &v
	return s
}

func (s *OperateSuspiciousOverallConfigRequest) SetNoTargetAsOn(v bool) *OperateSuspiciousOverallConfigRequest {
	s.NoTargetAsOn = &v
	return s
}

func (s *OperateSuspiciousOverallConfigRequest) SetSourceIp(v string) *OperateSuspiciousOverallConfigRequest {
	s.SourceIp = &v
	return s
}

func (s *OperateSuspiciousOverallConfigRequest) SetType(v string) *OperateSuspiciousOverallConfigRequest {
	s.Type = &v
	return s
}

type OperateSuspiciousOverallConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OperateSuspiciousOverallConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperateSuspiciousOverallConfigResponseBody) GoString() string {
	return s.String()
}

func (s *OperateSuspiciousOverallConfigResponseBody) SetRequestId(v string) *OperateSuspiciousOverallConfigResponseBody {
	s.RequestId = &v
	return s
}

type OperateSuspiciousOverallConfigResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OperateSuspiciousOverallConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OperateSuspiciousOverallConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateSuspiciousOverallConfigResponse) GoString() string {
	return s.String()
}

func (s *OperateSuspiciousOverallConfigResponse) SetHeaders(v map[string]*string) *OperateSuspiciousOverallConfigResponse {
	s.Headers = v
	return s
}

func (s *OperateSuspiciousOverallConfigResponse) SetStatusCode(v int32) *OperateSuspiciousOverallConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *OperateSuspiciousOverallConfigResponse) SetBody(v *OperateSuspiciousOverallConfigResponseBody) *OperateSuspiciousOverallConfigResponse {
	s.Body = v
	return s
}

type OperateSuspiciousTargetConfigRequest struct {
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The configuration of proactive defense for your server. The value includes the following fields:
	//
	// *   **targetType**: specifies the dimension from which you manage proactive defense. UUIDs are supported. Set the value to **uuid**.
	// *   **target**: specifies the UUID of the server for which you want to configure proactive defense.
	// *   **flag**: specifies whether to enable or disable proactive defense for your server. Valid values are **add** and **del**. The value add indicates that proactive defense will be enabled for your server. The value del indicates that proactive defense will be disabled for your server.
	TargetOperations *string `json:"TargetOperations,omitempty" xml:"TargetOperations,omitempty"`
	// The dimension from which you manage proactive defense. Only the server UUID dimension is supported.
	//
	// Set the value to **uuid**.
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	// The type of proactive defense. Valid Values:
	//
	// *   **auto_breaking**: automatic blocking
	// *   **webshell_cloud_breaking**: webshell defense
	// *   **alinet**: malicious behavior defense
	// *   **ransomware_breaking**: ransomware capture
	// *   **alisecguard**: client protection
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s OperateSuspiciousTargetConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateSuspiciousTargetConfigRequest) GoString() string {
	return s.String()
}

func (s *OperateSuspiciousTargetConfigRequest) SetLang(v string) *OperateSuspiciousTargetConfigRequest {
	s.Lang = &v
	return s
}

func (s *OperateSuspiciousTargetConfigRequest) SetSourceIp(v string) *OperateSuspiciousTargetConfigRequest {
	s.SourceIp = &v
	return s
}

func (s *OperateSuspiciousTargetConfigRequest) SetTargetOperations(v string) *OperateSuspiciousTargetConfigRequest {
	s.TargetOperations = &v
	return s
}

func (s *OperateSuspiciousTargetConfigRequest) SetTargetType(v string) *OperateSuspiciousTargetConfigRequest {
	s.TargetType = &v
	return s
}

func (s *OperateSuspiciousTargetConfigRequest) SetType(v string) *OperateSuspiciousTargetConfigRequest {
	s.Type = &v
	return s
}

type OperateSuspiciousTargetConfigResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OperateSuspiciousTargetConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperateSuspiciousTargetConfigResponseBody) GoString() string {
	return s.String()
}

func (s *OperateSuspiciousTargetConfigResponseBody) SetRequestId(v string) *OperateSuspiciousTargetConfigResponseBody {
	s.RequestId = &v
	return s
}

type OperateSuspiciousTargetConfigResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OperateSuspiciousTargetConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OperateSuspiciousTargetConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateSuspiciousTargetConfigResponse) GoString() string {
	return s.String()
}

func (s *OperateSuspiciousTargetConfigResponse) SetHeaders(v map[string]*string) *OperateSuspiciousTargetConfigResponse {
	s.Headers = v
	return s
}

func (s *OperateSuspiciousTargetConfigResponse) SetStatusCode(v int32) *OperateSuspiciousTargetConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *OperateSuspiciousTargetConfigResponse) SetBody(v *OperateSuspiciousTargetConfigResponseBody) *OperateSuspiciousTargetConfigResponse {
	s.Body = v
	return s
}

type OperateVirusEventsRequest struct {
	OperationAll   *int32  `json:"OperationAll,omitempty" xml:"OperationAll,omitempty"`
	OperationCode  *string `json:"OperationCode,omitempty" xml:"OperationCode,omitempty"`
	OperationRange *string `json:"OperationRange,omitempty" xml:"OperationRange,omitempty"`
}

func (s OperateVirusEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateVirusEventsRequest) GoString() string {
	return s.String()
}

func (s *OperateVirusEventsRequest) SetOperationAll(v int32) *OperateVirusEventsRequest {
	s.OperationAll = &v
	return s
}

func (s *OperateVirusEventsRequest) SetOperationCode(v string) *OperateVirusEventsRequest {
	s.OperationCode = &v
	return s
}

func (s *OperateVirusEventsRequest) SetOperationRange(v string) *OperateVirusEventsRequest {
	s.OperationRange = &v
	return s
}

type OperateVirusEventsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId    *int64  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s OperateVirusEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperateVirusEventsResponseBody) GoString() string {
	return s.String()
}

func (s *OperateVirusEventsResponseBody) SetRequestId(v string) *OperateVirusEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *OperateVirusEventsResponseBody) SetTaskId(v int64) *OperateVirusEventsResponseBody {
	s.TaskId = &v
	return s
}

type OperateVirusEventsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OperateVirusEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OperateVirusEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateVirusEventsResponse) GoString() string {
	return s.String()
}

func (s *OperateVirusEventsResponse) SetHeaders(v map[string]*string) *OperateVirusEventsResponse {
	s.Headers = v
	return s
}

func (s *OperateVirusEventsResponse) SetStatusCode(v int32) *OperateVirusEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *OperateVirusEventsResponse) SetBody(v *OperateVirusEventsResponseBody) *OperateVirusEventsResponse {
	s.Body = v
	return s
}

type OperateVulsRequest struct {
	// The operation on the vulnerabilities. Set the value to **vul_fix**, which indicates vulnerability fixing.
	OperateType *string `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	// The type of the vulnerabilities that you want to fix. Set the value to **cve**, which indicates Linux software vulnerabilities.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The UUIDs of servers for which you want to fix vulnerabilities.
	Uuids []*string `json:"Uuids,omitempty" xml:"Uuids,omitempty" type:"Repeated"`
	// The names of the vulnerabilities that you want to fix.
	VulNames []*string `json:"VulNames,omitempty" xml:"VulNames,omitempty" type:"Repeated"`
}

func (s OperateVulsRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateVulsRequest) GoString() string {
	return s.String()
}

func (s *OperateVulsRequest) SetOperateType(v string) *OperateVulsRequest {
	s.OperateType = &v
	return s
}

func (s *OperateVulsRequest) SetType(v string) *OperateVulsRequest {
	s.Type = &v
	return s
}

func (s *OperateVulsRequest) SetUuids(v []*string) *OperateVulsRequest {
	s.Uuids = v
	return s
}

func (s *OperateVulsRequest) SetVulNames(v []*string) *OperateVulsRequest {
	s.VulNames = v
	return s
}

type OperateVulsResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OperateVulsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperateVulsResponseBody) GoString() string {
	return s.String()
}

func (s *OperateVulsResponseBody) SetRequestId(v string) *OperateVulsResponseBody {
	s.RequestId = &v
	return s
}

type OperateVulsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OperateVulsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OperateVulsResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateVulsResponse) GoString() string {
	return s.String()
}

func (s *OperateVulsResponse) SetHeaders(v map[string]*string) *OperateVulsResponse {
	s.Headers = v
	return s
}

func (s *OperateVulsResponse) SetStatusCode(v int32) *OperateVulsResponse {
	s.StatusCode = &v
	return s
}

func (s *OperateVulsResponse) SetBody(v *OperateVulsResponseBody) *OperateVulsResponse {
	s.Body = v
	return s
}

type OperateWebLockFileEventsRequest struct {
	DealAll       *int32   `json:"DealAll,omitempty" xml:"DealAll,omitempty"`
	EventIds      []*int64 `json:"EventIds,omitempty" xml:"EventIds,omitempty" type:"Repeated"`
	OperationCode *string  `json:"OperationCode,omitempty" xml:"OperationCode,omitempty"`
}

func (s OperateWebLockFileEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateWebLockFileEventsRequest) GoString() string {
	return s.String()
}

func (s *OperateWebLockFileEventsRequest) SetDealAll(v int32) *OperateWebLockFileEventsRequest {
	s.DealAll = &v
	return s
}

func (s *OperateWebLockFileEventsRequest) SetEventIds(v []*int64) *OperateWebLockFileEventsRequest {
	s.EventIds = v
	return s
}

func (s *OperateWebLockFileEventsRequest) SetOperationCode(v string) *OperateWebLockFileEventsRequest {
	s.OperationCode = &v
	return s
}

type OperateWebLockFileEventsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OperateWebLockFileEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperateWebLockFileEventsResponseBody) GoString() string {
	return s.String()
}

func (s *OperateWebLockFileEventsResponseBody) SetRequestId(v string) *OperateWebLockFileEventsResponseBody {
	s.RequestId = &v
	return s
}

type OperateWebLockFileEventsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OperateWebLockFileEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OperateWebLockFileEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateWebLockFileEventsResponse) GoString() string {
	return s.String()
}

func (s *OperateWebLockFileEventsResponse) SetHeaders(v map[string]*string) *OperateWebLockFileEventsResponse {
	s.Headers = v
	return s
}

func (s *OperateWebLockFileEventsResponse) SetStatusCode(v int32) *OperateWebLockFileEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *OperateWebLockFileEventsResponse) SetBody(v *OperateWebLockFileEventsResponseBody) *OperateWebLockFileEventsResponse {
	s.Body = v
	return s
}

type OperationCancelIgnoreSuspEventRequest struct {
	// The IDs of alert events.
	SecurityEventIds []*int64 `json:"SecurityEventIds,omitempty" xml:"SecurityEventIds,omitempty" type:"Repeated"`
}

func (s OperationCancelIgnoreSuspEventRequest) String() string {
	return tea.Prettify(s)
}

func (s OperationCancelIgnoreSuspEventRequest) GoString() string {
	return s.String()
}

func (s *OperationCancelIgnoreSuspEventRequest) SetSecurityEventIds(v []*int64) *OperationCancelIgnoreSuspEventRequest {
	s.SecurityEventIds = v
	return s
}

type OperationCancelIgnoreSuspEventResponseBody struct {
	// The status code returned. The status code **200** indicates that the request was is successful. Other status codes indicate that the request fails. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The handling result of an exception. Valid values:
	//
	// *   **true**: successful
	// *   **false**: failed
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The time consumed for the request. Unit: seconds.
	TimeCost *int64 `json:"TimeCost,omitempty" xml:"TimeCost,omitempty"`
}

func (s OperationCancelIgnoreSuspEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperationCancelIgnoreSuspEventResponseBody) GoString() string {
	return s.String()
}

func (s *OperationCancelIgnoreSuspEventResponseBody) SetCode(v string) *OperationCancelIgnoreSuspEventResponseBody {
	s.Code = &v
	return s
}

func (s *OperationCancelIgnoreSuspEventResponseBody) SetHttpStatusCode(v int32) *OperationCancelIgnoreSuspEventResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *OperationCancelIgnoreSuspEventResponseBody) SetMessage(v string) *OperationCancelIgnoreSuspEventResponseBody {
	s.Message = &v
	return s
}

func (s *OperationCancelIgnoreSuspEventResponseBody) SetRequestId(v string) *OperationCancelIgnoreSuspEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *OperationCancelIgnoreSuspEventResponseBody) SetSuccess(v bool) *OperationCancelIgnoreSuspEventResponseBody {
	s.Success = &v
	return s
}

func (s *OperationCancelIgnoreSuspEventResponseBody) SetTimeCost(v int64) *OperationCancelIgnoreSuspEventResponseBody {
	s.TimeCost = &v
	return s
}

type OperationCancelIgnoreSuspEventResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OperationCancelIgnoreSuspEventResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OperationCancelIgnoreSuspEventResponse) String() string {
	return tea.Prettify(s)
}

func (s OperationCancelIgnoreSuspEventResponse) GoString() string {
	return s.String()
}

func (s *OperationCancelIgnoreSuspEventResponse) SetHeaders(v map[string]*string) *OperationCancelIgnoreSuspEventResponse {
	s.Headers = v
	return s
}

func (s *OperationCancelIgnoreSuspEventResponse) SetStatusCode(v int32) *OperationCancelIgnoreSuspEventResponse {
	s.StatusCode = &v
	return s
}

func (s *OperationCancelIgnoreSuspEventResponse) SetBody(v *OperationCancelIgnoreSuspEventResponseBody) *OperationCancelIgnoreSuspEventResponse {
	s.Body = v
	return s
}

type OperationSuspEventsRequest struct {
	// The ID of the request source.
	//
	// Set the value to **sas**, which indicates that the request is sent from Security Center.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// The operation that you want to perform on alerts. Valid values:
	//
	// *   **deal**: quarantines the source file of the malicious process.
	// *   **ignore**: ignores the alerts.
	// *   **mark\_mis_info**: marks the alerts as false positives by adding the alerts to the whitelist.
	// *   **rm\_mark\_mis_info**: cancels marking the alerts as false positives by removing the alerts from the whitelist.
	// *   **offline_handled**: marks the alerts as handled.
	Operation *string `json:"Operation,omitempty" xml:"Operation,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The suboperation that you want to perform when you quarantine the source file of the malicious process. Valid values:
	//
	// *   **killAndQuaraFileByPidAndMd5andPath**: terminates the process based on its process ID (PID) and quarantines the source file of the process.
	// *   **quaraFileByMd5andPath**: quarantines the source file of the process.
	// *   **killAndQuaraFileByMd5andPath**: terminates the process and quarantines the source file of the process.
	SubOperation *string `json:"SubOperation,omitempty" xml:"SubOperation,omitempty"`
	// The IDs of alert events.
	//
	// >  You can call the [DescribeAlarmEventList](~~DescribeAlarmEventList~~) operation to obtain the IDs of alert events from the SecurityEventIds response parameter.
	SuspiciousEventIds *string `json:"SuspiciousEventIds,omitempty" xml:"SuspiciousEventIds,omitempty"`
	// The type of the exceptions. Valid values:
	//
	// *   **alarm**: alerts
	// *   **null**: exceptions
	WarnType *string `json:"WarnType,omitempty" xml:"WarnType,omitempty"`
}

func (s OperationSuspEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s OperationSuspEventsRequest) GoString() string {
	return s.String()
}

func (s *OperationSuspEventsRequest) SetFrom(v string) *OperationSuspEventsRequest {
	s.From = &v
	return s
}

func (s *OperationSuspEventsRequest) SetOperation(v string) *OperationSuspEventsRequest {
	s.Operation = &v
	return s
}

func (s *OperationSuspEventsRequest) SetSourceIp(v string) *OperationSuspEventsRequest {
	s.SourceIp = &v
	return s
}

func (s *OperationSuspEventsRequest) SetSubOperation(v string) *OperationSuspEventsRequest {
	s.SubOperation = &v
	return s
}

func (s *OperationSuspEventsRequest) SetSuspiciousEventIds(v string) *OperationSuspEventsRequest {
	s.SuspiciousEventIds = &v
	return s
}

func (s *OperationSuspEventsRequest) SetWarnType(v string) *OperationSuspEventsRequest {
	s.WarnType = &v
	return s
}

type OperationSuspEventsResponseBody struct {
	// Indicates whether you have access permissions. Valid values:
	//
	// *   **pass**: yes
	// *   **no_permission**: no
	AccessCode *string `json:"AccessCode,omitempty" xml:"AccessCode,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether exceptions are handled. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s OperationSuspEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperationSuspEventsResponseBody) GoString() string {
	return s.String()
}

func (s *OperationSuspEventsResponseBody) SetAccessCode(v string) *OperationSuspEventsResponseBody {
	s.AccessCode = &v
	return s
}

func (s *OperationSuspEventsResponseBody) SetRequestId(v string) *OperationSuspEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *OperationSuspEventsResponseBody) SetSuccess(v bool) *OperationSuspEventsResponseBody {
	s.Success = &v
	return s
}

type OperationSuspEventsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OperationSuspEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OperationSuspEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s OperationSuspEventsResponse) GoString() string {
	return s.String()
}

func (s *OperationSuspEventsResponse) SetHeaders(v map[string]*string) *OperationSuspEventsResponse {
	s.Headers = v
	return s
}

func (s *OperationSuspEventsResponse) SetStatusCode(v int32) *OperationSuspEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *OperationSuspEventsResponse) SetBody(v *OperationSuspEventsResponseBody) *OperationSuspEventsResponse {
	s.Body = v
	return s
}

type PageImageRegistryRequest struct {
	CurrentPage           *int32    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize              *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegistryNameLike      *string   `json:"RegistryNameLike,omitempty" xml:"RegistryNameLike,omitempty"`
	RegistryTypeInList    []*string `json:"RegistryTypeInList,omitempty" xml:"RegistryTypeInList,omitempty" type:"Repeated"`
	RegistryTypeNotInList []*string `json:"RegistryTypeNotInList,omitempty" xml:"RegistryTypeNotInList,omitempty" type:"Repeated"`
	SourceIp              *string   `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s PageImageRegistryRequest) String() string {
	return tea.Prettify(s)
}

func (s PageImageRegistryRequest) GoString() string {
	return s.String()
}

func (s *PageImageRegistryRequest) SetCurrentPage(v int32) *PageImageRegistryRequest {
	s.CurrentPage = &v
	return s
}

func (s *PageImageRegistryRequest) SetPageSize(v int32) *PageImageRegistryRequest {
	s.PageSize = &v
	return s
}

func (s *PageImageRegistryRequest) SetRegistryNameLike(v string) *PageImageRegistryRequest {
	s.RegistryNameLike = &v
	return s
}

func (s *PageImageRegistryRequest) SetRegistryTypeInList(v []*string) *PageImageRegistryRequest {
	s.RegistryTypeInList = v
	return s
}

func (s *PageImageRegistryRequest) SetRegistryTypeNotInList(v []*string) *PageImageRegistryRequest {
	s.RegistryTypeNotInList = v
	return s
}

func (s *PageImageRegistryRequest) SetSourceIp(v string) *PageImageRegistryRequest {
	s.SourceIp = &v
	return s
}

type PageImageRegistryResponseBody struct {
	List      []*PageImageRegistryResponseBodyList   `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageInfo  *PageImageRegistryResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PageImageRegistryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PageImageRegistryResponseBody) GoString() string {
	return s.String()
}

func (s *PageImageRegistryResponseBody) SetList(v []*PageImageRegistryResponseBodyList) *PageImageRegistryResponseBody {
	s.List = v
	return s
}

func (s *PageImageRegistryResponseBody) SetPageInfo(v *PageImageRegistryResponseBodyPageInfo) *PageImageRegistryResponseBody {
	s.PageInfo = v
	return s
}

func (s *PageImageRegistryResponseBody) SetRequestId(v string) *PageImageRegistryResponseBody {
	s.RequestId = &v
	return s
}

type PageImageRegistryResponseBodyList struct {
	BlackList      *string `json:"BlackList,omitempty" xml:"BlackList,omitempty"`
	DomainName     *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GmtCreate      *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified    *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	ImageCount     *int32  `json:"ImageCount,omitempty" xml:"ImageCount,omitempty"`
	JenkinsEnv     *string `json:"JenkinsEnv,omitempty" xml:"JenkinsEnv,omitempty"`
	NetType        *int32  `json:"NetType,omitempty" xml:"NetType,omitempty"`
	Password       *string `json:"Password,omitempty" xml:"Password,omitempty"`
	PersistenceDay *int32  `json:"PersistenceDay,omitempty" xml:"PersistenceDay,omitempty"`
	ProtocolType   *int32  `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegistryHostIp *string `json:"RegistryHostIp,omitempty" xml:"RegistryHostIp,omitempty"`
	RegistryName   *string `json:"RegistryName,omitempty" xml:"RegistryName,omitempty"`
	RegistryType   *string `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
	Token          *string `json:"Token,omitempty" xml:"Token,omitempty"`
	TransPerHour   *int32  `json:"TransPerHour,omitempty" xml:"TransPerHour,omitempty"`
	UserName       *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	VpcId          *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	WhiteList      *string `json:"WhiteList,omitempty" xml:"WhiteList,omitempty"`
}

func (s PageImageRegistryResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s PageImageRegistryResponseBodyList) GoString() string {
	return s.String()
}

func (s *PageImageRegistryResponseBodyList) SetBlackList(v string) *PageImageRegistryResponseBodyList {
	s.BlackList = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetDomainName(v string) *PageImageRegistryResponseBodyList {
	s.DomainName = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetGmtCreate(v string) *PageImageRegistryResponseBodyList {
	s.GmtCreate = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetGmtModified(v string) *PageImageRegistryResponseBodyList {
	s.GmtModified = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetId(v int64) *PageImageRegistryResponseBodyList {
	s.Id = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetImageCount(v int32) *PageImageRegistryResponseBodyList {
	s.ImageCount = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetJenkinsEnv(v string) *PageImageRegistryResponseBodyList {
	s.JenkinsEnv = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetNetType(v int32) *PageImageRegistryResponseBodyList {
	s.NetType = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetPassword(v string) *PageImageRegistryResponseBodyList {
	s.Password = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetPersistenceDay(v int32) *PageImageRegistryResponseBodyList {
	s.PersistenceDay = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetProtocolType(v int32) *PageImageRegistryResponseBodyList {
	s.ProtocolType = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetRegionId(v string) *PageImageRegistryResponseBodyList {
	s.RegionId = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetRegistryHostIp(v string) *PageImageRegistryResponseBodyList {
	s.RegistryHostIp = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetRegistryName(v string) *PageImageRegistryResponseBodyList {
	s.RegistryName = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetRegistryType(v string) *PageImageRegistryResponseBodyList {
	s.RegistryType = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetToken(v string) *PageImageRegistryResponseBodyList {
	s.Token = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetTransPerHour(v int32) *PageImageRegistryResponseBodyList {
	s.TransPerHour = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetUserName(v string) *PageImageRegistryResponseBodyList {
	s.UserName = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetVpcId(v string) *PageImageRegistryResponseBodyList {
	s.VpcId = &v
	return s
}

func (s *PageImageRegistryResponseBodyList) SetWhiteList(v string) *PageImageRegistryResponseBodyList {
	s.WhiteList = &v
	return s
}

type PageImageRegistryResponseBodyPageInfo struct {
	Count       *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s PageImageRegistryResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s PageImageRegistryResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *PageImageRegistryResponseBodyPageInfo) SetCount(v int32) *PageImageRegistryResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *PageImageRegistryResponseBodyPageInfo) SetCurrentPage(v int32) *PageImageRegistryResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *PageImageRegistryResponseBodyPageInfo) SetPageSize(v int32) *PageImageRegistryResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *PageImageRegistryResponseBodyPageInfo) SetTotalCount(v int32) *PageImageRegistryResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type PageImageRegistryResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PageImageRegistryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PageImageRegistryResponse) String() string {
	return tea.Prettify(s)
}

func (s PageImageRegistryResponse) GoString() string {
	return s.String()
}

func (s *PageImageRegistryResponse) SetHeaders(v map[string]*string) *PageImageRegistryResponse {
	s.Headers = v
	return s
}

func (s *PageImageRegistryResponse) SetStatusCode(v int32) *PageImageRegistryResponse {
	s.StatusCode = &v
	return s
}

func (s *PageImageRegistryResponse) SetBody(v *PageImageRegistryResponseBody) *PageImageRegistryResponse {
	s.Body = v
	return s
}

type PauseClientRequest struct {
	// The list of servers for which you want to enable or disable the Security Center agent.
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
	// The status of the Security Center agent. Valid values:
	// - **0**: disabled
	// - **1**: enabled
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PauseClientRequest) String() string {
	return tea.Prettify(s)
}

func (s PauseClientRequest) GoString() string {
	return s.String()
}

func (s *PauseClientRequest) SetUuids(v string) *PauseClientRequest {
	s.Uuids = &v
	return s
}

func (s *PauseClientRequest) SetValue(v string) *PauseClientRequest {
	s.Value = &v
	return s
}

type PauseClientResponseBody struct {
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PauseClientResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PauseClientResponseBody) GoString() string {
	return s.String()
}

func (s *PauseClientResponseBody) SetRequestId(v string) *PauseClientResponseBody {
	s.RequestId = &v
	return s
}

type PauseClientResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PauseClientResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PauseClientResponse) String() string {
	return tea.Prettify(s)
}

func (s PauseClientResponse) GoString() string {
	return s.String()
}

func (s *PauseClientResponse) SetHeaders(v map[string]*string) *PauseClientResponse {
	s.Headers = v
	return s
}

func (s *PauseClientResponse) SetStatusCode(v int32) *PauseClientResponse {
	s.StatusCode = &v
	return s
}

func (s *PauseClientResponse) SetBody(v *PauseClientResponseBody) *PauseClientResponse {
	s.Body = v
	return s
}

type PublicCreateImageScanTaskRequest struct {
	// The SHA-256 value of the image digest. Separate multiple SHA-256 values with commas (,).
	Digests *string `json:"Digests,omitempty" xml:"Digests,omitempty"`
	// The ID of the Container Registry instance in which the image repository is created. Separate multiple IDs with commas (,).
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region ID of the image. Separate multiple IDs with commas (,).
	RegionIds *string `json:"RegionIds,omitempty" xml:"RegionIds,omitempty"`
	// The type of the image repository. Separate multiple types with commas (,). Valid values:
	//
	// *   **acr**
	// *   **harbor**
	// *   **quay**
	RegistryTypes *string `json:"RegistryTypes,omitempty" xml:"RegistryTypes,omitempty"`
	// The ID of the image repository. Separate multiple IDs with commas (,).
	RepoIds *string `json:"RepoIds,omitempty" xml:"RepoIds,omitempty"`
	// The name of the image repository. Separate multiple names with commas (,).
	RepoNames *string `json:"RepoNames,omitempty" xml:"RepoNames,omitempty"`
	// The namespace to which the image repository belongs. Separate multiple namespaces with commas (,).
	RepoNamespaces *string `json:"RepoNamespaces,omitempty" xml:"RepoNamespaces,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The tag that is added to the image. Separate multiple tags with commas (,).
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s PublicCreateImageScanTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s PublicCreateImageScanTaskRequest) GoString() string {
	return s.String()
}

func (s *PublicCreateImageScanTaskRequest) SetDigests(v string) *PublicCreateImageScanTaskRequest {
	s.Digests = &v
	return s
}

func (s *PublicCreateImageScanTaskRequest) SetInstanceIds(v string) *PublicCreateImageScanTaskRequest {
	s.InstanceIds = &v
	return s
}

func (s *PublicCreateImageScanTaskRequest) SetRegionIds(v string) *PublicCreateImageScanTaskRequest {
	s.RegionIds = &v
	return s
}

func (s *PublicCreateImageScanTaskRequest) SetRegistryTypes(v string) *PublicCreateImageScanTaskRequest {
	s.RegistryTypes = &v
	return s
}

func (s *PublicCreateImageScanTaskRequest) SetRepoIds(v string) *PublicCreateImageScanTaskRequest {
	s.RepoIds = &v
	return s
}

func (s *PublicCreateImageScanTaskRequest) SetRepoNames(v string) *PublicCreateImageScanTaskRequest {
	s.RepoNames = &v
	return s
}

func (s *PublicCreateImageScanTaskRequest) SetRepoNamespaces(v string) *PublicCreateImageScanTaskRequest {
	s.RepoNamespaces = &v
	return s
}

func (s *PublicCreateImageScanTaskRequest) SetSourceIp(v string) *PublicCreateImageScanTaskRequest {
	s.SourceIp = &v
	return s
}

func (s *PublicCreateImageScanTaskRequest) SetTags(v string) *PublicCreateImageScanTaskRequest {
	s.Tags = &v
	return s
}

type PublicCreateImageScanTaskResponseBody struct {
	// The data returned if the call is successful.
	Data *PublicCreateImageScanTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PublicCreateImageScanTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PublicCreateImageScanTaskResponseBody) GoString() string {
	return s.String()
}

func (s *PublicCreateImageScanTaskResponseBody) SetData(v *PublicCreateImageScanTaskResponseBodyData) *PublicCreateImageScanTaskResponseBody {
	s.Data = v
	return s
}

func (s *PublicCreateImageScanTaskResponseBody) SetRequestId(v string) *PublicCreateImageScanTaskResponseBody {
	s.RequestId = &v
	return s
}

type PublicCreateImageScanTaskResponseBodyData struct {
	// Indicates whether you can create more image scan tasks. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	//
	// >  By default, a maximum of 10 image scan tasks can be running at the same time. If 10 image scan tasks are running, you cannot create an image scan task by calling this operation. You must wait for at least one of the 10 existing image scan tasks to complete before you can create an image scan task.
	CanCreate *bool `json:"CanCreate,omitempty" xml:"CanCreate,omitempty"`
	// The timestamp when the information about the images was collected. Unit: milliseconds.
	CollectTime *int64 `json:"CollectTime,omitempty" xml:"CollectTime,omitempty"`
	// The timestamp when the image scan task started to run. Unit: milliseconds.
	ExecTime *int64 `json:"ExecTime,omitempty" xml:"ExecTime,omitempty"`
	// The number of images that have been scanned.
	FinishCount *int32 `json:"FinishCount,omitempty" xml:"FinishCount,omitempty"`
	// The progress of the image scan task. Unit: percent.
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The result of the image scan task. Valid values:
	//
	// *   **SUCCESS**: The task is successful.
	// *   **TASK_NOT_SUPPORT_REGION**: The images are deployed in a region that is not supported by container image scan.
	//
	// >  For more information about the regions supported by container image scan, see the "Regions supported by container image scan" section in this topic.
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// The status of the image scan task. Valid values:
	//
	// *   **INIT**: The task is being initialized.
	// *   **PRE_ANALYZER**: The task is being pre-processed.
	// *   **SUCCESS**: The task is successful.
	// *   **FAIL**: The task failed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the image scan task.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The total number of images that need to be scanned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s PublicCreateImageScanTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s PublicCreateImageScanTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *PublicCreateImageScanTaskResponseBodyData) SetCanCreate(v bool) *PublicCreateImageScanTaskResponseBodyData {
	s.CanCreate = &v
	return s
}

func (s *PublicCreateImageScanTaskResponseBodyData) SetCollectTime(v int64) *PublicCreateImageScanTaskResponseBodyData {
	s.CollectTime = &v
	return s
}

func (s *PublicCreateImageScanTaskResponseBodyData) SetExecTime(v int64) *PublicCreateImageScanTaskResponseBodyData {
	s.ExecTime = &v
	return s
}

func (s *PublicCreateImageScanTaskResponseBodyData) SetFinishCount(v int32) *PublicCreateImageScanTaskResponseBodyData {
	s.FinishCount = &v
	return s
}

func (s *PublicCreateImageScanTaskResponseBodyData) SetProgress(v int32) *PublicCreateImageScanTaskResponseBodyData {
	s.Progress = &v
	return s
}

func (s *PublicCreateImageScanTaskResponseBodyData) SetResult(v string) *PublicCreateImageScanTaskResponseBodyData {
	s.Result = &v
	return s
}

func (s *PublicCreateImageScanTaskResponseBodyData) SetStatus(v string) *PublicCreateImageScanTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *PublicCreateImageScanTaskResponseBodyData) SetTaskId(v string) *PublicCreateImageScanTaskResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *PublicCreateImageScanTaskResponseBodyData) SetTotalCount(v int32) *PublicCreateImageScanTaskResponseBodyData {
	s.TotalCount = &v
	return s
}

type PublicCreateImageScanTaskResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PublicCreateImageScanTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PublicCreateImageScanTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s PublicCreateImageScanTaskResponse) GoString() string {
	return s.String()
}

func (s *PublicCreateImageScanTaskResponse) SetHeaders(v map[string]*string) *PublicCreateImageScanTaskResponse {
	s.Headers = v
	return s
}

func (s *PublicCreateImageScanTaskResponse) SetStatusCode(v int32) *PublicCreateImageScanTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *PublicCreateImageScanTaskResponse) SetBody(v *PublicCreateImageScanTaskResponseBody) *PublicCreateImageScanTaskResponse {
	s.Body = v
	return s
}

type PublicPreCheckImageScanTaskRequest struct {
	// The SHA-256 value of the image digest. Separate multiple SHA-256 values with commas (,).
	Digests *string `json:"Digests,omitempty" xml:"Digests,omitempty"`
	// The ID of the Container Registry instance in which the image repository is created. Separate multiple IDs with commas (,).
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region ID of the image. Separate multiple IDs with commas (,).
	RegionIds *string `json:"RegionIds,omitempty" xml:"RegionIds,omitempty"`
	// The type of the image repository. Separate multiple types with commas (,). Valid values:
	//
	// *   **acr**
	// *   **harbor**
	// *   **quay**
	RegistryTypes *string `json:"RegistryTypes,omitempty" xml:"RegistryTypes,omitempty"`
	// The ID of the image repository. Separate multiple IDs with commas (,).
	RepoIds *string `json:"RepoIds,omitempty" xml:"RepoIds,omitempty"`
	// The name of the image repository. Separate multiple names with commas (,).
	RepoNames *string `json:"RepoNames,omitempty" xml:"RepoNames,omitempty"`
	// The namespace to which the image repository belongs. Separate multiple namespaces with commas (,).
	RepoNamespaces *string `json:"RepoNamespaces,omitempty" xml:"RepoNamespaces,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The tag that is added to the image. Separate multiple tags with commas (,).
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s PublicPreCheckImageScanTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s PublicPreCheckImageScanTaskRequest) GoString() string {
	return s.String()
}

func (s *PublicPreCheckImageScanTaskRequest) SetDigests(v string) *PublicPreCheckImageScanTaskRequest {
	s.Digests = &v
	return s
}

func (s *PublicPreCheckImageScanTaskRequest) SetInstanceIds(v string) *PublicPreCheckImageScanTaskRequest {
	s.InstanceIds = &v
	return s
}

func (s *PublicPreCheckImageScanTaskRequest) SetRegionIds(v string) *PublicPreCheckImageScanTaskRequest {
	s.RegionIds = &v
	return s
}

func (s *PublicPreCheckImageScanTaskRequest) SetRegistryTypes(v string) *PublicPreCheckImageScanTaskRequest {
	s.RegistryTypes = &v
	return s
}

func (s *PublicPreCheckImageScanTaskRequest) SetRepoIds(v string) *PublicPreCheckImageScanTaskRequest {
	s.RepoIds = &v
	return s
}

func (s *PublicPreCheckImageScanTaskRequest) SetRepoNames(v string) *PublicPreCheckImageScanTaskRequest {
	s.RepoNames = &v
	return s
}

func (s *PublicPreCheckImageScanTaskRequest) SetRepoNamespaces(v string) *PublicPreCheckImageScanTaskRequest {
	s.RepoNamespaces = &v
	return s
}

func (s *PublicPreCheckImageScanTaskRequest) SetSourceIp(v string) *PublicPreCheckImageScanTaskRequest {
	s.SourceIp = &v
	return s
}

func (s *PublicPreCheckImageScanTaskRequest) SetTags(v string) *PublicPreCheckImageScanTaskRequest {
	s.Tags = &v
	return s
}

type PublicPreCheckImageScanTaskResponseBody struct {
	// The data returned if the call is successful.
	Data *PublicPreCheckImageScanTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PublicPreCheckImageScanTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PublicPreCheckImageScanTaskResponseBody) GoString() string {
	return s.String()
}

func (s *PublicPreCheckImageScanTaskResponseBody) SetData(v *PublicPreCheckImageScanTaskResponseBodyData) *PublicPreCheckImageScanTaskResponseBody {
	s.Data = v
	return s
}

func (s *PublicPreCheckImageScanTaskResponseBody) SetRequestId(v string) *PublicPreCheckImageScanTaskResponseBody {
	s.RequestId = &v
	return s
}

type PublicPreCheckImageScanTaskResponseBodyData struct {
	// The number of images to scan in the task.
	NeedAuthCount *int32 `json:"NeedAuthCount,omitempty" xml:"NeedAuthCount,omitempty"`
	// The quota for container image scan to be consumed by the task.
	ScanImageCount *int32 `json:"ScanImageCount,omitempty" xml:"ScanImageCount,omitempty"`
}

func (s PublicPreCheckImageScanTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s PublicPreCheckImageScanTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *PublicPreCheckImageScanTaskResponseBodyData) SetNeedAuthCount(v int32) *PublicPreCheckImageScanTaskResponseBodyData {
	s.NeedAuthCount = &v
	return s
}

func (s *PublicPreCheckImageScanTaskResponseBodyData) SetScanImageCount(v int32) *PublicPreCheckImageScanTaskResponseBodyData {
	s.ScanImageCount = &v
	return s
}

type PublicPreCheckImageScanTaskResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PublicPreCheckImageScanTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PublicPreCheckImageScanTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s PublicPreCheckImageScanTaskResponse) GoString() string {
	return s.String()
}

func (s *PublicPreCheckImageScanTaskResponse) SetHeaders(v map[string]*string) *PublicPreCheckImageScanTaskResponse {
	s.Headers = v
	return s
}

func (s *PublicPreCheckImageScanTaskResponse) SetStatusCode(v int32) *PublicPreCheckImageScanTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *PublicPreCheckImageScanTaskResponse) SetBody(v *PublicPreCheckImageScanTaskResponseBody) *PublicPreCheckImageScanTaskResponse {
	s.Body = v
	return s
}

type PublicSyncAndCreateImageScanTaskRequest struct {
	// The information about the images. The value of this parameter is in the JSON format and contains the following fields:
	//
	// *   **RegistryType**: the type of the image repository. Valid values:
	//
	//     *   acr
	//     *   harbor
	//     *   quay
	//
	// *   **RepoId**: the ID of the image repository.
	//
	// *   **InstanceId**: the ID of the Container Registry instance to which the image repository belongs.
	//
	// *   **RepoNamespace**: the namespace to which the image repository belongs.
	//
	// *   **RegionId**: the region ID of the image.
	//
	// *   **RepoName**: the name of the image repository.
	//
	// *   **Digest**: the digest of the image.
	//
	// *   **Tag**: the tag that is added to the image.
	//
	// *   **CreateTime**: the timestamp when the image was created. Unit: milliseconds.
	//
	// *   **UpdateTime**: the timestamp when the image was updated. Unit: milliseconds.
	Images *string `json:"Images,omitempty" xml:"Images,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s PublicSyncAndCreateImageScanTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s PublicSyncAndCreateImageScanTaskRequest) GoString() string {
	return s.String()
}

func (s *PublicSyncAndCreateImageScanTaskRequest) SetImages(v string) *PublicSyncAndCreateImageScanTaskRequest {
	s.Images = &v
	return s
}

func (s *PublicSyncAndCreateImageScanTaskRequest) SetSourceIp(v string) *PublicSyncAndCreateImageScanTaskRequest {
	s.SourceIp = &v
	return s
}

type PublicSyncAndCreateImageScanTaskResponseBody struct {
	// The data returned if the call is successful.
	Data *PublicSyncAndCreateImageScanTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PublicSyncAndCreateImageScanTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PublicSyncAndCreateImageScanTaskResponseBody) GoString() string {
	return s.String()
}

func (s *PublicSyncAndCreateImageScanTaskResponseBody) SetData(v *PublicSyncAndCreateImageScanTaskResponseBodyData) *PublicSyncAndCreateImageScanTaskResponseBody {
	s.Data = v
	return s
}

func (s *PublicSyncAndCreateImageScanTaskResponseBody) SetRequestId(v string) *PublicSyncAndCreateImageScanTaskResponseBody {
	s.RequestId = &v
	return s
}

type PublicSyncAndCreateImageScanTaskResponseBodyData struct {
	// Indicates whether you can create more image scan tasks. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	//
	// >  By default, a maximum of 10 image scan tasks can be running at the same time. If 10 image scan tasks are running, you cannot create an image scan task by calling this operation. You must wait for at least one of the 10 existing image scan tasks to complete before you can create an image scan task.
	CanCreate *bool `json:"CanCreate,omitempty" xml:"CanCreate,omitempty"`
	// The timestamp when the image information was collected. Unit: milliseconds.
	CollectTime *int64 `json:"CollectTime,omitempty" xml:"CollectTime,omitempty"`
	// The timestamp when the image scan task started to run. Unit: milliseconds.
	ExecTime *int64 `json:"ExecTime,omitempty" xml:"ExecTime,omitempty"`
	// The number of images that have been scanned.
	FinishCount *int32 `json:"FinishCount,omitempty" xml:"FinishCount,omitempty"`
	// The progress of the image scan task.
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The result of the image scan task. Valid values:
	//
	// *   **SUCCESS**: The task is successful.
	// *   **TASK\_NOT\_SUPPORT_REGION**: The image is deployed in a region that is not supported by container image scan.
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// The status of the image scan task. Valid values:
	//
	// *   **INIT**: The task is being initialized.
	// *   **PRE_ANALYZER**: The task is being pre-processed.
	// *   **SUCCESS**: The task is successful.
	// *   **FAIL**: The task failed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the image scan task.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The total number of images to scan.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s PublicSyncAndCreateImageScanTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s PublicSyncAndCreateImageScanTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *PublicSyncAndCreateImageScanTaskResponseBodyData) SetCanCreate(v bool) *PublicSyncAndCreateImageScanTaskResponseBodyData {
	s.CanCreate = &v
	return s
}

func (s *PublicSyncAndCreateImageScanTaskResponseBodyData) SetCollectTime(v int64) *PublicSyncAndCreateImageScanTaskResponseBodyData {
	s.CollectTime = &v
	return s
}

func (s *PublicSyncAndCreateImageScanTaskResponseBodyData) SetExecTime(v int64) *PublicSyncAndCreateImageScanTaskResponseBodyData {
	s.ExecTime = &v
	return s
}

func (s *PublicSyncAndCreateImageScanTaskResponseBodyData) SetFinishCount(v int32) *PublicSyncAndCreateImageScanTaskResponseBodyData {
	s.FinishCount = &v
	return s
}

func (s *PublicSyncAndCreateImageScanTaskResponseBodyData) SetProgress(v int32) *PublicSyncAndCreateImageScanTaskResponseBodyData {
	s.Progress = &v
	return s
}

func (s *PublicSyncAndCreateImageScanTaskResponseBodyData) SetResult(v string) *PublicSyncAndCreateImageScanTaskResponseBodyData {
	s.Result = &v
	return s
}

func (s *PublicSyncAndCreateImageScanTaskResponseBodyData) SetStatus(v string) *PublicSyncAndCreateImageScanTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *PublicSyncAndCreateImageScanTaskResponseBodyData) SetTaskId(v string) *PublicSyncAndCreateImageScanTaskResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *PublicSyncAndCreateImageScanTaskResponseBodyData) SetTotalCount(v int32) *PublicSyncAndCreateImageScanTaskResponseBodyData {
	s.TotalCount = &v
	return s
}

type PublicSyncAndCreateImageScanTaskResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PublicSyncAndCreateImageScanTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PublicSyncAndCreateImageScanTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s PublicSyncAndCreateImageScanTaskResponse) GoString() string {
	return s.String()
}

func (s *PublicSyncAndCreateImageScanTaskResponse) SetHeaders(v map[string]*string) *PublicSyncAndCreateImageScanTaskResponse {
	s.Headers = v
	return s
}

func (s *PublicSyncAndCreateImageScanTaskResponse) SetStatusCode(v int32) *PublicSyncAndCreateImageScanTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *PublicSyncAndCreateImageScanTaskResponse) SetBody(v *PublicSyncAndCreateImageScanTaskResponseBody) *PublicSyncAndCreateImageScanTaskResponse {
	s.Body = v
	return s
}

type QueryDiscoverDatabaseRequest struct {
	CreateMark *string `json:"CreateMark,omitempty" xml:"CreateMark,omitempty"`
}

func (s QueryDiscoverDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDiscoverDatabaseRequest) GoString() string {
	return s.String()
}

func (s *QueryDiscoverDatabaseRequest) SetCreateMark(v string) *QueryDiscoverDatabaseRequest {
	s.CreateMark = &v
	return s
}

type QueryDiscoverDatabaseResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskProgress *int32  `json:"TaskProgress,omitempty" xml:"TaskProgress,omitempty"`
}

func (s QueryDiscoverDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDiscoverDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDiscoverDatabaseResponseBody) SetRequestId(v string) *QueryDiscoverDatabaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDiscoverDatabaseResponseBody) SetTaskProgress(v int32) *QueryDiscoverDatabaseResponseBody {
	s.TaskProgress = &v
	return s
}

type QueryDiscoverDatabaseResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryDiscoverDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDiscoverDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDiscoverDatabaseResponse) GoString() string {
	return s.String()
}

func (s *QueryDiscoverDatabaseResponse) SetHeaders(v map[string]*string) *QueryDiscoverDatabaseResponse {
	s.Headers = v
	return s
}

func (s *QueryDiscoverDatabaseResponse) SetStatusCode(v int32) *QueryDiscoverDatabaseResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDiscoverDatabaseResponse) SetBody(v *QueryDiscoverDatabaseResponseBody) *QueryDiscoverDatabaseResponse {
	s.Body = v
	return s
}

type QueryGroupIdByGroupNameRequest struct {
	// The name of the asset group.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s QueryGroupIdByGroupNameRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryGroupIdByGroupNameRequest) GoString() string {
	return s.String()
}

func (s *QueryGroupIdByGroupNameRequest) SetGroupName(v string) *QueryGroupIdByGroupNameRequest {
	s.GroupName = &v
	return s
}

func (s *QueryGroupIdByGroupNameRequest) SetSourceIp(v string) *QueryGroupIdByGroupNameRequest {
	s.SourceIp = &v
	return s
}

type QueryGroupIdByGroupNameResponseBody struct {
	// The ID of the asset group.
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryGroupIdByGroupNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryGroupIdByGroupNameResponseBody) GoString() string {
	return s.String()
}

func (s *QueryGroupIdByGroupNameResponseBody) SetGroupId(v int64) *QueryGroupIdByGroupNameResponseBody {
	s.GroupId = &v
	return s
}

func (s *QueryGroupIdByGroupNameResponseBody) SetRequestId(v string) *QueryGroupIdByGroupNameResponseBody {
	s.RequestId = &v
	return s
}

type QueryGroupIdByGroupNameResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryGroupIdByGroupNameResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryGroupIdByGroupNameResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryGroupIdByGroupNameResponse) GoString() string {
	return s.String()
}

func (s *QueryGroupIdByGroupNameResponse) SetHeaders(v map[string]*string) *QueryGroupIdByGroupNameResponse {
	s.Headers = v
	return s
}

func (s *QueryGroupIdByGroupNameResponse) SetStatusCode(v int32) *QueryGroupIdByGroupNameResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryGroupIdByGroupNameResponse) SetBody(v *QueryGroupIdByGroupNameResponseBody) *QueryGroupIdByGroupNameResponse {
	s.Body = v
	return s
}

type QueryGroupedSecurityEventMarkMissListRequest struct {
	// The number of the page to return. Default value: **1**.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The handling method. Valid values:
	//
	// *   **1**: Automatically Added to Whitelist
	// *   **2**: Defense Without Notification
	DisposalWay *string `json:"DisposalWay,omitempty" xml:"DisposalWay,omitempty"`
	// The name of the alert event. The value indicates a subtype.
	EventName *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	// The ID of the request source. Set the value to sas.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// The language of the content within the request and response. Default value: **zh**. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The condition that is used to query alert events by asset. You can specify a value of the following types:
	//
	// *   The IP address of the asset.
	// *   The public IP address of the asset.
	// *   The private IP address of the asset.
	// *   The name of the asset.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s QueryGroupedSecurityEventMarkMissListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryGroupedSecurityEventMarkMissListRequest) GoString() string {
	return s.String()
}

func (s *QueryGroupedSecurityEventMarkMissListRequest) SetCurrentPage(v int32) *QueryGroupedSecurityEventMarkMissListRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListRequest) SetDisposalWay(v string) *QueryGroupedSecurityEventMarkMissListRequest {
	s.DisposalWay = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListRequest) SetEventName(v string) *QueryGroupedSecurityEventMarkMissListRequest {
	s.EventName = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListRequest) SetFrom(v string) *QueryGroupedSecurityEventMarkMissListRequest {
	s.From = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListRequest) SetLang(v string) *QueryGroupedSecurityEventMarkMissListRequest {
	s.Lang = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListRequest) SetPageSize(v int32) *QueryGroupedSecurityEventMarkMissListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListRequest) SetRemark(v string) *QueryGroupedSecurityEventMarkMissListRequest {
	s.Remark = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListRequest) SetSourceIp(v string) *QueryGroupedSecurityEventMarkMissListRequest {
	s.SourceIp = &v
	return s
}

type QueryGroupedSecurityEventMarkMissListResponseBody struct {
	// The status code returned. The status code **200** indicates that the request is successful. Other status codes indicate that the request fails. You can identify the cause of the failure based on the status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// An array that consists of the whitelist rules.
	List []*QueryGroupedSecurityEventMarkMissListResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The pagination information.
	PageInfo *QueryGroupedSecurityEventMarkMissListResponseBodyPageInfo `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryGroupedSecurityEventMarkMissListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryGroupedSecurityEventMarkMissListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBody) SetCode(v string) *QueryGroupedSecurityEventMarkMissListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBody) SetList(v []*QueryGroupedSecurityEventMarkMissListResponseBodyList) *QueryGroupedSecurityEventMarkMissListResponseBody {
	s.List = v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBody) SetMessage(v string) *QueryGroupedSecurityEventMarkMissListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBody) SetPageInfo(v *QueryGroupedSecurityEventMarkMissListResponseBodyPageInfo) *QueryGroupedSecurityEventMarkMissListResponseBody {
	s.PageInfo = v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBody) SetRequestId(v string) *QueryGroupedSecurityEventMarkMissListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBody) SetSuccess(v bool) *QueryGroupedSecurityEventMarkMissListResponseBody {
	s.Success = &v
	return s
}

type QueryGroupedSecurityEventMarkMissListResponseBodyList struct {
	// The ID of the user.
	AliUid *int64 `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	// The handling method. Valid values:
	//
	// *   **auto\_add_white**: Automatically Added to Whitelist
	// *   **defense\_not_notification**: Defense Without Notification
	DisposalWay *string `json:"DisposalWay,omitempty" xml:"DisposalWay,omitempty"`
	// The name of the alert event. The value indicates a subtype.
	EventName *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	// The name of the alert event. The value indicates a type.
	EventNameOriginal *string `json:"EventNameOriginal,omitempty" xml:"EventNameOriginal,omitempty"`
	// The subtype of the alert event.
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The type of the alert event.
	EventTypeOriginal *string `json:"EventTypeOriginal,omitempty" xml:"EventTypeOriginal,omitempty"`
	// The field that is used in the whitelist rule.
	Field *string `json:"Field,omitempty" xml:"Field,omitempty"`
	// The value of the field.
	FieldValue *string `json:"FieldValue,omitempty" xml:"FieldValue,omitempty"`
	// The alias of the field.
	FiledAliasName *string `json:"FiledAliasName,omitempty" xml:"FiledAliasName,omitempty"`
	// The operator. Valid values:
	//
	// *   **contains**: contains
	// *   **notContains**: does not contain
	// *   **strEqual**: equals
	// *   **strNotEqual**: does not equal
	// *   **regex**: regular expression
	Operate *string `json:"Operate,omitempty" xml:"Operate,omitempty"`
	// The UUIDs of assets. Multiple UUIDs are separated by commas (,).
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s QueryGroupedSecurityEventMarkMissListResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryGroupedSecurityEventMarkMissListResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyList) SetAliUid(v int64) *QueryGroupedSecurityEventMarkMissListResponseBodyList {
	s.AliUid = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyList) SetDisposalWay(v string) *QueryGroupedSecurityEventMarkMissListResponseBodyList {
	s.DisposalWay = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyList) SetEventName(v string) *QueryGroupedSecurityEventMarkMissListResponseBodyList {
	s.EventName = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyList) SetEventNameOriginal(v string) *QueryGroupedSecurityEventMarkMissListResponseBodyList {
	s.EventNameOriginal = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyList) SetEventType(v string) *QueryGroupedSecurityEventMarkMissListResponseBodyList {
	s.EventType = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyList) SetEventTypeOriginal(v string) *QueryGroupedSecurityEventMarkMissListResponseBodyList {
	s.EventTypeOriginal = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyList) SetField(v string) *QueryGroupedSecurityEventMarkMissListResponseBodyList {
	s.Field = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyList) SetFieldValue(v string) *QueryGroupedSecurityEventMarkMissListResponseBodyList {
	s.FieldValue = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyList) SetFiledAliasName(v string) *QueryGroupedSecurityEventMarkMissListResponseBodyList {
	s.FiledAliasName = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyList) SetOperate(v string) *QueryGroupedSecurityEventMarkMissListResponseBodyList {
	s.Operate = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyList) SetUuids(v string) *QueryGroupedSecurityEventMarkMissListResponseBodyList {
	s.Uuids = &v
	return s
}

type QueryGroupedSecurityEventMarkMissListResponseBodyPageInfo struct {
	// The number of entries returned on the current page.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The page number of the returned page.
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// The number of entries returned per page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryGroupedSecurityEventMarkMissListResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryGroupedSecurityEventMarkMissListResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyPageInfo) SetCount(v int32) *QueryGroupedSecurityEventMarkMissListResponseBodyPageInfo {
	s.Count = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyPageInfo) SetCurrentPage(v int32) *QueryGroupedSecurityEventMarkMissListResponseBodyPageInfo {
	s.CurrentPage = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyPageInfo) SetPageSize(v int32) *QueryGroupedSecurityEventMarkMissListResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponseBodyPageInfo) SetTotalCount(v int32) *QueryGroupedSecurityEventMarkMissListResponseBodyPageInfo {
	s.TotalCount = &v
	return s
}

type QueryGroupedSecurityEventMarkMissListResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryGroupedSecurityEventMarkMissListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryGroupedSecurityEventMarkMissListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryGroupedSecurityEventMarkMissListResponse) GoString() string {
	return s.String()
}

func (s *QueryGroupedSecurityEventMarkMissListResponse) SetHeaders(v map[string]*string) *QueryGroupedSecurityEventMarkMissListResponse {
	s.Headers = v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponse) SetStatusCode(v int32) *QueryGroupedSecurityEventMarkMissListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryGroupedSecurityEventMarkMissListResponse) SetBody(v *QueryGroupedSecurityEventMarkMissListResponseBody) *QueryGroupedSecurityEventMarkMissListResponse {
	s.Body = v
	return s
}

type QueryJenkinsImageRegistryPersistenceDayRequest struct {
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s QueryJenkinsImageRegistryPersistenceDayRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJenkinsImageRegistryPersistenceDayRequest) GoString() string {
	return s.String()
}

func (s *QueryJenkinsImageRegistryPersistenceDayRequest) SetSourceIp(v string) *QueryJenkinsImageRegistryPersistenceDayRequest {
	s.SourceIp = &v
	return s
}

type QueryJenkinsImageRegistryPersistenceDayResponseBody struct {
	Data           *int32  `json:"Data,omitempty" xml:"Data,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TimeCost       *int64  `json:"TimeCost,omitempty" xml:"TimeCost,omitempty"`
}

func (s QueryJenkinsImageRegistryPersistenceDayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryJenkinsImageRegistryPersistenceDayResponseBody) GoString() string {
	return s.String()
}

func (s *QueryJenkinsImageRegistryPersistenceDayResponseBody) SetData(v int32) *QueryJenkinsImageRegistryPersistenceDayResponseBody {
	s.Data = &v
	return s
}

func (s *QueryJenkinsImageRegistryPersistenceDayResponseBody) SetHttpStatusCode(v int32) *QueryJenkinsImageRegistryPersistenceDayResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *QueryJenkinsImageRegistryPersistenceDayResponseBody) SetRequestId(v string) *QueryJenkinsImageRegistryPersistenceDayResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryJenkinsImageRegistryPersistenceDayResponseBody) SetTimeCost(v int64) *QueryJenkinsImageRegistryPersistenceDayResponseBody {
	s.TimeCost = &v
	return s
}

type QueryJenkinsImageRegistryPersistenceDayResponse struct {
	Headers    map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryJenkinsImageRegistryPersistenceDayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryJenkinsImageRegistryPersistenceDayResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJenkinsImageRegistryPersistenceDayResponse) GoString() string {
	return s.String()
}

func (s *QueryJenkinsImageRegistryPersistenceDayResponse) SetHeaders(v map[string]*string) *QueryJenkinsImageRegistryPersistenceDayResponse {
	s.Headers = v
	return s
}

func (s *QueryJenkinsImageRegistryPersistenceDayResponse) SetStatusCode(v int32) *QueryJenkinsImageRegistryPersistenceDayResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryJenkinsImageRegistryPersistenceDayResponse) SetBody(v *QueryJenkinsImageRegistryPersistenceDayResponseBody) *QueryJenkinsImageRegistryPersistenceDayResponse {
	s.Body = v
	return s
}

type QueryPreCheckDatabaseRequest struct {
	InstanceUuid *string `json:"InstanceUuid,omitempty" xml:"InstanceUuid,omitempty"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	UniRegionId  *string `json:"UniRegionId,omitempty" xml:"UniRegionId,omitempty"`
}

func (s QueryPreCheckDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPreCheckDatabaseRequest) GoString() string {
	return s.String()
}

func (s *QueryPreCheckDatabaseRequest) SetInstanceUuid(v string) *QueryPreCheckDatabaseRequest {
	s.InstanceUuid = &v
	return s
}

func (s *QueryPreCheckDatabaseRequest) SetTaskId(v string) *QueryPreCheckDatabaseRequest {
	s.TaskId = &v
	return s
}

func (s *QueryPreCheckDatabaseRequest) SetUniRegionId(v string) *QueryPreCheckDatabaseRequest {
	s.UniRegionId = &v
	return s
}

type QueryPreCheckDatabaseResponseBody struct {
	CompletedTime *int64  `json:"CompletedTime,omitempty" xml:"CompletedTime,omitempty"`
	CreatedTime   *int64  `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Progress      *int32  `json:"Progress,omitempty" xml:"Progress,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result        *string `json:"Result,omitempty" xml:"Result,omitempty"`
	UpdatedTime   *int64  `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s QueryPreCheckDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPreCheckDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPreCheckDatabaseResponseBody) SetCompletedTime(v int64) *QueryPreCheckDatabaseResponseBody {
	s.CompletedTime = &v
	return s
}

func (s *QueryPreCheckDatabaseResponseBody) SetCreatedTime(v int64) *QueryPreCheckDatabaseResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *QueryPreCheckDatabaseResponseBody) SetDescription(v string) *QueryPreCheckDatabaseResponseBody {
	s.Description = &v
	return s
}

func (s *QueryPreCheckDatabaseResponseBody) SetProgress(v int32) *QueryPreCheckDatabaseResponseBody {
	s.Progress = &v
	return s
}

func (s *QueryPreCheckDatabaseResponseBody) SetRequestId(v string) *QueryPreCheckDatabaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPreCheckDatabaseResponseBody) SetResult(v string) *QueryPreCheckDatabaseResponseBody {
	s.Result = &v
	return s
}

func (s *QueryPreCheckDatabaseResponseBody) SetUpdatedTime(v int64) *QueryPreCheckDatabaseResponseBody {
	s.UpdatedTime = &v
	return s
}

type QueryPreCheckDatabaseResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryPreCheckDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryPreCheckDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPreCheckDatabaseResponse) GoString() string {
	return s.String()
}

func (s *QueryPreCheckDatabaseResponse) SetHeaders(v map[string]*string) *QueryPreCheckDatabaseResponse {
	s.Headers = v
	return s
}

func (s *QueryPreCheckDatabaseResponse) SetStatusCode(v int32) *QueryPreCheckDatabaseResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPreCheckDatabaseResponse) SetBody(v *QueryPreCheckDatabaseResponseBody) *QueryPreCheckDatabaseResponse {
	s.Body = v
	return s
}

type RebootMachineRequest struct {
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s RebootMachineRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootMachineRequest) GoString() string {
	return s.String()
}

func (s *RebootMachineRequest) SetUuid(v string) *RebootMachineRequest {
	s.Uuid = &v
	return s
}

type RebootMachineResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootMachineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebootMachineResponseBody) GoString() string {
	return s.String()
}

func (s *RebootMachineResponseBody) SetRequestId(v string) *RebootMachineResponseBody {
	s.RequestId = &v
	return s
}

type RebootMachineResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RebootMachineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RebootMachineResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootMachineResponse) GoString() string {
	return s.String()
}

func (s *RebootMachineResponse) SetHeaders(v map[string]*string) *RebootMachineResponse {
	s.Headers = v
	return s
}

func (s *RebootMachineResponse) SetStatusCode(v int32) *RebootMachineResponse {
	s.StatusCode = &v
	return s
}

func (s *RebootMachineResponse) SetBody(v *RebootMachineResponseBody) *RebootMachineResponse {
	s.Body = v
	return s
}

type RefreshAssetsRequest struct {
	// The type of the asset that you want to synchronize.default **ecs**, Valid values:
	//
	// *   **cloud_product**: Alibaba Cloud service
	// *   **ecs**: Elastic Compute Service (ECS) instance
	// *   **container_image**: container image
	AssetType *string `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
	// The subtype of the cloud service.
	//
	// >  The following list describes the subtypes of cloud services.
	CloudAssetSubType *int32 `json:"CloudAssetSubType,omitempty" xml:"CloudAssetSubType,omitempty"`
	// The type of the cloud service. Valid values:
	//
	// *   **0**: ECS
	// *   **1**: Server Load Balancer (SLB)
	// *   **3**: ApsaraDB RDS
	// *   **4**: ApsaraDB for MongoDB (MongoDB)
	// *   **5**: ApsaraDB for Redis (Redis)
	// *   **6**: Container Registry
	// *   **8**: Container Service for Kubernetes (ACK)
	// *   **9**: Virtual Private Cloud (VPC)
	// *   **11**: ActionTrail
	// *   **12**: Alibaba Cloud CDN (CDN)
	// *   **13**: Certificate Management Service (formerly SSL Certificates Service)
	// *   **14**: Apsara Devops
	// *   **15**: Resource Access Management (RAM)
	// *   **16**: Anti-DDoS
	// *   **17**: Web Application Firewall (WAF)
	// *   **18**: Object Storage Service (OSS)
	// *   **19**: PolarDB
	// *   **20**: ApsaraDB RDS for PostgreSQL
	// *   **21**: Microservices Engine (MSE)
	// *   **22**: Apsara File Storage NAS (NAS)
	// *   **23**: Data Security Center (DSC)
	// *   **24**: Elastic IP Address (EIP)
	CloudAssetType *int32 `json:"CloudAssetType,omitempty" xml:"CloudAssetType,omitempty"`
}

func (s RefreshAssetsRequest) String() string {
	return tea.Prettify(s)
}

func (s RefreshAssetsRequest) GoString() string {
	return s.String()
}

func (s *RefreshAssetsRequest) SetAssetType(v string) *RefreshAssetsRequest {
	s.AssetType = &v
	return s
}

func (s *RefreshAssetsRequest) SetCloudAssetSubType(v int32) *RefreshAssetsRequest {
	s.CloudAssetSubType = &v
	return s
}

func (s *RefreshAssetsRequest) SetCloudAssetType(v int32) *RefreshAssetsRequest {
	s.CloudAssetType = &v
	return s
}

type RefreshAssetsResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RefreshAssetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefreshAssetsResponseBody) GoString() string {
	return s.String()
}

func (s *RefreshAssetsResponseBody) SetRequestId(v string) *RefreshAssetsResponseBody {
	s.RequestId = &v
	return s
}

type RefreshAssetsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RefreshAssetsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RefreshAssetsResponse) String() string {
	return tea.Prettify(s)
}

func (s RefreshAssetsResponse) GoString() string {
	return s.String()
}

func (s *RefreshAssetsResponse) SetHeaders(v map[string]*string) *RefreshAssetsResponse {
	s.Headers = v
	return s
}

func (s *RefreshAssetsResponse) SetStatusCode(v int32) *RefreshAssetsResponse {
	s.StatusCode = &v
	return s
}

func (s *RefreshAssetsResponse) SetBody(v *RefreshAssetsResponseBody) *RefreshAssetsResponse {
	s.Body = v
	return s
}

type RefreshContainerAssetsRequest struct {
	// The type of the container asset whose statistics you want to refresh. Valid values:
	//
	// *   **IMAGE**
	// *   **CONTAINER**
	AssetType *string `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
}

func (s RefreshContainerAssetsRequest) String() string {
	return tea.Prettify(s)
}

func (s RefreshContainerAssetsRequest) GoString() string {
	return s.String()
}

func (s *RefreshContainerAssetsRequest) SetAssetType(v string) *RefreshContainerAssetsRequest {
	s.AssetType = &v
	return s
}

type RefreshContainerAssetsResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RefreshContainerAssetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefreshContainerAssetsResponseBody) GoString() string {
	return s.String()
}

func (s *RefreshContainerAssetsResponseBody) SetRequestId(v string) *RefreshContainerAssetsResponseBody {
	s.RequestId = &v
	return s
}

type RefreshContainerAssetsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RefreshContainerAssetsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RefreshContainerAssetsResponse) String() string {
	return tea.Prettify(s)
}

func (s RefreshContainerAssetsResponse) GoString() string {
	return s.String()
}

func (s *RefreshContainerAssetsResponse) SetHeaders(v map[string]*string) *RefreshContainerAssetsResponse {
	s.Headers = v
	return s
}

func (s *RefreshContainerAssetsResponse) SetStatusCode(v int32) *RefreshContainerAssetsResponse {
	s.StatusCode = &v
	return s
}

func (s *RefreshContainerAssetsResponse) SetBody(v *RefreshContainerAssetsResponseBody) *RefreshContainerAssetsResponse {
	s.Body = v
	return s
}

type RemoveCheckInstanceResultWhiteListRequest struct {
	CheckId     *int64    `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
}

func (s RemoveCheckInstanceResultWhiteListRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveCheckInstanceResultWhiteListRequest) GoString() string {
	return s.String()
}

func (s *RemoveCheckInstanceResultWhiteListRequest) SetCheckId(v int64) *RemoveCheckInstanceResultWhiteListRequest {
	s.CheckId = &v
	return s
}

func (s *RemoveCheckInstanceResultWhiteListRequest) SetInstanceIds(v []*string) *RemoveCheckInstanceResultWhiteListRequest {
	s.InstanceIds = v
	return s
}

type RemoveCheckInstanceResultWhiteListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveCheckInstanceResultWhiteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveCheckInstanceResultWhiteListResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveCheckInstanceResultWhiteListResponseBody) SetRequestId(v string) *RemoveCheckInstanceResultWhiteListResponseBody {
	s.RequestId = &v
	return s
}

type RemoveCheckInstanceResultWhiteListResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveCheckInstanceResultWhiteListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveCheckInstanceResultWhiteListResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveCheckInstanceResultWhiteListResponse) GoString() string {
	return s.String()
}

func (s *RemoveCheckInstanceResultWhiteListResponse) SetHeaders(v map[string]*string) *RemoveCheckInstanceResultWhiteListResponse {
	s.Headers = v
	return s
}

func (s *RemoveCheckInstanceResultWhiteListResponse) SetStatusCode(v int32) *RemoveCheckInstanceResultWhiteListResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveCheckInstanceResultWhiteListResponse) SetBody(v *RemoveCheckInstanceResultWhiteListResponseBody) *RemoveCheckInstanceResultWhiteListResponse {
	s.Body = v
	return s
}

type RemoveCheckResultWhiteListRequest struct {
	CheckGroupId *string  `json:"CheckGroupId,omitempty" xml:"CheckGroupId,omitempty"`
	CheckIds     []*int64 `json:"CheckIds,omitempty" xml:"CheckIds,omitempty" type:"Repeated"`
	Type         *string  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s RemoveCheckResultWhiteListRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveCheckResultWhiteListRequest) GoString() string {
	return s.String()
}

func (s *RemoveCheckResultWhiteListRequest) SetCheckGroupId(v string) *RemoveCheckResultWhiteListRequest {
	s.CheckGroupId = &v
	return s
}

func (s *RemoveCheckResultWhiteListRequest) SetCheckIds(v []*int64) *RemoveCheckResultWhiteListRequest {
	s.CheckIds = v
	return s
}

func (s *RemoveCheckResultWhiteListRequest) SetType(v string) *RemoveCheckResultWhiteListRequest {
	s.Type = &v
	return s
}

type RemoveCheckResultWhiteListResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RemoveCheckResultWhiteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveCheckResultWhiteListResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveCheckResultWhiteListResponseBody) SetCode(v string) *RemoveCheckResultWhiteListResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveCheckResultWhiteListResponseBody) SetMessage(v string) *RemoveCheckResultWhiteListResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveCheckResultWhiteListResponseBody) SetRequestId(v string) *RemoveCheckResultWhiteListResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveCheckResultWhiteListResponseBody) SetSuccess(v bool) *RemoveCheckResultWhiteListResponseBody {
	s.Success = &v
	return s
}

type RemoveCheckResultWhiteListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveCheckResultWhiteListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveCheckResultWhiteListResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveCheckResultWhiteListResponse) GoString() string {
	return s.String()
}

func (s *RemoveCheckResultWhiteListResponse) SetHeaders(v map[string]*string) *RemoveCheckResultWhiteListResponse {
	s.Headers = v
	return s
}

func (s *RemoveCheckResultWhiteListResponse) SetStatusCode(v int32) *RemoveCheckResultWhiteListResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveCheckResultWhiteListResponse) SetBody(v *RemoveCheckResultWhiteListResponseBody) *RemoveCheckResultWhiteListResponse {
	s.Body = v
	return s
}

type RollbackSuspEventQuaraFileRequest struct {
	// The ID of the request source. Set the value to sas.
	From *string `json:"From,omitempty" xml:"From,omitempty"`
	// The ID of the quarantined file.
	// > If you do not configure this parameter, you cannot call the RollbackSuspEventQuaraFile operation to restore a quarantined file. You can call the [DescribeSuspEventQuaraFiles](~~DescribeSuspEventQuaraFiles~~) operation to query the IDs of quarantined files.
	QuaraFileId *int32 `json:"QuaraFileId,omitempty" xml:"QuaraFileId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s RollbackSuspEventQuaraFileRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackSuspEventQuaraFileRequest) GoString() string {
	return s.String()
}

func (s *RollbackSuspEventQuaraFileRequest) SetFrom(v string) *RollbackSuspEventQuaraFileRequest {
	s.From = &v
	return s
}

func (s *RollbackSuspEventQuaraFileRequest) SetQuaraFileId(v int32) *RollbackSuspEventQuaraFileRequest {
	s.QuaraFileId = &v
	return s
}

func (s *RollbackSuspEventQuaraFileRequest) SetSourceIp(v string) *RollbackSuspEventQuaraFileRequest {
	s.SourceIp = &v
	return s
}

type RollbackSuspEventQuaraFileResponseBody struct {
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RollbackSuspEventQuaraFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RollbackSuspEventQuaraFileResponseBody) GoString() string {
	return s.String()
}

func (s *RollbackSuspEventQuaraFileResponseBody) SetRequestId(v string) *RollbackSuspEventQuaraFileResponseBody {
	s.RequestId = &v
	return s
}

type RollbackSuspEventQuaraFileResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RollbackSuspEventQuaraFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RollbackSuspEventQuaraFileResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackSuspEventQuaraFileResponse) GoString() string {
	return s.String()
}

func (s *RollbackSuspEventQuaraFileResponse) SetHeaders(v map[string]*string) *RollbackSuspEventQuaraFileResponse {
	s.Headers = v
	return s
}

func (s *RollbackSuspEventQuaraFileResponse) SetStatusCode(v int32) *RollbackSuspEventQuaraFileResponse {
	s.StatusCode = &v
	return s
}

func (s *RollbackSuspEventQuaraFileResponse) SetBody(v *RollbackSuspEventQuaraFileResponseBody) *RollbackSuspEventQuaraFileResponse {
	s.Body = v
	return s
}

type SasInstallCodeRequest struct {
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s SasInstallCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s SasInstallCodeRequest) GoString() string {
	return s.String()
}

func (s *SasInstallCodeRequest) SetSourceIp(v string) *SasInstallCodeRequest {
	s.SourceIp = &v
	return s
}

type SasInstallCodeResponseBody struct {
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The installation verification code that is used to run the installation command when you manually install the Security Center agent.
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s SasInstallCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SasInstallCodeResponseBody) GoString() string {
	return s.String()
}

func (s *SasInstallCodeResponseBody) SetRequestId(v string) *SasInstallCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *SasInstallCodeResponseBody) SetData(v string) *SasInstallCodeResponseBody {
	s.Data = &v
	return s
}

type SasInstallCodeResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SasInstallCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SasInstallCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s SasInstallCodeResponse) GoString() string {
	return s.String()
}

func (s *SasInstallCodeResponse) SetHeaders(v map[string]*string) *SasInstallCodeResponse {
	s.Headers = v
	return s
}

func (s *SasInstallCodeResponse) SetStatusCode(v int32) *SasInstallCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *SasInstallCodeResponse) SetBody(v *SasInstallCodeResponseBody) *SasInstallCodeResponse {
	s.Body = v
	return s
}

type SaveImageBaselineStrategyRequest struct {
	BaselineItemList *string `json:"BaselineItemList,omitempty" xml:"BaselineItemList,omitempty"`
	Lang             *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	StrategyId       *int64  `json:"StrategyId,omitempty" xml:"StrategyId,omitempty"`
	StrategyName     *string `json:"StrategyName,omitempty" xml:"StrategyName,omitempty"`
}

func (s SaveImageBaselineStrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveImageBaselineStrategyRequest) GoString() string {
	return s.String()
}

func (s *SaveImageBaselineStrategyRequest) SetBaselineItemList(v string) *SaveImageBaselineStrategyRequest {
	s.BaselineItemList = &v
	return s
}

func (s *SaveImageBaselineStrategyRequest) SetLang(v string) *SaveImageBaselineStrategyRequest {
	s.Lang = &v
	return s
}

func (s *SaveImageBaselineStrategyRequest) SetStrategyId(v int64) *SaveImageBaselineStrategyRequest {
	s.StrategyId = &v
	return s
}

func (s *SaveImageBaselineStrategyRequest) SetStrategyName(v string) *SaveImageBaselineStrategyRequest {
	s.StrategyName = &v
	return s
}

type SaveImageBaselineStrategyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SaveImageBaselineStrategyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveImageBaselineStrategyResponseBody) GoString() string {
	return s.String()
}

func (s *SaveImageBaselineStrategyResponseBody) SetRequestId(v string) *SaveImageBaselineStrategyResponseBody {
	s.RequestId = &v
	return s
}

type SaveImageBaselineStrategyResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveImageBaselineStrategyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveImageBaselineStrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveImageBaselineStrategyResponse) GoString() string {
	return s.String()
}

func (s *SaveImageBaselineStrategyResponse) SetHeaders(v map[string]*string) *SaveImageBaselineStrategyResponse {
	s.Headers = v
	return s
}

func (s *SaveImageBaselineStrategyResponse) SetStatusCode(v int32) *SaveImageBaselineStrategyResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveImageBaselineStrategyResponse) SetBody(v *SaveImageBaselineStrategyResponseBody) *SaveImageBaselineStrategyResponse {
	s.Body = v
	return s
}

type SaveSuspEventUserSettingRequest struct {
	From     *string `json:"From,omitempty" xml:"From,omitempty"`
	LevelsOn *string `json:"LevelsOn,omitempty" xml:"LevelsOn,omitempty"`
}

func (s SaveSuspEventUserSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveSuspEventUserSettingRequest) GoString() string {
	return s.String()
}

func (s *SaveSuspEventUserSettingRequest) SetFrom(v string) *SaveSuspEventUserSettingRequest {
	s.From = &v
	return s
}

func (s *SaveSuspEventUserSettingRequest) SetLevelsOn(v string) *SaveSuspEventUserSettingRequest {
	s.LevelsOn = &v
	return s
}

type SaveSuspEventUserSettingResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveSuspEventUserSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveSuspEventUserSettingResponseBody) GoString() string {
	return s.String()
}

func (s *SaveSuspEventUserSettingResponseBody) SetCode(v string) *SaveSuspEventUserSettingResponseBody {
	s.Code = &v
	return s
}

func (s *SaveSuspEventUserSettingResponseBody) SetMessage(v string) *SaveSuspEventUserSettingResponseBody {
	s.Message = &v
	return s
}

func (s *SaveSuspEventUserSettingResponseBody) SetRequestId(v string) *SaveSuspEventUserSettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveSuspEventUserSettingResponseBody) SetSuccess(v bool) *SaveSuspEventUserSettingResponseBody {
	s.Success = &v
	return s
}

type SaveSuspEventUserSettingResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveSuspEventUserSettingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveSuspEventUserSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveSuspEventUserSettingResponse) GoString() string {
	return s.String()
}

func (s *SaveSuspEventUserSettingResponse) SetHeaders(v map[string]*string) *SaveSuspEventUserSettingResponse {
	s.Headers = v
	return s
}

func (s *SaveSuspEventUserSettingResponse) SetStatusCode(v int32) *SaveSuspEventUserSettingResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveSuspEventUserSettingResponse) SetBody(v *SaveSuspEventUserSettingResponseBody) *SaveSuspEventUserSettingResponse {
	s.Body = v
	return s
}

type SetClusterInterceptionConfigRequest struct {
	ClusterIds *string `json:"ClusterIds,omitempty" xml:"ClusterIds,omitempty"`
	SwitchOn   *int32  `json:"SwitchOn,omitempty" xml:"SwitchOn,omitempty"`
	SwitchType *int32  `json:"SwitchType,omitempty" xml:"SwitchType,omitempty"`
}

func (s SetClusterInterceptionConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetClusterInterceptionConfigRequest) GoString() string {
	return s.String()
}

func (s *SetClusterInterceptionConfigRequest) SetClusterIds(v string) *SetClusterInterceptionConfigRequest {
	s.ClusterIds = &v
	return s
}

func (s *SetClusterInterceptionConfigRequest) SetSwitchOn(v int32) *SetClusterInterceptionConfigRequest {
	s.SwitchOn = &v
	return s
}

func (s *SetClusterInterceptionConfigRequest) SetSwitchType(v int32) *SetClusterInterceptionConfigRequest {
	s.SwitchType = &v
	return s
}

type SetClusterInterceptionConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s SetClusterInterceptionConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetClusterInterceptionConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetClusterInterceptionConfigResponseBody) SetRequestId(v string) *SetClusterInterceptionConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetClusterInterceptionConfigResponseBody) SetResult(v bool) *SetClusterInterceptionConfigResponseBody {
	s.Result = &v
	return s
}

type SetClusterInterceptionConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetClusterInterceptionConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetClusterInterceptionConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetClusterInterceptionConfigResponse) GoString() string {
	return s.String()
}

func (s *SetClusterInterceptionConfigResponse) SetHeaders(v map[string]*string) *SetClusterInterceptionConfigResponse {
	s.Headers = v
	return s
}

func (s *SetClusterInterceptionConfigResponse) SetStatusCode(v int32) *SetClusterInterceptionConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetClusterInterceptionConfigResponse) SetBody(v *SetClusterInterceptionConfigResponseBody) *SetClusterInterceptionConfigResponse {
	s.Body = v
	return s
}

type SetRegistryScanDayNumRequest struct {
	ScanDayNum *int32 `json:"ScanDayNum,omitempty" xml:"ScanDayNum,omitempty"`
}

func (s SetRegistryScanDayNumRequest) String() string {
	return tea.Prettify(s)
}

func (s SetRegistryScanDayNumRequest) GoString() string {
	return s.String()
}

func (s *SetRegistryScanDayNumRequest) SetScanDayNum(v int32) *SetRegistryScanDayNumRequest {
	s.ScanDayNum = &v
	return s
}

type SetRegistryScanDayNumResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetRegistryScanDayNumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetRegistryScanDayNumResponseBody) GoString() string {
	return s.String()
}

func (s *SetRegistryScanDayNumResponseBody) SetRequestId(v string) *SetRegistryScanDayNumResponseBody {
	s.RequestId = &v
	return s
}

type SetRegistryScanDayNumResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetRegistryScanDayNumResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetRegistryScanDayNumResponse) String() string {
	return tea.Prettify(s)
}

func (s SetRegistryScanDayNumResponse) GoString() string {
	return s.String()
}

func (s *SetRegistryScanDayNumResponse) SetHeaders(v map[string]*string) *SetRegistryScanDayNumResponse {
	s.Headers = v
	return s
}

func (s *SetRegistryScanDayNumResponse) SetStatusCode(v int32) *SetRegistryScanDayNumResponse {
	s.StatusCode = &v
	return s
}

func (s *SetRegistryScanDayNumResponse) SetBody(v *SetRegistryScanDayNumResponseBody) *SetRegistryScanDayNumResponse {
	s.Body = v
	return s
}

type StartBaselineSecurityCheckRequest struct {
	// The IDs of the check items.
	//
	// >  To perform a check task on cloud service configurations, you must specify the IDs of the check items. You can call the  [DescribeRiskItemType ](~~DescribeRiskItemType~~)  operation to query the IDs of check items.
	ItemIds []*int64 `json:"ItemIds,omitempty" xml:"ItemIds,omitempty" type:"Repeated"`
	// The language of the content within the request and the response. Valid values:
	//
	// *   **zh**: Chinese
	// *   **en**: English
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The source IP address of the request.
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	// The type of the check task. Valid values:
	//
	// *   **check**
	// *   **verify**
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s StartBaselineSecurityCheckRequest) String() string {
	return tea.Prettify(s)
}

func (s StartBaselineSecurityCheckRequest) GoString() string {
	return s.String()
}

func (s *StartBaselineSecurityCheckRequest) SetItemIds(v []*int64) *StartBaselineSecurityCheckRequest {
	s.ItemIds = v
	return s
}

func (s *StartBaselineSecurityCheckRequest) SetLang(v string) *StartBaselineSecurityCheckRequest {
	s.Lang = &v
	return s
}

func (s *StartBaselineSecurityCheckRequest) SetResourceOwnerId(v int64) *StartBaselineSecurityCheckRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StartBaselineSecurityCheckRequest) SetSourceIp(v string) *StartBaselineSecurityCheckRequest {
	s.SourceIp = &v
	return s
}

func (s *StartBaselineSecurityCheckRequest) SetType(v string) *StartBaselineSecurityCheckRequest {
	s.Type = &v
	return s
}

type StartBaselineSecurityCheckResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartBaselineSecurityCheckResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartBaselineSecurityCheckResponseBody) GoString() string {
	return s.String()
}

func (s *StartBaselineSecurityCheckResponseBody) SetRequestId(v string) *StartBaselineSecurityCheckResponseBody {
	s.RequestId = &v
	return s
}

type StartBaselineSecurityCheckResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartBaselineSecurityCheckResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartBaselineSecurityCheckResponse) String() string {
	return tea.Prettify(s)
}

func (s StartBaselineSecurityCheckResponse) GoString() string {
	return s.String()
}

func (s *StartBaselineSecurityCheckResponse) SetHeaders(v map[string]*string) *StartBaselineSecurityCheckResponse {
	s.Headers = v
	return s
}

func (s *StartBaselineSecurityCheckResponse) SetStatusCode(v int32) *StartBaselineSecurityCheckResponse {
	s.StatusCode = &v
	return s
}

func (s *StartBaselineSecurityCheckResponse) SetBody(v *StartBaselineSecurityCheckResponseBody) *StartBaselineSecurityCheckResponse {
	s.Body = v
	return s
}

type StartDiscoverDatabaseTaskResponseBody struct {
	CreateMark *string `json:"CreateMark,omitempty" xml:"CreateMark,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartDiscoverDatabaseTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartDiscoverDatabaseTaskResponseBody) GoString() string {
	return s.String()
}

func (s *StartDiscoverDatabaseTaskResponseBody) SetCreateMark(v string) *StartDiscoverDatabaseTaskResponseBody {
	s.CreateMark = &v
	return s
}

func (s *StartDiscoverDatabaseTaskResponseBody) SetRequestId(v string) *StartDiscoverDatabaseTaskResponseBody {
	s.RequestId = &v
	return s
}

type StartDiscoverDatabaseTaskResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartDiscoverDatabaseTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartDiscoverDatabaseTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDiscoverDatabaseTaskResponse) GoString() string {
	return s.String()
}

func (s *StartDiscoverDatabaseTaskResponse) SetHeaders(v map[string]*string) *StartDiscoverDatabaseTaskResponse {
	s.Headers = v
	return s
}

func (s *StartDiscoverDatabaseTaskResponse) SetStatusCode(v int32) *StartDiscoverDatabaseTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *StartDiscoverDatabaseTaskResponse) SetBody(v *StartDiscoverDatabaseTaskResponseBody) *StartDiscoverDatabaseTaskResponse {
	s.Body = v
	return s
}

type StartPreCheckDatabaseRequest struct {
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	InstanceUuid *string `json:"InstanceUuid,omitempty" xml:"InstanceUuid,omitempty"`
	UniRegionId  *string `json:"UniRegionId,omitempty" xml:"UniRegionId,omitempty"`
}

func (s StartPreCheckDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s StartPreCheckDatabaseRequest) GoString() string {
	return s.String()
}

func (s *StartPreCheckDatabaseRequest) SetDatabaseType(v string) *StartPreCheckDatabaseRequest {
	s.DatabaseType = &v
	return s
}

func (s *StartPreCheckDatabaseRequest) SetInstanceUuid(v string) *StartPreCheckDatabaseRequest {
	s.InstanceUuid = &v
	return s
}

func (s *StartPreCheckDatabaseRequest) SetUniRegionId(v string) *StartPreCheckDatabaseRequest {
	s.UniRegionId = &v
	return s
}

type StartPreCheckDatabaseResponseBody struct {
	CreateMark *string `json:"CreateMark,omitempty" xml:"CreateMark,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartPreCheckDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartPreCheckDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *StartPreCheckDatabaseResponseBody) SetCreateMark(v string) *StartPreCheckDatabaseResponseBody {
	s.CreateMark = &v
	return s
}

func (s *StartPreCheckDatabaseResponseBody) SetRequestId(v string) *StartPreCheckDatabaseResponseBody {
	s.RequestId = &v
	return s
}

type StartPreCheckDatabaseResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartPreCheckDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartPreCheckDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s StartPreCheckDatabaseResponse) GoString() string {
	return s.String()
}

func (s *StartPreCheckDatabaseResponse) SetHeaders(v map[string]*string) *StartPreCheckDatabaseResponse {
	s.Headers = v
	return s
}

func (s *StartPreCheckDatabaseResponse) SetStatusCode(v int32) *StartPreCheckDatabaseResponse {
	s.StatusCode = &v
	return s
}

func (s *StartPreCheckDatabaseResponse) SetBody(v *StartPreCheckDatabaseResponseBody) *StartPreCheckDatabaseResponse {
	s.Body = v
	return s
}

type StartVirusScanTaskRequest struct {
	// The information about the asset on which you want to perform a virus scan task. You can select servers or server groups to scan for viruses. The value is a string that consists of JSON arrays. Each element in a JSON array is a JSON struct that contains the following fields:
	//
	// *   **type**: the type of the asset on which you want to perform a virus scan task. Valid values:
	//
	//     *   **groupId**: server group.
	//     *   **uuid**: server.
	//
	// *   **name**: the name of the server or server group.
	//
	// *   **target**: the asset on which you want to perform a virus scan task.
	//
	//     *   If you set **type** to **groupId**, you must set this field to the ID of the server group. You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of server groups.
	//     *   If you set **type** to **uuid**, you must set this field to the UUID of the server. You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.
	TargetInfo *string `json:"TargetInfo,omitempty" xml:"TargetInfo,omitempty"`
}

func (s StartVirusScanTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s StartVirusScanTaskRequest) GoString() string {
	return s.String()
}

func (s *StartVirusScanTaskRequest) SetTargetInfo(v string) *StartVirusScanTaskRequest {
	s.TargetInfo = &v
	return s
}

type StartVirusScanTaskResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the virus scan task.
	ScanTaskId *int64 `json:"ScanTaskId,omitempty" xml:"ScanTaskId,omitempty"`
}

func (s StartVirusScanTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartVirusScanTaskResponseBody) GoString() string {
	return s.String()
}

func (s *StartVirusScanTaskResponseBody) SetRequestId(v string) *StartVirusScanTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartVirusScanTaskResponseBody) SetScanTaskId(v int64) *StartVirusScanTaskResponseBody {
	s.ScanTaskId = &v
	return s
}

type StartVirusScanTaskResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartVirusScanTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartVirusScanTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s StartVirusScanTaskResponse) GoString() string {
	return s.String()
}

func (s *StartVirusScanTaskResponse) SetHeaders(v map[string]*string) *StartVirusScanTaskResponse {
	s.Headers = v
	return s
}

func (s *StartVirusScanTaskResponse) SetStatusCode(v int32) *StartVirusScanTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *StartVirusScanTaskResponse) SetBody(v *StartVirusScanTaskResponseBody) *StartVirusScanTaskResponse {
	s.Body = v
	return s
}

type SubmitCheckResponseBody struct {
	Data      *SubmitCheckResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId    *string                      `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s SubmitCheckResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitCheckResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitCheckResponseBody) SetData(v *SubmitCheckResponseBodyData) *SubmitCheckResponseBody {
	s.Data = v
	return s
}

func (s *SubmitCheckResponseBody) SetRequestId(v string) *SubmitCheckResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitCheckResponseBody) SetTaskId(v string) *SubmitCheckResponseBody {
	s.TaskId = &v
	return s
}

type SubmitCheckResponseBodyData struct {
	OperateCode *string `json:"OperateCode,omitempty" xml:"OperateCode,omitempty"`
}

func (s SubmitCheckResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitCheckResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitCheckResponseBodyData) SetOperateCode(v string) *SubmitCheckResponseBodyData {
	s.OperateCode = &v
	return s
}

type SubmitCheckResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitCheckResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitCheckResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitCheckResponse) GoString() string {
	return s.String()
}

func (s *SubmitCheckResponse) SetHeaders(v map[string]*string) *SubmitCheckResponse {
	s.Headers = v
	return s
}

func (s *SubmitCheckResponse) SetStatusCode(v int32) *SubmitCheckResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitCheckResponse) SetBody(v *SubmitCheckResponseBody) *SubmitCheckResponse {
	s.Body = v
	return s
}

type UnbindAegisRequest struct {
	Uuids *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s UnbindAegisRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindAegisRequest) GoString() string {
	return s.String()
}

func (s *UnbindAegisRequest) SetUuids(v string) *UnbindAegisRequest {
	s.Uuids = &v
	return s
}

type UnbindAegisResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindAegisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindAegisResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindAegisResponseBody) SetRequestId(v string) *UnbindAegisResponseBody {
	s.RequestId = &v
	return s
}

type UnbindAegisResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UnbindAegisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindAegisResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindAegisResponse) GoString() string {
	return s.String()
}

func (s *UnbindAegisResponse) SetHeaders(v map[string]*string) *UnbindAegisResponse {
	s.Headers = v
	return s
}

func (s *UnbindAegisResponse) SetStatusCode(v int32) *UnbindAegisResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindAegisResponse) SetBody(v *UnbindAegisResponseBody) *UnbindAegisResponse {
	s.Body = v
	return s
}

type UninstallBackupClientRequest struct {
	// The version of the anti-ransomware policy. You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the versions of anti-ransomware policies. Valid values:
	//
	// *   **1.0.0**
	// *   **2.0.0**
	PolicyVersion *string `json:"PolicyVersion,omitempty" xml:"PolicyVersion,omitempty"`
	// The UUID of the server from which you want to uninstall the anti-ransomware agent.
	//
	// >  You must specify at least one of the UuidList and Uuid parameters.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The UUIDs of the servers from which you want to uninstall the anti-ransomware agent.
	//
	// >  You must specify at least one of the UuidList and Uuid parameters.
	UuidList []*string `json:"UuidList,omitempty" xml:"UuidList,omitempty" type:"Repeated"`
}

func (s UninstallBackupClientRequest) String() string {
	return tea.Prettify(s)
}

func (s UninstallBackupClientRequest) GoString() string {
	return s.String()
}

func (s *UninstallBackupClientRequest) SetPolicyVersion(v string) *UninstallBackupClientRequest {
	s.PolicyVersion = &v
	return s
}

func (s *UninstallBackupClientRequest) SetUuid(v string) *UninstallBackupClientRequest {
	s.Uuid = &v
	return s
}

func (s *UninstallBackupClientRequest) SetUuidList(v []*string) *UninstallBackupClientRequest {
	s.UuidList = v
	return s
}

type UninstallBackupClientResponseBody struct {
	// The ID of the request, which is used to locate and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UninstallBackupClientResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UninstallBackupClientResponseBody) GoString() string {
	return s.String()
}

func (s *UninstallBackupClientResponseBody) SetRequestId(v string) *UninstallBackupClientResponseBody {
	s.RequestId = &v
	return s
}

type UninstallBackupClientResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UninstallBackupClientResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UninstallBackupClientResponse) String() string {
	return tea.Prettify(s)
}

func (s UninstallBackupClientResponse) GoString() string {
	return s.String()
}

func (s *UninstallBackupClientResponse) SetHeaders(v map[string]*string) *UninstallBackupClientResponse {
	s.Headers = v
	return s
}

func (s *UninstallBackupClientResponse) SetStatusCode(v int32) *UninstallBackupClientResponse {
	s.StatusCode = &v
	return s
}

func (s *UninstallBackupClientResponse) SetBody(v *UninstallBackupClientResponseBody) *UninstallBackupClientResponse {
	s.Body = v
	return s
}

type UninstallUniBackupAgentRequest struct {
	PolicyId *int64 `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
}

func (s UninstallUniBackupAgentRequest) String() string {
	return tea.Prettify(s)
}

func (s UninstallUniBackupAgentRequest) GoString() string {
	return s.String()
}

func (s *UninstallUniBackupAgentRequest) SetPolicyId(v int64) *UninstallUniBackupAgentRequest {
	s.PolicyId = &v
	return s
}

type UninstallUniBackupAgentResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UninstallUniBackupAgentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UninstallUniBackupAgentResponseBody) GoString() string {
	return s.String()
}

func (s *UninstallUniBackupAgentResponseBody) SetRequestId(v string) *UninstallUniBackupAgentResponseBody {
	s.RequestId = &v
	return s
}

type UninstallUniBackupAgentResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UninstallUniBackupAgentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UninstallUniBackupAgentResponse) String() string {
	return tea.Prettify(s)
}

func (s UninstallUniBackupAgentResponse) GoString() string {
	return s.String()
}

func (s *UninstallUniBackupAgentResponse) SetHeaders(v map[string]*string) *UninstallUniBackupAgentResponse {
	s.Headers = v
	return s
}

func (s *UninstallUniBackupAgentResponse) SetStatusCode(v int32) *UninstallUniBackupAgentResponse {
	s.StatusCode = &v
	return s
}

func (s *UninstallUniBackupAgentResponse) SetBody(v *UninstallUniBackupAgentResponseBody) *UninstallUniBackupAgentResponse {
	s.Body = v
	return s
}

type UpdateHoneypotRequest struct {
	HoneypotId   *string `json:"HoneypotId,omitempty" xml:"HoneypotId,omitempty"`
	HoneypotName *string `json:"HoneypotName,omitempty" xml:"HoneypotName,omitempty"`
	Meta         *string `json:"Meta,omitempty" xml:"Meta,omitempty"`
}

func (s UpdateHoneypotRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateHoneypotRequest) GoString() string {
	return s.String()
}

func (s *UpdateHoneypotRequest) SetHoneypotId(v string) *UpdateHoneypotRequest {
	s.HoneypotId = &v
	return s
}

func (s *UpdateHoneypotRequest) SetHoneypotName(v string) *UpdateHoneypotRequest {
	s.HoneypotName = &v
	return s
}

func (s *UpdateHoneypotRequest) SetMeta(v string) *UpdateHoneypotRequest {
	s.Meta = &v
	return s
}

type UpdateHoneypotResponseBody struct {
	Code           *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *UpdateHoneypotResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateHoneypotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateHoneypotResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateHoneypotResponseBody) SetCode(v string) *UpdateHoneypotResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateHoneypotResponseBody) SetData(v *UpdateHoneypotResponseBodyData) *UpdateHoneypotResponseBody {
	s.Data = v
	return s
}

func (s *UpdateHoneypotResponseBody) SetHttpStatusCode(v int32) *UpdateHoneypotResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateHoneypotResponseBody) SetMessage(v string) *UpdateHoneypotResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateHoneypotResponseBody) SetRequestId(v string) *UpdateHoneypotResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateHoneypotResponseBody) SetSuccess(v bool) *UpdateHoneypotResponseBody {
	s.Success = &v
	return s
}

type UpdateHoneypotResponseBodyData struct {
	HoneypotId               *string   `json:"HoneypotId,omitempty" xml:"HoneypotId,omitempty"`
	HoneypotImageDisplayName *string   `json:"HoneypotImageDisplayName,omitempty" xml:"HoneypotImageDisplayName,omitempty"`
	HoneypotImageName        *string   `json:"HoneypotImageName,omitempty" xml:"HoneypotImageName,omitempty"`
	HoneypotName             *string   `json:"HoneypotName,omitempty" xml:"HoneypotName,omitempty"`
	NodeId                   *string   `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	PresetId                 *string   `json:"PresetId,omitempty" xml:"PresetId,omitempty"`
	State                    []*string `json:"State,omitempty" xml:"State,omitempty" type:"Repeated"`
}

func (s UpdateHoneypotResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateHoneypotResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateHoneypotResponseBodyData) SetHoneypotId(v string) *UpdateHoneypotResponseBodyData {
	s.HoneypotId = &v
	return s
}

func (s *UpdateHoneypotResponseBodyData) SetHoneypotImageDisplayName(v string) *UpdateHoneypotResponseBodyData {
	s.HoneypotImageDisplayName = &v
	return s
}

func (s *UpdateHoneypotResponseBodyData) SetHoneypotImageName(v string) *UpdateHoneypotResponseBodyData {
	s.HoneypotImageName = &v
	return s
}

func (s *UpdateHoneypotResponseBodyData) SetHoneypotName(v string) *UpdateHoneypotResponseBodyData {
	s.HoneypotName = &v
	return s
}

func (s *UpdateHoneypotResponseBodyData) SetNodeId(v string) *UpdateHoneypotResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *UpdateHoneypotResponseBodyData) SetPresetId(v string) *UpdateHoneypotResponseBodyData {
	s.PresetId = &v
	return s
}

func (s *UpdateHoneypotResponseBodyData) SetState(v []*string) *UpdateHoneypotResponseBodyData {
	s.State = v
	return s
}

type UpdateHoneypotResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateHoneypotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateHoneypotResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateHoneypotResponse) GoString() string {
	return s.String()
}

func (s *UpdateHoneypotResponse) SetHeaders(v map[string]*string) *UpdateHoneypotResponse {
	s.Headers = v
	return s
}

func (s *UpdateHoneypotResponse) SetStatusCode(v int32) *UpdateHoneypotResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateHoneypotResponse) SetBody(v *UpdateHoneypotResponseBody) *UpdateHoneypotResponse {
	s.Body = v
	return s
}

type UpdateHoneypotNodeRequest struct {
	AvailableProbeNum        *int32    `json:"AvailableProbeNum,omitempty" xml:"AvailableProbeNum,omitempty"`
	NodeId                   *string   `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName                 *string   `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	SecurityGroupProbeIpList []*string `json:"SecurityGroupProbeIpList,omitempty" xml:"SecurityGroupProbeIpList,omitempty" type:"Repeated"`
}

func (s UpdateHoneypotNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateHoneypotNodeRequest) GoString() string {
	return s.String()
}

func (s *UpdateHoneypotNodeRequest) SetAvailableProbeNum(v int32) *UpdateHoneypotNodeRequest {
	s.AvailableProbeNum = &v
	return s
}

func (s *UpdateHoneypotNodeRequest) SetNodeId(v string) *UpdateHoneypotNodeRequest {
	s.NodeId = &v
	return s
}

func (s *UpdateHoneypotNodeRequest) SetNodeName(v string) *UpdateHoneypotNodeRequest {
	s.NodeName = &v
	return s
}

func (s *UpdateHoneypotNodeRequest) SetSecurityGroupProbeIpList(v []*string) *UpdateHoneypotNodeRequest {
	s.SecurityGroupProbeIpList = v
	return s
}

type UpdateHoneypotNodeResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateHoneypotNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateHoneypotNodeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateHoneypotNodeResponseBody) SetCode(v string) *UpdateHoneypotNodeResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateHoneypotNodeResponseBody) SetHttpStatusCode(v int32) *UpdateHoneypotNodeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateHoneypotNodeResponseBody) SetMessage(v string) *UpdateHoneypotNodeResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateHoneypotNodeResponseBody) SetRequestId(v string) *UpdateHoneypotNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateHoneypotNodeResponseBody) SetSuccess(v bool) *UpdateHoneypotNodeResponseBody {
	s.Success = &v
	return s
}

type UpdateHoneypotNodeResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateHoneypotNodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateHoneypotNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateHoneypotNodeResponse) GoString() string {
	return s.String()
}

func (s *UpdateHoneypotNodeResponse) SetHeaders(v map[string]*string) *UpdateHoneypotNodeResponse {
	s.Headers = v
	return s
}

func (s *UpdateHoneypotNodeResponse) SetStatusCode(v int32) *UpdateHoneypotNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateHoneypotNodeResponse) SetBody(v *UpdateHoneypotNodeResponseBody) *UpdateHoneypotNodeResponse {
	s.Body = v
	return s
}

type UpdateHoneypotPresetRequest struct {
	HoneypotImageName *string `json:"HoneypotImageName,omitempty" xml:"HoneypotImageName,omitempty"`
	HoneypotPresetId  *string `json:"HoneypotPresetId,omitempty" xml:"HoneypotPresetId,omitempty"`
	Meta              *string `json:"Meta,omitempty" xml:"Meta,omitempty"`
	PresetName        *string `json:"PresetName,omitempty" xml:"PresetName,omitempty"`
}

func (s UpdateHoneypotPresetRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateHoneypotPresetRequest) GoString() string {
	return s.String()
}

func (s *UpdateHoneypotPresetRequest) SetHoneypotImageName(v string) *UpdateHoneypotPresetRequest {
	s.HoneypotImageName = &v
	return s
}

func (s *UpdateHoneypotPresetRequest) SetHoneypotPresetId(v string) *UpdateHoneypotPresetRequest {
	s.HoneypotPresetId = &v
	return s
}

func (s *UpdateHoneypotPresetRequest) SetMeta(v string) *UpdateHoneypotPresetRequest {
	s.Meta = &v
	return s
}

func (s *UpdateHoneypotPresetRequest) SetPresetName(v string) *UpdateHoneypotPresetRequest {
	s.PresetName = &v
	return s
}

type UpdateHoneypotPresetResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateHoneypotPresetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateHoneypotPresetResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateHoneypotPresetResponseBody) SetCode(v string) *UpdateHoneypotPresetResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateHoneypotPresetResponseBody) SetHttpStatusCode(v int32) *UpdateHoneypotPresetResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateHoneypotPresetResponseBody) SetMessage(v string) *UpdateHoneypotPresetResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateHoneypotPresetResponseBody) SetRequestId(v string) *UpdateHoneypotPresetResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateHoneypotPresetResponseBody) SetSuccess(v bool) *UpdateHoneypotPresetResponseBody {
	s.Success = &v
	return s
}

type UpdateHoneypotPresetResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateHoneypotPresetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateHoneypotPresetResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateHoneypotPresetResponse) GoString() string {
	return s.String()
}

func (s *UpdateHoneypotPresetResponse) SetHeaders(v map[string]*string) *UpdateHoneypotPresetResponse {
	s.Headers = v
	return s
}

func (s *UpdateHoneypotPresetResponse) SetStatusCode(v int32) *UpdateHoneypotPresetResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateHoneypotPresetResponse) SetBody(v *UpdateHoneypotPresetResponseBody) *UpdateHoneypotPresetResponse {
	s.Body = v
	return s
}

type UpdateHoneypotProbeRequest struct {
	Arp           *bool     `json:"Arp,omitempty" xml:"Arp,omitempty"`
	DisplayName   *string   `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Ping          *bool     `json:"Ping,omitempty" xml:"Ping,omitempty"`
	ProbeId       *string   `json:"ProbeId,omitempty" xml:"ProbeId,omitempty"`
	ServiceIpList []*string `json:"ServiceIpList,omitempty" xml:"ServiceIpList,omitempty" type:"Repeated"`
}

func (s UpdateHoneypotProbeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateHoneypotProbeRequest) GoString() string {
	return s.String()
}

func (s *UpdateHoneypotProbeRequest) SetArp(v bool) *UpdateHoneypotProbeRequest {
	s.Arp = &v
	return s
}

func (s *UpdateHoneypotProbeRequest) SetDisplayName(v string) *UpdateHoneypotProbeRequest {
	s.DisplayName = &v
	return s
}

func (s *UpdateHoneypotProbeRequest) SetPing(v bool) *UpdateHoneypotProbeRequest {
	s.Ping = &v
	return s
}

func (s *UpdateHoneypotProbeRequest) SetProbeId(v string) *UpdateHoneypotProbeRequest {
	s.ProbeId = &v
	return s
}

func (s *UpdateHoneypotProbeRequest) SetServiceIpList(v []*string) *UpdateHoneypotProbeRequest {
	s.ServiceIpList = v
	return s
}

type UpdateHoneypotProbeResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateHoneypotProbeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateHoneypotProbeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateHoneypotProbeResponseBody) SetCode(v string) *UpdateHoneypotProbeResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateHoneypotProbeResponseBody) SetHttpStatusCode(v int32) *UpdateHoneypotProbeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateHoneypotProbeResponseBody) SetMessage(v string) *UpdateHoneypotProbeResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateHoneypotProbeResponseBody) SetRequestId(v string) *UpdateHoneypotProbeResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateHoneypotProbeResponseBody) SetSuccess(v bool) *UpdateHoneypotProbeResponseBody {
	s.Success = &v
	return s
}

type UpdateHoneypotProbeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateHoneypotProbeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateHoneypotProbeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateHoneypotProbeResponse) GoString() string {
	return s.String()
}

func (s *UpdateHoneypotProbeResponse) SetHeaders(v map[string]*string) *UpdateHoneypotProbeResponse {
	s.Headers = v
	return s
}

func (s *UpdateHoneypotProbeResponse) SetStatusCode(v int32) *UpdateHoneypotProbeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateHoneypotProbeResponse) SetBody(v *UpdateHoneypotProbeResponseBody) *UpdateHoneypotProbeResponse {
	s.Body = v
	return s
}

type UpdateJenkinsImageRegistryNameRequest struct {
	RegistryId   *int64  `json:"RegistryId,omitempty" xml:"RegistryId,omitempty"`
	RegistryName *string `json:"RegistryName,omitempty" xml:"RegistryName,omitempty"`
	SourceIp     *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s UpdateJenkinsImageRegistryNameRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateJenkinsImageRegistryNameRequest) GoString() string {
	return s.String()
}

func (s *UpdateJenkinsImageRegistryNameRequest) SetRegistryId(v int64) *UpdateJenkinsImageRegistryNameRequest {
	s.RegistryId = &v
	return s
}

func (s *UpdateJenkinsImageRegistryNameRequest) SetRegistryName(v string) *UpdateJenkinsImageRegistryNameRequest {
	s.RegistryName = &v
	return s
}

func (s *UpdateJenkinsImageRegistryNameRequest) SetSourceIp(v string) *UpdateJenkinsImageRegistryNameRequest {
	s.SourceIp = &v
	return s
}

type UpdateJenkinsImageRegistryNameResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TimeCost       *int64  `json:"TimeCost,omitempty" xml:"TimeCost,omitempty"`
}

func (s UpdateJenkinsImageRegistryNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateJenkinsImageRegistryNameResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateJenkinsImageRegistryNameResponseBody) SetData(v bool) *UpdateJenkinsImageRegistryNameResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateJenkinsImageRegistryNameResponseBody) SetHttpStatusCode(v int32) *UpdateJenkinsImageRegistryNameResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateJenkinsImageRegistryNameResponseBody) SetRequestId(v string) *UpdateJenkinsImageRegistryNameResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateJenkinsImageRegistryNameResponseBody) SetTimeCost(v int64) *UpdateJenkinsImageRegistryNameResponseBody {
	s.TimeCost = &v
	return s
}

type UpdateJenkinsImageRegistryNameResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateJenkinsImageRegistryNameResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateJenkinsImageRegistryNameResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateJenkinsImageRegistryNameResponse) GoString() string {
	return s.String()
}

func (s *UpdateJenkinsImageRegistryNameResponse) SetHeaders(v map[string]*string) *UpdateJenkinsImageRegistryNameResponse {
	s.Headers = v
	return s
}

func (s *UpdateJenkinsImageRegistryNameResponse) SetStatusCode(v int32) *UpdateJenkinsImageRegistryNameResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateJenkinsImageRegistryNameResponse) SetBody(v *UpdateJenkinsImageRegistryNameResponseBody) *UpdateJenkinsImageRegistryNameResponse {
	s.Body = v
	return s
}

type UpdateJenkinsImageRegistryPersistenceDayRequest struct {
	PersistenceDay *int32  `json:"PersistenceDay,omitempty" xml:"PersistenceDay,omitempty"`
	RegistryId     *int64  `json:"RegistryId,omitempty" xml:"RegistryId,omitempty"`
	SourceIp       *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
}

func (s UpdateJenkinsImageRegistryPersistenceDayRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateJenkinsImageRegistryPersistenceDayRequest) GoString() string {
	return s.String()
}

func (s *UpdateJenkinsImageRegistryPersistenceDayRequest) SetPersistenceDay(v int32) *UpdateJenkinsImageRegistryPersistenceDayRequest {
	s.PersistenceDay = &v
	return s
}

func (s *UpdateJenkinsImageRegistryPersistenceDayRequest) SetRegistryId(v int64) *UpdateJenkinsImageRegistryPersistenceDayRequest {
	s.RegistryId = &v
	return s
}

func (s *UpdateJenkinsImageRegistryPersistenceDayRequest) SetSourceIp(v string) *UpdateJenkinsImageRegistryPersistenceDayRequest {
	s.SourceIp = &v
	return s
}

type UpdateJenkinsImageRegistryPersistenceDayResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TimeCost       *int64  `json:"TimeCost,omitempty" xml:"TimeCost,omitempty"`
}

func (s UpdateJenkinsImageRegistryPersistenceDayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateJenkinsImageRegistryPersistenceDayResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateJenkinsImageRegistryPersistenceDayResponseBody) SetData(v bool) *UpdateJenkinsImageRegistryPersistenceDayResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateJenkinsImageRegistryPersistenceDayResponseBody) SetHttpStatusCode(v int32) *UpdateJenkinsImageRegistryPersistenceDayResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateJenkinsImageRegistryPersistenceDayResponseBody) SetRequestId(v string) *UpdateJenkinsImageRegistryPersistenceDayResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateJenkinsImageRegistryPersistenceDayResponseBody) SetTimeCost(v int64) *UpdateJenkinsImageRegistryPersistenceDayResponseBody {
	s.TimeCost = &v
	return s
}

type UpdateJenkinsImageRegistryPersistenceDayResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateJenkinsImageRegistryPersistenceDayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateJenkinsImageRegistryPersistenceDayResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateJenkinsImageRegistryPersistenceDayResponse) GoString() string {
	return s.String()
}

func (s *UpdateJenkinsImageRegistryPersistenceDayResponse) SetHeaders(v map[string]*string) *UpdateJenkinsImageRegistryPersistenceDayResponse {
	s.Headers = v
	return s
}

func (s *UpdateJenkinsImageRegistryPersistenceDayResponse) SetStatusCode(v int32) *UpdateJenkinsImageRegistryPersistenceDayResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateJenkinsImageRegistryPersistenceDayResponse) SetBody(v *UpdateJenkinsImageRegistryPersistenceDayResponseBody) *UpdateJenkinsImageRegistryPersistenceDayResponse {
	s.Body = v
	return s
}

type UpgradeBackupPolicyVersionRequest struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s UpgradeBackupPolicyVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeBackupPolicyVersionRequest) GoString() string {
	return s.String()
}

func (s *UpgradeBackupPolicyVersionRequest) SetId(v int64) *UpgradeBackupPolicyVersionRequest {
	s.Id = &v
	return s
}

type UpgradeBackupPolicyVersionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpgradeBackupPolicyVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeBackupPolicyVersionResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeBackupPolicyVersionResponseBody) SetRequestId(v string) *UpgradeBackupPolicyVersionResponseBody {
	s.RequestId = &v
	return s
}

type UpgradeBackupPolicyVersionResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpgradeBackupPolicyVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpgradeBackupPolicyVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeBackupPolicyVersionResponse) GoString() string {
	return s.String()
}

func (s *UpgradeBackupPolicyVersionResponse) SetHeaders(v map[string]*string) *UpgradeBackupPolicyVersionResponse {
	s.Headers = v
	return s
}

func (s *UpgradeBackupPolicyVersionResponse) SetStatusCode(v int32) *UpgradeBackupPolicyVersionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeBackupPolicyVersionResponse) SetBody(v *UpgradeBackupPolicyVersionResponseBody) *UpgradeBackupPolicyVersionResponse {
	s.Body = v
	return s
}

type ValidateHcWarningsRequest struct {
	RiskIds  *string `json:"RiskIds,omitempty" xml:"RiskIds,omitempty"`
	SourceIp *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	Uuids    *string `json:"Uuids,omitempty" xml:"Uuids,omitempty"`
}

func (s ValidateHcWarningsRequest) String() string {
	return tea.Prettify(s)
}

func (s ValidateHcWarningsRequest) GoString() string {
	return s.String()
}

func (s *ValidateHcWarningsRequest) SetRiskIds(v string) *ValidateHcWarningsRequest {
	s.RiskIds = &v
	return s
}

func (s *ValidateHcWarningsRequest) SetSourceIp(v string) *ValidateHcWarningsRequest {
	s.SourceIp = &v
	return s
}

func (s *ValidateHcWarningsRequest) SetUuids(v string) *ValidateHcWarningsRequest {
	s.Uuids = &v
	return s
}

type ValidateHcWarningsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ValidateHcWarningsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ValidateHcWarningsResponseBody) GoString() string {
	return s.String()
}

func (s *ValidateHcWarningsResponseBody) SetRequestId(v string) *ValidateHcWarningsResponseBody {
	s.RequestId = &v
	return s
}

type ValidateHcWarningsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ValidateHcWarningsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ValidateHcWarningsResponse) String() string {
	return tea.Prettify(s)
}

func (s ValidateHcWarningsResponse) GoString() string {
	return s.String()
}

func (s *ValidateHcWarningsResponse) SetHeaders(v map[string]*string) *ValidateHcWarningsResponse {
	s.Headers = v
	return s
}

func (s *ValidateHcWarningsResponse) SetStatusCode(v int32) *ValidateHcWarningsResponse {
	s.StatusCode = &v
	return s
}

func (s *ValidateHcWarningsResponse) SetBody(v *ValidateHcWarningsResponseBody) *ValidateHcWarningsResponse {
	s.Body = v
	return s
}

type VerifyCheckInstanceResultRequest struct {
	CheckId     *int64    `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
}

func (s VerifyCheckInstanceResultRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyCheckInstanceResultRequest) GoString() string {
	return s.String()
}

func (s *VerifyCheckInstanceResultRequest) SetCheckId(v int64) *VerifyCheckInstanceResultRequest {
	s.CheckId = &v
	return s
}

func (s *VerifyCheckInstanceResultRequest) SetInstanceIds(v []*string) *VerifyCheckInstanceResultRequest {
	s.InstanceIds = v
	return s
}

type VerifyCheckInstanceResultResponseBody struct {
	Data      *VerifyCheckInstanceResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s VerifyCheckInstanceResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s VerifyCheckInstanceResultResponseBody) GoString() string {
	return s.String()
}

func (s *VerifyCheckInstanceResultResponseBody) SetData(v *VerifyCheckInstanceResultResponseBodyData) *VerifyCheckInstanceResultResponseBody {
	s.Data = v
	return s
}

func (s *VerifyCheckInstanceResultResponseBody) SetRequestId(v string) *VerifyCheckInstanceResultResponseBody {
	s.RequestId = &v
	return s
}

type VerifyCheckInstanceResultResponseBodyData struct {
	FailInstances []*string `json:"FailInstances,omitempty" xml:"FailInstances,omitempty" type:"Repeated"`
	OperateCode   *string   `json:"OperateCode,omitempty" xml:"OperateCode,omitempty"`
}

func (s VerifyCheckInstanceResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s VerifyCheckInstanceResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *VerifyCheckInstanceResultResponseBodyData) SetFailInstances(v []*string) *VerifyCheckInstanceResultResponseBodyData {
	s.FailInstances = v
	return s
}

func (s *VerifyCheckInstanceResultResponseBodyData) SetOperateCode(v string) *VerifyCheckInstanceResultResponseBodyData {
	s.OperateCode = &v
	return s
}

type VerifyCheckInstanceResultResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *VerifyCheckInstanceResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s VerifyCheckInstanceResultResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyCheckInstanceResultResponse) GoString() string {
	return s.String()
}

func (s *VerifyCheckInstanceResultResponse) SetHeaders(v map[string]*string) *VerifyCheckInstanceResultResponse {
	s.Headers = v
	return s
}

func (s *VerifyCheckInstanceResultResponse) SetStatusCode(v int32) *VerifyCheckInstanceResultResponse {
	s.StatusCode = &v
	return s
}

func (s *VerifyCheckInstanceResultResponse) SetBody(v *VerifyCheckInstanceResultResponseBody) *VerifyCheckInstanceResultResponse {
	s.Body = v
	return s
}

type VerifyCheckResultRequest struct {
	CheckIds []*int64 `json:"CheckIds,omitempty" xml:"CheckIds,omitempty" type:"Repeated"`
}

func (s VerifyCheckResultRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyCheckResultRequest) GoString() string {
	return s.String()
}

func (s *VerifyCheckResultRequest) SetCheckIds(v []*int64) *VerifyCheckResultRequest {
	s.CheckIds = v
	return s
}

type VerifyCheckResultResponseBody struct {
	Data      *VerifyCheckResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s VerifyCheckResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s VerifyCheckResultResponseBody) GoString() string {
	return s.String()
}

func (s *VerifyCheckResultResponseBody) SetData(v *VerifyCheckResultResponseBodyData) *VerifyCheckResultResponseBody {
	s.Data = v
	return s
}

func (s *VerifyCheckResultResponseBody) SetRequestId(v string) *VerifyCheckResultResponseBody {
	s.RequestId = &v
	return s
}

type VerifyCheckResultResponseBodyData struct {
	OperateCode *string `json:"OperateCode,omitempty" xml:"OperateCode,omitempty"`
}

func (s VerifyCheckResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s VerifyCheckResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *VerifyCheckResultResponseBodyData) SetOperateCode(v string) *VerifyCheckResultResponseBodyData {
	s.OperateCode = &v
	return s
}

type VerifyCheckResultResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *VerifyCheckResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s VerifyCheckResultResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyCheckResultResponse) GoString() string {
	return s.String()
}

func (s *VerifyCheckResultResponse) SetHeaders(v map[string]*string) *VerifyCheckResultResponse {
	s.Headers = v
	return s
}

func (s *VerifyCheckResultResponse) SetStatusCode(v int32) *VerifyCheckResultResponse {
	s.StatusCode = &v
	return s
}

func (s *VerifyCheckResultResponse) SetBody(v *VerifyCheckResultResponseBody) *VerifyCheckResultResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-hangzhou":                 tea.String("tds.aliyuncs.com"),
		"ap-southeast-1":              tea.String("tds.ap-southeast-1.aliyuncs.com"),
		"ap-southeast-3":              tea.String("tds.ap-southeast-3.aliyuncs.com"),
		"ap-northeast-1":              tea.String("sas.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("sas.aliyuncs.com"),
		"ap-south-1":                  tea.String("sas.aliyuncs.com"),
		"ap-southeast-2":              tea.String("sas.aliyuncs.com"),
		"ap-southeast-5":              tea.String("sas.aliyuncs.com"),
		"cn-beijing":                  tea.String("sas.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("sas.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("sas.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("sas.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("sas.aliyuncs.com"),
		"cn-chengdu":                  tea.String("sas.aliyuncs.com"),
		"cn-edge-1":                   tea.String("sas.aliyuncs.com"),
		"cn-fujian":                   tea.String("sas.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("sas.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("sas.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("sas.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("sas.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("sas.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("sas.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("sas.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("sas.aliyuncs.com"),
		"cn-hongkong":                 tea.String("sas.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("sas.aliyuncs.com"),
		"cn-huhehaote":                tea.String("sas.aliyuncs.com"),
		"cn-huhehaote-nebula-1":       tea.String("sas.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("sas.aliyuncs.com"),
		"cn-qingdao":                  tea.String("sas.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("sas.aliyuncs.com"),
		"cn-shanghai":                 tea.String("sas.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("sas.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("sas.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("sas.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("sas.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("sas.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("sas.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("sas.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("sas.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("sas.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("sas.aliyuncs.com"),
		"cn-wuhan":                    tea.String("sas.aliyuncs.com"),
		"cn-wulanchabu":               tea.String("sas.aliyuncs.com"),
		"cn-yushanfang":               tea.String("sas.aliyuncs.com"),
		"cn-zhangbei":                 tea.String("sas.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("sas.aliyuncs.com"),
		"cn-zhangjiakou":              tea.String("sas.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("sas.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("sas.aliyuncs.com"),
		"eu-central-1":                tea.String("sas.aliyuncs.com"),
		"eu-west-1":                   tea.String("sas.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("sas.aliyuncs.com"),
		"me-east-1":                   tea.String("sas.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("sas.aliyuncs.com"),
		"us-east-1":                   tea.String("sas.aliyuncs.com"),
		"us-west-1":                   tea.String("sas.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("sas"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCheckInstanceResultWhiteListWithOptions(request *AddCheckInstanceResultWhiteListRequest, runtime *util.RuntimeOptions) (_result *AddCheckInstanceResultWhiteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckGroupId)) {
		query["CheckGroupId"] = request.CheckGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.CheckId)) {
		query["CheckId"] = request.CheckId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCheckInstanceResultWhiteList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCheckInstanceResultWhiteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCheckInstanceResultWhiteList(request *AddCheckInstanceResultWhiteListRequest) (_result *AddCheckInstanceResultWhiteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCheckInstanceResultWhiteListResponse{}
	_body, _err := client.AddCheckInstanceResultWhiteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCheckResultWhiteListWithOptions(request *AddCheckResultWhiteListRequest, runtime *util.RuntimeOptions) (_result *AddCheckResultWhiteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckIds)) {
		query["CheckIds"] = request.CheckIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCheckResultWhiteList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCheckResultWhiteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCheckResultWhiteList(request *AddCheckResultWhiteListRequest) (_result *AddCheckResultWhiteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCheckResultWhiteListResponse{}
	_body, _err := client.AddCheckResultWhiteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddClientUserDefineRuleWithOptions(request *AddClientUserDefineRuleRequest, runtime *util.RuntimeOptions) (_result *AddClientUserDefineRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionType)) {
		query["ActionType"] = request.ActionType
	}

	if !tea.BoolValue(util.IsUnset(request.Cmdline)) {
		query["Cmdline"] = request.Cmdline
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		query["FilePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.IP)) {
		query["IP"] = request.IP
	}

	if !tea.BoolValue(util.IsUnset(request.Md5List)) {
		query["Md5List"] = request.Md5List
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NewFilePath)) {
		query["NewFilePath"] = request.NewFilePath
	}

	if !tea.BoolValue(util.IsUnset(request.ParentCmdline)) {
		query["ParentCmdline"] = request.ParentCmdline
	}

	if !tea.BoolValue(util.IsUnset(request.ParentProcPath)) {
		query["ParentProcPath"] = request.ParentProcPath
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		query["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.PortStr)) {
		query["PortStr"] = request.PortStr
	}

	if !tea.BoolValue(util.IsUnset(request.ProcPath)) {
		query["ProcPath"] = request.ProcPath
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryContent)) {
		query["RegistryContent"] = request.RegistryContent
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryKey)) {
		query["RegistryKey"] = request.RegistryKey
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddClientUserDefineRule"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddClientUserDefineRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddClientUserDefineRule(request *AddClientUserDefineRuleRequest) (_result *AddClientUserDefineRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddClientUserDefineRuleResponse{}
	_body, _err := client.AddClientUserDefineRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddInstallCodeWithOptions(request *AddInstallCodeRequest, runtime *util.RuntimeOptions) (_result *AddInstallCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExpiredDate)) {
		query["ExpiredDate"] = request.ExpiredDate
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OnlyImage)) {
		query["OnlyImage"] = request.OnlyImage
	}

	if !tea.BoolValue(util.IsUnset(request.Os)) {
		query["Os"] = request.Os
	}

	if !tea.BoolValue(util.IsUnset(request.VendorName)) {
		query["VendorName"] = request.VendorName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddInstallCode"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddInstallCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddInstallCode(request *AddInstallCodeRequest) (_result *AddInstallCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddInstallCodeResponse{}
	_body, _err := client.AddInstallCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddPrivateRegistryWithOptions(request *AddPrivateRegistryRequest, runtime *util.RuntimeOptions) (_result *AddPrivateRegistryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraParam)) {
		query["ExtraParam"] = request.ExtraParam
	}

	if !tea.BoolValue(util.IsUnset(request.NetType)) {
		query["NetType"] = request.NetType
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolType)) {
		query["ProtocolType"] = request.ProtocolType
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryHostIp)) {
		query["RegistryHostIp"] = request.RegistryHostIp
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryRegionId)) {
		query["RegistryRegionId"] = request.RegistryRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryType)) {
		query["RegistryType"] = request.RegistryType
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryVersion)) {
		query["RegistryVersion"] = request.RegistryVersion
	}

	if !tea.BoolValue(util.IsUnset(request.TransPerHour)) {
		query["TransPerHour"] = request.TransPerHour
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPrivateRegistry"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPrivateRegistryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddPrivateRegistry(request *AddPrivateRegistryRequest) (_result *AddPrivateRegistryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPrivateRegistryResponse{}
	_body, _err := client.AddPrivateRegistryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddTagWithUuidWithOptions(request *AddTagWithUuidRequest, runtime *util.RuntimeOptions) (_result *AddTagWithUuidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TagName)) {
		query["TagName"] = request.TagName
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddTagWithUuid"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddTagWithUuidResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddTagWithUuid(request *AddTagWithUuidRequest) (_result *AddTagWithUuidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTagWithUuidResponse{}
	_body, _err := client.AddTagWithUuidWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddUninstallClientsByUuidsWithOptions(request *AddUninstallClientsByUuidsRequest, runtime *util.RuntimeOptions) (_result *AddUninstallClientsByUuidsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallMethod)) {
		query["CallMethod"] = request.CallMethod
	}

	if !tea.BoolValue(util.IsUnset(request.Feedback)) {
		query["Feedback"] = request.Feedback
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddUninstallClientsByUuids"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddUninstallClientsByUuidsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddUninstallClientsByUuids(request *AddUninstallClientsByUuidsRequest) (_result *AddUninstallClientsByUuidsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddUninstallClientsByUuidsResponse{}
	_body, _err := client.AddUninstallClientsByUuidsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddVpcHoneyPotWithOptions(request *AddVpcHoneyPotRequest, runtime *util.RuntimeOptions) (_result *AddVpcHoneyPotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddVpcHoneyPot"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddVpcHoneyPotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddVpcHoneyPot(request *AddVpcHoneyPotRequest) (_result *AddVpcHoneyPotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddVpcHoneyPotResponse{}
	_body, _err := client.AddVpcHoneyPotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AdvanceSecurityEventOperationsWithOptions(request *AdvanceSecurityEventOperationsRequest, runtime *util.RuntimeOptions) (_result *AdvanceSecurityEventOperationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["EventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AdvanceSecurityEventOperations"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AdvanceSecurityEventOperationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AdvanceSecurityEventOperations(request *AdvanceSecurityEventOperationsRequest) (_result *AdvanceSecurityEventOperationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AdvanceSecurityEventOperationsResponse{}
	_body, _err := client.AdvanceSecurityEventOperationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchOperateCommonOverallConfigWithOptions(request *BatchOperateCommonOverallConfigRequest, runtime *util.RuntimeOptions) (_result *BatchOperateCommonOverallConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.TypeList)) {
		query["TypeList"] = request.TypeList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchOperateCommonOverallConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchOperateCommonOverallConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchOperateCommonOverallConfig(request *BatchOperateCommonOverallConfigRequest) (_result *BatchOperateCommonOverallConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchOperateCommonOverallConfigResponse{}
	_body, _err := client.BatchOperateCommonOverallConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindAuthToMachineWithOptions(request *BindAuthToMachineRequest, runtime *util.RuntimeOptions) (_result *BindAuthToMachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthVersion)) {
		query["AuthVersion"] = request.AuthVersion
	}

	if !tea.BoolValue(util.IsUnset(request.AutoBind)) {
		query["AutoBind"] = request.AutoBind
	}

	if !tea.BoolValue(util.IsUnset(request.Bind)) {
		query["Bind"] = request.Bind
	}

	if !tea.BoolValue(util.IsUnset(request.BindAll)) {
		query["BindAll"] = request.BindAll
	}

	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalExp)) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !tea.BoolValue(util.IsUnset(request.UnBind)) {
		query["UnBind"] = request.UnBind
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindAuthToMachine"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindAuthToMachineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindAuthToMachine(request *BindAuthToMachineRequest) (_result *BindAuthToMachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindAuthToMachineResponse{}
	_body, _err := client.BindAuthToMachineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelOnceTaskWithOptions(request *CancelOnceTaskRequest, runtime *util.RuntimeOptions) (_result *CancelOnceTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelOnceTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelOnceTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelOnceTask(request *CancelOnceTaskRequest) (_result *CancelOnceTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelOnceTaskResponse{}
	_body, _err := client.CancelOnceTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ChangeCheckConfigWithOptions(request *ChangeCheckConfigRequest, runtime *util.RuntimeOptions) (_result *ChangeCheckConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CycleDays)) {
		query["CycleDays"] = request.CycleDays
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StandardIds)) {
		query["StandardIds"] = request.StandardIds
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ChangeCheckConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ChangeCheckConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ChangeCheckConfig(request *ChangeCheckConfigRequest) (_result *ChangeCheckConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ChangeCheckConfigResponse{}
	_body, _err := client.ChangeCheckConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckQuaraFileIdWithOptions(request *CheckQuaraFileIdRequest, runtime *util.RuntimeOptions) (_result *CheckQuaraFileIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.QuaraFileIds)) {
		query["QuaraFileIds"] = request.QuaraFileIds
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckQuaraFileId"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckQuaraFileIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckQuaraFileId(request *CheckQuaraFileIdRequest) (_result *CheckQuaraFileIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckQuaraFileIdResponse{}
	_body, _err := client.CheckQuaraFileIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckSecurityEventIdWithOptions(request *CheckSecurityEventIdRequest, runtime *util.RuntimeOptions) (_result *CheckSecurityEventIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityEventIds)) {
		query["SecurityEventIds"] = request.SecurityEventIds
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckSecurityEventId"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckSecurityEventIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckSecurityEventId(request *CheckSecurityEventIdRequest) (_result *CheckSecurityEventIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckSecurityEventIdResponse{}
	_body, _err := client.CheckSecurityEventIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckUserHasEcsWithOptions(request *CheckUserHasEcsRequest, runtime *util.RuntimeOptions) (_result *CheckUserHasEcsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckUserHasEcs"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckUserHasEcsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckUserHasEcs(request *CheckUserHasEcsRequest) (_result *CheckUserHasEcsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckUserHasEcsResponse{}
	_body, _err := client.CheckUserHasEcsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConfirmVirusEventsWithOptions(request *ConfirmVirusEventsRequest, runtime *util.RuntimeOptions) (_result *ConfirmVirusEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperationAll)) {
		query["OperationAll"] = request.OperationAll
	}

	if !tea.BoolValue(util.IsUnset(request.OperationCode)) {
		query["OperationCode"] = request.OperationCode
	}

	if !tea.BoolValue(util.IsUnset(request.OperationRange)) {
		query["OperationRange"] = request.OperationRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfirmVirusEvents"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfirmVirusEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConfirmVirusEvents(request *ConfirmVirusEventsRequest) (_result *ConfirmVirusEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfirmVirusEventsResponse{}
	_body, _err := client.ConfirmVirusEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateAntiBruteForceRuleWithOptions(request *CreateAntiBruteForceRuleRequest, runtime *util.RuntimeOptions) (_result *CreateAntiBruteForceRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DefaultRule)) {
		query["DefaultRule"] = request.DefaultRule
	}

	if !tea.BoolValue(util.IsUnset(request.FailCount)) {
		query["FailCount"] = request.FailCount
	}

	if !tea.BoolValue(util.IsUnset(request.ForbiddenTime)) {
		query["ForbiddenTime"] = request.ForbiddenTime
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Span)) {
		query["Span"] = request.Span
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAntiBruteForceRule"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAntiBruteForceRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateAntiBruteForceRule(request *CreateAntiBruteForceRuleRequest) (_result *CreateAntiBruteForceRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAntiBruteForceRuleResponse{}
	_body, _err := client.CreateAntiBruteForceRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBackupPolicyWithOptions(tmpReq *CreateBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *CreateBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateBackupPolicyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Policy)) {
		request.PolicyShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Policy, tea.String("Policy"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyShrink)) {
		query["Policy"] = request.PolicyShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyRegionId)) {
		query["PolicyRegionId"] = request.PolicyRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyVersion)) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBackupPolicy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBackupPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBackupPolicy(request *CreateBackupPolicyRequest) (_result *CreateBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBackupPolicyResponse{}
	_body, _err := client.CreateBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateContainerScanTaskWithOptions(request *CreateContainerScanTaskRequest, runtime *util.RuntimeOptions) (_result *CreateContainerScanTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerIds)) {
		query["ContainerIds"] = request.ContainerIds
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateContainerScanTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateContainerScanTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateContainerScanTask(request *CreateContainerScanTaskRequest) (_result *CreateContainerScanTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateContainerScanTaskResponse{}
	_body, _err := client.CreateContainerScanTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCustomBlockRecordWithOptions(request *CreateCustomBlockRecordRequest, runtime *util.RuntimeOptions) (_result *CreateCustomBlockRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BlockIp)) {
		query["BlockIp"] = request.BlockIp
	}

	if !tea.BoolValue(util.IsUnset(request.Bound)) {
		query["Bound"] = request.Bound
	}

	if !tea.BoolValue(util.IsUnset(request.ExpireTime)) {
		query["ExpireTime"] = request.ExpireTime
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCustomBlockRecord"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCustomBlockRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCustomBlockRecord(request *CreateCustomBlockRecordRequest) (_result *CreateCustomBlockRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCustomBlockRecordResponse{}
	_body, _err := client.CreateCustomBlockRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCycleTaskWithOptions(request *CreateCycleTaskRequest, runtime *util.RuntimeOptions) (_result *CreateCycleTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Enable)) {
		query["Enable"] = request.Enable
	}

	if !tea.BoolValue(util.IsUnset(request.FirstDateStr)) {
		query["FirstDateStr"] = request.FirstDateStr
	}

	if !tea.BoolValue(util.IsUnset(request.IntervalPeriod)) {
		query["IntervalPeriod"] = request.IntervalPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.Param)) {
		query["Param"] = request.Param
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.TargetEndTime)) {
		query["TargetEndTime"] = request.TargetEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.TargetStartTime)) {
		query["TargetStartTime"] = request.TargetStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCycleTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCycleTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCycleTask(request *CreateCycleTaskRequest) (_result *CreateCycleTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCycleTaskResponse{}
	_body, _err := client.CreateCycleTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
 * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
 *
 * @param request CreateFileDetectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFileDetectResponse
 */
func (client *Client) CreateFileDetectWithOptions(request *CreateFileDetectRequest, runtime *util.RuntimeOptions) (_result *CreateFileDetectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HashKey)) {
		query["HashKey"] = request.HashKey
	}

	if !tea.BoolValue(util.IsUnset(request.OssKey)) {
		query["OssKey"] = request.OssKey
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFileDetect"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFileDetectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
 * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
 *
 * @param request CreateFileDetectRequest
 * @return CreateFileDetectResponse
 */
func (client *Client) CreateFileDetect(request *CreateFileDetectRequest) (_result *CreateFileDetectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFileDetectResponse{}
	_body, _err := client.CreateFileDetectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call the this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
 * The form upload method is provided by OSS. For more information, see [Form upload](https://www.alibabacloud.com/help/en/object-storage-service/latest/upload-objects-form-upload).
 * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
 *
 * @param request CreateFileDetectUploadUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFileDetectUploadUrlResponse
 */
func (client *Client) CreateFileDetectUploadUrlWithOptions(request *CreateFileDetectUploadUrlRequest, runtime *util.RuntimeOptions) (_result *CreateFileDetectUploadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HashKeyContextList)) {
		query["HashKeyContextList"] = request.HashKeyContextList
	}

	if !tea.BoolValue(util.IsUnset(request.HashKeyList)) {
		query["HashKeyList"] = request.HashKeyList
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFileDetectUploadUrl"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFileDetectUploadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call the this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
 * The form upload method is provided by OSS. For more information, see [Form upload](https://www.alibabacloud.com/help/en/object-storage-service/latest/upload-objects-form-upload).
 * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
 *
 * @param request CreateFileDetectUploadUrlRequest
 * @return CreateFileDetectUploadUrlResponse
 */
func (client *Client) CreateFileDetectUploadUrl(request *CreateFileDetectUploadUrlRequest) (_result *CreateFileDetectUploadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFileDetectUploadUrlResponse{}
	_body, _err := client.CreateFileDetectUploadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateHoneypotWithOptions(request *CreateHoneypotRequest, runtime *util.RuntimeOptions) (_result *CreateHoneypotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HoneypotImageId)) {
		query["HoneypotImageId"] = request.HoneypotImageId
	}

	if !tea.BoolValue(util.IsUnset(request.HoneypotImageName)) {
		query["HoneypotImageName"] = request.HoneypotImageName
	}

	if !tea.BoolValue(util.IsUnset(request.HoneypotName)) {
		query["HoneypotName"] = request.HoneypotName
	}

	if !tea.BoolValue(util.IsUnset(request.Meta)) {
		query["Meta"] = request.Meta
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHoneypot"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateHoneypotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateHoneypot(request *CreateHoneypotRequest) (_result *CreateHoneypotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHoneypotResponse{}
	_body, _err := client.CreateHoneypotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateHoneypotNodeWithOptions(request *CreateHoneypotNodeRequest, runtime *util.RuntimeOptions) (_result *CreateHoneypotNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowHoneypotAccessInternet)) {
		query["AllowHoneypotAccessInternet"] = request.AllowHoneypotAccessInternet
	}

	if !tea.BoolValue(util.IsUnset(request.AvailableProbeNum)) {
		query["AvailableProbeNum"] = request.AvailableProbeNum
	}

	if !tea.BoolValue(util.IsUnset(request.NodeName)) {
		query["NodeName"] = request.NodeName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupProbeIpList)) {
		query["SecurityGroupProbeIpList"] = request.SecurityGroupProbeIpList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHoneypotNode"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateHoneypotNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateHoneypotNode(request *CreateHoneypotNodeRequest) (_result *CreateHoneypotNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHoneypotNodeResponse{}
	_body, _err := client.CreateHoneypotNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateHoneypotPresetWithOptions(request *CreateHoneypotPresetRequest, runtime *util.RuntimeOptions) (_result *CreateHoneypotPresetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HoneypotImageName)) {
		query["HoneypotImageName"] = request.HoneypotImageName
	}

	if !tea.BoolValue(util.IsUnset(request.Meta)) {
		query["Meta"] = request.Meta
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.PresetName)) {
		query["PresetName"] = request.PresetName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHoneypotPreset"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateHoneypotPresetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateHoneypotPreset(request *CreateHoneypotPresetRequest) (_result *CreateHoneypotPresetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHoneypotPresetResponse{}
	_body, _err := client.CreateHoneypotPresetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateHoneypotProbeWithOptions(request *CreateHoneypotProbeRequest, runtime *util.RuntimeOptions) (_result *CreateHoneypotProbeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Arp)) {
		query["Arp"] = request.Arp
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupId)) {
		query["BusinessGroupId"] = request.BusinessGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ControlNodeId)) {
		query["ControlNodeId"] = request.ControlNodeId
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		query["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.HoneypotBindList)) {
		query["HoneypotBindList"] = request.HoneypotBindList
	}

	if !tea.BoolValue(util.IsUnset(request.Ping)) {
		query["Ping"] = request.Ping
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeType)) {
		query["ProbeType"] = request.ProbeType
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeVersion)) {
		query["ProbeVersion"] = request.ProbeVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ProxyIp)) {
		query["ProxyIp"] = request.ProxyIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHoneypotProbe"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateHoneypotProbeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateHoneypotProbe(request *CreateHoneypotProbeRequest) (_result *CreateHoneypotProbeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHoneypotProbeResponse{}
	_body, _err := client.CreateHoneypotProbeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateInterceptionRuleWithOptions(tmpReq *CreateInterceptionRuleRequest, runtime *util.RuntimeOptions) (_result *CreateInterceptionRuleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateInterceptionRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DstTargetList)) {
		request.DstTargetListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DstTargetList, tea.String("DstTargetList"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SrcTarget)) {
		request.SrcTargetShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SrcTarget, tea.String("SrcTarget"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterName)) {
		query["ClusterName"] = request.ClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.DstTargetListShrink)) {
		query["DstTargetList"] = request.DstTargetListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InterceptType)) {
		query["InterceptType"] = request.InterceptType
	}

	if !tea.BoolValue(util.IsUnset(request.OrderIndex)) {
		query["OrderIndex"] = request.OrderIndex
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleSwitch)) {
		query["RuleSwitch"] = request.RuleSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.RuleType)) {
		query["RuleType"] = request.RuleType
	}

	if !tea.BoolValue(util.IsUnset(request.SrcTargetShrink)) {
		query["SrcTarget"] = request.SrcTargetShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInterceptionRule"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateInterceptionRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateInterceptionRule(request *CreateInterceptionRuleRequest) (_result *CreateInterceptionRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInterceptionRuleResponse{}
	_body, _err := client.CreateInterceptionRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateInterceptionTargetWithOptions(request *CreateInterceptionTargetRequest, runtime *util.RuntimeOptions) (_result *CreateInterceptionTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterName)) {
		query["ClusterName"] = request.ClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.ImageList)) {
		query["ImageList"] = request.ImageList
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.TagList)) {
		query["TagList"] = request.TagList
	}

	if !tea.BoolValue(util.IsUnset(request.TargetName)) {
		query["TargetName"] = request.TargetName
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInterceptionTarget"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateInterceptionTargetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateInterceptionTarget(request *CreateInterceptionTargetRequest) (_result *CreateInterceptionTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInterceptionTargetResponse{}
	_body, _err := client.CreateInterceptionTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateJenkinsImageRegistryWithOptions(request *CreateJenkinsImageRegistryRequest, runtime *util.RuntimeOptions) (_result *CreateJenkinsImageRegistryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		body["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraParam)) {
		body["ExtraParam"] = request.ExtraParam
	}

	if !tea.BoolValue(util.IsUnset(request.NetType)) {
		body["NetType"] = request.NetType
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.PersistenceDay)) {
		body["PersistenceDay"] = request.PersistenceDay
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolType)) {
		body["ProtocolType"] = request.ProtocolType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		body["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryHostIp)) {
		body["RegistryHostIp"] = request.RegistryHostIp
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryName)) {
		body["RegistryName"] = request.RegistryName
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryType)) {
		body["RegistryType"] = request.RegistryType
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryVersion)) {
		body["RegistryVersion"] = request.RegistryVersion
	}

	if !tea.BoolValue(util.IsUnset(request.TransPerHour)) {
		body["TransPerHour"] = request.TransPerHour
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		body["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.WhiteList)) {
		body["WhiteList"] = request.WhiteList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateJenkinsImageRegistry"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateJenkinsImageRegistryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateJenkinsImageRegistry(request *CreateJenkinsImageRegistryRequest) (_result *CreateJenkinsImageRegistryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateJenkinsImageRegistryResponse{}
	_body, _err := client.CreateJenkinsImageRegistryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
 *
 * @param request CreateOrUpdateAssetGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateOrUpdateAssetGroupResponse
 */
func (client *Client) CreateOrUpdateAssetGroupWithOptions(request *CreateOrUpdateAssetGroupRequest, runtime *util.RuntimeOptions) (_result *CreateOrUpdateAssetGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrUpdateAssetGroup"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrUpdateAssetGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
 *
 * @param request CreateOrUpdateAssetGroupRequest
 * @return CreateOrUpdateAssetGroupResponse
 */
func (client *Client) CreateOrUpdateAssetGroup(request *CreateOrUpdateAssetGroupRequest) (_result *CreateOrUpdateAssetGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOrUpdateAssetGroupResponse{}
	_body, _err := client.CreateOrUpdateAssetGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRestoreJobWithOptions(request *CreateRestoreJobRequest, runtime *util.RuntimeOptions) (_result *CreateRestoreJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Includes)) {
		query["Includes"] = request.Includes
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotHash)) {
		query["SnapshotHash"] = request.SnapshotHash
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotVersion)) {
		query["SnapshotVersion"] = request.SnapshotVersion
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Target)) {
		query["Target"] = request.Target
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	if !tea.BoolValue(util.IsUnset(request.VaultId)) {
		query["VaultId"] = request.VaultId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRestoreJob"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRestoreJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRestoreJob(request *CreateRestoreJobRequest) (_result *CreateRestoreJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRestoreJobResponse{}
	_body, _err := client.CreateRestoreJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * For more information about service-linked roles, see [Service-linked roles](~~160674~~).
 *
 * @param request CreateServiceLinkedRoleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateServiceLinkedRoleResponse
 */
func (client *Client) CreateServiceLinkedRoleWithOptions(request *CreateServiceLinkedRoleRequest, runtime *util.RuntimeOptions) (_result *CreateServiceLinkedRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ServiceLinkedRole)) {
		query["ServiceLinkedRole"] = request.ServiceLinkedRole
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateServiceLinkedRole"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateServiceLinkedRoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * For more information about service-linked roles, see [Service-linked roles](~~160674~~).
 *
 * @param request CreateServiceLinkedRoleRequest
 * @return CreateServiceLinkedRoleResponse
 */
func (client *Client) CreateServiceLinkedRole(request *CreateServiceLinkedRoleRequest) (_result *CreateServiceLinkedRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateServiceLinkedRoleResponse{}
	_body, _err := client.CreateServiceLinkedRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSimilarSecurityEventsQueryTaskWithOptions(request *CreateSimilarSecurityEventsQueryTaskRequest, runtime *util.RuntimeOptions) (_result *CreateSimilarSecurityEventsQueryTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityEventId)) {
		query["SecurityEventId"] = request.SecurityEventId
	}

	if !tea.BoolValue(util.IsUnset(request.SimilarEventScenarioCode)) {
		query["SimilarEventScenarioCode"] = request.SimilarEventScenarioCode
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSimilarSecurityEventsQueryTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSimilarSecurityEventsQueryTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSimilarSecurityEventsQueryTask(request *CreateSimilarSecurityEventsQueryTaskRequest) (_result *CreateSimilarSecurityEventsQueryTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSimilarSecurityEventsQueryTaskResponse{}
	_body, _err := client.CreateSimilarSecurityEventsQueryTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSuspEventNoteWithOptions(request *CreateSuspEventNoteRequest, runtime *util.RuntimeOptions) (_result *CreateSuspEventNoteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.Note)) {
		query["Note"] = request.Note
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSuspEventNote"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSuspEventNoteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSuspEventNote(request *CreateSuspEventNoteRequest) (_result *CreateSuspEventNoteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSuspEventNoteResponse{}
	_body, _err := client.CreateSuspEventNoteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateUniBackupPolicyWithOptions(tmpReq *CreateUniBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *CreateUniBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateUniBackupPolicyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.FullPlan)) {
		request.FullPlanShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FullPlan, tea.String("FullPlan"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.IncPlan)) {
		request.IncPlanShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.IncPlan, tea.String("IncPlan"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountName)) {
		query["AccountName"] = request.AccountName
	}

	if !tea.BoolValue(util.IsUnset(request.AccountPassword)) {
		query["AccountPassword"] = request.AccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseAddByUser)) {
		query["DatabaseAddByUser"] = request.DatabaseAddByUser
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseType)) {
		query["DatabaseType"] = request.DatabaseType
	}

	if !tea.BoolValue(util.IsUnset(request.FullPlanShrink)) {
		query["FullPlan"] = request.FullPlanShrink
	}

	if !tea.BoolValue(util.IsUnset(request.IncPlanShrink)) {
		query["IncPlan"] = request.IncPlanShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyName)) {
		query["PolicyName"] = request.PolicyName
	}

	if !tea.BoolValue(util.IsUnset(request.Retention)) {
		query["Retention"] = request.Retention
	}

	if !tea.BoolValue(util.IsUnset(request.SpeedLimiter)) {
		query["SpeedLimiter"] = request.SpeedLimiter
	}

	if !tea.BoolValue(util.IsUnset(request.UniRegionId)) {
		query["UniRegionId"] = request.UniRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUniBackupPolicy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUniBackupPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateUniBackupPolicy(request *CreateUniBackupPolicyRequest) (_result *CreateUniBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUniBackupPolicyResponse{}
	_body, _err := client.CreateUniBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateUniRestorePlanWithOptions(request *CreateUniRestorePlanRequest, runtime *util.RuntimeOptions) (_result *CreateUniRestorePlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceUuid)) {
		query["InstanceUuid"] = request.InstanceUuid
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.ResetScn)) {
		query["ResetScn"] = request.ResetScn
	}

	if !tea.BoolValue(util.IsUnset(request.ResetTime)) {
		query["ResetTime"] = request.ResetTime
	}

	if !tea.BoolValue(util.IsUnset(request.RestoreInfo)) {
		query["RestoreInfo"] = request.RestoreInfo
	}

	if !tea.BoolValue(util.IsUnset(request.TimePoint)) {
		query["TimePoint"] = request.TimePoint
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUniRestorePlan"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUniRestorePlanResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateUniRestorePlan(request *CreateUniRestorePlanRequest) (_result *CreateUniRestorePlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUniRestorePlanResponse{}
	_body, _err := client.CreateUniRestorePlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVulAutoRepairConfigWithOptions(request *CreateVulAutoRepairConfigRequest, runtime *util.RuntimeOptions) (_result *CreateVulAutoRepairConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		query["Reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.VulAutoRepairConfigList)) {
		query["VulAutoRepairConfigList"] = request.VulAutoRepairConfigList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateVulAutoRepairConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateVulAutoRepairConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVulAutoRepairConfig(request *CreateVulAutoRepairConfigRequest) (_result *CreateVulAutoRepairConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVulAutoRepairConfigResponse{}
	_body, _err := client.CreateVulAutoRepairConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAntiBruteForceRuleWithOptions(request *DeleteAntiBruteForceRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteAntiBruteForceRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAntiBruteForceRule"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAntiBruteForceRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAntiBruteForceRule(request *DeleteAntiBruteForceRuleRequest) (_result *DeleteAntiBruteForceRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAntiBruteForceRuleResponse{}
	_body, _err := client.DeleteAntiBruteForceRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBackupPolicyWithOptions(request *DeleteBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *DeleteBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyVersion)) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBackupPolicy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteBackupPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBackupPolicy(request *DeleteBackupPolicyRequest) (_result *DeleteBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBackupPolicyResponse{}
	_body, _err := client.DeleteBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBackupPolicyMachineWithOptions(request *DeleteBackupPolicyMachineRequest, runtime *util.RuntimeOptions) (_result *DeleteBackupPolicyMachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyVersion)) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBackupPolicyMachine"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteBackupPolicyMachineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBackupPolicyMachine(request *DeleteBackupPolicyMachineRequest) (_result *DeleteBackupPolicyMachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBackupPolicyMachineResponse{}
	_body, _err := client.DeleteBackupPolicyMachineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteClientUserDefineRuleWithOptions(request *DeleteClientUserDefineRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteClientUserDefineRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IdList)) {
		query["IdList"] = request.IdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteClientUserDefineRule"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteClientUserDefineRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteClientUserDefineRule(request *DeleteClientUserDefineRuleRequest) (_result *DeleteClientUserDefineRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteClientUserDefineRuleResponse{}
	_body, _err := client.DeleteClientUserDefineRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCustomBlockRecordWithOptions(request *DeleteCustomBlockRecordRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomBlockRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCustomBlockRecord"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCustomBlockRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCustomBlockRecord(request *DeleteCustomBlockRecordRequest) (_result *DeleteCustomBlockRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustomBlockRecordResponse{}
	_body, _err := client.DeleteCustomBlockRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCycleTaskWithOptions(request *DeleteCycleTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteCycleTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigId)) {
		query["ConfigId"] = request.ConfigId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCycleTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCycleTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCycleTask(request *DeleteCycleTaskRequest) (_result *DeleteCycleTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCycleTaskResponse{}
	_body, _err := client.DeleteCycleTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The **Default** server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default** group.
 *
 * @param request DeleteGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteGroupResponse
 */
func (client *Client) DeleteGroupWithOptions(request *DeleteGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteGroup"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The **Default** server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default** group.
 *
 * @param request DeleteGroupRequest
 * @return DeleteGroupResponse
 */
func (client *Client) DeleteGroup(request *DeleteGroupRequest) (_result *DeleteGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteGroupResponse{}
	_body, _err := client.DeleteGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteHoneypotWithOptions(request *DeleteHoneypotRequest, runtime *util.RuntimeOptions) (_result *DeleteHoneypotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HoneypotId)) {
		query["HoneypotId"] = request.HoneypotId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHoneypot"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteHoneypotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteHoneypot(request *DeleteHoneypotRequest) (_result *DeleteHoneypotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHoneypotResponse{}
	_body, _err := client.DeleteHoneypotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteHoneypotNodeWithOptions(request *DeleteHoneypotNodeRequest, runtime *util.RuntimeOptions) (_result *DeleteHoneypotNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHoneypotNode"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteHoneypotNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteHoneypotNode(request *DeleteHoneypotNodeRequest) (_result *DeleteHoneypotNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHoneypotNodeResponse{}
	_body, _err := client.DeleteHoneypotNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteHoneypotPresetWithOptions(request *DeleteHoneypotPresetRequest, runtime *util.RuntimeOptions) (_result *DeleteHoneypotPresetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HoneypotPresetId)) {
		query["HoneypotPresetId"] = request.HoneypotPresetId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHoneypotPreset"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteHoneypotPresetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteHoneypotPreset(request *DeleteHoneypotPresetRequest) (_result *DeleteHoneypotPresetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHoneypotPresetResponse{}
	_body, _err := client.DeleteHoneypotPresetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteHoneypotProbeWithOptions(request *DeleteHoneypotProbeRequest, runtime *util.RuntimeOptions) (_result *DeleteHoneypotProbeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProbeId)) {
		query["ProbeId"] = request.ProbeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHoneypotProbe"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteHoneypotProbeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteHoneypotProbe(request *DeleteHoneypotProbeRequest) (_result *DeleteHoneypotProbeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHoneypotProbeResponse{}
	_body, _err := client.DeleteHoneypotProbeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteInstallCodeWithOptions(request *DeleteInstallCodeRequest, runtime *util.RuntimeOptions) (_result *DeleteInstallCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CaptchaCode)) {
		query["CaptchaCode"] = request.CaptchaCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteInstallCode"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteInstallCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteInstallCode(request *DeleteInstallCodeRequest) (_result *DeleteInstallCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteInstallCodeResponse{}
	_body, _err := client.DeleteInstallCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteInterceptionRuleWithOptions(request *DeleteInterceptionRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteInterceptionRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleIds)) {
		query["RuleIds"] = request.RuleIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteInterceptionRule"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteInterceptionRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteInterceptionRule(request *DeleteInterceptionRuleRequest) (_result *DeleteInterceptionRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteInterceptionRuleResponse{}
	_body, _err := client.DeleteInterceptionRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteInterceptionTargetWithOptions(request *DeleteInterceptionTargetRequest, runtime *util.RuntimeOptions) (_result *DeleteInterceptionTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TargetIds)) {
		query["TargetIds"] = request.TargetIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteInterceptionTarget"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteInterceptionTargetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteInterceptionTarget(request *DeleteInterceptionTargetRequest) (_result *DeleteInterceptionTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteInterceptionTargetResponse{}
	_body, _err := client.DeleteInterceptionTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLoginBaseConfigWithOptions(request *DeleteLoginBaseConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLoginBaseConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Target)) {
		query["Target"] = request.Target
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLoginBaseConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLoginBaseConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLoginBaseConfig(request *DeleteLoginBaseConfigRequest) (_result *DeleteLoginBaseConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLoginBaseConfigResponse{}
	_body, _err := client.DeleteLoginBaseConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletePrivateRegistryWithOptions(request *DeletePrivateRegistryRequest, runtime *util.RuntimeOptions) (_result *DeletePrivateRegistryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegistryId)) {
		query["RegistryId"] = request.RegistryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePrivateRegistry"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePrivateRegistryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletePrivateRegistry(request *DeletePrivateRegistryRequest) (_result *DeletePrivateRegistryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePrivateRegistryResponse{}
	_body, _err := client.DeletePrivateRegistryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSecurityEventMarkMissListWithOptions(request *DeleteSecurityEventMarkMissListRequest, runtime *util.RuntimeOptions) (_result *DeleteSecurityEventMarkMissListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSecurityEventMarkMissList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSecurityEventMarkMissListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSecurityEventMarkMissList(request *DeleteSecurityEventMarkMissListRequest) (_result *DeleteSecurityEventMarkMissListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSecurityEventMarkMissListResponse{}
	_body, _err := client.DeleteSecurityEventMarkMissListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteStrategyWithOptions(request *DeleteStrategyRequest, runtime *util.RuntimeOptions) (_result *DeleteStrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteStrategy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteStrategyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteStrategy(request *DeleteStrategyRequest) (_result *DeleteStrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteStrategyResponse{}
	_body, _err := client.DeleteStrategyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSuspEventNodeWithOptions(request *DeleteSuspEventNodeRequest, runtime *util.RuntimeOptions) (_result *DeleteSuspEventNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NoteId)) {
		query["NoteId"] = request.NoteId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSuspEventNode"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSuspEventNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSuspEventNode(request *DeleteSuspEventNodeRequest) (_result *DeleteSuspEventNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSuspEventNodeResponse{}
	_body, _err := client.DeleteSuspEventNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
 *
 * @param request DeleteTagWithUuidRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTagWithUuidResponse
 */
func (client *Client) DeleteTagWithUuidWithOptions(request *DeleteTagWithUuidRequest, runtime *util.RuntimeOptions) (_result *DeleteTagWithUuidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TagName)) {
		query["TagName"] = request.TagName
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTagWithUuid"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTagWithUuidResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
 *
 * @param request DeleteTagWithUuidRequest
 * @return DeleteTagWithUuidResponse
 */
func (client *Client) DeleteTagWithUuid(request *DeleteTagWithUuidRequest) (_result *DeleteTagWithUuidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTagWithUuidResponse{}
	_body, _err := client.DeleteTagWithUuidWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteUniBackupPolicyWithOptions(request *DeleteUniBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *DeleteUniBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyIds)) {
		query["PolicyIds"] = request.PolicyIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteUniBackupPolicy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteUniBackupPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteUniBackupPolicy(request *DeleteUniBackupPolicyRequest) (_result *DeleteUniBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteUniBackupPolicyResponse{}
	_body, _err := client.DeleteUniBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVpcHoneyPotWithOptions(request *DeleteVpcHoneyPotRequest, runtime *util.RuntimeOptions) (_result *DeleteVpcHoneyPotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteVpcHoneyPot"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteVpcHoneyPotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVpcHoneyPot(request *DeleteVpcHoneyPotRequest) (_result *DeleteVpcHoneyPotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVpcHoneyPotResponse{}
	_body, _err := client.DeleteVpcHoneyPotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVulWhitelistWithOptions(request *DeleteVulWhitelistRequest, runtime *util.RuntimeOptions) (_result *DeleteVulWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Whitelist)) {
		query["Whitelist"] = request.Whitelist
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteVulWhitelist"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteVulWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVulWhitelist(request *DeleteVulWhitelistRequest) (_result *DeleteVulWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVulWhitelistResponse{}
	_body, _err := client.DeleteVulWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccessKeyLeakDetailWithOptions(request *DescribeAccessKeyLeakDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeAccessKeyLeakDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAccessKeyLeakDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAccessKeyLeakDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccessKeyLeakDetail(request *DescribeAccessKeyLeakDetailRequest) (_result *DescribeAccessKeyLeakDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccessKeyLeakDetailResponse{}
	_body, _err := client.DescribeAccessKeyLeakDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccesskeyLeakListWithOptions(request *DescribeAccesskeyLeakListRequest, runtime *util.RuntimeOptions) (_result *DescribeAccesskeyLeakListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		query["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAccesskeyLeakList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAccesskeyLeakListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccesskeyLeakList(request *DescribeAccesskeyLeakListRequest) (_result *DescribeAccesskeyLeakListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccesskeyLeakListResponse{}
	_body, _err := client.DescribeAccesskeyLeakListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAffectedAssetsWithOptions(request *DescribeAffectedAssetsRequest, runtime *util.RuntimeOptions) (_result *DescribeAffectedAssetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Current)) {
		query["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.Levels)) {
		query["Levels"] = request.Levels
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAffectedAssets"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAffectedAssetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAffectedAssets(request *DescribeAffectedAssetsRequest) (_result *DescribeAffectedAssetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAffectedAssetsResponse{}
	_body, _err := client.DescribeAffectedAssetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAffectedMaliciousFileImagesWithOptions(request *DescribeAffectedMaliciousFileImagesRequest, runtime *util.RuntimeOptions) (_result *DescribeAffectedMaliciousFileImagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterName)) {
		query["ClusterName"] = request.ClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerId)) {
		query["ContainerId"] = request.ContainerId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Image)) {
		query["Image"] = request.Image
	}

	if !tea.BoolValue(util.IsUnset(request.ImageDigest)) {
		query["ImageDigest"] = request.ImageDigest
	}

	if !tea.BoolValue(util.IsUnset(request.ImageLayer)) {
		query["ImageLayer"] = request.ImageLayer
	}

	if !tea.BoolValue(util.IsUnset(request.ImageTag)) {
		query["ImageTag"] = request.ImageTag
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Levels)) {
		query["Levels"] = request.Levels
	}

	if !tea.BoolValue(util.IsUnset(request.MaliciousMd5)) {
		query["MaliciousMd5"] = request.MaliciousMd5
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Pod)) {
		query["Pod"] = request.Pod
	}

	if !tea.BoolValue(util.IsUnset(request.RepoId)) {
		query["RepoId"] = request.RepoId
	}

	if !tea.BoolValue(util.IsUnset(request.RepoInstanceId)) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RepoName)) {
		query["RepoName"] = request.RepoName
	}

	if !tea.BoolValue(util.IsUnset(request.RepoNamespace)) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !tea.BoolValue(util.IsUnset(request.RepoRegionId)) {
		query["RepoRegionId"] = request.RepoRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ScanRange)) {
		query["ScanRange"] = request.ScanRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAffectedMaliciousFileImages"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAffectedMaliciousFileImagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAffectedMaliciousFileImages(request *DescribeAffectedMaliciousFileImagesRequest) (_result *DescribeAffectedMaliciousFileImagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAffectedMaliciousFileImagesResponse{}
	_body, _err := client.DescribeAffectedMaliciousFileImagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAgentInstallStatusWithOptions(request *DescribeAgentInstallStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeAgentInstallStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAgentInstallStatus"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAgentInstallStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAgentInstallStatus(request *DescribeAgentInstallStatusRequest) (_result *DescribeAgentInstallStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAgentInstallStatusResponse{}
	_body, _err := client.DescribeAgentInstallStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlarmEventDetailWithOptions(request *DescribeAlarmEventDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeAlarmEventDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmUniqueInfo)) {
		query["AlarmUniqueInfo"] = request.AlarmUniqueInfo
	}

	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlarmEventDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlarmEventDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlarmEventDetail(request *DescribeAlarmEventDetailRequest) (_result *DescribeAlarmEventDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlarmEventDetailResponse{}
	_body, _err := client.DescribeAlarmEventDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The alert aggregation feature of Security Center analyzes the paths of alerts to aggregate multiple alerts generated on the intrusions that are launched from the same IP address or service, or on the same user.
 * You can call the DescribeAlarmEventList or DescribeSuspEvents operation to query alert events.
 * *   If your Security Center runs the Enterprise or Ultimate edition and you turned on **Alert Association** on the **Feature Settings** page of the Security Center console, you can call the DescribeAlarmEventList operation to query alert events.
 * *   If your Security Center runs the Enterprise or Ultimate edition but you turned off **Alert Association** on the **Feature Settings** page of the Security Center console, you can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query alert events.
 * *   If your Security Center does not run the Enterprise or Ultimate edition, you can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query alert events.
 *
 * @param request DescribeAlarmEventListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAlarmEventListResponse
 */
func (client *Client) DescribeAlarmEventListWithOptions(request *DescribeAlarmEventListRequest, runtime *util.RuntimeOptions) (_result *DescribeAlarmEventListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmEventName)) {
		query["AlarmEventName"] = request.AlarmEventName
	}

	if !tea.BoolValue(util.IsUnset(request.AlarmEventType)) {
		query["AlarmEventType"] = request.AlarmEventType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Dealed)) {
		query["Dealed"] = request.Dealed
	}

	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Levels)) {
		query["Levels"] = request.Levels
	}

	if !tea.BoolValue(util.IsUnset(request.OperateErrorCodeList)) {
		query["OperateErrorCodeList"] = request.OperateErrorCodeList
	}

	if !tea.BoolValue(util.IsUnset(request.OperateTimeEnd)) {
		query["OperateTimeEnd"] = request.OperateTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.OperateTimeStart)) {
		query["OperateTimeStart"] = request.OperateTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SortColumn)) {
		query["SortColumn"] = request.SortColumn
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		query["SortType"] = request.SortType
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.TacticId)) {
		query["TacticId"] = request.TacticId
	}

	if !tea.BoolValue(util.IsUnset(request.TimeEnd)) {
		query["TimeEnd"] = request.TimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.TimeStart)) {
		query["TimeStart"] = request.TimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueInfo)) {
		query["UniqueInfo"] = request.UniqueInfo
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlarmEventList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlarmEventListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The alert aggregation feature of Security Center analyzes the paths of alerts to aggregate multiple alerts generated on the intrusions that are launched from the same IP address or service, or on the same user.
 * You can call the DescribeAlarmEventList or DescribeSuspEvents operation to query alert events.
 * *   If your Security Center runs the Enterprise or Ultimate edition and you turned on **Alert Association** on the **Feature Settings** page of the Security Center console, you can call the DescribeAlarmEventList operation to query alert events.
 * *   If your Security Center runs the Enterprise or Ultimate edition but you turned off **Alert Association** on the **Feature Settings** page of the Security Center console, you can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query alert events.
 * *   If your Security Center does not run the Enterprise or Ultimate edition, you can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query alert events.
 *
 * @param request DescribeAlarmEventListRequest
 * @return DescribeAlarmEventListResponse
 */
func (client *Client) DescribeAlarmEventList(request *DescribeAlarmEventListRequest) (_result *DescribeAlarmEventListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlarmEventListResponse{}
	_body, _err := client.DescribeAlarmEventListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlarmEventStackInfoWithOptions(request *DescribeAlarmEventStackInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeAlarmEventStackInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["EventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueInfo)) {
		query["UniqueInfo"] = request.UniqueInfo
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlarmEventStackInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlarmEventStackInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlarmEventStackInfo(request *DescribeAlarmEventStackInfoRequest) (_result *DescribeAlarmEventStackInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlarmEventStackInfoResponse{}
	_body, _err := client.DescribeAlarmEventStackInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAllEntityWithOptions(runtime *util.RuntimeOptions) (_result *DescribeAllEntityResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeAllEntity"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAllEntityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAllEntity() (_result *DescribeAllEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAllEntityResponse{}
	_body, _err := client.DescribeAllEntityWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAllGroupsWithOptions(request *DescribeAllGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeAllGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAllGroups"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAllGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAllGroups(request *DescribeAllGroupsRequest) (_result *DescribeAllGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAllGroupsResponse{}
	_body, _err := client.DescribeAllGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAllImageBaselineWithOptions(request *DescribeAllImageBaselineRequest, runtime *util.RuntimeOptions) (_result *DescribeAllImageBaselineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAllImageBaseline"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAllImageBaselineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAllImageBaseline(request *DescribeAllImageBaselineRequest) (_result *DescribeAllImageBaselineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAllImageBaselineResponse{}
	_body, _err := client.DescribeAllImageBaselineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAntiBruteForceRulesWithOptions(request *DescribeAntiBruteForceRulesRequest, runtime *util.RuntimeOptions) (_result *DescribeAntiBruteForceRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntiBruteForceRules"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntiBruteForceRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAntiBruteForceRules(request *DescribeAntiBruteForceRulesRequest) (_result *DescribeAntiBruteForceRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntiBruteForceRulesResponse{}
	_body, _err := client.DescribeAntiBruteForceRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAppVulScanCycleWithOptions(runtime *util.RuntimeOptions) (_result *DescribeAppVulScanCycleResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeAppVulScanCycle"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppVulScanCycleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAppVulScanCycle() (_result *DescribeAppVulScanCycleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAppVulScanCycleResponse{}
	_body, _err := client.DescribeAppVulScanCycleWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAssetDetailByUuidWithOptions(request *DescribeAssetDetailByUuidRequest, runtime *util.RuntimeOptions) (_result *DescribeAssetDetailByUuidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAssetDetailByUuid"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAssetDetailByUuidResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAssetDetailByUuid(request *DescribeAssetDetailByUuidRequest) (_result *DescribeAssetDetailByUuidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAssetDetailByUuidResponse{}
	_body, _err := client.DescribeAssetDetailByUuidWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAssetDetailByUuidsWithOptions(request *DescribeAssetDetailByUuidsRequest, runtime *util.RuntimeOptions) (_result *DescribeAssetDetailByUuidsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAssetDetailByUuids"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAssetDetailByUuidsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAssetDetailByUuids(request *DescribeAssetDetailByUuidsRequest) (_result *DescribeAssetDetailByUuidsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAssetDetailByUuidsResponse{}
	_body, _err := client.DescribeAssetDetailByUuidsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAssetSummaryWithOptions(runtime *util.RuntimeOptions) (_result *DescribeAssetSummaryResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeAssetSummary"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAssetSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAssetSummary() (_result *DescribeAssetSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAssetSummaryResponse{}
	_body, _err := client.DescribeAssetSummaryWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAssetsSecurityEventSummaryWithOptions(request *DescribeAssetsSecurityEventSummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeAssetsSecurityEventSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldName)) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldValue)) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAssetsSecurityEventSummary"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAssetsSecurityEventSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAssetsSecurityEventSummary(request *DescribeAssetsSecurityEventSummaryRequest) (_result *DescribeAssetsSecurityEventSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAssetsSecurityEventSummaryResponse{}
	_body, _err := client.DescribeAssetsSecurityEventSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAttackAnalysisDataWithOptions(request *DescribeAttackAnalysisDataRequest, runtime *util.RuntimeOptions) (_result *DescribeAttackAnalysisDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Base64)) {
		query["Base64"] = request.Base64
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		query["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAttackAnalysisData"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAttackAnalysisDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAttackAnalysisData(request *DescribeAttackAnalysisDataRequest) (_result *DescribeAttackAnalysisDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAttackAnalysisDataResponse{}
	_body, _err := client.DescribeAttackAnalysisDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAutoDelConfigWithOptions(runtime *util.RuntimeOptions) (_result *DescribeAutoDelConfigResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeAutoDelConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAutoDelConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAutoDelConfig() (_result *DescribeAutoDelConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoDelConfigResponse{}
	_body, _err := client.DescribeAutoDelConfigWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackUpExportInfoWithOptions(request *DescribeBackUpExportInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeBackUpExportInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ExportType)) {
		query["ExportType"] = request.ExportType
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackUpExportInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBackUpExportInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackUpExportInfo(request *DescribeBackUpExportInfoRequest) (_result *DescribeBackUpExportInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackUpExportInfoResponse{}
	_body, _err := client.DescribeBackUpExportInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
 *
 * @param request DescribeBackupClientsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeBackupClientsResponse
 */
func (client *Client) DescribeBackupClientsWithOptions(request *DescribeBackupClientsRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupClientsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SupportRegionId)) {
		query["SupportRegionId"] = request.SupportRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackupClients"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBackupClientsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
 *
 * @param request DescribeBackupClientsRequest
 * @return DescribeBackupClientsResponse
 */
func (client *Client) DescribeBackupClients(request *DescribeBackupClientsRequest) (_result *DescribeBackupClientsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupClientsResponse{}
	_body, _err := client.DescribeBackupClientsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackupFilesWithOptions(request *DescribeBackupFilesRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotHash)) {
		query["SnapshotHash"] = request.SnapshotHash
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackupFiles"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBackupFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackupFiles(request *DescribeBackupFilesRequest) (_result *DescribeBackupFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupFilesResponse{}
	_body, _err := client.DescribeBackupFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackupMachineStatusWithOptions(request *DescribeBackupMachineStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupMachineStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyVersion)) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackupMachineStatus"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBackupMachineStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackupMachineStatus(request *DescribeBackupMachineStatusRequest) (_result *DescribeBackupMachineStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupMachineStatusResponse{}
	_body, _err := client.DescribeBackupMachineStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackupPoliciesWithOptions(request *DescribeBackupPoliciesRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupPoliciesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.MachineRemark)) {
		query["MachineRemark"] = request.MachineRemark
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackupPolicies"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBackupPoliciesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackupPolicies(request *DescribeBackupPoliciesRequest) (_result *DescribeBackupPoliciesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupPoliciesResponse{}
	_body, _err := client.DescribeBackupPoliciesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackupPolicyWithOptions(request *DescribeBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackupPolicy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBackupPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackupPolicy(request *DescribeBackupPolicyRequest) (_result *DescribeBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupPolicyResponse{}
	_body, _err := client.DescribeBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the **restored** or **being restored** state.
 *
 * @param request DescribeBackupRestoreCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeBackupRestoreCountResponse
 */
func (client *Client) DescribeBackupRestoreCountWithOptions(runtime *util.RuntimeOptions) (_result *DescribeBackupRestoreCountResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackupRestoreCount"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBackupRestoreCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the **restored** or **being restored** state.
 *
 * @return DescribeBackupRestoreCountResponse
 */
func (client *Client) DescribeBackupRestoreCount() (_result *DescribeBackupRestoreCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupRestoreCountResponse{}
	_body, _err := client.DescribeBackupRestoreCountWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBruteForceRecordsWithOptions(request *DescribeBruteForceRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeBruteForceRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BlockIp)) {
		query["BlockIp"] = request.BlockIp
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBruteForceRecords"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBruteForceRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBruteForceRecords(request *DescribeBruteForceRecordsRequest) (_result *DescribeBruteForceRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBruteForceRecordsResponse{}
	_body, _err := client.DescribeBruteForceRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBruteForceSummaryWithOptions(request *DescribeBruteForceSummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeBruteForceSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBruteForceSummary"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBruteForceSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBruteForceSummary(request *DescribeBruteForceSummaryRequest) (_result *DescribeBruteForceSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBruteForceSummaryResponse{}
	_body, _err := client.DescribeBruteForceSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCheckEcsWarningsWithOptions(request *DescribeCheckEcsWarningsRequest, runtime *util.RuntimeOptions) (_result *DescribeCheckEcsWarningsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCheckEcsWarnings"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCheckEcsWarningsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCheckEcsWarnings(request *DescribeCheckEcsWarningsRequest) (_result *DescribeCheckEcsWarningsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCheckEcsWarningsResponse{}
	_body, _err := client.DescribeCheckEcsWarningsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCheckFixDetailsWithOptions(request *DescribeCheckFixDetailsRequest, runtime *util.RuntimeOptions) (_result *DescribeCheckFixDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckIds)) {
		query["CheckIds"] = request.CheckIds
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RiskId)) {
		query["RiskId"] = request.RiskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCheckFixDetails"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCheckFixDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCheckFixDetails(request *DescribeCheckFixDetailsRequest) (_result *DescribeCheckFixDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCheckFixDetailsResponse{}
	_body, _err := client.DescribeCheckFixDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCheckWarningDetailWithOptions(request *DescribeCheckWarningDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeCheckWarningDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckWarningId)) {
		query["CheckWarningId"] = request.CheckWarningId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCheckWarningDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCheckWarningDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCheckWarningDetail(request *DescribeCheckWarningDetailRequest) (_result *DescribeCheckWarningDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCheckWarningDetailResponse{}
	_body, _err := client.DescribeCheckWarningDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCheckWarningMachinesWithOptions(request *DescribeCheckWarningMachinesRequest, runtime *util.RuntimeOptions) (_result *DescribeCheckWarningMachinesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckId)) {
		query["CheckId"] = request.CheckId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RiskId)) {
		query["RiskId"] = request.RiskId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCheckWarningMachines"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCheckWarningMachinesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCheckWarningMachines(request *DescribeCheckWarningMachinesRequest) (_result *DescribeCheckWarningMachinesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCheckWarningMachinesResponse{}
	_body, _err := client.DescribeCheckWarningMachinesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCheckWarningSummaryWithOptions(request *DescribeCheckWarningSummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeCheckWarningSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldName)) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldValue)) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RiskName)) {
		query["RiskName"] = request.RiskName
	}

	if !tea.BoolValue(util.IsUnset(request.RiskStatus)) {
		query["RiskStatus"] = request.RiskStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyId)) {
		query["StrategyId"] = request.StrategyId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	if !tea.BoolValue(util.IsUnset(request.TypeName)) {
		query["TypeName"] = request.TypeName
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCheckWarningSummary"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCheckWarningSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCheckWarningSummary(request *DescribeCheckWarningSummaryRequest) (_result *DescribeCheckWarningSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCheckWarningSummaryResponse{}
	_body, _err := client.DescribeCheckWarningSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCheckWarningsWithOptions(request *DescribeCheckWarningsRequest, runtime *util.RuntimeOptions) (_result *DescribeCheckWarningsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckId)) {
		query["CheckId"] = request.CheckId
	}

	if !tea.BoolValue(util.IsUnset(request.CheckType)) {
		query["CheckType"] = request.CheckType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RiskId)) {
		query["RiskId"] = request.RiskId
	}

	if !tea.BoolValue(util.IsUnset(request.RiskStatus)) {
		query["RiskStatus"] = request.RiskStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCheckWarnings"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCheckWarningsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCheckWarnings(request *DescribeCheckWarningsRequest) (_result *DescribeCheckWarningsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCheckWarningsResponse{}
	_body, _err := client.DescribeCheckWarningsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClientConfSetupWithOptions(request *DescribeClientConfSetupRequest, runtime *util.RuntimeOptions) (_result *DescribeClientConfSetupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.StrategyTag)) {
		query["StrategyTag"] = request.StrategyTag
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyTagValue)) {
		query["StrategyTagValue"] = request.StrategyTagValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClientConfSetup"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClientConfSetupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClientConfSetup(request *DescribeClientConfSetupRequest) (_result *DescribeClientConfSetupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClientConfSetupResponse{}
	_body, _err := client.DescribeClientConfSetupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClientConfStrategyWithOptions(request *DescribeClientConfStrategyRequest, runtime *util.RuntimeOptions) (_result *DescribeClientConfStrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.TagValue)) {
		query["TagValue"] = request.TagValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClientConfStrategy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClientConfStrategyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClientConfStrategy(request *DescribeClientConfStrategyRequest) (_result *DescribeClientConfStrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClientConfStrategyResponse{}
	_body, _err := client.DescribeClientConfStrategyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can search for assets by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
 *
 * @param request DescribeCloudCenterInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCloudCenterInstancesResponse
 */
func (client *Client) DescribeCloudCenterInstancesWithOptions(request *DescribeCloudCenterInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudCenterInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Importance)) {
		query["Importance"] = request.Importance
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalExp)) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !tea.BoolValue(util.IsUnset(request.MachineTypes)) {
		query["MachineTypes"] = request.MachineTypes
	}

	if !tea.BoolValue(util.IsUnset(request.NoGroupTrace)) {
		query["NoGroupTrace"] = request.NoGroupTrace
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudCenterInstances"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudCenterInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can search for assets by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
 *
 * @param request DescribeCloudCenterInstancesRequest
 * @return DescribeCloudCenterInstancesResponse
 */
func (client *Client) DescribeCloudCenterInstances(request *DescribeCloudCenterInstancesRequest) (_result *DescribeCloudCenterInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudCenterInstancesResponse{}
	_body, _err := client.DescribeCloudCenterInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCloudProductFieldStatisticsWithOptions(runtime *util.RuntimeOptions) (_result *DescribeCloudProductFieldStatisticsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudProductFieldStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudProductFieldStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCloudProductFieldStatistics() (_result *DescribeCloudProductFieldStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudProductFieldStatisticsResponse{}
	_body, _err := client.DescribeCloudProductFieldStatisticsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterBasicInfoWithOptions(request *DescribeClusterBasicInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterBasicInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterBasicInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterBasicInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterBasicInfo(request *DescribeClusterBasicInfoRequest) (_result *DescribeClusterBasicInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterBasicInfoResponse{}
	_body, _err := client.DescribeClusterBasicInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterInfoListWithOptions(request *DescribeClusterInfoListRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterInfoListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Target)) {
		query["Target"] = request.Target
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterInfoList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterInfoListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterInfoList(request *DescribeClusterInfoListRequest) (_result *DescribeClusterInfoListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterInfoListResponse{}
	_body, _err := client.DescribeClusterInfoListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterNetworkWithOptions(request *DescribeClusterNetworkRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterNetwork"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterNetworkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterNetwork(request *DescribeClusterNetworkRequest) (_result *DescribeClusterNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterNetworkResponse{}
	_body, _err := client.DescribeClusterNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterVulStatisticsWithOptions(request *DescribeClusterVulStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterVulStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Types)) {
		query["Types"] = request.Types
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterVulStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterVulStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterVulStatistics(request *DescribeClusterVulStatisticsRequest) (_result *DescribeClusterVulStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterVulStatisticsResponse{}
	_body, _err := client.DescribeClusterVulStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCommonOverallConfigWithOptions(request *DescribeCommonOverallConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeCommonOverallConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCommonOverallConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCommonOverallConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCommonOverallConfig(request *DescribeCommonOverallConfigRequest) (_result *DescribeCommonOverallConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCommonOverallConfigResponse{}
	_body, _err := client.DescribeCommonOverallConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCommonOverallConfigListWithOptions(request *DescribeCommonOverallConfigListRequest, runtime *util.RuntimeOptions) (_result *DescribeCommonOverallConfigListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.TypeList)) {
		query["TypeList"] = request.TypeList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCommonOverallConfigList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCommonOverallConfigListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCommonOverallConfigList(request *DescribeCommonOverallConfigListRequest) (_result *DescribeCommonOverallConfigListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCommonOverallConfigListResponse{}
	_body, _err := client.DescribeCommonOverallConfigListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCommonTargetConfigWithOptions(request *DescribeCommonTargetConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeCommonTargetConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCommonTargetConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCommonTargetConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCommonTargetConfig(request *DescribeCommonTargetConfigRequest) (_result *DescribeCommonTargetConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCommonTargetConfigResponse{}
	_body, _err := client.DescribeCommonTargetConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCommonTargetResultListWithOptions(request *DescribeCommonTargetResultListRequest, runtime *util.RuntimeOptions) (_result *DescribeCommonTargetResultListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCommonTargetResultList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCommonTargetResultListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCommonTargetResultList(request *DescribeCommonTargetResultListRequest) (_result *DescribeCommonTargetResultListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCommonTargetResultListResponse{}
	_body, _err := client.DescribeCommonTargetResultListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeConcernNecessityWithOptions(request *DescribeConcernNecessityRequest, runtime *util.RuntimeOptions) (_result *DescribeConcernNecessityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConcernNecessity"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConcernNecessityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeConcernNecessity(request *DescribeConcernNecessityRequest) (_result *DescribeConcernNecessityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConcernNecessityResponse{}
	_body, _err := client.DescribeConcernNecessityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeContainerCriteriaWithOptions(request *DescribeContainerCriteriaRequest, runtime *util.RuntimeOptions) (_result *DescribeContainerCriteriaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupField)) {
		query["GroupField"] = request.GroupField
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["Value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeContainerCriteria"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeContainerCriteriaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeContainerCriteria(request *DescribeContainerCriteriaRequest) (_result *DescribeContainerCriteriaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeContainerCriteriaResponse{}
	_body, _err := client.DescribeContainerCriteriaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeContainerInstancesWithOptions(request *DescribeContainerInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeContainerInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalExp)) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeContainerInstances"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeContainerInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeContainerInstances(request *DescribeContainerInstancesRequest) (_result *DescribeContainerInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeContainerInstancesResponse{}
	_body, _err := client.DescribeContainerInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Only users who created a Container Registry Enterprise Edition instance can call this operation.
 *
 * @param request DescribeContainerStatisticsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeContainerStatisticsResponse
 */
func (client *Client) DescribeContainerStatisticsWithOptions(request *DescribeContainerStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeContainerStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeContainerStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeContainerStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Only users who created a Container Registry Enterprise Edition instance can call this operation.
 *
 * @param request DescribeContainerStatisticsRequest
 * @return DescribeContainerStatisticsResponse
 */
func (client *Client) DescribeContainerStatistics(request *DescribeContainerStatisticsRequest) (_result *DescribeContainerStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeContainerStatisticsResponse{}
	_body, _err := client.DescribeContainerStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeContainerTagsWithOptions(request *DescribeContainerTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeContainerTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.FieldName)) {
		query["FieldName"] = request.FieldName
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValue)) {
		query["FieldValue"] = request.FieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeContainerTags"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeContainerTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeContainerTags(request *DescribeContainerTagsRequest) (_result *DescribeContainerTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeContainerTagsResponse{}
	_body, _err := client.DescribeContainerTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCountNotScannedImageWithOptions(runtime *util.RuntimeOptions) (_result *DescribeCountNotScannedImageResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeCountNotScannedImage"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCountNotScannedImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCountNotScannedImage() (_result *DescribeCountNotScannedImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCountNotScannedImageResponse{}
	_body, _err := client.DescribeCountNotScannedImageWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCountScannedImageWithOptions(runtime *util.RuntimeOptions) (_result *DescribeCountScannedImageResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeCountScannedImage"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCountScannedImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCountScannedImage() (_result *DescribeCountScannedImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCountScannedImageResponse{}
	_body, _err := client.DescribeCountScannedImageWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCriteriaWithOptions(request *DescribeCriteriaRequest, runtime *util.RuntimeOptions) (_result *DescribeCriteriaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MachineTypes)) {
		query["MachineTypes"] = request.MachineTypes
	}

	if !tea.BoolValue(util.IsUnset(request.SupportAutoTag)) {
		query["SupportAutoTag"] = request.SupportAutoTag
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["Value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCriteria"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCriteriaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCriteria(request *DescribeCriteriaRequest) (_result *DescribeCriteriaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCriteriaResponse{}
	_body, _err := client.DescribeCriteriaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCustomBlockRecordsWithOptions(request *DescribeCustomBlockRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeCustomBlockRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BlockIp)) {
		query["BlockIp"] = request.BlockIp
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCustomBlockRecords"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCustomBlockRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCustomBlockRecords(request *DescribeCustomBlockRecordsRequest) (_result *DescribeCustomBlockRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCustomBlockRecordsResponse{}
	_body, _err := client.DescribeCustomBlockRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCycleTaskListWithOptions(request *DescribeCycleTaskListRequest, runtime *util.RuntimeOptions) (_result *DescribeCycleTaskListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCycleTaskList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCycleTaskListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCycleTaskList(request *DescribeCycleTaskListRequest) (_result *DescribeCycleTaskListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCycleTaskListResponse{}
	_body, _err := client.DescribeCycleTaskListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDingTalkWithOptions(request *DescribeDingTalkRequest, runtime *util.RuntimeOptions) (_result *DescribeDingTalkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RuleActionName)) {
		query["RuleActionName"] = request.RuleActionName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDingTalk"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDingTalkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDingTalk(request *DescribeDingTalkRequest) (_result *DescribeDingTalkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDingTalkResponse{}
	_body, _err := client.DescribeDingTalkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDomainCountWithOptions(request *DescribeDomainCountRequest, runtime *util.RuntimeOptions) (_result *DescribeDomainCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDomainCount"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDomainCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDomainCount(request *DescribeDomainCountRequest) (_result *DescribeDomainCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDomainCountResponse{}
	_body, _err := client.DescribeDomainCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDomainDetailWithOptions(request *DescribeDomainDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeDomainDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDomainDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDomainDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDomainDetail(request *DescribeDomainDetailRequest) (_result *DescribeDomainDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDomainDetailResponse{}
	_body, _err := client.DescribeDomainDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDomainListWithOptions(request *DescribeDomainListRequest, runtime *util.RuntimeOptions) (_result *DescribeDomainListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.DomainType)) {
		query["DomainType"] = request.DomainType
	}

	if !tea.BoolValue(util.IsUnset(request.FuzzyDomain)) {
		query["FuzzyDomain"] = request.FuzzyDomain
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDomainList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDomainListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDomainList(request *DescribeDomainListRequest) (_result *DescribeDomainListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDomainListResponse{}
	_body, _err := client.DescribeDomainListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEmgUserAgreementWithOptions(runtime *util.RuntimeOptions) (_result *DescribeEmgUserAgreementResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeEmgUserAgreement"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEmgUserAgreementResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEmgUserAgreement() (_result *DescribeEmgUserAgreementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEmgUserAgreementResponse{}
	_body, _err := client.DescribeEmgUserAgreementWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEmgVulItemWithOptions(request *DescribeEmgVulItemRequest, runtime *util.RuntimeOptions) (_result *DescribeEmgVulItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckType)) {
		query["CheckType"] = request.CheckType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RiskStatus)) {
		query["RiskStatus"] = request.RiskStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ScanType)) {
		query["ScanType"] = request.ScanType
	}

	if !tea.BoolValue(util.IsUnset(request.VulName)) {
		query["VulName"] = request.VulName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEmgVulItem"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEmgVulItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEmgVulItem(request *DescribeEmgVulItemRequest) (_result *DescribeEmgVulItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEmgVulItemResponse{}
	_body, _err := client.DescribeEmgVulItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEventLevelCountWithOptions(request *DescribeEventLevelCountRequest, runtime *util.RuntimeOptions) (_result *DescribeEventLevelCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldName)) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldValue)) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerIds)) {
		query["ContainerIds"] = request.ContainerIds
	}

	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventLevelCount"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventLevelCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEventLevelCount(request *DescribeEventLevelCountRequest) (_result *DescribeEventLevelCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventLevelCountResponse{}
	_body, _err := client.DescribeEventLevelCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEventOnStageWithOptions(request *DescribeEventOnStageRequest, runtime *util.RuntimeOptions) (_result *DescribeEventOnStageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventOnStage"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventOnStageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEventOnStage(request *DescribeEventOnStageRequest) (_result *DescribeEventOnStageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventOnStageResponse{}
	_body, _err := client.DescribeEventOnStageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeExcludeSystemPathWithOptions(request *DescribeExcludeSystemPathRequest, runtime *util.RuntimeOptions) (_result *DescribeExcludeSystemPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExcludeSystemPath"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExcludeSystemPathResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeExcludeSystemPath(request *DescribeExcludeSystemPathRequest) (_result *DescribeExcludeSystemPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExcludeSystemPathResponse{}
	_body, _err := client.DescribeExcludeSystemPathWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeExportInfoWithOptions(request *DescribeExportInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeExportInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExportId)) {
		query["ExportId"] = request.ExportId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExportInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExportInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeExportInfo(request *DescribeExportInfoRequest) (_result *DescribeExportInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExportInfoResponse{}
	_body, _err := client.DescribeExportInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeExposedCheckWarningWithOptions(request *DescribeExposedCheckWarningRequest, runtime *util.RuntimeOptions) (_result *DescribeExposedCheckWarningResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.TypeName)) {
		query["TypeName"] = request.TypeName
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExposedCheckWarning"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExposedCheckWarningResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeExposedCheckWarning(request *DescribeExposedCheckWarningRequest) (_result *DescribeExposedCheckWarningResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExposedCheckWarningResponse{}
	_body, _err := client.DescribeExposedCheckWarningWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeExposedInstanceCriteriaWithOptions(request *DescribeExposedInstanceCriteriaRequest, runtime *util.RuntimeOptions) (_result *DescribeExposedInstanceCriteriaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["Value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExposedInstanceCriteria"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExposedInstanceCriteriaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeExposedInstanceCriteria(request *DescribeExposedInstanceCriteriaRequest) (_result *DescribeExposedInstanceCriteriaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExposedInstanceCriteriaResponse{}
	_body, _err := client.DescribeExposedInstanceCriteriaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeExposedInstanceDetailWithOptions(request *DescribeExposedInstanceDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeExposedInstanceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExposedInstanceDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExposedInstanceDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeExposedInstanceDetail(request *DescribeExposedInstanceDetailRequest) (_result *DescribeExposedInstanceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExposedInstanceDetailResponse{}
	_body, _err := client.DescribeExposedInstanceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeExposedInstanceListWithOptions(request *DescribeExposedInstanceListRequest, runtime *util.RuntimeOptions) (_result *DescribeExposedInstanceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ExposureComponent)) {
		query["ExposureComponent"] = request.ExposureComponent
	}

	if !tea.BoolValue(util.IsUnset(request.ExposureIp)) {
		query["ExposureIp"] = request.ExposureIp
	}

	if !tea.BoolValue(util.IsUnset(request.ExposurePort)) {
		query["ExposurePort"] = request.ExposurePort
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HealthStatus)) {
		query["HealthStatus"] = request.HealthStatus
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.VulStatus)) {
		query["VulStatus"] = request.VulStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExposedInstanceList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExposedInstanceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeExposedInstanceList(request *DescribeExposedInstanceListRequest) (_result *DescribeExposedInstanceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExposedInstanceListResponse{}
	_body, _err := client.DescribeExposedInstanceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeExposedStatisticsWithOptions(runtime *util.RuntimeOptions) (_result *DescribeExposedStatisticsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeExposedStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExposedStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeExposedStatistics() (_result *DescribeExposedStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExposedStatisticsResponse{}
	_body, _err := client.DescribeExposedStatisticsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeExposedStatisticsDetailWithOptions(request *DescribeExposedStatisticsDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeExposedStatisticsDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StatisticsType)) {
		query["StatisticsType"] = request.StatisticsType
	}

	if !tea.BoolValue(util.IsUnset(request.StatisticsTypeGatewayType)) {
		query["StatisticsTypeGatewayType"] = request.StatisticsTypeGatewayType
	}

	if !tea.BoolValue(util.IsUnset(request.StatisticsTypeInstanceValue)) {
		query["StatisticsTypeInstanceValue"] = request.StatisticsTypeInstanceValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExposedStatisticsDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExposedStatisticsDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeExposedStatisticsDetail(request *DescribeExposedStatisticsDetailRequest) (_result *DescribeExposedStatisticsDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExposedStatisticsDetailResponse{}
	_body, _err := client.DescribeExposedStatisticsDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFieldStatisticsWithOptions(request *DescribeFieldStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeFieldStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MachineTypes)) {
		query["MachineTypes"] = request.MachineTypes
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFieldStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFieldStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFieldStatistics(request *DescribeFieldStatisticsRequest) (_result *DescribeFieldStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFieldStatisticsResponse{}
	_body, _err := client.DescribeFieldStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFrontVulPatchListWithOptions(request *DescribeFrontVulPatchListRequest, runtime *util.RuntimeOptions) (_result *DescribeFrontVulPatchListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Info)) {
		query["Info"] = request.Info
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.OperateType)) {
		query["OperateType"] = request.OperateType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFrontVulPatchList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFrontVulPatchListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFrontVulPatchList(request *DescribeFrontVulPatchListRequest) (_result *DescribeFrontVulPatchListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFrontVulPatchListResponse{}
	_body, _err := client.DescribeFrontVulPatchListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeGroupedContainerInstancesWithOptions(request *DescribeGroupedContainerInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupedContainerInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValue)) {
		query["FieldValue"] = request.FieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.GroupField)) {
		query["GroupField"] = request.GroupField
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalExp)) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupedContainerInstances"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupedContainerInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeGroupedContainerInstances(request *DescribeGroupedContainerInstancesRequest) (_result *DescribeGroupedContainerInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupedContainerInstancesResponse{}
	_body, _err := client.DescribeGroupedContainerInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeGroupedInstancesWithOptions(request *DescribeGroupedInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupedInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValue)) {
		query["FieldValue"] = request.FieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.GroupField)) {
		query["GroupField"] = request.GroupField
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.MachineTypes)) {
		query["MachineTypes"] = request.MachineTypes
	}

	if !tea.BoolValue(util.IsUnset(request.NoPage)) {
		query["NoPage"] = request.NoPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		query["Vendor"] = request.Vendor
	}

	if !tea.BoolValue(util.IsUnset(request.Vendors)) {
		query["Vendors"] = request.Vendors
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupedInstances"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupedInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeGroupedInstances(request *DescribeGroupedInstancesRequest) (_result *DescribeGroupedInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupedInstancesResponse{}
	_body, _err := client.DescribeGroupedInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeGroupedMaliciousFilesWithOptions(request *DescribeGroupedMaliciousFilesRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupedMaliciousFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.FuzzyMaliciousName)) {
		query["FuzzyMaliciousName"] = request.FuzzyMaliciousName
	}

	if !tea.BoolValue(util.IsUnset(request.ImageDigest)) {
		query["ImageDigest"] = request.ImageDigest
	}

	if !tea.BoolValue(util.IsUnset(request.ImageLayer)) {
		query["ImageLayer"] = request.ImageLayer
	}

	if !tea.BoolValue(util.IsUnset(request.ImageTag)) {
		query["ImageTag"] = request.ImageTag
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Levels)) {
		query["Levels"] = request.Levels
	}

	if !tea.BoolValue(util.IsUnset(request.MaliciousMd5)) {
		query["MaliciousMd5"] = request.MaliciousMd5
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RepoId)) {
		query["RepoId"] = request.RepoId
	}

	if !tea.BoolValue(util.IsUnset(request.RepoInstanceId)) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RepoName)) {
		query["RepoName"] = request.RepoName
	}

	if !tea.BoolValue(util.IsUnset(request.RepoNamespace)) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !tea.BoolValue(util.IsUnset(request.RepoRegionId)) {
		query["RepoRegionId"] = request.RepoRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ScanRange)) {
		query["ScanRange"] = request.ScanRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupedMaliciousFiles"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupedMaliciousFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeGroupedMaliciousFiles(request *DescribeGroupedMaliciousFilesRequest) (_result *DescribeGroupedMaliciousFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupedMaliciousFilesResponse{}
	_body, _err := client.DescribeGroupedMaliciousFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeGroupedTagsWithOptions(request *DescribeGroupedTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupedTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MachineTypes)) {
		query["MachineTypes"] = request.MachineTypes
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupedTags"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupedTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeGroupedTags(request *DescribeGroupedTagsRequest) (_result *DescribeGroupedTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupedTagsResponse{}
	_body, _err := client.DescribeGroupedTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeGroupedVulWithOptions(request *DescribeGroupedVulRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupedVulResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliasName)) {
		query["AliasName"] = request.AliasName
	}

	if !tea.BoolValue(util.IsUnset(request.AttachTypes)) {
		query["AttachTypes"] = request.AttachTypes
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Dealed)) {
		query["Dealed"] = request.Dealed
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Necessity)) {
		query["Necessity"] = request.Necessity
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchTags)) {
		query["SearchTags"] = request.SearchTags
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupedVul"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupedVulResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeGroupedVul(request *DescribeGroupedVulRequest) (_result *DescribeGroupedVulResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupedVulResponse{}
	_body, _err := client.DescribeGroupedVulWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHcExportInfoWithOptions(request *DescribeHcExportInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeHcExportInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExportId)) {
		query["ExportId"] = request.ExportId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHcExportInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHcExportInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHcExportInfo(request *DescribeHcExportInfoRequest) (_result *DescribeHcExportInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHcExportInfoResponse{}
	_body, _err := client.DescribeHcExportInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHoneyPotAuthWithOptions(runtime *util.RuntimeOptions) (_result *DescribeHoneyPotAuthResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeHoneyPotAuth"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHoneyPotAuthResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHoneyPotAuth() (_result *DescribeHoneyPotAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHoneyPotAuthResponse{}
	_body, _err := client.DescribeHoneyPotAuthWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHoneyPotSuspStatisticsWithOptions(request *DescribeHoneyPotSuspStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeHoneyPotSuspStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.StatisticsDays)) {
		query["StatisticsDays"] = request.StatisticsDays
	}

	if !tea.BoolValue(util.IsUnset(request.StatisticsKeyType)) {
		query["StatisticsKeyType"] = request.StatisticsKeyType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHoneyPotSuspStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHoneyPotSuspStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHoneyPotSuspStatistics(request *DescribeHoneyPotSuspStatisticsRequest) (_result *DescribeHoneyPotSuspStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHoneyPotSuspStatisticsResponse{}
	_body, _err := client.DescribeHoneyPotSuspStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageWithOptions(request *DescribeImageRequest, runtime *util.RuntimeOptions) (_result *DescribeImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageInstanceId)) {
		query["ImageInstanceId"] = request.ImageInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageRegionId)) {
		query["ImageRegionId"] = request.ImageRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageRepoId)) {
		query["ImageRepoId"] = request.ImageRepoId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageTag)) {
		query["ImageTag"] = request.ImageTag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImage"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImage(request *DescribeImageRequest) (_result *DescribeImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageResponse{}
	_body, _err := client.DescribeImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageBaselineCheckResultWithOptions(request *DescribeImageBaselineCheckResultRequest, runtime *util.RuntimeOptions) (_result *DescribeImageBaselineCheckResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.CriteriaType)) {
		query["CriteriaType"] = request.CriteriaType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUuid)) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RiskLevel)) {
		query["RiskLevel"] = request.RiskLevel
	}

	if !tea.BoolValue(util.IsUnset(request.ScanRange)) {
		query["ScanRange"] = request.ScanRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageBaselineCheckResult"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageBaselineCheckResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageBaselineCheckResult(request *DescribeImageBaselineCheckResultRequest) (_result *DescribeImageBaselineCheckResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageBaselineCheckResultResponse{}
	_body, _err := client.DescribeImageBaselineCheckResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageBaselineCheckSummaryWithOptions(request *DescribeImageBaselineCheckSummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeImageBaselineCheckSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.CriteriaType)) {
		query["CriteriaType"] = request.CriteriaType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RiskLevel)) {
		query["RiskLevel"] = request.RiskLevel
	}

	if !tea.BoolValue(util.IsUnset(request.ScanRange)) {
		query["ScanRange"] = request.ScanRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageBaselineCheckSummary"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageBaselineCheckSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageBaselineCheckSummary(request *DescribeImageBaselineCheckSummaryRequest) (_result *DescribeImageBaselineCheckSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageBaselineCheckSummaryResponse{}
	_body, _err := client.DescribeImageBaselineCheckSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageBaselineDetailWithOptions(request *DescribeImageBaselineDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeImageBaselineDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaselineItemKey)) {
		query["BaselineItemKey"] = request.BaselineItemKey
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUuid)) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageBaselineDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageBaselineDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageBaselineDetail(request *DescribeImageBaselineDetailRequest) (_result *DescribeImageBaselineDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageBaselineDetailResponse{}
	_body, _err := client.DescribeImageBaselineDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageBaselineItemListWithOptions(request *DescribeImageBaselineItemListRequest, runtime *util.RuntimeOptions) (_result *DescribeImageBaselineItemListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaselineClassKey)) {
		query["BaselineClassKey"] = request.BaselineClassKey
	}

	if !tea.BoolValue(util.IsUnset(request.BaselineNameKey)) {
		query["BaselineNameKey"] = request.BaselineNameKey
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUuid)) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ScanRange)) {
		query["ScanRange"] = request.ScanRange
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageBaselineItemList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageBaselineItemListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageBaselineItemList(request *DescribeImageBaselineItemListRequest) (_result *DescribeImageBaselineItemListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageBaselineItemListResponse{}
	_body, _err := client.DescribeImageBaselineItemListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageBaselineStrategyWithOptions(request *DescribeImageBaselineStrategyRequest, runtime *util.RuntimeOptions) (_result *DescribeImageBaselineStrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyId)) {
		query["StrategyId"] = request.StrategyId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageBaselineStrategy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageBaselineStrategyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageBaselineStrategy(request *DescribeImageBaselineStrategyRequest) (_result *DescribeImageBaselineStrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageBaselineStrategyResponse{}
	_body, _err := client.DescribeImageBaselineStrategyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageCriteriaWithOptions(request *DescribeImageCriteriaRequest, runtime *util.RuntimeOptions) (_result *DescribeImageCriteriaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["Value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageCriteria"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageCriteriaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageCriteria(request *DescribeImageCriteriaRequest) (_result *DescribeImageCriteriaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageCriteriaResponse{}
	_body, _err := client.DescribeImageCriteriaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageFixTaskWithOptions(request *DescribeImageFixTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeImageFixTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageFixTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageFixTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageFixTask(request *DescribeImageFixTaskRequest) (_result *DescribeImageFixTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageFixTaskResponse{}
	_body, _err := client.DescribeImageFixTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageGroupedVulListWithOptions(request *DescribeImageGroupedVulListRequest, runtime *util.RuntimeOptions) (_result *DescribeImageGroupedVulListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliasName)) {
		query["AliasName"] = request.AliasName
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.CveId)) {
		query["CveId"] = request.CveId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageDigest)) {
		query["ImageDigest"] = request.ImageDigest
	}

	if !tea.BoolValue(util.IsUnset(request.ImageLayer)) {
		query["ImageLayer"] = request.ImageLayer
	}

	if !tea.BoolValue(util.IsUnset(request.ImageTag)) {
		query["ImageTag"] = request.ImageTag
	}

	if !tea.BoolValue(util.IsUnset(request.IsLatest)) {
		query["IsLatest"] = request.IsLatest
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Necessity)) {
		query["Necessity"] = request.Necessity
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PatchId)) {
		query["PatchId"] = request.PatchId
	}

	if !tea.BoolValue(util.IsUnset(request.RepoId)) {
		query["RepoId"] = request.RepoId
	}

	if !tea.BoolValue(util.IsUnset(request.RepoInstanceId)) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RepoName)) {
		query["RepoName"] = request.RepoName
	}

	if !tea.BoolValue(util.IsUnset(request.RepoNamespace)) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !tea.BoolValue(util.IsUnset(request.RepoRegionId)) {
		query["RepoRegionId"] = request.RepoRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ScanRange)) {
		query["ScanRange"] = request.ScanRange
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageGroupedVulList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageGroupedVulListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageGroupedVulList(request *DescribeImageGroupedVulListRequest) (_result *DescribeImageGroupedVulListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageGroupedVulListResponse{}
	_body, _err := client.DescribeImageGroupedVulListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageInfoListWithOptions(request *DescribeImageInfoListRequest, runtime *util.RuntimeOptions) (_result *DescribeImageInfoListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageInfoList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageInfoListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageInfoList(request *DescribeImageInfoListRequest) (_result *DescribeImageInfoListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageInfoListResponse{}
	_body, _err := client.DescribeImageInfoListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageInstancesWithOptions(request *DescribeImageInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeImageInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalExp)) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Scanned)) {
		query["Scanned"] = request.Scanned
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageInstances"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageInstances(request *DescribeImageInstancesRequest) (_result *DescribeImageInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageInstancesResponse{}
	_body, _err := client.DescribeImageInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageLatestScanTaskWithOptions(request *DescribeImageLatestScanTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeImageLatestScanTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Digest)) {
		query["Digest"] = request.Digest
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageLatestScanTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageLatestScanTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageLatestScanTask(request *DescribeImageLatestScanTaskRequest) (_result *DescribeImageLatestScanTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageLatestScanTaskResponse{}
	_body, _err := client.DescribeImageLatestScanTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageListBySensitiveFileWithOptions(tmpReq *DescribeImageListBySensitiveFileRequest, runtime *util.RuntimeOptions) (_result *DescribeImageListBySensitiveFileResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeImageListBySensitiveFileShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ScanRange)) {
		request.ScanRangeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScanRange, tea.String("ScanRange"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ImageDigest)) {
		query["ImageDigest"] = request.ImageDigest
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RepoInstanceId)) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RepoName)) {
		query["RepoName"] = request.RepoName
	}

	if !tea.BoolValue(util.IsUnset(request.RepoNamespace)) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !tea.BoolValue(util.IsUnset(request.RiskLevel)) {
		query["RiskLevel"] = request.RiskLevel
	}

	if !tea.BoolValue(util.IsUnset(request.ScanRangeShrink)) {
		query["ScanRange"] = request.ScanRangeShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SensitiveFileKey)) {
		query["SensitiveFileKey"] = request.SensitiveFileKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageListBySensitiveFile"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageListBySensitiveFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageListBySensitiveFile(request *DescribeImageListBySensitiveFileRequest) (_result *DescribeImageListBySensitiveFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageListBySensitiveFileResponse{}
	_body, _err := client.DescribeImageListBySensitiveFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageListWithBaselineNameWithOptions(request *DescribeImageListWithBaselineNameRequest, runtime *util.RuntimeOptions) (_result *DescribeImageListWithBaselineNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaselineNameKey)) {
		query["BaselineNameKey"] = request.BaselineNameKey
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterName)) {
		query["ClusterName"] = request.ClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerId)) {
		query["ContainerId"] = request.ContainerId
	}

	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.CriteriaType)) {
		query["CriteriaType"] = request.CriteriaType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Image)) {
		query["Image"] = request.Image
	}

	if !tea.BoolValue(util.IsUnset(request.ImageDigest)) {
		query["ImageDigest"] = request.ImageDigest
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Pod)) {
		query["Pod"] = request.Pod
	}

	if !tea.BoolValue(util.IsUnset(request.RepoInstanceId)) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RepoName)) {
		query["RepoName"] = request.RepoName
	}

	if !tea.BoolValue(util.IsUnset(request.RepoNamespace)) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !tea.BoolValue(util.IsUnset(request.ScanRange)) {
		query["ScanRange"] = request.ScanRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageListWithBaselineName"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageListWithBaselineNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageListWithBaselineName(request *DescribeImageListWithBaselineNameRequest) (_result *DescribeImageListWithBaselineNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageListWithBaselineNameResponse{}
	_body, _err := client.DescribeImageListWithBaselineNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageRepoCriteriaWithOptions(request *DescribeImageRepoCriteriaRequest, runtime *util.RuntimeOptions) (_result *DescribeImageRepoCriteriaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["Value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageRepoCriteria"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageRepoCriteriaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageRepoCriteria(request *DescribeImageRepoCriteriaRequest) (_result *DescribeImageRepoCriteriaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageRepoCriteriaResponse{}
	_body, _err := client.DescribeImageRepoCriteriaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageRepoDetailListWithOptions(request *DescribeImageRepoDetailListRequest, runtime *util.RuntimeOptions) (_result *DescribeImageRepoDetailListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalExp)) {
		query["LogicalExp"] = request.LogicalExp
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageRepoDetailList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageRepoDetailListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageRepoDetailList(request *DescribeImageRepoDetailListRequest) (_result *DescribeImageRepoDetailListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageRepoDetailListResponse{}
	_body, _err := client.DescribeImageRepoDetailListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageRepoListWithOptions(request *DescribeImageRepoListRequest, runtime *util.RuntimeOptions) (_result *DescribeImageRepoListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.FieldName)) {
		query["FieldName"] = request.FieldName
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValue)) {
		query["FieldValue"] = request.FieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.OperateType)) {
		query["OperateType"] = request.OperateType
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RepoName)) {
		query["RepoName"] = request.RepoName
	}

	if !tea.BoolValue(util.IsUnset(request.RepoNamespace)) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageRepoList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageRepoListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageRepoList(request *DescribeImageRepoListRequest) (_result *DescribeImageRepoListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageRepoListResponse{}
	_body, _err := client.DescribeImageRepoListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageScanAuthCountWithOptions(runtime *util.RuntimeOptions) (_result *DescribeImageScanAuthCountResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageScanAuthCount"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageScanAuthCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageScanAuthCount() (_result *DescribeImageScanAuthCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageScanAuthCountResponse{}
	_body, _err := client.DescribeImageScanAuthCountWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageScanAuthorizationWithOptions(runtime *util.RuntimeOptions) (_result *DescribeImageScanAuthorizationResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageScanAuthorization"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageScanAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageScanAuthorization() (_result *DescribeImageScanAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageScanAuthorizationResponse{}
	_body, _err := client.DescribeImageScanAuthorizationWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageSensitiveFileByKeyWithOptions(tmpReq *DescribeImageSensitiveFileByKeyRequest, runtime *util.RuntimeOptions) (_result *DescribeImageSensitiveFileByKeyResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeImageSensitiveFileByKeyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ScanRange)) {
		request.ScanRangeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScanRange, tea.String("ScanRange"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUuid)) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ScanRangeShrink)) {
		query["ScanRange"] = request.ScanRangeShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SensitiveFileKey)) {
		query["SensitiveFileKey"] = request.SensitiveFileKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageSensitiveFileByKey"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageSensitiveFileByKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageSensitiveFileByKey(request *DescribeImageSensitiveFileByKeyRequest) (_result *DescribeImageSensitiveFileByKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageSensitiveFileByKeyResponse{}
	_body, _err := client.DescribeImageSensitiveFileByKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageSensitiveFileListWithOptions(tmpReq *DescribeImageSensitiveFileListRequest, runtime *util.RuntimeOptions) (_result *DescribeImageSensitiveFileListResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeImageSensitiveFileListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ScanRange)) {
		request.ScanRangeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScanRange, tea.String("ScanRange"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.CriteriaType)) {
		query["CriteriaType"] = request.CriteriaType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUuid)) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RiskLevel)) {
		query["RiskLevel"] = request.RiskLevel
	}

	if !tea.BoolValue(util.IsUnset(request.ScanRangeShrink)) {
		query["ScanRange"] = request.ScanRangeShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageSensitiveFileList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageSensitiveFileListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageSensitiveFileList(request *DescribeImageSensitiveFileListRequest) (_result *DescribeImageSensitiveFileListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageSensitiveFileListResponse{}
	_body, _err := client.DescribeImageSensitiveFileListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Security Center can scan for security risks and collect statistics only for **Container Registry Enterprise Edition instances**.
 * >  Security Center cannot scan for security risks or collect statistics for **default** Container Registry instances.
 *
 * @param request DescribeImageStatisticsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeImageStatisticsResponse
 */
func (client *Client) DescribeImageStatisticsWithOptions(runtime *util.RuntimeOptions) (_result *DescribeImageStatisticsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Security Center can scan for security risks and collect statistics only for **Container Registry Enterprise Edition instances**.
 * >  Security Center cannot scan for security risks or collect statistics for **default** Container Registry instances.
 *
 * @return DescribeImageStatisticsResponse
 */
func (client *Client) DescribeImageStatistics() (_result *DescribeImageStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageStatisticsResponse{}
	_body, _err := client.DescribeImageStatisticsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageVulListWithOptions(request *DescribeImageVulListRequest, runtime *util.RuntimeOptions) (_result *DescribeImageVulListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliasName)) {
		query["AliasName"] = request.AliasName
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterName)) {
		query["ClusterName"] = request.ClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerId)) {
		query["ContainerId"] = request.ContainerId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Dealed)) {
		query["Dealed"] = request.Dealed
	}

	if !tea.BoolValue(util.IsUnset(request.Digest)) {
		query["Digest"] = request.Digest
	}

	if !tea.BoolValue(util.IsUnset(request.Image)) {
		query["Image"] = request.Image
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Necessity)) {
		query["Necessity"] = request.Necessity
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Pod)) {
		query["Pod"] = request.Pod
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RepoId)) {
		query["RepoId"] = request.RepoId
	}

	if !tea.BoolValue(util.IsUnset(request.RepoId)) {
		query["RepoId"] = request.RepoId
	}

	if !tea.BoolValue(util.IsUnset(request.RepoInstanceId)) {
		query["RepoInstanceId"] = request.RepoInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RepoName)) {
		query["RepoName"] = request.RepoName
	}

	if !tea.BoolValue(util.IsUnset(request.RepoName)) {
		query["RepoName"] = request.RepoName
	}

	if !tea.BoolValue(util.IsUnset(request.RepoNamespace)) {
		query["RepoNamespace"] = request.RepoNamespace
	}

	if !tea.BoolValue(util.IsUnset(request.RepoRegionId)) {
		query["RepoRegionId"] = request.RepoRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ScanRange)) {
		query["ScanRange"] = request.ScanRange
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["StatusList"] = request.StatusList
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageVulList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageVulListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageVulList(request *DescribeImageVulListRequest) (_result *DescribeImageVulListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageVulListResponse{}
	_body, _err := client.DescribeImageVulListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstallCaptchaWithOptions(request *DescribeInstallCaptchaRequest, runtime *util.RuntimeOptions) (_result *DescribeInstallCaptchaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Deadline)) {
		query["Deadline"] = request.Deadline
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstallCaptcha"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstallCaptchaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstallCaptcha(request *DescribeInstallCaptchaRequest) (_result *DescribeInstallCaptchaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstallCaptchaResponse{}
	_body, _err := client.DescribeInstallCaptchaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstallCodeWithOptions(runtime *util.RuntimeOptions) (_result *DescribeInstallCodeResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstallCode"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstallCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstallCode() (_result *DescribeInstallCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstallCodeResponse{}
	_body, _err := client.DescribeInstallCodeWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call the DescribeInstallCodes operation to query the commands that are used to manually install the Security Center agent. The returned results contain the installation verification code and the server information. If you want to manually install the Security Center agent on your server, you can call this operation to query installation commands.
 * # Limits
 * You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeInstallCodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstallCodesResponse
 */
func (client *Client) DescribeInstallCodesWithOptions(runtime *util.RuntimeOptions) (_result *DescribeInstallCodesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstallCodes"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstallCodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call the DescribeInstallCodes operation to query the commands that are used to manually install the Security Center agent. The returned results contain the installation verification code and the server information. If you want to manually install the Security Center agent on your server, you can call this operation to query installation commands.
 * # Limits
 * You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @return DescribeInstallCodesResponse
 */
func (client *Client) DescribeInstallCodes() (_result *DescribeInstallCodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstallCodesResponse{}
	_body, _err := client.DescribeInstallCodesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceAntiBruteForceRulesWithOptions(request *DescribeInstanceAntiBruteForceRulesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAntiBruteForceRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceAntiBruteForceRules"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceAntiBruteForceRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceAntiBruteForceRules(request *DescribeInstanceAntiBruteForceRulesRequest) (_result *DescribeInstanceAntiBruteForceRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAntiBruteForceRulesResponse{}
	_body, _err := client.DescribeInstanceAntiBruteForceRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceRebootStatusWithOptions(request *DescribeInstanceRebootStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceRebootStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceRebootStatus"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceRebootStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceRebootStatus(request *DescribeInstanceRebootStatusRequest) (_result *DescribeInstanceRebootStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceRebootStatusResponse{}
	_body, _err := client.DescribeInstanceRebootStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceStatisticsWithOptions(request *DescribeInstanceStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceStatistics(request *DescribeInstanceStatisticsRequest) (_result *DescribeInstanceStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceStatisticsResponse{}
	_body, _err := client.DescribeInstanceStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeIpTagsWithOptions(request *DescribeIpTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeIpTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		query["Ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityEventId)) {
		query["SecurityEventId"] = request.SecurityEventId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeIpTags"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeIpTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeIpTags(request *DescribeIpTagsRequest) (_result *DescribeIpTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIpTagsResponse{}
	_body, _err := client.DescribeIpTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLatestScanTaskWithOptions(runtime *util.RuntimeOptions) (_result *DescribeLatestScanTaskResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeLatestScanTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLatestScanTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLatestScanTask() (_result *DescribeLatestScanTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLatestScanTaskResponse{}
	_body, _err := client.DescribeLatestScanTaskWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLogMetaWithOptions(request *DescribeLogMetaRequest, runtime *util.RuntimeOptions) (_result *DescribeLogMetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLogMeta"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLogMetaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLogMeta(request *DescribeLogMetaRequest) (_result *DescribeLogMetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLogMetaResponse{}
	_body, _err := client.DescribeLogMetaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLogShipperStatusWithOptions(request *DescribeLogShipperStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeLogShipperStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLogShipperStatus"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLogShipperStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLogShipperStatus(request *DescribeLogShipperStatusRequest) (_result *DescribeLogShipperStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLogShipperStatusResponse{}
	_body, _err := client.DescribeLogShipperStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLoginBaseConfigsWithOptions(request *DescribeLoginBaseConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeLoginBaseConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Target)) {
		query["Target"] = request.Target
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoginBaseConfigs"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLoginBaseConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLoginBaseConfigs(request *DescribeLoginBaseConfigsRequest) (_result *DescribeLoginBaseConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoginBaseConfigsResponse{}
	_body, _err := client.DescribeLoginBaseConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLoginSwitchConfigsWithOptions(runtime *util.RuntimeOptions) (_result *DescribeLoginSwitchConfigsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoginSwitchConfigs"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLoginSwitchConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLoginSwitchConfigs() (_result *DescribeLoginSwitchConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoginSwitchConfigsResponse{}
	_body, _err := client.DescribeLoginSwitchConfigsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLogstoreStorageWithOptions(request *DescribeLogstoreStorageRequest, runtime *util.RuntimeOptions) (_result *DescribeLogstoreStorageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLogstoreStorage"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLogstoreStorageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLogstoreStorage(request *DescribeLogstoreStorageRequest) (_result *DescribeLogstoreStorageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLogstoreStorageResponse{}
	_body, _err := client.DescribeLogstoreStorageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMachineCanRebootWithOptions(request *DescribeMachineCanRebootRequest, runtime *util.RuntimeOptions) (_result *DescribeMachineCanRebootResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMachineCanReboot"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMachineCanRebootResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMachineCanReboot(request *DescribeMachineCanRebootRequest) (_result *DescribeMachineCanRebootResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMachineCanRebootResponse{}
	_body, _err := client.DescribeMachineCanRebootWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeModuleConfigWithOptions(runtime *util.RuntimeOptions) (_result *DescribeModuleConfigResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeModuleConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeModuleConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeModuleConfig() (_result *DescribeModuleConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeModuleConfigResponse{}
	_body, _err := client.DescribeModuleConfigWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNoticeConfigWithOptions(request *DescribeNoticeConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeNoticeConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNoticeConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNoticeConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNoticeConfig(request *DescribeNoticeConfigRequest) (_result *DescribeNoticeConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNoticeConfigResponse{}
	_body, _err := client.DescribeNoticeConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNsasSuspEventTypeWithOptions(request *DescribeNsasSuspEventTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeNsasSuspEventTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContainerFieldName)) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldValue)) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNsasSuspEventType"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNsasSuspEventTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNsasSuspEventType(request *DescribeNsasSuspEventTypeRequest) (_result *DescribeNsasSuspEventTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNsasSuspEventTypeResponse{}
	_body, _err := client.DescribeNsasSuspEventTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOfflineMachinesWithOptions(request *DescribeOfflineMachinesRequest, runtime *util.RuntimeOptions) (_result *DescribeOfflineMachinesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Os)) {
		query["Os"] = request.Os
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionIdStr)) {
		query["RegionIdStr"] = request.RegionIdStr
	}

	if !tea.BoolValue(util.IsUnset(request.RegionNo)) {
		query["RegionNo"] = request.RegionNo
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		query["Vendor"] = request.Vendor
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOfflineMachines"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOfflineMachinesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOfflineMachines(request *DescribeOfflineMachinesRequest) (_result *DescribeOfflineMachinesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOfflineMachinesResponse{}
	_body, _err := client.DescribeOfflineMachinesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOnceTaskWithOptions(request *DescribeOnceTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeOnceTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndTimeQuery)) {
		query["EndTimeQuery"] = request.EndTimeQuery
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RootTaskId)) {
		query["RootTaskId"] = request.RootTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTimeQuery)) {
		query["StartTimeQuery"] = request.StartTimeQuery
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOnceTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOnceTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOnceTask(request *DescribeOnceTaskRequest) (_result *DescribeOnceTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOnceTaskResponse{}
	_body, _err := client.DescribeOnceTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOnceTaskLeafRecordPageWithOptions(request *DescribeOnceTaskLeafRecordPageRequest, runtime *util.RuntimeOptions) (_result *DescribeOnceTaskLeafRecordPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RelateInfo)) {
		query["RelateInfo"] = request.RelateInfo
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["StatusList"] = request.StatusList
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOnceTaskLeafRecordPage"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOnceTaskLeafRecordPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOnceTaskLeafRecordPage(request *DescribeOnceTaskLeafRecordPageRequest) (_result *DescribeOnceTaskLeafRecordPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOnceTaskLeafRecordPageResponse{}
	_body, _err := client.DescribeOnceTaskLeafRecordPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyCountWithOptions(request *DescribePropertyCountRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyCount"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyCount(request *DescribePropertyCountRequest) (_result *DescribePropertyCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyCountResponse{}
	_body, _err := client.DescribePropertyCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyCronDetailWithOptions(request *DescribePropertyCronDetailRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyCronDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Extend)) {
		query["Extend"] = request.Extend
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyCronDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyCronDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyCronDetail(request *DescribePropertyCronDetailRequest) (_result *DescribePropertyCronDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyCronDetailResponse{}
	_body, _err := client.DescribePropertyCronDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyCronItemWithOptions(request *DescribePropertyCronItemRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyCronItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ForceFlush)) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyCronItem"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyCronItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyCronItem(request *DescribePropertyCronItemRequest) (_result *DescribePropertyCronItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyCronItemResponse{}
	_body, _err := client.DescribePropertyCronItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyPortDetailWithOptions(request *DescribePropertyPortDetailRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyPortDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BindIp)) {
		query["BindIp"] = request.BindIp
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Extend)) {
		query["Extend"] = request.Extend
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.ProcName)) {
		query["ProcName"] = request.ProcName
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyPortDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyPortDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyPortDetail(request *DescribePropertyPortDetailRequest) (_result *DescribePropertyPortDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyPortDetailResponse{}
	_body, _err := client.DescribePropertyPortDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyPortItemWithOptions(request *DescribePropertyPortItemRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyPortItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ForceFlush)) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyPortItem"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyPortItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyPortItem(request *DescribePropertyPortItemRequest) (_result *DescribePropertyPortItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyPortItemResponse{}
	_body, _err := client.DescribePropertyPortItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyProcDetailWithOptions(request *DescribePropertyProcDetailRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyProcDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cmdline)) {
		query["Cmdline"] = request.Cmdline
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Extend)) {
		query["Extend"] = request.Extend
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProcTimeEnd)) {
		query["ProcTimeEnd"] = request.ProcTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.ProcTimeStart)) {
		query["ProcTimeStart"] = request.ProcTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyProcDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyProcDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyProcDetail(request *DescribePropertyProcDetailRequest) (_result *DescribePropertyProcDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyProcDetailResponse{}
	_body, _err := client.DescribePropertyProcDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyProcItemWithOptions(request *DescribePropertyProcItemRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyProcItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ForceFlush)) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyProcItem"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyProcItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyProcItem(request *DescribePropertyProcItemRequest) (_result *DescribePropertyProcItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyProcItemResponse{}
	_body, _err := client.DescribePropertyProcItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyScaDetailWithOptions(request *DescribePropertyScaDetailRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyScaDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Biz)) {
		query["Biz"] = request.Biz
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Pid)) {
		query["Pid"] = request.Pid
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessStartedEnd)) {
		query["ProcessStartedEnd"] = request.ProcessStartedEnd
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessStartedStart)) {
		query["ProcessStartedStart"] = request.ProcessStartedStart
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.ScaName)) {
		query["ScaName"] = request.ScaName
	}

	if !tea.BoolValue(util.IsUnset(request.ScaNamePattern)) {
		query["ScaNamePattern"] = request.ScaNamePattern
	}

	if !tea.BoolValue(util.IsUnset(request.ScaVersion)) {
		query["ScaVersion"] = request.ScaVersion
	}

	if !tea.BoolValue(util.IsUnset(request.SearchInfo)) {
		query["SearchInfo"] = request.SearchInfo
	}

	if !tea.BoolValue(util.IsUnset(request.SearchInfoSub)) {
		query["SearchInfoSub"] = request.SearchInfoSub
	}

	if !tea.BoolValue(util.IsUnset(request.SearchItem)) {
		query["SearchItem"] = request.SearchItem
	}

	if !tea.BoolValue(util.IsUnset(request.SearchItemSub)) {
		query["SearchItemSub"] = request.SearchItemSub
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyScaDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyScaDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyScaDetail(request *DescribePropertyScaDetailRequest) (_result *DescribePropertyScaDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyScaDetailResponse{}
	_body, _err := client.DescribePropertyScaDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyScaItemWithOptions(request *DescribePropertyScaItemRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyScaItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Biz)) {
		query["Biz"] = request.Biz
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ForceFlush)) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchInfo)) {
		query["SearchInfo"] = request.SearchInfo
	}

	if !tea.BoolValue(util.IsUnset(request.SearchItem)) {
		query["SearchItem"] = request.SearchItem
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyScaItem"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyScaItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyScaItem(request *DescribePropertyScaItemRequest) (_result *DescribePropertyScaItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyScaItemResponse{}
	_body, _err := client.DescribePropertyScaItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyScheduleConfigWithOptions(request *DescribePropertyScheduleConfigRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyScheduleConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyScheduleConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyScheduleConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyScheduleConfig(request *DescribePropertyScheduleConfigRequest) (_result *DescribePropertyScheduleConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyScheduleConfigResponse{}
	_body, _err := client.DescribePropertyScheduleConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertySoftwareDetailWithOptions(request *DescribePropertySoftwareDetailRequest, runtime *util.RuntimeOptions) (_result *DescribePropertySoftwareDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Extend)) {
		query["Extend"] = request.Extend
	}

	if !tea.BoolValue(util.IsUnset(request.InstallTimeEnd)) {
		query["InstallTimeEnd"] = request.InstallTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.InstallTimeStart)) {
		query["InstallTimeStart"] = request.InstallTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SoftwareVersion)) {
		query["SoftwareVersion"] = request.SoftwareVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertySoftwareDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertySoftwareDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertySoftwareDetail(request *DescribePropertySoftwareDetailRequest) (_result *DescribePropertySoftwareDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertySoftwareDetailResponse{}
	_body, _err := client.DescribePropertySoftwareDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertySoftwareItemWithOptions(request *DescribePropertySoftwareItemRequest, runtime *util.RuntimeOptions) (_result *DescribePropertySoftwareItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ForceFlush)) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertySoftwareItem"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertySoftwareItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertySoftwareItem(request *DescribePropertySoftwareItemRequest) (_result *DescribePropertySoftwareItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertySoftwareItemResponse{}
	_body, _err := client.DescribePropertySoftwareItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyTypeScaItemWithOptions(request *DescribePropertyTypeScaItemRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyTypeScaItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyTypeScaItem"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyTypeScaItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyTypeScaItem(request *DescribePropertyTypeScaItemRequest) (_result *DescribePropertyTypeScaItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyTypeScaItemResponse{}
	_body, _err := client.DescribePropertyTypeScaItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyUsageNewestWithOptions(request *DescribePropertyUsageNewestRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyUsageNewestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyUsageNewest"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyUsageNewestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyUsageNewest(request *DescribePropertyUsageNewestRequest) (_result *DescribePropertyUsageNewestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyUsageNewestResponse{}
	_body, _err := client.DescribePropertyUsageNewestWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyUserDetailWithOptions(request *DescribePropertyUserDetailRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyUserDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Extend)) {
		query["Extend"] = request.Extend
	}

	if !tea.BoolValue(util.IsUnset(request.IsRoot)) {
		query["IsRoot"] = request.IsRoot
	}

	if !tea.BoolValue(util.IsUnset(request.LastLoginTimeEnd)) {
		query["LastLoginTimeEnd"] = request.LastLoginTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.LastLoginTimeStart)) {
		query["LastLoginTimeStart"] = request.LastLoginTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyUserDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyUserDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyUserDetail(request *DescribePropertyUserDetailRequest) (_result *DescribePropertyUserDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyUserDetailResponse{}
	_body, _err := client.DescribePropertyUserDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePropertyUserItemWithOptions(request *DescribePropertyUserItemRequest, runtime *util.RuntimeOptions) (_result *DescribePropertyUserItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ForceFlush)) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePropertyUserItem"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePropertyUserItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePropertyUserItem(request *DescribePropertyUserItemRequest) (_result *DescribePropertyUserItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePropertyUserItemResponse{}
	_body, _err := client.DescribePropertyUserItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeQuaraFileDownloadInfoWithOptions(request *DescribeQuaraFileDownloadInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeQuaraFileDownloadInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.QuaraFileId)) {
		query["QuaraFileId"] = request.QuaraFileId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeQuaraFileDownloadInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeQuaraFileDownloadInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeQuaraFileDownloadInfo(request *DescribeQuaraFileDownloadInfoRequest) (_result *DescribeQuaraFileDownloadInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeQuaraFileDownloadInfoResponse{}
	_body, _err := client.DescribeQuaraFileDownloadInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
 * >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](~~164781~~).
 *
 * @param request DescribeRestoreJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRestoreJobsResponse
 */
func (client *Client) DescribeRestoreJobsWithOptions(request *DescribeRestoreJobsRequest, runtime *util.RuntimeOptions) (_result *DescribeRestoreJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.MachineRemark)) {
		query["MachineRemark"] = request.MachineRemark
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRestoreJobs"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRestoreJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
 * >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](~~164781~~).
 *
 * @param request DescribeRestoreJobsRequest
 * @return DescribeRestoreJobsResponse
 */
func (client *Client) DescribeRestoreJobs(request *DescribeRestoreJobsRequest) (_result *DescribeRestoreJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRestoreJobsResponse{}
	_body, _err := client.DescribeRestoreJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRestorePlansWithOptions(request *DescribeRestorePlansRequest, runtime *util.RuntimeOptions) (_result *DescribeRestorePlansResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRestorePlans"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRestorePlansResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRestorePlans(request *DescribeRestorePlansRequest) (_result *DescribeRestorePlansResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRestorePlansResponse{}
	_body, _err := client.DescribeRestorePlansWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request DescribeRiskCheckItemResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRiskCheckItemResultResponse
 */
// Deprecated
func (client *Client) DescribeRiskCheckItemResultWithOptions(request *DescribeRiskCheckItemResultRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskCheckItemResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ItemId)) {
		query["ItemId"] = request.ItemId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiskCheckItemResult"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskCheckItemResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request DescribeRiskCheckItemResultRequest
 * @return DescribeRiskCheckItemResultResponse
 */
// Deprecated
func (client *Client) DescribeRiskCheckItemResult(request *DescribeRiskCheckItemResultRequest) (_result *DescribeRiskCheckItemResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskCheckItemResultResponse{}
	_body, _err := client.DescribeRiskCheckItemResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request DescribeRiskCheckResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRiskCheckResultResponse
 */
// Deprecated
func (client *Client) DescribeRiskCheckResultWithOptions(request *DescribeRiskCheckResultRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskCheckResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssetType)) {
		query["AssetType"] = request.AssetType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ItemIds)) {
		query["ItemIds"] = request.ItemIds
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryFlag)) {
		query["QueryFlag"] = request.QueryFlag
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RiskLevel)) {
		query["RiskLevel"] = request.RiskLevel
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiskCheckResult"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskCheckResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request DescribeRiskCheckResultRequest
 * @return DescribeRiskCheckResultResponse
 */
// Deprecated
func (client *Client) DescribeRiskCheckResult(request *DescribeRiskCheckResultRequest) (_result *DescribeRiskCheckResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskCheckResultResponse{}
	_body, _err := client.DescribeRiskCheckResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request DescribeRiskCheckSummaryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRiskCheckSummaryResponse
 */
// Deprecated
func (client *Client) DescribeRiskCheckSummaryWithOptions(request *DescribeRiskCheckSummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskCheckSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceDirectoryAccountId)) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiskCheckSummary"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskCheckSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request DescribeRiskCheckSummaryRequest
 * @return DescribeRiskCheckSummaryResponse
 */
// Deprecated
func (client *Client) DescribeRiskCheckSummary(request *DescribeRiskCheckSummaryRequest) (_result *DescribeRiskCheckSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskCheckSummaryResponse{}
	_body, _err := client.DescribeRiskCheckSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request DescribeRiskItemTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRiskItemTypeResponse
 */
// Deprecated
func (client *Client) DescribeRiskItemTypeWithOptions(request *DescribeRiskItemTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskItemTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiskItemType"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskItemTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request DescribeRiskItemTypeRequest
 * @return DescribeRiskItemTypeResponse
 */
// Deprecated
func (client *Client) DescribeRiskItemType(request *DescribeRiskItemTypeRequest) (_result *DescribeRiskItemTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskItemTypeResponse{}
	_body, _err := client.DescribeRiskItemTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request DescribeRiskListCheckResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRiskListCheckResultResponse
 */
// Deprecated
func (client *Client) DescribeRiskListCheckResultWithOptions(request *DescribeRiskListCheckResultRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskListCheckResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiskListCheckResult"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskListCheckResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request DescribeRiskListCheckResultRequest
 * @return DescribeRiskListCheckResultResponse
 */
// Deprecated
func (client *Client) DescribeRiskListCheckResult(request *DescribeRiskListCheckResultRequest) (_result *DescribeRiskListCheckResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskListCheckResultResponse{}
	_body, _err := client.DescribeRiskListCheckResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRiskTypeWithOptions(request *DescribeRiskTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiskType"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRiskType(request *DescribeRiskTypeRequest) (_result *DescribeRiskTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskTypeResponse{}
	_body, _err := client.DescribeRiskTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRisksWithOptions(request *DescribeRisksRequest, runtime *util.RuntimeOptions) (_result *DescribeRisksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.RiskId)) {
		query["RiskId"] = request.RiskId
	}

	if !tea.BoolValue(util.IsUnset(request.RiskName)) {
		query["RiskName"] = request.RiskName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRisks"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRisksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRisks(request *DescribeRisksRequest) (_result *DescribeRisksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRisksResponse{}
	_body, _err := client.DescribeRisksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSasPmAgentListWithOptions(request *DescribeSasPmAgentListRequest, runtime *util.RuntimeOptions) (_result *DescribeSasPmAgentListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSasPmAgentList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSasPmAgentListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSasPmAgentList(request *DescribeSasPmAgentListRequest) (_result *DescribeSasPmAgentListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSasPmAgentListResponse{}
	_body, _err := client.DescribeSasPmAgentListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScanTaskProgressWithOptions(request *DescribeScanTaskProgressRequest, runtime *util.RuntimeOptions) (_result *DescribeScanTaskProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeScanTaskProgress"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeScanTaskProgressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScanTaskProgress(request *DescribeScanTaskProgressRequest) (_result *DescribeScanTaskProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScanTaskProgressResponse{}
	_body, _err := client.DescribeScanTaskProgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScanTaskStatisticsWithOptions(request *DescribeScanTaskStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeScanTaskStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Levels)) {
		query["Levels"] = request.Levels
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeScanTaskStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeScanTaskStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScanTaskStatistics(request *DescribeScanTaskStatisticsRequest) (_result *DescribeScanTaskStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScanTaskStatisticsResponse{}
	_body, _err := client.DescribeScanTaskStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSearchConditionWithOptions(request *DescribeSearchConditionRequest, runtime *util.RuntimeOptions) (_result *DescribeSearchConditionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSearchCondition"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSearchConditionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSearchCondition(request *DescribeSearchConditionRequest) (_result *DescribeSearchConditionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSearchConditionResponse{}
	_body, _err := client.DescribeSearchConditionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecureSuggestionWithOptions(request *DescribeSecureSuggestionRequest, runtime *util.RuntimeOptions) (_result *DescribeSecureSuggestionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSecureSuggestion"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSecureSuggestionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecureSuggestion(request *DescribeSecureSuggestionRequest) (_result *DescribeSecureSuggestionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecureSuggestionResponse{}
	_body, _err := client.DescribeSecureSuggestionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request DescribeSecurityCheckScheduleConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSecurityCheckScheduleConfigResponse
 */
// Deprecated
func (client *Client) DescribeSecurityCheckScheduleConfigWithOptions(request *DescribeSecurityCheckScheduleConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityCheckScheduleConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSecurityCheckScheduleConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSecurityCheckScheduleConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request DescribeSecurityCheckScheduleConfigRequest
 * @return DescribeSecurityCheckScheduleConfigResponse
 */
// Deprecated
func (client *Client) DescribeSecurityCheckScheduleConfig(request *DescribeSecurityCheckScheduleConfigRequest) (_result *DescribeSecurityCheckScheduleConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityCheckScheduleConfigResponse{}
	_body, _err := client.DescribeSecurityCheckScheduleConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityEventOperationStatusWithOptions(request *DescribeSecurityEventOperationStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityEventOperationStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityEventIds)) {
		query["SecurityEventIds"] = request.SecurityEventIds
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSecurityEventOperationStatus"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSecurityEventOperationStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityEventOperationStatus(request *DescribeSecurityEventOperationStatusRequest) (_result *DescribeSecurityEventOperationStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityEventOperationStatusResponse{}
	_body, _err := client.DescribeSecurityEventOperationStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityEventOperationsWithOptions(request *DescribeSecurityEventOperationsRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityEventOperationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityEventId)) {
		query["SecurityEventId"] = request.SecurityEventId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSecurityEventOperations"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSecurityEventOperationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityEventOperations(request *DescribeSecurityEventOperationsRequest) (_result *DescribeSecurityEventOperationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityEventOperationsResponse{}
	_body, _err := client.DescribeSecurityEventOperationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityStatInfoWithOptions(request *DescribeSecurityStatInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityStatInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceDirectoryAccountId)) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSecurityStatInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSecurityStatInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityStatInfo(request *DescribeSecurityStatInfoRequest) (_result *DescribeSecurityStatInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityStatInfoResponse{}
	_body, _err := client.DescribeSecurityStatInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeServiceLinkedRoleStatusWithOptions(request *DescribeServiceLinkedRoleStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeServiceLinkedRoleStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ServiceLinkedRole)) {
		query["ServiceLinkedRole"] = request.ServiceLinkedRole
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeServiceLinkedRoleStatus"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeServiceLinkedRoleStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeServiceLinkedRoleStatus(request *DescribeServiceLinkedRoleStatusRequest) (_result *DescribeServiceLinkedRoleStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeServiceLinkedRoleStatusResponse{}
	_body, _err := client.DescribeServiceLinkedRoleStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSimilarEventScenariosWithOptions(request *DescribeSimilarEventScenariosRequest, runtime *util.RuntimeOptions) (_result *DescribeSimilarEventScenariosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityEventId)) {
		query["SecurityEventId"] = request.SecurityEventId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSimilarEventScenarios"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSimilarEventScenariosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSimilarEventScenarios(request *DescribeSimilarEventScenariosRequest) (_result *DescribeSimilarEventScenariosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSimilarEventScenariosResponse{}
	_body, _err := client.DescribeSimilarEventScenariosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSimilarSecurityEventsWithOptions(request *DescribeSimilarSecurityEventsRequest, runtime *util.RuntimeOptions) (_result *DescribeSimilarSecurityEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSimilarSecurityEvents"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSimilarSecurityEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSimilarSecurityEvents(request *DescribeSimilarSecurityEventsRequest) (_result *DescribeSimilarSecurityEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSimilarSecurityEventsResponse{}
	_body, _err := client.DescribeSimilarSecurityEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnapshotsWithOptions(request *DescribeSnapshotsRequest, runtime *util.RuntimeOptions) (_result *DescribeSnapshotsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiVersion)) {
		query["ApiVersion"] = request.ApiVersion
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.IsAliYunEcs)) {
		query["IsAliYunEcs"] = request.IsAliYunEcs
	}

	if !tea.BoolValue(util.IsUnset(request.MachineRegion)) {
		query["MachineRegion"] = request.MachineRegion
	}

	if !tea.BoolValue(util.IsUnset(request.MachineRemark)) {
		query["MachineRemark"] = request.MachineRemark
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["StatusList"] = request.StatusList
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSnapshots"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSnapshotsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnapshots(request *DescribeSnapshotsRequest) (_result *DescribeSnapshotsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnapshotsResponse{}
	_body, _err := client.DescribeSnapshotsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStrategyWithOptions(request *DescribeStrategyRequest, runtime *util.RuntimeOptions) (_result *DescribeStrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomType)) {
		query["CustomType"] = request.CustomType
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyIds)) {
		query["StrategyIds"] = request.StrategyIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStrategy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStrategyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStrategy(request *DescribeStrategyRequest) (_result *DescribeStrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStrategyResponse{}
	_body, _err := client.DescribeStrategyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStrategyDetailWithOptions(request *DescribeStrategyDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeStrategyDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStrategyDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStrategyDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStrategyDetail(request *DescribeStrategyDetailRequest) (_result *DescribeStrategyDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStrategyDetailResponse{}
	_body, _err := client.DescribeStrategyDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStrategyExecDetailWithOptions(request *DescribeStrategyExecDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeStrategyExecDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyId)) {
		query["StrategyId"] = request.StrategyId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStrategyExecDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStrategyExecDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStrategyExecDetail(request *DescribeStrategyExecDetailRequest) (_result *DescribeStrategyExecDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStrategyExecDetailResponse{}
	_body, _err := client.DescribeStrategyExecDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStrategyTargetWithOptions(request *DescribeStrategyTargetRequest, runtime *util.RuntimeOptions) (_result *DescribeStrategyTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStrategyTarget"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStrategyTargetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStrategyTarget(request *DescribeStrategyTargetRequest) (_result *DescribeStrategyTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStrategyTargetResponse{}
	_body, _err := client.DescribeStrategyTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSummaryInfoWithOptions(request *DescribeSummaryInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeSummaryInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSummaryInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSummaryInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSummaryInfo(request *DescribeSummaryInfoRequest) (_result *DescribeSummaryInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSummaryInfoResponse{}
	_body, _err := client.DescribeSummaryInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSupportRegionWithOptions(runtime *util.RuntimeOptions) (_result *DescribeSupportRegionResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeSupportRegion"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSupportRegionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSupportRegion() (_result *DescribeSupportRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSupportRegionResponse{}
	_body, _err := client.DescribeSupportRegionWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSuspEventDetailWithOptions(request *DescribeSuspEventDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeSuspEventDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.SuspiciousEventId)) {
		query["SuspiciousEventId"] = request.SuspiciousEventId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSuspEventDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSuspEventDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSuspEventDetail(request *DescribeSuspEventDetailRequest) (_result *DescribeSuspEventDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSuspEventDetailResponse{}
	_body, _err := client.DescribeSuspEventDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSuspEventExportInfoWithOptions(request *DescribeSuspEventExportInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeSuspEventExportInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExportId)) {
		query["ExportId"] = request.ExportId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSuspEventExportInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSuspEventExportInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSuspEventExportInfo(request *DescribeSuspEventExportInfoRequest) (_result *DescribeSuspEventExportInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSuspEventExportInfoResponse{}
	_body, _err := client.DescribeSuspEventExportInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSuspEventQuaraFilesWithOptions(request *DescribeSuspEventQuaraFilesRequest, runtime *util.RuntimeOptions) (_result *DescribeSuspEventQuaraFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupingId)) {
		query["GroupingId"] = request.GroupingId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QuaraTag)) {
		query["QuaraTag"] = request.QuaraTag
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSuspEventQuaraFiles"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSuspEventQuaraFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSuspEventQuaraFiles(request *DescribeSuspEventQuaraFilesRequest) (_result *DescribeSuspEventQuaraFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSuspEventQuaraFilesResponse{}
	_body, _err := client.DescribeSuspEventQuaraFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSuspEventUserSettingWithOptions(request *DescribeSuspEventUserSettingRequest, runtime *util.RuntimeOptions) (_result *DescribeSuspEventUserSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSuspEventUserSetting"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSuspEventUserSettingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSuspEventUserSetting(request *DescribeSuspEventUserSettingRequest) (_result *DescribeSuspEventUserSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSuspEventUserSettingResponse{}
	_body, _err := client.DescribeSuspEventUserSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The alert aggregation feature of Security Center analyzes the paths of alerts to aggregate multiple alerts generated on the intrusions that are launched from the same IP address or service, or on the same user.
 * You can call the  [DescribeAlarmEventList](~~DescribeAlarmEventList~~) or [DescribeSuspEvents ](~~DescribeSuspEvents~~)  operation to query alert events.
 * *   If your Security Center runs the Enterprise or Ultimate edition and you enabled the alert aggregation feature in the Security Center console, you can call the [DescribeAlarmEventList](~~DescribeAlarmEventList~~) operation to query alert events.
 * *   If your Security Center runs the Enterprise or Ultimate edition but you did not enable the alert aggregation feature in the Security Center console, you can call the [DescribeSuspEvents ](~~DescribeSuspEvents~~) operation to query alert events.
 * *   If your Security Center does not run the Enterprise or Ultimate edition, you can call the [DescribeSuspEvents ](~~DescribeSuspEvents~~) operation to query alert events.
 *
 * @param request DescribeSuspEventsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSuspEventsResponse
 */
func (client *Client) DescribeSuspEventsWithOptions(request *DescribeSuspEventsRequest, runtime *util.RuntimeOptions) (_result *DescribeSuspEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmUniqueInfo)) {
		query["AlarmUniqueInfo"] = request.AlarmUniqueInfo
	}

	if !tea.BoolValue(util.IsUnset(request.AssetsTypeList)) {
		query["AssetsTypeList"] = request.AssetsTypeList
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldName)) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldValue)) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Dealed)) {
		query["Dealed"] = request.Dealed
	}

	if !tea.BoolValue(util.IsUnset(request.EventNames)) {
		query["EventNames"] = request.EventNames
	}

	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Levels)) {
		query["Levels"] = request.Levels
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OperateErrorCodeList)) {
		query["OperateErrorCodeList"] = request.OperateErrorCodeList
	}

	if !tea.BoolValue(util.IsUnset(request.OperateTimeEnd)) {
		query["OperateTimeEnd"] = request.OperateTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.OperateTimeStart)) {
		query["OperateTimeStart"] = request.OperateTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentEventTypes)) {
		query["ParentEventTypes"] = request.ParentEventTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SortColumn)) {
		query["SortColumn"] = request.SortColumn
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		query["SortType"] = request.SortType
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	if !tea.BoolValue(util.IsUnset(request.TimeEnd)) {
		query["TimeEnd"] = request.TimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.TimeStart)) {
		query["TimeStart"] = request.TimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueInfo)) {
		query["UniqueInfo"] = request.UniqueInfo
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TacticId)) {
		body["TacticId"] = request.TacticId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSuspEvents"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSuspEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The alert aggregation feature of Security Center analyzes the paths of alerts to aggregate multiple alerts generated on the intrusions that are launched from the same IP address or service, or on the same user.
 * You can call the  [DescribeAlarmEventList](~~DescribeAlarmEventList~~) or [DescribeSuspEvents ](~~DescribeSuspEvents~~)  operation to query alert events.
 * *   If your Security Center runs the Enterprise or Ultimate edition and you enabled the alert aggregation feature in the Security Center console, you can call the [DescribeAlarmEventList](~~DescribeAlarmEventList~~) operation to query alert events.
 * *   If your Security Center runs the Enterprise or Ultimate edition but you did not enable the alert aggregation feature in the Security Center console, you can call the [DescribeSuspEvents ](~~DescribeSuspEvents~~) operation to query alert events.
 * *   If your Security Center does not run the Enterprise or Ultimate edition, you can call the [DescribeSuspEvents ](~~DescribeSuspEvents~~) operation to query alert events.
 *
 * @param request DescribeSuspEventsRequest
 * @return DescribeSuspEventsResponse
 */
func (client *Client) DescribeSuspEvents(request *DescribeSuspEventsRequest) (_result *DescribeSuspEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSuspEventsResponse{}
	_body, _err := client.DescribeSuspEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSuspiciousOverallConfigWithOptions(request *DescribeSuspiciousOverallConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeSuspiciousOverallConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSuspiciousOverallConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSuspiciousOverallConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSuspiciousOverallConfig(request *DescribeSuspiciousOverallConfigRequest) (_result *DescribeSuspiciousOverallConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSuspiciousOverallConfigResponse{}
	_body, _err := client.DescribeSuspiciousOverallConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSuspiciousUUIDConfigWithOptions(request *DescribeSuspiciousUUIDConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeSuspiciousUUIDConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSuspiciousUUIDConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSuspiciousUUIDConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSuspiciousUUIDConfig(request *DescribeSuspiciousUUIDConfigRequest) (_result *DescribeSuspiciousUUIDConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSuspiciousUUIDConfigResponse{}
	_body, _err := client.DescribeSuspiciousUUIDConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTargetWithOptions(request *DescribeTargetRequest, runtime *util.RuntimeOptions) (_result *DescribeTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTarget"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTargetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTarget(request *DescribeTargetRequest) (_result *DescribeTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTargetResponse{}
	_body, _err := client.DescribeTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * # Usage notes
 * You can call the DescribeTaskErrorLog operation to query the error logs that record tasks failed to fix image vulnerabilities. If a task fails to fix an image vulnerability, Security Center generates an error log. You can identify the cause of the failure based on the error log.
 *
 * # Limits
 * You can call this operation up to 10 times per second for each account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeTaskErrorLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTaskErrorLogResponse
 */
func (client *Client) DescribeTaskErrorLogWithOptions(request *DescribeTaskErrorLogRequest, runtime *util.RuntimeOptions) (_result *DescribeTaskErrorLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BuildTaskId)) {
		query["BuildTaskId"] = request.BuildTaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTaskErrorLog"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTaskErrorLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * # Usage notes
 * You can call the DescribeTaskErrorLog operation to query the error logs that record tasks failed to fix image vulnerabilities. If a task fails to fix an image vulnerability, Security Center generates an error log. You can identify the cause of the failure based on the error log.
 *
 * # Limits
 * You can call this operation up to 10 times per second for each account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeTaskErrorLogRequest
 * @return DescribeTaskErrorLogResponse
 */
func (client *Client) DescribeTaskErrorLog(request *DescribeTaskErrorLogRequest) (_result *DescribeTaskErrorLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTaskErrorLogResponse{}
	_body, _err := client.DescribeTaskErrorLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTotalStatisticsWithOptions(request *DescribeTotalStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeTotalStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTotalStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTotalStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTotalStatistics(request *DescribeTotalStatisticsRequest) (_result *DescribeTotalStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTotalStatisticsResponse{}
	_body, _err := client.DescribeTotalStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTraceInfoDetailWithOptions(request *DescribeTraceInfoDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeTraceInfoDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.IncidentTime)) {
		query["IncidentTime"] = request.IncidentTime
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	if !tea.BoolValue(util.IsUnset(request.VertexId)) {
		query["VertexId"] = request.VertexId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTraceInfoDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTraceInfoDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTraceInfoDetail(request *DescribeTraceInfoDetailRequest) (_result *DescribeTraceInfoDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTraceInfoDetailResponse{}
	_body, _err := client.DescribeTraceInfoDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTraceInfoNodeWithOptions(request *DescribeTraceInfoNodeRequest, runtime *util.RuntimeOptions) (_result *DescribeTraceInfoNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["EventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.IncidentTime)) {
		query["IncidentTime"] = request.IncidentTime
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	if !tea.BoolValue(util.IsUnset(request.VertexId)) {
		query["VertexId"] = request.VertexId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTraceInfoNode"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTraceInfoNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTraceInfoNode(request *DescribeTraceInfoNodeRequest) (_result *DescribeTraceInfoNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTraceInfoNodeResponse{}
	_body, _err := client.DescribeTraceInfoNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUniBackupDatabaseWithOptions(request *DescribeUniBackupDatabaseRequest, runtime *util.RuntimeOptions) (_result *DescribeUniBackupDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseType)) {
		query["DatabaseType"] = request.DatabaseType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryType)) {
		query["QueryType"] = request.QueryType
	}

	if !tea.BoolValue(util.IsUnset(request.UniRegionId)) {
		query["UniRegionId"] = request.UniRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUniBackupDatabase"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUniBackupDatabaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUniBackupDatabase(request *DescribeUniBackupDatabaseRequest) (_result *DescribeUniBackupDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUniBackupDatabaseResponse{}
	_body, _err := client.DescribeUniBackupDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUniBackupPoliciesWithOptions(request *DescribeUniBackupPoliciesRequest, runtime *util.RuntimeOptions) (_result *DescribeUniBackupPoliciesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyName)) {
		query["PolicyName"] = request.PolicyName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUniBackupPolicies"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUniBackupPoliciesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUniBackupPolicies(request *DescribeUniBackupPoliciesRequest) (_result *DescribeUniBackupPoliciesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUniBackupPoliciesResponse{}
	_body, _err := client.DescribeUniBackupPoliciesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUniBackupPolicyDetailWithOptions(request *DescribeUniBackupPolicyDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeUniBackupPolicyDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUniBackupPolicyDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUniBackupPolicyDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUniBackupPolicyDetail(request *DescribeUniBackupPolicyDetailRequest) (_result *DescribeUniBackupPolicyDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUniBackupPolicyDetailResponse{}
	_body, _err := client.DescribeUniBackupPolicyDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUniRecoverableListWithOptions(request *DescribeUniRecoverableListRequest, runtime *util.RuntimeOptions) (_result *DescribeUniRecoverableListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUniRecoverableList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUniRecoverableListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUniRecoverableList(request *DescribeUniRecoverableListRequest) (_result *DescribeUniRecoverableListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUniRecoverableListResponse{}
	_body, _err := client.DescribeUniRecoverableListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUniSupportRegionWithOptions(runtime *util.RuntimeOptions) (_result *DescribeUniSupportRegionResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeUniSupportRegion"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUniSupportRegionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUniSupportRegion() (_result *DescribeUniSupportRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUniSupportRegionResponse{}
	_body, _err := client.DescribeUniSupportRegionWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUserBackupMachinesWithOptions(runtime *util.RuntimeOptions) (_result *DescribeUserBackupMachinesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserBackupMachines"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserBackupMachinesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUserBackupMachines() (_result *DescribeUserBackupMachinesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserBackupMachinesResponse{}
	_body, _err := client.DescribeUserBackupMachinesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUserBaselineAuthorizationWithOptions(request *DescribeUserBaselineAuthorizationRequest, runtime *util.RuntimeOptions) (_result *DescribeUserBaselineAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserBaselineAuthorization"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserBaselineAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUserBaselineAuthorization(request *DescribeUserBaselineAuthorizationRequest) (_result *DescribeUserBaselineAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserBaselineAuthorizationResponse{}
	_body, _err := client.DescribeUserBaselineAuthorizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUserLayoutAuthorizationWithOptions(request *DescribeUserLayoutAuthorizationRequest, runtime *util.RuntimeOptions) (_result *DescribeUserLayoutAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserLayoutAuthorization"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserLayoutAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUserLayoutAuthorization(request *DescribeUserLayoutAuthorizationRequest) (_result *DescribeUserLayoutAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserLayoutAuthorizationResponse{}
	_body, _err := client.DescribeUserLayoutAuthorizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUuidsByVulNamesWithOptions(request *DescribeUuidsByVulNamesRequest, runtime *util.RuntimeOptions) (_result *DescribeUuidsByVulNamesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Dealed)) {
		query["Dealed"] = request.Dealed
	}

	if !tea.BoolValue(util.IsUnset(request.FieldName)) {
		query["FieldName"] = request.FieldName
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValue)) {
		query["FieldValue"] = request.FieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.Necessity)) {
		query["Necessity"] = request.Necessity
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SearchTags)) {
		query["SearchTags"] = request.SearchTags
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["StatusList"] = request.StatusList
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.VpcInstanceIds)) {
		query["VpcInstanceIds"] = request.VpcInstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.VulNames)) {
		query["VulNames"] = request.VulNames
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUuidsByVulNames"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUuidsByVulNamesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUuidsByVulNames(request *DescribeUuidsByVulNamesRequest) (_result *DescribeUuidsByVulNamesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUuidsByVulNamesResponse{}
	_body, _err := client.DescribeUuidsByVulNamesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVendorListWithOptions(runtime *util.RuntimeOptions) (_result *DescribeVendorListResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeVendorList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVendorListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVendorList() (_result *DescribeVendorListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVendorListResponse{}
	_body, _err := client.DescribeVendorListWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVersionConfigWithOptions(request *DescribeVersionConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeVersionConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceDirectoryAccountId)) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVersionConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVersionConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVersionConfig(request *DescribeVersionConfigRequest) (_result *DescribeVersionConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVersionConfigResponse{}
	_body, _err := client.DescribeVersionConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpcHoneyPotCriteriaWithOptions(runtime *util.RuntimeOptions) (_result *DescribeVpcHoneyPotCriteriaResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeVpcHoneyPotCriteria"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVpcHoneyPotCriteriaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpcHoneyPotCriteria() (_result *DescribeVpcHoneyPotCriteriaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpcHoneyPotCriteriaResponse{}
	_body, _err := client.DescribeVpcHoneyPotCriteriaWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpcHoneyPotListWithOptions(request *DescribeVpcHoneyPotListRequest, runtime *util.RuntimeOptions) (_result *DescribeVpcHoneyPotListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.HoneyPotExistence)) {
		query["HoneyPotExistence"] = request.HoneyPotExistence
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcName)) {
		query["VpcName"] = request.VpcName
	}

	if !tea.BoolValue(util.IsUnset(request.VpcRegionId)) {
		query["VpcRegionId"] = request.VpcRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVpcHoneyPotList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVpcHoneyPotListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpcHoneyPotList(request *DescribeVpcHoneyPotListRequest) (_result *DescribeVpcHoneyPotListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpcHoneyPotListResponse{}
	_body, _err := client.DescribeVpcHoneyPotListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpcListWithOptions(runtime *util.RuntimeOptions) (_result *DescribeVpcListResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeVpcList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVpcListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpcList() (_result *DescribeVpcListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpcListResponse{}
	_body, _err := client.DescribeVpcListWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVulCheckTaskStatusDetailWithOptions(request *DescribeVulCheckTaskStatusDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeVulCheckTaskStatusDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskIds)) {
		query["TaskIds"] = request.TaskIds
	}

	if !tea.BoolValue(util.IsUnset(request.Types)) {
		query["Types"] = request.Types
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVulCheckTaskStatusDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVulCheckTaskStatusDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVulCheckTaskStatusDetail(request *DescribeVulCheckTaskStatusDetailRequest) (_result *DescribeVulCheckTaskStatusDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVulCheckTaskStatusDetailResponse{}
	_body, _err := client.DescribeVulCheckTaskStatusDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVulConfigWithOptions(request *DescribeVulConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeVulConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVulConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVulConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVulConfig(request *DescribeVulConfigRequest) (_result *DescribeVulConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVulConfigResponse{}
	_body, _err := client.DescribeVulConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVulDetailsWithOptions(request *DescribeVulDetailsRequest, runtime *util.RuntimeOptions) (_result *DescribeVulDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliasName)) {
		query["AliasName"] = request.AliasName
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVulDetails"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVulDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVulDetails(request *DescribeVulDetailsRequest) (_result *DescribeVulDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVulDetailsResponse{}
	_body, _err := client.DescribeVulDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVulExportInfoWithOptions(request *DescribeVulExportInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeVulExportInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExportId)) {
		query["ExportId"] = request.ExportId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVulExportInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVulExportInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVulExportInfo(request *DescribeVulExportInfoRequest) (_result *DescribeVulExportInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVulExportInfoResponse{}
	_body, _err := client.DescribeVulExportInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVulFixStatisticsWithOptions(runtime *util.RuntimeOptions) (_result *DescribeVulFixStatisticsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeVulFixStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVulFixStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVulFixStatistics() (_result *DescribeVulFixStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVulFixStatisticsResponse{}
	_body, _err := client.DescribeVulFixStatisticsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVulListWithOptions(request *DescribeVulListRequest, runtime *util.RuntimeOptions) (_result *DescribeVulListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliasName)) {
		query["AliasName"] = request.AliasName
	}

	if !tea.BoolValue(util.IsUnset(request.AttachTypes)) {
		query["AttachTypes"] = request.AttachTypes
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Dealed)) {
		query["Dealed"] = request.Dealed
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Necessity)) {
		query["Necessity"] = request.Necessity
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	if !tea.BoolValue(util.IsUnset(request.VpcInstanceIds)) {
		query["VpcInstanceIds"] = request.VpcInstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVulList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVulListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVulList(request *DescribeVulListRequest) (_result *DescribeVulListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVulListResponse{}
	_body, _err := client.DescribeVulListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVulListPageWithOptions(request *DescribeVulListPageRequest, runtime *util.RuntimeOptions) (_result *DescribeVulListPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.CveId)) {
		query["CveId"] = request.CveId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.VulNameLike)) {
		query["VulNameLike"] = request.VulNameLike
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVulListPage"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVulListPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVulListPage(request *DescribeVulListPageRequest) (_result *DescribeVulListPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVulListPageResponse{}
	_body, _err := client.DescribeVulListPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVulNumStatisticsWithOptions(request *DescribeVulNumStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeVulNumStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVulNumStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVulNumStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVulNumStatistics(request *DescribeVulNumStatisticsRequest) (_result *DescribeVulNumStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVulNumStatisticsResponse{}
	_body, _err := client.DescribeVulNumStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVulTargetConfigWithOptions(request *DescribeVulTargetConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeVulTargetConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVulTargetConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVulTargetConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVulTargetConfig(request *DescribeVulTargetConfigRequest) (_result *DescribeVulTargetConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVulTargetConfigResponse{}
	_body, _err := client.DescribeVulTargetConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVulTargetStatisticsWithOptions(request *DescribeVulTargetStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeVulTargetStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVulTargetStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVulTargetStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVulTargetStatistics(request *DescribeVulTargetStatisticsRequest) (_result *DescribeVulTargetStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVulTargetStatisticsResponse{}
	_body, _err := client.DescribeVulTargetStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVulWhitelistWithOptions(request *DescribeVulWhitelistRequest, runtime *util.RuntimeOptions) (_result *DescribeVulWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVulWhitelist"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVulWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVulWhitelist(request *DescribeVulWhitelistRequest) (_result *DescribeVulWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVulWhitelistResponse{}
	_body, _err := client.DescribeVulWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWarningExportInfoWithOptions(request *DescribeWarningExportInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeWarningExportInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExportId)) {
		query["ExportId"] = request.ExportId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWarningExportInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWarningExportInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWarningExportInfo(request *DescribeWarningExportInfoRequest) (_result *DescribeWarningExportInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWarningExportInfoResponse{}
	_body, _err := client.DescribeWarningExportInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWarningMachinesWithOptions(request *DescribeWarningMachinesRequest, runtime *util.RuntimeOptions) (_result *DescribeWarningMachinesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldName)) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldValue)) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HaveRisk)) {
		query["HaveRisk"] = request.HaveRisk
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.MachineName)) {
		query["MachineName"] = request.MachineName
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RiskId)) {
		query["RiskId"] = request.RiskId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyId)) {
		query["StrategyId"] = request.StrategyId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWarningMachines"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWarningMachinesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWarningMachines(request *DescribeWarningMachinesRequest) (_result *DescribeWarningMachinesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWarningMachinesResponse{}
	_body, _err := client.DescribeWarningMachinesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWebLockBindListWithOptions(request *DescribeWebLockBindListRequest, runtime *util.RuntimeOptions) (_result *DescribeWebLockBindListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebLockBindList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebLockBindListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWebLockBindList(request *DescribeWebLockBindListRequest) (_result *DescribeWebLockBindListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWebLockBindListResponse{}
	_body, _err := client.DescribeWebLockBindListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWebLockConfigListWithOptions(request *DescribeWebLockConfigListRequest, runtime *util.RuntimeOptions) (_result *DescribeWebLockConfigListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebLockConfigList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebLockConfigListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWebLockConfigList(request *DescribeWebLockConfigListRequest) (_result *DescribeWebLockConfigListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWebLockConfigListResponse{}
	_body, _err := client.DescribeWebLockConfigListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWebLockExclusiveFileTypeWithOptions(runtime *util.RuntimeOptions) (_result *DescribeWebLockExclusiveFileTypeResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebLockExclusiveFileType"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebLockExclusiveFileTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWebLockExclusiveFileType() (_result *DescribeWebLockExclusiveFileTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWebLockExclusiveFileTypeResponse{}
	_body, _err := client.DescribeWebLockExclusiveFileTypeWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWebLockFileChangeStatisticsWithOptions(request *DescribeWebLockFileChangeStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeWebLockFileChangeStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebLockFileChangeStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebLockFileChangeStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWebLockFileChangeStatistics(request *DescribeWebLockFileChangeStatisticsRequest) (_result *DescribeWebLockFileChangeStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWebLockFileChangeStatisticsResponse{}
	_body, _err := client.DescribeWebLockFileChangeStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWebLockFileEventsWithOptions(request *DescribeWebLockFileEventsRequest, runtime *util.RuntimeOptions) (_result *DescribeWebLockFileEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Dealed)) {
		query["Dealed"] = request.Dealed
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessName)) {
		query["ProcessName"] = request.ProcessName
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.TsBegin)) {
		query["TsBegin"] = request.TsBegin
	}

	if !tea.BoolValue(util.IsUnset(request.TsEnd)) {
		query["TsEnd"] = request.TsEnd
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebLockFileEvents"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebLockFileEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWebLockFileEvents(request *DescribeWebLockFileEventsRequest) (_result *DescribeWebLockFileEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWebLockFileEventsResponse{}
	_body, _err := client.DescribeWebLockFileEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWebLockFileTypeSummaryWithOptions(runtime *util.RuntimeOptions) (_result *DescribeWebLockFileTypeSummaryResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebLockFileTypeSummary"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebLockFileTypeSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWebLockFileTypeSummary() (_result *DescribeWebLockFileTypeSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWebLockFileTypeSummaryResponse{}
	_body, _err := client.DescribeWebLockFileTypeSummaryWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWebLockInclusiveFileTypeWithOptions(runtime *util.RuntimeOptions) (_result *DescribeWebLockInclusiveFileTypeResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebLockInclusiveFileType"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebLockInclusiveFileTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWebLockInclusiveFileType() (_result *DescribeWebLockInclusiveFileTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWebLockInclusiveFileTypeResponse{}
	_body, _err := client.DescribeWebLockInclusiveFileTypeWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWebLockProcessBlockStatisticsWithOptions(request *DescribeWebLockProcessBlockStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeWebLockProcessBlockStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebLockProcessBlockStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebLockProcessBlockStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWebLockProcessBlockStatistics(request *DescribeWebLockProcessBlockStatisticsRequest) (_result *DescribeWebLockProcessBlockStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWebLockProcessBlockStatisticsResponse{}
	_body, _err := client.DescribeWebLockProcessBlockStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWebLockProcessListWithOptions(request *DescribeWebLockProcessListRequest, runtime *util.RuntimeOptions) (_result *DescribeWebLockProcessListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessName)) {
		query["ProcessName"] = request.ProcessName
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebLockProcessList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebLockProcessListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWebLockProcessList(request *DescribeWebLockProcessListRequest) (_result *DescribeWebLockProcessListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWebLockProcessListResponse{}
	_body, _err := client.DescribeWebLockProcessListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWebLockStatusWithOptions(request *DescribeWebLockStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeWebLockStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebLockStatus"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebLockStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWebLockStatus(request *DescribeWebLockStatusRequest) (_result *DescribeWebLockStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWebLockStatusResponse{}
	_body, _err := client.DescribeWebLockStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWebLockTotalFileChangeCountWithOptions(runtime *util.RuntimeOptions) (_result *DescribeWebLockTotalFileChangeCountResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebLockTotalFileChangeCount"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebLockTotalFileChangeCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWebLockTotalFileChangeCount() (_result *DescribeWebLockTotalFileChangeCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWebLockTotalFileChangeCountResponse{}
	_body, _err := client.DescribeWebLockTotalFileChangeCountWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWebPathWithOptions(request *DescribeWebPathRequest, runtime *util.RuntimeOptions) (_result *DescribeWebPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWebPath"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWebPathResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWebPath(request *DescribeWebPathRequest) (_result *DescribeWebPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWebPathResponse{}
	_body, _err := client.DescribeWebPathWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableBruteForceRecordWithOptions(request *DisableBruteForceRecordRequest, runtime *util.RuntimeOptions) (_result *DisableBruteForceRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BlockIp)) {
		query["BlockIp"] = request.BlockIp
	}

	if !tea.BoolValue(util.IsUnset(request.Bound)) {
		query["Bound"] = request.Bound
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableBruteForceRecord"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableBruteForceRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableBruteForceRecord(request *DisableBruteForceRecordRequest) (_result *DisableBruteForceRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableBruteForceRecordResponse{}
	_body, _err := client.DisableBruteForceRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableCustomBlockRecordWithOptions(request *DisableCustomBlockRecordRequest, runtime *util.RuntimeOptions) (_result *DisableCustomBlockRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BlockIp)) {
		query["BlockIp"] = request.BlockIp
	}

	if !tea.BoolValue(util.IsUnset(request.Bound)) {
		query["Bound"] = request.Bound
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableCustomBlockRecord"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableCustomBlockRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableCustomBlockRecord(request *DisableCustomBlockRecordRequest) (_result *DisableCustomBlockRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableCustomBlockRecordResponse{}
	_body, _err := client.DisableCustomBlockRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableBruteForceRecordWithOptions(request *EnableBruteForceRecordRequest, runtime *util.RuntimeOptions) (_result *EnableBruteForceRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BlockIp)) {
		query["BlockIp"] = request.BlockIp
	}

	if !tea.BoolValue(util.IsUnset(request.Bound)) {
		query["Bound"] = request.Bound
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableBruteForceRecord"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableBruteForceRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableBruteForceRecord(request *EnableBruteForceRecordRequest) (_result *EnableBruteForceRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableBruteForceRecordResponse{}
	_body, _err := client.EnableBruteForceRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableCustomBlockRecordWithOptions(request *EnableCustomBlockRecordRequest, runtime *util.RuntimeOptions) (_result *EnableCustomBlockRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BlockIp)) {
		query["BlockIp"] = request.BlockIp
	}

	if !tea.BoolValue(util.IsUnset(request.Bound)) {
		query["Bound"] = request.Bound
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableCustomBlockRecord"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableCustomBlockRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableCustomBlockRecord(request *EnableCustomBlockRecordRequest) (_result *EnableCustomBlockRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableCustomBlockRecordResponse{}
	_body, _err := client.EnableCustomBlockRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExecStrategyWithOptions(request *ExecStrategyRequest, runtime *util.RuntimeOptions) (_result *ExecStrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyId)) {
		query["StrategyId"] = request.StrategyId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExecStrategy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExecStrategyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExecStrategy(request *ExecStrategyRequest) (_result *ExecStrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExecStrategyResponse{}
	_body, _err := client.ExecStrategyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call the operation to export the following check result lists:
 * *   The list of servers on the Host page.
 * *   The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
 * *   The list of attack analysis data on the Attack Awareness page.
 * *   The list of check results for AccessKey pair leaks on the AccessKey Leak page.
 *
 * @param request ExportRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportRecordResponse
 */
func (client *Client) ExportRecordWithOptions(request *ExportRecordRequest, runtime *util.RuntimeOptions) (_result *ExportRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExportType)) {
		query["ExportType"] = request.ExportType
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportRecord"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call the operation to export the following check result lists:
 * *   The list of servers on the Host page.
 * *   The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
 * *   The list of attack analysis data on the Attack Awareness page.
 * *   The list of check results for AccessKey pair leaks on the AccessKey Leak page.
 *
 * @param request ExportRecordRequest
 * @return ExportRecordResponse
 */
func (client *Client) ExportRecord(request *ExportRecordRequest) (_result *ExportRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportRecordResponse{}
	_body, _err := client.ExportRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExportSuspEventsWithOptions(request *ExportSuspEventsRequest, runtime *util.RuntimeOptions) (_result *ExportSuspEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssetsTypeList)) {
		query["AssetsTypeList"] = request.AssetsTypeList
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldName)) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldValue)) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Dealed)) {
		query["Dealed"] = request.Dealed
	}

	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Levels)) {
		query["Levels"] = request.Levels
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentEventTypes)) {
		query["ParentEventTypes"] = request.ParentEventTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	if !tea.BoolValue(util.IsUnset(request.TimeEnd)) {
		query["TimeEnd"] = request.TimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.TimeStart)) {
		query["TimeStart"] = request.TimeStart
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportSuspEvents"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportSuspEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExportSuspEvents(request *ExportSuspEventsRequest) (_result *ExportSuspEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportSuspEventsResponse{}
	_body, _err := client.ExportSuspEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
 * You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
 * ### Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ExportVulRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportVulResponse
 */
func (client *Client) ExportVulWithOptions(request *ExportVulRequest, runtime *util.RuntimeOptions) (_result *ExportVulResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliasName)) {
		query["AliasName"] = request.AliasName
	}

	if !tea.BoolValue(util.IsUnset(request.AttachTypes)) {
		query["AttachTypes"] = request.AttachTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Dealed)) {
		query["Dealed"] = request.Dealed
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Necessity)) {
		query["Necessity"] = request.Necessity
	}

	if !tea.BoolValue(util.IsUnset(request.SearchTags)) {
		query["SearchTags"] = request.SearchTags
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	if !tea.BoolValue(util.IsUnset(request.VpcInstanceIds)) {
		query["VpcInstanceIds"] = request.VpcInstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportVul"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportVulResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
 * You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
 * ### Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ExportVulRequest
 * @return ExportVulResponse
 */
func (client *Client) ExportVul(request *ExportVulRequest) (_result *ExportVulResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportVulResponse{}
	_body, _err := client.ExportVulWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExportWarningWithOptions(request *ExportWarningRequest, runtime *util.RuntimeOptions) (_result *ExportWarningResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Dealed)) {
		query["Dealed"] = request.Dealed
	}

	if !tea.BoolValue(util.IsUnset(request.ExportType)) {
		query["ExportType"] = request.ExportType
	}

	if !tea.BoolValue(util.IsUnset(request.IsCleartextPwd)) {
		query["IsCleartextPwd"] = request.IsCleartextPwd
	}

	if !tea.BoolValue(util.IsUnset(request.IsSummaryExport)) {
		query["IsSummaryExport"] = request.IsSummaryExport
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RiskIds)) {
		query["RiskIds"] = request.RiskIds
	}

	if !tea.BoolValue(util.IsUnset(request.RiskLevels)) {
		query["RiskLevels"] = request.RiskLevels
	}

	if !tea.BoolValue(util.IsUnset(request.RiskName)) {
		query["RiskName"] = request.RiskName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["StatusList"] = request.StatusList
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyId)) {
		query["StrategyId"] = request.StrategyId
	}

	if !tea.BoolValue(util.IsUnset(request.SubTypeNames)) {
		query["SubTypeNames"] = request.SubTypeNames
	}

	if !tea.BoolValue(util.IsUnset(request.TypeName)) {
		query["TypeName"] = request.TypeName
	}

	if !tea.BoolValue(util.IsUnset(request.TypeNames)) {
		query["TypeNames"] = request.TypeNames
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportWarning"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportWarningResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExportWarning(request *ExportWarningRequest) (_result *ExportWarningResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportWarningResponse{}
	_body, _err := client.ExportWarningWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FindContainerNetworkConnectWithOptions(tmpReq *FindContainerNetworkConnectRequest, runtime *util.RuntimeOptions) (_result *FindContainerNetworkConnectResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &FindContainerNetworkConnectShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DstNode)) {
		request.DstNodeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DstNode, tea.String("DstNode"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SrcNode)) {
		request.SrcNodeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SrcNode, tea.String("SrcNode"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CriteriaType)) {
		query["CriteriaType"] = request.CriteriaType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.DstNodeShrink)) {
		query["DstNode"] = request.DstNodeShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SrcNodeShrink)) {
		query["SrcNode"] = request.SrcNodeShrink
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FindContainerNetworkConnect"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FindContainerNetworkConnectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FindContainerNetworkConnect(request *FindContainerNetworkConnectRequest) (_result *FindContainerNetworkConnectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &FindContainerNetworkConnectResponse{}
	_body, _err := client.FindContainerNetworkConnectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FixCheckWarningsWithOptions(request *FixCheckWarningsRequest, runtime *util.RuntimeOptions) (_result *FixCheckWarningsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckParams)) {
		query["CheckParams"] = request.CheckParams
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.RiskId)) {
		query["RiskId"] = request.RiskId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FixCheckWarnings"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FixCheckWarningsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FixCheckWarnings(request *FixCheckWarningsRequest) (_result *FixCheckWarningsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &FixCheckWarningsResponse{}
	_body, _err := client.FixCheckWarningsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GenerateOnceTaskWithOptions(request *GenerateOnceTaskRequest, runtime *util.RuntimeOptions) (_result *GenerateOnceTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Param)) {
		query["Param"] = request.Param
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateOnceTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateOnceTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GenerateOnceTask(request *GenerateOnceTaskRequest) (_result *GenerateOnceTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateOnceTaskResponse{}
	_body, _err := client.GenerateOnceTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAlarmMachineCountWithOptions(request *GetAlarmMachineCountRequest, runtime *util.RuntimeOptions) (_result *GetAlarmMachineCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAlarmMachineCount"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAlarmMachineCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAlarmMachineCount(request *GetAlarmMachineCountRequest) (_result *GetAlarmMachineCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAlarmMachineCountResponse{}
	_body, _err := client.GetAlarmMachineCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAppNetworkWithOptions(request *GetAppNetworkRequest, runtime *util.RuntimeOptions) (_result *GetAppNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAppNetwork"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAppNetworkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAppNetwork(request *GetAppNetworkRequest) (_result *GetAppNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAppNetworkResponse{}
	_body, _err := client.GetAppNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAssetsPropertyDetailWithOptions(request *GetAssetsPropertyDetailRequest, runtime *util.RuntimeOptions) (_result *GetAssetsPropertyDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Biz)) {
		query["Biz"] = request.Biz
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ItemName)) {
		query["ItemName"] = request.ItemName
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SearchCriteriaList)) {
		query["SearchCriteriaList"] = request.SearchCriteriaList
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAssetsPropertyDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAssetsPropertyDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAssetsPropertyDetail(request *GetAssetsPropertyDetailRequest) (_result *GetAssetsPropertyDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAssetsPropertyDetailResponse{}
	_body, _err := client.GetAssetsPropertyDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAssetsPropertyItemWithOptions(request *GetAssetsPropertyItemRequest, runtime *util.RuntimeOptions) (_result *GetAssetsPropertyItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Biz)) {
		query["Biz"] = request.Biz
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ForceFlush)) {
		query["ForceFlush"] = request.ForceFlush
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchInfo)) {
		query["SearchInfo"] = request.SearchInfo
	}

	if !tea.BoolValue(util.IsUnset(request.SearchItem)) {
		query["SearchItem"] = request.SearchItem
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAssetsPropertyItem"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAssetsPropertyItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAssetsPropertyItem(request *GetAssetsPropertyItemRequest) (_result *GetAssetsPropertyItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAssetsPropertyItemResponse{}
	_body, _err := client.GetAssetsPropertyItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBackupStorageCountWithOptions(runtime *util.RuntimeOptions) (_result *GetBackupStorageCountResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetBackupStorageCount"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBackupStorageCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBackupStorageCount() (_result *GetBackupStorageCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBackupStorageCountResponse{}
	_body, _err := client.GetBackupStorageCountWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCheckConfigWithOptions(request *GetCheckConfigRequest, runtime *util.RuntimeOptions) (_result *GetCheckConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCheckConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCheckConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCheckConfig(request *GetCheckConfigRequest) (_result *GetCheckConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCheckConfigResponse{}
	_body, _err := client.GetCheckConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCheckDetailWithOptions(request *GetCheckDetailRequest, runtime *util.RuntimeOptions) (_result *GetCheckDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckId)) {
		query["CheckId"] = request.CheckId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCheckDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCheckDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCheckDetail(request *GetCheckDetailRequest) (_result *GetCheckDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCheckDetailResponse{}
	_body, _err := client.GetCheckDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCheckProcessWithOptions(request *GetCheckProcessRequest, runtime *util.RuntimeOptions) (_result *GetCheckProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCheckProcess"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCheckProcessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCheckProcess(request *GetCheckProcessRequest) (_result *GetCheckProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCheckProcessResponse{}
	_body, _err := client.GetCheckProcessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCheckRiskStatisticsWithOptions(request *GetCheckRiskStatisticsRequest, runtime *util.RuntimeOptions) (_result *GetCheckRiskStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCheckRiskStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCheckRiskStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCheckRiskStatistics(request *GetCheckRiskStatisticsRequest) (_result *GetCheckRiskStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCheckRiskStatisticsResponse{}
	_body, _err := client.GetCheckRiskStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCheckSummaryWithOptions(request *GetCheckSummaryRequest, runtime *util.RuntimeOptions) (_result *GetCheckSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceDirectoryAccountId)) {
		query["ResourceDirectoryAccountId"] = request.ResourceDirectoryAccountId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCheckSummary"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCheckSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCheckSummary(request *GetCheckSummaryRequest) (_result *GetCheckSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCheckSummaryResponse{}
	_body, _err := client.GetCheckSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetClientUserDefineRuleWithOptions(request *GetClientUserDefineRuleRequest, runtime *util.RuntimeOptions) (_result *GetClientUserDefineRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetClientUserDefineRule"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetClientUserDefineRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetClientUserDefineRule(request *GetClientUserDefineRuleRequest) (_result *GetClientUserDefineRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetClientUserDefineRuleResponse{}
	_body, _err := client.GetClientUserDefineRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCloudAssetDetailWithOptions(request *GetCloudAssetDetailRequest, runtime *util.RuntimeOptions) (_result *GetCloudAssetDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssetSubType)) {
		query["AssetSubType"] = request.AssetSubType
	}

	if !tea.BoolValue(util.IsUnset(request.AssetType)) {
		query["AssetType"] = request.AssetType
	}

	if !tea.BoolValue(util.IsUnset(request.CloudAssetInstances)) {
		query["CloudAssetInstances"] = request.CloudAssetInstances
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		query["Vendor"] = request.Vendor
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCloudAssetDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCloudAssetDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCloudAssetDetail(request *GetCloudAssetDetailRequest) (_result *GetCloudAssetDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCloudAssetDetailResponse{}
	_body, _err := client.GetCloudAssetDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCloudAssetSummaryWithOptions(runtime *util.RuntimeOptions) (_result *GetCloudAssetSummaryResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetCloudAssetSummary"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCloudAssetSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCloudAssetSummary() (_result *GetCloudAssetSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCloudAssetSummaryResponse{}
	_body, _err := client.GetCloudAssetSummaryWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetClusterCheckItemWarningStatisticsWithOptions(request *GetClusterCheckItemWarningStatisticsRequest, runtime *util.RuntimeOptions) (_result *GetClusterCheckItemWarningStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetClusterCheckItemWarningStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetClusterCheckItemWarningStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetClusterCheckItemWarningStatistics(request *GetClusterCheckItemWarningStatisticsRequest) (_result *GetClusterCheckItemWarningStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetClusterCheckItemWarningStatisticsResponse{}
	_body, _err := client.GetClusterCheckItemWarningStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetClusterRuleSummaryWithOptions(request *GetClusterRuleSummaryRequest, runtime *util.RuntimeOptions) (_result *GetClusterRuleSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetClusterRuleSummary"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetClusterRuleSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetClusterRuleSummary(request *GetClusterRuleSummaryRequest) (_result *GetClusterRuleSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetClusterRuleSummaryResponse{}
	_body, _err := client.GetClusterRuleSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetClusterSuspEventStatisticsWithOptions(request *GetClusterSuspEventStatisticsRequest, runtime *util.RuntimeOptions) (_result *GetClusterSuspEventStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetClusterSuspEventStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetClusterSuspEventStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetClusterSuspEventStatistics(request *GetClusterSuspEventStatisticsRequest) (_result *GetClusterSuspEventStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetClusterSuspEventStatisticsResponse{}
	_body, _err := client.GetClusterSuspEventStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetFileDetectApiInvokeInfoWithOptions(runtime *util.RuntimeOptions) (_result *GetFileDetectApiInvokeInfoResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetFileDetectApiInvokeInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFileDetectApiInvokeInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetFileDetectApiInvokeInfo() (_result *GetFileDetectApiInvokeInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFileDetectApiInvokeInfoResponse{}
	_body, _err := client.GetFileDetectApiInvokeInfoWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
 *
 * @param request GetFileDetectResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFileDetectResultResponse
 */
func (client *Client) GetFileDetectResultWithOptions(request *GetFileDetectResultRequest, runtime *util.RuntimeOptions) (_result *GetFileDetectResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HashKeyList)) {
		query["HashKeyList"] = request.HashKeyList
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFileDetectResult"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFileDetectResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
 *
 * @param request GetFileDetectResultRequest
 * @return GetFileDetectResultResponse
 */
func (client *Client) GetFileDetectResult(request *GetFileDetectResultRequest) (_result *GetFileDetectResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFileDetectResultResponse{}
	_body, _err := client.GetFileDetectResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetHoneypotNodeWithOptions(request *GetHoneypotNodeRequest, runtime *util.RuntimeOptions) (_result *GetHoneypotNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHoneypotNode"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetHoneypotNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetHoneypotNode(request *GetHoneypotNodeRequest) (_result *GetHoneypotNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHoneypotNodeResponse{}
	_body, _err := client.GetHoneypotNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetHoneypotPresetWithOptions(request *GetHoneypotPresetRequest, runtime *util.RuntimeOptions) (_result *GetHoneypotPresetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HoneypotPresetId)) {
		query["HoneypotPresetId"] = request.HoneypotPresetId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHoneypotPreset"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetHoneypotPresetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetHoneypotPreset(request *GetHoneypotPresetRequest) (_result *GetHoneypotPresetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHoneypotPresetResponse{}
	_body, _err := client.GetHoneypotPresetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetHoneypotProbeWithOptions(request *GetHoneypotProbeRequest, runtime *util.RuntimeOptions) (_result *GetHoneypotProbeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProbeId)) {
		query["ProbeId"] = request.ProbeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHoneypotProbe"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetHoneypotProbeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetHoneypotProbe(request *GetHoneypotProbeRequest) (_result *GetHoneypotProbeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHoneypotProbeResponse{}
	_body, _err := client.GetHoneypotProbeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetImageScanNumInPeriodWithOptions(request *GetImageScanNumInPeriodRequest, runtime *util.RuntimeOptions) (_result *GetImageScanNumInPeriodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PastDay)) {
		query["PastDay"] = request.PastDay
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetImageScanNumInPeriod"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetImageScanNumInPeriodResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetImageScanNumInPeriod(request *GetImageScanNumInPeriodRequest) (_result *GetImageScanNumInPeriodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetImageScanNumInPeriodResponse{}
	_body, _err := client.GetImageScanNumInPeriodWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInterceptionRuleDetailWithOptions(request *GetInterceptionRuleDetailRequest, runtime *util.RuntimeOptions) (_result *GetInterceptionRuleDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInterceptionRuleDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInterceptionRuleDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInterceptionRuleDetail(request *GetInterceptionRuleDetailRequest) (_result *GetInterceptionRuleDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInterceptionRuleDetailResponse{}
	_body, _err := client.GetInterceptionRuleDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInterceptionSummaryWithOptions(runtime *util.RuntimeOptions) (_result *GetInterceptionSummaryResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetInterceptionSummary"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInterceptionSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInterceptionSummary() (_result *GetInterceptionSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInterceptionSummaryResponse{}
	_body, _err := client.GetInterceptionSummaryWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInterceptionTargetDetailWithOptions(request *GetInterceptionTargetDetailRequest, runtime *util.RuntimeOptions) (_result *GetInterceptionTargetDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TargetId)) {
		query["TargetId"] = request.TargetId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInterceptionTargetDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInterceptionTargetDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInterceptionTargetDetail(request *GetInterceptionTargetDetailRequest) (_result *GetInterceptionTargetDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInterceptionTargetDetailResponse{}
	_body, _err := client.GetInterceptionTargetDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetLastOnceTaskInfoWithOptions(request *GetLastOnceTaskInfoRequest, runtime *util.RuntimeOptions) (_result *GetLastOnceTaskInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLastOnceTaskInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLastOnceTaskInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetLastOnceTaskInfo(request *GetLastOnceTaskInfoRequest) (_result *GetLastOnceTaskInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLastOnceTaskInfoResponse{}
	_body, _err := client.GetLastOnceTaskInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetModuleConfigWithOptions(request *GetModuleConfigRequest, runtime *util.RuntimeOptions) (_result *GetModuleConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetModuleConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetModuleConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetModuleConfig(request *GetModuleConfigRequest) (_result *GetModuleConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetModuleConfigResponse{}
	_body, _err := client.GetModuleConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetOnceTaskResultInfoWithOptions(request *GetOnceTaskResultInfoRequest, runtime *util.RuntimeOptions) (_result *GetOnceTaskResultInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetOnceTaskResultInfo"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetOnceTaskResultInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetOnceTaskResultInfo(request *GetOnceTaskResultInfoRequest) (_result *GetOnceTaskResultInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetOnceTaskResultInfoResponse{}
	_body, _err := client.GetOnceTaskResultInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPropertyScheduleConfigWithOptions(request *GetPropertyScheduleConfigRequest, runtime *util.RuntimeOptions) (_result *GetPropertyScheduleConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPropertyScheduleConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPropertyScheduleConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPropertyScheduleConfig(request *GetPropertyScheduleConfigRequest) (_result *GetPropertyScheduleConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPropertyScheduleConfigResponse{}
	_body, _err := client.GetPropertyScheduleConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRulesCountWithOptions(runtime *util.RuntimeOptions) (_result *GetRulesCountResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetRulesCount"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRulesCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRulesCount() (_result *GetRulesCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRulesCountResponse{}
	_body, _err := client.GetRulesCountWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSuspiciousStatisticsWithOptions(request *GetSuspiciousStatisticsRequest, runtime *util.RuntimeOptions) (_result *GetSuspiciousStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupIdList)) {
		query["GroupIdList"] = request.GroupIdList
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSuspiciousStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSuspiciousStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSuspiciousStatistics(request *GetSuspiciousStatisticsRequest) (_result *GetSuspiciousStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSuspiciousStatisticsResponse{}
	_body, _err := client.GetSuspiciousStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetVulStatisticsWithOptions(request *GetVulStatisticsRequest, runtime *util.RuntimeOptions) (_result *GetVulStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupIdList)) {
		query["GroupIdList"] = request.GroupIdList
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.TypeList)) {
		query["TypeList"] = request.TypeList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetVulStatistics"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVulStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetVulStatistics(request *GetVulStatisticsRequest) (_result *GetVulStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetVulStatisticsResponse{}
	_body, _err := client.GetVulStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetVulWhitelistWithOptions(request *GetVulWhitelistRequest, runtime *util.RuntimeOptions) (_result *GetVulWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.VulWhitelistId)) {
		query["VulWhitelistId"] = request.VulWhitelistId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetVulWhitelist"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVulWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetVulWhitelist(request *GetVulWhitelistRequest) (_result *GetVulWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetVulWhitelistResponse{}
	_body, _err := client.GetVulWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) HandleSecurityEventsWithOptions(request *HandleSecurityEventsRequest, runtime *util.RuntimeOptions) (_result *HandleSecurityEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MarkBatch)) {
		query["MarkBatch"] = request.MarkBatch
	}

	if !tea.BoolValue(util.IsUnset(request.MarkMissParam)) {
		query["MarkMissParam"] = request.MarkMissParam
	}

	if !tea.BoolValue(util.IsUnset(request.OperationCode)) {
		query["OperationCode"] = request.OperationCode
	}

	if !tea.BoolValue(util.IsUnset(request.OperationParams)) {
		query["OperationParams"] = request.OperationParams
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityEventIds)) {
		query["SecurityEventIds"] = request.SecurityEventIds
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("HandleSecurityEvents"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &HandleSecurityEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) HandleSecurityEvents(request *HandleSecurityEventsRequest) (_result *HandleSecurityEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &HandleSecurityEventsResponse{}
	_body, _err := client.HandleSecurityEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) HandleSimilarSecurityEventsWithOptions(request *HandleSimilarSecurityEventsRequest, runtime *util.RuntimeOptions) (_result *HandleSimilarSecurityEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MarkMissParam)) {
		query["MarkMissParam"] = request.MarkMissParam
	}

	if !tea.BoolValue(util.IsUnset(request.OperationCode)) {
		query["OperationCode"] = request.OperationCode
	}

	if !tea.BoolValue(util.IsUnset(request.OperationParams)) {
		query["OperationParams"] = request.OperationParams
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("HandleSimilarSecurityEvents"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &HandleSimilarSecurityEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) HandleSimilarSecurityEvents(request *HandleSimilarSecurityEventsRequest) (_result *HandleSimilarSecurityEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &HandleSimilarSecurityEventsResponse{}
	_body, _err := client.HandleSimilarSecurityEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) IgnoreCheckItemsWithOptions(request *IgnoreCheckItemsRequest, runtime *util.RuntimeOptions) (_result *IgnoreCheckItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckAndRiskTypeList)) {
		query["CheckAndRiskTypeList"] = request.CheckAndRiskTypeList
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		query["Reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("IgnoreCheckItems"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &IgnoreCheckItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) IgnoreCheckItems(request *IgnoreCheckItemsRequest) (_result *IgnoreCheckItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &IgnoreCheckItemsResponse{}
	_body, _err := client.IgnoreCheckItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) IgnoreHcCheckWarningsWithOptions(request *IgnoreHcCheckWarningsRequest, runtime *util.RuntimeOptions) (_result *IgnoreHcCheckWarningsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckIds)) {
		query["CheckIds"] = request.CheckIds
	}

	if !tea.BoolValue(util.IsUnset(request.CheckWarningIds)) {
		query["CheckWarningIds"] = request.CheckWarningIds
	}

	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		query["Reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.RiskId)) {
		query["RiskId"] = request.RiskId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("IgnoreHcCheckWarnings"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &IgnoreHcCheckWarningsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) IgnoreHcCheckWarnings(request *IgnoreHcCheckWarningsRequest) (_result *IgnoreHcCheckWarningsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &IgnoreHcCheckWarningsResponse{}
	_body, _err := client.IgnoreHcCheckWarningsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InstallBackupClientWithOptions(request *InstallBackupClientRequest, runtime *util.RuntimeOptions) (_result *InstallBackupClientResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PolicyVersion)) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InstallBackupClient"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InstallBackupClientResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InstallBackupClient(request *InstallBackupClientRequest) (_result *InstallBackupClientResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallBackupClientResponse{}
	_body, _err := client.InstallBackupClientWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
 *
 * @param request InstallCloudMonitorRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InstallCloudMonitorResponse
 */
func (client *Client) InstallCloudMonitorWithOptions(request *InstallCloudMonitorRequest, runtime *util.RuntimeOptions) (_result *InstallCloudMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentAccessKey)) {
		query["AgentAccessKey"] = request.AgentAccessKey
	}

	if !tea.BoolValue(util.IsUnset(request.AgentSecretKey)) {
		query["AgentSecretKey"] = request.AgentSecretKey
	}

	if !tea.BoolValue(util.IsUnset(request.ArgusVersion)) {
		query["ArgusVersion"] = request.ArgusVersion
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIdList)) {
		query["InstanceIdList"] = request.InstanceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InstallCloudMonitor"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InstallCloudMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
 *
 * @param request InstallCloudMonitorRequest
 * @return InstallCloudMonitorResponse
 */
func (client *Client) InstallCloudMonitor(request *InstallCloudMonitorRequest) (_result *InstallCloudMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallCloudMonitorResponse{}
	_body, _err := client.InstallCloudMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InstallPmAgentWithOptions(request *InstallPmAgentRequest, runtime *util.RuntimeOptions) (_result *InstallPmAgentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InstallPmAgent"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InstallPmAgentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InstallPmAgent(request *InstallPmAgentRequest) (_result *InstallPmAgentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallPmAgentResponse{}
	_body, _err := client.InstallPmAgentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InstallUniBackupAgentWithOptions(request *InstallUniBackupAgentRequest, runtime *util.RuntimeOptions) (_result *InstallUniBackupAgentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InstallUniBackupAgent"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InstallUniBackupAgentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InstallUniBackupAgent(request *InstallUniBackupAgentRequest) (_result *InstallUniBackupAgentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallUniBackupAgentResponse{}
	_body, _err := client.InstallUniBackupAgentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) JoinWebLockProcessWhiteListWithOptions(request *JoinWebLockProcessWhiteListRequest, runtime *util.RuntimeOptions) (_result *JoinWebLockProcessWhiteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProcessPaths)) {
		query["ProcessPaths"] = request.ProcessPaths
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("JoinWebLockProcessWhiteList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &JoinWebLockProcessWhiteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) JoinWebLockProcessWhiteList(request *JoinWebLockProcessWhiteListRequest) (_result *JoinWebLockProcessWhiteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinWebLockProcessWhiteListResponse{}
	_body, _err := client.JoinWebLockProcessWhiteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAvailableHoneypotWithOptions(request *ListAvailableHoneypotRequest, runtime *util.RuntimeOptions) (_result *ListAvailableHoneypotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAvailableHoneypot"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAvailableHoneypotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAvailableHoneypot(request *ListAvailableHoneypotRequest) (_result *ListAvailableHoneypotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAvailableHoneypotResponse{}
	_body, _err := client.ListAvailableHoneypotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCheckInstanceResultWithOptions(request *ListCheckInstanceResultRequest, runtime *util.RuntimeOptions) (_result *ListCheckInstanceResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckId)) {
		query["CheckId"] = request.CheckId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIdKey)) {
		query["InstanceIdKey"] = request.InstanceIdKey
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceNameKey)) {
		query["InstanceNameKey"] = request.InstanceNameKey
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionIdKey)) {
		query["RegionIdKey"] = request.RegionIdKey
	}

	if !tea.BoolValue(util.IsUnset(request.SortTypes)) {
		query["SortTypes"] = request.SortTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Statuses)) {
		query["Statuses"] = request.Statuses
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCheckInstanceResult"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCheckInstanceResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCheckInstanceResult(request *ListCheckInstanceResultRequest) (_result *ListCheckInstanceResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCheckInstanceResultResponse{}
	_body, _err := client.ListCheckInstanceResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCheckItemWarningMachineWithOptions(request *ListCheckItemWarningMachineRequest, runtime *util.RuntimeOptions) (_result *ListCheckItemWarningMachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckId)) {
		query["CheckId"] = request.CheckId
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldName)) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldValue)) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.RiskType)) {
		query["RiskType"] = request.RiskType
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCheckItemWarningMachine"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCheckItemWarningMachineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCheckItemWarningMachine(request *ListCheckItemWarningMachineRequest) (_result *ListCheckItemWarningMachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCheckItemWarningMachineResponse{}
	_body, _err := client.ListCheckItemWarningMachineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCheckItemWarningSummaryWithOptions(request *ListCheckItemWarningSummaryRequest, runtime *util.RuntimeOptions) (_result *ListCheckItemWarningSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckItemFuzzy)) {
		query["CheckItemFuzzy"] = request.CheckItemFuzzy
	}

	if !tea.BoolValue(util.IsUnset(request.CheckLevel)) {
		query["CheckLevel"] = request.CheckLevel
	}

	if !tea.BoolValue(util.IsUnset(request.CheckType)) {
		query["CheckType"] = request.CheckType
	}

	if !tea.BoolValue(util.IsUnset(request.CheckWarningStatus)) {
		query["CheckWarningStatus"] = request.CheckWarningStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldName)) {
		query["ContainerFieldName"] = request.ContainerFieldName
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerFieldValue)) {
		query["ContainerFieldValue"] = request.ContainerFieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RiskType)) {
		query["RiskType"] = request.RiskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCheckItemWarningSummary"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCheckItemWarningSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCheckItemWarningSummary(request *ListCheckItemWarningSummaryRequest) (_result *ListCheckItemWarningSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCheckItemWarningSummaryResponse{}
	_body, _err := client.ListCheckItemWarningSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCheckResultWithOptions(request *ListCheckResultRequest, runtime *util.RuntimeOptions) (_result *ListCheckResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckKey)) {
		query["CheckKey"] = request.CheckKey
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypes)) {
		query["InstanceTypes"] = request.InstanceTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RequirementIds)) {
		query["RequirementIds"] = request.RequirementIds
	}

	if !tea.BoolValue(util.IsUnset(request.RiskLevels)) {
		query["RiskLevels"] = request.RiskLevels
	}

	if !tea.BoolValue(util.IsUnset(request.SortTypes)) {
		query["SortTypes"] = request.SortTypes
	}

	if !tea.BoolValue(util.IsUnset(request.StandardIds)) {
		query["StandardIds"] = request.StandardIds
	}

	if !tea.BoolValue(util.IsUnset(request.Statuses)) {
		query["Statuses"] = request.Statuses
	}

	if !tea.BoolValue(util.IsUnset(request.Vendors)) {
		query["Vendors"] = request.Vendors
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCheckResult"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCheckResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCheckResult(request *ListCheckResultRequest) (_result *ListCheckResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCheckResultResponse{}
	_body, _err := client.ListCheckResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCheckStandardWithOptions(request *ListCheckStandardRequest, runtime *util.RuntimeOptions) (_result *ListCheckStandardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceSubTypes)) {
		query["InstanceSubTypes"] = request.InstanceSubTypes
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypes)) {
		query["InstanceTypes"] = request.InstanceTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Vendors)) {
		query["Vendors"] = request.Vendors
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCheckStandard"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCheckStandardResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCheckStandard(request *ListCheckStandardRequest) (_result *ListCheckStandardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCheckStandardResponse{}
	_body, _err := client.ListCheckStandardWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClientUserDefineRuleTypesWithOptions(runtime *util.RuntimeOptions) (_result *ListClientUserDefineRuleTypesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListClientUserDefineRuleTypes"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClientUserDefineRuleTypesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClientUserDefineRuleTypes() (_result *ListClientUserDefineRuleTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClientUserDefineRuleTypesResponse{}
	_body, _err := client.ListClientUserDefineRuleTypesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClientUserDefineRulesWithOptions(request *ListClientUserDefineRulesRequest, runtime *util.RuntimeOptions) (_result *ListClientUserDefineRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClientUserDefineRules"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClientUserDefineRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClientUserDefineRules(request *ListClientUserDefineRulesRequest) (_result *ListClientUserDefineRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClientUserDefineRulesResponse{}
	_body, _err := client.ListClientUserDefineRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterCnnfStatusDetailWithOptions(request *ListClusterCnnfStatusDetailRequest, runtime *util.RuntimeOptions) (_result *ListClusterCnnfStatusDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterIds)) {
		query["ClusterIds"] = request.ClusterIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterCnnfStatusDetail"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterCnnfStatusDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterCnnfStatusDetail(request *ListClusterCnnfStatusDetailRequest) (_result *ListClusterCnnfStatusDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterCnnfStatusDetailResponse{}
	_body, _err := client.ListClusterCnnfStatusDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterInterceptionConfigWithOptions(request *ListClusterInterceptionConfigRequest, runtime *util.RuntimeOptions) (_result *ListClusterInterceptionConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterCNNFStatus)) {
		query["ClusterCNNFStatus"] = request.ClusterCNNFStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterName)) {
		query["ClusterName"] = request.ClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterInterceptionConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterInterceptionConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterInterceptionConfig(request *ListClusterInterceptionConfigRequest) (_result *ListClusterInterceptionConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterInterceptionConfigResponse{}
	_body, _err := client.ListClusterInterceptionConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListHoneypotWithOptions(request *ListHoneypotRequest, runtime *util.RuntimeOptions) (_result *ListHoneypotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.HoneypotIds)) {
		query["HoneypotIds"] = request.HoneypotIds
	}

	if !tea.BoolValue(util.IsUnset(request.HoneypotName)) {
		query["HoneypotName"] = request.HoneypotName
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeName)) {
		query["NodeName"] = request.NodeName
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHoneypot"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHoneypotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListHoneypot(request *ListHoneypotRequest) (_result *ListHoneypotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHoneypotResponse{}
	_body, _err := client.ListHoneypotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListHoneypotAlarmEventsWithOptions(request *ListHoneypotAlarmEventsRequest, runtime *util.RuntimeOptions) (_result *ListHoneypotAlarmEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHoneypotAlarmEvents"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHoneypotAlarmEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListHoneypotAlarmEvents(request *ListHoneypotAlarmEventsRequest) (_result *ListHoneypotAlarmEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHoneypotAlarmEventsResponse{}
	_body, _err := client.ListHoneypotAlarmEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListHoneypotNodeWithOptions(request *ListHoneypotNodeRequest, runtime *util.RuntimeOptions) (_result *ListHoneypotNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeName)) {
		query["NodeName"] = request.NodeName
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHoneypotNode"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHoneypotNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListHoneypotNode(request *ListHoneypotNodeRequest) (_result *ListHoneypotNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHoneypotNodeResponse{}
	_body, _err := client.ListHoneypotNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListHoneypotPresetWithOptions(request *ListHoneypotPresetRequest, runtime *util.RuntimeOptions) (_result *ListHoneypotPresetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.HoneypotImageName)) {
		query["HoneypotImageName"] = request.HoneypotImageName
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeName)) {
		query["NodeName"] = request.NodeName
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PresetName)) {
		query["PresetName"] = request.PresetName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHoneypotPreset"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHoneypotPresetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListHoneypotPreset(request *ListHoneypotPresetRequest) (_result *ListHoneypotPresetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHoneypotPresetResponse{}
	_body, _err := client.ListHoneypotPresetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListHoneypotProbeWithOptions(request *ListHoneypotProbeRequest, runtime *util.RuntimeOptions) (_result *ListHoneypotProbeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		query["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeStatus)) {
		query["ProbeStatus"] = request.ProbeStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeType)) {
		query["ProbeType"] = request.ProbeType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHoneypotProbe"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHoneypotProbeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListHoneypotProbe(request *ListHoneypotProbeRequest) (_result *ListHoneypotProbeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHoneypotProbeResponse{}
	_body, _err := client.ListHoneypotProbeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListImageRegistryRegionWithOptions(runtime *util.RuntimeOptions) (_result *ListImageRegistryRegionResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListImageRegistryRegion"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListImageRegistryRegionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListImageRegistryRegion() (_result *ListImageRegistryRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListImageRegistryRegionResponse{}
	_body, _err := client.ListImageRegistryRegionWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListImageRiskWithOptions(request *ListImageRiskRequest, runtime *util.RuntimeOptions) (_result *ListImageRiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListImageRisk"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListImageRiskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListImageRisk(request *ListImageRiskRequest) (_result *ListImageRiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListImageRiskResponse{}
	_body, _err := client.ListImageRiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListInterceptionHistoryWithOptions(request *ListInterceptionHistoryRequest, runtime *util.RuntimeOptions) (_result *ListInterceptionHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.HistoryName)) {
		query["HistoryName"] = request.HistoryName
	}

	if !tea.BoolValue(util.IsUnset(request.InterceptionTypes)) {
		query["InterceptionTypes"] = request.InterceptionTypes
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInterceptionHistory"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInterceptionHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListInterceptionHistory(request *ListInterceptionHistoryRequest) (_result *ListInterceptionHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInterceptionHistoryResponse{}
	_body, _err := client.ListInterceptionHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListInterceptionImageWithOptions(runtime *util.RuntimeOptions) (_result *ListInterceptionImageResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListInterceptionImage"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInterceptionImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListInterceptionImage() (_result *ListInterceptionImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInterceptionImageResponse{}
	_body, _err := client.ListInterceptionImageWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListInterceptionRulePageWithOptions(request *ListInterceptionRulePageRequest, runtime *util.RuntimeOptions) (_result *ListInterceptionRulePageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.CriteriaType)) {
		query["CriteriaType"] = request.CriteriaType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInterceptionRulePage"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInterceptionRulePageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListInterceptionRulePage(request *ListInterceptionRulePageRequest) (_result *ListInterceptionRulePageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInterceptionRulePageResponse{}
	_body, _err := client.ListInterceptionRulePageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListInterceptionTargetPageWithOptions(request *ListInterceptionTargetPageRequest, runtime *util.RuntimeOptions) (_result *ListInterceptionTargetPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ImageList)) {
		query["ImageList"] = request.ImageList
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TagList)) {
		query["TagList"] = request.TagList
	}

	if !tea.BoolValue(util.IsUnset(request.TargetName)) {
		query["TargetName"] = request.TargetName
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInterceptionTargetPage"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInterceptionTargetPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListInterceptionTargetPage(request *ListInterceptionTargetPageRequest) (_result *ListInterceptionTargetPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInterceptionTargetPageResponse{}
	_body, _err := client.ListInterceptionTargetPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPluginForUuidWithOptions(tmpReq *ListPluginForUuidRequest, runtime *util.RuntimeOptions) (_result *ListPluginForUuidResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListPluginForUuidShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Types)) {
		request.TypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Types, tea.String("Types"), tea.String("simple"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TypesShrink)) {
		query["Types"] = request.TypesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPluginForUuid"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPluginForUuidResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPluginForUuid(request *ListPluginForUuidRequest) (_result *ListPluginForUuidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPluginForUuidResponse{}
	_body, _err := client.ListPluginForUuidWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPodRiskWithOptions(request *ListPodRiskRequest, runtime *util.RuntimeOptions) (_result *ListPodRiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PodName)) {
		query["PodName"] = request.PodName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPodRisk"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPodRiskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPodRisk(request *ListPodRiskRequest) (_result *ListPodRiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPodRiskResponse{}
	_body, _err := client.ListPodRiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPrivateRegistryListWithOptions(request *ListPrivateRegistryListRequest, runtime *util.RuntimeOptions) (_result *ListPrivateRegistryListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegistryType)) {
		query["RegistryType"] = request.RegistryType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPrivateRegistryList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPrivateRegistryListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPrivateRegistryList(request *ListPrivateRegistryListRequest) (_result *ListPrivateRegistryListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPrivateRegistryListResponse{}
	_body, _err := client.ListPrivateRegistryListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPrivateRegistryTypeWithOptions(runtime *util.RuntimeOptions) (_result *ListPrivateRegistryTypeResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListPrivateRegistryType"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPrivateRegistryTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPrivateRegistryType() (_result *ListPrivateRegistryTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPrivateRegistryTypeResponse{}
	_body, _err := client.ListPrivateRegistryTypeWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRuleTargetAllWithOptions(request *ListRuleTargetAllRequest, runtime *util.RuntimeOptions) (_result *ListRuleTargetAllResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRuleTargetAll"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRuleTargetAllResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRuleTargetAll(request *ListRuleTargetAllRequest) (_result *ListRuleTargetAllResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRuleTargetAllResponse{}
	_body, _err := client.ListRuleTargetAllWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSystemAggregationRulesWithOptions(request *ListSystemAggregationRulesRequest, runtime *util.RuntimeOptions) (_result *ListSystemAggregationRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSystemAggregationRules"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSystemAggregationRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSystemAggregationRules(request *ListSystemAggregationRulesRequest) (_result *ListSystemAggregationRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSystemAggregationRulesResponse{}
	_body, _err := client.ListSystemAggregationRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSystemClientRuleTypesWithOptions(runtime *util.RuntimeOptions) (_result *ListSystemClientRuleTypesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListSystemClientRuleTypes"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSystemClientRuleTypesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSystemClientRuleTypes() (_result *ListSystemClientRuleTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSystemClientRuleTypesResponse{}
	_body, _err := client.ListSystemClientRuleTypesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSystemClientRulesWithOptions(request *ListSystemClientRulesRequest, runtime *util.RuntimeOptions) (_result *ListSystemClientRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AggregationIds)) {
		query["AggregationIds"] = request.AggregationIds
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.IsContainer)) {
		query["IsContainer"] = request.IsContainer
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleTypes)) {
		query["RuleTypes"] = request.RuleTypes
	}

	if !tea.BoolValue(util.IsUnset(request.SystemType)) {
		query["SystemType"] = request.SystemType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSystemClientRules"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSystemClientRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSystemClientRules(request *ListSystemClientRulesRequest) (_result *ListSystemClientRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSystemClientRulesResponse{}
	_body, _err := client.ListSystemClientRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSystemRuleAggregationTypesWithOptions(request *ListSystemRuleAggregationTypesRequest, runtime *util.RuntimeOptions) (_result *ListSystemRuleAggregationTypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSystemRuleAggregationTypes"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSystemRuleAggregationTypesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSystemRuleAggregationTypes(request *ListSystemRuleAggregationTypesRequest) (_result *ListSystemRuleAggregationTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSystemRuleAggregationTypesResponse{}
	_body, _err := client.ListSystemRuleAggregationTypesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListUninstallAegisMachinesWithOptions(request *ListUninstallAegisMachinesRequest, runtime *util.RuntimeOptions) (_result *ListUninstallAegisMachinesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Os)) {
		query["Os"] = request.Os
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionIdStr)) {
		query["RegionIdStr"] = request.RegionIdStr
	}

	if !tea.BoolValue(util.IsUnset(request.RegionNo)) {
		query["RegionNo"] = request.RegionNo
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Vendor)) {
		query["Vendor"] = request.Vendor
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUninstallAegisMachines"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUninstallAegisMachinesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListUninstallAegisMachines(request *ListUninstallAegisMachinesRequest) (_result *ListUninstallAegisMachinesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUninstallAegisMachinesResponse{}
	_body, _err := client.ListUninstallAegisMachinesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListUuidsByWebPathWithOptions(request *ListUuidsByWebPathRequest, runtime *util.RuntimeOptions) (_result *ListUuidsByWebPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WebPath)) {
		query["WebPath"] = request.WebPath
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUuidsByWebPath"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUuidsByWebPathResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListUuidsByWebPath(request *ListUuidsByWebPathRequest) (_result *ListUuidsByWebPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUuidsByWebPathResponse{}
	_body, _err := client.ListUuidsByWebPathWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListVulAutoRepairConfigWithOptions(request *ListVulAutoRepairConfigRequest, runtime *util.RuntimeOptions) (_result *ListVulAutoRepairConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliasName)) {
		query["AliasName"] = request.AliasName
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListVulAutoRepairConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListVulAutoRepairConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListVulAutoRepairConfig(request *ListVulAutoRepairConfigRequest) (_result *ListVulAutoRepairConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListVulAutoRepairConfigResponse{}
	_body, _err := client.ListVulAutoRepairConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAccessKeyLeakDealWithOptions(request *ModifyAccessKeyLeakDealRequest, runtime *util.RuntimeOptions) (_result *ModifyAccessKeyLeakDealResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.IdList)) {
		query["IdList"] = request.IdList
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAccessKeyLeakDeal"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAccessKeyLeakDealResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAccessKeyLeakDeal(request *ModifyAccessKeyLeakDealRequest) (_result *ModifyAccessKeyLeakDealResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAccessKeyLeakDealResponse{}
	_body, _err := client.ModifyAccessKeyLeakDealWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAntiBruteForceRuleWithOptions(request *ModifyAntiBruteForceRuleRequest, runtime *util.RuntimeOptions) (_result *ModifyAntiBruteForceRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DefaultRule)) {
		query["DefaultRule"] = request.DefaultRule
	}

	if !tea.BoolValue(util.IsUnset(request.FailCount)) {
		query["FailCount"] = request.FailCount
	}

	if !tea.BoolValue(util.IsUnset(request.ForbiddenTime)) {
		query["ForbiddenTime"] = request.ForbiddenTime
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Span)) {
		query["Span"] = request.Span
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAntiBruteForceRule"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAntiBruteForceRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAntiBruteForceRule(request *ModifyAntiBruteForceRuleRequest) (_result *ModifyAntiBruteForceRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAntiBruteForceRuleResponse{}
	_body, _err := client.ModifyAntiBruteForceRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAppVulScanCycleWithOptions(request *ModifyAppVulScanCycleRequest, runtime *util.RuntimeOptions) (_result *ModifyAppVulScanCycleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cycle)) {
		query["Cycle"] = request.Cycle
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAppVulScanCycle"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAppVulScanCycleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAppVulScanCycle(request *ModifyAppVulScanCycleRequest) (_result *ModifyAppVulScanCycleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAppVulScanCycleResponse{}
	_body, _err := client.ModifyAppVulScanCycleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the [CreateOrUpdateAssetGroup](~~CreateOrUpdateAssetGroup~~) operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.
 * ### Limits
 * You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyAssetGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyAssetGroupResponse
 */
func (client *Client) ModifyAssetGroupWithOptions(request *ModifyAssetGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyAssetGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAssetGroup"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAssetGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the [CreateOrUpdateAssetGroup](~~CreateOrUpdateAssetGroup~~) operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.
 * ### Limits
 * You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyAssetGroupRequest
 * @return ModifyAssetGroupResponse
 */
func (client *Client) ModifyAssetGroup(request *ModifyAssetGroupRequest) (_result *ModifyAssetGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAssetGroupResponse{}
	_body, _err := client.ModifyAssetGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAssetImportantWithOptions(request *ModifyAssetImportantRequest, runtime *util.RuntimeOptions) (_result *ModifyAssetImportantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImportantCode)) {
		query["ImportantCode"] = request.ImportantCode
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAssetImportant"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAssetImportantResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAssetImportant(request *ModifyAssetImportantRequest) (_result *ModifyAssetImportantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAssetImportantResponse{}
	_body, _err := client.ModifyAssetImportantWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * # **Usage notes**
 * You can call the ModifyAutoDelConfig operation to specify the number of days after which a detected vulnerability is automatically deleted. If you do not handle a detected vulnerability and the vulnerability is no longer detected in multiple subsequent detection, the vulnerability is automatically deleted from the Vulnerabilities page after the specified number of days. If vulnerabilities of the same type are detected, Security Center still generates alerts.
 *
 * # **Limits**
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyAutoDelConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyAutoDelConfigResponse
 */
func (client *Client) ModifyAutoDelConfigWithOptions(request *ModifyAutoDelConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyAutoDelConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Days)) {
		query["Days"] = request.Days
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAutoDelConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAutoDelConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * # **Usage notes**
 * You can call the ModifyAutoDelConfig operation to specify the number of days after which a detected vulnerability is automatically deleted. If you do not handle a detected vulnerability and the vulnerability is no longer detected in multiple subsequent detection, the vulnerability is automatically deleted from the Vulnerabilities page after the specified number of days. If vulnerabilities of the same type are detected, Security Center still generates alerts.
 *
 * # **Limits**
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyAutoDelConfigRequest
 * @return ModifyAutoDelConfigResponse
 */
func (client *Client) ModifyAutoDelConfig(request *ModifyAutoDelConfigRequest) (_result *ModifyAutoDelConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAutoDelConfigResponse{}
	_body, _err := client.ModifyAutoDelConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyBackupPolicyWithOptions(tmpReq *ModifyBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ModifyBackupPolicyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Policy)) {
		request.PolicyShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Policy, tea.String("Policy"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyShrink)) {
		query["Policy"] = request.PolicyShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyRegionId)) {
		query["PolicyRegionId"] = request.PolicyRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyVersion)) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyBackupPolicy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyBackupPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyBackupPolicy(request *ModifyBackupPolicyRequest) (_result *ModifyBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBackupPolicyResponse{}
	_body, _err := client.ModifyBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyBackupPolicyStatusWithOptions(request *ModifyBackupPolicyStatusRequest, runtime *util.RuntimeOptions) (_result *ModifyBackupPolicyStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyVersion)) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyBackupPolicyStatus"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyBackupPolicyStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyBackupPolicyStatus(request *ModifyBackupPolicyStatusRequest) (_result *ModifyBackupPolicyStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBackupPolicyStatusResponse{}
	_body, _err := client.ModifyBackupPolicyStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Deleted logs cannot be restored. Before you call this operation to delete all logs and free up log storage, we recommend that you export and save your logs to your computer.
 *
 * @param request ModifyClearLogstoreStorageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyClearLogstoreStorageResponse
 */
func (client *Client) ModifyClearLogstoreStorageWithOptions(request *ModifyClearLogstoreStorageRequest, runtime *util.RuntimeOptions) (_result *ModifyClearLogstoreStorageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.UserLogStore)) {
		query["UserLogStore"] = request.UserLogStore
	}

	if !tea.BoolValue(util.IsUnset(request.UserProject)) {
		query["UserProject"] = request.UserProject
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyClearLogstoreStorage"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyClearLogstoreStorageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Deleted logs cannot be restored. Before you call this operation to delete all logs and free up log storage, we recommend that you export and save your logs to your computer.
 *
 * @param request ModifyClearLogstoreStorageRequest
 * @return ModifyClearLogstoreStorageResponse
 */
func (client *Client) ModifyClearLogstoreStorage(request *ModifyClearLogstoreStorageRequest) (_result *ModifyClearLogstoreStorageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClearLogstoreStorageResponse{}
	_body, _err := client.ModifyClearLogstoreStorageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClientConfSetupWithOptions(request *ModifyClientConfSetupRequest, runtime *util.RuntimeOptions) (_result *ModifyClientConfSetupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.StrategyConfig)) {
		query["StrategyConfig"] = request.StrategyConfig
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyTag)) {
		query["StrategyTag"] = request.StrategyTag
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyTagValue)) {
		query["StrategyTagValue"] = request.StrategyTagValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyClientConfSetup"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyClientConfSetupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClientConfSetup(request *ModifyClientConfSetupRequest) (_result *ModifyClientConfSetupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClientConfSetupResponse{}
	_body, _err := client.ModifyClientConfSetupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClientConfStrategyWithOptions(request *ModifyClientConfStrategyRequest, runtime *util.RuntimeOptions) (_result *ModifyClientConfStrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.TagExt)) {
		query["TagExt"] = request.TagExt
	}

	if !tea.BoolValue(util.IsUnset(request.TagValue)) {
		query["TagValue"] = request.TagValue
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyClientConfStrategy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyClientConfStrategyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClientConfStrategy(request *ModifyClientConfStrategyRequest) (_result *ModifyClientConfStrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClientConfStrategyResponse{}
	_body, _err := client.ModifyClientConfStrategyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClientUserDefineRuleWithOptions(request *ModifyClientUserDefineRuleRequest, runtime *util.RuntimeOptions) (_result *ModifyClientUserDefineRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionType)) {
		query["ActionType"] = request.ActionType
	}

	if !tea.BoolValue(util.IsUnset(request.Cmdline)) {
		query["Cmdline"] = request.Cmdline
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		query["FilePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.IP)) {
		query["IP"] = request.IP
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Md5List)) {
		query["Md5List"] = request.Md5List
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NewFilePath)) {
		query["NewFilePath"] = request.NewFilePath
	}

	if !tea.BoolValue(util.IsUnset(request.ParentCmdline)) {
		query["ParentCmdline"] = request.ParentCmdline
	}

	if !tea.BoolValue(util.IsUnset(request.ParentProcPath)) {
		query["ParentProcPath"] = request.ParentProcPath
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		query["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.PortStr)) {
		query["PortStr"] = request.PortStr
	}

	if !tea.BoolValue(util.IsUnset(request.ProcPath)) {
		query["ProcPath"] = request.ProcPath
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryContent)) {
		query["RegistryContent"] = request.RegistryContent
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryKey)) {
		query["RegistryKey"] = request.RegistryKey
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyClientUserDefineRule"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyClientUserDefineRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClientUserDefineRule(request *ModifyClientUserDefineRuleRequest) (_result *ModifyClientUserDefineRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClientUserDefineRuleResponse{}
	_body, _err := client.ModifyClientUserDefineRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClusterCnnfStatusUserConfirmWithOptions(request *ModifyClusterCnnfStatusUserConfirmRequest, runtime *util.RuntimeOptions) (_result *ModifyClusterCnnfStatusUserConfirmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterIds)) {
		query["ClusterIds"] = request.ClusterIds
	}

	if !tea.BoolValue(util.IsUnset(request.UserConfirm)) {
		query["UserConfirm"] = request.UserConfirm
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyClusterCnnfStatusUserConfirm"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyClusterCnnfStatusUserConfirmResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClusterCnnfStatusUserConfirm(request *ModifyClusterCnnfStatusUserConfirmRequest) (_result *ModifyClusterCnnfStatusUserConfirmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClusterCnnfStatusUserConfirmResponse{}
	_body, _err := client.ModifyClusterCnnfStatusUserConfirmWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyConcernNecessityWithOptions(request *ModifyConcernNecessityRequest, runtime *util.RuntimeOptions) (_result *ModifyConcernNecessityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConcernNecessity)) {
		query["ConcernNecessity"] = request.ConcernNecessity
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyConcernNecessity"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyConcernNecessityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyConcernNecessity(request *ModifyConcernNecessityRequest) (_result *ModifyConcernNecessityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyConcernNecessityResponse{}
	_body, _err := client.ModifyConcernNecessityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCreateVulWhitelistWithOptions(request *ModifyCreateVulWhitelistRequest, runtime *util.RuntimeOptions) (_result *ModifyCreateVulWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		query["Reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.TargetInfo)) {
		query["TargetInfo"] = request.TargetInfo
	}

	if !tea.BoolValue(util.IsUnset(request.Whitelist)) {
		query["Whitelist"] = request.Whitelist
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCreateVulWhitelist"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCreateVulWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCreateVulWhitelist(request *ModifyCreateVulWhitelistRequest) (_result *ModifyCreateVulWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCreateVulWhitelistResponse{}
	_body, _err := client.ModifyCreateVulWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCustomBlockRecordWithOptions(request *ModifyCustomBlockRecordRequest, runtime *util.RuntimeOptions) (_result *ModifyCustomBlockRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BlockIp)) {
		query["BlockIp"] = request.BlockIp
	}

	if !tea.BoolValue(util.IsUnset(request.Bound)) {
		query["Bound"] = request.Bound
	}

	if !tea.BoolValue(util.IsUnset(request.ExpireTime)) {
		query["ExpireTime"] = request.ExpireTime
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCustomBlockRecord"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCustomBlockRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCustomBlockRecord(request *ModifyCustomBlockRecordRequest) (_result *ModifyCustomBlockRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCustomBlockRecordResponse{}
	_body, _err := client.ModifyCustomBlockRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCycleTaskWithOptions(request *ModifyCycleTaskRequest, runtime *util.RuntimeOptions) (_result *ModifyCycleTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigId)) {
		query["ConfigId"] = request.ConfigId
	}

	if !tea.BoolValue(util.IsUnset(request.Enable)) {
		query["Enable"] = request.Enable
	}

	if !tea.BoolValue(util.IsUnset(request.FirstDateStr)) {
		query["FirstDateStr"] = request.FirstDateStr
	}

	if !tea.BoolValue(util.IsUnset(request.IntervalPeriod)) {
		query["IntervalPeriod"] = request.IntervalPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.Param)) {
		query["Param"] = request.Param
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.TargetEndTime)) {
		query["TargetEndTime"] = request.TargetEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.TargetStartTime)) {
		query["TargetStartTime"] = request.TargetStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCycleTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCycleTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCycleTask(request *ModifyCycleTaskRequest) (_result *ModifyCycleTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCycleTaskResponse{}
	_body, _err := client.ModifyCycleTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyEmgVulSubmitWithOptions(request *ModifyEmgVulSubmitRequest, runtime *util.RuntimeOptions) (_result *ModifyEmgVulSubmitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.UserAgreement)) {
		query["UserAgreement"] = request.UserAgreement
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyEmgVulSubmit"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyEmgVulSubmitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyEmgVulSubmit(request *ModifyEmgVulSubmitRequest) (_result *ModifyEmgVulSubmitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEmgVulSubmitResponse{}
	_body, _err := client.ModifyEmgVulSubmitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyGroupPropertyWithOptions(request *ModifyGroupPropertyRequest, runtime *util.RuntimeOptions) (_result *ModifyGroupPropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Data)) {
		query["Data"] = request.Data
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyGroupProperty"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyGroupPropertyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyGroupProperty(request *ModifyGroupPropertyRequest) (_result *ModifyGroupPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyGroupPropertyResponse{}
	_body, _err := client.ModifyGroupPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAntiBruteForceRuleWithOptions(request *ModifyInstanceAntiBruteForceRuleRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAntiBruteForceRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NewRuleId)) {
		query["NewRuleId"] = request.NewRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceAntiBruteForceRule"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceAntiBruteForceRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAntiBruteForceRule(request *ModifyInstanceAntiBruteForceRuleRequest) (_result *ModifyInstanceAntiBruteForceRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAntiBruteForceRuleResponse{}
	_body, _err := client.ModifyInstanceAntiBruteForceRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInterceptionRuleWithOptions(tmpReq *ModifyInterceptionRuleRequest, runtime *util.RuntimeOptions) (_result *ModifyInterceptionRuleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ModifyInterceptionRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DstTarget)) {
		request.DstTargetShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DstTarget, tea.String("DstTarget"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SrcTarget)) {
		request.SrcTargetShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SrcTarget, tea.String("SrcTarget"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DstTargetShrink)) {
		query["DstTarget"] = request.DstTargetShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InterceptType)) {
		query["InterceptType"] = request.InterceptType
	}

	if !tea.BoolValue(util.IsUnset(request.OrderIndex)) {
		query["OrderIndex"] = request.OrderIndex
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleSwitch)) {
		query["RuleSwitch"] = request.RuleSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.SrcTargetShrink)) {
		query["SrcTarget"] = request.SrcTargetShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInterceptionRule"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInterceptionRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInterceptionRule(request *ModifyInterceptionRuleRequest) (_result *ModifyInterceptionRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInterceptionRuleResponse{}
	_body, _err := client.ModifyInterceptionRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInterceptionRuleSwitchWithOptions(request *ModifyInterceptionRuleSwitchRequest, runtime *util.RuntimeOptions) (_result *ModifyInterceptionRuleSwitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleIds)) {
		query["RuleIds"] = request.RuleIds
	}

	if !tea.BoolValue(util.IsUnset(request.RuleSwitch)) {
		query["RuleSwitch"] = request.RuleSwitch
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInterceptionRuleSwitch"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInterceptionRuleSwitchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInterceptionRuleSwitch(request *ModifyInterceptionRuleSwitchRequest) (_result *ModifyInterceptionRuleSwitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInterceptionRuleSwitchResponse{}
	_body, _err := client.ModifyInterceptionRuleSwitchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInterceptionTargetWithOptions(request *ModifyInterceptionTargetRequest, runtime *util.RuntimeOptions) (_result *ModifyInterceptionTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.ImageList)) {
		query["ImageList"] = request.ImageList
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.TagList)) {
		query["TagList"] = request.TagList
	}

	if !tea.BoolValue(util.IsUnset(request.TargetId)) {
		query["TargetId"] = request.TargetId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetName)) {
		query["TargetName"] = request.TargetName
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInterceptionTarget"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInterceptionTargetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInterceptionTarget(request *ModifyInterceptionTargetRequest) (_result *ModifyInterceptionTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInterceptionTargetResponse{}
	_body, _err := client.ModifyInterceptionTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyLogMetaStatusWithOptions(request *ModifyLogMetaStatusRequest, runtime *util.RuntimeOptions) (_result *ModifyLogMetaStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.LogStore)) {
		query["LogStore"] = request.LogStore
	}

	if !tea.BoolValue(util.IsUnset(request.Project)) {
		query["Project"] = request.Project
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyLogMetaStatus"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyLogMetaStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyLogMetaStatus(request *ModifyLogMetaStatusRequest) (_result *ModifyLogMetaStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLogMetaStatusResponse{}
	_body, _err := client.ModifyLogMetaStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyLoginBaseConfigWithOptions(request *ModifyLoginBaseConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyLoginBaseConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Target)) {
		query["Target"] = request.Target
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyLoginBaseConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyLoginBaseConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyLoginBaseConfig(request *ModifyLoginBaseConfigRequest) (_result *ModifyLoginBaseConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLoginBaseConfigResponse{}
	_body, _err := client.ModifyLoginBaseConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyLoginSwitchConfigWithOptions(request *ModifyLoginSwitchConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyLoginSwitchConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Item)) {
		query["Item"] = request.Item
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyLoginSwitchConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyLoginSwitchConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyLoginSwitchConfig(request *ModifyLoginSwitchConfigRequest) (_result *ModifyLoginSwitchConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLoginSwitchConfigResponse{}
	_body, _err := client.ModifyLoginSwitchConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyNoticeConfigWithOptions(request *ModifyNoticeConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyNoticeConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Project)) {
		query["Project"] = request.Project
	}

	if !tea.BoolValue(util.IsUnset(request.Route)) {
		query["Route"] = request.Route
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.TimeLimit)) {
		query["TimeLimit"] = request.TimeLimit
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyNoticeConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyNoticeConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyNoticeConfig(request *ModifyNoticeConfigRequest) (_result *ModifyNoticeConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyNoticeConfigResponse{}
	_body, _err := client.ModifyNoticeConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * **Prerequisites** A service-linked role is created, and Security Center is authorized to access cloud resources. You can call the [CreateServiceLinkedRole](~~CreateServiceLinkedRole~~) operation to create service-linked roles and authorize Security Center to access cloud resources. **Scenarios** Before you use the log analysis feature of Security Center, you must call the ModifyOpenLogShipper operation to activate Log Service.
 *
 * @param request ModifyOpenLogShipperRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyOpenLogShipperResponse
 */
func (client *Client) ModifyOpenLogShipperWithOptions(request *ModifyOpenLogShipperRequest, runtime *util.RuntimeOptions) (_result *ModifyOpenLogShipperResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyOpenLogShipper"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyOpenLogShipperResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * **Prerequisites** A service-linked role is created, and Security Center is authorized to access cloud resources. You can call the [CreateServiceLinkedRole](~~CreateServiceLinkedRole~~) operation to create service-linked roles and authorize Security Center to access cloud resources. **Scenarios** Before you use the log analysis feature of Security Center, you must call the ModifyOpenLogShipper operation to activate Log Service.
 *
 * @param request ModifyOpenLogShipperRequest
 * @return ModifyOpenLogShipperResponse
 */
func (client *Client) ModifyOpenLogShipper(request *ModifyOpenLogShipperRequest) (_result *ModifyOpenLogShipperResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyOpenLogShipperResponse{}
	_body, _err := client.ModifyOpenLogShipperWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyOperateVulWithOptions(request *ModifyOperateVulRequest, runtime *util.RuntimeOptions) (_result *ModifyOperateVulResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Info)) {
		query["Info"] = request.Info
	}

	if !tea.BoolValue(util.IsUnset(request.OperateType)) {
		query["OperateType"] = request.OperateType
	}

	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		query["Reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyOperateVul"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyOperateVulResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyOperateVul(request *ModifyOperateVulRequest) (_result *ModifyOperateVulResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyOperateVulResponse{}
	_body, _err := client.ModifyOperateVulWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyPropertyScheduleConfigWithOptions(request *ModifyPropertyScheduleConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyPropertyScheduleConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ScheduleTime)) {
		query["ScheduleTime"] = request.ScheduleTime
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPropertyScheduleConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyPropertyScheduleConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyPropertyScheduleConfig(request *ModifyPropertyScheduleConfigRequest) (_result *ModifyPropertyScheduleConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPropertyScheduleConfigResponse{}
	_body, _err := client.ModifyPropertyScheduleConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyPushAllTaskWithOptions(request *ModifyPushAllTaskRequest, runtime *util.RuntimeOptions) (_result *ModifyPushAllTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Tasks)) {
		query["Tasks"] = request.Tasks
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPushAllTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyPushAllTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyPushAllTask(request *ModifyPushAllTaskRequest) (_result *ModifyPushAllTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPushAllTaskResponse{}
	_body, _err := client.ModifyPushAllTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request ModifyRiskCheckStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyRiskCheckStatusResponse
 */
// Deprecated
func (client *Client) ModifyRiskCheckStatusWithOptions(request *ModifyRiskCheckStatusRequest, runtime *util.RuntimeOptions) (_result *ModifyRiskCheckStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ItemId)) {
		query["ItemId"] = request.ItemId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyRiskCheckStatus"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyRiskCheckStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request ModifyRiskCheckStatusRequest
 * @return ModifyRiskCheckStatusResponse
 */
// Deprecated
func (client *Client) ModifyRiskCheckStatus(request *ModifyRiskCheckStatusRequest) (_result *ModifyRiskCheckStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRiskCheckStatusResponse{}
	_body, _err := client.ModifyRiskCheckStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request ModifyRiskSingleResultStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyRiskSingleResultStatusResponse
 */
// Deprecated
func (client *Client) ModifyRiskSingleResultStatusWithOptions(request *ModifyRiskSingleResultStatusRequest, runtime *util.RuntimeOptions) (_result *ModifyRiskSingleResultStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyRiskSingleResultStatus"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyRiskSingleResultStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request ModifyRiskSingleResultStatusRequest
 * @return ModifyRiskSingleResultStatusResponse
 */
// Deprecated
func (client *Client) ModifyRiskSingleResultStatus(request *ModifyRiskSingleResultStatusRequest) (_result *ModifyRiskSingleResultStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRiskSingleResultStatusResponse{}
	_body, _err := client.ModifyRiskSingleResultStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request ModifySecurityCheckScheduleConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifySecurityCheckScheduleConfigResponse
 */
// Deprecated
func (client *Client) ModifySecurityCheckScheduleConfigWithOptions(request *ModifySecurityCheckScheduleConfigRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityCheckScheduleConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DaysOfWeek)) {
		query["DaysOfWeek"] = request.DaysOfWeek
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySecurityCheckScheduleConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySecurityCheckScheduleConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request ModifySecurityCheckScheduleConfigRequest
 * @return ModifySecurityCheckScheduleConfigResponse
 */
// Deprecated
func (client *Client) ModifySecurityCheckScheduleConfig(request *ModifySecurityCheckScheduleConfigRequest) (_result *ModifySecurityCheckScheduleConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityCheckScheduleConfigResponse{}
	_body, _err := client.ModifySecurityCheckScheduleConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityEventMarkMissIndividuallyWithOptions(request *ModifySecurityEventMarkMissIndividuallyRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityEventMarkMissIndividuallyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeleteMarkMissParam)) {
		body["DeleteMarkMissParam"] = request.DeleteMarkMissParam
	}

	if !tea.BoolValue(util.IsUnset(request.From)) {
		body["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.InsertMarkMissParam)) {
		body["InsertMarkMissParam"] = request.InsertMarkMissParam
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		body["Lang"] = request.Lang
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySecurityEventMarkMissIndividually"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySecurityEventMarkMissIndividuallyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityEventMarkMissIndividually(request *ModifySecurityEventMarkMissIndividuallyRequest) (_result *ModifySecurityEventMarkMissIndividuallyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityEventMarkMissIndividuallyResponse{}
	_body, _err := client.ModifySecurityEventMarkMissIndividuallyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyStartVulScanWithOptions(request *ModifyStartVulScanRequest, runtime *util.RuntimeOptions) (_result *ModifyStartVulScanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Types)) {
		query["Types"] = request.Types
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyStartVulScan"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyStartVulScanResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyStartVulScan(request *ModifyStartVulScanRequest) (_result *ModifyStartVulScanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyStartVulScanResponse{}
	_body, _err := client.ModifyStartVulScanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyStrategyWithOptions(request *ModifyStrategyRequest, runtime *util.RuntimeOptions) (_result *ModifyStrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomType)) {
		query["CustomType"] = request.CustomType
	}

	if !tea.BoolValue(util.IsUnset(request.CycleDays)) {
		query["CycleDays"] = request.CycleDays
	}

	if !tea.BoolValue(util.IsUnset(request.CycleStartTime)) {
		query["CycleStartTime"] = request.CycleStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RiskCustomParams)) {
		query["RiskCustomParams"] = request.RiskCustomParams
	}

	if !tea.BoolValue(util.IsUnset(request.RiskSubTypeName)) {
		query["RiskSubTypeName"] = request.RiskSubTypeName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyStrategy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyStrategyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyStrategy(request *ModifyStrategyRequest) (_result *ModifyStrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyStrategyResponse{}
	_body, _err := client.ModifyStrategyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyStrategyTargetWithOptions(request *ModifyStrategyTargetRequest, runtime *util.RuntimeOptions) (_result *ModifyStrategyTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Target)) {
		query["Target"] = request.Target
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyStrategyTarget"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyStrategyTargetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyStrategyTarget(request *ModifyStrategyTargetRequest) (_result *ModifyStrategyTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyStrategyTargetResponse{}
	_body, _err := client.ModifyStrategyTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyTagWithUuidWithOptions(request *ModifyTagWithUuidRequest, runtime *util.RuntimeOptions) (_result *ModifyTagWithUuidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MachineTypes)) {
		query["MachineTypes"] = request.MachineTypes
	}

	if !tea.BoolValue(util.IsUnset(request.TagId)) {
		query["TagId"] = request.TagId
	}

	if !tea.BoolValue(util.IsUnset(request.TagList)) {
		query["TagList"] = request.TagList
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTagWithUuid"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTagWithUuidResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyTagWithUuid(request *ModifyTagWithUuidRequest) (_result *ModifyTagWithUuidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTagWithUuidResponse{}
	_body, _err := client.ModifyTagWithUuidWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyUniBackupPolicyWithOptions(tmpReq *ModifyUniBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyUniBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ModifyUniBackupPolicyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.FullPlan)) {
		request.FullPlanShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FullPlan, tea.String("FullPlan"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.IncPlan)) {
		request.IncPlanShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.IncPlan, tea.String("IncPlan"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountName)) {
		query["AccountName"] = request.AccountName
	}

	if !tea.BoolValue(util.IsUnset(request.AccountPassword)) {
		query["AccountPassword"] = request.AccountPassword
	}

	if !tea.BoolValue(util.IsUnset(request.FullPlanShrink)) {
		query["FullPlan"] = request.FullPlanShrink
	}

	if !tea.BoolValue(util.IsUnset(request.IncPlanShrink)) {
		query["IncPlan"] = request.IncPlanShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyName)) {
		query["PolicyName"] = request.PolicyName
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyStatus)) {
		query["PolicyStatus"] = request.PolicyStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Retention)) {
		query["Retention"] = request.Retention
	}

	if !tea.BoolValue(util.IsUnset(request.SpeedLimiter)) {
		query["SpeedLimiter"] = request.SpeedLimiter
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyUniBackupPolicy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyUniBackupPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyUniBackupPolicy(request *ModifyUniBackupPolicyRequest) (_result *ModifyUniBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyUniBackupPolicyResponse{}
	_body, _err := client.ModifyUniBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVpcHoneyPotWithOptions(request *ModifyVpcHoneyPotRequest, runtime *util.RuntimeOptions) (_result *ModifyVpcHoneyPotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HoneyPotAction)) {
		query["HoneyPotAction"] = request.HoneyPotAction
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyVpcHoneyPot"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyVpcHoneyPotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVpcHoneyPot(request *ModifyVpcHoneyPotRequest) (_result *ModifyVpcHoneyPotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVpcHoneyPotResponse{}
	_body, _err := client.ModifyVpcHoneyPotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVulConfigWithOptions(request *ModifyVulConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyVulConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyVulConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyVulConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVulConfig(request *ModifyVulConfigRequest) (_result *ModifyVulConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVulConfigResponse{}
	_body, _err := client.ModifyVulConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVulTargetWithOptions(request *ModifyVulTargetRequest, runtime *util.RuntimeOptions) (_result *ModifyVulTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Target)) {
		query["Target"] = request.Target
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyVulTarget"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyVulTargetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVulTarget(request *ModifyVulTargetRequest) (_result *ModifyVulTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVulTargetResponse{}
	_body, _err := client.ModifyVulTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVulTargetConfigWithOptions(request *ModifyVulTargetConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyVulTargetConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyVulTargetConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyVulTargetConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVulTargetConfig(request *ModifyVulTargetConfigRequest) (_result *ModifyVulTargetConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVulTargetConfigResponse{}
	_body, _err := client.ModifyVulTargetConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVulWhitelistTargetWithOptions(request *ModifyVulWhitelistTargetRequest, runtime *util.RuntimeOptions) (_result *ModifyVulWhitelistTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		query["Reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.TargetInfo)) {
		query["TargetInfo"] = request.TargetInfo
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyVulWhitelistTarget"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyVulWhitelistTargetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVulWhitelistTarget(request *ModifyVulWhitelistTargetRequest) (_result *ModifyVulWhitelistTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVulWhitelistTargetResponse{}
	_body, _err := client.ModifyVulWhitelistTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyWebLockCreateConfigWithOptions(request *ModifyWebLockCreateConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyWebLockCreateConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DefenceMode)) {
		query["DefenceMode"] = request.DefenceMode
	}

	if !tea.BoolValue(util.IsUnset(request.Dir)) {
		query["Dir"] = request.Dir
	}

	if !tea.BoolValue(util.IsUnset(request.ExclusiveDir)) {
		query["ExclusiveDir"] = request.ExclusiveDir
	}

	if !tea.BoolValue(util.IsUnset(request.ExclusiveFile)) {
		query["ExclusiveFile"] = request.ExclusiveFile
	}

	if !tea.BoolValue(util.IsUnset(request.ExclusiveFileType)) {
		query["ExclusiveFileType"] = request.ExclusiveFileType
	}

	if !tea.BoolValue(util.IsUnset(request.InclusiveFile)) {
		query["InclusiveFile"] = request.InclusiveFile
	}

	if !tea.BoolValue(util.IsUnset(request.InclusiveFileType)) {
		query["InclusiveFileType"] = request.InclusiveFileType
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.LocalBackupDir)) {
		query["LocalBackupDir"] = request.LocalBackupDir
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyWebLockCreateConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyWebLockCreateConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyWebLockCreateConfig(request *ModifyWebLockCreateConfigRequest) (_result *ModifyWebLockCreateConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyWebLockCreateConfigResponse{}
	_body, _err := client.ModifyWebLockCreateConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
 *
 * @param request ModifyWebLockDeleteConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyWebLockDeleteConfigResponse
 */
func (client *Client) ModifyWebLockDeleteConfigWithOptions(request *ModifyWebLockDeleteConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyWebLockDeleteConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyWebLockDeleteConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyWebLockDeleteConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
 *
 * @param request ModifyWebLockDeleteConfigRequest
 * @return ModifyWebLockDeleteConfigResponse
 */
func (client *Client) ModifyWebLockDeleteConfig(request *ModifyWebLockDeleteConfigRequest) (_result *ModifyWebLockDeleteConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyWebLockDeleteConfigResponse{}
	_body, _err := client.ModifyWebLockDeleteConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyWebLockProcessStatusWithOptions(request *ModifyWebLockProcessStatusRequest, runtime *util.RuntimeOptions) (_result *ModifyWebLockProcessStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DealAll)) {
		query["DealAll"] = request.DealAll
	}

	if !tea.BoolValue(util.IsUnset(request.OperateInfo)) {
		query["OperateInfo"] = request.OperateInfo
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessPath)) {
		query["ProcessPath"] = request.ProcessPath
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyWebLockProcessStatus"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyWebLockProcessStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyWebLockProcessStatus(request *ModifyWebLockProcessStatusRequest) (_result *ModifyWebLockProcessStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyWebLockProcessStatusResponse{}
	_body, _err := client.ModifyWebLockProcessStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyWebLockStartWithOptions(request *ModifyWebLockStartRequest, runtime *util.RuntimeOptions) (_result *ModifyWebLockStartResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DefenceMode)) {
		query["DefenceMode"] = request.DefenceMode
	}

	if !tea.BoolValue(util.IsUnset(request.Dir)) {
		query["Dir"] = request.Dir
	}

	if !tea.BoolValue(util.IsUnset(request.ExclusiveDir)) {
		query["ExclusiveDir"] = request.ExclusiveDir
	}

	if !tea.BoolValue(util.IsUnset(request.ExclusiveFile)) {
		query["ExclusiveFile"] = request.ExclusiveFile
	}

	if !tea.BoolValue(util.IsUnset(request.ExclusiveFileType)) {
		query["ExclusiveFileType"] = request.ExclusiveFileType
	}

	if !tea.BoolValue(util.IsUnset(request.InclusiveFileType)) {
		query["InclusiveFileType"] = request.InclusiveFileType
	}

	if !tea.BoolValue(util.IsUnset(request.LocalBackupDir)) {
		query["LocalBackupDir"] = request.LocalBackupDir
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyWebLockStart"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyWebLockStartResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyWebLockStart(request *ModifyWebLockStartRequest) (_result *ModifyWebLockStartResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyWebLockStartResponse{}
	_body, _err := client.ModifyWebLockStartWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyWebLockStatusWithOptions(request *ModifyWebLockStatusRequest, runtime *util.RuntimeOptions) (_result *ModifyWebLockStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyWebLockStatus"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyWebLockStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyWebLockStatus(request *ModifyWebLockStatusRequest) (_result *ModifyWebLockStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyWebLockStatusResponse{}
	_body, _err := client.ModifyWebLockStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyWebLockUnbindWithOptions(request *ModifyWebLockUnbindRequest, runtime *util.RuntimeOptions) (_result *ModifyWebLockUnbindResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyWebLockUnbind"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyWebLockUnbindResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyWebLockUnbind(request *ModifyWebLockUnbindRequest) (_result *ModifyWebLockUnbindResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyWebLockUnbindResponse{}
	_body, _err := client.ModifyWebLockUnbindWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyWebLockUpdateConfigWithOptions(request *ModifyWebLockUpdateConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyWebLockUpdateConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DefenceMode)) {
		query["DefenceMode"] = request.DefenceMode
	}

	if !tea.BoolValue(util.IsUnset(request.Dir)) {
		query["Dir"] = request.Dir
	}

	if !tea.BoolValue(util.IsUnset(request.ExclusiveDir)) {
		query["ExclusiveDir"] = request.ExclusiveDir
	}

	if !tea.BoolValue(util.IsUnset(request.ExclusiveFile)) {
		query["ExclusiveFile"] = request.ExclusiveFile
	}

	if !tea.BoolValue(util.IsUnset(request.ExclusiveFileType)) {
		query["ExclusiveFileType"] = request.ExclusiveFileType
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.InclusiveFile)) {
		query["InclusiveFile"] = request.InclusiveFile
	}

	if !tea.BoolValue(util.IsUnset(request.InclusiveFileType)) {
		query["InclusiveFileType"] = request.InclusiveFileType
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.LocalBackupDir)) {
		query["LocalBackupDir"] = request.LocalBackupDir
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyWebLockUpdateConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyWebLockUpdateConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyWebLockUpdateConfig(request *ModifyWebLockUpdateConfigRequest) (_result *ModifyWebLockUpdateConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyWebLockUpdateConfigResponse{}
	_body, _err := client.ModifyWebLockUpdateConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyWebPathWithOptions(request *ModifyWebPathRequest, runtime *util.RuntimeOptions) (_result *ModifyWebPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Target)) {
		query["Target"] = request.Target
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyWebPath"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyWebPathResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyWebPath(request *ModifyWebPathRequest) (_result *ModifyWebPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyWebPathResponse{}
	_body, _err := client.ModifyWebPathWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenSensitiveFileScanWithOptions(request *OpenSensitiveFileScanRequest, runtime *util.RuntimeOptions) (_result *OpenSensitiveFileScanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SwitchOn)) {
		query["SwitchOn"] = request.SwitchOn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenSensitiveFileScan"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenSensitiveFileScanResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenSensitiveFileScan(request *OpenSensitiveFileScanRequest) (_result *OpenSensitiveFileScanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenSensitiveFileScanResponse{}
	_body, _err := client.OpenSensitiveFileScanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OperateAgentClientInstallWithOptions(request *OperateAgentClientInstallRequest, runtime *util.RuntimeOptions) (_result *OperateAgentClientInstallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperateAgentClientInstall"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperateAgentClientInstallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OperateAgentClientInstall(request *OperateAgentClientInstallRequest) (_result *OperateAgentClientInstallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperateAgentClientInstallResponse{}
	_body, _err := client.OperateAgentClientInstallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OperateCommonOverallConfigWithOptions(request *OperateCommonOverallConfigRequest, runtime *util.RuntimeOptions) (_result *OperateCommonOverallConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperateCommonOverallConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperateCommonOverallConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OperateCommonOverallConfig(request *OperateCommonOverallConfigRequest) (_result *OperateCommonOverallConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperateCommonOverallConfigResponse{}
	_body, _err := client.OperateCommonOverallConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OperateCommonTargetConfigWithOptions(request *OperateCommonTargetConfigRequest, runtime *util.RuntimeOptions) (_result *OperateCommonTargetConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FieldName)) {
		query["FieldName"] = request.FieldName
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValue)) {
		query["FieldValue"] = request.FieldValue
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.TargetOperations)) {
		query["TargetOperations"] = request.TargetOperations
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperateCommonTargetConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperateCommonTargetConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OperateCommonTargetConfig(request *OperateCommonTargetConfigRequest) (_result *OperateCommonTargetConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperateCommonTargetConfigResponse{}
	_body, _err := client.OperateCommonTargetConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OperateImageBaselineWhitelistWithOptions(request *OperateImageBaselineWhitelistRequest, runtime *util.RuntimeOptions) (_result *OperateImageBaselineWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaselineItemKeyList)) {
		query["BaselineItemKeyList"] = request.BaselineItemKeyList
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUuid)) {
		query["ImageUuid"] = request.ImageUuid
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Operation)) {
		query["Operation"] = request.Operation
	}

	if !tea.BoolValue(util.IsUnset(request.ScanRange)) {
		query["ScanRange"] = request.ScanRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperateImageBaselineWhitelist"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperateImageBaselineWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OperateImageBaselineWhitelist(request *OperateImageBaselineWhitelistRequest) (_result *OperateImageBaselineWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperateImageBaselineWhitelistResponse{}
	_body, _err := client.OperateImageBaselineWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OperateImageVulWithOptions(request *OperateImageVulRequest, runtime *util.RuntimeOptions) (_result *OperateImageVulResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Info)) {
		query["Info"] = request.Info
	}

	if !tea.BoolValue(util.IsUnset(request.OperateType)) {
		query["OperateType"] = request.OperateType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperateImageVul"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperateImageVulResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OperateImageVul(request *OperateImageVulRequest) (_result *OperateImageVulResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperateImageVulResponse{}
	_body, _err := client.OperateImageVulWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OperateSuspiciousOverallConfigWithOptions(request *OperateSuspiciousOverallConfigRequest, runtime *util.RuntimeOptions) (_result *OperateSuspiciousOverallConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.NoTargetAsOn)) {
		query["NoTargetAsOn"] = request.NoTargetAsOn
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperateSuspiciousOverallConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperateSuspiciousOverallConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OperateSuspiciousOverallConfig(request *OperateSuspiciousOverallConfigRequest) (_result *OperateSuspiciousOverallConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperateSuspiciousOverallConfigResponse{}
	_body, _err := client.OperateSuspiciousOverallConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OperateSuspiciousTargetConfigWithOptions(request *OperateSuspiciousTargetConfigRequest, runtime *util.RuntimeOptions) (_result *OperateSuspiciousTargetConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.TargetOperations)) {
		query["TargetOperations"] = request.TargetOperations
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["TargetType"] = request.TargetType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperateSuspiciousTargetConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperateSuspiciousTargetConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OperateSuspiciousTargetConfig(request *OperateSuspiciousTargetConfigRequest) (_result *OperateSuspiciousTargetConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperateSuspiciousTargetConfigResponse{}
	_body, _err := client.OperateSuspiciousTargetConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OperateVirusEventsWithOptions(request *OperateVirusEventsRequest, runtime *util.RuntimeOptions) (_result *OperateVirusEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperationAll)) {
		query["OperationAll"] = request.OperationAll
	}

	if !tea.BoolValue(util.IsUnset(request.OperationCode)) {
		query["OperationCode"] = request.OperationCode
	}

	if !tea.BoolValue(util.IsUnset(request.OperationRange)) {
		query["OperationRange"] = request.OperationRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperateVirusEvents"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperateVirusEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OperateVirusEvents(request *OperateVirusEventsRequest) (_result *OperateVirusEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperateVirusEventsResponse{}
	_body, _err := client.OperateVirusEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OperateVulsWithOptions(request *OperateVulsRequest, runtime *util.RuntimeOptions) (_result *OperateVulsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperateType)) {
		query["OperateType"] = request.OperateType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	if !tea.BoolValue(util.IsUnset(request.VulNames)) {
		query["VulNames"] = request.VulNames
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperateVuls"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperateVulsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OperateVuls(request *OperateVulsRequest) (_result *OperateVulsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperateVulsResponse{}
	_body, _err := client.OperateVulsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OperateWebLockFileEventsWithOptions(request *OperateWebLockFileEventsRequest, runtime *util.RuntimeOptions) (_result *OperateWebLockFileEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DealAll)) {
		query["DealAll"] = request.DealAll
	}

	if !tea.BoolValue(util.IsUnset(request.EventIds)) {
		query["EventIds"] = request.EventIds
	}

	if !tea.BoolValue(util.IsUnset(request.OperationCode)) {
		query["OperationCode"] = request.OperationCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperateWebLockFileEvents"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperateWebLockFileEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OperateWebLockFileEvents(request *OperateWebLockFileEventsRequest) (_result *OperateWebLockFileEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperateWebLockFileEventsResponse{}
	_body, _err := client.OperateWebLockFileEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OperationCancelIgnoreSuspEventWithOptions(request *OperationCancelIgnoreSuspEventRequest, runtime *util.RuntimeOptions) (_result *OperationCancelIgnoreSuspEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityEventIds)) {
		query["SecurityEventIds"] = request.SecurityEventIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperationCancelIgnoreSuspEvent"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperationCancelIgnoreSuspEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OperationCancelIgnoreSuspEvent(request *OperationCancelIgnoreSuspEventRequest) (_result *OperationCancelIgnoreSuspEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperationCancelIgnoreSuspEventResponse{}
	_body, _err := client.OperationCancelIgnoreSuspEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OperationSuspEventsWithOptions(request *OperationSuspEventsRequest, runtime *util.RuntimeOptions) (_result *OperationSuspEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.Operation)) {
		query["Operation"] = request.Operation
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.SubOperation)) {
		query["SubOperation"] = request.SubOperation
	}

	if !tea.BoolValue(util.IsUnset(request.SuspiciousEventIds)) {
		query["SuspiciousEventIds"] = request.SuspiciousEventIds
	}

	if !tea.BoolValue(util.IsUnset(request.WarnType)) {
		query["WarnType"] = request.WarnType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperationSuspEvents"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperationSuspEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OperationSuspEvents(request *OperationSuspEventsRequest) (_result *OperationSuspEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperationSuspEventsResponse{}
	_body, _err := client.OperationSuspEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PageImageRegistryWithOptions(request *PageImageRegistryRequest, runtime *util.RuntimeOptions) (_result *PageImageRegistryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		body["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryNameLike)) {
		body["RegistryNameLike"] = request.RegistryNameLike
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryTypeInList)) {
		body["RegistryTypeInList"] = request.RegistryTypeInList
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryTypeNotInList)) {
		body["RegistryTypeNotInList"] = request.RegistryTypeNotInList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PageImageRegistry"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PageImageRegistryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PageImageRegistry(request *PageImageRegistryRequest) (_result *PageImageRegistryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PageImageRegistryResponse{}
	_body, _err := client.PageImageRegistryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PauseClientWithOptions(request *PauseClientRequest, runtime *util.RuntimeOptions) (_result *PauseClientResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["Value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PauseClient"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PauseClientResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PauseClient(request *PauseClientRequest) (_result *PauseClientResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PauseClientResponse{}
	_body, _err := client.PauseClientWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
 *
 * @param request PublicCreateImageScanTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublicCreateImageScanTaskResponse
 */
func (client *Client) PublicCreateImageScanTaskWithOptions(request *PublicCreateImageScanTaskRequest, runtime *util.RuntimeOptions) (_result *PublicCreateImageScanTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Digests)) {
		query["Digests"] = request.Digests
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionIds)) {
		query["RegionIds"] = request.RegionIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryTypes)) {
		query["RegistryTypes"] = request.RegistryTypes
	}

	if !tea.BoolValue(util.IsUnset(request.RepoIds)) {
		query["RepoIds"] = request.RepoIds
	}

	if !tea.BoolValue(util.IsUnset(request.RepoNames)) {
		query["RepoNames"] = request.RepoNames
	}

	if !tea.BoolValue(util.IsUnset(request.RepoNamespaces)) {
		query["RepoNamespaces"] = request.RepoNamespaces
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PublicCreateImageScanTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PublicCreateImageScanTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
 *
 * @param request PublicCreateImageScanTaskRequest
 * @return PublicCreateImageScanTaskResponse
 */
func (client *Client) PublicCreateImageScanTask(request *PublicCreateImageScanTaskRequest) (_result *PublicCreateImageScanTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PublicCreateImageScanTaskResponse{}
	_body, _err := client.PublicCreateImageScanTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call the PublicPreCheckImageScanTask operation to estimate the quota for container image scan to be consumed by the task. This ensures that you know the quota to be consumed before you perform the task. If the remaining quota for container image scan is less than the quota to be consumed by the task, you must purchase a sufficient quota. This prevents the task from being stopped due to an insufficient quota.
 * If you do not specify the optional parameters when you call this operation, the total number of protected images and the quota for container image scan to be consumed by scanning all the protected images are queried. If you specify the optional parameters, the number of images that meet the specified conditions and the quota for container image scan to be consumed by scanning the images are queried.
 *
 * @param request PublicPreCheckImageScanTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublicPreCheckImageScanTaskResponse
 */
func (client *Client) PublicPreCheckImageScanTaskWithOptions(request *PublicPreCheckImageScanTaskRequest, runtime *util.RuntimeOptions) (_result *PublicPreCheckImageScanTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Digests)) {
		query["Digests"] = request.Digests
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionIds)) {
		query["RegionIds"] = request.RegionIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryTypes)) {
		query["RegistryTypes"] = request.RegistryTypes
	}

	if !tea.BoolValue(util.IsUnset(request.RepoIds)) {
		query["RepoIds"] = request.RepoIds
	}

	if !tea.BoolValue(util.IsUnset(request.RepoNames)) {
		query["RepoNames"] = request.RepoNames
	}

	if !tea.BoolValue(util.IsUnset(request.RepoNamespaces)) {
		query["RepoNamespaces"] = request.RepoNamespaces
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PublicPreCheckImageScanTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PublicPreCheckImageScanTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call the PublicPreCheckImageScanTask operation to estimate the quota for container image scan to be consumed by the task. This ensures that you know the quota to be consumed before you perform the task. If the remaining quota for container image scan is less than the quota to be consumed by the task, you must purchase a sufficient quota. This prevents the task from being stopped due to an insufficient quota.
 * If you do not specify the optional parameters when you call this operation, the total number of protected images and the quota for container image scan to be consumed by scanning all the protected images are queried. If you specify the optional parameters, the number of images that meet the specified conditions and the quota for container image scan to be consumed by scanning the images are queried.
 *
 * @param request PublicPreCheckImageScanTaskRequest
 * @return PublicPreCheckImageScanTaskResponse
 */
func (client *Client) PublicPreCheckImageScanTask(request *PublicPreCheckImageScanTaskRequest) (_result *PublicPreCheckImageScanTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PublicPreCheckImageScanTaskResponse{}
	_body, _err := client.PublicPreCheckImageScanTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PublicSyncAndCreateImageScanTaskWithOptions(request *PublicSyncAndCreateImageScanTaskRequest, runtime *util.RuntimeOptions) (_result *PublicSyncAndCreateImageScanTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Images)) {
		query["Images"] = request.Images
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PublicSyncAndCreateImageScanTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PublicSyncAndCreateImageScanTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PublicSyncAndCreateImageScanTask(request *PublicSyncAndCreateImageScanTaskRequest) (_result *PublicSyncAndCreateImageScanTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PublicSyncAndCreateImageScanTaskResponse{}
	_body, _err := client.PublicSyncAndCreateImageScanTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDiscoverDatabaseWithOptions(request *QueryDiscoverDatabaseRequest, runtime *util.RuntimeOptions) (_result *QueryDiscoverDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateMark)) {
		query["CreateMark"] = request.CreateMark
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDiscoverDatabase"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDiscoverDatabaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDiscoverDatabase(request *QueryDiscoverDatabaseRequest) (_result *QueryDiscoverDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDiscoverDatabaseResponse{}
	_body, _err := client.QueryDiscoverDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
 * ### Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request QueryGroupIdByGroupNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryGroupIdByGroupNameResponse
 */
func (client *Client) QueryGroupIdByGroupNameWithOptions(request *QueryGroupIdByGroupNameRequest, runtime *util.RuntimeOptions) (_result *QueryGroupIdByGroupNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryGroupIdByGroupName"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryGroupIdByGroupNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
 * ### Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request QueryGroupIdByGroupNameRequest
 * @return QueryGroupIdByGroupNameResponse
 */
func (client *Client) QueryGroupIdByGroupName(request *QueryGroupIdByGroupNameRequest) (_result *QueryGroupIdByGroupNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryGroupIdByGroupNameResponse{}
	_body, _err := client.QueryGroupIdByGroupNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryGroupedSecurityEventMarkMissListWithOptions(request *QueryGroupedSecurityEventMarkMissListRequest, runtime *util.RuntimeOptions) (_result *QueryGroupedSecurityEventMarkMissListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DisposalWay)) {
		query["DisposalWay"] = request.DisposalWay
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		body["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		body["EventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.From)) {
		body["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		body["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		body["Remark"] = request.Remark
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryGroupedSecurityEventMarkMissList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryGroupedSecurityEventMarkMissListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryGroupedSecurityEventMarkMissList(request *QueryGroupedSecurityEventMarkMissListRequest) (_result *QueryGroupedSecurityEventMarkMissListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryGroupedSecurityEventMarkMissListResponse{}
	_body, _err := client.QueryGroupedSecurityEventMarkMissListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryJenkinsImageRegistryPersistenceDayWithOptions(request *QueryJenkinsImageRegistryPersistenceDayRequest, runtime *util.RuntimeOptions) (_result *QueryJenkinsImageRegistryPersistenceDayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryJenkinsImageRegistryPersistenceDay"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryJenkinsImageRegistryPersistenceDayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryJenkinsImageRegistryPersistenceDay(request *QueryJenkinsImageRegistryPersistenceDayRequest) (_result *QueryJenkinsImageRegistryPersistenceDayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryJenkinsImageRegistryPersistenceDayResponse{}
	_body, _err := client.QueryJenkinsImageRegistryPersistenceDayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryPreCheckDatabaseWithOptions(request *QueryPreCheckDatabaseRequest, runtime *util.RuntimeOptions) (_result *QueryPreCheckDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceUuid)) {
		query["InstanceUuid"] = request.InstanceUuid
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.UniRegionId)) {
		query["UniRegionId"] = request.UniRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPreCheckDatabase"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPreCheckDatabaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryPreCheckDatabase(request *QueryPreCheckDatabaseRequest) (_result *QueryPreCheckDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPreCheckDatabaseResponse{}
	_body, _err := client.QueryPreCheckDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RebootMachineWithOptions(request *RebootMachineRequest, runtime *util.RuntimeOptions) (_result *RebootMachineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RebootMachine"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RebootMachineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RebootMachine(request *RebootMachineRequest) (_result *RebootMachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootMachineResponse{}
	_body, _err := client.RebootMachineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RefreshAssetsWithOptions(request *RefreshAssetsRequest, runtime *util.RuntimeOptions) (_result *RefreshAssetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssetType)) {
		query["AssetType"] = request.AssetType
	}

	if !tea.BoolValue(util.IsUnset(request.CloudAssetSubType)) {
		query["CloudAssetSubType"] = request.CloudAssetSubType
	}

	if !tea.BoolValue(util.IsUnset(request.CloudAssetType)) {
		query["CloudAssetType"] = request.CloudAssetType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RefreshAssets"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RefreshAssetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RefreshAssets(request *RefreshAssetsRequest) (_result *RefreshAssetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RefreshAssetsResponse{}
	_body, _err := client.RefreshAssetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RefreshContainerAssetsWithOptions(request *RefreshContainerAssetsRequest, runtime *util.RuntimeOptions) (_result *RefreshContainerAssetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssetType)) {
		query["AssetType"] = request.AssetType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RefreshContainerAssets"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RefreshContainerAssetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RefreshContainerAssets(request *RefreshContainerAssetsRequest) (_result *RefreshContainerAssetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RefreshContainerAssetsResponse{}
	_body, _err := client.RefreshContainerAssetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveCheckInstanceResultWhiteListWithOptions(request *RemoveCheckInstanceResultWhiteListRequest, runtime *util.RuntimeOptions) (_result *RemoveCheckInstanceResultWhiteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckId)) {
		query["CheckId"] = request.CheckId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveCheckInstanceResultWhiteList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveCheckInstanceResultWhiteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveCheckInstanceResultWhiteList(request *RemoveCheckInstanceResultWhiteListRequest) (_result *RemoveCheckInstanceResultWhiteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveCheckInstanceResultWhiteListResponse{}
	_body, _err := client.RemoveCheckInstanceResultWhiteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveCheckResultWhiteListWithOptions(request *RemoveCheckResultWhiteListRequest, runtime *util.RuntimeOptions) (_result *RemoveCheckResultWhiteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckGroupId)) {
		query["CheckGroupId"] = request.CheckGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.CheckIds)) {
		query["CheckIds"] = request.CheckIds
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveCheckResultWhiteList"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveCheckResultWhiteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveCheckResultWhiteList(request *RemoveCheckResultWhiteListRequest) (_result *RemoveCheckResultWhiteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveCheckResultWhiteListResponse{}
	_body, _err := client.RemoveCheckResultWhiteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RollbackSuspEventQuaraFileWithOptions(request *RollbackSuspEventQuaraFileRequest, runtime *util.RuntimeOptions) (_result *RollbackSuspEventQuaraFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.QuaraFileId)) {
		query["QuaraFileId"] = request.QuaraFileId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RollbackSuspEventQuaraFile"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RollbackSuspEventQuaraFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RollbackSuspEventQuaraFile(request *RollbackSuspEventQuaraFileRequest) (_result *RollbackSuspEventQuaraFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RollbackSuspEventQuaraFileResponse{}
	_body, _err := client.RollbackSuspEventQuaraFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SasInstallCodeWithOptions(request *SasInstallCodeRequest, runtime *util.RuntimeOptions) (_result *SasInstallCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SasInstallCode"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SasInstallCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SasInstallCode(request *SasInstallCodeRequest) (_result *SasInstallCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SasInstallCodeResponse{}
	_body, _err := client.SasInstallCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveImageBaselineStrategyWithOptions(request *SaveImageBaselineStrategyRequest, runtime *util.RuntimeOptions) (_result *SaveImageBaselineStrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaselineItemList)) {
		query["BaselineItemList"] = request.BaselineItemList
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyId)) {
		query["StrategyId"] = request.StrategyId
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyName)) {
		query["StrategyName"] = request.StrategyName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveImageBaselineStrategy"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveImageBaselineStrategyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveImageBaselineStrategy(request *SaveImageBaselineStrategyRequest) (_result *SaveImageBaselineStrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveImageBaselineStrategyResponse{}
	_body, _err := client.SaveImageBaselineStrategyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveSuspEventUserSettingWithOptions(request *SaveSuspEventUserSettingRequest, runtime *util.RuntimeOptions) (_result *SaveSuspEventUserSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.LevelsOn)) {
		query["LevelsOn"] = request.LevelsOn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveSuspEventUserSetting"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveSuspEventUserSettingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveSuspEventUserSetting(request *SaveSuspEventUserSettingRequest) (_result *SaveSuspEventUserSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveSuspEventUserSettingResponse{}
	_body, _err := client.SaveSuspEventUserSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetClusterInterceptionConfigWithOptions(request *SetClusterInterceptionConfigRequest, runtime *util.RuntimeOptions) (_result *SetClusterInterceptionConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterIds)) {
		query["ClusterIds"] = request.ClusterIds
	}

	if !tea.BoolValue(util.IsUnset(request.SwitchOn)) {
		query["SwitchOn"] = request.SwitchOn
	}

	if !tea.BoolValue(util.IsUnset(request.SwitchType)) {
		query["SwitchType"] = request.SwitchType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetClusterInterceptionConfig"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetClusterInterceptionConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetClusterInterceptionConfig(request *SetClusterInterceptionConfigRequest) (_result *SetClusterInterceptionConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetClusterInterceptionConfigResponse{}
	_body, _err := client.SetClusterInterceptionConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetRegistryScanDayNumWithOptions(request *SetRegistryScanDayNumRequest, runtime *util.RuntimeOptions) (_result *SetRegistryScanDayNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ScanDayNum)) {
		query["ScanDayNum"] = request.ScanDayNum
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetRegistryScanDayNum"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetRegistryScanDayNumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetRegistryScanDayNum(request *SetRegistryScanDayNumRequest) (_result *SetRegistryScanDayNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetRegistryScanDayNumResponse{}
	_body, _err := client.SetRegistryScanDayNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request StartBaselineSecurityCheckRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartBaselineSecurityCheckResponse
 */
// Deprecated
func (client *Client) StartBaselineSecurityCheckWithOptions(request *StartBaselineSecurityCheckRequest, runtime *util.RuntimeOptions) (_result *StartBaselineSecurityCheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ItemIds)) {
		query["ItemIds"] = request.ItemIds
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartBaselineSecurityCheck"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartBaselineSecurityCheckResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * @deprecated
 *
 * @param request StartBaselineSecurityCheckRequest
 * @return StartBaselineSecurityCheckResponse
 */
// Deprecated
func (client *Client) StartBaselineSecurityCheck(request *StartBaselineSecurityCheckRequest) (_result *StartBaselineSecurityCheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartBaselineSecurityCheckResponse{}
	_body, _err := client.StartBaselineSecurityCheckWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartDiscoverDatabaseTaskWithOptions(runtime *util.RuntimeOptions) (_result *StartDiscoverDatabaseTaskResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("StartDiscoverDatabaseTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartDiscoverDatabaseTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartDiscoverDatabaseTask() (_result *StartDiscoverDatabaseTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartDiscoverDatabaseTaskResponse{}
	_body, _err := client.StartDiscoverDatabaseTaskWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartPreCheckDatabaseWithOptions(request *StartPreCheckDatabaseRequest, runtime *util.RuntimeOptions) (_result *StartPreCheckDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatabaseType)) {
		query["DatabaseType"] = request.DatabaseType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceUuid)) {
		query["InstanceUuid"] = request.InstanceUuid
	}

	if !tea.BoolValue(util.IsUnset(request.UniRegionId)) {
		query["UniRegionId"] = request.UniRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartPreCheckDatabase"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartPreCheckDatabaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartPreCheckDatabase(request *StartPreCheckDatabaseRequest) (_result *StartPreCheckDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartPreCheckDatabaseResponse{}
	_body, _err := client.StartPreCheckDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartVirusScanTaskWithOptions(request *StartVirusScanTaskRequest, runtime *util.RuntimeOptions) (_result *StartVirusScanTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TargetInfo)) {
		query["TargetInfo"] = request.TargetInfo
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartVirusScanTask"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartVirusScanTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartVirusScanTask(request *StartVirusScanTaskRequest) (_result *StartVirusScanTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartVirusScanTaskResponse{}
	_body, _err := client.StartVirusScanTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitCheckWithOptions(runtime *util.RuntimeOptions) (_result *SubmitCheckResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("SubmitCheck"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitCheckResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitCheck() (_result *SubmitCheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitCheckResponse{}
	_body, _err := client.SubmitCheckWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindAegisWithOptions(request *UnbindAegisRequest, runtime *util.RuntimeOptions) (_result *UnbindAegisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindAegis"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindAegisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindAegis(request *UnbindAegisRequest) (_result *UnbindAegisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindAegisResponse{}
	_body, _err := client.UnbindAegisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UninstallBackupClientWithOptions(request *UninstallBackupClientRequest, runtime *util.RuntimeOptions) (_result *UninstallBackupClientResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PolicyVersion)) {
		query["PolicyVersion"] = request.PolicyVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	if !tea.BoolValue(util.IsUnset(request.UuidList)) {
		query["UuidList"] = request.UuidList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UninstallBackupClient"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UninstallBackupClientResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UninstallBackupClient(request *UninstallBackupClientRequest) (_result *UninstallBackupClientResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UninstallBackupClientResponse{}
	_body, _err := client.UninstallBackupClientWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UninstallUniBackupAgentWithOptions(request *UninstallUniBackupAgentRequest, runtime *util.RuntimeOptions) (_result *UninstallUniBackupAgentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UninstallUniBackupAgent"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UninstallUniBackupAgentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UninstallUniBackupAgent(request *UninstallUniBackupAgentRequest) (_result *UninstallUniBackupAgentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UninstallUniBackupAgentResponse{}
	_body, _err := client.UninstallUniBackupAgentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateHoneypotWithOptions(request *UpdateHoneypotRequest, runtime *util.RuntimeOptions) (_result *UpdateHoneypotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HoneypotId)) {
		query["HoneypotId"] = request.HoneypotId
	}

	if !tea.BoolValue(util.IsUnset(request.HoneypotName)) {
		query["HoneypotName"] = request.HoneypotName
	}

	if !tea.BoolValue(util.IsUnset(request.Meta)) {
		query["Meta"] = request.Meta
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateHoneypot"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateHoneypotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateHoneypot(request *UpdateHoneypotRequest) (_result *UpdateHoneypotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateHoneypotResponse{}
	_body, _err := client.UpdateHoneypotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateHoneypotNodeWithOptions(request *UpdateHoneypotNodeRequest, runtime *util.RuntimeOptions) (_result *UpdateHoneypotNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvailableProbeNum)) {
		query["AvailableProbeNum"] = request.AvailableProbeNum
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeName)) {
		query["NodeName"] = request.NodeName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupProbeIpList)) {
		query["SecurityGroupProbeIpList"] = request.SecurityGroupProbeIpList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateHoneypotNode"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateHoneypotNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateHoneypotNode(request *UpdateHoneypotNodeRequest) (_result *UpdateHoneypotNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateHoneypotNodeResponse{}
	_body, _err := client.UpdateHoneypotNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateHoneypotPresetWithOptions(request *UpdateHoneypotPresetRequest, runtime *util.RuntimeOptions) (_result *UpdateHoneypotPresetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HoneypotImageName)) {
		query["HoneypotImageName"] = request.HoneypotImageName
	}

	if !tea.BoolValue(util.IsUnset(request.HoneypotPresetId)) {
		query["HoneypotPresetId"] = request.HoneypotPresetId
	}

	if !tea.BoolValue(util.IsUnset(request.Meta)) {
		query["Meta"] = request.Meta
	}

	if !tea.BoolValue(util.IsUnset(request.PresetName)) {
		query["PresetName"] = request.PresetName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateHoneypotPreset"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateHoneypotPresetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateHoneypotPreset(request *UpdateHoneypotPresetRequest) (_result *UpdateHoneypotPresetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateHoneypotPresetResponse{}
	_body, _err := client.UpdateHoneypotPresetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateHoneypotProbeWithOptions(request *UpdateHoneypotProbeRequest, runtime *util.RuntimeOptions) (_result *UpdateHoneypotProbeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Arp)) {
		query["Arp"] = request.Arp
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		query["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.Ping)) {
		query["Ping"] = request.Ping
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeId)) {
		query["ProbeId"] = request.ProbeId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceIpList)) {
		query["ServiceIpList"] = request.ServiceIpList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateHoneypotProbe"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateHoneypotProbeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateHoneypotProbe(request *UpdateHoneypotProbeRequest) (_result *UpdateHoneypotProbeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateHoneypotProbeResponse{}
	_body, _err := client.UpdateHoneypotProbeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateJenkinsImageRegistryNameWithOptions(request *UpdateJenkinsImageRegistryNameRequest, runtime *util.RuntimeOptions) (_result *UpdateJenkinsImageRegistryNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegistryId)) {
		body["RegistryId"] = request.RegistryId
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryName)) {
		body["RegistryName"] = request.RegistryName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateJenkinsImageRegistryName"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateJenkinsImageRegistryNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateJenkinsImageRegistryName(request *UpdateJenkinsImageRegistryNameRequest) (_result *UpdateJenkinsImageRegistryNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateJenkinsImageRegistryNameResponse{}
	_body, _err := client.UpdateJenkinsImageRegistryNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateJenkinsImageRegistryPersistenceDayWithOptions(request *UpdateJenkinsImageRegistryPersistenceDayRequest, runtime *util.RuntimeOptions) (_result *UpdateJenkinsImageRegistryPersistenceDayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PersistenceDay)) {
		body["PersistenceDay"] = request.PersistenceDay
	}

	if !tea.BoolValue(util.IsUnset(request.RegistryId)) {
		body["RegistryId"] = request.RegistryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateJenkinsImageRegistryPersistenceDay"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateJenkinsImageRegistryPersistenceDayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateJenkinsImageRegistryPersistenceDay(request *UpdateJenkinsImageRegistryPersistenceDayRequest) (_result *UpdateJenkinsImageRegistryPersistenceDayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateJenkinsImageRegistryPersistenceDayResponse{}
	_body, _err := client.UpdateJenkinsImageRegistryPersistenceDayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpgradeBackupPolicyVersionWithOptions(request *UpgradeBackupPolicyVersionRequest, runtime *util.RuntimeOptions) (_result *UpgradeBackupPolicyVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeBackupPolicyVersion"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpgradeBackupPolicyVersionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpgradeBackupPolicyVersion(request *UpgradeBackupPolicyVersionRequest) (_result *UpgradeBackupPolicyVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeBackupPolicyVersionResponse{}
	_body, _err := client.UpgradeBackupPolicyVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ValidateHcWarningsWithOptions(request *ValidateHcWarningsRequest, runtime *util.RuntimeOptions) (_result *ValidateHcWarningsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RiskIds)) {
		query["RiskIds"] = request.RiskIds
	}

	if !tea.BoolValue(util.IsUnset(request.SourceIp)) {
		query["SourceIp"] = request.SourceIp
	}

	if !tea.BoolValue(util.IsUnset(request.Uuids)) {
		query["Uuids"] = request.Uuids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ValidateHcWarnings"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ValidateHcWarningsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ValidateHcWarnings(request *ValidateHcWarningsRequest) (_result *ValidateHcWarningsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ValidateHcWarningsResponse{}
	_body, _err := client.ValidateHcWarningsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) VerifyCheckInstanceResultWithOptions(request *VerifyCheckInstanceResultRequest, runtime *util.RuntimeOptions) (_result *VerifyCheckInstanceResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckId)) {
		query["CheckId"] = request.CheckId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("VerifyCheckInstanceResult"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &VerifyCheckInstanceResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) VerifyCheckInstanceResult(request *VerifyCheckInstanceResultRequest) (_result *VerifyCheckInstanceResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &VerifyCheckInstanceResultResponse{}
	_body, _err := client.VerifyCheckInstanceResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) VerifyCheckResultWithOptions(request *VerifyCheckResultRequest, runtime *util.RuntimeOptions) (_result *VerifyCheckResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckIds)) {
		query["CheckIds"] = request.CheckIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("VerifyCheckResult"),
		Version:     tea.String("2018-12-03"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &VerifyCheckResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) VerifyCheckResult(request *VerifyCheckResultRequest) (_result *VerifyCheckResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &VerifyCheckResultResponse{}
	_body, _err := client.VerifyCheckResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
