// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"github.com/alibabacloud-go/tea/dara"
)

type iGetAttackPathEventDetailResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetAttackPathEvent(v *GetAttackPathEventDetailResponseBodyAttackPathEvent) *GetAttackPathEventDetailResponseBody
	GetAttackPathEvent() *GetAttackPathEventDetailResponseBodyAttackPathEvent
	SetRequestId(v string) *GetAttackPathEventDetailResponseBody
	GetRequestId() *string
}

type GetAttackPathEventDetailResponseBody struct {
	// Details of the attack path event.
	AttackPathEvent *GetAttackPathEventDetailResponseBodyAttackPathEvent `json:"AttackPathEvent,omitempty" xml:"AttackPathEvent,omitempty" type:"Struct"`
	// The ID of this request, which is a unique identifier generated by Alibaba Cloud for the request, and can be used for troubleshooting and problem localization.
	//
	// example:
	//
	// 7BC55C8F-226E-5AF5-9A2C-2EC43864****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAttackPathEventDetailResponseBody) String() string {
	return dara.Prettify(s)
}

func (s GetAttackPathEventDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetAttackPathEventDetailResponseBody) GetAttackPathEvent() *GetAttackPathEventDetailResponseBodyAttackPathEvent {
	return s.AttackPathEvent
}

func (s *GetAttackPathEventDetailResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *GetAttackPathEventDetailResponseBody) SetAttackPathEvent(v *GetAttackPathEventDetailResponseBodyAttackPathEvent) *GetAttackPathEventDetailResponseBody {
	s.AttackPathEvent = v
	return s
}

func (s *GetAttackPathEventDetailResponseBody) SetRequestId(v string) *GetAttackPathEventDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBody) Validate() error {
	if s.AttackPathEvent != nil {
		if err := s.AttackPathEvent.Validate(); err != nil {
			return err
		}
	}
	return nil
}

type GetAttackPathEventDetailResponseBodyAttackPathEvent struct {
	// Destination asset.
	DstAsset *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset `json:"DstAsset,omitempty" xml:"DstAsset,omitempty" type:"Struct"`
	// Timestamp of the first occurrence, in milliseconds.
	//
	// example:
	//
	// 1735956726000
	FirstTime *int64 `json:"FirstTime,omitempty" xml:"FirstTime,omitempty"`
	// Timestamp of the latest discovery, in milliseconds.
	//
	// example:
	//
	// 1741832168000
	LastTime *int64 `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	// Detailed description of the path.
	//
	// example:
	//
	// The system detects that the role that trusts another Alibaba Cloud account has administrator permissions. This can cause the system to be fully controlled. We recommend that you delete the trust relationship and review the permissions of the role.
	PathDetailDesc *string `json:"PathDetailDesc,omitempty" xml:"PathDetailDesc,omitempty"`
	// List of path event edges.
	PathEventEdgeList []*GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList `json:"PathEventEdgeList,omitempty" xml:"PathEventEdgeList,omitempty" type:"Repeated"`
	// List of path nodes.
	PathEventNodeList []*GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList `json:"PathEventNodeList,omitempty" xml:"PathEventNodeList,omitempty" type:"Repeated"`
	// Name of the path.
	//
	// example:
	//
	// ecs_get_credential_by_create_login_profile
	PathName *string `json:"PathName,omitempty" xml:"PathName,omitempty"`
	// Description of the path name.
	//
	// example:
	//
	// ECS Instance Can Obtain Long-term Access Credential by Enabling Console Logon for RAM User
	PathNameDesc *string `json:"PathNameDesc,omitempty" xml:"PathNameDesc,omitempty"`
	// Type of the path.
	//
	// example:
	//
	// role_escalation
	PathType *string `json:"PathType,omitempty" xml:"PathType,omitempty"`
	// Description of the path type.
	//
	// example:
	//
	// Privilege Escalation by Role
	PathTypeDesc *string `json:"PathTypeDesc,omitempty" xml:"PathTypeDesc,omitempty"`
	// Risk level.
	//
	// example:
	//
	// suspicious
	RiskLevel *string `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	// Source asset.
	SrcAsset *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset `json:"SrcAsset,omitempty" xml:"SrcAsset,omitempty" type:"Struct"`
}

func (s GetAttackPathEventDetailResponseBodyAttackPathEvent) String() string {
	return dara.Prettify(s)
}

func (s GetAttackPathEventDetailResponseBodyAttackPathEvent) GoString() string {
	return s.String()
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) GetDstAsset() *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset {
	return s.DstAsset
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) GetFirstTime() *int64 {
	return s.FirstTime
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) GetLastTime() *int64 {
	return s.LastTime
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) GetPathDetailDesc() *string {
	return s.PathDetailDesc
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) GetPathEventEdgeList() []*GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList {
	return s.PathEventEdgeList
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) GetPathEventNodeList() []*GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList {
	return s.PathEventNodeList
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) GetPathName() *string {
	return s.PathName
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) GetPathNameDesc() *string {
	return s.PathNameDesc
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) GetPathType() *string {
	return s.PathType
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) GetPathTypeDesc() *string {
	return s.PathTypeDesc
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) GetRiskLevel() *string {
	return s.RiskLevel
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) GetSrcAsset() *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset {
	return s.SrcAsset
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) SetDstAsset(v *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) *GetAttackPathEventDetailResponseBodyAttackPathEvent {
	s.DstAsset = v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) SetFirstTime(v int64) *GetAttackPathEventDetailResponseBodyAttackPathEvent {
	s.FirstTime = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) SetLastTime(v int64) *GetAttackPathEventDetailResponseBodyAttackPathEvent {
	s.LastTime = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) SetPathDetailDesc(v string) *GetAttackPathEventDetailResponseBodyAttackPathEvent {
	s.PathDetailDesc = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) SetPathEventEdgeList(v []*GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) *GetAttackPathEventDetailResponseBodyAttackPathEvent {
	s.PathEventEdgeList = v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) SetPathEventNodeList(v []*GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) *GetAttackPathEventDetailResponseBodyAttackPathEvent {
	s.PathEventNodeList = v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) SetPathName(v string) *GetAttackPathEventDetailResponseBodyAttackPathEvent {
	s.PathName = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) SetPathNameDesc(v string) *GetAttackPathEventDetailResponseBodyAttackPathEvent {
	s.PathNameDesc = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) SetPathType(v string) *GetAttackPathEventDetailResponseBodyAttackPathEvent {
	s.PathType = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) SetPathTypeDesc(v string) *GetAttackPathEventDetailResponseBodyAttackPathEvent {
	s.PathTypeDesc = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) SetRiskLevel(v string) *GetAttackPathEventDetailResponseBodyAttackPathEvent {
	s.RiskLevel = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) SetSrcAsset(v *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) *GetAttackPathEventDetailResponseBodyAttackPathEvent {
	s.SrcAsset = v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEvent) Validate() error {
	if s.DstAsset != nil {
		if err := s.DstAsset.Validate(); err != nil {
			return err
		}
	}
	if s.PathEventEdgeList != nil {
		for _, item := range s.PathEventEdgeList {
			if item != nil {
				if err := item.Validate(); err != nil {
					return err
				}
			}
		}
	}
	if s.PathEventNodeList != nil {
		for _, item := range s.PathEventNodeList {
			if item != nil {
				if err := item.Validate(); err != nil {
					return err
				}
			}
		}
	}
	if s.SrcAsset != nil {
		if err := s.SrcAsset.Validate(); err != nil {
			return err
		}
	}
	return nil
}

type GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset struct {
	// Subtype of the cloud product asset.
	//
	// example:
	//
	// 2
	AssetSubType *int32 `json:"AssetSubType,omitempty" xml:"AssetSubType,omitempty"`
	// Type of the cloud product asset.
	//
	// example:
	//
	// 3
	AssetType *int32 `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
	// ID of the cloud product asset instance.
	//
	// example:
	//
	// i-bp18ifsr1tu1dx39****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Instance name.
	//
	// example:
	//
	// test
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// ID of the region where the cloud product asset instance is located.
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Sensitive asset flag. Values:
	//
	// - **0**: Non-sensitive asset.
	//
	// - **1**: Sensitive asset.
	//
	// example:
	//
	// 0
	SensitiveAssetFlag *int32 `json:"SensitiveAssetFlag,omitempty" xml:"SensitiveAssetFlag,omitempty"`
	// Vendor of the cloud product asset.
	//
	// example:
	//
	// 0
	Vendor *int32 `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) String() string {
	return dara.Prettify(s)
}

func (s GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) GoString() string {
	return s.String()
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) GetAssetSubType() *int32 {
	return s.AssetSubType
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) GetAssetType() *int32 {
	return s.AssetType
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) GetInstanceId() *string {
	return s.InstanceId
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) GetInstanceName() *string {
	return s.InstanceName
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) GetRegionId() *string {
	return s.RegionId
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) GetSensitiveAssetFlag() *int32 {
	return s.SensitiveAssetFlag
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) GetVendor() *int32 {
	return s.Vendor
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) SetAssetSubType(v int32) *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset {
	s.AssetSubType = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) SetAssetType(v int32) *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset {
	s.AssetType = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) SetInstanceId(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset {
	s.InstanceId = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) SetInstanceName(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset {
	s.InstanceName = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) SetRegionId(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset {
	s.RegionId = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) SetSensitiveAssetFlag(v int32) *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset {
	s.SensitiveAssetFlag = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) SetVendor(v int32) *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset {
	s.Vendor = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventDstAsset) Validate() error {
	return dara.Validate(s)
}

type GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList struct {
	// Edge ID.
	//
	// example:
	//
	// 123
	EdgeId *int64 `json:"EdgeId,omitempty" xml:"EdgeId,omitempty"`
	// Edge type.
	//
	// example:
	//
	// role_trust_user
	EdgeType *string `json:"EdgeType,omitempty" xml:"EdgeType,omitempty"`
	// Edge element type.
	//
	// example:
	//
	// branch
	ElementType *string `json:"ElementType,omitempty" xml:"ElementType,omitempty"`
	// UUID of the end node of the edge.
	//
	// example:
	//
	// 52d59cca9d1768bab5fe081317637990
	EndNodeUuid *string `json:"EndNodeUuid,omitempty" xml:"EndNodeUuid,omitempty"`
	// Description of the repair suggestion.
	//
	// example:
	//
	// The RAM role is granted the administrator permissions and trusts the user of another Alibaba Cloud account. In this case, the current Alibaba Cloud account may be fully controlled by the trusted Alibaba Cloud account. We recommend that you delete the trust relationship. If you need to trust another Alibaba Cloud account, we recommend that you split your business requirements and follow the principle of least privilege to grant permissions across accounts in a fine-grained manner. You can also use RAM.\\n\\nIf you confirm that the role does not need to trust an Alibaba Cloud account, perform the following operations: In the RAM console, click the required RAM role. On the page that appears, view the trust policy of the role. Then, edit the Service field to delete the trust relationship. If you confirm that permissions can be reduced, perform the following operations: In the RAM console, click the required RAM role. On the page that appears, view the permissions of the role. Then, find the policy that defines the administrator permissions and revoke the policy. Attach another policy to the role based on your business requirements.
	RepairSuggestionDisplay *string `json:"RepairSuggestionDisplay,omitempty" xml:"RepairSuggestionDisplay,omitempty"`
	// UUID of the start node of the edge.
	//
	// example:
	//
	// b7e1bd42c4ca47f69020f4a27b47d2b4
	StartNodeUuid *string `json:"StartNodeUuid,omitempty" xml:"StartNodeUuid,omitempty"`
}

func (s GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) String() string {
	return dara.Prettify(s)
}

func (s GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) GoString() string {
	return s.String()
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) GetEdgeId() *int64 {
	return s.EdgeId
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) GetEdgeType() *string {
	return s.EdgeType
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) GetElementType() *string {
	return s.ElementType
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) GetEndNodeUuid() *string {
	return s.EndNodeUuid
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) GetRepairSuggestionDisplay() *string {
	return s.RepairSuggestionDisplay
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) GetStartNodeUuid() *string {
	return s.StartNodeUuid
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) SetEdgeId(v int64) *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList {
	s.EdgeId = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) SetEdgeType(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList {
	s.EdgeType = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) SetElementType(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList {
	s.ElementType = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) SetEndNodeUuid(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList {
	s.EndNodeUuid = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) SetRepairSuggestionDisplay(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList {
	s.RepairSuggestionDisplay = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) SetStartNodeUuid(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList {
	s.StartNodeUuid = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventEdgeList) Validate() error {
	return dara.Validate(s)
}

type GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList struct {
	// Node element type.
	//
	// example:
	//
	// branch
	ElementType *string `json:"ElementType,omitempty" xml:"ElementType,omitempty"`
	// Details of the node.
	//
	// example:
	//
	// {"assetId":0}
	NodeDetail *string `json:"NodeDetail,omitempty" xml:"NodeDetail,omitempty"`
	// Name of the node.
	//
	// example:
	//
	// hypermatch_uploader
	NodeName *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	// Type of the node.
	//
	// example:
	//
	// user
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	// UUID of the node.
	//
	// example:
	//
	// 52d59cca9d1768bab5fe081317637990
	NodeUuid *string `json:"NodeUuid,omitempty" xml:"NodeUuid,omitempty"`
	// Sensitive asset flag. Values:
	//
	// - **0**: Non-sensitive asset.
	//
	// - **1**: Sensitive asset.
	//
	// example:
	//
	// 0
	SensitiveAssetFlag *int32 `json:"SensitiveAssetFlag,omitempty" xml:"SensitiveAssetFlag,omitempty"`
}

func (s GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) String() string {
	return dara.Prettify(s)
}

func (s GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) GoString() string {
	return s.String()
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) GetElementType() *string {
	return s.ElementType
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) GetNodeDetail() *string {
	return s.NodeDetail
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) GetNodeName() *string {
	return s.NodeName
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) GetNodeType() *string {
	return s.NodeType
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) GetNodeUuid() *string {
	return s.NodeUuid
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) GetSensitiveAssetFlag() *int32 {
	return s.SensitiveAssetFlag
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) SetElementType(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList {
	s.ElementType = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) SetNodeDetail(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList {
	s.NodeDetail = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) SetNodeName(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList {
	s.NodeName = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) SetNodeType(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList {
	s.NodeType = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) SetNodeUuid(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList {
	s.NodeUuid = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) SetSensitiveAssetFlag(v int32) *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList {
	s.SensitiveAssetFlag = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventPathEventNodeList) Validate() error {
	return dara.Validate(s)
}

type GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset struct {
	// Subtype of the cloud product asset
	//
	// example:
	//
	// 4
	AssetSubType *int32 `json:"AssetSubType,omitempty" xml:"AssetSubType,omitempty"`
	// The type of the cloud product asset.
	//
	// example:
	//
	// 14
	AssetType *int32 `json:"AssetType,omitempty" xml:"AssetType,omitempty"`
	// The ID of the cloud product asset instance.
	//
	// example:
	//
	// i-25b24****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the instance.
	//
	// example:
	//
	// test
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The ID of the region where the cloud product asset instance is located.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Sensitive asset flag. Values:
	//
	// - **0**: Non-sensitive asset.
	//
	// - **1**: Sensitive asset.
	//
	// example:
	//
	// 0
	SensitiveAssetFlag *int32 `json:"SensitiveAssetFlag,omitempty" xml:"SensitiveAssetFlag,omitempty"`
	// The vendor of the cloud product asset.
	//
	// example:
	//
	// 0
	Vendor *int32 `json:"Vendor,omitempty" xml:"Vendor,omitempty"`
}

func (s GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) String() string {
	return dara.Prettify(s)
}

func (s GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) GoString() string {
	return s.String()
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) GetAssetSubType() *int32 {
	return s.AssetSubType
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) GetAssetType() *int32 {
	return s.AssetType
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) GetInstanceId() *string {
	return s.InstanceId
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) GetInstanceName() *string {
	return s.InstanceName
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) GetRegionId() *string {
	return s.RegionId
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) GetSensitiveAssetFlag() *int32 {
	return s.SensitiveAssetFlag
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) GetVendor() *int32 {
	return s.Vendor
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) SetAssetSubType(v int32) *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset {
	s.AssetSubType = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) SetAssetType(v int32) *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset {
	s.AssetType = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) SetInstanceId(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset {
	s.InstanceId = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) SetInstanceName(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset {
	s.InstanceName = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) SetRegionId(v string) *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset {
	s.RegionId = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) SetSensitiveAssetFlag(v int32) *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset {
	s.SensitiveAssetFlag = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) SetVendor(v int32) *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset {
	s.Vendor = &v
	return s
}

func (s *GetAttackPathEventDetailResponseBodyAttackPathEventSrcAsset) Validate() error {
	return dara.Validate(s)
}
