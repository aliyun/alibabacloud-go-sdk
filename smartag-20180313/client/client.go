// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type ActivateSmartAccessGatewayRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s ActivateSmartAccessGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s ActivateSmartAccessGatewayRequest) GoString() string {
	return s.String()
}

func (s *ActivateSmartAccessGatewayRequest) SetOwnerAccount(v string) *ActivateSmartAccessGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ActivateSmartAccessGatewayRequest) SetOwnerId(v int64) *ActivateSmartAccessGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *ActivateSmartAccessGatewayRequest) SetRegionId(v string) *ActivateSmartAccessGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *ActivateSmartAccessGatewayRequest) SetResourceOwnerAccount(v string) *ActivateSmartAccessGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ActivateSmartAccessGatewayRequest) SetResourceOwnerId(v int64) *ActivateSmartAccessGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ActivateSmartAccessGatewayRequest) SetSmartAGId(v string) *ActivateSmartAccessGatewayRequest {
	s.SmartAGId = &v
	return s
}

type ActivateSmartAccessGatewayResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ActivateSmartAccessGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ActivateSmartAccessGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *ActivateSmartAccessGatewayResponseBody) SetRequestId(v string) *ActivateSmartAccessGatewayResponseBody {
	s.RequestId = &v
	return s
}

type ActivateSmartAccessGatewayResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ActivateSmartAccessGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ActivateSmartAccessGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s ActivateSmartAccessGatewayResponse) GoString() string {
	return s.String()
}

func (s *ActivateSmartAccessGatewayResponse) SetHeaders(v map[string]*string) *ActivateSmartAccessGatewayResponse {
	s.Headers = v
	return s
}

func (s *ActivateSmartAccessGatewayResponse) SetStatusCode(v int32) *ActivateSmartAccessGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *ActivateSmartAccessGatewayResponse) SetBody(v *ActivateSmartAccessGatewayResponseBody) *ActivateSmartAccessGatewayResponse {
	s.Body = v
	return s
}

type ActiveFlowLogRequest struct {
	FlowLogId            *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ActiveFlowLogRequest) String() string {
	return tea.Prettify(s)
}

func (s ActiveFlowLogRequest) GoString() string {
	return s.String()
}

func (s *ActiveFlowLogRequest) SetFlowLogId(v string) *ActiveFlowLogRequest {
	s.FlowLogId = &v
	return s
}

func (s *ActiveFlowLogRequest) SetOwnerAccount(v string) *ActiveFlowLogRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ActiveFlowLogRequest) SetOwnerId(v int64) *ActiveFlowLogRequest {
	s.OwnerId = &v
	return s
}

func (s *ActiveFlowLogRequest) SetRegionId(v string) *ActiveFlowLogRequest {
	s.RegionId = &v
	return s
}

func (s *ActiveFlowLogRequest) SetResourceOwnerAccount(v string) *ActiveFlowLogRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ActiveFlowLogRequest) SetResourceOwnerId(v int64) *ActiveFlowLogRequest {
	s.ResourceOwnerId = &v
	return s
}

type ActiveFlowLogResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ActiveFlowLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ActiveFlowLogResponseBody) GoString() string {
	return s.String()
}

func (s *ActiveFlowLogResponseBody) SetRequestId(v string) *ActiveFlowLogResponseBody {
	s.RequestId = &v
	return s
}

type ActiveFlowLogResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ActiveFlowLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ActiveFlowLogResponse) String() string {
	return tea.Prettify(s)
}

func (s ActiveFlowLogResponse) GoString() string {
	return s.String()
}

func (s *ActiveFlowLogResponse) SetHeaders(v map[string]*string) *ActiveFlowLogResponse {
	s.Headers = v
	return s
}

func (s *ActiveFlowLogResponse) SetStatusCode(v int32) *ActiveFlowLogResponse {
	s.StatusCode = &v
	return s
}

func (s *ActiveFlowLogResponse) SetBody(v *ActiveFlowLogResponseBody) *ActiveFlowLogResponse {
	s.Body = v
	return s
}

type AddACLRuleRequest struct {
	AclId                *string   `json:"AclId,omitempty" xml:"AclId,omitempty"`
	Description          *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidr             *string   `json:"DestCidr,omitempty" xml:"DestCidr,omitempty"`
	DestPortRange        *string   `json:"DestPortRange,omitempty" xml:"DestPortRange,omitempty"`
	Direction            *string   `json:"Direction,omitempty" xml:"Direction,omitempty"`
	DpiGroupIds          []*string `json:"DpiGroupIds,omitempty" xml:"DpiGroupIds,omitempty" type:"Repeated"`
	DpiSignatureIds      []*string `json:"DpiSignatureIds,omitempty" xml:"DpiSignatureIds,omitempty" type:"Repeated"`
	IpProtocol           *string   `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Name                 *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Policy               *string   `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Priority             *int32    `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SourceCidr           *string   `json:"SourceCidr,omitempty" xml:"SourceCidr,omitempty"`
	SourcePortRange      *string   `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Type                 *string   `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddACLRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s AddACLRuleRequest) GoString() string {
	return s.String()
}

func (s *AddACLRuleRequest) SetAclId(v string) *AddACLRuleRequest {
	s.AclId = &v
	return s
}

func (s *AddACLRuleRequest) SetDescription(v string) *AddACLRuleRequest {
	s.Description = &v
	return s
}

func (s *AddACLRuleRequest) SetDestCidr(v string) *AddACLRuleRequest {
	s.DestCidr = &v
	return s
}

func (s *AddACLRuleRequest) SetDestPortRange(v string) *AddACLRuleRequest {
	s.DestPortRange = &v
	return s
}

func (s *AddACLRuleRequest) SetDirection(v string) *AddACLRuleRequest {
	s.Direction = &v
	return s
}

func (s *AddACLRuleRequest) SetDpiGroupIds(v []*string) *AddACLRuleRequest {
	s.DpiGroupIds = v
	return s
}

func (s *AddACLRuleRequest) SetDpiSignatureIds(v []*string) *AddACLRuleRequest {
	s.DpiSignatureIds = v
	return s
}

func (s *AddACLRuleRequest) SetIpProtocol(v string) *AddACLRuleRequest {
	s.IpProtocol = &v
	return s
}

func (s *AddACLRuleRequest) SetName(v string) *AddACLRuleRequest {
	s.Name = &v
	return s
}

func (s *AddACLRuleRequest) SetOwnerAccount(v string) *AddACLRuleRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddACLRuleRequest) SetOwnerId(v int64) *AddACLRuleRequest {
	s.OwnerId = &v
	return s
}

func (s *AddACLRuleRequest) SetPolicy(v string) *AddACLRuleRequest {
	s.Policy = &v
	return s
}

func (s *AddACLRuleRequest) SetPriority(v int32) *AddACLRuleRequest {
	s.Priority = &v
	return s
}

func (s *AddACLRuleRequest) SetRegionId(v string) *AddACLRuleRequest {
	s.RegionId = &v
	return s
}

func (s *AddACLRuleRequest) SetResourceOwnerAccount(v string) *AddACLRuleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddACLRuleRequest) SetResourceOwnerId(v int64) *AddACLRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddACLRuleRequest) SetSourceCidr(v string) *AddACLRuleRequest {
	s.SourceCidr = &v
	return s
}

func (s *AddACLRuleRequest) SetSourcePortRange(v string) *AddACLRuleRequest {
	s.SourcePortRange = &v
	return s
}

func (s *AddACLRuleRequest) SetType(v string) *AddACLRuleRequest {
	s.Type = &v
	return s
}

type AddACLRuleResponseBody struct {
	AclId           *string                                `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AcrId           *string                                `json:"AcrId,omitempty" xml:"AcrId,omitempty"`
	Description     *string                                `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidr        *string                                `json:"DestCidr,omitempty" xml:"DestCidr,omitempty"`
	DestPortRange   *string                                `json:"DestPortRange,omitempty" xml:"DestPortRange,omitempty"`
	Direction       *string                                `json:"Direction,omitempty" xml:"Direction,omitempty"`
	DpiGroupIds     *AddACLRuleResponseBodyDpiGroupIds     `json:"DpiGroupIds,omitempty" xml:"DpiGroupIds,omitempty" type:"Struct"`
	DpiSignatureIds *AddACLRuleResponseBodyDpiSignatureIds `json:"DpiSignatureIds,omitempty" xml:"DpiSignatureIds,omitempty" type:"Struct"`
	GmtCreate       *int64                                 `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	IpProtocol      *string                                `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Name            *string                                `json:"Name,omitempty" xml:"Name,omitempty"`
	Policy          *string                                `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Priority        *int32                                 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RequestId       *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SourceCidr      *string                                `json:"SourceCidr,omitempty" xml:"SourceCidr,omitempty"`
	SourcePortRange *string                                `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Type            *string                                `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddACLRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddACLRuleResponseBody) GoString() string {
	return s.String()
}

func (s *AddACLRuleResponseBody) SetAclId(v string) *AddACLRuleResponseBody {
	s.AclId = &v
	return s
}

func (s *AddACLRuleResponseBody) SetAcrId(v string) *AddACLRuleResponseBody {
	s.AcrId = &v
	return s
}

func (s *AddACLRuleResponseBody) SetDescription(v string) *AddACLRuleResponseBody {
	s.Description = &v
	return s
}

func (s *AddACLRuleResponseBody) SetDestCidr(v string) *AddACLRuleResponseBody {
	s.DestCidr = &v
	return s
}

func (s *AddACLRuleResponseBody) SetDestPortRange(v string) *AddACLRuleResponseBody {
	s.DestPortRange = &v
	return s
}

func (s *AddACLRuleResponseBody) SetDirection(v string) *AddACLRuleResponseBody {
	s.Direction = &v
	return s
}

func (s *AddACLRuleResponseBody) SetDpiGroupIds(v *AddACLRuleResponseBodyDpiGroupIds) *AddACLRuleResponseBody {
	s.DpiGroupIds = v
	return s
}

func (s *AddACLRuleResponseBody) SetDpiSignatureIds(v *AddACLRuleResponseBodyDpiSignatureIds) *AddACLRuleResponseBody {
	s.DpiSignatureIds = v
	return s
}

func (s *AddACLRuleResponseBody) SetGmtCreate(v int64) *AddACLRuleResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *AddACLRuleResponseBody) SetIpProtocol(v string) *AddACLRuleResponseBody {
	s.IpProtocol = &v
	return s
}

func (s *AddACLRuleResponseBody) SetName(v string) *AddACLRuleResponseBody {
	s.Name = &v
	return s
}

func (s *AddACLRuleResponseBody) SetPolicy(v string) *AddACLRuleResponseBody {
	s.Policy = &v
	return s
}

func (s *AddACLRuleResponseBody) SetPriority(v int32) *AddACLRuleResponseBody {
	s.Priority = &v
	return s
}

func (s *AddACLRuleResponseBody) SetRequestId(v string) *AddACLRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddACLRuleResponseBody) SetSourceCidr(v string) *AddACLRuleResponseBody {
	s.SourceCidr = &v
	return s
}

func (s *AddACLRuleResponseBody) SetSourcePortRange(v string) *AddACLRuleResponseBody {
	s.SourcePortRange = &v
	return s
}

func (s *AddACLRuleResponseBody) SetType(v string) *AddACLRuleResponseBody {
	s.Type = &v
	return s
}

type AddACLRuleResponseBodyDpiGroupIds struct {
	DpiGroupId []*string `json:"DpiGroupId,omitempty" xml:"DpiGroupId,omitempty" type:"Repeated"`
}

func (s AddACLRuleResponseBodyDpiGroupIds) String() string {
	return tea.Prettify(s)
}

func (s AddACLRuleResponseBodyDpiGroupIds) GoString() string {
	return s.String()
}

func (s *AddACLRuleResponseBodyDpiGroupIds) SetDpiGroupId(v []*string) *AddACLRuleResponseBodyDpiGroupIds {
	s.DpiGroupId = v
	return s
}

type AddACLRuleResponseBodyDpiSignatureIds struct {
	DpiSignatureId []*string `json:"DpiSignatureId,omitempty" xml:"DpiSignatureId,omitempty" type:"Repeated"`
}

func (s AddACLRuleResponseBodyDpiSignatureIds) String() string {
	return tea.Prettify(s)
}

func (s AddACLRuleResponseBodyDpiSignatureIds) GoString() string {
	return s.String()
}

func (s *AddACLRuleResponseBodyDpiSignatureIds) SetDpiSignatureId(v []*string) *AddACLRuleResponseBodyDpiSignatureIds {
	s.DpiSignatureId = v
	return s
}

type AddACLRuleResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddACLRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddACLRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s AddACLRuleResponse) GoString() string {
	return s.String()
}

func (s *AddACLRuleResponse) SetHeaders(v map[string]*string) *AddACLRuleResponse {
	s.Headers = v
	return s
}

func (s *AddACLRuleResponse) SetStatusCode(v int32) *AddACLRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *AddACLRuleResponse) SetBody(v *AddACLRuleResponseBody) *AddACLRuleResponse {
	s.Body = v
	return s
}

type AddDnatEntryRequest struct {
	ExternalIp           *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	ExternalPort         *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	InternalIp           *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	InternalPort         *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	IpProtocol           *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SagId                *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddDnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDnatEntryRequest) GoString() string {
	return s.String()
}

func (s *AddDnatEntryRequest) SetExternalIp(v string) *AddDnatEntryRequest {
	s.ExternalIp = &v
	return s
}

func (s *AddDnatEntryRequest) SetExternalPort(v string) *AddDnatEntryRequest {
	s.ExternalPort = &v
	return s
}

func (s *AddDnatEntryRequest) SetInternalIp(v string) *AddDnatEntryRequest {
	s.InternalIp = &v
	return s
}

func (s *AddDnatEntryRequest) SetInternalPort(v string) *AddDnatEntryRequest {
	s.InternalPort = &v
	return s
}

func (s *AddDnatEntryRequest) SetIpProtocol(v string) *AddDnatEntryRequest {
	s.IpProtocol = &v
	return s
}

func (s *AddDnatEntryRequest) SetOwnerAccount(v string) *AddDnatEntryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddDnatEntryRequest) SetOwnerId(v int64) *AddDnatEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *AddDnatEntryRequest) SetRegionId(v string) *AddDnatEntryRequest {
	s.RegionId = &v
	return s
}

func (s *AddDnatEntryRequest) SetResourceOwnerAccount(v string) *AddDnatEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddDnatEntryRequest) SetResourceOwnerId(v int64) *AddDnatEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddDnatEntryRequest) SetSagId(v string) *AddDnatEntryRequest {
	s.SagId = &v
	return s
}

func (s *AddDnatEntryRequest) SetType(v string) *AddDnatEntryRequest {
	s.Type = &v
	return s
}

type AddDnatEntryResponseBody struct {
	DnatEntryId *string `json:"DnatEntryId,omitempty" xml:"DnatEntryId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddDnatEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddDnatEntryResponseBody) GoString() string {
	return s.String()
}

func (s *AddDnatEntryResponseBody) SetDnatEntryId(v string) *AddDnatEntryResponseBody {
	s.DnatEntryId = &v
	return s
}

func (s *AddDnatEntryResponseBody) SetRequestId(v string) *AddDnatEntryResponseBody {
	s.RequestId = &v
	return s
}

type AddDnatEntryResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddDnatEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddDnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDnatEntryResponse) GoString() string {
	return s.String()
}

func (s *AddDnatEntryResponse) SetHeaders(v map[string]*string) *AddDnatEntryResponse {
	s.Headers = v
	return s
}

func (s *AddDnatEntryResponse) SetStatusCode(v int32) *AddDnatEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *AddDnatEntryResponse) SetBody(v *AddDnatEntryResponseBody) *AddDnatEntryResponse {
	s.Body = v
	return s
}

type AddSmartAccessGatewayDnsForwardRequest struct {
	Domain            *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	MasterIp          *string `json:"MasterIp,omitempty" xml:"MasterIp,omitempty"`
	Mode              *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	OutboundPortIndex *string `json:"OutboundPortIndex,omitempty" xml:"OutboundPortIndex,omitempty"`
	OutboundPortName  *string `json:"OutboundPortName,omitempty" xml:"OutboundPortName,omitempty"`
	OutboundPortType  *string `json:"OutboundPortType,omitempty" xml:"OutboundPortType,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SagInsId          *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn             *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
	SlaveIp           *string `json:"SlaveIp,omitempty" xml:"SlaveIp,omitempty"`
}

func (s AddSmartAccessGatewayDnsForwardRequest) String() string {
	return tea.Prettify(s)
}

func (s AddSmartAccessGatewayDnsForwardRequest) GoString() string {
	return s.String()
}

func (s *AddSmartAccessGatewayDnsForwardRequest) SetDomain(v string) *AddSmartAccessGatewayDnsForwardRequest {
	s.Domain = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardRequest) SetMasterIp(v string) *AddSmartAccessGatewayDnsForwardRequest {
	s.MasterIp = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardRequest) SetMode(v string) *AddSmartAccessGatewayDnsForwardRequest {
	s.Mode = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardRequest) SetOutboundPortIndex(v string) *AddSmartAccessGatewayDnsForwardRequest {
	s.OutboundPortIndex = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardRequest) SetOutboundPortName(v string) *AddSmartAccessGatewayDnsForwardRequest {
	s.OutboundPortName = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardRequest) SetOutboundPortType(v string) *AddSmartAccessGatewayDnsForwardRequest {
	s.OutboundPortType = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardRequest) SetRegionId(v string) *AddSmartAccessGatewayDnsForwardRequest {
	s.RegionId = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardRequest) SetSagInsId(v string) *AddSmartAccessGatewayDnsForwardRequest {
	s.SagInsId = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardRequest) SetSagSn(v string) *AddSmartAccessGatewayDnsForwardRequest {
	s.SagSn = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardRequest) SetSlaveIp(v string) *AddSmartAccessGatewayDnsForwardRequest {
	s.SlaveIp = &v
	return s
}

type AddSmartAccessGatewayDnsForwardResponseBody struct {
	Code           *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *AddSmartAccessGatewayDnsForwardResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddSmartAccessGatewayDnsForwardResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddSmartAccessGatewayDnsForwardResponseBody) GoString() string {
	return s.String()
}

func (s *AddSmartAccessGatewayDnsForwardResponseBody) SetCode(v string) *AddSmartAccessGatewayDnsForwardResponseBody {
	s.Code = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponseBody) SetData(v *AddSmartAccessGatewayDnsForwardResponseBodyData) *AddSmartAccessGatewayDnsForwardResponseBody {
	s.Data = v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponseBody) SetHttpStatusCode(v int32) *AddSmartAccessGatewayDnsForwardResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponseBody) SetMessage(v string) *AddSmartAccessGatewayDnsForwardResponseBody {
	s.Message = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponseBody) SetRequestId(v string) *AddSmartAccessGatewayDnsForwardResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponseBody) SetSuccess(v bool) *AddSmartAccessGatewayDnsForwardResponseBody {
	s.Success = &v
	return s
}

type AddSmartAccessGatewayDnsForwardResponseBodyData struct {
	Domain            *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MasterIp          *string `json:"MasterIp,omitempty" xml:"MasterIp,omitempty"`
	Mode              *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	OutboundPortIndex *int32  `json:"OutboundPortIndex,omitempty" xml:"OutboundPortIndex,omitempty"`
	OutboundPortName  *string `json:"OutboundPortName,omitempty" xml:"OutboundPortName,omitempty"`
	OutboundPortType  *string `json:"OutboundPortType,omitempty" xml:"OutboundPortType,omitempty"`
	SlaveIp           *string `json:"SlaveIp,omitempty" xml:"SlaveIp,omitempty"`
}

func (s AddSmartAccessGatewayDnsForwardResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddSmartAccessGatewayDnsForwardResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddSmartAccessGatewayDnsForwardResponseBodyData) SetDomain(v string) *AddSmartAccessGatewayDnsForwardResponseBodyData {
	s.Domain = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponseBodyData) SetInstanceId(v string) *AddSmartAccessGatewayDnsForwardResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponseBodyData) SetMasterIp(v string) *AddSmartAccessGatewayDnsForwardResponseBodyData {
	s.MasterIp = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponseBodyData) SetMode(v string) *AddSmartAccessGatewayDnsForwardResponseBodyData {
	s.Mode = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponseBodyData) SetOutboundPortIndex(v int32) *AddSmartAccessGatewayDnsForwardResponseBodyData {
	s.OutboundPortIndex = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponseBodyData) SetOutboundPortName(v string) *AddSmartAccessGatewayDnsForwardResponseBodyData {
	s.OutboundPortName = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponseBodyData) SetOutboundPortType(v string) *AddSmartAccessGatewayDnsForwardResponseBodyData {
	s.OutboundPortType = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponseBodyData) SetSlaveIp(v string) *AddSmartAccessGatewayDnsForwardResponseBodyData {
	s.SlaveIp = &v
	return s
}

type AddSmartAccessGatewayDnsForwardResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddSmartAccessGatewayDnsForwardResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddSmartAccessGatewayDnsForwardResponse) String() string {
	return tea.Prettify(s)
}

func (s AddSmartAccessGatewayDnsForwardResponse) GoString() string {
	return s.String()
}

func (s *AddSmartAccessGatewayDnsForwardResponse) SetHeaders(v map[string]*string) *AddSmartAccessGatewayDnsForwardResponse {
	s.Headers = v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponse) SetStatusCode(v int32) *AddSmartAccessGatewayDnsForwardResponse {
	s.StatusCode = &v
	return s
}

func (s *AddSmartAccessGatewayDnsForwardResponse) SetBody(v *AddSmartAccessGatewayDnsForwardResponseBody) *AddSmartAccessGatewayDnsForwardResponse {
	s.Body = v
	return s
}

type AddSnatEntryRequest struct {
	CidrBlock            *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SnatIp               *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
}

func (s AddSnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s AddSnatEntryRequest) GoString() string {
	return s.String()
}

func (s *AddSnatEntryRequest) SetCidrBlock(v string) *AddSnatEntryRequest {
	s.CidrBlock = &v
	return s
}

func (s *AddSnatEntryRequest) SetOwnerAccount(v string) *AddSnatEntryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddSnatEntryRequest) SetOwnerId(v int64) *AddSnatEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *AddSnatEntryRequest) SetRegionId(v string) *AddSnatEntryRequest {
	s.RegionId = &v
	return s
}

func (s *AddSnatEntryRequest) SetResourceOwnerAccount(v string) *AddSnatEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddSnatEntryRequest) SetResourceOwnerId(v int64) *AddSnatEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddSnatEntryRequest) SetSmartAGId(v string) *AddSnatEntryRequest {
	s.SmartAGId = &v
	return s
}

func (s *AddSnatEntryRequest) SetSnatIp(v string) *AddSnatEntryRequest {
	s.SnatIp = &v
	return s
}

type AddSnatEntryResponseBody struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddSnatEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddSnatEntryResponseBody) GoString() string {
	return s.String()
}

func (s *AddSnatEntryResponseBody) SetInstanceId(v string) *AddSnatEntryResponseBody {
	s.InstanceId = &v
	return s
}

func (s *AddSnatEntryResponseBody) SetRequestId(v string) *AddSnatEntryResponseBody {
	s.RequestId = &v
	return s
}

type AddSnatEntryResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddSnatEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddSnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s AddSnatEntryResponse) GoString() string {
	return s.String()
}

func (s *AddSnatEntryResponse) SetHeaders(v map[string]*string) *AddSnatEntryResponse {
	s.Headers = v
	return s
}

func (s *AddSnatEntryResponse) SetStatusCode(v int32) *AddSnatEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *AddSnatEntryResponse) SetBody(v *AddSnatEntryResponseBody) *AddSnatEntryResponse {
	s.Body = v
	return s
}

type AssociateACLRequest struct {
	AclId                *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s AssociateACLRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateACLRequest) GoString() string {
	return s.String()
}

func (s *AssociateACLRequest) SetAclId(v string) *AssociateACLRequest {
	s.AclId = &v
	return s
}

func (s *AssociateACLRequest) SetOwnerAccount(v string) *AssociateACLRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AssociateACLRequest) SetOwnerId(v int64) *AssociateACLRequest {
	s.OwnerId = &v
	return s
}

func (s *AssociateACLRequest) SetRegionId(v string) *AssociateACLRequest {
	s.RegionId = &v
	return s
}

func (s *AssociateACLRequest) SetResourceOwnerAccount(v string) *AssociateACLRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AssociateACLRequest) SetResourceOwnerId(v int64) *AssociateACLRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AssociateACLRequest) SetSmartAGId(v string) *AssociateACLRequest {
	s.SmartAGId = &v
	return s
}

type AssociateACLResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AssociateACLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssociateACLResponseBody) GoString() string {
	return s.String()
}

func (s *AssociateACLResponseBody) SetRequestId(v string) *AssociateACLResponseBody {
	s.RequestId = &v
	return s
}

type AssociateACLResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AssociateACLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AssociateACLResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateACLResponse) GoString() string {
	return s.String()
}

func (s *AssociateACLResponse) SetHeaders(v map[string]*string) *AssociateACLResponse {
	s.Headers = v
	return s
}

func (s *AssociateACLResponse) SetStatusCode(v int32) *AssociateACLResponse {
	s.StatusCode = &v
	return s
}

func (s *AssociateACLResponse) SetBody(v *AssociateACLResponseBody) *AssociateACLResponse {
	s.Body = v
	return s
}

type AssociateFlowLogRequest struct {
	FlowLogId            *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s AssociateFlowLogRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateFlowLogRequest) GoString() string {
	return s.String()
}

func (s *AssociateFlowLogRequest) SetFlowLogId(v string) *AssociateFlowLogRequest {
	s.FlowLogId = &v
	return s
}

func (s *AssociateFlowLogRequest) SetOwnerAccount(v string) *AssociateFlowLogRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AssociateFlowLogRequest) SetOwnerId(v int64) *AssociateFlowLogRequest {
	s.OwnerId = &v
	return s
}

func (s *AssociateFlowLogRequest) SetRegionId(v string) *AssociateFlowLogRequest {
	s.RegionId = &v
	return s
}

func (s *AssociateFlowLogRequest) SetResourceOwnerAccount(v string) *AssociateFlowLogRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AssociateFlowLogRequest) SetResourceOwnerId(v int64) *AssociateFlowLogRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AssociateFlowLogRequest) SetSmartAGId(v string) *AssociateFlowLogRequest {
	s.SmartAGId = &v
	return s
}

type AssociateFlowLogResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AssociateFlowLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssociateFlowLogResponseBody) GoString() string {
	return s.String()
}

func (s *AssociateFlowLogResponseBody) SetRequestId(v string) *AssociateFlowLogResponseBody {
	s.RequestId = &v
	return s
}

type AssociateFlowLogResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AssociateFlowLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AssociateFlowLogResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateFlowLogResponse) GoString() string {
	return s.String()
}

func (s *AssociateFlowLogResponse) SetHeaders(v map[string]*string) *AssociateFlowLogResponse {
	s.Headers = v
	return s
}

func (s *AssociateFlowLogResponse) SetStatusCode(v int32) *AssociateFlowLogResponse {
	s.StatusCode = &v
	return s
}

func (s *AssociateFlowLogResponse) SetBody(v *AssociateFlowLogResponseBody) *AssociateFlowLogResponse {
	s.Body = v
	return s
}

type AssociateQosRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QosId                *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s AssociateQosRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateQosRequest) GoString() string {
	return s.String()
}

func (s *AssociateQosRequest) SetOwnerAccount(v string) *AssociateQosRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AssociateQosRequest) SetOwnerId(v int64) *AssociateQosRequest {
	s.OwnerId = &v
	return s
}

func (s *AssociateQosRequest) SetQosId(v string) *AssociateQosRequest {
	s.QosId = &v
	return s
}

func (s *AssociateQosRequest) SetRegionId(v string) *AssociateQosRequest {
	s.RegionId = &v
	return s
}

func (s *AssociateQosRequest) SetResourceOwnerAccount(v string) *AssociateQosRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AssociateQosRequest) SetResourceOwnerId(v int64) *AssociateQosRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AssociateQosRequest) SetSmartAGId(v string) *AssociateQosRequest {
	s.SmartAGId = &v
	return s
}

type AssociateQosResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AssociateQosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssociateQosResponseBody) GoString() string {
	return s.String()
}

func (s *AssociateQosResponseBody) SetRequestId(v string) *AssociateQosResponseBody {
	s.RequestId = &v
	return s
}

type AssociateQosResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AssociateQosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AssociateQosResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateQosResponse) GoString() string {
	return s.String()
}

func (s *AssociateQosResponse) SetHeaders(v map[string]*string) *AssociateQosResponse {
	s.Headers = v
	return s
}

func (s *AssociateQosResponse) SetStatusCode(v int32) *AssociateQosResponse {
	s.StatusCode = &v
	return s
}

func (s *AssociateQosResponse) SetBody(v *AssociateQosResponseBody) *AssociateQosResponse {
	s.Body = v
	return s
}

type AssociateSmartAGWithApplicationBandwidthPackageRequest struct {
	ApplicationBandwidthPackageId *string                                                                   `json:"ApplicationBandwidthPackageId,omitempty" xml:"ApplicationBandwidthPackageId,omitempty"`
	AssociateConfigs              []*AssociateSmartAGWithApplicationBandwidthPackageRequestAssociateConfigs `json:"AssociateConfigs,omitempty" xml:"AssociateConfigs,omitempty" type:"Repeated"`
	ClientToken                   *string                                                                   `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DryRun                        *bool                                                                     `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	RegionId                      *string                                                                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AssociateSmartAGWithApplicationBandwidthPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateSmartAGWithApplicationBandwidthPackageRequest) GoString() string {
	return s.String()
}

func (s *AssociateSmartAGWithApplicationBandwidthPackageRequest) SetApplicationBandwidthPackageId(v string) *AssociateSmartAGWithApplicationBandwidthPackageRequest {
	s.ApplicationBandwidthPackageId = &v
	return s
}

func (s *AssociateSmartAGWithApplicationBandwidthPackageRequest) SetAssociateConfigs(v []*AssociateSmartAGWithApplicationBandwidthPackageRequestAssociateConfigs) *AssociateSmartAGWithApplicationBandwidthPackageRequest {
	s.AssociateConfigs = v
	return s
}

func (s *AssociateSmartAGWithApplicationBandwidthPackageRequest) SetClientToken(v string) *AssociateSmartAGWithApplicationBandwidthPackageRequest {
	s.ClientToken = &v
	return s
}

func (s *AssociateSmartAGWithApplicationBandwidthPackageRequest) SetDryRun(v bool) *AssociateSmartAGWithApplicationBandwidthPackageRequest {
	s.DryRun = &v
	return s
}

func (s *AssociateSmartAGWithApplicationBandwidthPackageRequest) SetRegionId(v string) *AssociateSmartAGWithApplicationBandwidthPackageRequest {
	s.RegionId = &v
	return s
}

type AssociateSmartAGWithApplicationBandwidthPackageRequestAssociateConfigs struct {
	Bandwidth *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	SmartAGId *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s AssociateSmartAGWithApplicationBandwidthPackageRequestAssociateConfigs) String() string {
	return tea.Prettify(s)
}

func (s AssociateSmartAGWithApplicationBandwidthPackageRequestAssociateConfigs) GoString() string {
	return s.String()
}

func (s *AssociateSmartAGWithApplicationBandwidthPackageRequestAssociateConfigs) SetBandwidth(v int32) *AssociateSmartAGWithApplicationBandwidthPackageRequestAssociateConfigs {
	s.Bandwidth = &v
	return s
}

func (s *AssociateSmartAGWithApplicationBandwidthPackageRequestAssociateConfigs) SetSmartAGId(v string) *AssociateSmartAGWithApplicationBandwidthPackageRequestAssociateConfigs {
	s.SmartAGId = &v
	return s
}

type AssociateSmartAGWithApplicationBandwidthPackageResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AssociateSmartAGWithApplicationBandwidthPackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssociateSmartAGWithApplicationBandwidthPackageResponseBody) GoString() string {
	return s.String()
}

func (s *AssociateSmartAGWithApplicationBandwidthPackageResponseBody) SetRequestId(v string) *AssociateSmartAGWithApplicationBandwidthPackageResponseBody {
	s.RequestId = &v
	return s
}

type AssociateSmartAGWithApplicationBandwidthPackageResponse struct {
	Headers    map[string]*string                                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AssociateSmartAGWithApplicationBandwidthPackageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AssociateSmartAGWithApplicationBandwidthPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateSmartAGWithApplicationBandwidthPackageResponse) GoString() string {
	return s.String()
}

func (s *AssociateSmartAGWithApplicationBandwidthPackageResponse) SetHeaders(v map[string]*string) *AssociateSmartAGWithApplicationBandwidthPackageResponse {
	s.Headers = v
	return s
}

func (s *AssociateSmartAGWithApplicationBandwidthPackageResponse) SetStatusCode(v int32) *AssociateSmartAGWithApplicationBandwidthPackageResponse {
	s.StatusCode = &v
	return s
}

func (s *AssociateSmartAGWithApplicationBandwidthPackageResponse) SetBody(v *AssociateSmartAGWithApplicationBandwidthPackageResponseBody) *AssociateSmartAGWithApplicationBandwidthPackageResponse {
	s.Body = v
	return s
}

type BindSerialNumberRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SerialNumber         *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s BindSerialNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s BindSerialNumberRequest) GoString() string {
	return s.String()
}

func (s *BindSerialNumberRequest) SetOwnerAccount(v string) *BindSerialNumberRequest {
	s.OwnerAccount = &v
	return s
}

func (s *BindSerialNumberRequest) SetOwnerId(v int64) *BindSerialNumberRequest {
	s.OwnerId = &v
	return s
}

func (s *BindSerialNumberRequest) SetRegionId(v string) *BindSerialNumberRequest {
	s.RegionId = &v
	return s
}

func (s *BindSerialNumberRequest) SetResourceOwnerAccount(v string) *BindSerialNumberRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *BindSerialNumberRequest) SetResourceOwnerId(v int64) *BindSerialNumberRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *BindSerialNumberRequest) SetSerialNumber(v string) *BindSerialNumberRequest {
	s.SerialNumber = &v
	return s
}

func (s *BindSerialNumberRequest) SetSmartAGId(v string) *BindSerialNumberRequest {
	s.SmartAGId = &v
	return s
}

type BindSerialNumberResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindSerialNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindSerialNumberResponseBody) GoString() string {
	return s.String()
}

func (s *BindSerialNumberResponseBody) SetRequestId(v string) *BindSerialNumberResponseBody {
	s.RequestId = &v
	return s
}

type BindSerialNumberResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *BindSerialNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindSerialNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s BindSerialNumberResponse) GoString() string {
	return s.String()
}

func (s *BindSerialNumberResponse) SetHeaders(v map[string]*string) *BindSerialNumberResponse {
	s.Headers = v
	return s
}

func (s *BindSerialNumberResponse) SetStatusCode(v int32) *BindSerialNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *BindSerialNumberResponse) SetBody(v *BindSerialNumberResponseBody) *BindSerialNumberResponse {
	s.Body = v
	return s
}

type BindSmartAccessGatewayRequest struct {
	CcnId                *string `json:"CcnId,omitempty" xml:"CcnId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGUid           *int64  `json:"SmartAGUid,omitempty" xml:"SmartAGUid,omitempty"`
}

func (s BindSmartAccessGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s BindSmartAccessGatewayRequest) GoString() string {
	return s.String()
}

func (s *BindSmartAccessGatewayRequest) SetCcnId(v string) *BindSmartAccessGatewayRequest {
	s.CcnId = &v
	return s
}

func (s *BindSmartAccessGatewayRequest) SetOwnerAccount(v string) *BindSmartAccessGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *BindSmartAccessGatewayRequest) SetOwnerId(v int64) *BindSmartAccessGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *BindSmartAccessGatewayRequest) SetRegionId(v string) *BindSmartAccessGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *BindSmartAccessGatewayRequest) SetResourceOwnerAccount(v string) *BindSmartAccessGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *BindSmartAccessGatewayRequest) SetResourceOwnerId(v int64) *BindSmartAccessGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *BindSmartAccessGatewayRequest) SetSmartAGId(v string) *BindSmartAccessGatewayRequest {
	s.SmartAGId = &v
	return s
}

func (s *BindSmartAccessGatewayRequest) SetSmartAGUid(v int64) *BindSmartAccessGatewayRequest {
	s.SmartAGUid = &v
	return s
}

type BindSmartAccessGatewayResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindSmartAccessGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindSmartAccessGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *BindSmartAccessGatewayResponseBody) SetRequestId(v string) *BindSmartAccessGatewayResponseBody {
	s.RequestId = &v
	return s
}

type BindSmartAccessGatewayResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *BindSmartAccessGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindSmartAccessGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s BindSmartAccessGatewayResponse) GoString() string {
	return s.String()
}

func (s *BindSmartAccessGatewayResponse) SetHeaders(v map[string]*string) *BindSmartAccessGatewayResponse {
	s.Headers = v
	return s
}

func (s *BindSmartAccessGatewayResponse) SetStatusCode(v int32) *BindSmartAccessGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *BindSmartAccessGatewayResponse) SetBody(v *BindSmartAccessGatewayResponseBody) *BindSmartAccessGatewayResponse {
	s.Body = v
	return s
}

type BindVbrRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGUid           *int64  `json:"SmartAGUid,omitempty" xml:"SmartAGUid,omitempty"`
	VbrId                *string `json:"VbrId,omitempty" xml:"VbrId,omitempty"`
	VbrRegionId          *string `json:"VbrRegionId,omitempty" xml:"VbrRegionId,omitempty"`
}

func (s BindVbrRequest) String() string {
	return tea.Prettify(s)
}

func (s BindVbrRequest) GoString() string {
	return s.String()
}

func (s *BindVbrRequest) SetOwnerAccount(v string) *BindVbrRequest {
	s.OwnerAccount = &v
	return s
}

func (s *BindVbrRequest) SetOwnerId(v int64) *BindVbrRequest {
	s.OwnerId = &v
	return s
}

func (s *BindVbrRequest) SetRegionId(v string) *BindVbrRequest {
	s.RegionId = &v
	return s
}

func (s *BindVbrRequest) SetResourceOwnerAccount(v string) *BindVbrRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *BindVbrRequest) SetResourceOwnerId(v int64) *BindVbrRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *BindVbrRequest) SetSmartAGId(v string) *BindVbrRequest {
	s.SmartAGId = &v
	return s
}

func (s *BindVbrRequest) SetSmartAGUid(v int64) *BindVbrRequest {
	s.SmartAGUid = &v
	return s
}

func (s *BindVbrRequest) SetVbrId(v string) *BindVbrRequest {
	s.VbrId = &v
	return s
}

func (s *BindVbrRequest) SetVbrRegionId(v string) *BindVbrRequest {
	s.VbrRegionId = &v
	return s
}

type BindVbrResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindVbrResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindVbrResponseBody) GoString() string {
	return s.String()
}

func (s *BindVbrResponseBody) SetRequestId(v string) *BindVbrResponseBody {
	s.RequestId = &v
	return s
}

type BindVbrResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *BindVbrResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindVbrResponse) String() string {
	return tea.Prettify(s)
}

func (s BindVbrResponse) GoString() string {
	return s.String()
}

func (s *BindVbrResponse) SetHeaders(v map[string]*string) *BindVbrResponse {
	s.Headers = v
	return s
}

func (s *BindVbrResponse) SetStatusCode(v int32) *BindVbrResponse {
	s.StatusCode = &v
	return s
}

func (s *BindVbrResponse) SetBody(v *BindVbrResponseBody) *BindVbrResponse {
	s.Body = v
	return s
}

type ClearSagCipherRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SagId                *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
	SnNumber             *string `json:"SnNumber,omitempty" xml:"SnNumber,omitempty"`
}

func (s ClearSagCipherRequest) String() string {
	return tea.Prettify(s)
}

func (s ClearSagCipherRequest) GoString() string {
	return s.String()
}

func (s *ClearSagCipherRequest) SetOwnerAccount(v string) *ClearSagCipherRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ClearSagCipherRequest) SetOwnerId(v int64) *ClearSagCipherRequest {
	s.OwnerId = &v
	return s
}

func (s *ClearSagCipherRequest) SetRegionId(v string) *ClearSagCipherRequest {
	s.RegionId = &v
	return s
}

func (s *ClearSagCipherRequest) SetResourceOwnerAccount(v string) *ClearSagCipherRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ClearSagCipherRequest) SetResourceOwnerId(v int64) *ClearSagCipherRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ClearSagCipherRequest) SetSagId(v string) *ClearSagCipherRequest {
	s.SagId = &v
	return s
}

func (s *ClearSagCipherRequest) SetSnNumber(v string) *ClearSagCipherRequest {
	s.SnNumber = &v
	return s
}

type ClearSagCipherResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ClearSagCipherResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ClearSagCipherResponseBody) GoString() string {
	return s.String()
}

func (s *ClearSagCipherResponseBody) SetRequestId(v string) *ClearSagCipherResponseBody {
	s.RequestId = &v
	return s
}

type ClearSagCipherResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ClearSagCipherResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ClearSagCipherResponse) String() string {
	return tea.Prettify(s)
}

func (s ClearSagCipherResponse) GoString() string {
	return s.String()
}

func (s *ClearSagCipherResponse) SetHeaders(v map[string]*string) *ClearSagCipherResponse {
	s.Headers = v
	return s
}

func (s *ClearSagCipherResponse) SetStatusCode(v int32) *ClearSagCipherResponse {
	s.StatusCode = &v
	return s
}

func (s *ClearSagCipherResponse) SetBody(v *ClearSagCipherResponseBody) *ClearSagCipherResponse {
	s.Body = v
	return s
}

type ClearSagRouteableAddressRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SagId                *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
}

func (s ClearSagRouteableAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s ClearSagRouteableAddressRequest) GoString() string {
	return s.String()
}

func (s *ClearSagRouteableAddressRequest) SetOwnerAccount(v string) *ClearSagRouteableAddressRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ClearSagRouteableAddressRequest) SetOwnerId(v int64) *ClearSagRouteableAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *ClearSagRouteableAddressRequest) SetRegionId(v string) *ClearSagRouteableAddressRequest {
	s.RegionId = &v
	return s
}

func (s *ClearSagRouteableAddressRequest) SetResourceOwnerAccount(v string) *ClearSagRouteableAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ClearSagRouteableAddressRequest) SetResourceOwnerId(v int64) *ClearSagRouteableAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ClearSagRouteableAddressRequest) SetSagId(v string) *ClearSagRouteableAddressRequest {
	s.SagId = &v
	return s
}

type ClearSagRouteableAddressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ClearSagRouteableAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ClearSagRouteableAddressResponseBody) GoString() string {
	return s.String()
}

func (s *ClearSagRouteableAddressResponseBody) SetRequestId(v string) *ClearSagRouteableAddressResponseBody {
	s.RequestId = &v
	return s
}

type ClearSagRouteableAddressResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ClearSagRouteableAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ClearSagRouteableAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s ClearSagRouteableAddressResponse) GoString() string {
	return s.String()
}

func (s *ClearSagRouteableAddressResponse) SetHeaders(v map[string]*string) *ClearSagRouteableAddressResponse {
	s.Headers = v
	return s
}

func (s *ClearSagRouteableAddressResponse) SetStatusCode(v int32) *ClearSagRouteableAddressResponse {
	s.StatusCode = &v
	return s
}

func (s *ClearSagRouteableAddressResponse) SetBody(v *ClearSagRouteableAddressResponseBody) *ClearSagRouteableAddressResponse {
	s.Body = v
	return s
}

type CreateACLRequest struct {
	AclType              *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateACLRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateACLRequest) GoString() string {
	return s.String()
}

func (s *CreateACLRequest) SetAclType(v string) *CreateACLRequest {
	s.AclType = &v
	return s
}

func (s *CreateACLRequest) SetName(v string) *CreateACLRequest {
	s.Name = &v
	return s
}

func (s *CreateACLRequest) SetOwnerAccount(v string) *CreateACLRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateACLRequest) SetOwnerId(v int64) *CreateACLRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateACLRequest) SetRegionId(v string) *CreateACLRequest {
	s.RegionId = &v
	return s
}

func (s *CreateACLRequest) SetResourceOwnerAccount(v string) *CreateACLRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateACLRequest) SetResourceOwnerId(v int64) *CreateACLRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateACLResponseBody struct {
	AclId           *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AclType         *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateACLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateACLResponseBody) GoString() string {
	return s.String()
}

func (s *CreateACLResponseBody) SetAclId(v string) *CreateACLResponseBody {
	s.AclId = &v
	return s
}

func (s *CreateACLResponseBody) SetAclType(v string) *CreateACLResponseBody {
	s.AclType = &v
	return s
}

func (s *CreateACLResponseBody) SetRequestId(v string) *CreateACLResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateACLResponseBody) SetResourceGroupId(v string) *CreateACLResponseBody {
	s.ResourceGroupId = &v
	return s
}

type CreateACLResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateACLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateACLResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateACLResponse) GoString() string {
	return s.String()
}

func (s *CreateACLResponse) SetHeaders(v map[string]*string) *CreateACLResponse {
	s.Headers = v
	return s
}

func (s *CreateACLResponse) SetStatusCode(v int32) *CreateACLResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateACLResponse) SetBody(v *CreateACLResponseBody) *CreateACLResponse {
	s.Body = v
	return s
}

type CreateCloudConnectNetworkRequest struct {
	CidrBlock            *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SnatCidrBlock        *string `json:"SnatCidrBlock,omitempty" xml:"SnatCidrBlock,omitempty"`
}

func (s CreateCloudConnectNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudConnectNetworkRequest) GoString() string {
	return s.String()
}

func (s *CreateCloudConnectNetworkRequest) SetCidrBlock(v string) *CreateCloudConnectNetworkRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateCloudConnectNetworkRequest) SetDescription(v string) *CreateCloudConnectNetworkRequest {
	s.Description = &v
	return s
}

func (s *CreateCloudConnectNetworkRequest) SetName(v string) *CreateCloudConnectNetworkRequest {
	s.Name = &v
	return s
}

func (s *CreateCloudConnectNetworkRequest) SetOwnerAccount(v string) *CreateCloudConnectNetworkRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateCloudConnectNetworkRequest) SetOwnerId(v int64) *CreateCloudConnectNetworkRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCloudConnectNetworkRequest) SetRegionId(v string) *CreateCloudConnectNetworkRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCloudConnectNetworkRequest) SetResourceOwnerAccount(v string) *CreateCloudConnectNetworkRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateCloudConnectNetworkRequest) SetResourceOwnerId(v int64) *CreateCloudConnectNetworkRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateCloudConnectNetworkRequest) SetSnatCidrBlock(v string) *CreateCloudConnectNetworkRequest {
	s.SnatCidrBlock = &v
	return s
}

type CreateCloudConnectNetworkResponseBody struct {
	CcnId           *string `json:"CcnId,omitempty" xml:"CcnId,omitempty"`
	CidrBlock       *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SnatCidrBlock   *string `json:"SnatCidrBlock,omitempty" xml:"SnatCidrBlock,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateCloudConnectNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudConnectNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCloudConnectNetworkResponseBody) SetCcnId(v string) *CreateCloudConnectNetworkResponseBody {
	s.CcnId = &v
	return s
}

func (s *CreateCloudConnectNetworkResponseBody) SetCidrBlock(v string) *CreateCloudConnectNetworkResponseBody {
	s.CidrBlock = &v
	return s
}

func (s *CreateCloudConnectNetworkResponseBody) SetDescription(v string) *CreateCloudConnectNetworkResponseBody {
	s.Description = &v
	return s
}

func (s *CreateCloudConnectNetworkResponseBody) SetName(v string) *CreateCloudConnectNetworkResponseBody {
	s.Name = &v
	return s
}

func (s *CreateCloudConnectNetworkResponseBody) SetRequestId(v string) *CreateCloudConnectNetworkResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCloudConnectNetworkResponseBody) SetResourceGroupId(v string) *CreateCloudConnectNetworkResponseBody {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateCloudConnectNetworkResponseBody) SetSnatCidrBlock(v string) *CreateCloudConnectNetworkResponseBody {
	s.SnatCidrBlock = &v
	return s
}

func (s *CreateCloudConnectNetworkResponseBody) SetStatus(v string) *CreateCloudConnectNetworkResponseBody {
	s.Status = &v
	return s
}

type CreateCloudConnectNetworkResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateCloudConnectNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCloudConnectNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudConnectNetworkResponse) GoString() string {
	return s.String()
}

func (s *CreateCloudConnectNetworkResponse) SetHeaders(v map[string]*string) *CreateCloudConnectNetworkResponse {
	s.Headers = v
	return s
}

func (s *CreateCloudConnectNetworkResponse) SetStatusCode(v int32) *CreateCloudConnectNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCloudConnectNetworkResponse) SetBody(v *CreateCloudConnectNetworkResponseBody) *CreateCloudConnectNetworkResponse {
	s.Body = v
	return s
}

type CreateEnterpriseCodeRequest struct {
	ClientToken    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	EnterpriseCode *string `json:"EnterpriseCode,omitempty" xml:"EnterpriseCode,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateEnterpriseCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnterpriseCodeRequest) GoString() string {
	return s.String()
}

func (s *CreateEnterpriseCodeRequest) SetClientToken(v string) *CreateEnterpriseCodeRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateEnterpriseCodeRequest) SetEnterpriseCode(v string) *CreateEnterpriseCodeRequest {
	s.EnterpriseCode = &v
	return s
}

func (s *CreateEnterpriseCodeRequest) SetRegionId(v string) *CreateEnterpriseCodeRequest {
	s.RegionId = &v
	return s
}

type CreateEnterpriseCodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEnterpriseCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnterpriseCodeResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEnterpriseCodeResponseBody) SetRequestId(v string) *CreateEnterpriseCodeResponseBody {
	s.RequestId = &v
	return s
}

type CreateEnterpriseCodeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateEnterpriseCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEnterpriseCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEnterpriseCodeResponse) GoString() string {
	return s.String()
}

func (s *CreateEnterpriseCodeResponse) SetHeaders(v map[string]*string) *CreateEnterpriseCodeResponse {
	s.Headers = v
	return s
}

func (s *CreateEnterpriseCodeResponse) SetStatusCode(v int32) *CreateEnterpriseCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEnterpriseCodeResponse) SetBody(v *CreateEnterpriseCodeResponseBody) *CreateEnterpriseCodeResponse {
	s.Body = v
	return s
}

type CreateFlowLogRequest struct {
	ActiveAging          *int32  `json:"ActiveAging,omitempty" xml:"ActiveAging,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InactiveAging        *int32  `json:"InactiveAging,omitempty" xml:"InactiveAging,omitempty"`
	LogstoreName         *string `json:"LogstoreName,omitempty" xml:"LogstoreName,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NetflowServerIp      *string `json:"NetflowServerIp,omitempty" xml:"NetflowServerIp,omitempty"`
	NetflowServerPort    *int32  `json:"NetflowServerPort,omitempty" xml:"NetflowServerPort,omitempty"`
	NetflowVersion       *string `json:"NetflowVersion,omitempty" xml:"NetflowVersion,omitempty"`
	OutputType           *string `json:"OutputType,omitempty" xml:"OutputType,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProjectName          *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SlsRegionId          *string `json:"SlsRegionId,omitempty" xml:"SlsRegionId,omitempty"`
}

func (s CreateFlowLogRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowLogRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowLogRequest) SetActiveAging(v int32) *CreateFlowLogRequest {
	s.ActiveAging = &v
	return s
}

func (s *CreateFlowLogRequest) SetDescription(v string) *CreateFlowLogRequest {
	s.Description = &v
	return s
}

func (s *CreateFlowLogRequest) SetInactiveAging(v int32) *CreateFlowLogRequest {
	s.InactiveAging = &v
	return s
}

func (s *CreateFlowLogRequest) SetLogstoreName(v string) *CreateFlowLogRequest {
	s.LogstoreName = &v
	return s
}

func (s *CreateFlowLogRequest) SetName(v string) *CreateFlowLogRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowLogRequest) SetNetflowServerIp(v string) *CreateFlowLogRequest {
	s.NetflowServerIp = &v
	return s
}

func (s *CreateFlowLogRequest) SetNetflowServerPort(v int32) *CreateFlowLogRequest {
	s.NetflowServerPort = &v
	return s
}

func (s *CreateFlowLogRequest) SetNetflowVersion(v string) *CreateFlowLogRequest {
	s.NetflowVersion = &v
	return s
}

func (s *CreateFlowLogRequest) SetOutputType(v string) *CreateFlowLogRequest {
	s.OutputType = &v
	return s
}

func (s *CreateFlowLogRequest) SetOwnerAccount(v string) *CreateFlowLogRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateFlowLogRequest) SetOwnerId(v int64) *CreateFlowLogRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateFlowLogRequest) SetProjectName(v string) *CreateFlowLogRequest {
	s.ProjectName = &v
	return s
}

func (s *CreateFlowLogRequest) SetRegionId(v string) *CreateFlowLogRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowLogRequest) SetResourceOwnerAccount(v string) *CreateFlowLogRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateFlowLogRequest) SetResourceOwnerId(v int64) *CreateFlowLogRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateFlowLogRequest) SetSlsRegionId(v string) *CreateFlowLogRequest {
	s.SlsRegionId = &v
	return s
}

type CreateFlowLogResponseBody struct {
	FlowLogId       *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateFlowLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowLogResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowLogResponseBody) SetFlowLogId(v string) *CreateFlowLogResponseBody {
	s.FlowLogId = &v
	return s
}

func (s *CreateFlowLogResponseBody) SetRequestId(v string) *CreateFlowLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFlowLogResponseBody) SetResourceGroupId(v string) *CreateFlowLogResponseBody {
	s.ResourceGroupId = &v
	return s
}

type CreateFlowLogResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateFlowLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFlowLogResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowLogResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowLogResponse) SetHeaders(v map[string]*string) *CreateFlowLogResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowLogResponse) SetStatusCode(v int32) *CreateFlowLogResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFlowLogResponse) SetBody(v *CreateFlowLogResponseBody) *CreateFlowLogResponse {
	s.Body = v
	return s
}

type CreateHealthCheckRequest struct {
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DstIpAddr            *string `json:"DstIpAddr,omitempty" xml:"DstIpAddr,omitempty"`
	DstPort              *int32  `json:"DstPort,omitempty" xml:"DstPort,omitempty"`
	FailCountThreshold   *int32  `json:"FailCountThreshold,omitempty" xml:"FailCountThreshold,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProbeCount           *int32  `json:"ProbeCount,omitempty" xml:"ProbeCount,omitempty"`
	ProbeInterval        *int32  `json:"ProbeInterval,omitempty" xml:"ProbeInterval,omitempty"`
	ProbeTimeout         *int32  `json:"ProbeTimeout,omitempty" xml:"ProbeTimeout,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RttFailThreshold     *int32  `json:"RttFailThreshold,omitempty" xml:"RttFailThreshold,omitempty"`
	RttThreshold         *int32  `json:"RttThreshold,omitempty" xml:"RttThreshold,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SrcIpAddr            *string `json:"SrcIpAddr,omitempty" xml:"SrcIpAddr,omitempty"`
	SrcPort              *int32  `json:"SrcPort,omitempty" xml:"SrcPort,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateHealthCheckRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHealthCheckRequest) GoString() string {
	return s.String()
}

func (s *CreateHealthCheckRequest) SetDescription(v string) *CreateHealthCheckRequest {
	s.Description = &v
	return s
}

func (s *CreateHealthCheckRequest) SetDstIpAddr(v string) *CreateHealthCheckRequest {
	s.DstIpAddr = &v
	return s
}

func (s *CreateHealthCheckRequest) SetDstPort(v int32) *CreateHealthCheckRequest {
	s.DstPort = &v
	return s
}

func (s *CreateHealthCheckRequest) SetFailCountThreshold(v int32) *CreateHealthCheckRequest {
	s.FailCountThreshold = &v
	return s
}

func (s *CreateHealthCheckRequest) SetName(v string) *CreateHealthCheckRequest {
	s.Name = &v
	return s
}

func (s *CreateHealthCheckRequest) SetOwnerAccount(v string) *CreateHealthCheckRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateHealthCheckRequest) SetOwnerId(v int64) *CreateHealthCheckRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateHealthCheckRequest) SetProbeCount(v int32) *CreateHealthCheckRequest {
	s.ProbeCount = &v
	return s
}

func (s *CreateHealthCheckRequest) SetProbeInterval(v int32) *CreateHealthCheckRequest {
	s.ProbeInterval = &v
	return s
}

func (s *CreateHealthCheckRequest) SetProbeTimeout(v int32) *CreateHealthCheckRequest {
	s.ProbeTimeout = &v
	return s
}

func (s *CreateHealthCheckRequest) SetRegionId(v string) *CreateHealthCheckRequest {
	s.RegionId = &v
	return s
}

func (s *CreateHealthCheckRequest) SetResourceOwnerAccount(v string) *CreateHealthCheckRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateHealthCheckRequest) SetResourceOwnerId(v int64) *CreateHealthCheckRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateHealthCheckRequest) SetRttFailThreshold(v int32) *CreateHealthCheckRequest {
	s.RttFailThreshold = &v
	return s
}

func (s *CreateHealthCheckRequest) SetRttThreshold(v int32) *CreateHealthCheckRequest {
	s.RttThreshold = &v
	return s
}

func (s *CreateHealthCheckRequest) SetSmartAGId(v string) *CreateHealthCheckRequest {
	s.SmartAGId = &v
	return s
}

func (s *CreateHealthCheckRequest) SetSrcIpAddr(v string) *CreateHealthCheckRequest {
	s.SrcIpAddr = &v
	return s
}

func (s *CreateHealthCheckRequest) SetSrcPort(v int32) *CreateHealthCheckRequest {
	s.SrcPort = &v
	return s
}

func (s *CreateHealthCheckRequest) SetType(v string) *CreateHealthCheckRequest {
	s.Type = &v
	return s
}

type CreateHealthCheckResponseBody struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateHealthCheckResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHealthCheckResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHealthCheckResponseBody) SetInstanceId(v string) *CreateHealthCheckResponseBody {
	s.InstanceId = &v
	return s
}

func (s *CreateHealthCheckResponseBody) SetRequestId(v string) *CreateHealthCheckResponseBody {
	s.RequestId = &v
	return s
}

type CreateHealthCheckResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateHealthCheckResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateHealthCheckResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHealthCheckResponse) GoString() string {
	return s.String()
}

func (s *CreateHealthCheckResponse) SetHeaders(v map[string]*string) *CreateHealthCheckResponse {
	s.Headers = v
	return s
}

func (s *CreateHealthCheckResponse) SetStatusCode(v int32) *CreateHealthCheckResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHealthCheckResponse) SetBody(v *CreateHealthCheckResponseBody) *CreateHealthCheckResponse {
	s.Body = v
	return s
}

type CreateProbeTaskRequest struct {
	Domain                 *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Enable                 *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	PacketNumber           *int32  `json:"PacketNumber,omitempty" xml:"PacketNumber,omitempty"`
	Port                   *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	ProbeTaskSourceAddress *string `json:"ProbeTaskSourceAddress,omitempty" xml:"ProbeTaskSourceAddress,omitempty"`
	Protocol               *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SagId                  *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
	Sn                     *string `json:"Sn,omitempty" xml:"Sn,omitempty"`
	TaskName               *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateProbeTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProbeTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateProbeTaskRequest) SetDomain(v string) *CreateProbeTaskRequest {
	s.Domain = &v
	return s
}

func (s *CreateProbeTaskRequest) SetEnable(v bool) *CreateProbeTaskRequest {
	s.Enable = &v
	return s
}

func (s *CreateProbeTaskRequest) SetPacketNumber(v int32) *CreateProbeTaskRequest {
	s.PacketNumber = &v
	return s
}

func (s *CreateProbeTaskRequest) SetPort(v int32) *CreateProbeTaskRequest {
	s.Port = &v
	return s
}

func (s *CreateProbeTaskRequest) SetProbeTaskSourceAddress(v string) *CreateProbeTaskRequest {
	s.ProbeTaskSourceAddress = &v
	return s
}

func (s *CreateProbeTaskRequest) SetProtocol(v string) *CreateProbeTaskRequest {
	s.Protocol = &v
	return s
}

func (s *CreateProbeTaskRequest) SetRegionId(v string) *CreateProbeTaskRequest {
	s.RegionId = &v
	return s
}

func (s *CreateProbeTaskRequest) SetSagId(v string) *CreateProbeTaskRequest {
	s.SagId = &v
	return s
}

func (s *CreateProbeTaskRequest) SetSn(v string) *CreateProbeTaskRequest {
	s.Sn = &v
	return s
}

func (s *CreateProbeTaskRequest) SetTaskName(v string) *CreateProbeTaskRequest {
	s.TaskName = &v
	return s
}

func (s *CreateProbeTaskRequest) SetType(v string) *CreateProbeTaskRequest {
	s.Type = &v
	return s
}

type CreateProbeTaskResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateProbeTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProbeTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProbeTaskResponseBody) SetCode(v string) *CreateProbeTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateProbeTaskResponseBody) SetData(v string) *CreateProbeTaskResponseBody {
	s.Data = &v
	return s
}

func (s *CreateProbeTaskResponseBody) SetMessage(v string) *CreateProbeTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateProbeTaskResponseBody) SetRequestId(v string) *CreateProbeTaskResponseBody {
	s.RequestId = &v
	return s
}

type CreateProbeTaskResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateProbeTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateProbeTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProbeTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateProbeTaskResponse) SetHeaders(v map[string]*string) *CreateProbeTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateProbeTaskResponse) SetStatusCode(v int32) *CreateProbeTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateProbeTaskResponse) SetBody(v *CreateProbeTaskResponseBody) *CreateProbeTaskResponse {
	s.Body = v
	return s
}

type CreateQosRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QosDescription       *string `json:"QosDescription,omitempty" xml:"QosDescription,omitempty"`
	QosName              *string `json:"QosName,omitempty" xml:"QosName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateQosRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateQosRequest) GoString() string {
	return s.String()
}

func (s *CreateQosRequest) SetOwnerAccount(v string) *CreateQosRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateQosRequest) SetOwnerId(v int64) *CreateQosRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateQosRequest) SetQosDescription(v string) *CreateQosRequest {
	s.QosDescription = &v
	return s
}

func (s *CreateQosRequest) SetQosName(v string) *CreateQosRequest {
	s.QosName = &v
	return s
}

func (s *CreateQosRequest) SetRegionId(v string) *CreateQosRequest {
	s.RegionId = &v
	return s
}

func (s *CreateQosRequest) SetResourceOwnerAccount(v string) *CreateQosRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateQosRequest) SetResourceOwnerId(v int64) *CreateQosRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateQosResponseBody struct {
	QosId           *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateQosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateQosResponseBody) GoString() string {
	return s.String()
}

func (s *CreateQosResponseBody) SetQosId(v string) *CreateQosResponseBody {
	s.QosId = &v
	return s
}

func (s *CreateQosResponseBody) SetRequestId(v string) *CreateQosResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateQosResponseBody) SetResourceGroupId(v string) *CreateQosResponseBody {
	s.ResourceGroupId = &v
	return s
}

type CreateQosResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateQosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateQosResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateQosResponse) GoString() string {
	return s.String()
}

func (s *CreateQosResponse) SetHeaders(v map[string]*string) *CreateQosResponse {
	s.Headers = v
	return s
}

func (s *CreateQosResponse) SetStatusCode(v int32) *CreateQosResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateQosResponse) SetBody(v *CreateQosResponseBody) *CreateQosResponse {
	s.Body = v
	return s
}

type CreateQosCarRequest struct {
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	LimitType            *string `json:"LimitType,omitempty" xml:"LimitType,omitempty"`
	MaxBandwidthAbs      *int32  `json:"MaxBandwidthAbs,omitempty" xml:"MaxBandwidthAbs,omitempty"`
	MaxBandwidthPercent  *int32  `json:"MaxBandwidthPercent,omitempty" xml:"MaxBandwidthPercent,omitempty"`
	MinBandwidthAbs      *int32  `json:"MinBandwidthAbs,omitempty" xml:"MinBandwidthAbs,omitempty"`
	MinBandwidthPercent  *int32  `json:"MinBandwidthPercent,omitempty" xml:"MinBandwidthPercent,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PercentSourceType    *string `json:"PercentSourceType,omitempty" xml:"PercentSourceType,omitempty"`
	Priority             *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	QosId                *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateQosCarRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateQosCarRequest) GoString() string {
	return s.String()
}

func (s *CreateQosCarRequest) SetDescription(v string) *CreateQosCarRequest {
	s.Description = &v
	return s
}

func (s *CreateQosCarRequest) SetLimitType(v string) *CreateQosCarRequest {
	s.LimitType = &v
	return s
}

func (s *CreateQosCarRequest) SetMaxBandwidthAbs(v int32) *CreateQosCarRequest {
	s.MaxBandwidthAbs = &v
	return s
}

func (s *CreateQosCarRequest) SetMaxBandwidthPercent(v int32) *CreateQosCarRequest {
	s.MaxBandwidthPercent = &v
	return s
}

func (s *CreateQosCarRequest) SetMinBandwidthAbs(v int32) *CreateQosCarRequest {
	s.MinBandwidthAbs = &v
	return s
}

func (s *CreateQosCarRequest) SetMinBandwidthPercent(v int32) *CreateQosCarRequest {
	s.MinBandwidthPercent = &v
	return s
}

func (s *CreateQosCarRequest) SetName(v string) *CreateQosCarRequest {
	s.Name = &v
	return s
}

func (s *CreateQosCarRequest) SetOwnerAccount(v string) *CreateQosCarRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateQosCarRequest) SetOwnerId(v int64) *CreateQosCarRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateQosCarRequest) SetPercentSourceType(v string) *CreateQosCarRequest {
	s.PercentSourceType = &v
	return s
}

func (s *CreateQosCarRequest) SetPriority(v int32) *CreateQosCarRequest {
	s.Priority = &v
	return s
}

func (s *CreateQosCarRequest) SetQosId(v string) *CreateQosCarRequest {
	s.QosId = &v
	return s
}

func (s *CreateQosCarRequest) SetRegionId(v string) *CreateQosCarRequest {
	s.RegionId = &v
	return s
}

func (s *CreateQosCarRequest) SetResourceOwnerAccount(v string) *CreateQosCarRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateQosCarRequest) SetResourceOwnerId(v int64) *CreateQosCarRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateQosCarResponseBody struct {
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	LimitType           *string `json:"LimitType,omitempty" xml:"LimitType,omitempty"`
	MaxBandwidthAbs     *int32  `json:"MaxBandwidthAbs,omitempty" xml:"MaxBandwidthAbs,omitempty"`
	MaxBandwidthPercent *int32  `json:"MaxBandwidthPercent,omitempty" xml:"MaxBandwidthPercent,omitempty"`
	MinBandwidthAbs     *int32  `json:"MinBandwidthAbs,omitempty" xml:"MinBandwidthAbs,omitempty"`
	MinBandwidthPercent *int32  `json:"MinBandwidthPercent,omitempty" xml:"MinBandwidthPercent,omitempty"`
	PercentSourceType   *string `json:"PercentSourceType,omitempty" xml:"PercentSourceType,omitempty"`
	Priority            *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	QosCarId            *string `json:"QosCarId,omitempty" xml:"QosCarId,omitempty"`
	QosId               *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	RequestId           *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateQosCarResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateQosCarResponseBody) GoString() string {
	return s.String()
}

func (s *CreateQosCarResponseBody) SetDescription(v string) *CreateQosCarResponseBody {
	s.Description = &v
	return s
}

func (s *CreateQosCarResponseBody) SetLimitType(v string) *CreateQosCarResponseBody {
	s.LimitType = &v
	return s
}

func (s *CreateQosCarResponseBody) SetMaxBandwidthAbs(v int32) *CreateQosCarResponseBody {
	s.MaxBandwidthAbs = &v
	return s
}

func (s *CreateQosCarResponseBody) SetMaxBandwidthPercent(v int32) *CreateQosCarResponseBody {
	s.MaxBandwidthPercent = &v
	return s
}

func (s *CreateQosCarResponseBody) SetMinBandwidthAbs(v int32) *CreateQosCarResponseBody {
	s.MinBandwidthAbs = &v
	return s
}

func (s *CreateQosCarResponseBody) SetMinBandwidthPercent(v int32) *CreateQosCarResponseBody {
	s.MinBandwidthPercent = &v
	return s
}

func (s *CreateQosCarResponseBody) SetPercentSourceType(v string) *CreateQosCarResponseBody {
	s.PercentSourceType = &v
	return s
}

func (s *CreateQosCarResponseBody) SetPriority(v int32) *CreateQosCarResponseBody {
	s.Priority = &v
	return s
}

func (s *CreateQosCarResponseBody) SetQosCarId(v string) *CreateQosCarResponseBody {
	s.QosCarId = &v
	return s
}

func (s *CreateQosCarResponseBody) SetQosId(v string) *CreateQosCarResponseBody {
	s.QosId = &v
	return s
}

func (s *CreateQosCarResponseBody) SetRequestId(v string) *CreateQosCarResponseBody {
	s.RequestId = &v
	return s
}

type CreateQosCarResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateQosCarResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateQosCarResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateQosCarResponse) GoString() string {
	return s.String()
}

func (s *CreateQosCarResponse) SetHeaders(v map[string]*string) *CreateQosCarResponse {
	s.Headers = v
	return s
}

func (s *CreateQosCarResponse) SetStatusCode(v int32) *CreateQosCarResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateQosCarResponse) SetBody(v *CreateQosCarResponseBody) *CreateQosCarResponse {
	s.Body = v
	return s
}

type CreateQosPolicyRequest struct {
	Description          *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidr             *string   `json:"DestCidr,omitempty" xml:"DestCidr,omitempty"`
	DestPortRange        *string   `json:"DestPortRange,omitempty" xml:"DestPortRange,omitempty"`
	DpiGroupIds          []*string `json:"DpiGroupIds,omitempty" xml:"DpiGroupIds,omitempty" type:"Repeated"`
	DpiSignatureIds      []*string `json:"DpiSignatureIds,omitempty" xml:"DpiSignatureIds,omitempty" type:"Repeated"`
	EndTime              *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	IpProtocol           *string   `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Name                 *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Priority             *int32    `json:"Priority,omitempty" xml:"Priority,omitempty"`
	QosId                *string   `json:"QosId,omitempty" xml:"QosId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SourceCidr           *string   `json:"SourceCidr,omitempty" xml:"SourceCidr,omitempty"`
	SourcePortRange      *string   `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	StartTime            *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s CreateQosPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateQosPolicyRequest) GoString() string {
	return s.String()
}

func (s *CreateQosPolicyRequest) SetDescription(v string) *CreateQosPolicyRequest {
	s.Description = &v
	return s
}

func (s *CreateQosPolicyRequest) SetDestCidr(v string) *CreateQosPolicyRequest {
	s.DestCidr = &v
	return s
}

func (s *CreateQosPolicyRequest) SetDestPortRange(v string) *CreateQosPolicyRequest {
	s.DestPortRange = &v
	return s
}

func (s *CreateQosPolicyRequest) SetDpiGroupIds(v []*string) *CreateQosPolicyRequest {
	s.DpiGroupIds = v
	return s
}

func (s *CreateQosPolicyRequest) SetDpiSignatureIds(v []*string) *CreateQosPolicyRequest {
	s.DpiSignatureIds = v
	return s
}

func (s *CreateQosPolicyRequest) SetEndTime(v string) *CreateQosPolicyRequest {
	s.EndTime = &v
	return s
}

func (s *CreateQosPolicyRequest) SetIpProtocol(v string) *CreateQosPolicyRequest {
	s.IpProtocol = &v
	return s
}

func (s *CreateQosPolicyRequest) SetName(v string) *CreateQosPolicyRequest {
	s.Name = &v
	return s
}

func (s *CreateQosPolicyRequest) SetOwnerAccount(v string) *CreateQosPolicyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateQosPolicyRequest) SetOwnerId(v int64) *CreateQosPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateQosPolicyRequest) SetPriority(v int32) *CreateQosPolicyRequest {
	s.Priority = &v
	return s
}

func (s *CreateQosPolicyRequest) SetQosId(v string) *CreateQosPolicyRequest {
	s.QosId = &v
	return s
}

func (s *CreateQosPolicyRequest) SetRegionId(v string) *CreateQosPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *CreateQosPolicyRequest) SetResourceOwnerAccount(v string) *CreateQosPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateQosPolicyRequest) SetResourceOwnerId(v int64) *CreateQosPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateQosPolicyRequest) SetSourceCidr(v string) *CreateQosPolicyRequest {
	s.SourceCidr = &v
	return s
}

func (s *CreateQosPolicyRequest) SetSourcePortRange(v string) *CreateQosPolicyRequest {
	s.SourcePortRange = &v
	return s
}

func (s *CreateQosPolicyRequest) SetStartTime(v string) *CreateQosPolicyRequest {
	s.StartTime = &v
	return s
}

type CreateQosPolicyResponseBody struct {
	Description     *string                                     `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidr        *string                                     `json:"DestCidr,omitempty" xml:"DestCidr,omitempty"`
	DestPortRange   *string                                     `json:"DestPortRange,omitempty" xml:"DestPortRange,omitempty"`
	DpiGroupIds     *CreateQosPolicyResponseBodyDpiGroupIds     `json:"DpiGroupIds,omitempty" xml:"DpiGroupIds,omitempty" type:"Struct"`
	DpiSignatureIds *CreateQosPolicyResponseBodyDpiSignatureIds `json:"DpiSignatureIds,omitempty" xml:"DpiSignatureIds,omitempty" type:"Struct"`
	EndTime         *string                                     `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	IpProtocol      *string                                     `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Name            *string                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	Priority        *int32                                      `json:"Priority,omitempty" xml:"Priority,omitempty"`
	QosId           *string                                     `json:"QosId,omitempty" xml:"QosId,omitempty"`
	QosPolicyId     *string                                     `json:"QosPolicyId,omitempty" xml:"QosPolicyId,omitempty"`
	RequestId       *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SourceCidr      *string                                     `json:"SourceCidr,omitempty" xml:"SourceCidr,omitempty"`
	SourcePortRange *string                                     `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	StartTime       *string                                     `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s CreateQosPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateQosPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateQosPolicyResponseBody) SetDescription(v string) *CreateQosPolicyResponseBody {
	s.Description = &v
	return s
}

func (s *CreateQosPolicyResponseBody) SetDestCidr(v string) *CreateQosPolicyResponseBody {
	s.DestCidr = &v
	return s
}

func (s *CreateQosPolicyResponseBody) SetDestPortRange(v string) *CreateQosPolicyResponseBody {
	s.DestPortRange = &v
	return s
}

func (s *CreateQosPolicyResponseBody) SetDpiGroupIds(v *CreateQosPolicyResponseBodyDpiGroupIds) *CreateQosPolicyResponseBody {
	s.DpiGroupIds = v
	return s
}

func (s *CreateQosPolicyResponseBody) SetDpiSignatureIds(v *CreateQosPolicyResponseBodyDpiSignatureIds) *CreateQosPolicyResponseBody {
	s.DpiSignatureIds = v
	return s
}

func (s *CreateQosPolicyResponseBody) SetEndTime(v string) *CreateQosPolicyResponseBody {
	s.EndTime = &v
	return s
}

func (s *CreateQosPolicyResponseBody) SetIpProtocol(v string) *CreateQosPolicyResponseBody {
	s.IpProtocol = &v
	return s
}

func (s *CreateQosPolicyResponseBody) SetName(v string) *CreateQosPolicyResponseBody {
	s.Name = &v
	return s
}

func (s *CreateQosPolicyResponseBody) SetPriority(v int32) *CreateQosPolicyResponseBody {
	s.Priority = &v
	return s
}

func (s *CreateQosPolicyResponseBody) SetQosId(v string) *CreateQosPolicyResponseBody {
	s.QosId = &v
	return s
}

func (s *CreateQosPolicyResponseBody) SetQosPolicyId(v string) *CreateQosPolicyResponseBody {
	s.QosPolicyId = &v
	return s
}

func (s *CreateQosPolicyResponseBody) SetRequestId(v string) *CreateQosPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateQosPolicyResponseBody) SetSourceCidr(v string) *CreateQosPolicyResponseBody {
	s.SourceCidr = &v
	return s
}

func (s *CreateQosPolicyResponseBody) SetSourcePortRange(v string) *CreateQosPolicyResponseBody {
	s.SourcePortRange = &v
	return s
}

func (s *CreateQosPolicyResponseBody) SetStartTime(v string) *CreateQosPolicyResponseBody {
	s.StartTime = &v
	return s
}

type CreateQosPolicyResponseBodyDpiGroupIds struct {
	DpiGroupId []*string `json:"DpiGroupId,omitempty" xml:"DpiGroupId,omitempty" type:"Repeated"`
}

func (s CreateQosPolicyResponseBodyDpiGroupIds) String() string {
	return tea.Prettify(s)
}

func (s CreateQosPolicyResponseBodyDpiGroupIds) GoString() string {
	return s.String()
}

func (s *CreateQosPolicyResponseBodyDpiGroupIds) SetDpiGroupId(v []*string) *CreateQosPolicyResponseBodyDpiGroupIds {
	s.DpiGroupId = v
	return s
}

type CreateQosPolicyResponseBodyDpiSignatureIds struct {
	DpiSignatureId []*string `json:"DpiSignatureId,omitempty" xml:"DpiSignatureId,omitempty" type:"Repeated"`
}

func (s CreateQosPolicyResponseBodyDpiSignatureIds) String() string {
	return tea.Prettify(s)
}

func (s CreateQosPolicyResponseBodyDpiSignatureIds) GoString() string {
	return s.String()
}

func (s *CreateQosPolicyResponseBodyDpiSignatureIds) SetDpiSignatureId(v []*string) *CreateQosPolicyResponseBodyDpiSignatureIds {
	s.DpiSignatureId = v
	return s
}

type CreateQosPolicyResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateQosPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateQosPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateQosPolicyResponse) GoString() string {
	return s.String()
}

func (s *CreateQosPolicyResponse) SetHeaders(v map[string]*string) *CreateQosPolicyResponse {
	s.Headers = v
	return s
}

func (s *CreateQosPolicyResponse) SetStatusCode(v int32) *CreateQosPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateQosPolicyResponse) SetBody(v *CreateQosPolicyResponseBody) *CreateQosPolicyResponse {
	s.Body = v
	return s
}

type CreateSagExpressConnectInterfaceRequest struct {
	IP                   *string `json:"IP,omitempty" xml:"IP,omitempty"`
	Mask                 *string `json:"Mask,omitempty" xml:"Mask,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PortName             *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
	Vlan                 *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s CreateSagExpressConnectInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSagExpressConnectInterfaceRequest) GoString() string {
	return s.String()
}

func (s *CreateSagExpressConnectInterfaceRequest) SetIP(v string) *CreateSagExpressConnectInterfaceRequest {
	s.IP = &v
	return s
}

func (s *CreateSagExpressConnectInterfaceRequest) SetMask(v string) *CreateSagExpressConnectInterfaceRequest {
	s.Mask = &v
	return s
}

func (s *CreateSagExpressConnectInterfaceRequest) SetOwnerAccount(v string) *CreateSagExpressConnectInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateSagExpressConnectInterfaceRequest) SetOwnerId(v int64) *CreateSagExpressConnectInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSagExpressConnectInterfaceRequest) SetPortName(v string) *CreateSagExpressConnectInterfaceRequest {
	s.PortName = &v
	return s
}

func (s *CreateSagExpressConnectInterfaceRequest) SetRegionId(v string) *CreateSagExpressConnectInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSagExpressConnectInterfaceRequest) SetResourceOwnerAccount(v string) *CreateSagExpressConnectInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSagExpressConnectInterfaceRequest) SetResourceOwnerId(v int64) *CreateSagExpressConnectInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSagExpressConnectInterfaceRequest) SetSmartAGId(v string) *CreateSagExpressConnectInterfaceRequest {
	s.SmartAGId = &v
	return s
}

func (s *CreateSagExpressConnectInterfaceRequest) SetSmartAGSn(v string) *CreateSagExpressConnectInterfaceRequest {
	s.SmartAGSn = &v
	return s
}

func (s *CreateSagExpressConnectInterfaceRequest) SetVlan(v string) *CreateSagExpressConnectInterfaceRequest {
	s.Vlan = &v
	return s
}

type CreateSagExpressConnectInterfaceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateSagExpressConnectInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSagExpressConnectInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSagExpressConnectInterfaceResponseBody) SetRequestId(v string) *CreateSagExpressConnectInterfaceResponseBody {
	s.RequestId = &v
	return s
}

type CreateSagExpressConnectInterfaceResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateSagExpressConnectInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSagExpressConnectInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSagExpressConnectInterfaceResponse) GoString() string {
	return s.String()
}

func (s *CreateSagExpressConnectInterfaceResponse) SetHeaders(v map[string]*string) *CreateSagExpressConnectInterfaceResponse {
	s.Headers = v
	return s
}

func (s *CreateSagExpressConnectInterfaceResponse) SetStatusCode(v int32) *CreateSagExpressConnectInterfaceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSagExpressConnectInterfaceResponse) SetBody(v *CreateSagExpressConnectInterfaceResponseBody) *CreateSagExpressConnectInterfaceResponse {
	s.Body = v
	return s
}

type CreateSagStaticRouteRequest struct {
	DestinationCidr      *string `json:"DestinationCidr,omitempty" xml:"DestinationCidr,omitempty"`
	NextHop              *string `json:"NextHop,omitempty" xml:"NextHop,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PortName             *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
	Vlan                 *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s CreateSagStaticRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSagStaticRouteRequest) GoString() string {
	return s.String()
}

func (s *CreateSagStaticRouteRequest) SetDestinationCidr(v string) *CreateSagStaticRouteRequest {
	s.DestinationCidr = &v
	return s
}

func (s *CreateSagStaticRouteRequest) SetNextHop(v string) *CreateSagStaticRouteRequest {
	s.NextHop = &v
	return s
}

func (s *CreateSagStaticRouteRequest) SetOwnerAccount(v string) *CreateSagStaticRouteRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateSagStaticRouteRequest) SetOwnerId(v int64) *CreateSagStaticRouteRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSagStaticRouteRequest) SetPortName(v string) *CreateSagStaticRouteRequest {
	s.PortName = &v
	return s
}

func (s *CreateSagStaticRouteRequest) SetRegionId(v string) *CreateSagStaticRouteRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSagStaticRouteRequest) SetResourceOwnerAccount(v string) *CreateSagStaticRouteRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSagStaticRouteRequest) SetResourceOwnerId(v int64) *CreateSagStaticRouteRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSagStaticRouteRequest) SetSmartAGId(v string) *CreateSagStaticRouteRequest {
	s.SmartAGId = &v
	return s
}

func (s *CreateSagStaticRouteRequest) SetSmartAGSn(v string) *CreateSagStaticRouteRequest {
	s.SmartAGSn = &v
	return s
}

func (s *CreateSagStaticRouteRequest) SetVlan(v string) *CreateSagStaticRouteRequest {
	s.Vlan = &v
	return s
}

type CreateSagStaticRouteResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateSagStaticRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSagStaticRouteResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSagStaticRouteResponseBody) SetRequestId(v string) *CreateSagStaticRouteResponseBody {
	s.RequestId = &v
	return s
}

type CreateSagStaticRouteResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateSagStaticRouteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSagStaticRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSagStaticRouteResponse) GoString() string {
	return s.String()
}

func (s *CreateSagStaticRouteResponse) SetHeaders(v map[string]*string) *CreateSagStaticRouteResponse {
	s.Headers = v
	return s
}

func (s *CreateSagStaticRouteResponse) SetStatusCode(v int32) *CreateSagStaticRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSagStaticRouteResponse) SetBody(v *CreateSagStaticRouteResponseBody) *CreateSagStaticRouteResponse {
	s.Body = v
	return s
}

type CreateServiceAddressRequest struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SagId       *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
	Sn          *string `json:"Sn,omitempty" xml:"Sn,omitempty"`
}

func (s CreateServiceAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceAddressRequest) GoString() string {
	return s.String()
}

func (s *CreateServiceAddressRequest) SetAddress(v string) *CreateServiceAddressRequest {
	s.Address = &v
	return s
}

func (s *CreateServiceAddressRequest) SetAddressType(v string) *CreateServiceAddressRequest {
	s.AddressType = &v
	return s
}

func (s *CreateServiceAddressRequest) SetRegionId(v string) *CreateServiceAddressRequest {
	s.RegionId = &v
	return s
}

func (s *CreateServiceAddressRequest) SetSagId(v string) *CreateServiceAddressRequest {
	s.SagId = &v
	return s
}

func (s *CreateServiceAddressRequest) SetSn(v string) *CreateServiceAddressRequest {
	s.Sn = &v
	return s
}

type CreateServiceAddressResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateServiceAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceAddressResponseBody) GoString() string {
	return s.String()
}

func (s *CreateServiceAddressResponseBody) SetCode(v string) *CreateServiceAddressResponseBody {
	s.Code = &v
	return s
}

func (s *CreateServiceAddressResponseBody) SetMessage(v string) *CreateServiceAddressResponseBody {
	s.Message = &v
	return s
}

func (s *CreateServiceAddressResponseBody) SetRequestId(v string) *CreateServiceAddressResponseBody {
	s.RequestId = &v
	return s
}

type CreateServiceAddressResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateServiceAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateServiceAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceAddressResponse) GoString() string {
	return s.String()
}

func (s *CreateServiceAddressResponse) SetHeaders(v map[string]*string) *CreateServiceAddressResponse {
	s.Headers = v
	return s
}

func (s *CreateServiceAddressResponse) SetStatusCode(v int32) *CreateServiceAddressResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateServiceAddressResponse) SetBody(v *CreateServiceAddressResponseBody) *CreateServiceAddressResponse {
	s.Body = v
	return s
}

type CreateSmartAccessGatewayRequest struct {
	AlreadyHaveSag       *bool   `json:"AlreadyHaveSag,omitempty" xml:"AlreadyHaveSag,omitempty"`
	AutoPay              *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	BuyerMessage         *string `json:"BuyerMessage,omitempty" xml:"BuyerMessage,omitempty"`
	CPEVersion           *string `json:"CPEVersion,omitempty" xml:"CPEVersion,omitempty"`
	ChargeType           *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	HaType               *string `json:"HaType,omitempty" xml:"HaType,omitempty"`
	HardWareSpec         *string `json:"HardWareSpec,omitempty" xml:"HardWareSpec,omitempty"`
	MaxBandWidth         *int32  `json:"MaxBandWidth,omitempty" xml:"MaxBandWidth,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	ReceiverAddress      *string `json:"ReceiverAddress,omitempty" xml:"ReceiverAddress,omitempty"`
	ReceiverCity         *string `json:"ReceiverCity,omitempty" xml:"ReceiverCity,omitempty"`
	ReceiverCountry      *string `json:"ReceiverCountry,omitempty" xml:"ReceiverCountry,omitempty"`
	ReceiverDistrict     *string `json:"ReceiverDistrict,omitempty" xml:"ReceiverDistrict,omitempty"`
	ReceiverEmail        *string `json:"ReceiverEmail,omitempty" xml:"ReceiverEmail,omitempty"`
	ReceiverMobile       *string `json:"ReceiverMobile,omitempty" xml:"ReceiverMobile,omitempty"`
	ReceiverName         *string `json:"ReceiverName,omitempty" xml:"ReceiverName,omitempty"`
	ReceiverPhone        *string `json:"ReceiverPhone,omitempty" xml:"ReceiverPhone,omitempty"`
	ReceiverState        *string `json:"ReceiverState,omitempty" xml:"ReceiverState,omitempty"`
	ReceiverTown         *string `json:"ReceiverTown,omitempty" xml:"ReceiverTown,omitempty"`
	ReceiverZip          *string `json:"ReceiverZip,omitempty" xml:"ReceiverZip,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateSmartAccessGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmartAccessGatewayRequest) GoString() string {
	return s.String()
}

func (s *CreateSmartAccessGatewayRequest) SetAlreadyHaveSag(v bool) *CreateSmartAccessGatewayRequest {
	s.AlreadyHaveSag = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetAutoPay(v bool) *CreateSmartAccessGatewayRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetBuyerMessage(v string) *CreateSmartAccessGatewayRequest {
	s.BuyerMessage = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetCPEVersion(v string) *CreateSmartAccessGatewayRequest {
	s.CPEVersion = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetChargeType(v string) *CreateSmartAccessGatewayRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetDescription(v string) *CreateSmartAccessGatewayRequest {
	s.Description = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetHaType(v string) *CreateSmartAccessGatewayRequest {
	s.HaType = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetHardWareSpec(v string) *CreateSmartAccessGatewayRequest {
	s.HardWareSpec = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetMaxBandWidth(v int32) *CreateSmartAccessGatewayRequest {
	s.MaxBandWidth = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetName(v string) *CreateSmartAccessGatewayRequest {
	s.Name = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetOwnerAccount(v string) *CreateSmartAccessGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetOwnerId(v int64) *CreateSmartAccessGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetPeriod(v int32) *CreateSmartAccessGatewayRequest {
	s.Period = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetReceiverAddress(v string) *CreateSmartAccessGatewayRequest {
	s.ReceiverAddress = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetReceiverCity(v string) *CreateSmartAccessGatewayRequest {
	s.ReceiverCity = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetReceiverCountry(v string) *CreateSmartAccessGatewayRequest {
	s.ReceiverCountry = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetReceiverDistrict(v string) *CreateSmartAccessGatewayRequest {
	s.ReceiverDistrict = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetReceiverEmail(v string) *CreateSmartAccessGatewayRequest {
	s.ReceiverEmail = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetReceiverMobile(v string) *CreateSmartAccessGatewayRequest {
	s.ReceiverMobile = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetReceiverName(v string) *CreateSmartAccessGatewayRequest {
	s.ReceiverName = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetReceiverPhone(v string) *CreateSmartAccessGatewayRequest {
	s.ReceiverPhone = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetReceiverState(v string) *CreateSmartAccessGatewayRequest {
	s.ReceiverState = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetReceiverTown(v string) *CreateSmartAccessGatewayRequest {
	s.ReceiverTown = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetReceiverZip(v string) *CreateSmartAccessGatewayRequest {
	s.ReceiverZip = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetRegionId(v string) *CreateSmartAccessGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetResourceOwnerAccount(v string) *CreateSmartAccessGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmartAccessGatewayRequest) SetResourceOwnerId(v int64) *CreateSmartAccessGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateSmartAccessGatewayResponseBody struct {
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OrderId         *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SmartAGId       *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s CreateSmartAccessGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSmartAccessGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSmartAccessGatewayResponseBody) SetDescription(v string) *CreateSmartAccessGatewayResponseBody {
	s.Description = &v
	return s
}

func (s *CreateSmartAccessGatewayResponseBody) SetName(v string) *CreateSmartAccessGatewayResponseBody {
	s.Name = &v
	return s
}

func (s *CreateSmartAccessGatewayResponseBody) SetOrderId(v string) *CreateSmartAccessGatewayResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateSmartAccessGatewayResponseBody) SetRequestId(v string) *CreateSmartAccessGatewayResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSmartAccessGatewayResponseBody) SetResourceGroupId(v string) *CreateSmartAccessGatewayResponseBody {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateSmartAccessGatewayResponseBody) SetSmartAGId(v string) *CreateSmartAccessGatewayResponseBody {
	s.SmartAGId = &v
	return s
}

type CreateSmartAccessGatewayResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateSmartAccessGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSmartAccessGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSmartAccessGatewayResponse) GoString() string {
	return s.String()
}

func (s *CreateSmartAccessGatewayResponse) SetHeaders(v map[string]*string) *CreateSmartAccessGatewayResponse {
	s.Headers = v
	return s
}

func (s *CreateSmartAccessGatewayResponse) SetStatusCode(v int32) *CreateSmartAccessGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSmartAccessGatewayResponse) SetBody(v *CreateSmartAccessGatewayResponseBody) *CreateSmartAccessGatewayResponse {
	s.Body = v
	return s
}

type CreateSmartAccessGatewayClientUserRequest struct {
	Bandwidth            *int64  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	ClientIp             *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Password             *string `json:"Password,omitempty" xml:"Password,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	UserMail             *string `json:"UserMail,omitempty" xml:"UserMail,omitempty"`
	UserName             *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s CreateSmartAccessGatewayClientUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmartAccessGatewayClientUserRequest) GoString() string {
	return s.String()
}

func (s *CreateSmartAccessGatewayClientUserRequest) SetBandwidth(v int64) *CreateSmartAccessGatewayClientUserRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserRequest) SetClientIp(v string) *CreateSmartAccessGatewayClientUserRequest {
	s.ClientIp = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserRequest) SetOwnerAccount(v string) *CreateSmartAccessGatewayClientUserRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserRequest) SetOwnerId(v int64) *CreateSmartAccessGatewayClientUserRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserRequest) SetPassword(v string) *CreateSmartAccessGatewayClientUserRequest {
	s.Password = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserRequest) SetRegionId(v string) *CreateSmartAccessGatewayClientUserRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserRequest) SetResourceOwnerAccount(v string) *CreateSmartAccessGatewayClientUserRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserRequest) SetResourceOwnerId(v int64) *CreateSmartAccessGatewayClientUserRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserRequest) SetSmartAGId(v string) *CreateSmartAccessGatewayClientUserRequest {
	s.SmartAGId = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserRequest) SetUserMail(v string) *CreateSmartAccessGatewayClientUserRequest {
	s.UserMail = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserRequest) SetUserName(v string) *CreateSmartAccessGatewayClientUserRequest {
	s.UserName = &v
	return s
}

type CreateSmartAccessGatewayClientUserResponseBody struct {
	Bandwidth *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	ClientIp  *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserMail  *string `json:"UserMail,omitempty" xml:"UserMail,omitempty"`
	UserName  *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s CreateSmartAccessGatewayClientUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSmartAccessGatewayClientUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSmartAccessGatewayClientUserResponseBody) SetBandwidth(v int32) *CreateSmartAccessGatewayClientUserResponseBody {
	s.Bandwidth = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserResponseBody) SetClientIp(v string) *CreateSmartAccessGatewayClientUserResponseBody {
	s.ClientIp = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserResponseBody) SetRequestId(v string) *CreateSmartAccessGatewayClientUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserResponseBody) SetUserMail(v string) *CreateSmartAccessGatewayClientUserResponseBody {
	s.UserMail = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserResponseBody) SetUserName(v string) *CreateSmartAccessGatewayClientUserResponseBody {
	s.UserName = &v
	return s
}

type CreateSmartAccessGatewayClientUserResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateSmartAccessGatewayClientUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSmartAccessGatewayClientUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSmartAccessGatewayClientUserResponse) GoString() string {
	return s.String()
}

func (s *CreateSmartAccessGatewayClientUserResponse) SetHeaders(v map[string]*string) *CreateSmartAccessGatewayClientUserResponse {
	s.Headers = v
	return s
}

func (s *CreateSmartAccessGatewayClientUserResponse) SetStatusCode(v int32) *CreateSmartAccessGatewayClientUserResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSmartAccessGatewayClientUserResponse) SetBody(v *CreateSmartAccessGatewayClientUserResponseBody) *CreateSmartAccessGatewayClientUserResponse {
	s.Body = v
	return s
}

type CreateSmartAccessGatewaySoftwareRequest struct {
	AutoPay              *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	ChargeType           *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	DataPlan             *int64  `json:"DataPlan,omitempty" xml:"DataPlan,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	UserCount            *int32  `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
}

func (s CreateSmartAccessGatewaySoftwareRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmartAccessGatewaySoftwareRequest) GoString() string {
	return s.String()
}

func (s *CreateSmartAccessGatewaySoftwareRequest) SetAutoPay(v bool) *CreateSmartAccessGatewaySoftwareRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareRequest) SetChargeType(v string) *CreateSmartAccessGatewaySoftwareRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareRequest) SetDataPlan(v int64) *CreateSmartAccessGatewaySoftwareRequest {
	s.DataPlan = &v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareRequest) SetOwnerAccount(v string) *CreateSmartAccessGatewaySoftwareRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareRequest) SetOwnerId(v int64) *CreateSmartAccessGatewaySoftwareRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareRequest) SetPeriod(v int32) *CreateSmartAccessGatewaySoftwareRequest {
	s.Period = &v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareRequest) SetRegionId(v string) *CreateSmartAccessGatewaySoftwareRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareRequest) SetResourceOwnerAccount(v string) *CreateSmartAccessGatewaySoftwareRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareRequest) SetResourceOwnerId(v int64) *CreateSmartAccessGatewaySoftwareRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareRequest) SetUserCount(v int32) *CreateSmartAccessGatewaySoftwareRequest {
	s.UserCount = &v
	return s
}

type CreateSmartAccessGatewaySoftwareResponseBody struct {
	OrderId         *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SmartAGId       *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s CreateSmartAccessGatewaySoftwareResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSmartAccessGatewaySoftwareResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSmartAccessGatewaySoftwareResponseBody) SetOrderId(v string) *CreateSmartAccessGatewaySoftwareResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareResponseBody) SetRequestId(v string) *CreateSmartAccessGatewaySoftwareResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareResponseBody) SetResourceGroupId(v string) *CreateSmartAccessGatewaySoftwareResponseBody {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareResponseBody) SetSmartAGId(v string) *CreateSmartAccessGatewaySoftwareResponseBody {
	s.SmartAGId = &v
	return s
}

type CreateSmartAccessGatewaySoftwareResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateSmartAccessGatewaySoftwareResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSmartAccessGatewaySoftwareResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSmartAccessGatewaySoftwareResponse) GoString() string {
	return s.String()
}

func (s *CreateSmartAccessGatewaySoftwareResponse) SetHeaders(v map[string]*string) *CreateSmartAccessGatewaySoftwareResponse {
	s.Headers = v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareResponse) SetStatusCode(v int32) *CreateSmartAccessGatewaySoftwareResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSmartAccessGatewaySoftwareResponse) SetBody(v *CreateSmartAccessGatewaySoftwareResponseBody) *CreateSmartAccessGatewaySoftwareResponse {
	s.Body = v
	return s
}

type DeactiveFlowLogRequest struct {
	FlowLogId            *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeactiveFlowLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DeactiveFlowLogRequest) GoString() string {
	return s.String()
}

func (s *DeactiveFlowLogRequest) SetFlowLogId(v string) *DeactiveFlowLogRequest {
	s.FlowLogId = &v
	return s
}

func (s *DeactiveFlowLogRequest) SetOwnerAccount(v string) *DeactiveFlowLogRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeactiveFlowLogRequest) SetOwnerId(v int64) *DeactiveFlowLogRequest {
	s.OwnerId = &v
	return s
}

func (s *DeactiveFlowLogRequest) SetRegionId(v string) *DeactiveFlowLogRequest {
	s.RegionId = &v
	return s
}

func (s *DeactiveFlowLogRequest) SetResourceOwnerAccount(v string) *DeactiveFlowLogRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeactiveFlowLogRequest) SetResourceOwnerId(v int64) *DeactiveFlowLogRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeactiveFlowLogResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeactiveFlowLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeactiveFlowLogResponseBody) GoString() string {
	return s.String()
}

func (s *DeactiveFlowLogResponseBody) SetRequestId(v string) *DeactiveFlowLogResponseBody {
	s.RequestId = &v
	return s
}

type DeactiveFlowLogResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeactiveFlowLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeactiveFlowLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DeactiveFlowLogResponse) GoString() string {
	return s.String()
}

func (s *DeactiveFlowLogResponse) SetHeaders(v map[string]*string) *DeactiveFlowLogResponse {
	s.Headers = v
	return s
}

func (s *DeactiveFlowLogResponse) SetStatusCode(v int32) *DeactiveFlowLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DeactiveFlowLogResponse) SetBody(v *DeactiveFlowLogResponseBody) *DeactiveFlowLogResponse {
	s.Body = v
	return s
}

type DeleteACLRequest struct {
	AclId                *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteACLRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteACLRequest) GoString() string {
	return s.String()
}

func (s *DeleteACLRequest) SetAclId(v string) *DeleteACLRequest {
	s.AclId = &v
	return s
}

func (s *DeleteACLRequest) SetOwnerAccount(v string) *DeleteACLRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteACLRequest) SetOwnerId(v int64) *DeleteACLRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteACLRequest) SetRegionId(v string) *DeleteACLRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteACLRequest) SetResourceOwnerAccount(v string) *DeleteACLRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteACLRequest) SetResourceOwnerId(v int64) *DeleteACLRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteACLResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteACLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteACLResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteACLResponseBody) SetRequestId(v string) *DeleteACLResponseBody {
	s.RequestId = &v
	return s
}

type DeleteACLResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteACLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteACLResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteACLResponse) GoString() string {
	return s.String()
}

func (s *DeleteACLResponse) SetHeaders(v map[string]*string) *DeleteACLResponse {
	s.Headers = v
	return s
}

func (s *DeleteACLResponse) SetStatusCode(v int32) *DeleteACLResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteACLResponse) SetBody(v *DeleteACLResponseBody) *DeleteACLResponse {
	s.Body = v
	return s
}

type DeleteACLRuleRequest struct {
	AclId                *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AcrId                *string `json:"AcrId,omitempty" xml:"AcrId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteACLRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteACLRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteACLRuleRequest) SetAclId(v string) *DeleteACLRuleRequest {
	s.AclId = &v
	return s
}

func (s *DeleteACLRuleRequest) SetAcrId(v string) *DeleteACLRuleRequest {
	s.AcrId = &v
	return s
}

func (s *DeleteACLRuleRequest) SetOwnerAccount(v string) *DeleteACLRuleRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteACLRuleRequest) SetOwnerId(v int64) *DeleteACLRuleRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteACLRuleRequest) SetRegionId(v string) *DeleteACLRuleRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteACLRuleRequest) SetResourceOwnerAccount(v string) *DeleteACLRuleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteACLRuleRequest) SetResourceOwnerId(v int64) *DeleteACLRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteACLRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteACLRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteACLRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteACLRuleResponseBody) SetRequestId(v string) *DeleteACLRuleResponseBody {
	s.RequestId = &v
	return s
}

type DeleteACLRuleResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteACLRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteACLRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteACLRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteACLRuleResponse) SetHeaders(v map[string]*string) *DeleteACLRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteACLRuleResponse) SetStatusCode(v int32) *DeleteACLRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteACLRuleResponse) SetBody(v *DeleteACLRuleResponseBody) *DeleteACLRuleResponse {
	s.Body = v
	return s
}

type DeleteCloudConnectNetworkRequest struct {
	CcnId                *string `json:"CcnId,omitempty" xml:"CcnId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteCloudConnectNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudConnectNetworkRequest) GoString() string {
	return s.String()
}

func (s *DeleteCloudConnectNetworkRequest) SetCcnId(v string) *DeleteCloudConnectNetworkRequest {
	s.CcnId = &v
	return s
}

func (s *DeleteCloudConnectNetworkRequest) SetOwnerAccount(v string) *DeleteCloudConnectNetworkRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteCloudConnectNetworkRequest) SetOwnerId(v int64) *DeleteCloudConnectNetworkRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCloudConnectNetworkRequest) SetRegionId(v string) *DeleteCloudConnectNetworkRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteCloudConnectNetworkRequest) SetResourceOwnerAccount(v string) *DeleteCloudConnectNetworkRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteCloudConnectNetworkRequest) SetResourceOwnerId(v int64) *DeleteCloudConnectNetworkRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteCloudConnectNetworkResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCloudConnectNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudConnectNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCloudConnectNetworkResponseBody) SetRequestId(v string) *DeleteCloudConnectNetworkResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCloudConnectNetworkResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCloudConnectNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCloudConnectNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudConnectNetworkResponse) GoString() string {
	return s.String()
}

func (s *DeleteCloudConnectNetworkResponse) SetHeaders(v map[string]*string) *DeleteCloudConnectNetworkResponse {
	s.Headers = v
	return s
}

func (s *DeleteCloudConnectNetworkResponse) SetStatusCode(v int32) *DeleteCloudConnectNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCloudConnectNetworkResponse) SetBody(v *DeleteCloudConnectNetworkResponseBody) *DeleteCloudConnectNetworkResponse {
	s.Body = v
	return s
}

type DeleteDnatEntryRequest struct {
	DnatEntryId          *string `json:"DnatEntryId,omitempty" xml:"DnatEntryId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SagId                *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
}

func (s DeleteDnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDnatEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteDnatEntryRequest) SetDnatEntryId(v string) *DeleteDnatEntryRequest {
	s.DnatEntryId = &v
	return s
}

func (s *DeleteDnatEntryRequest) SetOwnerAccount(v string) *DeleteDnatEntryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteDnatEntryRequest) SetOwnerId(v int64) *DeleteDnatEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDnatEntryRequest) SetRegionId(v string) *DeleteDnatEntryRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteDnatEntryRequest) SetResourceOwnerAccount(v string) *DeleteDnatEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDnatEntryRequest) SetResourceOwnerId(v int64) *DeleteDnatEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteDnatEntryRequest) SetSagId(v string) *DeleteDnatEntryRequest {
	s.SagId = &v
	return s
}

type DeleteDnatEntryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDnatEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDnatEntryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDnatEntryResponseBody) SetRequestId(v string) *DeleteDnatEntryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDnatEntryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteDnatEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDnatEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteDnatEntryResponse) SetHeaders(v map[string]*string) *DeleteDnatEntryResponse {
	s.Headers = v
	return s
}

func (s *DeleteDnatEntryResponse) SetStatusCode(v int32) *DeleteDnatEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDnatEntryResponse) SetBody(v *DeleteDnatEntryResponseBody) *DeleteDnatEntryResponse {
	s.Body = v
	return s
}

type DeleteEnterpriseCodeRequest struct {
	ClientToken    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	EnterpriseCode *string `json:"EnterpriseCode,omitempty" xml:"EnterpriseCode,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteEnterpriseCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnterpriseCodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnterpriseCodeRequest) SetClientToken(v string) *DeleteEnterpriseCodeRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteEnterpriseCodeRequest) SetEnterpriseCode(v string) *DeleteEnterpriseCodeRequest {
	s.EnterpriseCode = &v
	return s
}

func (s *DeleteEnterpriseCodeRequest) SetRegionId(v string) *DeleteEnterpriseCodeRequest {
	s.RegionId = &v
	return s
}

type DeleteEnterpriseCodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEnterpriseCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnterpriseCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEnterpriseCodeResponseBody) SetRequestId(v string) *DeleteEnterpriseCodeResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEnterpriseCodeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteEnterpriseCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEnterpriseCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnterpriseCodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteEnterpriseCodeResponse) SetHeaders(v map[string]*string) *DeleteEnterpriseCodeResponse {
	s.Headers = v
	return s
}

func (s *DeleteEnterpriseCodeResponse) SetStatusCode(v int32) *DeleteEnterpriseCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEnterpriseCodeResponse) SetBody(v *DeleteEnterpriseCodeResponseBody) *DeleteEnterpriseCodeResponse {
	s.Body = v
	return s
}

type DeleteFlowLogRequest struct {
	FlowLogId            *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteFlowLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowLogRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowLogRequest) SetFlowLogId(v string) *DeleteFlowLogRequest {
	s.FlowLogId = &v
	return s
}

func (s *DeleteFlowLogRequest) SetOwnerAccount(v string) *DeleteFlowLogRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteFlowLogRequest) SetOwnerId(v int64) *DeleteFlowLogRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteFlowLogRequest) SetRegionId(v string) *DeleteFlowLogRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFlowLogRequest) SetResourceOwnerAccount(v string) *DeleteFlowLogRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteFlowLogRequest) SetResourceOwnerId(v int64) *DeleteFlowLogRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteFlowLogResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFlowLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowLogResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowLogResponseBody) SetRequestId(v string) *DeleteFlowLogResponseBody {
	s.RequestId = &v
	return s
}

type DeleteFlowLogResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteFlowLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteFlowLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowLogResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowLogResponse) SetHeaders(v map[string]*string) *DeleteFlowLogResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowLogResponse) SetStatusCode(v int32) *DeleteFlowLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFlowLogResponse) SetBody(v *DeleteFlowLogResponseBody) *DeleteFlowLogResponse {
	s.Body = v
	return s
}

type DeleteHealthCheckRequest struct {
	HcInstanceId         *string `json:"HcInstanceId,omitempty" xml:"HcInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteHealthCheckRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHealthCheckRequest) GoString() string {
	return s.String()
}

func (s *DeleteHealthCheckRequest) SetHcInstanceId(v string) *DeleteHealthCheckRequest {
	s.HcInstanceId = &v
	return s
}

func (s *DeleteHealthCheckRequest) SetOwnerAccount(v string) *DeleteHealthCheckRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteHealthCheckRequest) SetOwnerId(v int64) *DeleteHealthCheckRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteHealthCheckRequest) SetRegionId(v string) *DeleteHealthCheckRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteHealthCheckRequest) SetResourceOwnerAccount(v string) *DeleteHealthCheckRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteHealthCheckRequest) SetResourceOwnerId(v int64) *DeleteHealthCheckRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteHealthCheckResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteHealthCheckResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHealthCheckResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHealthCheckResponseBody) SetRequestId(v string) *DeleteHealthCheckResponseBody {
	s.RequestId = &v
	return s
}

type DeleteHealthCheckResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteHealthCheckResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteHealthCheckResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHealthCheckResponse) GoString() string {
	return s.String()
}

func (s *DeleteHealthCheckResponse) SetHeaders(v map[string]*string) *DeleteHealthCheckResponse {
	s.Headers = v
	return s
}

func (s *DeleteHealthCheckResponse) SetStatusCode(v int32) *DeleteHealthCheckResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHealthCheckResponse) SetBody(v *DeleteHealthCheckResponseBody) *DeleteHealthCheckResponse {
	s.Body = v
	return s
}

type DeleteProbeTaskRequest struct {
	ProbeTaskId *string `json:"ProbeTaskId,omitempty" xml:"ProbeTaskId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SagId       *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
	Sn          *string `json:"Sn,omitempty" xml:"Sn,omitempty"`
}

func (s DeleteProbeTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProbeTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteProbeTaskRequest) SetProbeTaskId(v string) *DeleteProbeTaskRequest {
	s.ProbeTaskId = &v
	return s
}

func (s *DeleteProbeTaskRequest) SetRegionId(v string) *DeleteProbeTaskRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteProbeTaskRequest) SetSagId(v string) *DeleteProbeTaskRequest {
	s.SagId = &v
	return s
}

func (s *DeleteProbeTaskRequest) SetSn(v string) *DeleteProbeTaskRequest {
	s.Sn = &v
	return s
}

type DeleteProbeTaskResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteProbeTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProbeTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProbeTaskResponseBody) SetCode(v string) *DeleteProbeTaskResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteProbeTaskResponseBody) SetMessage(v string) *DeleteProbeTaskResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteProbeTaskResponseBody) SetRequestId(v string) *DeleteProbeTaskResponseBody {
	s.RequestId = &v
	return s
}

type DeleteProbeTaskResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteProbeTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteProbeTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProbeTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteProbeTaskResponse) SetHeaders(v map[string]*string) *DeleteProbeTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteProbeTaskResponse) SetStatusCode(v int32) *DeleteProbeTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteProbeTaskResponse) SetBody(v *DeleteProbeTaskResponseBody) *DeleteProbeTaskResponse {
	s.Body = v
	return s
}

type DeleteQosRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QosId                *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteQosRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteQosRequest) GoString() string {
	return s.String()
}

func (s *DeleteQosRequest) SetOwnerAccount(v string) *DeleteQosRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteQosRequest) SetOwnerId(v int64) *DeleteQosRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteQosRequest) SetQosId(v string) *DeleteQosRequest {
	s.QosId = &v
	return s
}

func (s *DeleteQosRequest) SetRegionId(v string) *DeleteQosRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteQosRequest) SetResourceOwnerAccount(v string) *DeleteQosRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteQosRequest) SetResourceOwnerId(v int64) *DeleteQosRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteQosResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteQosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteQosResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteQosResponseBody) SetRequestId(v string) *DeleteQosResponseBody {
	s.RequestId = &v
	return s
}

type DeleteQosResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteQosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteQosResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteQosResponse) GoString() string {
	return s.String()
}

func (s *DeleteQosResponse) SetHeaders(v map[string]*string) *DeleteQosResponse {
	s.Headers = v
	return s
}

func (s *DeleteQosResponse) SetStatusCode(v int32) *DeleteQosResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteQosResponse) SetBody(v *DeleteQosResponseBody) *DeleteQosResponse {
	s.Body = v
	return s
}

type DeleteQosCarRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QosCarId             *string `json:"QosCarId,omitempty" xml:"QosCarId,omitempty"`
	QosId                *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteQosCarRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteQosCarRequest) GoString() string {
	return s.String()
}

func (s *DeleteQosCarRequest) SetOwnerAccount(v string) *DeleteQosCarRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteQosCarRequest) SetOwnerId(v int64) *DeleteQosCarRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteQosCarRequest) SetQosCarId(v string) *DeleteQosCarRequest {
	s.QosCarId = &v
	return s
}

func (s *DeleteQosCarRequest) SetQosId(v string) *DeleteQosCarRequest {
	s.QosId = &v
	return s
}

func (s *DeleteQosCarRequest) SetRegionId(v string) *DeleteQosCarRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteQosCarRequest) SetResourceOwnerAccount(v string) *DeleteQosCarRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteQosCarRequest) SetResourceOwnerId(v int64) *DeleteQosCarRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteQosCarResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteQosCarResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteQosCarResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteQosCarResponseBody) SetRequestId(v string) *DeleteQosCarResponseBody {
	s.RequestId = &v
	return s
}

type DeleteQosCarResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteQosCarResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteQosCarResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteQosCarResponse) GoString() string {
	return s.String()
}

func (s *DeleteQosCarResponse) SetHeaders(v map[string]*string) *DeleteQosCarResponse {
	s.Headers = v
	return s
}

func (s *DeleteQosCarResponse) SetStatusCode(v int32) *DeleteQosCarResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteQosCarResponse) SetBody(v *DeleteQosCarResponseBody) *DeleteQosCarResponse {
	s.Body = v
	return s
}

type DeleteQosPolicyRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QosId                *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	QosPolicyId          *string `json:"QosPolicyId,omitempty" xml:"QosPolicyId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteQosPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteQosPolicyRequest) GoString() string {
	return s.String()
}

func (s *DeleteQosPolicyRequest) SetOwnerAccount(v string) *DeleteQosPolicyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteQosPolicyRequest) SetOwnerId(v int64) *DeleteQosPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteQosPolicyRequest) SetQosId(v string) *DeleteQosPolicyRequest {
	s.QosId = &v
	return s
}

func (s *DeleteQosPolicyRequest) SetQosPolicyId(v string) *DeleteQosPolicyRequest {
	s.QosPolicyId = &v
	return s
}

func (s *DeleteQosPolicyRequest) SetRegionId(v string) *DeleteQosPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteQosPolicyRequest) SetResourceOwnerAccount(v string) *DeleteQosPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteQosPolicyRequest) SetResourceOwnerId(v int64) *DeleteQosPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteQosPolicyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteQosPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteQosPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteQosPolicyResponseBody) SetRequestId(v string) *DeleteQosPolicyResponseBody {
	s.RequestId = &v
	return s
}

type DeleteQosPolicyResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteQosPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteQosPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteQosPolicyResponse) GoString() string {
	return s.String()
}

func (s *DeleteQosPolicyResponse) SetHeaders(v map[string]*string) *DeleteQosPolicyResponse {
	s.Headers = v
	return s
}

func (s *DeleteQosPolicyResponse) SetStatusCode(v int32) *DeleteQosPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteQosPolicyResponse) SetBody(v *DeleteQosPolicyResponseBody) *DeleteQosPolicyResponse {
	s.Body = v
	return s
}

type DeleteRouteDistributionStrategyRequest struct {
	DestCidrBlock        *string `json:"DestCidrBlock,omitempty" xml:"DestCidrBlock,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RouteSource          *string `json:"RouteSource,omitempty" xml:"RouteSource,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SourceType           *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s DeleteRouteDistributionStrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteDistributionStrategyRequest) GoString() string {
	return s.String()
}

func (s *DeleteRouteDistributionStrategyRequest) SetDestCidrBlock(v string) *DeleteRouteDistributionStrategyRequest {
	s.DestCidrBlock = &v
	return s
}

func (s *DeleteRouteDistributionStrategyRequest) SetOwnerAccount(v string) *DeleteRouteDistributionStrategyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteRouteDistributionStrategyRequest) SetOwnerId(v int64) *DeleteRouteDistributionStrategyRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteRouteDistributionStrategyRequest) SetRegionId(v string) *DeleteRouteDistributionStrategyRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteRouteDistributionStrategyRequest) SetResourceOwnerAccount(v string) *DeleteRouteDistributionStrategyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteRouteDistributionStrategyRequest) SetResourceOwnerId(v int64) *DeleteRouteDistributionStrategyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteRouteDistributionStrategyRequest) SetRouteSource(v string) *DeleteRouteDistributionStrategyRequest {
	s.RouteSource = &v
	return s
}

func (s *DeleteRouteDistributionStrategyRequest) SetSmartAGId(v string) *DeleteRouteDistributionStrategyRequest {
	s.SmartAGId = &v
	return s
}

func (s *DeleteRouteDistributionStrategyRequest) SetSourceType(v string) *DeleteRouteDistributionStrategyRequest {
	s.SourceType = &v
	return s
}

type DeleteRouteDistributionStrategyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteRouteDistributionStrategyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteDistributionStrategyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRouteDistributionStrategyResponseBody) SetRequestId(v string) *DeleteRouteDistributionStrategyResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRouteDistributionStrategyResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteRouteDistributionStrategyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteRouteDistributionStrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteDistributionStrategyResponse) GoString() string {
	return s.String()
}

func (s *DeleteRouteDistributionStrategyResponse) SetHeaders(v map[string]*string) *DeleteRouteDistributionStrategyResponse {
	s.Headers = v
	return s
}

func (s *DeleteRouteDistributionStrategyResponse) SetStatusCode(v int32) *DeleteRouteDistributionStrategyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRouteDistributionStrategyResponse) SetBody(v *DeleteRouteDistributionStrategyResponseBody) *DeleteRouteDistributionStrategyResponse {
	s.Body = v
	return s
}

type DeleteSagExpressConnectInterfaceRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PortName             *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
	Vlan                 *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s DeleteSagExpressConnectInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSagExpressConnectInterfaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteSagExpressConnectInterfaceRequest) SetOwnerAccount(v string) *DeleteSagExpressConnectInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteSagExpressConnectInterfaceRequest) SetOwnerId(v int64) *DeleteSagExpressConnectInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSagExpressConnectInterfaceRequest) SetPortName(v string) *DeleteSagExpressConnectInterfaceRequest {
	s.PortName = &v
	return s
}

func (s *DeleteSagExpressConnectInterfaceRequest) SetRegionId(v string) *DeleteSagExpressConnectInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSagExpressConnectInterfaceRequest) SetResourceOwnerAccount(v string) *DeleteSagExpressConnectInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteSagExpressConnectInterfaceRequest) SetResourceOwnerId(v int64) *DeleteSagExpressConnectInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteSagExpressConnectInterfaceRequest) SetSmartAGId(v string) *DeleteSagExpressConnectInterfaceRequest {
	s.SmartAGId = &v
	return s
}

func (s *DeleteSagExpressConnectInterfaceRequest) SetSmartAGSn(v string) *DeleteSagExpressConnectInterfaceRequest {
	s.SmartAGSn = &v
	return s
}

func (s *DeleteSagExpressConnectInterfaceRequest) SetVlan(v string) *DeleteSagExpressConnectInterfaceRequest {
	s.Vlan = &v
	return s
}

type DeleteSagExpressConnectInterfaceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSagExpressConnectInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSagExpressConnectInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSagExpressConnectInterfaceResponseBody) SetRequestId(v string) *DeleteSagExpressConnectInterfaceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSagExpressConnectInterfaceResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSagExpressConnectInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSagExpressConnectInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSagExpressConnectInterfaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteSagExpressConnectInterfaceResponse) SetHeaders(v map[string]*string) *DeleteSagExpressConnectInterfaceResponse {
	s.Headers = v
	return s
}

func (s *DeleteSagExpressConnectInterfaceResponse) SetStatusCode(v int32) *DeleteSagExpressConnectInterfaceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSagExpressConnectInterfaceResponse) SetBody(v *DeleteSagExpressConnectInterfaceResponseBody) *DeleteSagExpressConnectInterfaceResponse {
	s.Body = v
	return s
}

type DeleteSagStaticRouteRequest struct {
	DestinationCidr      *string `json:"DestinationCidr,omitempty" xml:"DestinationCidr,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PortName             *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
	Vlan                 *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s DeleteSagStaticRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSagStaticRouteRequest) GoString() string {
	return s.String()
}

func (s *DeleteSagStaticRouteRequest) SetDestinationCidr(v string) *DeleteSagStaticRouteRequest {
	s.DestinationCidr = &v
	return s
}

func (s *DeleteSagStaticRouteRequest) SetOwnerAccount(v string) *DeleteSagStaticRouteRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteSagStaticRouteRequest) SetOwnerId(v int64) *DeleteSagStaticRouteRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSagStaticRouteRequest) SetPortName(v string) *DeleteSagStaticRouteRequest {
	s.PortName = &v
	return s
}

func (s *DeleteSagStaticRouteRequest) SetRegionId(v string) *DeleteSagStaticRouteRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSagStaticRouteRequest) SetResourceOwnerAccount(v string) *DeleteSagStaticRouteRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteSagStaticRouteRequest) SetResourceOwnerId(v int64) *DeleteSagStaticRouteRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteSagStaticRouteRequest) SetSmartAGId(v string) *DeleteSagStaticRouteRequest {
	s.SmartAGId = &v
	return s
}

func (s *DeleteSagStaticRouteRequest) SetSmartAGSn(v string) *DeleteSagStaticRouteRequest {
	s.SmartAGSn = &v
	return s
}

func (s *DeleteSagStaticRouteRequest) SetVlan(v string) *DeleteSagStaticRouteRequest {
	s.Vlan = &v
	return s
}

type DeleteSagStaticRouteResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSagStaticRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSagStaticRouteResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSagStaticRouteResponseBody) SetRequestId(v string) *DeleteSagStaticRouteResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSagStaticRouteResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSagStaticRouteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSagStaticRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSagStaticRouteResponse) GoString() string {
	return s.String()
}

func (s *DeleteSagStaticRouteResponse) SetHeaders(v map[string]*string) *DeleteSagStaticRouteResponse {
	s.Headers = v
	return s
}

func (s *DeleteSagStaticRouteResponse) SetStatusCode(v int32) *DeleteSagStaticRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSagStaticRouteResponse) SetBody(v *DeleteSagStaticRouteResponseBody) *DeleteSagStaticRouteResponse {
	s.Body = v
	return s
}

type DeleteServiceAddressRequest struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SagId       *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
	Sn          *string `json:"Sn,omitempty" xml:"Sn,omitempty"`
}

func (s DeleteServiceAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceAddressRequest) GoString() string {
	return s.String()
}

func (s *DeleteServiceAddressRequest) SetAddress(v string) *DeleteServiceAddressRequest {
	s.Address = &v
	return s
}

func (s *DeleteServiceAddressRequest) SetAddressType(v string) *DeleteServiceAddressRequest {
	s.AddressType = &v
	return s
}

func (s *DeleteServiceAddressRequest) SetRegionId(v string) *DeleteServiceAddressRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteServiceAddressRequest) SetSagId(v string) *DeleteServiceAddressRequest {
	s.SagId = &v
	return s
}

func (s *DeleteServiceAddressRequest) SetSn(v string) *DeleteServiceAddressRequest {
	s.Sn = &v
	return s
}

type DeleteServiceAddressResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteServiceAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceAddressResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteServiceAddressResponseBody) SetCode(v string) *DeleteServiceAddressResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteServiceAddressResponseBody) SetMessage(v string) *DeleteServiceAddressResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteServiceAddressResponseBody) SetRequestId(v string) *DeleteServiceAddressResponseBody {
	s.RequestId = &v
	return s
}

type DeleteServiceAddressResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteServiceAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteServiceAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceAddressResponse) GoString() string {
	return s.String()
}

func (s *DeleteServiceAddressResponse) SetHeaders(v map[string]*string) *DeleteServiceAddressResponse {
	s.Headers = v
	return s
}

func (s *DeleteServiceAddressResponse) SetStatusCode(v int32) *DeleteServiceAddressResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteServiceAddressResponse) SetBody(v *DeleteServiceAddressResponseBody) *DeleteServiceAddressResponse {
	s.Body = v
	return s
}

type DeleteSmartAccessGatewayRequest struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteSmartAccessGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartAccessGatewayRequest) GoString() string {
	return s.String()
}

func (s *DeleteSmartAccessGatewayRequest) SetInstanceId(v string) *DeleteSmartAccessGatewayRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSmartAccessGatewayRequest) SetRegionId(v string) *DeleteSmartAccessGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSmartAccessGatewayRequest) SetResourceOwnerId(v int64) *DeleteSmartAccessGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteSmartAccessGatewayResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSmartAccessGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartAccessGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSmartAccessGatewayResponseBody) SetRequestId(v string) *DeleteSmartAccessGatewayResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSmartAccessGatewayResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSmartAccessGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSmartAccessGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartAccessGatewayResponse) GoString() string {
	return s.String()
}

func (s *DeleteSmartAccessGatewayResponse) SetHeaders(v map[string]*string) *DeleteSmartAccessGatewayResponse {
	s.Headers = v
	return s
}

func (s *DeleteSmartAccessGatewayResponse) SetStatusCode(v int32) *DeleteSmartAccessGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSmartAccessGatewayResponse) SetBody(v *DeleteSmartAccessGatewayResponseBody) *DeleteSmartAccessGatewayResponse {
	s.Body = v
	return s
}

type DeleteSmartAccessGatewayClientUserRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	UserName             *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DeleteSmartAccessGatewayClientUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartAccessGatewayClientUserRequest) GoString() string {
	return s.String()
}

func (s *DeleteSmartAccessGatewayClientUserRequest) SetOwnerAccount(v string) *DeleteSmartAccessGatewayClientUserRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteSmartAccessGatewayClientUserRequest) SetOwnerId(v int64) *DeleteSmartAccessGatewayClientUserRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSmartAccessGatewayClientUserRequest) SetRegionId(v string) *DeleteSmartAccessGatewayClientUserRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSmartAccessGatewayClientUserRequest) SetResourceOwnerAccount(v string) *DeleteSmartAccessGatewayClientUserRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteSmartAccessGatewayClientUserRequest) SetResourceOwnerId(v int64) *DeleteSmartAccessGatewayClientUserRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteSmartAccessGatewayClientUserRequest) SetSmartAGId(v string) *DeleteSmartAccessGatewayClientUserRequest {
	s.SmartAGId = &v
	return s
}

func (s *DeleteSmartAccessGatewayClientUserRequest) SetUserName(v string) *DeleteSmartAccessGatewayClientUserRequest {
	s.UserName = &v
	return s
}

type DeleteSmartAccessGatewayClientUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSmartAccessGatewayClientUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartAccessGatewayClientUserResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSmartAccessGatewayClientUserResponseBody) SetRequestId(v string) *DeleteSmartAccessGatewayClientUserResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSmartAccessGatewayClientUserResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSmartAccessGatewayClientUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSmartAccessGatewayClientUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartAccessGatewayClientUserResponse) GoString() string {
	return s.String()
}

func (s *DeleteSmartAccessGatewayClientUserResponse) SetHeaders(v map[string]*string) *DeleteSmartAccessGatewayClientUserResponse {
	s.Headers = v
	return s
}

func (s *DeleteSmartAccessGatewayClientUserResponse) SetStatusCode(v int32) *DeleteSmartAccessGatewayClientUserResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSmartAccessGatewayClientUserResponse) SetBody(v *DeleteSmartAccessGatewayClientUserResponseBody) *DeleteSmartAccessGatewayClientUserResponse {
	s.Body = v
	return s
}

type DeleteSmartAccessGatewayDnsForwardRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SagInsId   *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn      *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
}

func (s DeleteSmartAccessGatewayDnsForwardRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartAccessGatewayDnsForwardRequest) GoString() string {
	return s.String()
}

func (s *DeleteSmartAccessGatewayDnsForwardRequest) SetInstanceId(v string) *DeleteSmartAccessGatewayDnsForwardRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSmartAccessGatewayDnsForwardRequest) SetRegionId(v string) *DeleteSmartAccessGatewayDnsForwardRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSmartAccessGatewayDnsForwardRequest) SetSagInsId(v string) *DeleteSmartAccessGatewayDnsForwardRequest {
	s.SagInsId = &v
	return s
}

func (s *DeleteSmartAccessGatewayDnsForwardRequest) SetSagSn(v string) *DeleteSmartAccessGatewayDnsForwardRequest {
	s.SagSn = &v
	return s
}

type DeleteSmartAccessGatewayDnsForwardResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteSmartAccessGatewayDnsForwardResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartAccessGatewayDnsForwardResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSmartAccessGatewayDnsForwardResponseBody) SetCode(v string) *DeleteSmartAccessGatewayDnsForwardResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSmartAccessGatewayDnsForwardResponseBody) SetHttpStatusCode(v string) *DeleteSmartAccessGatewayDnsForwardResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteSmartAccessGatewayDnsForwardResponseBody) SetMessage(v string) *DeleteSmartAccessGatewayDnsForwardResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSmartAccessGatewayDnsForwardResponseBody) SetRequestId(v string) *DeleteSmartAccessGatewayDnsForwardResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSmartAccessGatewayDnsForwardResponseBody) SetSuccess(v string) *DeleteSmartAccessGatewayDnsForwardResponseBody {
	s.Success = &v
	return s
}

type DeleteSmartAccessGatewayDnsForwardResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSmartAccessGatewayDnsForwardResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSmartAccessGatewayDnsForwardResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartAccessGatewayDnsForwardResponse) GoString() string {
	return s.String()
}

func (s *DeleteSmartAccessGatewayDnsForwardResponse) SetHeaders(v map[string]*string) *DeleteSmartAccessGatewayDnsForwardResponse {
	s.Headers = v
	return s
}

func (s *DeleteSmartAccessGatewayDnsForwardResponse) SetStatusCode(v int32) *DeleteSmartAccessGatewayDnsForwardResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSmartAccessGatewayDnsForwardResponse) SetBody(v *DeleteSmartAccessGatewayDnsForwardResponseBody) *DeleteSmartAccessGatewayDnsForwardResponse {
	s.Body = v
	return s
}

type DeleteSnatEntryRequest struct {
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DeleteSnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteSnatEntryRequest) SetInstanceId(v string) *DeleteSnatEntryRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSnatEntryRequest) SetOwnerAccount(v string) *DeleteSnatEntryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteSnatEntryRequest) SetOwnerId(v int64) *DeleteSnatEntryRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSnatEntryRequest) SetRegionId(v string) *DeleteSnatEntryRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSnatEntryRequest) SetResourceOwnerAccount(v string) *DeleteSnatEntryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteSnatEntryRequest) SetResourceOwnerId(v int64) *DeleteSnatEntryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteSnatEntryRequest) SetSmartAGId(v string) *DeleteSnatEntryRequest {
	s.SmartAGId = &v
	return s
}

type DeleteSnatEntryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSnatEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatEntryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSnatEntryResponseBody) SetRequestId(v string) *DeleteSnatEntryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSnatEntryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSnatEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteSnatEntryResponse) SetHeaders(v map[string]*string) *DeleteSnatEntryResponse {
	s.Headers = v
	return s
}

func (s *DeleteSnatEntryResponse) SetStatusCode(v int32) *DeleteSnatEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSnatEntryResponse) SetBody(v *DeleteSnatEntryResponseBody) *DeleteSnatEntryResponse {
	s.Body = v
	return s
}

type DescribeACLAttributeRequest struct {
	AclId                *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	Direction            *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Order                *string `json:"Order,omitempty" xml:"Order,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeACLAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeACLAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeACLAttributeRequest) SetAclId(v string) *DescribeACLAttributeRequest {
	s.AclId = &v
	return s
}

func (s *DescribeACLAttributeRequest) SetDirection(v string) *DescribeACLAttributeRequest {
	s.Direction = &v
	return s
}

func (s *DescribeACLAttributeRequest) SetName(v string) *DescribeACLAttributeRequest {
	s.Name = &v
	return s
}

func (s *DescribeACLAttributeRequest) SetOrder(v string) *DescribeACLAttributeRequest {
	s.Order = &v
	return s
}

func (s *DescribeACLAttributeRequest) SetOwnerAccount(v string) *DescribeACLAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeACLAttributeRequest) SetOwnerId(v int64) *DescribeACLAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeACLAttributeRequest) SetPageNumber(v int32) *DescribeACLAttributeRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeACLAttributeRequest) SetPageSize(v int32) *DescribeACLAttributeRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeACLAttributeRequest) SetRegionId(v string) *DescribeACLAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeACLAttributeRequest) SetResourceOwnerAccount(v string) *DescribeACLAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeACLAttributeRequest) SetResourceOwnerId(v int64) *DescribeACLAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeACLAttributeResponseBody struct {
	Acrs       *DescribeACLAttributeResponseBodyAcrs `json:"Acrs,omitempty" xml:"Acrs,omitempty" type:"Struct"`
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeACLAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeACLAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeACLAttributeResponseBody) SetAcrs(v *DescribeACLAttributeResponseBodyAcrs) *DescribeACLAttributeResponseBody {
	s.Acrs = v
	return s
}

func (s *DescribeACLAttributeResponseBody) SetPageNumber(v int32) *DescribeACLAttributeResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeACLAttributeResponseBody) SetPageSize(v int32) *DescribeACLAttributeResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeACLAttributeResponseBody) SetRequestId(v string) *DescribeACLAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeACLAttributeResponseBody) SetTotalCount(v int32) *DescribeACLAttributeResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeACLAttributeResponseBodyAcrs struct {
	Acr []*DescribeACLAttributeResponseBodyAcrsAcr `json:"Acr,omitempty" xml:"Acr,omitempty" type:"Repeated"`
}

func (s DescribeACLAttributeResponseBodyAcrs) String() string {
	return tea.Prettify(s)
}

func (s DescribeACLAttributeResponseBodyAcrs) GoString() string {
	return s.String()
}

func (s *DescribeACLAttributeResponseBodyAcrs) SetAcr(v []*DescribeACLAttributeResponseBodyAcrsAcr) *DescribeACLAttributeResponseBodyAcrs {
	s.Acr = v
	return s
}

type DescribeACLAttributeResponseBodyAcrsAcr struct {
	AclId           *string                                                 `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AclType         *string                                                 `json:"AclType,omitempty" xml:"AclType,omitempty"`
	AcrId           *string                                                 `json:"AcrId,omitempty" xml:"AcrId,omitempty"`
	Description     *string                                                 `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidr        *string                                                 `json:"DestCidr,omitempty" xml:"DestCidr,omitempty"`
	DestPortRange   *string                                                 `json:"DestPortRange,omitempty" xml:"DestPortRange,omitempty"`
	Direction       *string                                                 `json:"Direction,omitempty" xml:"Direction,omitempty"`
	DpiGroupIds     *DescribeACLAttributeResponseBodyAcrsAcrDpiGroupIds     `json:"DpiGroupIds,omitempty" xml:"DpiGroupIds,omitempty" type:"Struct"`
	DpiSignatureIds *DescribeACLAttributeResponseBodyAcrsAcrDpiSignatureIds `json:"DpiSignatureIds,omitempty" xml:"DpiSignatureIds,omitempty" type:"Struct"`
	GmtCreate       *int64                                                  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	IpProtocol      *string                                                 `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Name            *string                                                 `json:"Name,omitempty" xml:"Name,omitempty"`
	Policy          *string                                                 `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Priority        *int32                                                  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	SourceCidr      *string                                                 `json:"SourceCidr,omitempty" xml:"SourceCidr,omitempty"`
	SourcePortRange *string                                                 `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Type            *string                                                 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeACLAttributeResponseBodyAcrsAcr) String() string {
	return tea.Prettify(s)
}

func (s DescribeACLAttributeResponseBodyAcrsAcr) GoString() string {
	return s.String()
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetAclId(v string) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.AclId = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetAclType(v string) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.AclType = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetAcrId(v string) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.AcrId = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetDescription(v string) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.Description = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetDestCidr(v string) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.DestCidr = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetDestPortRange(v string) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.DestPortRange = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetDirection(v string) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.Direction = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetDpiGroupIds(v *DescribeACLAttributeResponseBodyAcrsAcrDpiGroupIds) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.DpiGroupIds = v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetDpiSignatureIds(v *DescribeACLAttributeResponseBodyAcrsAcrDpiSignatureIds) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.DpiSignatureIds = v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetGmtCreate(v int64) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.GmtCreate = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetIpProtocol(v string) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.IpProtocol = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetName(v string) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.Name = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetPolicy(v string) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.Policy = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetPriority(v int32) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.Priority = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetSourceCidr(v string) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.SourceCidr = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetSourcePortRange(v string) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.SourcePortRange = &v
	return s
}

func (s *DescribeACLAttributeResponseBodyAcrsAcr) SetType(v string) *DescribeACLAttributeResponseBodyAcrsAcr {
	s.Type = &v
	return s
}

type DescribeACLAttributeResponseBodyAcrsAcrDpiGroupIds struct {
	DpiGroupId []*string `json:"DpiGroupId,omitempty" xml:"DpiGroupId,omitempty" type:"Repeated"`
}

func (s DescribeACLAttributeResponseBodyAcrsAcrDpiGroupIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeACLAttributeResponseBodyAcrsAcrDpiGroupIds) GoString() string {
	return s.String()
}

func (s *DescribeACLAttributeResponseBodyAcrsAcrDpiGroupIds) SetDpiGroupId(v []*string) *DescribeACLAttributeResponseBodyAcrsAcrDpiGroupIds {
	s.DpiGroupId = v
	return s
}

type DescribeACLAttributeResponseBodyAcrsAcrDpiSignatureIds struct {
	DpiSignatureId []*string `json:"DpiSignatureId,omitempty" xml:"DpiSignatureId,omitempty" type:"Repeated"`
}

func (s DescribeACLAttributeResponseBodyAcrsAcrDpiSignatureIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeACLAttributeResponseBodyAcrsAcrDpiSignatureIds) GoString() string {
	return s.String()
}

func (s *DescribeACLAttributeResponseBodyAcrsAcrDpiSignatureIds) SetDpiSignatureId(v []*string) *DescribeACLAttributeResponseBodyAcrsAcrDpiSignatureIds {
	s.DpiSignatureId = v
	return s
}

type DescribeACLAttributeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeACLAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeACLAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeACLAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeACLAttributeResponse) SetHeaders(v map[string]*string) *DescribeACLAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeACLAttributeResponse) SetStatusCode(v int32) *DescribeACLAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeACLAttributeResponse) SetBody(v *DescribeACLAttributeResponseBody) *DescribeACLAttributeResponse {
	s.Body = v
	return s
}

type DescribeACLsRequest struct {
	AclIds               *string `json:"AclIds,omitempty" xml:"AclIds,omitempty"`
	AclType              *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeACLsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeACLsRequest) GoString() string {
	return s.String()
}

func (s *DescribeACLsRequest) SetAclIds(v string) *DescribeACLsRequest {
	s.AclIds = &v
	return s
}

func (s *DescribeACLsRequest) SetAclType(v string) *DescribeACLsRequest {
	s.AclType = &v
	return s
}

func (s *DescribeACLsRequest) SetName(v string) *DescribeACLsRequest {
	s.Name = &v
	return s
}

func (s *DescribeACLsRequest) SetOwnerAccount(v string) *DescribeACLsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeACLsRequest) SetOwnerId(v int64) *DescribeACLsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeACLsRequest) SetPageNumber(v int32) *DescribeACLsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeACLsRequest) SetPageSize(v int32) *DescribeACLsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeACLsRequest) SetRegionId(v string) *DescribeACLsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeACLsRequest) SetResourceOwnerAccount(v string) *DescribeACLsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeACLsRequest) SetResourceOwnerId(v int64) *DescribeACLsRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeACLsResponseBody struct {
	Acls       *DescribeACLsResponseBodyAcls `json:"Acls,omitempty" xml:"Acls,omitempty" type:"Struct"`
	PageNumber *int32                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeACLsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeACLsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeACLsResponseBody) SetAcls(v *DescribeACLsResponseBodyAcls) *DescribeACLsResponseBody {
	s.Acls = v
	return s
}

func (s *DescribeACLsResponseBody) SetPageNumber(v int32) *DescribeACLsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeACLsResponseBody) SetPageSize(v int32) *DescribeACLsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeACLsResponseBody) SetRequestId(v string) *DescribeACLsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeACLsResponseBody) SetTotalCount(v int32) *DescribeACLsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeACLsResponseBodyAcls struct {
	Acl []*DescribeACLsResponseBodyAclsAcl `json:"Acl,omitempty" xml:"Acl,omitempty" type:"Repeated"`
}

func (s DescribeACLsResponseBodyAcls) String() string {
	return tea.Prettify(s)
}

func (s DescribeACLsResponseBodyAcls) GoString() string {
	return s.String()
}

func (s *DescribeACLsResponseBodyAcls) SetAcl(v []*DescribeACLsResponseBodyAclsAcl) *DescribeACLsResponseBodyAcls {
	s.Acl = v
	return s
}

type DescribeACLsResponseBodyAclsAcl struct {
	AclId           *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AclType         *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SagCount        *string `json:"SagCount,omitempty" xml:"SagCount,omitempty"`
}

func (s DescribeACLsResponseBodyAclsAcl) String() string {
	return tea.Prettify(s)
}

func (s DescribeACLsResponseBodyAclsAcl) GoString() string {
	return s.String()
}

func (s *DescribeACLsResponseBodyAclsAcl) SetAclId(v string) *DescribeACLsResponseBodyAclsAcl {
	s.AclId = &v
	return s
}

func (s *DescribeACLsResponseBodyAclsAcl) SetAclType(v string) *DescribeACLsResponseBodyAclsAcl {
	s.AclType = &v
	return s
}

func (s *DescribeACLsResponseBodyAclsAcl) SetName(v string) *DescribeACLsResponseBodyAclsAcl {
	s.Name = &v
	return s
}

func (s *DescribeACLsResponseBodyAclsAcl) SetResourceGroupId(v string) *DescribeACLsResponseBodyAclsAcl {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeACLsResponseBodyAclsAcl) SetSagCount(v string) *DescribeACLsResponseBodyAclsAcl {
	s.SagCount = &v
	return s
}

type DescribeACLsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeACLsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeACLsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeACLsResponse) GoString() string {
	return s.String()
}

func (s *DescribeACLsResponse) SetHeaders(v map[string]*string) *DescribeACLsResponse {
	s.Headers = v
	return s
}

func (s *DescribeACLsResponse) SetStatusCode(v int32) *DescribeACLsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeACLsResponse) SetBody(v *DescribeACLsResponseBody) *DescribeACLsResponse {
	s.Body = v
	return s
}

type DescribeBindableSmartAccessGatewaysRequest struct {
	CcnId                *string `json:"CcnId,omitempty" xml:"CcnId,omitempty"`
	CrossAccount         *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeBindableSmartAccessGatewaysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBindableSmartAccessGatewaysRequest) GoString() string {
	return s.String()
}

func (s *DescribeBindableSmartAccessGatewaysRequest) SetCcnId(v string) *DescribeBindableSmartAccessGatewaysRequest {
	s.CcnId = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysRequest) SetCrossAccount(v bool) *DescribeBindableSmartAccessGatewaysRequest {
	s.CrossAccount = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysRequest) SetName(v string) *DescribeBindableSmartAccessGatewaysRequest {
	s.Name = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysRequest) SetOwnerAccount(v string) *DescribeBindableSmartAccessGatewaysRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysRequest) SetOwnerId(v int64) *DescribeBindableSmartAccessGatewaysRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysRequest) SetPageNumber(v int32) *DescribeBindableSmartAccessGatewaysRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysRequest) SetPageSize(v int32) *DescribeBindableSmartAccessGatewaysRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysRequest) SetRegionId(v string) *DescribeBindableSmartAccessGatewaysRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysRequest) SetResourceOwnerAccount(v string) *DescribeBindableSmartAccessGatewaysRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysRequest) SetResourceOwnerId(v int64) *DescribeBindableSmartAccessGatewaysRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysRequest) SetSmartAGId(v string) *DescribeBindableSmartAccessGatewaysRequest {
	s.SmartAGId = &v
	return s
}

type DescribeBindableSmartAccessGatewaysResponseBody struct {
	PageNumber          *int32                                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize            *int32                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId           *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmartAccessGateways *DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGateways `json:"SmartAccessGateways,omitempty" xml:"SmartAccessGateways,omitempty" type:"Struct"`
	TotalCount          *int32                                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeBindableSmartAccessGatewaysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBindableSmartAccessGatewaysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBindableSmartAccessGatewaysResponseBody) SetPageNumber(v int32) *DescribeBindableSmartAccessGatewaysResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysResponseBody) SetPageSize(v int32) *DescribeBindableSmartAccessGatewaysResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysResponseBody) SetRequestId(v string) *DescribeBindableSmartAccessGatewaysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysResponseBody) SetSmartAccessGateways(v *DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGateways) *DescribeBindableSmartAccessGatewaysResponseBody {
	s.SmartAccessGateways = v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysResponseBody) SetTotalCount(v int32) *DescribeBindableSmartAccessGatewaysResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGateways struct {
	SmartAccessGateway []*DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway `json:"SmartAccessGateway,omitempty" xml:"SmartAccessGateway,omitempty" type:"Repeated"`
}

func (s DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGateways) String() string {
	return tea.Prettify(s)
}

func (s DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGateways) GoString() string {
	return s.String()
}

func (s *DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGateways) SetSmartAccessGateway(v []*DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) *DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGateways {
	s.SmartAccessGateway = v
	return s
}

type DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway struct {
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	SmartAGId  *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGUid *int64  `json:"SmartAGUid,omitempty" xml:"SmartAGUid,omitempty"`
}

func (s DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) String() string {
	return tea.Prettify(s)
}

func (s DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) GoString() string {
	return s.String()
}

func (s *DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetName(v string) *DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.Name = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetSmartAGId(v string) *DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.SmartAGId = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetSmartAGUid(v int64) *DescribeBindableSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.SmartAGUid = &v
	return s
}

type DescribeBindableSmartAccessGatewaysResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBindableSmartAccessGatewaysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBindableSmartAccessGatewaysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBindableSmartAccessGatewaysResponse) GoString() string {
	return s.String()
}

func (s *DescribeBindableSmartAccessGatewaysResponse) SetHeaders(v map[string]*string) *DescribeBindableSmartAccessGatewaysResponse {
	s.Headers = v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysResponse) SetStatusCode(v int32) *DescribeBindableSmartAccessGatewaysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBindableSmartAccessGatewaysResponse) SetBody(v *DescribeBindableSmartAccessGatewaysResponseBody) *DescribeBindableSmartAccessGatewaysResponse {
	s.Body = v
	return s
}

type DescribeClientUserDNSRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeClientUserDNSRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientUserDNSRequest) GoString() string {
	return s.String()
}

func (s *DescribeClientUserDNSRequest) SetOwnerAccount(v string) *DescribeClientUserDNSRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeClientUserDNSRequest) SetOwnerId(v int64) *DescribeClientUserDNSRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeClientUserDNSRequest) SetRegionId(v string) *DescribeClientUserDNSRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClientUserDNSRequest) SetResourceOwnerAccount(v string) *DescribeClientUserDNSRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeClientUserDNSRequest) SetResourceOwnerId(v int64) *DescribeClientUserDNSRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClientUserDNSRequest) SetSmartAGId(v string) *DescribeClientUserDNSRequest {
	s.SmartAGId = &v
	return s
}

type DescribeClientUserDNSResponseBody struct {
	AppDNS       []*string `json:"AppDNS,omitempty" xml:"AppDNS,omitempty" type:"Repeated"`
	RecoveredDNS []*string `json:"RecoveredDNS,omitempty" xml:"RecoveredDNS,omitempty" type:"Repeated"`
	RequestId    *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClientUserDNSResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientUserDNSResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClientUserDNSResponseBody) SetAppDNS(v []*string) *DescribeClientUserDNSResponseBody {
	s.AppDNS = v
	return s
}

func (s *DescribeClientUserDNSResponseBody) SetRecoveredDNS(v []*string) *DescribeClientUserDNSResponseBody {
	s.RecoveredDNS = v
	return s
}

func (s *DescribeClientUserDNSResponseBody) SetRequestId(v string) *DescribeClientUserDNSResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClientUserDNSResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeClientUserDNSResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClientUserDNSResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientUserDNSResponse) GoString() string {
	return s.String()
}

func (s *DescribeClientUserDNSResponse) SetHeaders(v map[string]*string) *DescribeClientUserDNSResponse {
	s.Headers = v
	return s
}

func (s *DescribeClientUserDNSResponse) SetStatusCode(v int32) *DescribeClientUserDNSResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClientUserDNSResponse) SetBody(v *DescribeClientUserDNSResponseBody) *DescribeClientUserDNSResponse {
	s.Body = v
	return s
}

type DescribeCloudConnectNetworksRequest struct {
	CcnId                *string                                   `json:"CcnId,omitempty" xml:"CcnId,omitempty"`
	Name                 *string                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string                                   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64                                    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string                                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string                                   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag                  []*DescribeCloudConnectNetworksRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeCloudConnectNetworksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudConnectNetworksRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudConnectNetworksRequest) SetCcnId(v string) *DescribeCloudConnectNetworksRequest {
	s.CcnId = &v
	return s
}

func (s *DescribeCloudConnectNetworksRequest) SetName(v string) *DescribeCloudConnectNetworksRequest {
	s.Name = &v
	return s
}

func (s *DescribeCloudConnectNetworksRequest) SetOwnerAccount(v string) *DescribeCloudConnectNetworksRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeCloudConnectNetworksRequest) SetOwnerId(v int64) *DescribeCloudConnectNetworksRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCloudConnectNetworksRequest) SetPageNumber(v int32) *DescribeCloudConnectNetworksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCloudConnectNetworksRequest) SetPageSize(v int32) *DescribeCloudConnectNetworksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudConnectNetworksRequest) SetRegionId(v string) *DescribeCloudConnectNetworksRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCloudConnectNetworksRequest) SetResourceOwnerAccount(v string) *DescribeCloudConnectNetworksRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCloudConnectNetworksRequest) SetResourceOwnerId(v int64) *DescribeCloudConnectNetworksRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCloudConnectNetworksRequest) SetTag(v []*DescribeCloudConnectNetworksRequestTag) *DescribeCloudConnectNetworksRequest {
	s.Tag = v
	return s
}

type DescribeCloudConnectNetworksRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeCloudConnectNetworksRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudConnectNetworksRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeCloudConnectNetworksRequestTag) SetKey(v string) *DescribeCloudConnectNetworksRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeCloudConnectNetworksRequestTag) SetValue(v string) *DescribeCloudConnectNetworksRequestTag {
	s.Value = &v
	return s
}

type DescribeCloudConnectNetworksResponseBody struct {
	CloudConnectNetworks *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworks `json:"CloudConnectNetworks,omitempty" xml:"CloudConnectNetworks,omitempty" type:"Struct"`
	PageNumber           *int32                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId            *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount           *int32                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCloudConnectNetworksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudConnectNetworksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudConnectNetworksResponseBody) SetCloudConnectNetworks(v *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworks) *DescribeCloudConnectNetworksResponseBody {
	s.CloudConnectNetworks = v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBody) SetPageNumber(v int32) *DescribeCloudConnectNetworksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBody) SetPageSize(v int32) *DescribeCloudConnectNetworksResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBody) SetRequestId(v string) *DescribeCloudConnectNetworksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBody) SetTotalCount(v int32) *DescribeCloudConnectNetworksResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeCloudConnectNetworksResponseBodyCloudConnectNetworks struct {
	CloudConnectNetwork []*DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork `json:"CloudConnectNetwork,omitempty" xml:"CloudConnectNetwork,omitempty" type:"Repeated"`
}

func (s DescribeCloudConnectNetworksResponseBodyCloudConnectNetworks) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudConnectNetworksResponseBodyCloudConnectNetworks) GoString() string {
	return s.String()
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworks) SetCloudConnectNetwork(v []*DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworks {
	s.CloudConnectNetwork = v
	return s
}

type DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork struct {
	AssociatedCenId         *string                                                                              `json:"AssociatedCenId,omitempty" xml:"AssociatedCenId,omitempty"`
	AssociatedCenOwnerId    *string                                                                              `json:"AssociatedCenOwnerId,omitempty" xml:"AssociatedCenOwnerId,omitempty"`
	AssociatedCloudBoxCount *string                                                                              `json:"AssociatedCloudBoxCount,omitempty" xml:"AssociatedCloudBoxCount,omitempty"`
	AvailableCloudBoxCount  *string                                                                              `json:"AvailableCloudBoxCount,omitempty" xml:"AvailableCloudBoxCount,omitempty"`
	CcnId                   *string                                                                              `json:"CcnId,omitempty" xml:"CcnId,omitempty"`
	CidrBlock               *string                                                                              `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	CreateTime              *int64                                                                               `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description             *string                                                                              `json:"Description,omitempty" xml:"Description,omitempty"`
	InterworkingStatus      *string                                                                              `json:"InterworkingStatus,omitempty" xml:"InterworkingStatus,omitempty"`
	Name                    *string                                                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	ResourceGroupId         *string                                                                              `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SnatCidrBlock           *string                                                                              `json:"SnatCidrBlock,omitempty" xml:"SnatCidrBlock,omitempty"`
	Tags                    *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) GoString() string {
	return s.String()
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) SetAssociatedCenId(v string) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork {
	s.AssociatedCenId = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) SetAssociatedCenOwnerId(v string) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork {
	s.AssociatedCenOwnerId = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) SetAssociatedCloudBoxCount(v string) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork {
	s.AssociatedCloudBoxCount = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) SetAvailableCloudBoxCount(v string) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork {
	s.AvailableCloudBoxCount = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) SetCcnId(v string) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork {
	s.CcnId = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) SetCidrBlock(v string) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork {
	s.CidrBlock = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) SetCreateTime(v int64) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork {
	s.CreateTime = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) SetDescription(v string) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork {
	s.Description = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) SetInterworkingStatus(v string) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork {
	s.InterworkingStatus = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) SetName(v string) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork {
	s.Name = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) SetResourceGroupId(v string) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) SetSnatCidrBlock(v string) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork {
	s.SnatCidrBlock = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork) SetTags(v *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTags) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetwork {
	s.Tags = v
	return s
}

type DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTags struct {
	Tag []*DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTags) GoString() string {
	return s.String()
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTags) SetTag(v []*DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTagsTag) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTags {
	s.Tag = v
	return s
}

type DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTagsTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTagsTag) SetKey(v string) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTagsTag) SetValue(v string) *DescribeCloudConnectNetworksResponseBodyCloudConnectNetworksCloudConnectNetworkTagsTag {
	s.Value = &v
	return s
}

type DescribeCloudConnectNetworksResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCloudConnectNetworksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCloudConnectNetworksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudConnectNetworksResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudConnectNetworksResponse) SetHeaders(v map[string]*string) *DescribeCloudConnectNetworksResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudConnectNetworksResponse) SetStatusCode(v int32) *DescribeCloudConnectNetworksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudConnectNetworksResponse) SetBody(v *DescribeCloudConnectNetworksResponseBody) *DescribeCloudConnectNetworksResponse {
	s.Body = v
	return s
}

type DescribeDeviceAutoUpgradePolicyRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SerialNumber         *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	VersionType          *string `json:"VersionType,omitempty" xml:"VersionType,omitempty"`
}

func (s DescribeDeviceAutoUpgradePolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceAutoUpgradePolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeviceAutoUpgradePolicyRequest) SetOwnerAccount(v string) *DescribeDeviceAutoUpgradePolicyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyRequest) SetOwnerId(v int64) *DescribeDeviceAutoUpgradePolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyRequest) SetRegionId(v string) *DescribeDeviceAutoUpgradePolicyRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyRequest) SetResourceOwnerAccount(v string) *DescribeDeviceAutoUpgradePolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyRequest) SetResourceOwnerId(v int64) *DescribeDeviceAutoUpgradePolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyRequest) SetSerialNumber(v string) *DescribeDeviceAutoUpgradePolicyRequest {
	s.SerialNumber = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyRequest) SetSmartAGId(v string) *DescribeDeviceAutoUpgradePolicyRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyRequest) SetVersionType(v string) *DescribeDeviceAutoUpgradePolicyRequest {
	s.VersionType = &v
	return s
}

type DescribeDeviceAutoUpgradePolicyResponseBody struct {
	CronExpression *string `json:"CronExpression,omitempty" xml:"CronExpression,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Jitter         *string `json:"Jitter,omitempty" xml:"Jitter,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SerialNumber   *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SmartAGId      *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	TimeZone       *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
	UpgradeType    *string `json:"UpgradeType,omitempty" xml:"UpgradeType,omitempty"`
}

func (s DescribeDeviceAutoUpgradePolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceAutoUpgradePolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeviceAutoUpgradePolicyResponseBody) SetCronExpression(v string) *DescribeDeviceAutoUpgradePolicyResponseBody {
	s.CronExpression = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyResponseBody) SetDuration(v string) *DescribeDeviceAutoUpgradePolicyResponseBody {
	s.Duration = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyResponseBody) SetJitter(v string) *DescribeDeviceAutoUpgradePolicyResponseBody {
	s.Jitter = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyResponseBody) SetRequestId(v string) *DescribeDeviceAutoUpgradePolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyResponseBody) SetSerialNumber(v string) *DescribeDeviceAutoUpgradePolicyResponseBody {
	s.SerialNumber = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyResponseBody) SetSmartAGId(v string) *DescribeDeviceAutoUpgradePolicyResponseBody {
	s.SmartAGId = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyResponseBody) SetTimeZone(v string) *DescribeDeviceAutoUpgradePolicyResponseBody {
	s.TimeZone = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyResponseBody) SetUpgradeType(v string) *DescribeDeviceAutoUpgradePolicyResponseBody {
	s.UpgradeType = &v
	return s
}

type DescribeDeviceAutoUpgradePolicyResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDeviceAutoUpgradePolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDeviceAutoUpgradePolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceAutoUpgradePolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeviceAutoUpgradePolicyResponse) SetHeaders(v map[string]*string) *DescribeDeviceAutoUpgradePolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyResponse) SetStatusCode(v int32) *DescribeDeviceAutoUpgradePolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDeviceAutoUpgradePolicyResponse) SetBody(v *DescribeDeviceAutoUpgradePolicyResponseBody) *DescribeDeviceAutoUpgradePolicyResponse {
	s.Body = v
	return s
}

type DescribeDnatEntriesRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SagId                *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDnatEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDnatEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDnatEntriesRequest) SetOwnerAccount(v string) *DescribeDnatEntriesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDnatEntriesRequest) SetOwnerId(v int64) *DescribeDnatEntriesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDnatEntriesRequest) SetPageNumber(v int32) *DescribeDnatEntriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDnatEntriesRequest) SetPageSize(v int32) *DescribeDnatEntriesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDnatEntriesRequest) SetRegionId(v string) *DescribeDnatEntriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDnatEntriesRequest) SetResourceOwnerAccount(v string) *DescribeDnatEntriesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDnatEntriesRequest) SetResourceOwnerId(v int64) *DescribeDnatEntriesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDnatEntriesRequest) SetSagId(v string) *DescribeDnatEntriesRequest {
	s.SagId = &v
	return s
}

func (s *DescribeDnatEntriesRequest) SetType(v string) *DescribeDnatEntriesRequest {
	s.Type = &v
	return s
}

type DescribeDnatEntriesResponseBody struct {
	DnatEntries *DescribeDnatEntriesResponseBodyDnatEntries `json:"DnatEntries,omitempty" xml:"DnatEntries,omitempty" type:"Struct"`
	PageNumber  *int32                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDnatEntriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDnatEntriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDnatEntriesResponseBody) SetDnatEntries(v *DescribeDnatEntriesResponseBodyDnatEntries) *DescribeDnatEntriesResponseBody {
	s.DnatEntries = v
	return s
}

func (s *DescribeDnatEntriesResponseBody) SetPageNumber(v int32) *DescribeDnatEntriesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDnatEntriesResponseBody) SetPageSize(v int32) *DescribeDnatEntriesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDnatEntriesResponseBody) SetRequestId(v string) *DescribeDnatEntriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDnatEntriesResponseBody) SetTotalCount(v int32) *DescribeDnatEntriesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDnatEntriesResponseBodyDnatEntries struct {
	DnatEntry []*DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry `json:"DnatEntry,omitempty" xml:"DnatEntry,omitempty" type:"Repeated"`
}

func (s DescribeDnatEntriesResponseBodyDnatEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeDnatEntriesResponseBodyDnatEntries) GoString() string {
	return s.String()
}

func (s *DescribeDnatEntriesResponseBodyDnatEntries) SetDnatEntry(v []*DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry) *DescribeDnatEntriesResponseBodyDnatEntries {
	s.DnatEntry = v
	return s
}

type DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry struct {
	DnatEntryId  *string `json:"DnatEntryId,omitempty" xml:"DnatEntryId,omitempty"`
	ExternalIp   *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	ExternalPort *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	InternalIp   *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	InternalPort *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	IpProtocol   *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	SagId        *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry) GoString() string {
	return s.String()
}

func (s *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry) SetDnatEntryId(v string) *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry {
	s.DnatEntryId = &v
	return s
}

func (s *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry) SetExternalIp(v string) *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry {
	s.ExternalIp = &v
	return s
}

func (s *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry) SetExternalPort(v string) *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry {
	s.ExternalPort = &v
	return s
}

func (s *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry) SetInternalIp(v string) *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry {
	s.InternalIp = &v
	return s
}

func (s *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry) SetInternalPort(v string) *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry {
	s.InternalPort = &v
	return s
}

func (s *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry) SetIpProtocol(v string) *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry {
	s.IpProtocol = &v
	return s
}

func (s *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry) SetSagId(v string) *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry {
	s.SagId = &v
	return s
}

func (s *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry) SetType(v string) *DescribeDnatEntriesResponseBodyDnatEntriesDnatEntry {
	s.Type = &v
	return s
}

type DescribeDnatEntriesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDnatEntriesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDnatEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDnatEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDnatEntriesResponse) SetHeaders(v map[string]*string) *DescribeDnatEntriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDnatEntriesResponse) SetStatusCode(v int32) *DescribeDnatEntriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDnatEntriesResponse) SetBody(v *DescribeDnatEntriesResponseBody) *DescribeDnatEntriesResponse {
	s.Body = v
	return s
}

type DescribeFlowLogSagsRequest struct {
	FlowLogId            *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeFlowLogSagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogSagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogSagsRequest) SetFlowLogId(v string) *DescribeFlowLogSagsRequest {
	s.FlowLogId = &v
	return s
}

func (s *DescribeFlowLogSagsRequest) SetOwnerAccount(v string) *DescribeFlowLogSagsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeFlowLogSagsRequest) SetOwnerId(v int64) *DescribeFlowLogSagsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeFlowLogSagsRequest) SetPageNumber(v int32) *DescribeFlowLogSagsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeFlowLogSagsRequest) SetPageSize(v int32) *DescribeFlowLogSagsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeFlowLogSagsRequest) SetRegionId(v string) *DescribeFlowLogSagsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFlowLogSagsRequest) SetResourceOwnerAccount(v string) *DescribeFlowLogSagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeFlowLogSagsRequest) SetResourceOwnerId(v int64) *DescribeFlowLogSagsRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeFlowLogSagsResponseBody struct {
	PageNumber *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Sags       *DescribeFlowLogSagsResponseBodySags `json:"Sags,omitempty" xml:"Sags,omitempty" type:"Struct"`
	TotalCount *int32                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeFlowLogSagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogSagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogSagsResponseBody) SetPageNumber(v int32) *DescribeFlowLogSagsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeFlowLogSagsResponseBody) SetPageSize(v int32) *DescribeFlowLogSagsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeFlowLogSagsResponseBody) SetRequestId(v string) *DescribeFlowLogSagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowLogSagsResponseBody) SetSags(v *DescribeFlowLogSagsResponseBodySags) *DescribeFlowLogSagsResponseBody {
	s.Sags = v
	return s
}

func (s *DescribeFlowLogSagsResponseBody) SetTotalCount(v int32) *DescribeFlowLogSagsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeFlowLogSagsResponseBodySags struct {
	Sag []*DescribeFlowLogSagsResponseBodySagsSag `json:"Sag,omitempty" xml:"Sag,omitempty" type:"Repeated"`
}

func (s DescribeFlowLogSagsResponseBodySags) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogSagsResponseBodySags) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogSagsResponseBodySags) SetSag(v []*DescribeFlowLogSagsResponseBodySagsSag) *DescribeFlowLogSagsResponseBodySags {
	s.Sag = v
	return s
}

type DescribeFlowLogSagsResponseBodySagsSag struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	SmartAGId   *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeFlowLogSagsResponseBodySagsSag) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogSagsResponseBodySagsSag) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogSagsResponseBodySagsSag) SetDescription(v string) *DescribeFlowLogSagsResponseBodySagsSag {
	s.Description = &v
	return s
}

func (s *DescribeFlowLogSagsResponseBodySagsSag) SetName(v string) *DescribeFlowLogSagsResponseBodySagsSag {
	s.Name = &v
	return s
}

func (s *DescribeFlowLogSagsResponseBodySagsSag) SetSmartAGId(v string) *DescribeFlowLogSagsResponseBodySagsSag {
	s.SmartAGId = &v
	return s
}

type DescribeFlowLogSagsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeFlowLogSagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowLogSagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogSagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogSagsResponse) SetHeaders(v map[string]*string) *DescribeFlowLogSagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowLogSagsResponse) SetStatusCode(v int32) *DescribeFlowLogSagsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowLogSagsResponse) SetBody(v *DescribeFlowLogSagsResponseBody) *DescribeFlowLogSagsResponse {
	s.Body = v
	return s
}

type DescribeFlowLogsRequest struct {
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	FlowLogId            *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty"`
	FlowLogName          *string `json:"FlowLogName,omitempty" xml:"FlowLogName,omitempty"`
	OutputType           *string `json:"OutputType,omitempty" xml:"OutputType,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeFlowLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogsRequest) SetDescription(v string) *DescribeFlowLogsRequest {
	s.Description = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetFlowLogId(v string) *DescribeFlowLogsRequest {
	s.FlowLogId = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetFlowLogName(v string) *DescribeFlowLogsRequest {
	s.FlowLogName = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetOutputType(v string) *DescribeFlowLogsRequest {
	s.OutputType = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetOwnerAccount(v string) *DescribeFlowLogsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetOwnerId(v int64) *DescribeFlowLogsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetPageNumber(v int32) *DescribeFlowLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetPageSize(v int32) *DescribeFlowLogsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetRegionId(v string) *DescribeFlowLogsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetResourceOwnerAccount(v string) *DescribeFlowLogsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetResourceOwnerId(v int64) *DescribeFlowLogsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeFlowLogsRequest) SetStatus(v string) *DescribeFlowLogsRequest {
	s.Status = &v
	return s
}

type DescribeFlowLogsResponseBody struct {
	FlowLogs   *DescribeFlowLogsResponseBodyFlowLogs `json:"FlowLogs,omitempty" xml:"FlowLogs,omitempty" type:"Struct"`
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeFlowLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogsResponseBody) SetFlowLogs(v *DescribeFlowLogsResponseBodyFlowLogs) *DescribeFlowLogsResponseBody {
	s.FlowLogs = v
	return s
}

func (s *DescribeFlowLogsResponseBody) SetPageNumber(v int32) *DescribeFlowLogsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeFlowLogsResponseBody) SetPageSize(v int32) *DescribeFlowLogsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeFlowLogsResponseBody) SetRequestId(v string) *DescribeFlowLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowLogsResponseBody) SetTotalCount(v int32) *DescribeFlowLogsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeFlowLogsResponseBodyFlowLogs struct {
	FlowLogSetType []*DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType `json:"FlowLogSetType,omitempty" xml:"FlowLogSetType,omitempty" type:"Repeated"`
}

func (s DescribeFlowLogsResponseBodyFlowLogs) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogsResponseBodyFlowLogs) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogsResponseBodyFlowLogs) SetFlowLogSetType(v []*DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) *DescribeFlowLogsResponseBodyFlowLogs {
	s.FlowLogSetType = v
	return s
}

type DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType struct {
	ActiveAging       *int32  `json:"ActiveAging,omitempty" xml:"ActiveAging,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	FlowLogId         *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty"`
	InactiveAging     *int32  `json:"InactiveAging,omitempty" xml:"InactiveAging,omitempty"`
	LogstoreName      *string `json:"LogstoreName,omitempty" xml:"LogstoreName,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NetflowServerIp   *string `json:"NetflowServerIp,omitempty" xml:"NetflowServerIp,omitempty"`
	NetflowServerPort *string `json:"NetflowServerPort,omitempty" xml:"NetflowServerPort,omitempty"`
	NetflowVersion    *string `json:"NetflowVersion,omitempty" xml:"NetflowVersion,omitempty"`
	OutputType        *string `json:"OutputType,omitempty" xml:"OutputType,omitempty"`
	ProjectName       *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SlsRegionId       *string `json:"SlsRegionId,omitempty" xml:"SlsRegionId,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalSagNum       *int32  `json:"TotalSagNum,omitempty" xml:"TotalSagNum,omitempty"`
}

func (s DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetActiveAging(v int32) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.ActiveAging = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetDescription(v string) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.Description = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetFlowLogId(v string) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.FlowLogId = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetInactiveAging(v int32) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.InactiveAging = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetLogstoreName(v string) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.LogstoreName = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetName(v string) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.Name = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetNetflowServerIp(v string) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.NetflowServerIp = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetNetflowServerPort(v string) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.NetflowServerPort = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetNetflowVersion(v string) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.NetflowVersion = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetOutputType(v string) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.OutputType = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetProjectName(v string) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.ProjectName = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetResourceGroupId(v string) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetSlsRegionId(v string) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.SlsRegionId = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetStatus(v string) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.Status = &v
	return s
}

func (s *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType) SetTotalSagNum(v int32) *DescribeFlowLogsResponseBodyFlowLogsFlowLogSetType {
	s.TotalSagNum = &v
	return s
}

type DescribeFlowLogsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeFlowLogsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowLogsResponse) SetHeaders(v map[string]*string) *DescribeFlowLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowLogsResponse) SetStatusCode(v int32) *DescribeFlowLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowLogsResponse) SetBody(v *DescribeFlowLogsResponseBody) *DescribeFlowLogsResponse {
	s.Body = v
	return s
}

type DescribeGrantRulesRequest struct {
	AssociatedCcnId      *string `json:"AssociatedCcnId,omitempty" xml:"AssociatedCcnId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeGrantRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantRulesRequest) GoString() string {
	return s.String()
}

func (s *DescribeGrantRulesRequest) SetAssociatedCcnId(v string) *DescribeGrantRulesRequest {
	s.AssociatedCcnId = &v
	return s
}

func (s *DescribeGrantRulesRequest) SetOwnerAccount(v string) *DescribeGrantRulesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeGrantRulesRequest) SetOwnerId(v int64) *DescribeGrantRulesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeGrantRulesRequest) SetPageNumber(v int32) *DescribeGrantRulesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeGrantRulesRequest) SetPageSize(v int32) *DescribeGrantRulesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeGrantRulesRequest) SetRegionId(v string) *DescribeGrantRulesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeGrantRulesRequest) SetResourceOwnerAccount(v string) *DescribeGrantRulesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeGrantRulesRequest) SetResourceOwnerId(v int64) *DescribeGrantRulesRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeGrantRulesResponseBody struct {
	GrantRules *DescribeGrantRulesResponseBodyGrantRules `json:"GrantRules,omitempty" xml:"GrantRules,omitempty" type:"Struct"`
	PageNumber *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeGrantRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGrantRulesResponseBody) SetGrantRules(v *DescribeGrantRulesResponseBodyGrantRules) *DescribeGrantRulesResponseBody {
	s.GrantRules = v
	return s
}

func (s *DescribeGrantRulesResponseBody) SetPageNumber(v int32) *DescribeGrantRulesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeGrantRulesResponseBody) SetPageSize(v int32) *DescribeGrantRulesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeGrantRulesResponseBody) SetRequestId(v string) *DescribeGrantRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGrantRulesResponseBody) SetTotalCount(v int32) *DescribeGrantRulesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeGrantRulesResponseBodyGrantRules struct {
	GrantRule []*DescribeGrantRulesResponseBodyGrantRulesGrantRule `json:"GrantRule,omitempty" xml:"GrantRule,omitempty" type:"Repeated"`
}

func (s DescribeGrantRulesResponseBodyGrantRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantRulesResponseBodyGrantRules) GoString() string {
	return s.String()
}

func (s *DescribeGrantRulesResponseBodyGrantRules) SetGrantRule(v []*DescribeGrantRulesResponseBodyGrantRulesGrantRule) *DescribeGrantRulesResponseBodyGrantRules {
	s.GrantRule = v
	return s
}

type DescribeGrantRulesResponseBodyGrantRulesGrantRule struct {
	CcnInstanceId       *string `json:"CcnInstanceId,omitempty" xml:"CcnInstanceId,omitempty"`
	CcnUid              *int64  `json:"CcnUid,omitempty" xml:"CcnUid,omitempty"`
	CenInstanceId       *string `json:"CenInstanceId,omitempty" xml:"CenInstanceId,omitempty"`
	CenUid              *int64  `json:"CenUid,omitempty" xml:"CenUid,omitempty"`
	GmtCreate           *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified         *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GrantRuleId         *string `json:"GrantRuleId,omitempty" xml:"GrantRuleId,omitempty"`
	GrantTrafficService *bool   `json:"GrantTrafficService,omitempty" xml:"GrantTrafficService,omitempty"`
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeGrantRulesResponseBodyGrantRulesGrantRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantRulesResponseBodyGrantRulesGrantRule) GoString() string {
	return s.String()
}

func (s *DescribeGrantRulesResponseBodyGrantRulesGrantRule) SetCcnInstanceId(v string) *DescribeGrantRulesResponseBodyGrantRulesGrantRule {
	s.CcnInstanceId = &v
	return s
}

func (s *DescribeGrantRulesResponseBodyGrantRulesGrantRule) SetCcnUid(v int64) *DescribeGrantRulesResponseBodyGrantRulesGrantRule {
	s.CcnUid = &v
	return s
}

func (s *DescribeGrantRulesResponseBodyGrantRulesGrantRule) SetCenInstanceId(v string) *DescribeGrantRulesResponseBodyGrantRulesGrantRule {
	s.CenInstanceId = &v
	return s
}

func (s *DescribeGrantRulesResponseBodyGrantRulesGrantRule) SetCenUid(v int64) *DescribeGrantRulesResponseBodyGrantRulesGrantRule {
	s.CenUid = &v
	return s
}

func (s *DescribeGrantRulesResponseBodyGrantRulesGrantRule) SetGmtCreate(v int64) *DescribeGrantRulesResponseBodyGrantRulesGrantRule {
	s.GmtCreate = &v
	return s
}

func (s *DescribeGrantRulesResponseBodyGrantRulesGrantRule) SetGmtModified(v int64) *DescribeGrantRulesResponseBodyGrantRulesGrantRule {
	s.GmtModified = &v
	return s
}

func (s *DescribeGrantRulesResponseBodyGrantRulesGrantRule) SetGrantRuleId(v string) *DescribeGrantRulesResponseBodyGrantRulesGrantRule {
	s.GrantRuleId = &v
	return s
}

func (s *DescribeGrantRulesResponseBodyGrantRulesGrantRule) SetGrantTrafficService(v bool) *DescribeGrantRulesResponseBodyGrantRulesGrantRule {
	s.GrantTrafficService = &v
	return s
}

func (s *DescribeGrantRulesResponseBodyGrantRulesGrantRule) SetRegionId(v string) *DescribeGrantRulesResponseBodyGrantRulesGrantRule {
	s.RegionId = &v
	return s
}

type DescribeGrantRulesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeGrantRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeGrantRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantRulesResponse) GoString() string {
	return s.String()
}

func (s *DescribeGrantRulesResponse) SetHeaders(v map[string]*string) *DescribeGrantRulesResponse {
	s.Headers = v
	return s
}

func (s *DescribeGrantRulesResponse) SetStatusCode(v int32) *DescribeGrantRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGrantRulesResponse) SetBody(v *DescribeGrantRulesResponseBody) *DescribeGrantRulesResponse {
	s.Body = v
	return s
}

type DescribeGrantSagRulesRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeGrantSagRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantSagRulesRequest) GoString() string {
	return s.String()
}

func (s *DescribeGrantSagRulesRequest) SetOwnerAccount(v string) *DescribeGrantSagRulesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeGrantSagRulesRequest) SetOwnerId(v int64) *DescribeGrantSagRulesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeGrantSagRulesRequest) SetPageNumber(v int32) *DescribeGrantSagRulesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeGrantSagRulesRequest) SetPageSize(v int32) *DescribeGrantSagRulesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeGrantSagRulesRequest) SetRegionId(v string) *DescribeGrantSagRulesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeGrantSagRulesRequest) SetResourceOwnerAccount(v string) *DescribeGrantSagRulesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeGrantSagRulesRequest) SetResourceOwnerId(v int64) *DescribeGrantSagRulesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeGrantSagRulesRequest) SetSmartAGId(v string) *DescribeGrantSagRulesRequest {
	s.SmartAGId = &v
	return s
}

type DescribeGrantSagRulesResponseBody struct {
	GrantRules *DescribeGrantSagRulesResponseBodyGrantRules `json:"GrantRules,omitempty" xml:"GrantRules,omitempty" type:"Struct"`
	PageNumber *int32                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeGrantSagRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantSagRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGrantSagRulesResponseBody) SetGrantRules(v *DescribeGrantSagRulesResponseBodyGrantRules) *DescribeGrantSagRulesResponseBody {
	s.GrantRules = v
	return s
}

func (s *DescribeGrantSagRulesResponseBody) SetPageNumber(v int32) *DescribeGrantSagRulesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeGrantSagRulesResponseBody) SetPageSize(v int32) *DescribeGrantSagRulesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeGrantSagRulesResponseBody) SetRequestId(v string) *DescribeGrantSagRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGrantSagRulesResponseBody) SetTotalCount(v int32) *DescribeGrantSagRulesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeGrantSagRulesResponseBodyGrantRules struct {
	GrantRule []*DescribeGrantSagRulesResponseBodyGrantRulesGrantRule `json:"GrantRule,omitempty" xml:"GrantRule,omitempty" type:"Repeated"`
}

func (s DescribeGrantSagRulesResponseBodyGrantRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantSagRulesResponseBodyGrantRules) GoString() string {
	return s.String()
}

func (s *DescribeGrantSagRulesResponseBodyGrantRules) SetGrantRule(v []*DescribeGrantSagRulesResponseBodyGrantRulesGrantRule) *DescribeGrantSagRulesResponseBodyGrantRules {
	s.GrantRule = v
	return s
}

type DescribeGrantSagRulesResponseBodyGrantRulesGrantRule struct {
	CcnInstanceId       *string `json:"CcnInstanceId,omitempty" xml:"CcnInstanceId,omitempty"`
	CcnUid              *int64  `json:"CcnUid,omitempty" xml:"CcnUid,omitempty"`
	CreateTime          *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	GrantTrafficService *bool   `json:"GrantTrafficService,omitempty" xml:"GrantTrafficService,omitempty"`
	InstanceId          *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SmartAGId           *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeGrantSagRulesResponseBodyGrantRulesGrantRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantSagRulesResponseBodyGrantRulesGrantRule) GoString() string {
	return s.String()
}

func (s *DescribeGrantSagRulesResponseBodyGrantRulesGrantRule) SetCcnInstanceId(v string) *DescribeGrantSagRulesResponseBodyGrantRulesGrantRule {
	s.CcnInstanceId = &v
	return s
}

func (s *DescribeGrantSagRulesResponseBodyGrantRulesGrantRule) SetCcnUid(v int64) *DescribeGrantSagRulesResponseBodyGrantRulesGrantRule {
	s.CcnUid = &v
	return s
}

func (s *DescribeGrantSagRulesResponseBodyGrantRulesGrantRule) SetCreateTime(v int64) *DescribeGrantSagRulesResponseBodyGrantRulesGrantRule {
	s.CreateTime = &v
	return s
}

func (s *DescribeGrantSagRulesResponseBodyGrantRulesGrantRule) SetGrantTrafficService(v bool) *DescribeGrantSagRulesResponseBodyGrantRulesGrantRule {
	s.GrantTrafficService = &v
	return s
}

func (s *DescribeGrantSagRulesResponseBodyGrantRulesGrantRule) SetInstanceId(v string) *DescribeGrantSagRulesResponseBodyGrantRulesGrantRule {
	s.InstanceId = &v
	return s
}

func (s *DescribeGrantSagRulesResponseBodyGrantRulesGrantRule) SetSmartAGId(v string) *DescribeGrantSagRulesResponseBodyGrantRulesGrantRule {
	s.SmartAGId = &v
	return s
}

type DescribeGrantSagRulesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeGrantSagRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeGrantSagRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantSagRulesResponse) GoString() string {
	return s.String()
}

func (s *DescribeGrantSagRulesResponse) SetHeaders(v map[string]*string) *DescribeGrantSagRulesResponse {
	s.Headers = v
	return s
}

func (s *DescribeGrantSagRulesResponse) SetStatusCode(v int32) *DescribeGrantSagRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGrantSagRulesResponse) SetBody(v *DescribeGrantSagRulesResponseBody) *DescribeGrantSagRulesResponse {
	s.Body = v
	return s
}

type DescribeGrantSagVbrRulesRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	VbrInstanceId        *string `json:"VbrInstanceId,omitempty" xml:"VbrInstanceId,omitempty"`
}

func (s DescribeGrantSagVbrRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantSagVbrRulesRequest) GoString() string {
	return s.String()
}

func (s *DescribeGrantSagVbrRulesRequest) SetOwnerAccount(v string) *DescribeGrantSagVbrRulesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeGrantSagVbrRulesRequest) SetOwnerId(v int64) *DescribeGrantSagVbrRulesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeGrantSagVbrRulesRequest) SetPageNumber(v int32) *DescribeGrantSagVbrRulesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeGrantSagVbrRulesRequest) SetPageSize(v int32) *DescribeGrantSagVbrRulesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeGrantSagVbrRulesRequest) SetRegionId(v string) *DescribeGrantSagVbrRulesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeGrantSagVbrRulesRequest) SetResourceOwnerAccount(v string) *DescribeGrantSagVbrRulesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeGrantSagVbrRulesRequest) SetResourceOwnerId(v int64) *DescribeGrantSagVbrRulesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeGrantSagVbrRulesRequest) SetSmartAGId(v string) *DescribeGrantSagVbrRulesRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeGrantSagVbrRulesRequest) SetVbrInstanceId(v string) *DescribeGrantSagVbrRulesRequest {
	s.VbrInstanceId = &v
	return s
}

type DescribeGrantSagVbrRulesResponseBody struct {
	GrantRules *DescribeGrantSagVbrRulesResponseBodyGrantRules `json:"GrantRules,omitempty" xml:"GrantRules,omitempty" type:"Struct"`
	PageNumber *int32                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeGrantSagVbrRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantSagVbrRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGrantSagVbrRulesResponseBody) SetGrantRules(v *DescribeGrantSagVbrRulesResponseBodyGrantRules) *DescribeGrantSagVbrRulesResponseBody {
	s.GrantRules = v
	return s
}

func (s *DescribeGrantSagVbrRulesResponseBody) SetPageNumber(v int32) *DescribeGrantSagVbrRulesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeGrantSagVbrRulesResponseBody) SetPageSize(v int32) *DescribeGrantSagVbrRulesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeGrantSagVbrRulesResponseBody) SetRequestId(v string) *DescribeGrantSagVbrRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGrantSagVbrRulesResponseBody) SetTotalCount(v int32) *DescribeGrantSagVbrRulesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeGrantSagVbrRulesResponseBodyGrantRules struct {
	GrantRule []*DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule `json:"GrantRule,omitempty" xml:"GrantRule,omitempty" type:"Repeated"`
}

func (s DescribeGrantSagVbrRulesResponseBodyGrantRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantSagVbrRulesResponseBodyGrantRules) GoString() string {
	return s.String()
}

func (s *DescribeGrantSagVbrRulesResponseBodyGrantRules) SetGrantRule(v []*DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule) *DescribeGrantSagVbrRulesResponseBodyGrantRules {
	s.GrantRule = v
	return s
}

type DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule struct {
	Bound         *bool   `json:"Bound,omitempty" xml:"Bound,omitempty"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SmartAGId     *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGUid    *int64  `json:"SmartAGUid,omitempty" xml:"SmartAGUid,omitempty"`
	VbrInstanceId *string `json:"VbrInstanceId,omitempty" xml:"VbrInstanceId,omitempty"`
	VbrRegionId   *string `json:"VbrRegionId,omitempty" xml:"VbrRegionId,omitempty"`
	VbrUid        *int64  `json:"VbrUid,omitempty" xml:"VbrUid,omitempty"`
}

func (s DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule) GoString() string {
	return s.String()
}

func (s *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule) SetBound(v bool) *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule {
	s.Bound = &v
	return s
}

func (s *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule) SetCreateTime(v int64) *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule {
	s.CreateTime = &v
	return s
}

func (s *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule) SetInstanceId(v string) *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule {
	s.InstanceId = &v
	return s
}

func (s *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule) SetSmartAGId(v string) *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule {
	s.SmartAGId = &v
	return s
}

func (s *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule) SetSmartAGUid(v int64) *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule {
	s.SmartAGUid = &v
	return s
}

func (s *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule) SetVbrInstanceId(v string) *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule {
	s.VbrInstanceId = &v
	return s
}

func (s *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule) SetVbrRegionId(v string) *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule {
	s.VbrRegionId = &v
	return s
}

func (s *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule) SetVbrUid(v int64) *DescribeGrantSagVbrRulesResponseBodyGrantRulesGrantRule {
	s.VbrUid = &v
	return s
}

type DescribeGrantSagVbrRulesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeGrantSagVbrRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeGrantSagVbrRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGrantSagVbrRulesResponse) GoString() string {
	return s.String()
}

func (s *DescribeGrantSagVbrRulesResponse) SetHeaders(v map[string]*string) *DescribeGrantSagVbrRulesResponse {
	s.Headers = v
	return s
}

func (s *DescribeGrantSagVbrRulesResponse) SetStatusCode(v int32) *DescribeGrantSagVbrRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGrantSagVbrRulesResponse) SetBody(v *DescribeGrantSagVbrRulesResponseBody) *DescribeGrantSagVbrRulesResponse {
	s.Body = v
	return s
}

type DescribeHealthCheckAttributeRequest struct {
	HcInstanceId         *string `json:"HcInstanceId,omitempty" xml:"HcInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeHealthCheckAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthCheckAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeHealthCheckAttributeRequest) SetHcInstanceId(v string) *DescribeHealthCheckAttributeRequest {
	s.HcInstanceId = &v
	return s
}

func (s *DescribeHealthCheckAttributeRequest) SetOwnerAccount(v string) *DescribeHealthCheckAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeHealthCheckAttributeRequest) SetOwnerId(v int64) *DescribeHealthCheckAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeHealthCheckAttributeRequest) SetRegionId(v string) *DescribeHealthCheckAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHealthCheckAttributeRequest) SetResourceOwnerAccount(v string) *DescribeHealthCheckAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeHealthCheckAttributeRequest) SetResourceOwnerId(v int64) *DescribeHealthCheckAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeHealthCheckAttributeRequest) SetSmartAGId(v string) *DescribeHealthCheckAttributeRequest {
	s.SmartAGId = &v
	return s
}

type DescribeHealthCheckAttributeResponseBody struct {
	CreateTime         *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DstIpAddr          *string `json:"DstIpAddr,omitempty" xml:"DstIpAddr,omitempty"`
	DstPort            *int32  `json:"DstPort,omitempty" xml:"DstPort,omitempty"`
	FailCountThreshold *int32  `json:"FailCountThreshold,omitempty" xml:"FailCountThreshold,omitempty"`
	HcInstanceId       *string `json:"HcInstanceId,omitempty" xml:"HcInstanceId,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProbeCount         *int32  `json:"ProbeCount,omitempty" xml:"ProbeCount,omitempty"`
	ProbeInterval      *int32  `json:"ProbeInterval,omitempty" xml:"ProbeInterval,omitempty"`
	ProbeTimeout       *int32  `json:"ProbeTimeout,omitempty" xml:"ProbeTimeout,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RttFailThreshold   *int32  `json:"RttFailThreshold,omitempty" xml:"RttFailThreshold,omitempty"`
	RttThreshold       *int32  `json:"RttThreshold,omitempty" xml:"RttThreshold,omitempty"`
	SmartAGId          *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SrcIpAddr          *string `json:"SrcIpAddr,omitempty" xml:"SrcIpAddr,omitempty"`
	SrcPort            *int32  `json:"SrcPort,omitempty" xml:"SrcPort,omitempty"`
	Type               *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeHealthCheckAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthCheckAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHealthCheckAttributeResponseBody) SetCreateTime(v int64) *DescribeHealthCheckAttributeResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetDescription(v string) *DescribeHealthCheckAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetDstIpAddr(v string) *DescribeHealthCheckAttributeResponseBody {
	s.DstIpAddr = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetDstPort(v int32) *DescribeHealthCheckAttributeResponseBody {
	s.DstPort = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetFailCountThreshold(v int32) *DescribeHealthCheckAttributeResponseBody {
	s.FailCountThreshold = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetHcInstanceId(v string) *DescribeHealthCheckAttributeResponseBody {
	s.HcInstanceId = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetName(v string) *DescribeHealthCheckAttributeResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetProbeCount(v int32) *DescribeHealthCheckAttributeResponseBody {
	s.ProbeCount = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetProbeInterval(v int32) *DescribeHealthCheckAttributeResponseBody {
	s.ProbeInterval = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetProbeTimeout(v int32) *DescribeHealthCheckAttributeResponseBody {
	s.ProbeTimeout = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetRequestId(v string) *DescribeHealthCheckAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetRttFailThreshold(v int32) *DescribeHealthCheckAttributeResponseBody {
	s.RttFailThreshold = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetRttThreshold(v int32) *DescribeHealthCheckAttributeResponseBody {
	s.RttThreshold = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetSmartAGId(v string) *DescribeHealthCheckAttributeResponseBody {
	s.SmartAGId = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetSrcIpAddr(v string) *DescribeHealthCheckAttributeResponseBody {
	s.SrcIpAddr = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetSrcPort(v int32) *DescribeHealthCheckAttributeResponseBody {
	s.SrcPort = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponseBody) SetType(v string) *DescribeHealthCheckAttributeResponseBody {
	s.Type = &v
	return s
}

type DescribeHealthCheckAttributeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeHealthCheckAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHealthCheckAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthCheckAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeHealthCheckAttributeResponse) SetHeaders(v map[string]*string) *DescribeHealthCheckAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeHealthCheckAttributeResponse) SetStatusCode(v int32) *DescribeHealthCheckAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHealthCheckAttributeResponse) SetBody(v *DescribeHealthCheckAttributeResponseBody) *DescribeHealthCheckAttributeResponse {
	s.Body = v
	return s
}

type DescribeHealthChecksRequest struct {
	HcInstanceId         *string `json:"HcInstanceId,omitempty" xml:"HcInstanceId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeHealthChecksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthChecksRequest) GoString() string {
	return s.String()
}

func (s *DescribeHealthChecksRequest) SetHcInstanceId(v string) *DescribeHealthChecksRequest {
	s.HcInstanceId = &v
	return s
}

func (s *DescribeHealthChecksRequest) SetName(v string) *DescribeHealthChecksRequest {
	s.Name = &v
	return s
}

func (s *DescribeHealthChecksRequest) SetOwnerAccount(v string) *DescribeHealthChecksRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeHealthChecksRequest) SetOwnerId(v int64) *DescribeHealthChecksRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeHealthChecksRequest) SetPageNumber(v int32) *DescribeHealthChecksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeHealthChecksRequest) SetPageSize(v int32) *DescribeHealthChecksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeHealthChecksRequest) SetRegionId(v string) *DescribeHealthChecksRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHealthChecksRequest) SetResourceOwnerAccount(v string) *DescribeHealthChecksRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeHealthChecksRequest) SetResourceOwnerId(v int64) *DescribeHealthChecksRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeHealthChecksRequest) SetSmartAGId(v string) *DescribeHealthChecksRequest {
	s.SmartAGId = &v
	return s
}

type DescribeHealthChecksResponseBody struct {
	HealthChecks *DescribeHealthChecksResponseBodyHealthChecks `json:"HealthChecks,omitempty" xml:"HealthChecks,omitempty" type:"Struct"`
	PageNumber   *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount   *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeHealthChecksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthChecksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHealthChecksResponseBody) SetHealthChecks(v *DescribeHealthChecksResponseBodyHealthChecks) *DescribeHealthChecksResponseBody {
	s.HealthChecks = v
	return s
}

func (s *DescribeHealthChecksResponseBody) SetPageNumber(v int32) *DescribeHealthChecksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeHealthChecksResponseBody) SetPageSize(v int32) *DescribeHealthChecksResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeHealthChecksResponseBody) SetRequestId(v string) *DescribeHealthChecksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHealthChecksResponseBody) SetTotalCount(v int32) *DescribeHealthChecksResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeHealthChecksResponseBodyHealthChecks struct {
	HealthCheck []*DescribeHealthChecksResponseBodyHealthChecksHealthCheck `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty" type:"Repeated"`
}

func (s DescribeHealthChecksResponseBodyHealthChecks) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthChecksResponseBodyHealthChecks) GoString() string {
	return s.String()
}

func (s *DescribeHealthChecksResponseBodyHealthChecks) SetHealthCheck(v []*DescribeHealthChecksResponseBodyHealthChecksHealthCheck) *DescribeHealthChecksResponseBodyHealthChecks {
	s.HealthCheck = v
	return s
}

type DescribeHealthChecksResponseBodyHealthChecksHealthCheck struct {
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DstIpAddr          *string `json:"DstIpAddr,omitempty" xml:"DstIpAddr,omitempty"`
	DstPort            *int32  `json:"DstPort,omitempty" xml:"DstPort,omitempty"`
	FailCountThreshold *int32  `json:"FailCountThreshold,omitempty" xml:"FailCountThreshold,omitempty"`
	HcInstanceId       *string `json:"HcInstanceId,omitempty" xml:"HcInstanceId,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProbeCount         *int32  `json:"ProbeCount,omitempty" xml:"ProbeCount,omitempty"`
	ProbeInterval      *int32  `json:"ProbeInterval,omitempty" xml:"ProbeInterval,omitempty"`
	ProbeTimeout       *int32  `json:"ProbeTimeout,omitempty" xml:"ProbeTimeout,omitempty"`
	RelationCount      *int32  `json:"RelationCount,omitempty" xml:"RelationCount,omitempty"`
	RttFailThreshold   *int32  `json:"RttFailThreshold,omitempty" xml:"RttFailThreshold,omitempty"`
	RttThreshold       *int32  `json:"RttThreshold,omitempty" xml:"RttThreshold,omitempty"`
	SmartAGId          *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SrcIpAddr          *string `json:"SrcIpAddr,omitempty" xml:"SrcIpAddr,omitempty"`
	SrcPort            *int32  `json:"SrcPort,omitempty" xml:"SrcPort,omitempty"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type               *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeHealthChecksResponseBodyHealthChecksHealthCheck) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthChecksResponseBodyHealthChecksHealthCheck) GoString() string {
	return s.String()
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetDescription(v string) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.Description = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetDstIpAddr(v string) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.DstIpAddr = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetDstPort(v int32) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.DstPort = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetFailCountThreshold(v int32) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.FailCountThreshold = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetHcInstanceId(v string) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.HcInstanceId = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetName(v string) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.Name = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetProbeCount(v int32) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.ProbeCount = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetProbeInterval(v int32) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.ProbeInterval = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetProbeTimeout(v int32) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.ProbeTimeout = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetRelationCount(v int32) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.RelationCount = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetRttFailThreshold(v int32) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.RttFailThreshold = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetRttThreshold(v int32) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.RttThreshold = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetSmartAGId(v string) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.SmartAGId = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetSrcIpAddr(v string) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.SrcIpAddr = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetSrcPort(v int32) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.SrcPort = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetStatus(v string) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.Status = &v
	return s
}

func (s *DescribeHealthChecksResponseBodyHealthChecksHealthCheck) SetType(v string) *DescribeHealthChecksResponseBodyHealthChecksHealthCheck {
	s.Type = &v
	return s
}

type DescribeHealthChecksResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeHealthChecksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHealthChecksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHealthChecksResponse) GoString() string {
	return s.String()
}

func (s *DescribeHealthChecksResponse) SetHeaders(v map[string]*string) *DescribeHealthChecksResponse {
	s.Headers = v
	return s
}

func (s *DescribeHealthChecksResponse) SetStatusCode(v int32) *DescribeHealthChecksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHealthChecksResponse) SetBody(v *DescribeHealthChecksResponseBody) *DescribeHealthChecksResponse {
	s.Body = v
	return s
}

type DescribeQosCarsRequest struct {
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Order                *string `json:"Order,omitempty" xml:"Order,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QosCarId             *string `json:"QosCarId,omitempty" xml:"QosCarId,omitempty"`
	QosId                *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeQosCarsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosCarsRequest) GoString() string {
	return s.String()
}

func (s *DescribeQosCarsRequest) SetDescription(v string) *DescribeQosCarsRequest {
	s.Description = &v
	return s
}

func (s *DescribeQosCarsRequest) SetOrder(v string) *DescribeQosCarsRequest {
	s.Order = &v
	return s
}

func (s *DescribeQosCarsRequest) SetOwnerAccount(v string) *DescribeQosCarsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeQosCarsRequest) SetOwnerId(v int64) *DescribeQosCarsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeQosCarsRequest) SetPageNumber(v int32) *DescribeQosCarsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeQosCarsRequest) SetPageSize(v int32) *DescribeQosCarsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeQosCarsRequest) SetQosCarId(v string) *DescribeQosCarsRequest {
	s.QosCarId = &v
	return s
}

func (s *DescribeQosCarsRequest) SetQosId(v string) *DescribeQosCarsRequest {
	s.QosId = &v
	return s
}

func (s *DescribeQosCarsRequest) SetRegionId(v string) *DescribeQosCarsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeQosCarsRequest) SetResourceOwnerAccount(v string) *DescribeQosCarsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeQosCarsRequest) SetResourceOwnerId(v int64) *DescribeQosCarsRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeQosCarsResponseBody struct {
	PageNumber *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QosCars    *DescribeQosCarsResponseBodyQosCars `json:"QosCars,omitempty" xml:"QosCars,omitempty" type:"Struct"`
	RequestId  *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeQosCarsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosCarsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeQosCarsResponseBody) SetPageNumber(v int32) *DescribeQosCarsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeQosCarsResponseBody) SetPageSize(v int32) *DescribeQosCarsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeQosCarsResponseBody) SetQosCars(v *DescribeQosCarsResponseBodyQosCars) *DescribeQosCarsResponseBody {
	s.QosCars = v
	return s
}

func (s *DescribeQosCarsResponseBody) SetRequestId(v string) *DescribeQosCarsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeQosCarsResponseBody) SetTotalCount(v int32) *DescribeQosCarsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeQosCarsResponseBodyQosCars struct {
	QosCar []*DescribeQosCarsResponseBodyQosCarsQosCar `json:"QosCar,omitempty" xml:"QosCar,omitempty" type:"Repeated"`
}

func (s DescribeQosCarsResponseBodyQosCars) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosCarsResponseBodyQosCars) GoString() string {
	return s.String()
}

func (s *DescribeQosCarsResponseBodyQosCars) SetQosCar(v []*DescribeQosCarsResponseBodyQosCarsQosCar) *DescribeQosCarsResponseBodyQosCars {
	s.QosCar = v
	return s
}

type DescribeQosCarsResponseBodyQosCarsQosCar struct {
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	LimitType           *string `json:"LimitType,omitempty" xml:"LimitType,omitempty"`
	MaxBandwidthAbs     *int32  `json:"MaxBandwidthAbs,omitempty" xml:"MaxBandwidthAbs,omitempty"`
	MaxBandwidthPercent *int32  `json:"MaxBandwidthPercent,omitempty" xml:"MaxBandwidthPercent,omitempty"`
	MinBandwidthAbs     *int32  `json:"MinBandwidthAbs,omitempty" xml:"MinBandwidthAbs,omitempty"`
	MinBandwidthPercent *int32  `json:"MinBandwidthPercent,omitempty" xml:"MinBandwidthPercent,omitempty"`
	Name                *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PercentSourceType   *string `json:"PercentSourceType,omitempty" xml:"PercentSourceType,omitempty"`
	Priority            *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	QosCarId            *string `json:"QosCarId,omitempty" xml:"QosCarId,omitempty"`
	QosId               *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
}

func (s DescribeQosCarsResponseBodyQosCarsQosCar) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosCarsResponseBodyQosCarsQosCar) GoString() string {
	return s.String()
}

func (s *DescribeQosCarsResponseBodyQosCarsQosCar) SetDescription(v string) *DescribeQosCarsResponseBodyQosCarsQosCar {
	s.Description = &v
	return s
}

func (s *DescribeQosCarsResponseBodyQosCarsQosCar) SetLimitType(v string) *DescribeQosCarsResponseBodyQosCarsQosCar {
	s.LimitType = &v
	return s
}

func (s *DescribeQosCarsResponseBodyQosCarsQosCar) SetMaxBandwidthAbs(v int32) *DescribeQosCarsResponseBodyQosCarsQosCar {
	s.MaxBandwidthAbs = &v
	return s
}

func (s *DescribeQosCarsResponseBodyQosCarsQosCar) SetMaxBandwidthPercent(v int32) *DescribeQosCarsResponseBodyQosCarsQosCar {
	s.MaxBandwidthPercent = &v
	return s
}

func (s *DescribeQosCarsResponseBodyQosCarsQosCar) SetMinBandwidthAbs(v int32) *DescribeQosCarsResponseBodyQosCarsQosCar {
	s.MinBandwidthAbs = &v
	return s
}

func (s *DescribeQosCarsResponseBodyQosCarsQosCar) SetMinBandwidthPercent(v int32) *DescribeQosCarsResponseBodyQosCarsQosCar {
	s.MinBandwidthPercent = &v
	return s
}

func (s *DescribeQosCarsResponseBodyQosCarsQosCar) SetName(v string) *DescribeQosCarsResponseBodyQosCarsQosCar {
	s.Name = &v
	return s
}

func (s *DescribeQosCarsResponseBodyQosCarsQosCar) SetPercentSourceType(v string) *DescribeQosCarsResponseBodyQosCarsQosCar {
	s.PercentSourceType = &v
	return s
}

func (s *DescribeQosCarsResponseBodyQosCarsQosCar) SetPriority(v int32) *DescribeQosCarsResponseBodyQosCarsQosCar {
	s.Priority = &v
	return s
}

func (s *DescribeQosCarsResponseBodyQosCarsQosCar) SetQosCarId(v string) *DescribeQosCarsResponseBodyQosCarsQosCar {
	s.QosCarId = &v
	return s
}

func (s *DescribeQosCarsResponseBodyQosCarsQosCar) SetQosId(v string) *DescribeQosCarsResponseBodyQosCarsQosCar {
	s.QosId = &v
	return s
}

type DescribeQosCarsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeQosCarsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeQosCarsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosCarsResponse) GoString() string {
	return s.String()
}

func (s *DescribeQosCarsResponse) SetHeaders(v map[string]*string) *DescribeQosCarsResponse {
	s.Headers = v
	return s
}

func (s *DescribeQosCarsResponse) SetStatusCode(v int32) *DescribeQosCarsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeQosCarsResponse) SetBody(v *DescribeQosCarsResponseBody) *DescribeQosCarsResponse {
	s.Body = v
	return s
}

type DescribeQosPoliciesRequest struct {
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Priority             *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	QosId                *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	QosPolicyId          *string `json:"QosPolicyId,omitempty" xml:"QosPolicyId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeQosPoliciesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosPoliciesRequest) GoString() string {
	return s.String()
}

func (s *DescribeQosPoliciesRequest) SetDescription(v string) *DescribeQosPoliciesRequest {
	s.Description = &v
	return s
}

func (s *DescribeQosPoliciesRequest) SetOwnerAccount(v string) *DescribeQosPoliciesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeQosPoliciesRequest) SetOwnerId(v int64) *DescribeQosPoliciesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeQosPoliciesRequest) SetPageNumber(v int32) *DescribeQosPoliciesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeQosPoliciesRequest) SetPageSize(v int32) *DescribeQosPoliciesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeQosPoliciesRequest) SetPriority(v int32) *DescribeQosPoliciesRequest {
	s.Priority = &v
	return s
}

func (s *DescribeQosPoliciesRequest) SetQosId(v string) *DescribeQosPoliciesRequest {
	s.QosId = &v
	return s
}

func (s *DescribeQosPoliciesRequest) SetQosPolicyId(v string) *DescribeQosPoliciesRequest {
	s.QosPolicyId = &v
	return s
}

func (s *DescribeQosPoliciesRequest) SetRegionId(v string) *DescribeQosPoliciesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeQosPoliciesRequest) SetResourceOwnerAccount(v string) *DescribeQosPoliciesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeQosPoliciesRequest) SetResourceOwnerId(v int64) *DescribeQosPoliciesRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeQosPoliciesResponseBody struct {
	PageNumber  *int32                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QosPolicies *DescribeQosPoliciesResponseBodyQosPolicies `json:"QosPolicies,omitempty" xml:"QosPolicies,omitempty" type:"Struct"`
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeQosPoliciesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosPoliciesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeQosPoliciesResponseBody) SetPageNumber(v int32) *DescribeQosPoliciesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeQosPoliciesResponseBody) SetPageSize(v int32) *DescribeQosPoliciesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeQosPoliciesResponseBody) SetQosPolicies(v *DescribeQosPoliciesResponseBodyQosPolicies) *DescribeQosPoliciesResponseBody {
	s.QosPolicies = v
	return s
}

func (s *DescribeQosPoliciesResponseBody) SetRequestId(v string) *DescribeQosPoliciesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeQosPoliciesResponseBody) SetTotalCount(v int32) *DescribeQosPoliciesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeQosPoliciesResponseBodyQosPolicies struct {
	QosPolicy []*DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy `json:"QosPolicy,omitempty" xml:"QosPolicy,omitempty" type:"Repeated"`
}

func (s DescribeQosPoliciesResponseBodyQosPolicies) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosPoliciesResponseBodyQosPolicies) GoString() string {
	return s.String()
}

func (s *DescribeQosPoliciesResponseBodyQosPolicies) SetQosPolicy(v []*DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) *DescribeQosPoliciesResponseBodyQosPolicies {
	s.QosPolicy = v
	return s
}

type DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy struct {
	Description     *string                                                             `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidr        *string                                                             `json:"DestCidr,omitempty" xml:"DestCidr,omitempty"`
	DestPortRange   *string                                                             `json:"DestPortRange,omitempty" xml:"DestPortRange,omitempty"`
	DpiGroupIds     *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiGroupIds     `json:"DpiGroupIds,omitempty" xml:"DpiGroupIds,omitempty" type:"Struct"`
	DpiSignatureIds *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiSignatureIds `json:"DpiSignatureIds,omitempty" xml:"DpiSignatureIds,omitempty" type:"Struct"`
	EndTime         *string                                                             `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	IpProtocol      *string                                                             `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Name            *string                                                             `json:"Name,omitempty" xml:"Name,omitempty"`
	Priority        *int32                                                              `json:"Priority,omitempty" xml:"Priority,omitempty"`
	QosId           *string                                                             `json:"QosId,omitempty" xml:"QosId,omitempty"`
	QosPolicyId     *string                                                             `json:"QosPolicyId,omitempty" xml:"QosPolicyId,omitempty"`
	SourceCidr      *string                                                             `json:"SourceCidr,omitempty" xml:"SourceCidr,omitempty"`
	SourcePortRange *string                                                             `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	StartTime       *string                                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) GoString() string {
	return s.String()
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetDescription(v string) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.Description = &v
	return s
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetDestCidr(v string) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.DestCidr = &v
	return s
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetDestPortRange(v string) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.DestPortRange = &v
	return s
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetDpiGroupIds(v *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiGroupIds) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.DpiGroupIds = v
	return s
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetDpiSignatureIds(v *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiSignatureIds) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.DpiSignatureIds = v
	return s
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetEndTime(v string) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.EndTime = &v
	return s
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetIpProtocol(v string) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.IpProtocol = &v
	return s
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetName(v string) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.Name = &v
	return s
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetPriority(v int32) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.Priority = &v
	return s
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetQosId(v string) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.QosId = &v
	return s
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetQosPolicyId(v string) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.QosPolicyId = &v
	return s
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetSourceCidr(v string) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.SourceCidr = &v
	return s
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetSourcePortRange(v string) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.SourcePortRange = &v
	return s
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy) SetStartTime(v string) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicy {
	s.StartTime = &v
	return s
}

type DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiGroupIds struct {
	DpiGroupId []*string `json:"DpiGroupId,omitempty" xml:"DpiGroupId,omitempty" type:"Repeated"`
}

func (s DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiGroupIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiGroupIds) GoString() string {
	return s.String()
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiGroupIds) SetDpiGroupId(v []*string) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiGroupIds {
	s.DpiGroupId = v
	return s
}

type DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiSignatureIds struct {
	DpiSignatureId []*string `json:"DpiSignatureId,omitempty" xml:"DpiSignatureId,omitempty" type:"Repeated"`
}

func (s DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiSignatureIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiSignatureIds) GoString() string {
	return s.String()
}

func (s *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiSignatureIds) SetDpiSignatureId(v []*string) *DescribeQosPoliciesResponseBodyQosPoliciesQosPolicyDpiSignatureIds {
	s.DpiSignatureId = v
	return s
}

type DescribeQosPoliciesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeQosPoliciesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeQosPoliciesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosPoliciesResponse) GoString() string {
	return s.String()
}

func (s *DescribeQosPoliciesResponse) SetHeaders(v map[string]*string) *DescribeQosPoliciesResponse {
	s.Headers = v
	return s
}

func (s *DescribeQosPoliciesResponse) SetStatusCode(v int32) *DescribeQosPoliciesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeQosPoliciesResponse) SetBody(v *DescribeQosPoliciesResponseBody) *DescribeQosPoliciesResponse {
	s.Body = v
	return s
}

type DescribeQosesRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QosIds               *string `json:"QosIds,omitempty" xml:"QosIds,omitempty"`
	QosName              *string `json:"QosName,omitempty" xml:"QosName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeQosesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosesRequest) GoString() string {
	return s.String()
}

func (s *DescribeQosesRequest) SetOwnerAccount(v string) *DescribeQosesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeQosesRequest) SetOwnerId(v int64) *DescribeQosesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeQosesRequest) SetPageNumber(v int32) *DescribeQosesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeQosesRequest) SetPageSize(v int32) *DescribeQosesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeQosesRequest) SetQosIds(v string) *DescribeQosesRequest {
	s.QosIds = &v
	return s
}

func (s *DescribeQosesRequest) SetQosName(v string) *DescribeQosesRequest {
	s.QosName = &v
	return s
}

func (s *DescribeQosesRequest) SetRegionId(v string) *DescribeQosesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeQosesRequest) SetResourceOwnerAccount(v string) *DescribeQosesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeQosesRequest) SetResourceOwnerId(v int64) *DescribeQosesRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeQosesResponseBody struct {
	PageNumber *int32                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Qoses      *DescribeQosesResponseBodyQoses `json:"Qoses,omitempty" xml:"Qoses,omitempty" type:"Struct"`
	RequestId  *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeQosesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeQosesResponseBody) SetPageNumber(v int32) *DescribeQosesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeQosesResponseBody) SetPageSize(v int32) *DescribeQosesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeQosesResponseBody) SetQoses(v *DescribeQosesResponseBodyQoses) *DescribeQosesResponseBody {
	s.Qoses = v
	return s
}

func (s *DescribeQosesResponseBody) SetRequestId(v string) *DescribeQosesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeQosesResponseBody) SetTotalCount(v int32) *DescribeQosesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeQosesResponseBodyQoses struct {
	Qos []*DescribeQosesResponseBodyQosesQos `json:"Qos,omitempty" xml:"Qos,omitempty" type:"Repeated"`
}

func (s DescribeQosesResponseBodyQoses) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosesResponseBodyQoses) GoString() string {
	return s.String()
}

func (s *DescribeQosesResponseBodyQoses) SetQos(v []*DescribeQosesResponseBodyQosesQos) *DescribeQosesResponseBodyQoses {
	s.Qos = v
	return s
}

type DescribeQosesResponseBodyQosesQos struct {
	QosDescription  *string `json:"QosDescription,omitempty" xml:"QosDescription,omitempty"`
	QosId           *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	QosName         *string `json:"QosName,omitempty" xml:"QosName,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SagCount        *string `json:"SagCount,omitempty" xml:"SagCount,omitempty"`
	SmartAGIds      *string `json:"SmartAGIds,omitempty" xml:"SmartAGIds,omitempty"`
}

func (s DescribeQosesResponseBodyQosesQos) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosesResponseBodyQosesQos) GoString() string {
	return s.String()
}

func (s *DescribeQosesResponseBodyQosesQos) SetQosDescription(v string) *DescribeQosesResponseBodyQosesQos {
	s.QosDescription = &v
	return s
}

func (s *DescribeQosesResponseBodyQosesQos) SetQosId(v string) *DescribeQosesResponseBodyQosesQos {
	s.QosId = &v
	return s
}

func (s *DescribeQosesResponseBodyQosesQos) SetQosName(v string) *DescribeQosesResponseBodyQosesQos {
	s.QosName = &v
	return s
}

func (s *DescribeQosesResponseBodyQosesQos) SetResourceGroupId(v string) *DescribeQosesResponseBodyQosesQos {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeQosesResponseBodyQosesQos) SetSagCount(v string) *DescribeQosesResponseBodyQosesQos {
	s.SagCount = &v
	return s
}

func (s *DescribeQosesResponseBodyQosesQos) SetSmartAGIds(v string) *DescribeQosesResponseBodyQosesQos {
	s.SmartAGIds = &v
	return s
}

type DescribeQosesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeQosesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeQosesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeQosesResponse) GoString() string {
	return s.String()
}

func (s *DescribeQosesResponse) SetHeaders(v map[string]*string) *DescribeQosesResponse {
	s.Headers = v
	return s
}

func (s *DescribeQosesResponse) SetStatusCode(v int32) *DescribeQosesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeQosesResponse) SetBody(v *DescribeQosesResponseBody) *DescribeQosesResponse {
	s.Body = v
	return s
}

type DescribeRegionsRequest struct {
	AcceptLanguage       *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionsRequest) SetAcceptLanguage(v string) *DescribeRegionsRequest {
	s.AcceptLanguage = &v
	return s
}

func (s *DescribeRegionsRequest) SetOwnerAccount(v string) *DescribeRegionsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRegionsRequest) SetOwnerId(v int64) *DescribeRegionsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRegionsRequest) SetResourceOwnerAccount(v string) *DescribeRegionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRegionsRequest) SetResourceOwnerId(v int64) *DescribeRegionsRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeRegionsResponseBody struct {
	Regions   *DescribeRegionsResponseBodyRegions `json:"Regions,omitempty" xml:"Regions,omitempty" type:"Struct"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBody) SetRegions(v *DescribeRegionsResponseBodyRegions) *DescribeRegionsResponseBody {
	s.Regions = v
	return s
}

func (s *DescribeRegionsResponseBody) SetRequestId(v string) *DescribeRegionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRegionsResponseBodyRegions struct {
	Region []*DescribeRegionsResponseBodyRegionsRegion `json:"Region,omitempty" xml:"Region,omitempty" type:"Repeated"`
}

func (s DescribeRegionsResponseBodyRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegions) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegions) SetRegion(v []*DescribeRegionsResponseBodyRegionsRegion) *DescribeRegionsResponseBodyRegions {
	s.Region = v
	return s
}

type DescribeRegionsResponseBodyRegionsRegion struct {
	LocalName      *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	RegionEndpoint *string `json:"RegionEndpoint,omitempty" xml:"RegionEndpoint,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeRegionsResponseBodyRegionsRegion) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegionsRegion) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetLocalName(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.LocalName = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetRegionEndpoint(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.RegionEndpoint = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetRegionId(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.RegionId = &v
	return s
}

type DescribeRegionsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetHeaders(v map[string]*string) *DescribeRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionsResponse) SetStatusCode(v int32) *DescribeRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRegionsResponse) SetBody(v *DescribeRegionsResponseBody) *DescribeRegionsResponse {
	s.Body = v
	return s
}

type DescribeRouteDistributionStrategiesRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SourceType           *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s DescribeRouteDistributionStrategiesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteDistributionStrategiesRequest) GoString() string {
	return s.String()
}

func (s *DescribeRouteDistributionStrategiesRequest) SetOwnerAccount(v string) *DescribeRouteDistributionStrategiesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesRequest) SetOwnerId(v int64) *DescribeRouteDistributionStrategiesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesRequest) SetPageNumber(v int32) *DescribeRouteDistributionStrategiesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesRequest) SetPageSize(v int32) *DescribeRouteDistributionStrategiesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesRequest) SetRegionId(v string) *DescribeRouteDistributionStrategiesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesRequest) SetResourceOwnerAccount(v string) *DescribeRouteDistributionStrategiesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesRequest) SetResourceOwnerId(v int64) *DescribeRouteDistributionStrategiesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesRequest) SetSmartAGId(v string) *DescribeRouteDistributionStrategiesRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesRequest) SetSourceType(v string) *DescribeRouteDistributionStrategiesRequest {
	s.SourceType = &v
	return s
}

type DescribeRouteDistributionStrategiesResponseBody struct {
	PageNumber *int32                                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Strategies *DescribeRouteDistributionStrategiesResponseBodyStrategies `json:"Strategies,omitempty" xml:"Strategies,omitempty" type:"Struct"`
	TotalCount *int32                                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeRouteDistributionStrategiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteDistributionStrategiesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRouteDistributionStrategiesResponseBody) SetPageNumber(v int32) *DescribeRouteDistributionStrategiesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBody) SetPageSize(v int32) *DescribeRouteDistributionStrategiesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBody) SetRequestId(v string) *DescribeRouteDistributionStrategiesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBody) SetStrategies(v *DescribeRouteDistributionStrategiesResponseBodyStrategies) *DescribeRouteDistributionStrategiesResponseBody {
	s.Strategies = v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBody) SetTotalCount(v int32) *DescribeRouteDistributionStrategiesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeRouteDistributionStrategiesResponseBodyStrategies struct {
	Strategy []*DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy `json:"Strategy,omitempty" xml:"Strategy,omitempty" type:"Repeated"`
}

func (s DescribeRouteDistributionStrategiesResponseBodyStrategies) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteDistributionStrategiesResponseBodyStrategies) GoString() string {
	return s.String()
}

func (s *DescribeRouteDistributionStrategiesResponseBodyStrategies) SetStrategy(v []*DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) *DescribeRouteDistributionStrategiesResponseBodyStrategies {
	s.Strategy = v
	return s
}

type DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy struct {
	ConflictInfo          *string `json:"ConflictInfo,omitempty" xml:"ConflictInfo,omitempty"`
	CreateTime            *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DestCidrBlock         *string `json:"DestCidrBlock,omitempty" xml:"DestCidrBlock,omitempty"`
	HcInstanceId          *string `json:"HcInstanceId,omitempty" xml:"HcInstanceId,omitempty"`
	IsConflict            *bool   `json:"IsConflict,omitempty" xml:"IsConflict,omitempty"`
	RouteDistribution     *string `json:"RouteDistribution,omitempty" xml:"RouteDistribution,omitempty"`
	RouteSource           *string `json:"RouteSource,omitempty" xml:"RouteSource,omitempty"`
	SmartAGId             *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SourceType            *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Status                *string `json:"Status,omitempty" xml:"Status,omitempty"`
	StrategyPublishStatus *string `json:"StrategyPublishStatus,omitempty" xml:"StrategyPublishStatus,omitempty"`
}

func (s DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) GoString() string {
	return s.String()
}

func (s *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) SetConflictInfo(v string) *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy {
	s.ConflictInfo = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) SetCreateTime(v int64) *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy {
	s.CreateTime = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) SetDestCidrBlock(v string) *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy {
	s.DestCidrBlock = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) SetHcInstanceId(v string) *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy {
	s.HcInstanceId = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) SetIsConflict(v bool) *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy {
	s.IsConflict = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) SetRouteDistribution(v string) *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy {
	s.RouteDistribution = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) SetRouteSource(v string) *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy {
	s.RouteSource = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) SetSmartAGId(v string) *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy {
	s.SmartAGId = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) SetSourceType(v string) *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy {
	s.SourceType = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) SetStatus(v string) *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy {
	s.Status = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy) SetStrategyPublishStatus(v string) *DescribeRouteDistributionStrategiesResponseBodyStrategiesStrategy {
	s.StrategyPublishStatus = &v
	return s
}

type DescribeRouteDistributionStrategiesResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRouteDistributionStrategiesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRouteDistributionStrategiesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRouteDistributionStrategiesResponse) GoString() string {
	return s.String()
}

func (s *DescribeRouteDistributionStrategiesResponse) SetHeaders(v map[string]*string) *DescribeRouteDistributionStrategiesResponse {
	s.Headers = v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponse) SetStatusCode(v int32) *DescribeRouteDistributionStrategiesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRouteDistributionStrategiesResponse) SetBody(v *DescribeRouteDistributionStrategiesResponseBody) *DescribeRouteDistributionStrategiesResponse {
	s.Body = v
	return s
}

type DescribeSAGDeviceInfoRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSAGDeviceInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSAGDeviceInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeSAGDeviceInfoRequest) SetOwnerAccount(v string) *DescribeSAGDeviceInfoRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSAGDeviceInfoRequest) SetOwnerId(v int64) *DescribeSAGDeviceInfoRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSAGDeviceInfoRequest) SetRegionId(v string) *DescribeSAGDeviceInfoRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSAGDeviceInfoRequest) SetResourceOwnerAccount(v string) *DescribeSAGDeviceInfoRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSAGDeviceInfoRequest) SetResourceOwnerId(v int64) *DescribeSAGDeviceInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSAGDeviceInfoRequest) SetSmartAGId(v string) *DescribeSAGDeviceInfoRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSAGDeviceInfoRequest) SetSmartAGSn(v string) *DescribeSAGDeviceInfoRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSAGDeviceInfoResponseBody struct {
	ControllerState             *string `json:"ControllerState,omitempty" xml:"ControllerState,omitempty"`
	LastConnectedControllerTime *string `json:"LastConnectedControllerTime,omitempty" xml:"LastConnectedControllerTime,omitempty"`
	RequestId                   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResettableStatus            *string `json:"ResettableStatus,omitempty" xml:"ResettableStatus,omitempty"`
	ServiceIP                   *string `json:"ServiceIP,omitempty" xml:"ServiceIP,omitempty"`
	SmartAGType                 *string `json:"SmartAGType,omitempty" xml:"SmartAGType,omitempty"`
	StartupTime                 *string `json:"StartupTime,omitempty" xml:"StartupTime,omitempty"`
	SynStatus                   *string `json:"SynStatus,omitempty" xml:"SynStatus,omitempty"`
	Version                     *string `json:"Version,omitempty" xml:"Version,omitempty"`
	VpnState                    *string `json:"VpnState,omitempty" xml:"VpnState,omitempty"`
}

func (s DescribeSAGDeviceInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSAGDeviceInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSAGDeviceInfoResponseBody) SetControllerState(v string) *DescribeSAGDeviceInfoResponseBody {
	s.ControllerState = &v
	return s
}

func (s *DescribeSAGDeviceInfoResponseBody) SetLastConnectedControllerTime(v string) *DescribeSAGDeviceInfoResponseBody {
	s.LastConnectedControllerTime = &v
	return s
}

func (s *DescribeSAGDeviceInfoResponseBody) SetRequestId(v string) *DescribeSAGDeviceInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSAGDeviceInfoResponseBody) SetResettableStatus(v string) *DescribeSAGDeviceInfoResponseBody {
	s.ResettableStatus = &v
	return s
}

func (s *DescribeSAGDeviceInfoResponseBody) SetServiceIP(v string) *DescribeSAGDeviceInfoResponseBody {
	s.ServiceIP = &v
	return s
}

func (s *DescribeSAGDeviceInfoResponseBody) SetSmartAGType(v string) *DescribeSAGDeviceInfoResponseBody {
	s.SmartAGType = &v
	return s
}

func (s *DescribeSAGDeviceInfoResponseBody) SetStartupTime(v string) *DescribeSAGDeviceInfoResponseBody {
	s.StartupTime = &v
	return s
}

func (s *DescribeSAGDeviceInfoResponseBody) SetSynStatus(v string) *DescribeSAGDeviceInfoResponseBody {
	s.SynStatus = &v
	return s
}

func (s *DescribeSAGDeviceInfoResponseBody) SetVersion(v string) *DescribeSAGDeviceInfoResponseBody {
	s.Version = &v
	return s
}

func (s *DescribeSAGDeviceInfoResponseBody) SetVpnState(v string) *DescribeSAGDeviceInfoResponseBody {
	s.VpnState = &v
	return s
}

type DescribeSAGDeviceInfoResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSAGDeviceInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSAGDeviceInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSAGDeviceInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeSAGDeviceInfoResponse) SetHeaders(v map[string]*string) *DescribeSAGDeviceInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeSAGDeviceInfoResponse) SetStatusCode(v int32) *DescribeSAGDeviceInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSAGDeviceInfoResponse) SetBody(v *DescribeSAGDeviceInfoResponseBody) *DescribeSAGDeviceInfoResponse {
	s.Body = v
	return s
}

type DescribeSagCurrentDnsRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagCurrentDnsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagCurrentDnsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagCurrentDnsRequest) SetOwnerAccount(v string) *DescribeSagCurrentDnsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagCurrentDnsRequest) SetOwnerId(v int64) *DescribeSagCurrentDnsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagCurrentDnsRequest) SetRegionId(v string) *DescribeSagCurrentDnsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagCurrentDnsRequest) SetResourceOwnerAccount(v string) *DescribeSagCurrentDnsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagCurrentDnsRequest) SetResourceOwnerId(v int64) *DescribeSagCurrentDnsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagCurrentDnsRequest) SetSmartAGId(v string) *DescribeSagCurrentDnsRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagCurrentDnsRequest) SetSmartAGSn(v string) *DescribeSagCurrentDnsRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagCurrentDnsResponseBody struct {
	MasterDns *string `json:"MasterDns,omitempty" xml:"MasterDns,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SlaveDns  *string `json:"SlaveDns,omitempty" xml:"SlaveDns,omitempty"`
}

func (s DescribeSagCurrentDnsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagCurrentDnsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagCurrentDnsResponseBody) SetMasterDns(v string) *DescribeSagCurrentDnsResponseBody {
	s.MasterDns = &v
	return s
}

func (s *DescribeSagCurrentDnsResponseBody) SetRequestId(v string) *DescribeSagCurrentDnsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagCurrentDnsResponseBody) SetSlaveDns(v string) *DescribeSagCurrentDnsResponseBody {
	s.SlaveDns = &v
	return s
}

type DescribeSagCurrentDnsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagCurrentDnsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagCurrentDnsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagCurrentDnsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagCurrentDnsResponse) SetHeaders(v map[string]*string) *DescribeSagCurrentDnsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagCurrentDnsResponse) SetStatusCode(v int32) *DescribeSagCurrentDnsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagCurrentDnsResponse) SetBody(v *DescribeSagCurrentDnsResponseBody) *DescribeSagCurrentDnsResponse {
	s.Body = v
	return s
}

type DescribeSagDropTopNRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Size                 *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeSagDropTopNRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagDropTopNRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagDropTopNRequest) SetOwnerAccount(v string) *DescribeSagDropTopNRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagDropTopNRequest) SetOwnerId(v int64) *DescribeSagDropTopNRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagDropTopNRequest) SetRegionId(v string) *DescribeSagDropTopNRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagDropTopNRequest) SetResourceOwnerAccount(v string) *DescribeSagDropTopNRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagDropTopNRequest) SetResourceOwnerId(v int64) *DescribeSagDropTopNRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagDropTopNRequest) SetSize(v int32) *DescribeSagDropTopNRequest {
	s.Size = &v
	return s
}

type DescribeSagDropTopNResponseBody struct {
	DropTopN  []*DescribeSagDropTopNResponseBodyDropTopN `json:"DropTopN,omitempty" xml:"DropTopN,omitempty" type:"Repeated"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSagDropTopNResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagDropTopNResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagDropTopNResponseBody) SetDropTopN(v []*DescribeSagDropTopNResponseBodyDropTopN) *DescribeSagDropTopNResponseBody {
	s.DropTopN = v
	return s
}

func (s *DescribeSagDropTopNResponseBody) SetRequestId(v string) *DescribeSagDropTopNResponseBody {
	s.RequestId = &v
	return s
}

type DescribeSagDropTopNResponseBodyDropTopN struct {
	DropRate   *string `json:"DropRate,omitempty" xml:"DropRate,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeSagDropTopNResponseBodyDropTopN) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagDropTopNResponseBodyDropTopN) GoString() string {
	return s.String()
}

func (s *DescribeSagDropTopNResponseBodyDropTopN) SetDropRate(v string) *DescribeSagDropTopNResponseBodyDropTopN {
	s.DropRate = &v
	return s
}

func (s *DescribeSagDropTopNResponseBodyDropTopN) SetInstanceId(v string) *DescribeSagDropTopNResponseBodyDropTopN {
	s.InstanceId = &v
	return s
}

func (s *DescribeSagDropTopNResponseBodyDropTopN) SetName(v string) *DescribeSagDropTopNResponseBodyDropTopN {
	s.Name = &v
	return s
}

func (s *DescribeSagDropTopNResponseBodyDropTopN) SetRegionId(v string) *DescribeSagDropTopNResponseBodyDropTopN {
	s.RegionId = &v
	return s
}

type DescribeSagDropTopNResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagDropTopNResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagDropTopNResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagDropTopNResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagDropTopNResponse) SetHeaders(v map[string]*string) *DescribeSagDropTopNResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagDropTopNResponse) SetStatusCode(v int32) *DescribeSagDropTopNResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagDropTopNResponse) SetBody(v *DescribeSagDropTopNResponseBody) *DescribeSagDropTopNResponse {
	s.Body = v
	return s
}

type DescribeSagExpressConnectInterfaceListRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PortName             *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagExpressConnectInterfaceListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagExpressConnectInterfaceListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagExpressConnectInterfaceListRequest) SetOwnerAccount(v string) *DescribeSagExpressConnectInterfaceListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListRequest) SetOwnerId(v int64) *DescribeSagExpressConnectInterfaceListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListRequest) SetPortName(v string) *DescribeSagExpressConnectInterfaceListRequest {
	s.PortName = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListRequest) SetRegionId(v string) *DescribeSagExpressConnectInterfaceListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListRequest) SetResourceOwnerAccount(v string) *DescribeSagExpressConnectInterfaceListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListRequest) SetResourceOwnerId(v int64) *DescribeSagExpressConnectInterfaceListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListRequest) SetSmartAGId(v string) *DescribeSagExpressConnectInterfaceListRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListRequest) SetSmartAGSn(v string) *DescribeSagExpressConnectInterfaceListRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagExpressConnectInterfaceListResponseBody struct {
	Interfaces []*DescribeSagExpressConnectInterfaceListResponseBodyInterfaces `json:"Interfaces,omitempty" xml:"Interfaces,omitempty" type:"Repeated"`
	RequestId  *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskStates []*DescribeSagExpressConnectInterfaceListResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s DescribeSagExpressConnectInterfaceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagExpressConnectInterfaceListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagExpressConnectInterfaceListResponseBody) SetInterfaces(v []*DescribeSagExpressConnectInterfaceListResponseBodyInterfaces) *DescribeSagExpressConnectInterfaceListResponseBody {
	s.Interfaces = v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListResponseBody) SetRequestId(v string) *DescribeSagExpressConnectInterfaceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListResponseBody) SetTaskStates(v []*DescribeSagExpressConnectInterfaceListResponseBodyTaskStates) *DescribeSagExpressConnectInterfaceListResponseBody {
	s.TaskStates = v
	return s
}

type DescribeSagExpressConnectInterfaceListResponseBodyInterfaces struct {
	IP   *string `json:"IP,omitempty" xml:"IP,omitempty"`
	Mask *string `json:"Mask,omitempty" xml:"Mask,omitempty"`
	Vlan *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s DescribeSagExpressConnectInterfaceListResponseBodyInterfaces) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagExpressConnectInterfaceListResponseBodyInterfaces) GoString() string {
	return s.String()
}

func (s *DescribeSagExpressConnectInterfaceListResponseBodyInterfaces) SetIP(v string) *DescribeSagExpressConnectInterfaceListResponseBodyInterfaces {
	s.IP = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListResponseBodyInterfaces) SetMask(v string) *DescribeSagExpressConnectInterfaceListResponseBodyInterfaces {
	s.Mask = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListResponseBodyInterfaces) SetVlan(v string) *DescribeSagExpressConnectInterfaceListResponseBodyInterfaces {
	s.Vlan = &v
	return s
}

type DescribeSagExpressConnectInterfaceListResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagExpressConnectInterfaceListResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagExpressConnectInterfaceListResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagExpressConnectInterfaceListResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagExpressConnectInterfaceListResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagExpressConnectInterfaceListResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagExpressConnectInterfaceListResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListResponseBodyTaskStates) SetState(v string) *DescribeSagExpressConnectInterfaceListResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagExpressConnectInterfaceListResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagExpressConnectInterfaceListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagExpressConnectInterfaceListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagExpressConnectInterfaceListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagExpressConnectInterfaceListResponse) SetHeaders(v map[string]*string) *DescribeSagExpressConnectInterfaceListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListResponse) SetStatusCode(v int32) *DescribeSagExpressConnectInterfaceListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagExpressConnectInterfaceListResponse) SetBody(v *DescribeSagExpressConnectInterfaceListResponseBody) *DescribeSagExpressConnectInterfaceListResponse {
	s.Body = v
	return s
}

type DescribeSagGlobalRouteProtocolRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagGlobalRouteProtocolRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagGlobalRouteProtocolRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagGlobalRouteProtocolRequest) SetOwnerAccount(v string) *DescribeSagGlobalRouteProtocolRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagGlobalRouteProtocolRequest) SetOwnerId(v int64) *DescribeSagGlobalRouteProtocolRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagGlobalRouteProtocolRequest) SetRegionId(v string) *DescribeSagGlobalRouteProtocolRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagGlobalRouteProtocolRequest) SetResourceOwnerAccount(v string) *DescribeSagGlobalRouteProtocolRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagGlobalRouteProtocolRequest) SetResourceOwnerId(v int64) *DescribeSagGlobalRouteProtocolRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagGlobalRouteProtocolRequest) SetSmartAGId(v string) *DescribeSagGlobalRouteProtocolRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagGlobalRouteProtocolRequest) SetSmartAGSn(v string) *DescribeSagGlobalRouteProtocolRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagGlobalRouteProtocolResponseBody struct {
	RequestId     *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RouteProtocol *string                                                 `json:"RouteProtocol,omitempty" xml:"RouteProtocol,omitempty"`
	TaskStates    []*DescribeSagGlobalRouteProtocolResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s DescribeSagGlobalRouteProtocolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagGlobalRouteProtocolResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagGlobalRouteProtocolResponseBody) SetRequestId(v string) *DescribeSagGlobalRouteProtocolResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagGlobalRouteProtocolResponseBody) SetRouteProtocol(v string) *DescribeSagGlobalRouteProtocolResponseBody {
	s.RouteProtocol = &v
	return s
}

func (s *DescribeSagGlobalRouteProtocolResponseBody) SetTaskStates(v []*DescribeSagGlobalRouteProtocolResponseBodyTaskStates) *DescribeSagGlobalRouteProtocolResponseBody {
	s.TaskStates = v
	return s
}

type DescribeSagGlobalRouteProtocolResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagGlobalRouteProtocolResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagGlobalRouteProtocolResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagGlobalRouteProtocolResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagGlobalRouteProtocolResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagGlobalRouteProtocolResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagGlobalRouteProtocolResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagGlobalRouteProtocolResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagGlobalRouteProtocolResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagGlobalRouteProtocolResponseBodyTaskStates) SetState(v string) *DescribeSagGlobalRouteProtocolResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagGlobalRouteProtocolResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagGlobalRouteProtocolResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagGlobalRouteProtocolResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagGlobalRouteProtocolResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagGlobalRouteProtocolResponse) SetHeaders(v map[string]*string) *DescribeSagGlobalRouteProtocolResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagGlobalRouteProtocolResponse) SetStatusCode(v int32) *DescribeSagGlobalRouteProtocolResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagGlobalRouteProtocolResponse) SetBody(v *DescribeSagGlobalRouteProtocolResponseBody) *DescribeSagGlobalRouteProtocolResponse {
	s.Body = v
	return s
}

type DescribeSagHaRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagHaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagHaRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagHaRequest) SetOwnerAccount(v string) *DescribeSagHaRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagHaRequest) SetOwnerId(v int64) *DescribeSagHaRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagHaRequest) SetRegionId(v string) *DescribeSagHaRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagHaRequest) SetResourceOwnerAccount(v string) *DescribeSagHaRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagHaRequest) SetResourceOwnerId(v int64) *DescribeSagHaRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagHaRequest) SetSmartAGId(v string) *DescribeSagHaRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagHaRequest) SetSmartAGSn(v string) *DescribeSagHaRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagHaResponseBody struct {
	Mode       *string                                `json:"Mode,omitempty" xml:"Mode,omitempty"`
	Ports      []*DescribeSagHaResponseBodyPorts      `json:"Ports,omitempty" xml:"Ports,omitempty" type:"Repeated"`
	RequestId  *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskStates []*DescribeSagHaResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s DescribeSagHaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagHaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagHaResponseBody) SetMode(v string) *DescribeSagHaResponseBody {
	s.Mode = &v
	return s
}

func (s *DescribeSagHaResponseBody) SetPorts(v []*DescribeSagHaResponseBodyPorts) *DescribeSagHaResponseBody {
	s.Ports = v
	return s
}

func (s *DescribeSagHaResponseBody) SetRequestId(v string) *DescribeSagHaResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagHaResponseBody) SetTaskStates(v []*DescribeSagHaResponseBodyTaskStates) *DescribeSagHaResponseBody {
	s.TaskStates = v
	return s
}

type DescribeSagHaResponseBodyPorts struct {
	PortName  *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	VirtualIp *string `json:"VirtualIp,omitempty" xml:"VirtualIp,omitempty"`
}

func (s DescribeSagHaResponseBodyPorts) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagHaResponseBodyPorts) GoString() string {
	return s.String()
}

func (s *DescribeSagHaResponseBodyPorts) SetPortName(v string) *DescribeSagHaResponseBodyPorts {
	s.PortName = &v
	return s
}

func (s *DescribeSagHaResponseBodyPorts) SetVirtualIp(v string) *DescribeSagHaResponseBodyPorts {
	s.VirtualIp = &v
	return s
}

type DescribeSagHaResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagHaResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagHaResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagHaResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagHaResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagHaResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagHaResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagHaResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagHaResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagHaResponseBodyTaskStates) SetState(v string) *DescribeSagHaResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagHaResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagHaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagHaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagHaResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagHaResponse) SetHeaders(v map[string]*string) *DescribeSagHaResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagHaResponse) SetStatusCode(v int32) *DescribeSagHaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagHaResponse) SetBody(v *DescribeSagHaResponseBody) *DescribeSagHaResponse {
	s.Body = v
	return s
}

type DescribeSagLanListRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagLanListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagLanListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagLanListRequest) SetOwnerAccount(v string) *DescribeSagLanListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagLanListRequest) SetOwnerId(v int64) *DescribeSagLanListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagLanListRequest) SetRegionId(v string) *DescribeSagLanListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagLanListRequest) SetResourceOwnerAccount(v string) *DescribeSagLanListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagLanListRequest) SetResourceOwnerId(v int64) *DescribeSagLanListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagLanListRequest) SetSmartAGId(v string) *DescribeSagLanListRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagLanListRequest) SetSmartAGSn(v string) *DescribeSagLanListRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagLanListResponseBody struct {
	Lans       []*DescribeSagLanListResponseBodyLans       `json:"Lans,omitempty" xml:"Lans,omitempty" type:"Repeated"`
	RequestId  *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskStates []*DescribeSagLanListResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s DescribeSagLanListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagLanListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagLanListResponseBody) SetLans(v []*DescribeSagLanListResponseBodyLans) *DescribeSagLanListResponseBody {
	s.Lans = v
	return s
}

func (s *DescribeSagLanListResponseBody) SetRequestId(v string) *DescribeSagLanListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagLanListResponseBody) SetTaskStates(v []*DescribeSagLanListResponseBodyTaskStates) *DescribeSagLanListResponseBody {
	s.TaskStates = v
	return s
}

type DescribeSagLanListResponseBodyLans struct {
	EndIp    *string `json:"EndIp,omitempty" xml:"EndIp,omitempty"`
	IP       *string `json:"IP,omitempty" xml:"IP,omitempty"`
	IPType   *string `json:"IPType,omitempty" xml:"IPType,omitempty"`
	Lease    *string `json:"Lease,omitempty" xml:"Lease,omitempty"`
	Mask     *string `json:"Mask,omitempty" xml:"Mask,omitempty"`
	PortName *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	StartIp  *string `json:"StartIp,omitempty" xml:"StartIp,omitempty"`
}

func (s DescribeSagLanListResponseBodyLans) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagLanListResponseBodyLans) GoString() string {
	return s.String()
}

func (s *DescribeSagLanListResponseBodyLans) SetEndIp(v string) *DescribeSagLanListResponseBodyLans {
	s.EndIp = &v
	return s
}

func (s *DescribeSagLanListResponseBodyLans) SetIP(v string) *DescribeSagLanListResponseBodyLans {
	s.IP = &v
	return s
}

func (s *DescribeSagLanListResponseBodyLans) SetIPType(v string) *DescribeSagLanListResponseBodyLans {
	s.IPType = &v
	return s
}

func (s *DescribeSagLanListResponseBodyLans) SetLease(v string) *DescribeSagLanListResponseBodyLans {
	s.Lease = &v
	return s
}

func (s *DescribeSagLanListResponseBodyLans) SetMask(v string) *DescribeSagLanListResponseBodyLans {
	s.Mask = &v
	return s
}

func (s *DescribeSagLanListResponseBodyLans) SetPortName(v string) *DescribeSagLanListResponseBodyLans {
	s.PortName = &v
	return s
}

func (s *DescribeSagLanListResponseBodyLans) SetStartIp(v string) *DescribeSagLanListResponseBodyLans {
	s.StartIp = &v
	return s
}

type DescribeSagLanListResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagLanListResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagLanListResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagLanListResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagLanListResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagLanListResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagLanListResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagLanListResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagLanListResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagLanListResponseBodyTaskStates) SetState(v string) *DescribeSagLanListResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagLanListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagLanListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagLanListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagLanListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagLanListResponse) SetHeaders(v map[string]*string) *DescribeSagLanListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagLanListResponse) SetStatusCode(v int32) *DescribeSagLanListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagLanListResponse) SetBody(v *DescribeSagLanListResponseBody) *DescribeSagLanListResponse {
	s.Body = v
	return s
}

type DescribeSagManagementPortRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagManagementPortRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagManagementPortRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagManagementPortRequest) SetOwnerAccount(v string) *DescribeSagManagementPortRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagManagementPortRequest) SetOwnerId(v int64) *DescribeSagManagementPortRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagManagementPortRequest) SetRegionId(v string) *DescribeSagManagementPortRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagManagementPortRequest) SetResourceOwnerAccount(v string) *DescribeSagManagementPortRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagManagementPortRequest) SetResourceOwnerId(v int64) *DescribeSagManagementPortRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagManagementPortRequest) SetSmartAGId(v string) *DescribeSagManagementPortRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagManagementPortRequest) SetSmartAGSn(v string) *DescribeSagManagementPortRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagManagementPortResponseBody struct {
	Gateway    *string                                            `json:"Gateway,omitempty" xml:"Gateway,omitempty"`
	IP         *string                                            `json:"IP,omitempty" xml:"IP,omitempty"`
	Mask       *string                                            `json:"Mask,omitempty" xml:"Mask,omitempty"`
	RequestId  *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskStates []*DescribeSagManagementPortResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s DescribeSagManagementPortResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagManagementPortResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagManagementPortResponseBody) SetGateway(v string) *DescribeSagManagementPortResponseBody {
	s.Gateway = &v
	return s
}

func (s *DescribeSagManagementPortResponseBody) SetIP(v string) *DescribeSagManagementPortResponseBody {
	s.IP = &v
	return s
}

func (s *DescribeSagManagementPortResponseBody) SetMask(v string) *DescribeSagManagementPortResponseBody {
	s.Mask = &v
	return s
}

func (s *DescribeSagManagementPortResponseBody) SetRequestId(v string) *DescribeSagManagementPortResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagManagementPortResponseBody) SetTaskStates(v []*DescribeSagManagementPortResponseBodyTaskStates) *DescribeSagManagementPortResponseBody {
	s.TaskStates = v
	return s
}

type DescribeSagManagementPortResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagManagementPortResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagManagementPortResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagManagementPortResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagManagementPortResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagManagementPortResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagManagementPortResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagManagementPortResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagManagementPortResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagManagementPortResponseBodyTaskStates) SetState(v string) *DescribeSagManagementPortResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagManagementPortResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagManagementPortResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagManagementPortResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagManagementPortResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagManagementPortResponse) SetHeaders(v map[string]*string) *DescribeSagManagementPortResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagManagementPortResponse) SetStatusCode(v int32) *DescribeSagManagementPortResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagManagementPortResponse) SetBody(v *DescribeSagManagementPortResponseBody) *DescribeSagManagementPortResponse {
	s.Body = v
	return s
}

type DescribeSagOnlineClientStatisticsRequest struct {
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGIds           []*string `json:"SmartAGIds,omitempty" xml:"SmartAGIds,omitempty" type:"Repeated"`
}

func (s DescribeSagOnlineClientStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagOnlineClientStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagOnlineClientStatisticsRequest) SetOwnerAccount(v string) *DescribeSagOnlineClientStatisticsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagOnlineClientStatisticsRequest) SetOwnerId(v int64) *DescribeSagOnlineClientStatisticsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagOnlineClientStatisticsRequest) SetRegionId(v string) *DescribeSagOnlineClientStatisticsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagOnlineClientStatisticsRequest) SetResourceOwnerAccount(v string) *DescribeSagOnlineClientStatisticsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagOnlineClientStatisticsRequest) SetResourceOwnerId(v int64) *DescribeSagOnlineClientStatisticsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagOnlineClientStatisticsRequest) SetSmartAGIds(v []*string) *DescribeSagOnlineClientStatisticsRequest {
	s.SmartAGIds = v
	return s
}

type DescribeSagOnlineClientStatisticsResponseBody struct {
	RequestId     *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SagStatistics *DescribeSagOnlineClientStatisticsResponseBodySagStatistics `json:"SagStatistics,omitempty" xml:"SagStatistics,omitempty" type:"Struct"`
}

func (s DescribeSagOnlineClientStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagOnlineClientStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagOnlineClientStatisticsResponseBody) SetRequestId(v string) *DescribeSagOnlineClientStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagOnlineClientStatisticsResponseBody) SetSagStatistics(v *DescribeSagOnlineClientStatisticsResponseBodySagStatistics) *DescribeSagOnlineClientStatisticsResponseBody {
	s.SagStatistics = v
	return s
}

type DescribeSagOnlineClientStatisticsResponseBodySagStatistics struct {
	Statistics []*DescribeSagOnlineClientStatisticsResponseBodySagStatisticsStatistics `json:"Statistics,omitempty" xml:"Statistics,omitempty" type:"Repeated"`
}

func (s DescribeSagOnlineClientStatisticsResponseBodySagStatistics) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagOnlineClientStatisticsResponseBodySagStatistics) GoString() string {
	return s.String()
}

func (s *DescribeSagOnlineClientStatisticsResponseBodySagStatistics) SetStatistics(v []*DescribeSagOnlineClientStatisticsResponseBodySagStatisticsStatistics) *DescribeSagOnlineClientStatisticsResponseBodySagStatistics {
	s.Statistics = v
	return s
}

type DescribeSagOnlineClientStatisticsResponseBodySagStatisticsStatistics struct {
	OnlineCount *string `json:"OnlineCount,omitempty" xml:"OnlineCount,omitempty"`
	SmartAGId   *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeSagOnlineClientStatisticsResponseBodySagStatisticsStatistics) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagOnlineClientStatisticsResponseBodySagStatisticsStatistics) GoString() string {
	return s.String()
}

func (s *DescribeSagOnlineClientStatisticsResponseBodySagStatisticsStatistics) SetOnlineCount(v string) *DescribeSagOnlineClientStatisticsResponseBodySagStatisticsStatistics {
	s.OnlineCount = &v
	return s
}

func (s *DescribeSagOnlineClientStatisticsResponseBodySagStatisticsStatistics) SetSmartAGId(v string) *DescribeSagOnlineClientStatisticsResponseBodySagStatisticsStatistics {
	s.SmartAGId = &v
	return s
}

type DescribeSagOnlineClientStatisticsResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagOnlineClientStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagOnlineClientStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagOnlineClientStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagOnlineClientStatisticsResponse) SetHeaders(v map[string]*string) *DescribeSagOnlineClientStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagOnlineClientStatisticsResponse) SetStatusCode(v int32) *DescribeSagOnlineClientStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagOnlineClientStatisticsResponse) SetBody(v *DescribeSagOnlineClientStatisticsResponseBody) *DescribeSagOnlineClientStatisticsResponse {
	s.Body = v
	return s
}

type DescribeSagPortListRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagPortListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagPortListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagPortListRequest) SetOwnerAccount(v string) *DescribeSagPortListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagPortListRequest) SetOwnerId(v int64) *DescribeSagPortListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagPortListRequest) SetRegionId(v string) *DescribeSagPortListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagPortListRequest) SetResourceOwnerAccount(v string) *DescribeSagPortListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagPortListRequest) SetResourceOwnerId(v int64) *DescribeSagPortListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagPortListRequest) SetSmartAGId(v string) *DescribeSagPortListRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagPortListRequest) SetSmartAGSn(v string) *DescribeSagPortListRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagPortListResponseBody struct {
	Ports      []*DescribeSagPortListResponseBodyPorts      `json:"Ports,omitempty" xml:"Ports,omitempty" type:"Repeated"`
	RequestId  *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskStates []*DescribeSagPortListResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s DescribeSagPortListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagPortListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagPortListResponseBody) SetPorts(v []*DescribeSagPortListResponseBodyPorts) *DescribeSagPortListResponseBody {
	s.Ports = v
	return s
}

func (s *DescribeSagPortListResponseBody) SetRequestId(v string) *DescribeSagPortListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagPortListResponseBody) SetTaskStates(v []*DescribeSagPortListResponseBodyTaskStates) *DescribeSagPortListResponseBody {
	s.TaskStates = v
	return s
}

type DescribeSagPortListResponseBodyPorts struct {
	Mac      *string `json:"Mac,omitempty" xml:"Mac,omitempty"`
	PortName *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	Role     *string `json:"Role,omitempty" xml:"Role,omitempty"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSagPortListResponseBodyPorts) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagPortListResponseBodyPorts) GoString() string {
	return s.String()
}

func (s *DescribeSagPortListResponseBodyPorts) SetMac(v string) *DescribeSagPortListResponseBodyPorts {
	s.Mac = &v
	return s
}

func (s *DescribeSagPortListResponseBodyPorts) SetPortName(v string) *DescribeSagPortListResponseBodyPorts {
	s.PortName = &v
	return s
}

func (s *DescribeSagPortListResponseBodyPorts) SetRole(v string) *DescribeSagPortListResponseBodyPorts {
	s.Role = &v
	return s
}

func (s *DescribeSagPortListResponseBodyPorts) SetStatus(v string) *DescribeSagPortListResponseBodyPorts {
	s.Status = &v
	return s
}

type DescribeSagPortListResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagPortListResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagPortListResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagPortListResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagPortListResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagPortListResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagPortListResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagPortListResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagPortListResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagPortListResponseBodyTaskStates) SetState(v string) *DescribeSagPortListResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagPortListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagPortListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagPortListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagPortListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagPortListResponse) SetHeaders(v map[string]*string) *DescribeSagPortListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagPortListResponse) SetStatusCode(v int32) *DescribeSagPortListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagPortListResponse) SetBody(v *DescribeSagPortListResponseBody) *DescribeSagPortListResponse {
	s.Body = v
	return s
}

type DescribeSagPortRouteProtocolListRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagPortRouteProtocolListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagPortRouteProtocolListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagPortRouteProtocolListRequest) SetOwnerAccount(v string) *DescribeSagPortRouteProtocolListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListRequest) SetOwnerId(v int64) *DescribeSagPortRouteProtocolListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListRequest) SetRegionId(v string) *DescribeSagPortRouteProtocolListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListRequest) SetResourceOwnerAccount(v string) *DescribeSagPortRouteProtocolListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListRequest) SetResourceOwnerId(v int64) *DescribeSagPortRouteProtocolListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListRequest) SetSmartAGId(v string) *DescribeSagPortRouteProtocolListRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListRequest) SetSmartAGSn(v string) *DescribeSagPortRouteProtocolListRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagPortRouteProtocolListResponseBody struct {
	Ports      []*DescribeSagPortRouteProtocolListResponseBodyPorts      `json:"Ports,omitempty" xml:"Ports,omitempty" type:"Repeated"`
	RequestId  *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskStates []*DescribeSagPortRouteProtocolListResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s DescribeSagPortRouteProtocolListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagPortRouteProtocolListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagPortRouteProtocolListResponseBody) SetPorts(v []*DescribeSagPortRouteProtocolListResponseBodyPorts) *DescribeSagPortRouteProtocolListResponseBody {
	s.Ports = v
	return s
}

func (s *DescribeSagPortRouteProtocolListResponseBody) SetRequestId(v string) *DescribeSagPortRouteProtocolListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListResponseBody) SetTaskStates(v []*DescribeSagPortRouteProtocolListResponseBodyTaskStates) *DescribeSagPortRouteProtocolListResponseBody {
	s.TaskStates = v
	return s
}

type DescribeSagPortRouteProtocolListResponseBodyPorts struct {
	NeighborIp    *string `json:"NeighborIp,omitempty" xml:"NeighborIp,omitempty"`
	PortName      *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RemoteAs      *string `json:"RemoteAs,omitempty" xml:"RemoteAs,omitempty"`
	RemoteIp      *string `json:"RemoteIp,omitempty" xml:"RemoteIp,omitempty"`
	RouteProtocol *string `json:"RouteProtocol,omitempty" xml:"RouteProtocol,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Vlan          *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s DescribeSagPortRouteProtocolListResponseBodyPorts) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagPortRouteProtocolListResponseBodyPorts) GoString() string {
	return s.String()
}

func (s *DescribeSagPortRouteProtocolListResponseBodyPorts) SetNeighborIp(v string) *DescribeSagPortRouteProtocolListResponseBodyPorts {
	s.NeighborIp = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListResponseBodyPorts) SetPortName(v string) *DescribeSagPortRouteProtocolListResponseBodyPorts {
	s.PortName = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListResponseBodyPorts) SetRemoteAs(v string) *DescribeSagPortRouteProtocolListResponseBodyPorts {
	s.RemoteAs = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListResponseBodyPorts) SetRemoteIp(v string) *DescribeSagPortRouteProtocolListResponseBodyPorts {
	s.RemoteIp = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListResponseBodyPorts) SetRouteProtocol(v string) *DescribeSagPortRouteProtocolListResponseBodyPorts {
	s.RouteProtocol = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListResponseBodyPorts) SetStatus(v string) *DescribeSagPortRouteProtocolListResponseBodyPorts {
	s.Status = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListResponseBodyPorts) SetVlan(v string) *DescribeSagPortRouteProtocolListResponseBodyPorts {
	s.Vlan = &v
	return s
}

type DescribeSagPortRouteProtocolListResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagPortRouteProtocolListResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagPortRouteProtocolListResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagPortRouteProtocolListResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagPortRouteProtocolListResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagPortRouteProtocolListResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagPortRouteProtocolListResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListResponseBodyTaskStates) SetState(v string) *DescribeSagPortRouteProtocolListResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagPortRouteProtocolListResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagPortRouteProtocolListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagPortRouteProtocolListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagPortRouteProtocolListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagPortRouteProtocolListResponse) SetHeaders(v map[string]*string) *DescribeSagPortRouteProtocolListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagPortRouteProtocolListResponse) SetStatusCode(v int32) *DescribeSagPortRouteProtocolListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagPortRouteProtocolListResponse) SetBody(v *DescribeSagPortRouteProtocolListResponseBody) *DescribeSagPortRouteProtocolListResponse {
	s.Body = v
	return s
}

type DescribeSagRemoteAccessRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SerialNumber         *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeSagRemoteAccessRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRemoteAccessRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagRemoteAccessRequest) SetOwnerAccount(v string) *DescribeSagRemoteAccessRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagRemoteAccessRequest) SetOwnerId(v int64) *DescribeSagRemoteAccessRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagRemoteAccessRequest) SetRegionId(v string) *DescribeSagRemoteAccessRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagRemoteAccessRequest) SetResourceOwnerAccount(v string) *DescribeSagRemoteAccessRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagRemoteAccessRequest) SetResourceOwnerId(v int64) *DescribeSagRemoteAccessRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagRemoteAccessRequest) SetSerialNumber(v string) *DescribeSagRemoteAccessRequest {
	s.SerialNumber = &v
	return s
}

func (s *DescribeSagRemoteAccessRequest) SetSmartAGId(v string) *DescribeSagRemoteAccessRequest {
	s.SmartAGId = &v
	return s
}

type DescribeSagRemoteAccessResponseBody struct {
	Code           *string                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RemoteAccesses *DescribeSagRemoteAccessResponseBodyRemoteAccesses `json:"RemoteAccesses,omitempty" xml:"RemoteAccesses,omitempty" type:"Struct"`
	RequestId      *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmartAGId      *string                                            `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	Success        *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSagRemoteAccessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRemoteAccessResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagRemoteAccessResponseBody) SetCode(v string) *DescribeSagRemoteAccessResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSagRemoteAccessResponseBody) SetMessage(v string) *DescribeSagRemoteAccessResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSagRemoteAccessResponseBody) SetRemoteAccesses(v *DescribeSagRemoteAccessResponseBodyRemoteAccesses) *DescribeSagRemoteAccessResponseBody {
	s.RemoteAccesses = v
	return s
}

func (s *DescribeSagRemoteAccessResponseBody) SetRequestId(v string) *DescribeSagRemoteAccessResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagRemoteAccessResponseBody) SetSmartAGId(v string) *DescribeSagRemoteAccessResponseBody {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagRemoteAccessResponseBody) SetSuccess(v bool) *DescribeSagRemoteAccessResponseBody {
	s.Success = &v
	return s
}

type DescribeSagRemoteAccessResponseBodyRemoteAccesses struct {
	RemoteAccess []*DescribeSagRemoteAccessResponseBodyRemoteAccessesRemoteAccess `json:"RemoteAccess,omitempty" xml:"RemoteAccess,omitempty" type:"Repeated"`
}

func (s DescribeSagRemoteAccessResponseBodyRemoteAccesses) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRemoteAccessResponseBodyRemoteAccesses) GoString() string {
	return s.String()
}

func (s *DescribeSagRemoteAccessResponseBodyRemoteAccesses) SetRemoteAccess(v []*DescribeSagRemoteAccessResponseBodyRemoteAccessesRemoteAccess) *DescribeSagRemoteAccessResponseBodyRemoteAccesses {
	s.RemoteAccess = v
	return s
}

type DescribeSagRemoteAccessResponseBodyRemoteAccessesRemoteAccess struct {
	RemoteAccessIp *string `json:"RemoteAccessIp,omitempty" xml:"RemoteAccessIp,omitempty"`
	SerialNumber   *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
}

func (s DescribeSagRemoteAccessResponseBodyRemoteAccessesRemoteAccess) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRemoteAccessResponseBodyRemoteAccessesRemoteAccess) GoString() string {
	return s.String()
}

func (s *DescribeSagRemoteAccessResponseBodyRemoteAccessesRemoteAccess) SetRemoteAccessIp(v string) *DescribeSagRemoteAccessResponseBodyRemoteAccessesRemoteAccess {
	s.RemoteAccessIp = &v
	return s
}

func (s *DescribeSagRemoteAccessResponseBodyRemoteAccessesRemoteAccess) SetSerialNumber(v string) *DescribeSagRemoteAccessResponseBodyRemoteAccessesRemoteAccess {
	s.SerialNumber = &v
	return s
}

type DescribeSagRemoteAccessResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagRemoteAccessResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagRemoteAccessResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRemoteAccessResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagRemoteAccessResponse) SetHeaders(v map[string]*string) *DescribeSagRemoteAccessResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagRemoteAccessResponse) SetStatusCode(v int32) *DescribeSagRemoteAccessResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagRemoteAccessResponse) SetBody(v *DescribeSagRemoteAccessResponseBody) *DescribeSagRemoteAccessResponse {
	s.Body = v
	return s
}

type DescribeSagRouteListRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagRouteListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRouteListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagRouteListRequest) SetOwnerAccount(v string) *DescribeSagRouteListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagRouteListRequest) SetOwnerId(v int64) *DescribeSagRouteListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagRouteListRequest) SetRegionId(v string) *DescribeSagRouteListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagRouteListRequest) SetResourceOwnerAccount(v string) *DescribeSagRouteListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagRouteListRequest) SetResourceOwnerId(v int64) *DescribeSagRouteListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagRouteListRequest) SetSmartAGId(v string) *DescribeSagRouteListRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagRouteListRequest) SetSmartAGSn(v string) *DescribeSagRouteListRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagRouteListResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Routes    []*DescribeSagRouteListResponseBodyRoutes `json:"Routes,omitempty" xml:"Routes,omitempty" type:"Repeated"`
}

func (s DescribeSagRouteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRouteListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagRouteListResponseBody) SetRequestId(v string) *DescribeSagRouteListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagRouteListResponseBody) SetRoutes(v []*DescribeSagRouteListResponseBodyRoutes) *DescribeSagRouteListResponseBody {
	s.Routes = v
	return s
}

type DescribeSagRouteListResponseBodyRoutes struct {
	ConflictCidrs   []*string `json:"ConflictCidrs,omitempty" xml:"ConflictCidrs,omitempty" type:"Repeated"`
	Cost            *string   `json:"Cost,omitempty" xml:"Cost,omitempty"`
	DestinationCidr *string   `json:"DestinationCidr,omitempty" xml:"DestinationCidr,omitempty"`
	NextHop         *string   `json:"NextHop,omitempty" xml:"NextHop,omitempty"`
	PortName        *string   `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RouteProtocol   *string   `json:"RouteProtocol,omitempty" xml:"RouteProtocol,omitempty"`
}

func (s DescribeSagRouteListResponseBodyRoutes) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRouteListResponseBodyRoutes) GoString() string {
	return s.String()
}

func (s *DescribeSagRouteListResponseBodyRoutes) SetConflictCidrs(v []*string) *DescribeSagRouteListResponseBodyRoutes {
	s.ConflictCidrs = v
	return s
}

func (s *DescribeSagRouteListResponseBodyRoutes) SetCost(v string) *DescribeSagRouteListResponseBodyRoutes {
	s.Cost = &v
	return s
}

func (s *DescribeSagRouteListResponseBodyRoutes) SetDestinationCidr(v string) *DescribeSagRouteListResponseBodyRoutes {
	s.DestinationCidr = &v
	return s
}

func (s *DescribeSagRouteListResponseBodyRoutes) SetNextHop(v string) *DescribeSagRouteListResponseBodyRoutes {
	s.NextHop = &v
	return s
}

func (s *DescribeSagRouteListResponseBodyRoutes) SetPortName(v string) *DescribeSagRouteListResponseBodyRoutes {
	s.PortName = &v
	return s
}

func (s *DescribeSagRouteListResponseBodyRoutes) SetRouteProtocol(v string) *DescribeSagRouteListResponseBodyRoutes {
	s.RouteProtocol = &v
	return s
}

type DescribeSagRouteListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagRouteListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagRouteListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRouteListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagRouteListResponse) SetHeaders(v map[string]*string) *DescribeSagRouteListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagRouteListResponse) SetStatusCode(v int32) *DescribeSagRouteListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagRouteListResponse) SetBody(v *DescribeSagRouteListResponseBody) *DescribeSagRouteListResponse {
	s.Body = v
	return s
}

type DescribeSagRouteProtocolBgpRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagRouteProtocolBgpRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRouteProtocolBgpRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagRouteProtocolBgpRequest) SetOwnerAccount(v string) *DescribeSagRouteProtocolBgpRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpRequest) SetOwnerId(v int64) *DescribeSagRouteProtocolBgpRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpRequest) SetRegionId(v string) *DescribeSagRouteProtocolBgpRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpRequest) SetResourceOwnerAccount(v string) *DescribeSagRouteProtocolBgpRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpRequest) SetResourceOwnerId(v int64) *DescribeSagRouteProtocolBgpRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpRequest) SetSmartAGId(v string) *DescribeSagRouteProtocolBgpRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpRequest) SetSmartAGSn(v string) *DescribeSagRouteProtocolBgpRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagRouteProtocolBgpResponseBody struct {
	HoldTime   *int32                                               `json:"HoldTime,omitempty" xml:"HoldTime,omitempty"`
	KeepAlive  *int32                                               `json:"KeepAlive,omitempty" xml:"KeepAlive,omitempty"`
	LocalAs    *int32                                               `json:"LocalAs,omitempty" xml:"LocalAs,omitempty"`
	RequestId  *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RouterId   *string                                              `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	TaskStates []*DescribeSagRouteProtocolBgpResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s DescribeSagRouteProtocolBgpResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRouteProtocolBgpResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagRouteProtocolBgpResponseBody) SetHoldTime(v int32) *DescribeSagRouteProtocolBgpResponseBody {
	s.HoldTime = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpResponseBody) SetKeepAlive(v int32) *DescribeSagRouteProtocolBgpResponseBody {
	s.KeepAlive = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpResponseBody) SetLocalAs(v int32) *DescribeSagRouteProtocolBgpResponseBody {
	s.LocalAs = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpResponseBody) SetRequestId(v string) *DescribeSagRouteProtocolBgpResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpResponseBody) SetRouterId(v string) *DescribeSagRouteProtocolBgpResponseBody {
	s.RouterId = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpResponseBody) SetTaskStates(v []*DescribeSagRouteProtocolBgpResponseBodyTaskStates) *DescribeSagRouteProtocolBgpResponseBody {
	s.TaskStates = v
	return s
}

type DescribeSagRouteProtocolBgpResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagRouteProtocolBgpResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRouteProtocolBgpResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagRouteProtocolBgpResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagRouteProtocolBgpResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagRouteProtocolBgpResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagRouteProtocolBgpResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpResponseBodyTaskStates) SetState(v string) *DescribeSagRouteProtocolBgpResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagRouteProtocolBgpResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagRouteProtocolBgpResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagRouteProtocolBgpResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRouteProtocolBgpResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagRouteProtocolBgpResponse) SetHeaders(v map[string]*string) *DescribeSagRouteProtocolBgpResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagRouteProtocolBgpResponse) SetStatusCode(v int32) *DescribeSagRouteProtocolBgpResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagRouteProtocolBgpResponse) SetBody(v *DescribeSagRouteProtocolBgpResponseBody) *DescribeSagRouteProtocolBgpResponse {
	s.Body = v
	return s
}

type DescribeSagRouteProtocolOspfRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagRouteProtocolOspfRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRouteProtocolOspfRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagRouteProtocolOspfRequest) SetOwnerAccount(v string) *DescribeSagRouteProtocolOspfRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfRequest) SetOwnerId(v int64) *DescribeSagRouteProtocolOspfRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfRequest) SetRegionId(v string) *DescribeSagRouteProtocolOspfRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfRequest) SetResourceOwnerAccount(v string) *DescribeSagRouteProtocolOspfRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfRequest) SetResourceOwnerId(v int64) *DescribeSagRouteProtocolOspfRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfRequest) SetSmartAGId(v string) *DescribeSagRouteProtocolOspfRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfRequest) SetSmartAGSn(v string) *DescribeSagRouteProtocolOspfRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagRouteProtocolOspfResponseBody struct {
	AreaId             *string                                               `json:"AreaId,omitempty" xml:"AreaId,omitempty"`
	AreaType           *string                                               `json:"AreaType,omitempty" xml:"AreaType,omitempty"`
	AuthenticationType *string                                               `json:"AuthenticationType,omitempty" xml:"AuthenticationType,omitempty"`
	DeadTime           *int32                                                `json:"DeadTime,omitempty" xml:"DeadTime,omitempty"`
	HelloTime          *int32                                                `json:"HelloTime,omitempty" xml:"HelloTime,omitempty"`
	Md5Key             *string                                               `json:"Md5Key,omitempty" xml:"Md5Key,omitempty"`
	Md5KeyId           *int32                                                `json:"Md5KeyId,omitempty" xml:"Md5KeyId,omitempty"`
	RequestId          *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RouterId           *string                                               `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	TaskStates         []*DescribeSagRouteProtocolOspfResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s DescribeSagRouteProtocolOspfResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRouteProtocolOspfResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagRouteProtocolOspfResponseBody) SetAreaId(v string) *DescribeSagRouteProtocolOspfResponseBody {
	s.AreaId = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponseBody) SetAreaType(v string) *DescribeSagRouteProtocolOspfResponseBody {
	s.AreaType = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponseBody) SetAuthenticationType(v string) *DescribeSagRouteProtocolOspfResponseBody {
	s.AuthenticationType = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponseBody) SetDeadTime(v int32) *DescribeSagRouteProtocolOspfResponseBody {
	s.DeadTime = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponseBody) SetHelloTime(v int32) *DescribeSagRouteProtocolOspfResponseBody {
	s.HelloTime = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponseBody) SetMd5Key(v string) *DescribeSagRouteProtocolOspfResponseBody {
	s.Md5Key = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponseBody) SetMd5KeyId(v int32) *DescribeSagRouteProtocolOspfResponseBody {
	s.Md5KeyId = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponseBody) SetRequestId(v string) *DescribeSagRouteProtocolOspfResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponseBody) SetRouterId(v string) *DescribeSagRouteProtocolOspfResponseBody {
	s.RouterId = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponseBody) SetTaskStates(v []*DescribeSagRouteProtocolOspfResponseBodyTaskStates) *DescribeSagRouteProtocolOspfResponseBody {
	s.TaskStates = v
	return s
}

type DescribeSagRouteProtocolOspfResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagRouteProtocolOspfResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRouteProtocolOspfResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagRouteProtocolOspfResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagRouteProtocolOspfResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagRouteProtocolOspfResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagRouteProtocolOspfResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponseBodyTaskStates) SetState(v string) *DescribeSagRouteProtocolOspfResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagRouteProtocolOspfResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagRouteProtocolOspfResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagRouteProtocolOspfResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagRouteProtocolOspfResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagRouteProtocolOspfResponse) SetHeaders(v map[string]*string) *DescribeSagRouteProtocolOspfResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponse) SetStatusCode(v int32) *DescribeSagRouteProtocolOspfResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagRouteProtocolOspfResponse) SetBody(v *DescribeSagRouteProtocolOspfResponseBody) *DescribeSagRouteProtocolOspfResponse {
	s.Body = v
	return s
}

type DescribeSagStaticRouteListRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagStaticRouteListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagStaticRouteListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagStaticRouteListRequest) SetOwnerAccount(v string) *DescribeSagStaticRouteListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagStaticRouteListRequest) SetOwnerId(v int64) *DescribeSagStaticRouteListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagStaticRouteListRequest) SetRegionId(v string) *DescribeSagStaticRouteListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagStaticRouteListRequest) SetResourceOwnerAccount(v string) *DescribeSagStaticRouteListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagStaticRouteListRequest) SetResourceOwnerId(v int64) *DescribeSagStaticRouteListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagStaticRouteListRequest) SetSmartAGId(v string) *DescribeSagStaticRouteListRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagStaticRouteListRequest) SetSmartAGSn(v string) *DescribeSagStaticRouteListRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagStaticRouteListResponseBody struct {
	RequestId    *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StaticRoutes []*DescribeSagStaticRouteListResponseBodyStaticRoutes `json:"StaticRoutes,omitempty" xml:"StaticRoutes,omitempty" type:"Repeated"`
	TaskStates   []*DescribeSagStaticRouteListResponseBodyTaskStates   `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s DescribeSagStaticRouteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagStaticRouteListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagStaticRouteListResponseBody) SetRequestId(v string) *DescribeSagStaticRouteListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagStaticRouteListResponseBody) SetStaticRoutes(v []*DescribeSagStaticRouteListResponseBodyStaticRoutes) *DescribeSagStaticRouteListResponseBody {
	s.StaticRoutes = v
	return s
}

func (s *DescribeSagStaticRouteListResponseBody) SetTaskStates(v []*DescribeSagStaticRouteListResponseBodyTaskStates) *DescribeSagStaticRouteListResponseBody {
	s.TaskStates = v
	return s
}

type DescribeSagStaticRouteListResponseBodyStaticRoutes struct {
	DestinationCidr *string `json:"DestinationCidr,omitempty" xml:"DestinationCidr,omitempty"`
	NextHop         *string `json:"NextHop,omitempty" xml:"NextHop,omitempty"`
	PortName        *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	Vlan            *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s DescribeSagStaticRouteListResponseBodyStaticRoutes) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagStaticRouteListResponseBodyStaticRoutes) GoString() string {
	return s.String()
}

func (s *DescribeSagStaticRouteListResponseBodyStaticRoutes) SetDestinationCidr(v string) *DescribeSagStaticRouteListResponseBodyStaticRoutes {
	s.DestinationCidr = &v
	return s
}

func (s *DescribeSagStaticRouteListResponseBodyStaticRoutes) SetNextHop(v string) *DescribeSagStaticRouteListResponseBodyStaticRoutes {
	s.NextHop = &v
	return s
}

func (s *DescribeSagStaticRouteListResponseBodyStaticRoutes) SetPortName(v string) *DescribeSagStaticRouteListResponseBodyStaticRoutes {
	s.PortName = &v
	return s
}

func (s *DescribeSagStaticRouteListResponseBodyStaticRoutes) SetVlan(v string) *DescribeSagStaticRouteListResponseBodyStaticRoutes {
	s.Vlan = &v
	return s
}

type DescribeSagStaticRouteListResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagStaticRouteListResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagStaticRouteListResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagStaticRouteListResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagStaticRouteListResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagStaticRouteListResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagStaticRouteListResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagStaticRouteListResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagStaticRouteListResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagStaticRouteListResponseBodyTaskStates) SetState(v string) *DescribeSagStaticRouteListResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagStaticRouteListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagStaticRouteListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagStaticRouteListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagStaticRouteListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagStaticRouteListResponse) SetHeaders(v map[string]*string) *DescribeSagStaticRouteListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagStaticRouteListResponse) SetStatusCode(v int32) *DescribeSagStaticRouteListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagStaticRouteListResponse) SetBody(v *DescribeSagStaticRouteListResponseBody) *DescribeSagStaticRouteListResponse {
	s.Body = v
	return s
}

type DescribeSagTrafficTopNRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Size                 *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeSagTrafficTopNRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagTrafficTopNRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagTrafficTopNRequest) SetOwnerAccount(v string) *DescribeSagTrafficTopNRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagTrafficTopNRequest) SetOwnerId(v int64) *DescribeSagTrafficTopNRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagTrafficTopNRequest) SetRegionId(v string) *DescribeSagTrafficTopNRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagTrafficTopNRequest) SetResourceOwnerAccount(v string) *DescribeSagTrafficTopNRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagTrafficTopNRequest) SetResourceOwnerId(v int64) *DescribeSagTrafficTopNRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagTrafficTopNRequest) SetSize(v int32) *DescribeSagTrafficTopNRequest {
	s.Size = &v
	return s
}

type DescribeSagTrafficTopNResponseBody struct {
	RequestId   *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TrafficTopN []*DescribeSagTrafficTopNResponseBodyTrafficTopN `json:"TrafficTopN,omitempty" xml:"TrafficTopN,omitempty" type:"Repeated"`
}

func (s DescribeSagTrafficTopNResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagTrafficTopNResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagTrafficTopNResponseBody) SetRequestId(v string) *DescribeSagTrafficTopNResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagTrafficTopNResponseBody) SetTrafficTopN(v []*DescribeSagTrafficTopNResponseBodyTrafficTopN) *DescribeSagTrafficTopNResponseBody {
	s.TrafficTopN = v
	return s
}

type DescribeSagTrafficTopNResponseBodyTrafficTopN struct {
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TrafficRate *string `json:"TrafficRate,omitempty" xml:"TrafficRate,omitempty"`
}

func (s DescribeSagTrafficTopNResponseBodyTrafficTopN) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagTrafficTopNResponseBodyTrafficTopN) GoString() string {
	return s.String()
}

func (s *DescribeSagTrafficTopNResponseBodyTrafficTopN) SetInstanceId(v string) *DescribeSagTrafficTopNResponseBodyTrafficTopN {
	s.InstanceId = &v
	return s
}

func (s *DescribeSagTrafficTopNResponseBodyTrafficTopN) SetName(v string) *DescribeSagTrafficTopNResponseBodyTrafficTopN {
	s.Name = &v
	return s
}

func (s *DescribeSagTrafficTopNResponseBodyTrafficTopN) SetRegionId(v string) *DescribeSagTrafficTopNResponseBodyTrafficTopN {
	s.RegionId = &v
	return s
}

func (s *DescribeSagTrafficTopNResponseBodyTrafficTopN) SetTrafficRate(v string) *DescribeSagTrafficTopNResponseBodyTrafficTopN {
	s.TrafficRate = &v
	return s
}

type DescribeSagTrafficTopNResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagTrafficTopNResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagTrafficTopNResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagTrafficTopNResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagTrafficTopNResponse) SetHeaders(v map[string]*string) *DescribeSagTrafficTopNResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagTrafficTopNResponse) SetStatusCode(v int32) *DescribeSagTrafficTopNResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagTrafficTopNResponse) SetBody(v *DescribeSagTrafficTopNResponseBody) *DescribeSagTrafficTopNResponse {
	s.Body = v
	return s
}

type DescribeSagUserDnsRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagUserDnsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagUserDnsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagUserDnsRequest) SetOwnerAccount(v string) *DescribeSagUserDnsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagUserDnsRequest) SetOwnerId(v int64) *DescribeSagUserDnsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagUserDnsRequest) SetRegionId(v string) *DescribeSagUserDnsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagUserDnsRequest) SetResourceOwnerAccount(v string) *DescribeSagUserDnsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagUserDnsRequest) SetResourceOwnerId(v int64) *DescribeSagUserDnsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagUserDnsRequest) SetSmartAGId(v string) *DescribeSagUserDnsRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagUserDnsRequest) SetSmartAGSn(v string) *DescribeSagUserDnsRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagUserDnsResponseBody struct {
	MasterDns  *string                                     `json:"MasterDns,omitempty" xml:"MasterDns,omitempty"`
	RequestId  *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SlaveDns   *string                                     `json:"SlaveDns,omitempty" xml:"SlaveDns,omitempty"`
	TaskStates []*DescribeSagUserDnsResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s DescribeSagUserDnsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagUserDnsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagUserDnsResponseBody) SetMasterDns(v string) *DescribeSagUserDnsResponseBody {
	s.MasterDns = &v
	return s
}

func (s *DescribeSagUserDnsResponseBody) SetRequestId(v string) *DescribeSagUserDnsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagUserDnsResponseBody) SetSlaveDns(v string) *DescribeSagUserDnsResponseBody {
	s.SlaveDns = &v
	return s
}

func (s *DescribeSagUserDnsResponseBody) SetTaskStates(v []*DescribeSagUserDnsResponseBodyTaskStates) *DescribeSagUserDnsResponseBody {
	s.TaskStates = v
	return s
}

type DescribeSagUserDnsResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagUserDnsResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagUserDnsResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagUserDnsResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagUserDnsResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagUserDnsResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagUserDnsResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagUserDnsResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagUserDnsResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagUserDnsResponseBodyTaskStates) SetState(v string) *DescribeSagUserDnsResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagUserDnsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagUserDnsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagUserDnsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagUserDnsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagUserDnsResponse) SetHeaders(v map[string]*string) *DescribeSagUserDnsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagUserDnsResponse) SetStatusCode(v int32) *DescribeSagUserDnsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagUserDnsResponse) SetBody(v *DescribeSagUserDnsResponseBody) *DescribeSagUserDnsResponse {
	s.Body = v
	return s
}

type DescribeSagVbrRelationsRequest struct {
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	VbrInstanceIds       []*string `json:"VbrInstanceIds,omitempty" xml:"VbrInstanceIds,omitempty" type:"Repeated"`
	VbrRegionId          *string   `json:"VbrRegionId,omitempty" xml:"VbrRegionId,omitempty"`
}

func (s DescribeSagVbrRelationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagVbrRelationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagVbrRelationsRequest) SetOwnerAccount(v string) *DescribeSagVbrRelationsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagVbrRelationsRequest) SetOwnerId(v int64) *DescribeSagVbrRelationsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagVbrRelationsRequest) SetRegionId(v string) *DescribeSagVbrRelationsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagVbrRelationsRequest) SetResourceOwnerAccount(v string) *DescribeSagVbrRelationsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagVbrRelationsRequest) SetResourceOwnerId(v int64) *DescribeSagVbrRelationsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagVbrRelationsRequest) SetVbrInstanceIds(v []*string) *DescribeSagVbrRelationsRequest {
	s.VbrInstanceIds = v
	return s
}

func (s *DescribeSagVbrRelationsRequest) SetVbrRegionId(v string) *DescribeSagVbrRelationsRequest {
	s.VbrRegionId = &v
	return s
}

type DescribeSagVbrRelationsResponseBody struct {
	RequestId       *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SagVbrRelations []*DescribeSagVbrRelationsResponseBodySagVbrRelations `json:"SagVbrRelations,omitempty" xml:"SagVbrRelations,omitempty" type:"Repeated"`
}

func (s DescribeSagVbrRelationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagVbrRelationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagVbrRelationsResponseBody) SetRequestId(v string) *DescribeSagVbrRelationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagVbrRelationsResponseBody) SetSagVbrRelations(v []*DescribeSagVbrRelationsResponseBodySagVbrRelations) *DescribeSagVbrRelationsResponseBody {
	s.SagVbrRelations = v
	return s
}

type DescribeSagVbrRelationsResponseBodySagVbrRelations struct {
	SagInstanceId *string `json:"SagInstanceId,omitempty" xml:"SagInstanceId,omitempty"`
	SagUid        *string `json:"SagUid,omitempty" xml:"SagUid,omitempty"`
	VbrInstanceId *string `json:"VbrInstanceId,omitempty" xml:"VbrInstanceId,omitempty"`
}

func (s DescribeSagVbrRelationsResponseBodySagVbrRelations) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagVbrRelationsResponseBodySagVbrRelations) GoString() string {
	return s.String()
}

func (s *DescribeSagVbrRelationsResponseBodySagVbrRelations) SetSagInstanceId(v string) *DescribeSagVbrRelationsResponseBodySagVbrRelations {
	s.SagInstanceId = &v
	return s
}

func (s *DescribeSagVbrRelationsResponseBodySagVbrRelations) SetSagUid(v string) *DescribeSagVbrRelationsResponseBodySagVbrRelations {
	s.SagUid = &v
	return s
}

func (s *DescribeSagVbrRelationsResponseBodySagVbrRelations) SetVbrInstanceId(v string) *DescribeSagVbrRelationsResponseBodySagVbrRelations {
	s.VbrInstanceId = &v
	return s
}

type DescribeSagVbrRelationsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagVbrRelationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagVbrRelationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagVbrRelationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagVbrRelationsResponse) SetHeaders(v map[string]*string) *DescribeSagVbrRelationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagVbrRelationsResponse) SetStatusCode(v int32) *DescribeSagVbrRelationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagVbrRelationsResponse) SetBody(v *DescribeSagVbrRelationsResponseBody) *DescribeSagVbrRelationsResponse {
	s.Body = v
	return s
}

type DescribeSagWan4GRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagWan4GRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWan4GRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagWan4GRequest) SetOwnerAccount(v string) *DescribeSagWan4GRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagWan4GRequest) SetOwnerId(v int64) *DescribeSagWan4GRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagWan4GRequest) SetRegionId(v string) *DescribeSagWan4GRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagWan4GRequest) SetResourceOwnerAccount(v string) *DescribeSagWan4GRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagWan4GRequest) SetResourceOwnerId(v int64) *DescribeSagWan4GRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagWan4GRequest) SetSmartAGId(v string) *DescribeSagWan4GRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagWan4GRequest) SetSmartAGSn(v string) *DescribeSagWan4GRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagWan4GResponseBody struct {
	Ip           *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Mac          *string `json:"Mac,omitempty" xml:"Mac,omitempty"`
	Priority     *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Strength     *string `json:"Strength,omitempty" xml:"Strength,omitempty"`
	TrafficState *string `json:"TrafficState,omitempty" xml:"TrafficState,omitempty"`
}

func (s DescribeSagWan4GResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWan4GResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagWan4GResponseBody) SetIp(v string) *DescribeSagWan4GResponseBody {
	s.Ip = &v
	return s
}

func (s *DescribeSagWan4GResponseBody) SetMac(v string) *DescribeSagWan4GResponseBody {
	s.Mac = &v
	return s
}

func (s *DescribeSagWan4GResponseBody) SetPriority(v int32) *DescribeSagWan4GResponseBody {
	s.Priority = &v
	return s
}

func (s *DescribeSagWan4GResponseBody) SetRequestId(v string) *DescribeSagWan4GResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagWan4GResponseBody) SetStatus(v string) *DescribeSagWan4GResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeSagWan4GResponseBody) SetStrength(v string) *DescribeSagWan4GResponseBody {
	s.Strength = &v
	return s
}

func (s *DescribeSagWan4GResponseBody) SetTrafficState(v string) *DescribeSagWan4GResponseBody {
	s.TrafficState = &v
	return s
}

type DescribeSagWan4GResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagWan4GResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagWan4GResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWan4GResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagWan4GResponse) SetHeaders(v map[string]*string) *DescribeSagWan4GResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagWan4GResponse) SetStatusCode(v int32) *DescribeSagWan4GResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagWan4GResponse) SetBody(v *DescribeSagWan4GResponseBody) *DescribeSagWan4GResponse {
	s.Body = v
	return s
}

type DescribeSagWanListRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagWanListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWanListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagWanListRequest) SetOwnerAccount(v string) *DescribeSagWanListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagWanListRequest) SetOwnerId(v int64) *DescribeSagWanListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagWanListRequest) SetRegionId(v string) *DescribeSagWanListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagWanListRequest) SetResourceOwnerAccount(v string) *DescribeSagWanListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagWanListRequest) SetResourceOwnerId(v int64) *DescribeSagWanListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagWanListRequest) SetSmartAGId(v string) *DescribeSagWanListRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagWanListRequest) SetSmartAGSn(v string) *DescribeSagWanListRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagWanListResponseBody struct {
	RequestId  *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskStates []*DescribeSagWanListResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
	Wans       []*DescribeSagWanListResponseBodyWans       `json:"Wans,omitempty" xml:"Wans,omitempty" type:"Repeated"`
}

func (s DescribeSagWanListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWanListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagWanListResponseBody) SetRequestId(v string) *DescribeSagWanListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagWanListResponseBody) SetTaskStates(v []*DescribeSagWanListResponseBodyTaskStates) *DescribeSagWanListResponseBody {
	s.TaskStates = v
	return s
}

func (s *DescribeSagWanListResponseBody) SetWans(v []*DescribeSagWanListResponseBodyWans) *DescribeSagWanListResponseBody {
	s.Wans = v
	return s
}

type DescribeSagWanListResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagWanListResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWanListResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagWanListResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagWanListResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagWanListResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagWanListResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagWanListResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagWanListResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagWanListResponseBodyTaskStates) SetState(v string) *DescribeSagWanListResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagWanListResponseBodyWans struct {
	BandWidth    *int32  `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
	Gateway      *string `json:"Gateway,omitempty" xml:"Gateway,omitempty"`
	IP           *string `json:"IP,omitempty" xml:"IP,omitempty"`
	IPType       *string `json:"IPType,omitempty" xml:"IPType,omitempty"`
	ISP          *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	Mask         *string `json:"Mask,omitempty" xml:"Mask,omitempty"`
	PortName     *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	Priority     *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	TrafficState *string `json:"TrafficState,omitempty" xml:"TrafficState,omitempty"`
	Username     *string `json:"Username,omitempty" xml:"Username,omitempty"`
	Weight       *int32  `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s DescribeSagWanListResponseBodyWans) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWanListResponseBodyWans) GoString() string {
	return s.String()
}

func (s *DescribeSagWanListResponseBodyWans) SetBandWidth(v int32) *DescribeSagWanListResponseBodyWans {
	s.BandWidth = &v
	return s
}

func (s *DescribeSagWanListResponseBodyWans) SetGateway(v string) *DescribeSagWanListResponseBodyWans {
	s.Gateway = &v
	return s
}

func (s *DescribeSagWanListResponseBodyWans) SetIP(v string) *DescribeSagWanListResponseBodyWans {
	s.IP = &v
	return s
}

func (s *DescribeSagWanListResponseBodyWans) SetIPType(v string) *DescribeSagWanListResponseBodyWans {
	s.IPType = &v
	return s
}

func (s *DescribeSagWanListResponseBodyWans) SetISP(v string) *DescribeSagWanListResponseBodyWans {
	s.ISP = &v
	return s
}

func (s *DescribeSagWanListResponseBodyWans) SetMask(v string) *DescribeSagWanListResponseBodyWans {
	s.Mask = &v
	return s
}

func (s *DescribeSagWanListResponseBodyWans) SetPortName(v string) *DescribeSagWanListResponseBodyWans {
	s.PortName = &v
	return s
}

func (s *DescribeSagWanListResponseBodyWans) SetPriority(v int32) *DescribeSagWanListResponseBodyWans {
	s.Priority = &v
	return s
}

func (s *DescribeSagWanListResponseBodyWans) SetTrafficState(v string) *DescribeSagWanListResponseBodyWans {
	s.TrafficState = &v
	return s
}

func (s *DescribeSagWanListResponseBodyWans) SetUsername(v string) *DescribeSagWanListResponseBodyWans {
	s.Username = &v
	return s
}

func (s *DescribeSagWanListResponseBodyWans) SetWeight(v int32) *DescribeSagWanListResponseBodyWans {
	s.Weight = &v
	return s
}

type DescribeSagWanListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagWanListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagWanListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWanListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagWanListResponse) SetHeaders(v map[string]*string) *DescribeSagWanListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagWanListResponse) SetStatusCode(v int32) *DescribeSagWanListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagWanListResponse) SetBody(v *DescribeSagWanListResponseBody) *DescribeSagWanListResponse {
	s.Body = v
	return s
}

type DescribeSagWanSnatRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagWanSnatRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWanSnatRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagWanSnatRequest) SetOwnerAccount(v string) *DescribeSagWanSnatRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagWanSnatRequest) SetOwnerId(v int64) *DescribeSagWanSnatRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagWanSnatRequest) SetRegionId(v string) *DescribeSagWanSnatRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagWanSnatRequest) SetResourceOwnerAccount(v string) *DescribeSagWanSnatRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagWanSnatRequest) SetResourceOwnerId(v int64) *DescribeSagWanSnatRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagWanSnatRequest) SetSmartAGId(v string) *DescribeSagWanSnatRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagWanSnatRequest) SetSmartAGSn(v string) *DescribeSagWanSnatRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagWanSnatResponseBody struct {
	RequestId  *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Snat       *string                                     `json:"Snat,omitempty" xml:"Snat,omitempty"`
	TaskStates []*DescribeSagWanSnatResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s DescribeSagWanSnatResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWanSnatResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagWanSnatResponseBody) SetRequestId(v string) *DescribeSagWanSnatResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagWanSnatResponseBody) SetSnat(v string) *DescribeSagWanSnatResponseBody {
	s.Snat = &v
	return s
}

func (s *DescribeSagWanSnatResponseBody) SetTaskStates(v []*DescribeSagWanSnatResponseBodyTaskStates) *DescribeSagWanSnatResponseBody {
	s.TaskStates = v
	return s
}

type DescribeSagWanSnatResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagWanSnatResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWanSnatResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagWanSnatResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagWanSnatResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagWanSnatResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagWanSnatResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagWanSnatResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagWanSnatResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagWanSnatResponseBodyTaskStates) SetState(v string) *DescribeSagWanSnatResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagWanSnatResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagWanSnatResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagWanSnatResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWanSnatResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagWanSnatResponse) SetHeaders(v map[string]*string) *DescribeSagWanSnatResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagWanSnatResponse) SetStatusCode(v int32) *DescribeSagWanSnatResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagWanSnatResponse) SetBody(v *DescribeSagWanSnatResponseBody) *DescribeSagWanSnatResponse {
	s.Body = v
	return s
}

type DescribeSagWifiRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DescribeSagWifiRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWifiRequest) GoString() string {
	return s.String()
}

func (s *DescribeSagWifiRequest) SetOwnerAccount(v string) *DescribeSagWifiRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSagWifiRequest) SetOwnerId(v int64) *DescribeSagWifiRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSagWifiRequest) SetRegionId(v string) *DescribeSagWifiRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSagWifiRequest) SetResourceOwnerAccount(v string) *DescribeSagWifiRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSagWifiRequest) SetResourceOwnerId(v int64) *DescribeSagWifiRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSagWifiRequest) SetSmartAGId(v string) *DescribeSagWifiRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSagWifiRequest) SetSmartAGSn(v string) *DescribeSagWifiRequest {
	s.SmartAGSn = &v
	return s
}

type DescribeSagWifiResponseBody struct {
	AuthenticationType *string                                  `json:"AuthenticationType,omitempty" xml:"AuthenticationType,omitempty"`
	Bandwidth          *string                                  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Channel            *string                                  `json:"Channel,omitempty" xml:"Channel,omitempty"`
	EncryptAlgorithm   *string                                  `json:"EncryptAlgorithm,omitempty" xml:"EncryptAlgorithm,omitempty"`
	IsAuth             *string                                  `json:"IsAuth,omitempty" xml:"IsAuth,omitempty"`
	IsBroadcast        *string                                  `json:"IsBroadcast,omitempty" xml:"IsBroadcast,omitempty"`
	IsEnable           *string                                  `json:"IsEnable,omitempty" xml:"IsEnable,omitempty"`
	RequestId          *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Ssid               *string                                  `json:"Ssid,omitempty" xml:"Ssid,omitempty"`
	TaskStates         []*DescribeSagWifiResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s DescribeSagWifiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWifiResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSagWifiResponseBody) SetAuthenticationType(v string) *DescribeSagWifiResponseBody {
	s.AuthenticationType = &v
	return s
}

func (s *DescribeSagWifiResponseBody) SetBandwidth(v string) *DescribeSagWifiResponseBody {
	s.Bandwidth = &v
	return s
}

func (s *DescribeSagWifiResponseBody) SetChannel(v string) *DescribeSagWifiResponseBody {
	s.Channel = &v
	return s
}

func (s *DescribeSagWifiResponseBody) SetEncryptAlgorithm(v string) *DescribeSagWifiResponseBody {
	s.EncryptAlgorithm = &v
	return s
}

func (s *DescribeSagWifiResponseBody) SetIsAuth(v string) *DescribeSagWifiResponseBody {
	s.IsAuth = &v
	return s
}

func (s *DescribeSagWifiResponseBody) SetIsBroadcast(v string) *DescribeSagWifiResponseBody {
	s.IsBroadcast = &v
	return s
}

func (s *DescribeSagWifiResponseBody) SetIsEnable(v string) *DescribeSagWifiResponseBody {
	s.IsEnable = &v
	return s
}

func (s *DescribeSagWifiResponseBody) SetRequestId(v string) *DescribeSagWifiResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSagWifiResponseBody) SetSsid(v string) *DescribeSagWifiResponseBody {
	s.Ssid = &v
	return s
}

func (s *DescribeSagWifiResponseBody) SetTaskStates(v []*DescribeSagWifiResponseBodyTaskStates) *DescribeSagWifiResponseBody {
	s.TaskStates = v
	return s
}

type DescribeSagWifiResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeSagWifiResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWifiResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *DescribeSagWifiResponseBodyTaskStates) SetCreateTime(v string) *DescribeSagWifiResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *DescribeSagWifiResponseBodyTaskStates) SetErrorCode(v string) *DescribeSagWifiResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSagWifiResponseBodyTaskStates) SetErrorMessage(v string) *DescribeSagWifiResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSagWifiResponseBodyTaskStates) SetState(v string) *DescribeSagWifiResponseBodyTaskStates {
	s.State = &v
	return s
}

type DescribeSagWifiResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSagWifiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSagWifiResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSagWifiResponse) GoString() string {
	return s.String()
}

func (s *DescribeSagWifiResponse) SetHeaders(v map[string]*string) *DescribeSagWifiResponse {
	s.Headers = v
	return s
}

func (s *DescribeSagWifiResponse) SetStatusCode(v int32) *DescribeSagWifiResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSagWifiResponse) SetBody(v *DescribeSagWifiResponseBody) *DescribeSagWifiResponse {
	s.Body = v
	return s
}

type DescribeSmartAccessGatewayAttributeRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeSmartAccessGatewayAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayAttributeRequest) SetOwnerAccount(v string) *DescribeSmartAccessGatewayAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeRequest) SetOwnerId(v int64) *DescribeSmartAccessGatewayAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeRequest) SetRegionId(v string) *DescribeSmartAccessGatewayAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeRequest) SetResourceOwnerAccount(v string) *DescribeSmartAccessGatewayAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeRequest) SetResourceOwnerId(v int64) *DescribeSmartAccessGatewayAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeRequest) SetSmartAGId(v string) *DescribeSmartAccessGatewayAttributeRequest {
	s.SmartAGId = &v
	return s
}

type DescribeSmartAccessGatewayAttributeResponseBody struct {
	AccelerateBandwidth                        *int64                                                                                    `json:"AccelerateBandwidth,omitempty" xml:"AccelerateBandwidth,omitempty"`
	AccessPointId                              *string                                                                                   `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty"`
	AclIds                                     *DescribeSmartAccessGatewayAttributeResponseBodyAclIds                                    `json:"AclIds,omitempty" xml:"AclIds,omitempty" type:"Struct"`
	ApplicationBandwidthPackageBussinessStatus *string                                                                                   `json:"ApplicationBandwidthPackageBussinessStatus,omitempty" xml:"ApplicationBandwidthPackageBussinessStatus,omitempty"`
	ApplicationBandwidthPackageId              *string                                                                                   `json:"ApplicationBandwidthPackageId,omitempty" xml:"ApplicationBandwidthPackageId,omitempty"`
	ApplicationBandwidthPackageName            *string                                                                                   `json:"ApplicationBandwidthPackageName,omitempty" xml:"ApplicationBandwidthPackageName,omitempty"`
	ApplicationBandwidthPackageOperationLocks  *DescribeSmartAccessGatewayAttributeResponseBodyApplicationBandwidthPackageOperationLocks `json:"ApplicationBandwidthPackageOperationLocks,omitempty" xml:"ApplicationBandwidthPackageOperationLocks,omitempty" type:"Struct"`
	AssociatedCcnId                            *string                                                                                   `json:"AssociatedCcnId,omitempty" xml:"AssociatedCcnId,omitempty"`
	AssociatedCcnName                          *string                                                                                   `json:"AssociatedCcnName,omitempty" xml:"AssociatedCcnName,omitempty"`
	BackupBoxControllerIp                      *string                                                                                   `json:"BackupBoxControllerIp,omitempty" xml:"BackupBoxControllerIp,omitempty"`
	BoxControllerIp                            *string                                                                                   `json:"BoxControllerIp,omitempty" xml:"BoxControllerIp,omitempty"`
	CidrBlock                                  *string                                                                                   `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	City                                       *string                                                                                   `json:"City,omitempty" xml:"City,omitempty"`
	CreateTime                                 *int64                                                                                    `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataPlan                                   *int64                                                                                    `json:"DataPlan,omitempty" xml:"DataPlan,omitempty"`
	Description                                *string                                                                                   `json:"Description,omitempty" xml:"Description,omitempty"`
	Devices                                    *DescribeSmartAccessGatewayAttributeResponseBodyDevices                                   `json:"Devices,omitempty" xml:"Devices,omitempty" type:"Struct"`
	EnableOptimization                         *bool                                                                                     `json:"EnableOptimization,omitempty" xml:"EnableOptimization,omitempty"`
	EnableSoftwareConnectionAudit              *bool                                                                                     `json:"EnableSoftwareConnectionAudit,omitempty" xml:"EnableSoftwareConnectionAudit,omitempty"`
	EndTime                                    *int64                                                                                    `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FlowLogIds                                 *DescribeSmartAccessGatewayAttributeResponseBodyFlowLogIds                                `json:"FlowLogIds,omitempty" xml:"FlowLogIds,omitempty" type:"Struct"`
	IRIds                                      *DescribeSmartAccessGatewayAttributeResponseBodyIRIds                                     `json:"IRIds,omitempty" xml:"IRIds,omitempty" type:"Struct"`
	InstanceType                               *string                                                                                   `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	IpsecStatus                                *string                                                                                   `json:"IpsecStatus,omitempty" xml:"IpsecStatus,omitempty"`
	Links                                      *DescribeSmartAccessGatewayAttributeResponseBodyLinks                                     `json:"Links,omitempty" xml:"Links,omitempty" type:"Struct"`
	MaxBandwidth                               *string                                                                                   `json:"MaxBandwidth,omitempty" xml:"MaxBandwidth,omitempty"`
	Name                                       *string                                                                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	OptimizationType                           *bool                                                                                     `json:"OptimizationType,omitempty" xml:"OptimizationType,omitempty"`
	Position                                   *string                                                                                   `json:"Position,omitempty" xml:"Position,omitempty"`
	QosIds                                     *DescribeSmartAccessGatewayAttributeResponseBodyQosIds                                    `json:"QosIds,omitempty" xml:"QosIds,omitempty" type:"Struct"`
	RequestId                                  *string                                                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResellerInstanceId                         *string                                                                                   `json:"ResellerInstanceId,omitempty" xml:"ResellerInstanceId,omitempty"`
	ResellerUid                                *string                                                                                   `json:"ResellerUid,omitempty" xml:"ResellerUid,omitempty"`
	ResourceGroupId                            *string                                                                                   `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	RoutingStrategy                            *string                                                                                   `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	SecurityLockThreshold                      *int32                                                                                    `json:"SecurityLockThreshold,omitempty" xml:"SecurityLockThreshold,omitempty"`
	SerialNumber                               *string                                                                                   `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SmartAGId                                  *string                                                                                   `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	Status                                     *string                                                                                   `json:"Status,omitempty" xml:"Status,omitempty"`
	TrafficMasterSn                            *string                                                                                   `json:"TrafficMasterSn,omitempty" xml:"TrafficMasterSn,omitempty"`
	UpBandwidth4G                              *int32                                                                                    `json:"UpBandwidth4G,omitempty" xml:"UpBandwidth4G,omitempty"`
	UpBandwidthWan                             *int32                                                                                    `json:"UpBandwidthWan,omitempty" xml:"UpBandwidthWan,omitempty"`
	UserCount                                  *int32                                                                                    `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
	VpnStatus                                  *string                                                                                   `json:"VpnStatus,omitempty" xml:"VpnStatus,omitempty"`
}

func (s DescribeSmartAccessGatewayAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetAccelerateBandwidth(v int64) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.AccelerateBandwidth = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetAccessPointId(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.AccessPointId = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetAclIds(v *DescribeSmartAccessGatewayAttributeResponseBodyAclIds) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.AclIds = v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetApplicationBandwidthPackageBussinessStatus(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.ApplicationBandwidthPackageBussinessStatus = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetApplicationBandwidthPackageId(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.ApplicationBandwidthPackageId = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetApplicationBandwidthPackageName(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.ApplicationBandwidthPackageName = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetApplicationBandwidthPackageOperationLocks(v *DescribeSmartAccessGatewayAttributeResponseBodyApplicationBandwidthPackageOperationLocks) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.ApplicationBandwidthPackageOperationLocks = v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetAssociatedCcnId(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.AssociatedCcnId = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetAssociatedCcnName(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.AssociatedCcnName = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetBackupBoxControllerIp(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.BackupBoxControllerIp = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetBoxControllerIp(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.BoxControllerIp = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetCidrBlock(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.CidrBlock = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetCity(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.City = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetCreateTime(v int64) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetDataPlan(v int64) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.DataPlan = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetDescription(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetDevices(v *DescribeSmartAccessGatewayAttributeResponseBodyDevices) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.Devices = v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetEnableOptimization(v bool) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.EnableOptimization = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetEnableSoftwareConnectionAudit(v bool) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.EnableSoftwareConnectionAudit = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetEndTime(v int64) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetFlowLogIds(v *DescribeSmartAccessGatewayAttributeResponseBodyFlowLogIds) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.FlowLogIds = v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetIRIds(v *DescribeSmartAccessGatewayAttributeResponseBodyIRIds) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.IRIds = v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetInstanceType(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.InstanceType = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetIpsecStatus(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.IpsecStatus = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetLinks(v *DescribeSmartAccessGatewayAttributeResponseBodyLinks) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.Links = v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetMaxBandwidth(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.MaxBandwidth = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetName(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetOptimizationType(v bool) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.OptimizationType = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetPosition(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.Position = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetQosIds(v *DescribeSmartAccessGatewayAttributeResponseBodyQosIds) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.QosIds = v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetRequestId(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetResellerInstanceId(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.ResellerInstanceId = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetResellerUid(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.ResellerUid = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetResourceGroupId(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetRoutingStrategy(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.RoutingStrategy = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetSecurityLockThreshold(v int32) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.SecurityLockThreshold = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetSerialNumber(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.SerialNumber = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetSmartAGId(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetStatus(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetTrafficMasterSn(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.TrafficMasterSn = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetUpBandwidth4G(v int32) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.UpBandwidth4G = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetUpBandwidthWan(v int32) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.UpBandwidthWan = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetUserCount(v int32) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.UserCount = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBody) SetVpnStatus(v string) *DescribeSmartAccessGatewayAttributeResponseBody {
	s.VpnStatus = &v
	return s
}

type DescribeSmartAccessGatewayAttributeResponseBodyAclIds struct {
	AclId []*string `json:"AclId,omitempty" xml:"AclId,omitempty" type:"Repeated"`
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyAclIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyAclIds) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyAclIds) SetAclId(v []*string) *DescribeSmartAccessGatewayAttributeResponseBodyAclIds {
	s.AclId = v
	return s
}

type DescribeSmartAccessGatewayAttributeResponseBodyApplicationBandwidthPackageOperationLocks struct {
	LockReason *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	LockType   *string `json:"LockType,omitempty" xml:"LockType,omitempty"`
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyApplicationBandwidthPackageOperationLocks) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyApplicationBandwidthPackageOperationLocks) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyApplicationBandwidthPackageOperationLocks) SetLockReason(v string) *DescribeSmartAccessGatewayAttributeResponseBodyApplicationBandwidthPackageOperationLocks {
	s.LockReason = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyApplicationBandwidthPackageOperationLocks) SetLockType(v string) *DescribeSmartAccessGatewayAttributeResponseBodyApplicationBandwidthPackageOperationLocks {
	s.LockType = &v
	return s
}

type DescribeSmartAccessGatewayAttributeResponseBodyDevices struct {
	Device []*DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice `json:"Device,omitempty" xml:"Device,omitempty" type:"Repeated"`
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyDevices) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyDevices) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyDevices) SetDevice(v []*DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice) *DescribeSmartAccessGatewayAttributeResponseBodyDevices {
	s.Device = v
	return s
}

type DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice struct {
	DistributeSkStatus    *int32  `json:"DistributeSkStatus,omitempty" xml:"DistributeSkStatus,omitempty"`
	DpiSignatureDbVersion *string `json:"DpiSignatureDbVersion,omitempty" xml:"DpiSignatureDbVersion,omitempty"`
	HaState               *string `json:"HaState,omitempty" xml:"HaState,omitempty"`
	HcState               *string `json:"HcState,omitempty" xml:"HcState,omitempty"`
	MonitorVersion        *string `json:"MonitorVersion,omitempty" xml:"MonitorVersion,omitempty"`
	SecretKey             *string `json:"SecretKey,omitempty" xml:"SecretKey,omitempty"`
	SerialNumber          *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SoftwareVersion       *string `json:"SoftwareVersion,omitempty" xml:"SoftwareVersion,omitempty"`
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice) SetDistributeSkStatus(v int32) *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice {
	s.DistributeSkStatus = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice) SetDpiSignatureDbVersion(v string) *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice {
	s.DpiSignatureDbVersion = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice) SetHaState(v string) *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice {
	s.HaState = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice) SetHcState(v string) *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice {
	s.HcState = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice) SetMonitorVersion(v string) *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice {
	s.MonitorVersion = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice) SetSecretKey(v string) *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice {
	s.SecretKey = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice) SetSerialNumber(v string) *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice {
	s.SerialNumber = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice) SetSoftwareVersion(v string) *DescribeSmartAccessGatewayAttributeResponseBodyDevicesDevice {
	s.SoftwareVersion = &v
	return s
}

type DescribeSmartAccessGatewayAttributeResponseBodyFlowLogIds struct {
	FlowLogId []*string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty" type:"Repeated"`
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyFlowLogIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyFlowLogIds) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyFlowLogIds) SetFlowLogId(v []*string) *DescribeSmartAccessGatewayAttributeResponseBodyFlowLogIds {
	s.FlowLogId = v
	return s
}

type DescribeSmartAccessGatewayAttributeResponseBodyIRIds struct {
	IRId []*string `json:"IRId,omitempty" xml:"IRId,omitempty" type:"Repeated"`
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyIRIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyIRIds) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyIRIds) SetIRId(v []*string) *DescribeSmartAccessGatewayAttributeResponseBodyIRIds {
	s.IRId = v
	return s
}

type DescribeSmartAccessGatewayAttributeResponseBodyLinks struct {
	Link []*DescribeSmartAccessGatewayAttributeResponseBodyLinksLink `json:"Link,omitempty" xml:"Link,omitempty" type:"Repeated"`
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyLinks) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyLinks) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyLinks) SetLink(v []*DescribeSmartAccessGatewayAttributeResponseBodyLinksLink) *DescribeSmartAccessGatewayAttributeResponseBodyLinks {
	s.Link = v
	return s
}

type DescribeSmartAccessGatewayAttributeResponseBodyLinksLink struct {
	Bandwidth              *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	CommodityType          *string `json:"CommodityType,omitempty" xml:"CommodityType,omitempty"`
	EndTime                *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	HealthCheckTargetIp    *string `json:"HealthCheckTargetIp,omitempty" xml:"HealthCheckTargetIp,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RelateInstanceId       *string `json:"RelateInstanceId,omitempty" xml:"RelateInstanceId,omitempty"`
	RelateInstanceRegionId *string `json:"RelateInstanceRegionId,omitempty" xml:"RelateInstanceRegionId,omitempty"`
	Status                 *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyLinksLink) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyLinksLink) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink) SetBandwidth(v string) *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink {
	s.Bandwidth = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink) SetCommodityType(v string) *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink {
	s.CommodityType = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink) SetEndTime(v int64) *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink {
	s.EndTime = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink) SetHealthCheckTargetIp(v string) *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink {
	s.HealthCheckTargetIp = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink) SetInstanceId(v string) *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink {
	s.InstanceId = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink) SetRelateInstanceId(v string) *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink {
	s.RelateInstanceId = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink) SetRelateInstanceRegionId(v string) *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink {
	s.RelateInstanceRegionId = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink) SetStatus(v string) *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink {
	s.Status = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink) SetType(v string) *DescribeSmartAccessGatewayAttributeResponseBodyLinksLink {
	s.Type = &v
	return s
}

type DescribeSmartAccessGatewayAttributeResponseBodyQosIds struct {
	QosId []*string `json:"QosId,omitempty" xml:"QosId,omitempty" type:"Repeated"`
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyQosIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayAttributeResponseBodyQosIds) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayAttributeResponseBodyQosIds) SetQosId(v []*string) *DescribeSmartAccessGatewayAttributeResponseBodyQosIds {
	s.QosId = v
	return s
}

type DescribeSmartAccessGatewayAttributeResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSmartAccessGatewayAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSmartAccessGatewayAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayAttributeResponse) SetHeaders(v map[string]*string) *DescribeSmartAccessGatewayAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponse) SetStatusCode(v int32) *DescribeSmartAccessGatewayAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSmartAccessGatewayAttributeResponse) SetBody(v *DescribeSmartAccessGatewayAttributeResponseBody) *DescribeSmartAccessGatewayAttributeResponse {
	s.Body = v
	return s
}

type DescribeSmartAccessGatewayClientUsersRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	UserMail             *string `json:"UserMail,omitempty" xml:"UserMail,omitempty"`
	UserName             *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeSmartAccessGatewayClientUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayClientUsersRequest) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayClientUsersRequest) SetOwnerAccount(v string) *DescribeSmartAccessGatewayClientUsersRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersRequest) SetOwnerId(v int64) *DescribeSmartAccessGatewayClientUsersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersRequest) SetPageNumber(v int32) *DescribeSmartAccessGatewayClientUsersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersRequest) SetPageSize(v int32) *DescribeSmartAccessGatewayClientUsersRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersRequest) SetRegionId(v string) *DescribeSmartAccessGatewayClientUsersRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersRequest) SetResourceOwnerAccount(v string) *DescribeSmartAccessGatewayClientUsersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersRequest) SetResourceOwnerId(v int64) *DescribeSmartAccessGatewayClientUsersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersRequest) SetSmartAGId(v string) *DescribeSmartAccessGatewayClientUsersRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersRequest) SetUserMail(v string) *DescribeSmartAccessGatewayClientUsersRequest {
	s.UserMail = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersRequest) SetUserName(v string) *DescribeSmartAccessGatewayClientUsersRequest {
	s.UserName = &v
	return s
}

type DescribeSmartAccessGatewayClientUsersResponseBody struct {
	PageNumber *int32                                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	Users      *DescribeSmartAccessGatewayClientUsersResponseBodyUsers `json:"Users,omitempty" xml:"Users,omitempty" type:"Struct"`
}

func (s DescribeSmartAccessGatewayClientUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayClientUsersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayClientUsersResponseBody) SetPageNumber(v int32) *DescribeSmartAccessGatewayClientUsersResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersResponseBody) SetPageSize(v int32) *DescribeSmartAccessGatewayClientUsersResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersResponseBody) SetRequestId(v string) *DescribeSmartAccessGatewayClientUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersResponseBody) SetTotalCount(v int32) *DescribeSmartAccessGatewayClientUsersResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersResponseBody) SetUsers(v *DescribeSmartAccessGatewayClientUsersResponseBodyUsers) *DescribeSmartAccessGatewayClientUsersResponseBody {
	s.Users = v
	return s
}

type DescribeSmartAccessGatewayClientUsersResponseBodyUsers struct {
	User []*DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s DescribeSmartAccessGatewayClientUsersResponseBodyUsers) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayClientUsersResponseBodyUsers) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayClientUsersResponseBodyUsers) SetUser(v []*DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser) *DescribeSmartAccessGatewayClientUsersResponseBodyUsers {
	s.User = v
	return s
}

type DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser struct {
	AccelerateBandwidth *int64  `json:"AccelerateBandwidth,omitempty" xml:"AccelerateBandwidth,omitempty"`
	Bandwidth           *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	ClientIp            *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	IsStaticIp          *int64  `json:"IsStaticIp,omitempty" xml:"IsStaticIp,omitempty"`
	State               *int32  `json:"State,omitempty" xml:"State,omitempty"`
	UserMail            *string `json:"UserMail,omitempty" xml:"UserMail,omitempty"`
	UserName            *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser) SetAccelerateBandwidth(v int64) *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser {
	s.AccelerateBandwidth = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser) SetBandwidth(v int32) *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser {
	s.Bandwidth = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser) SetClientIp(v string) *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser {
	s.ClientIp = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser) SetIsStaticIp(v int64) *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser {
	s.IsStaticIp = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser) SetState(v int32) *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser {
	s.State = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser) SetUserMail(v string) *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser {
	s.UserMail = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser) SetUserName(v string) *DescribeSmartAccessGatewayClientUsersResponseBodyUsersUser {
	s.UserName = &v
	return s
}

type DescribeSmartAccessGatewayClientUsersResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSmartAccessGatewayClientUsersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSmartAccessGatewayClientUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayClientUsersResponse) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayClientUsersResponse) SetHeaders(v map[string]*string) *DescribeSmartAccessGatewayClientUsersResponse {
	s.Headers = v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersResponse) SetStatusCode(v int32) *DescribeSmartAccessGatewayClientUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSmartAccessGatewayClientUsersResponse) SetBody(v *DescribeSmartAccessGatewayClientUsersResponseBody) *DescribeSmartAccessGatewayClientUsersResponse {
	s.Body = v
	return s
}

type DescribeSmartAccessGatewayHaRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeSmartAccessGatewayHaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayHaRequest) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayHaRequest) SetOwnerAccount(v string) *DescribeSmartAccessGatewayHaRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaRequest) SetOwnerId(v int64) *DescribeSmartAccessGatewayHaRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaRequest) SetRegionId(v string) *DescribeSmartAccessGatewayHaRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaRequest) SetResourceOwnerAccount(v string) *DescribeSmartAccessGatewayHaRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaRequest) SetResourceOwnerId(v int64) *DescribeSmartAccessGatewayHaRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaRequest) SetSmartAGId(v string) *DescribeSmartAccessGatewayHaRequest {
	s.SmartAGId = &v
	return s
}

type DescribeSmartAccessGatewayHaResponseBody struct {
	BackupDeviceId         *string                                                     `json:"BackupDeviceId,omitempty" xml:"BackupDeviceId,omitempty"`
	DeviceLevelBackupState *string                                                     `json:"DeviceLevelBackupState,omitempty" xml:"DeviceLevelBackupState,omitempty"`
	DeviceLevelBackupType  *string                                                     `json:"DeviceLevelBackupType,omitempty" xml:"DeviceLevelBackupType,omitempty"`
	LinkBackupInfoList     *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoList `json:"LinkBackupInfoList,omitempty" xml:"LinkBackupInfoList,omitempty" type:"Struct"`
	MainDeviceId           *string                                                     `json:"MainDeviceId,omitempty" xml:"MainDeviceId,omitempty"`
	RequestId              *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmartAGId              *string                                                     `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeSmartAccessGatewayHaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayHaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayHaResponseBody) SetBackupDeviceId(v string) *DescribeSmartAccessGatewayHaResponseBody {
	s.BackupDeviceId = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaResponseBody) SetDeviceLevelBackupState(v string) *DescribeSmartAccessGatewayHaResponseBody {
	s.DeviceLevelBackupState = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaResponseBody) SetDeviceLevelBackupType(v string) *DescribeSmartAccessGatewayHaResponseBody {
	s.DeviceLevelBackupType = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaResponseBody) SetLinkBackupInfoList(v *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoList) *DescribeSmartAccessGatewayHaResponseBody {
	s.LinkBackupInfoList = v
	return s
}

func (s *DescribeSmartAccessGatewayHaResponseBody) SetMainDeviceId(v string) *DescribeSmartAccessGatewayHaResponseBody {
	s.MainDeviceId = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaResponseBody) SetRequestId(v string) *DescribeSmartAccessGatewayHaResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaResponseBody) SetSmartAGId(v string) *DescribeSmartAccessGatewayHaResponseBody {
	s.SmartAGId = &v
	return s
}

type DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoList struct {
	LinkBackupInfoList []*DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList `json:"LinkBackupInfoList,omitempty" xml:"LinkBackupInfoList,omitempty" type:"Repeated"`
}

func (s DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoList) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoList) SetLinkBackupInfoList(v []*DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList) *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoList {
	s.LinkBackupInfoList = v
	return s
}

type DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList struct {
	BackupLinkId         *string `json:"BackupLinkId,omitempty" xml:"BackupLinkId,omitempty"`
	BackupLinkState      *string `json:"BackupLinkState,omitempty" xml:"BackupLinkState,omitempty"`
	LinkLevelBackupState *string `json:"LinkLevelBackupState,omitempty" xml:"LinkLevelBackupState,omitempty"`
	LinkLevelBackupType  *string `json:"LinkLevelBackupType,omitempty" xml:"LinkLevelBackupType,omitempty"`
	MainLinkId           *string `json:"MainLinkId,omitempty" xml:"MainLinkId,omitempty"`
	MainLinkState        *string `json:"MainLinkState,omitempty" xml:"MainLinkState,omitempty"`
}

func (s DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList) SetBackupLinkId(v string) *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList {
	s.BackupLinkId = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList) SetBackupLinkState(v string) *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList {
	s.BackupLinkState = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList) SetLinkLevelBackupState(v string) *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList {
	s.LinkLevelBackupState = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList) SetLinkLevelBackupType(v string) *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList {
	s.LinkLevelBackupType = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList) SetMainLinkId(v string) *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList {
	s.MainLinkId = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList) SetMainLinkState(v string) *DescribeSmartAccessGatewayHaResponseBodyLinkBackupInfoListLinkBackupInfoList {
	s.MainLinkState = &v
	return s
}

type DescribeSmartAccessGatewayHaResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSmartAccessGatewayHaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSmartAccessGatewayHaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayHaResponse) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayHaResponse) SetHeaders(v map[string]*string) *DescribeSmartAccessGatewayHaResponse {
	s.Headers = v
	return s
}

func (s *DescribeSmartAccessGatewayHaResponse) SetStatusCode(v int32) *DescribeSmartAccessGatewayHaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSmartAccessGatewayHaResponse) SetBody(v *DescribeSmartAccessGatewayHaResponseBody) *DescribeSmartAccessGatewayHaResponse {
	s.Body = v
	return s
}

type DescribeSmartAccessGatewayVersionsRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
	VersionType          *string `json:"VersionType,omitempty" xml:"VersionType,omitempty"`
}

func (s DescribeSmartAccessGatewayVersionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayVersionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayVersionsRequest) SetOwnerAccount(v string) *DescribeSmartAccessGatewayVersionsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSmartAccessGatewayVersionsRequest) SetOwnerId(v int64) *DescribeSmartAccessGatewayVersionsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSmartAccessGatewayVersionsRequest) SetRegionId(v string) *DescribeSmartAccessGatewayVersionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSmartAccessGatewayVersionsRequest) SetResourceOwnerAccount(v string) *DescribeSmartAccessGatewayVersionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSmartAccessGatewayVersionsRequest) SetResourceOwnerId(v int64) *DescribeSmartAccessGatewayVersionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSmartAccessGatewayVersionsRequest) SetSmartAGId(v string) *DescribeSmartAccessGatewayVersionsRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSmartAccessGatewayVersionsRequest) SetSmartAGSn(v string) *DescribeSmartAccessGatewayVersionsRequest {
	s.SmartAGSn = &v
	return s
}

func (s *DescribeSmartAccessGatewayVersionsRequest) SetVersionType(v string) *DescribeSmartAccessGatewayVersionsRequest {
	s.VersionType = &v
	return s
}

type DescribeSmartAccessGatewayVersionsResponseBody struct {
	RequestId       *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmartAGVersions *DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersions `json:"SmartAGVersions,omitempty" xml:"SmartAGVersions,omitempty" type:"Struct"`
}

func (s DescribeSmartAccessGatewayVersionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayVersionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayVersionsResponseBody) SetRequestId(v string) *DescribeSmartAccessGatewayVersionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSmartAccessGatewayVersionsResponseBody) SetSmartAGVersions(v *DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersions) *DescribeSmartAccessGatewayVersionsResponseBody {
	s.SmartAGVersions = v
	return s
}

type DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersions struct {
	SmartAGVersion []*DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersionsSmartAGVersion `json:"SmartAGVersion,omitempty" xml:"SmartAGVersion,omitempty" type:"Repeated"`
}

func (s DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersions) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersions) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersions) SetSmartAGVersion(v []*DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersionsSmartAGVersion) *DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersions {
	s.SmartAGVersion = v
	return s
}

type DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersionsSmartAGVersion struct {
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
	VersionCode *string `json:"VersionCode,omitempty" xml:"VersionCode,omitempty"`
	VersionName *string `json:"VersionName,omitempty" xml:"VersionName,omitempty"`
}

func (s DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersionsSmartAGVersion) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersionsSmartAGVersion) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersionsSmartAGVersion) SetCreateTime(v int64) *DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersionsSmartAGVersion {
	s.CreateTime = &v
	return s
}

func (s *DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersionsSmartAGVersion) SetType(v string) *DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersionsSmartAGVersion {
	s.Type = &v
	return s
}

func (s *DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersionsSmartAGVersion) SetVersionCode(v string) *DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersionsSmartAGVersion {
	s.VersionCode = &v
	return s
}

func (s *DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersionsSmartAGVersion) SetVersionName(v string) *DescribeSmartAccessGatewayVersionsResponseBodySmartAGVersionsSmartAGVersion {
	s.VersionName = &v
	return s
}

type DescribeSmartAccessGatewayVersionsResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSmartAccessGatewayVersionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSmartAccessGatewayVersionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewayVersionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewayVersionsResponse) SetHeaders(v map[string]*string) *DescribeSmartAccessGatewayVersionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSmartAccessGatewayVersionsResponse) SetStatusCode(v int32) *DescribeSmartAccessGatewayVersionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSmartAccessGatewayVersionsResponse) SetBody(v *DescribeSmartAccessGatewayVersionsResponseBody) *DescribeSmartAccessGatewayVersionsResponse {
	s.Body = v
	return s
}

type DescribeSmartAccessGatewaysRequest struct {
	AclIds               *string   `json:"AclIds,omitempty" xml:"AclIds,omitempty"`
	AssociatedCcnId      *string   `json:"AssociatedCcnId,omitempty" xml:"AssociatedCcnId,omitempty"`
	AssociatedCcnName    *string   `json:"AssociatedCcnName,omitempty" xml:"AssociatedCcnName,omitempty"`
	BusinessState        *string   `json:"BusinessState,omitempty" xml:"BusinessState,omitempty"`
	CanAssociateQos      *bool     `json:"CanAssociateQos,omitempty" xml:"CanAssociateQos,omitempty"`
	HardwareType         *string   `json:"HardwareType,omitempty" xml:"HardwareType,omitempty"`
	InstanceType         *string   `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Name                 *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId      *string   `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SerialNumber         *string   `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SmartAGId            *string   `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGIds           []*string `json:"SmartAGIds,omitempty" xml:"SmartAGIds,omitempty" type:"Repeated"`
	SoftwareVersion      *string   `json:"SoftwareVersion,omitempty" xml:"SoftwareVersion,omitempty"`
	Status               *string   `json:"Status,omitempty" xml:"Status,omitempty"`
	UnboundAclIds        *string   `json:"UnboundAclIds,omitempty" xml:"UnboundAclIds,omitempty"`
	VersionComparator    *string   `json:"VersionComparator,omitempty" xml:"VersionComparator,omitempty"`
}

func (s DescribeSmartAccessGatewaysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewaysRequest) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewaysRequest) SetAclIds(v string) *DescribeSmartAccessGatewaysRequest {
	s.AclIds = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetAssociatedCcnId(v string) *DescribeSmartAccessGatewaysRequest {
	s.AssociatedCcnId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetAssociatedCcnName(v string) *DescribeSmartAccessGatewaysRequest {
	s.AssociatedCcnName = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetBusinessState(v string) *DescribeSmartAccessGatewaysRequest {
	s.BusinessState = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetCanAssociateQos(v bool) *DescribeSmartAccessGatewaysRequest {
	s.CanAssociateQos = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetHardwareType(v string) *DescribeSmartAccessGatewaysRequest {
	s.HardwareType = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetInstanceType(v string) *DescribeSmartAccessGatewaysRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetName(v string) *DescribeSmartAccessGatewaysRequest {
	s.Name = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetOwnerAccount(v string) *DescribeSmartAccessGatewaysRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetOwnerId(v int64) *DescribeSmartAccessGatewaysRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetPageNumber(v int32) *DescribeSmartAccessGatewaysRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetPageSize(v int32) *DescribeSmartAccessGatewaysRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetRegionId(v string) *DescribeSmartAccessGatewaysRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetResourceGroupId(v string) *DescribeSmartAccessGatewaysRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetResourceOwnerAccount(v string) *DescribeSmartAccessGatewaysRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetResourceOwnerId(v int64) *DescribeSmartAccessGatewaysRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetSerialNumber(v string) *DescribeSmartAccessGatewaysRequest {
	s.SerialNumber = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetSmartAGId(v string) *DescribeSmartAccessGatewaysRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetSmartAGIds(v []*string) *DescribeSmartAccessGatewaysRequest {
	s.SmartAGIds = v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetSoftwareVersion(v string) *DescribeSmartAccessGatewaysRequest {
	s.SoftwareVersion = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetStatus(v string) *DescribeSmartAccessGatewaysRequest {
	s.Status = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetUnboundAclIds(v string) *DescribeSmartAccessGatewaysRequest {
	s.UnboundAclIds = &v
	return s
}

func (s *DescribeSmartAccessGatewaysRequest) SetVersionComparator(v string) *DescribeSmartAccessGatewaysRequest {
	s.VersionComparator = &v
	return s
}

type DescribeSmartAccessGatewaysResponseBody struct {
	PageNumber          *int32                                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize            *int32                                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId           *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmartAccessGateways *DescribeSmartAccessGatewaysResponseBodySmartAccessGateways `json:"SmartAccessGateways,omitempty" xml:"SmartAccessGateways,omitempty" type:"Struct"`
	TotalCount          *int32                                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSmartAccessGatewaysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewaysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewaysResponseBody) SetPageNumber(v int32) *DescribeSmartAccessGatewaysResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBody) SetPageSize(v int32) *DescribeSmartAccessGatewaysResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBody) SetRequestId(v string) *DescribeSmartAccessGatewaysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBody) SetSmartAccessGateways(v *DescribeSmartAccessGatewaysResponseBodySmartAccessGateways) *DescribeSmartAccessGatewaysResponseBody {
	s.SmartAccessGateways = v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBody) SetTotalCount(v int32) *DescribeSmartAccessGatewaysResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSmartAccessGatewaysResponseBodySmartAccessGateways struct {
	SmartAccessGateway []*DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway `json:"SmartAccessGateway,omitempty" xml:"SmartAccessGateway,omitempty" type:"Repeated"`
}

func (s DescribeSmartAccessGatewaysResponseBodySmartAccessGateways) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewaysResponseBodySmartAccessGateways) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGateways) SetSmartAccessGateway(v []*DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) *DescribeSmartAccessGatewaysResponseBodySmartAccessGateways {
	s.SmartAccessGateway = v
	return s
}

type DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway struct {
	AccelerateBandwidth           *int64                                                                             `json:"AccelerateBandwidth,omitempty" xml:"AccelerateBandwidth,omitempty"`
	AccessPointId                 *string                                                                            `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty"`
	AclIds                        *string                                                                            `json:"AclIds,omitempty" xml:"AclIds,omitempty"`
	ApplicationBandwidthPackageId *string                                                                            `json:"ApplicationBandwidthPackageId,omitempty" xml:"ApplicationBandwidthPackageId,omitempty"`
	AssociatedCcnId               *string                                                                            `json:"AssociatedCcnId,omitempty" xml:"AssociatedCcnId,omitempty"`
	AssociatedCcnName             *string                                                                            `json:"AssociatedCcnName,omitempty" xml:"AssociatedCcnName,omitempty"`
	BackupSoftwareVersion         *string                                                                            `json:"BackupSoftwareVersion,omitempty" xml:"BackupSoftwareVersion,omitempty"`
	BackupStatus                  *string                                                                            `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	CidrBlock                     *string                                                                            `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	City                          *string                                                                            `json:"City,omitempty" xml:"City,omitempty"`
	CreateTime                    *int64                                                                             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataPlan                      *int64                                                                             `json:"DataPlan,omitempty" xml:"DataPlan,omitempty"`
	Description                   *string                                                                            `json:"Description,omitempty" xml:"Description,omitempty"`
	DpiMonitorStatus              *string                                                                            `json:"DpiMonitorStatus,omitempty" xml:"DpiMonitorStatus,omitempty"`
	DpiStatus                     *string                                                                            `json:"DpiStatus,omitempty" xml:"DpiStatus,omitempty"`
	EnableAdvancedMonitor         *bool                                                                              `json:"EnableAdvancedMonitor,omitempty" xml:"EnableAdvancedMonitor,omitempty"`
	EnableSoftwareConnectionAudit *bool                                                                              `json:"EnableSoftwareConnectionAudit,omitempty" xml:"EnableSoftwareConnectionAudit,omitempty"`
	EndTime                       *int64                                                                             `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EnterpriseCode                *string                                                                            `json:"EnterpriseCode,omitempty" xml:"EnterpriseCode,omitempty"`
	HardwareVersion               *string                                                                            `json:"HardwareVersion,omitempty" xml:"HardwareVersion,omitempty"`
	IRIds                         *string                                                                            `json:"IRIds,omitempty" xml:"IRIds,omitempty"`
	IdaasApplicationId            *string                                                                            `json:"IdaasApplicationId,omitempty" xml:"IdaasApplicationId,omitempty"`
	IdaasId                       *string                                                                            `json:"IdaasId,omitempty" xml:"IdaasId,omitempty"`
	IpsecStatus                   *string                                                                            `json:"IpsecStatus,omitempty" xml:"IpsecStatus,omitempty"`
	Isp                           *string                                                                            `json:"Isp,omitempty" xml:"Isp,omitempty"`
	Links                         *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinks `json:"Links,omitempty" xml:"Links,omitempty" type:"Struct"`
	MaxBandwidth                  *string                                                                            `json:"MaxBandwidth,omitempty" xml:"MaxBandwidth,omitempty"`
	Name                          *string                                                                            `json:"Name,omitempty" xml:"Name,omitempty"`
	Position                      *string                                                                            `json:"Position,omitempty" xml:"Position,omitempty"`
	QosIds                        *string                                                                            `json:"QosIds,omitempty" xml:"QosIds,omitempty"`
	ResellerInstanceId            *string                                                                            `json:"ResellerInstanceId,omitempty" xml:"ResellerInstanceId,omitempty"`
	ResellerUid                   *string                                                                            `json:"ResellerUid,omitempty" xml:"ResellerUid,omitempty"`
	ResourceGroupId               *string                                                                            `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	RoutingStrategy               *string                                                                            `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	SecurityLockThreshold         *int32                                                                             `json:"SecurityLockThreshold,omitempty" xml:"SecurityLockThreshold,omitempty"`
	SerialNumber                  *string                                                                            `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SmartAGId                     *string                                                                            `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGUid                    *int64                                                                             `json:"SmartAGUid,omitempty" xml:"SmartAGUid,omitempty"`
	SoftwareVersion               *string                                                                            `json:"SoftwareVersion,omitempty" xml:"SoftwareVersion,omitempty"`
	Status                        *string                                                                            `json:"Status,omitempty" xml:"Status,omitempty"`
	UpBandwidth4G                 *int32                                                                             `json:"UpBandwidth4G,omitempty" xml:"UpBandwidth4G,omitempty"`
	UpBandwidthWan                *int32                                                                             `json:"UpBandwidthWan,omitempty" xml:"UpBandwidthWan,omitempty"`
	UserCount                     *int32                                                                             `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
	VpnStatus                     *string                                                                            `json:"VpnStatus,omitempty" xml:"VpnStatus,omitempty"`
}

func (s DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetAccelerateBandwidth(v int64) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.AccelerateBandwidth = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetAccessPointId(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.AccessPointId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetAclIds(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.AclIds = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetApplicationBandwidthPackageId(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.ApplicationBandwidthPackageId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetAssociatedCcnId(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.AssociatedCcnId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetAssociatedCcnName(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.AssociatedCcnName = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetBackupSoftwareVersion(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.BackupSoftwareVersion = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetBackupStatus(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.BackupStatus = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetCidrBlock(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.CidrBlock = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetCity(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.City = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetCreateTime(v int64) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.CreateTime = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetDataPlan(v int64) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.DataPlan = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetDescription(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.Description = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetDpiMonitorStatus(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.DpiMonitorStatus = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetDpiStatus(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.DpiStatus = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetEnableAdvancedMonitor(v bool) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.EnableAdvancedMonitor = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetEnableSoftwareConnectionAudit(v bool) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.EnableSoftwareConnectionAudit = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetEndTime(v int64) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.EndTime = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetEnterpriseCode(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.EnterpriseCode = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetHardwareVersion(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.HardwareVersion = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetIRIds(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.IRIds = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetIdaasApplicationId(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.IdaasApplicationId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetIdaasId(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.IdaasId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetIpsecStatus(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.IpsecStatus = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetIsp(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.Isp = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetLinks(v *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinks) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.Links = v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetMaxBandwidth(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.MaxBandwidth = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetName(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.Name = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetPosition(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.Position = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetQosIds(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.QosIds = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetResellerInstanceId(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.ResellerInstanceId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetResellerUid(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.ResellerUid = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetResourceGroupId(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetRoutingStrategy(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.RoutingStrategy = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetSecurityLockThreshold(v int32) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.SecurityLockThreshold = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetSerialNumber(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.SerialNumber = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetSmartAGId(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.SmartAGId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetSmartAGUid(v int64) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.SmartAGUid = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetSoftwareVersion(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.SoftwareVersion = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetStatus(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.Status = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetUpBandwidth4G(v int32) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.UpBandwidth4G = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetUpBandwidthWan(v int32) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.UpBandwidthWan = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetUserCount(v int32) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.UserCount = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway) SetVpnStatus(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGateway {
	s.VpnStatus = &v
	return s
}

type DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinks struct {
	Link []*DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink `json:"Link,omitempty" xml:"Link,omitempty" type:"Repeated"`
}

func (s DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinks) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinks) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinks) SetLink(v []*DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinks {
	s.Link = v
	return s
}

type DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink struct {
	Bandwidth              *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	CommodityType          *string `json:"CommodityType,omitempty" xml:"CommodityType,omitempty"`
	EndTime                *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RelateInstanceId       *string `json:"RelateInstanceId,omitempty" xml:"RelateInstanceId,omitempty"`
	RelateInstanceRegionId *string `json:"RelateInstanceRegionId,omitempty" xml:"RelateInstanceRegionId,omitempty"`
	Status                 *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink) SetBandwidth(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink {
	s.Bandwidth = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink) SetCommodityType(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink {
	s.CommodityType = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink) SetEndTime(v int64) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink {
	s.EndTime = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink) SetInstanceId(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink {
	s.InstanceId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink) SetRelateInstanceId(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink {
	s.RelateInstanceId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink) SetRelateInstanceRegionId(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink {
	s.RelateInstanceRegionId = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink) SetStatus(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink {
	s.Status = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink) SetType(v string) *DescribeSmartAccessGatewaysResponseBodySmartAccessGatewaysSmartAccessGatewayLinksLink {
	s.Type = &v
	return s
}

type DescribeSmartAccessGatewaysResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSmartAccessGatewaysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSmartAccessGatewaysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartAccessGatewaysResponse) GoString() string {
	return s.String()
}

func (s *DescribeSmartAccessGatewaysResponse) SetHeaders(v map[string]*string) *DescribeSmartAccessGatewaysResponse {
	s.Headers = v
	return s
}

func (s *DescribeSmartAccessGatewaysResponse) SetStatusCode(v int32) *DescribeSmartAccessGatewaysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSmartAccessGatewaysResponse) SetBody(v *DescribeSmartAccessGatewaysResponseBody) *DescribeSmartAccessGatewaysResponse {
	s.Body = v
	return s
}

type DescribeSnatEntriesRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeSnatEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnatEntriesRequest) SetOwnerAccount(v string) *DescribeSnatEntriesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSnatEntriesRequest) SetOwnerId(v int64) *DescribeSnatEntriesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSnatEntriesRequest) SetPageNumber(v int32) *DescribeSnatEntriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnatEntriesRequest) SetPageSize(v int32) *DescribeSnatEntriesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSnatEntriesRequest) SetRegionId(v string) *DescribeSnatEntriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSnatEntriesRequest) SetResourceOwnerAccount(v string) *DescribeSnatEntriesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSnatEntriesRequest) SetResourceOwnerId(v int64) *DescribeSnatEntriesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSnatEntriesRequest) SetSmartAGId(v string) *DescribeSnatEntriesRequest {
	s.SmartAGId = &v
	return s
}

type DescribeSnatEntriesResponseBody struct {
	PageNumber  *int32                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SnatEntries *DescribeSnatEntriesResponseBodySnatEntries `json:"SnatEntries,omitempty" xml:"SnatEntries,omitempty" type:"Struct"`
	TotalCount  *int32                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSnatEntriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatEntriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSnatEntriesResponseBody) SetPageNumber(v int32) *DescribeSnatEntriesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnatEntriesResponseBody) SetPageSize(v int32) *DescribeSnatEntriesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSnatEntriesResponseBody) SetRequestId(v string) *DescribeSnatEntriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSnatEntriesResponseBody) SetSnatEntries(v *DescribeSnatEntriesResponseBodySnatEntries) *DescribeSnatEntriesResponseBody {
	s.SnatEntries = v
	return s
}

func (s *DescribeSnatEntriesResponseBody) SetTotalCount(v int32) *DescribeSnatEntriesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSnatEntriesResponseBodySnatEntries struct {
	SnatEntry []*DescribeSnatEntriesResponseBodySnatEntriesSnatEntry `json:"SnatEntry,omitempty" xml:"SnatEntry,omitempty" type:"Repeated"`
}

func (s DescribeSnatEntriesResponseBodySnatEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatEntriesResponseBodySnatEntries) GoString() string {
	return s.String()
}

func (s *DescribeSnatEntriesResponseBodySnatEntries) SetSnatEntry(v []*DescribeSnatEntriesResponseBodySnatEntriesSnatEntry) *DescribeSnatEntriesResponseBodySnatEntries {
	s.SnatEntry = v
	return s
}

type DescribeSnatEntriesResponseBodySnatEntriesSnatEntry struct {
	CidrBlock  *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	CreateTime *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SnatIp     *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
}

func (s DescribeSnatEntriesResponseBodySnatEntriesSnatEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatEntriesResponseBodySnatEntriesSnatEntry) GoString() string {
	return s.String()
}

func (s *DescribeSnatEntriesResponseBodySnatEntriesSnatEntry) SetCidrBlock(v string) *DescribeSnatEntriesResponseBodySnatEntriesSnatEntry {
	s.CidrBlock = &v
	return s
}

func (s *DescribeSnatEntriesResponseBodySnatEntriesSnatEntry) SetCreateTime(v int64) *DescribeSnatEntriesResponseBodySnatEntriesSnatEntry {
	s.CreateTime = &v
	return s
}

func (s *DescribeSnatEntriesResponseBodySnatEntriesSnatEntry) SetInstanceId(v string) *DescribeSnatEntriesResponseBodySnatEntriesSnatEntry {
	s.InstanceId = &v
	return s
}

func (s *DescribeSnatEntriesResponseBodySnatEntriesSnatEntry) SetSnatIp(v string) *DescribeSnatEntriesResponseBodySnatEntriesSnatEntry {
	s.SnatIp = &v
	return s
}

type DescribeSnatEntriesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSnatEntriesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSnatEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnatEntriesResponse) SetHeaders(v map[string]*string) *DescribeSnatEntriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSnatEntriesResponse) SetStatusCode(v int32) *DescribeSnatEntriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSnatEntriesResponse) SetBody(v *DescribeSnatEntriesResponseBody) *DescribeSnatEntriesResponse {
	s.Body = v
	return s
}

type DescribeUnbindFlowLogSagsRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeUnbindFlowLogSagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUnbindFlowLogSagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeUnbindFlowLogSagsRequest) SetOwnerAccount(v string) *DescribeUnbindFlowLogSagsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeUnbindFlowLogSagsRequest) SetOwnerId(v int64) *DescribeUnbindFlowLogSagsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUnbindFlowLogSagsRequest) SetRegionId(v string) *DescribeUnbindFlowLogSagsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeUnbindFlowLogSagsRequest) SetResourceOwnerAccount(v string) *DescribeUnbindFlowLogSagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeUnbindFlowLogSagsRequest) SetResourceOwnerId(v int64) *DescribeUnbindFlowLogSagsRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeUnbindFlowLogSagsResponseBody struct {
	Count     *int32                                     `json:"Count,omitempty" xml:"Count,omitempty"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Sags      *DescribeUnbindFlowLogSagsResponseBodySags `json:"Sags,omitempty" xml:"Sags,omitempty" type:"Struct"`
}

func (s DescribeUnbindFlowLogSagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUnbindFlowLogSagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUnbindFlowLogSagsResponseBody) SetCount(v int32) *DescribeUnbindFlowLogSagsResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeUnbindFlowLogSagsResponseBody) SetRequestId(v string) *DescribeUnbindFlowLogSagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUnbindFlowLogSagsResponseBody) SetSags(v *DescribeUnbindFlowLogSagsResponseBodySags) *DescribeUnbindFlowLogSagsResponseBody {
	s.Sags = v
	return s
}

type DescribeUnbindFlowLogSagsResponseBodySags struct {
	Sag []*DescribeUnbindFlowLogSagsResponseBodySagsSag `json:"Sag,omitempty" xml:"Sag,omitempty" type:"Repeated"`
}

func (s DescribeUnbindFlowLogSagsResponseBodySags) String() string {
	return tea.Prettify(s)
}

func (s DescribeUnbindFlowLogSagsResponseBodySags) GoString() string {
	return s.String()
}

func (s *DescribeUnbindFlowLogSagsResponseBodySags) SetSag(v []*DescribeUnbindFlowLogSagsResponseBodySagsSag) *DescribeUnbindFlowLogSagsResponseBodySags {
	s.Sag = v
	return s
}

type DescribeUnbindFlowLogSagsResponseBodySagsSag struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	SmartAGId   *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DescribeUnbindFlowLogSagsResponseBodySagsSag) String() string {
	return tea.Prettify(s)
}

func (s DescribeUnbindFlowLogSagsResponseBodySagsSag) GoString() string {
	return s.String()
}

func (s *DescribeUnbindFlowLogSagsResponseBodySagsSag) SetDescription(v string) *DescribeUnbindFlowLogSagsResponseBodySagsSag {
	s.Description = &v
	return s
}

func (s *DescribeUnbindFlowLogSagsResponseBodySagsSag) SetName(v string) *DescribeUnbindFlowLogSagsResponseBodySagsSag {
	s.Name = &v
	return s
}

func (s *DescribeUnbindFlowLogSagsResponseBodySagsSag) SetSmartAGId(v string) *DescribeUnbindFlowLogSagsResponseBodySagsSag {
	s.SmartAGId = &v
	return s
}

type DescribeUnbindFlowLogSagsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUnbindFlowLogSagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUnbindFlowLogSagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUnbindFlowLogSagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeUnbindFlowLogSagsResponse) SetHeaders(v map[string]*string) *DescribeUnbindFlowLogSagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeUnbindFlowLogSagsResponse) SetStatusCode(v int32) *DescribeUnbindFlowLogSagsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUnbindFlowLogSagsResponse) SetBody(v *DescribeUnbindFlowLogSagsResponseBody) *DescribeUnbindFlowLogSagsResponse {
	s.Body = v
	return s
}

type DescribeUserFlowStatisticsRequest struct {
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string   `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	StatisticsDate       *string   `json:"StatisticsDate,omitempty" xml:"StatisticsDate,omitempty"`
	UserNames            []*string `json:"UserNames,omitempty" xml:"UserNames,omitempty" type:"Repeated"`
}

func (s DescribeUserFlowStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserFlowStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserFlowStatisticsRequest) SetOwnerAccount(v string) *DescribeUserFlowStatisticsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeUserFlowStatisticsRequest) SetOwnerId(v int64) *DescribeUserFlowStatisticsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUserFlowStatisticsRequest) SetRegionId(v string) *DescribeUserFlowStatisticsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeUserFlowStatisticsRequest) SetResourceOwnerAccount(v string) *DescribeUserFlowStatisticsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeUserFlowStatisticsRequest) SetResourceOwnerId(v int64) *DescribeUserFlowStatisticsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeUserFlowStatisticsRequest) SetSmartAGId(v string) *DescribeUserFlowStatisticsRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeUserFlowStatisticsRequest) SetStatisticsDate(v string) *DescribeUserFlowStatisticsRequest {
	s.StatisticsDate = &v
	return s
}

func (s *DescribeUserFlowStatisticsRequest) SetUserNames(v []*string) *DescribeUserFlowStatisticsRequest {
	s.UserNames = v
	return s
}

type DescribeUserFlowStatisticsResponseBody struct {
	RequestId     *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SagStatistics *DescribeUserFlowStatisticsResponseBodySagStatistics `json:"SagStatistics,omitempty" xml:"SagStatistics,omitempty" type:"Struct"`
}

func (s DescribeUserFlowStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserFlowStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserFlowStatisticsResponseBody) SetRequestId(v string) *DescribeUserFlowStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUserFlowStatisticsResponseBody) SetSagStatistics(v *DescribeUserFlowStatisticsResponseBodySagStatistics) *DescribeUserFlowStatisticsResponseBody {
	s.SagStatistics = v
	return s
}

type DescribeUserFlowStatisticsResponseBodySagStatistics struct {
	Statistics []*DescribeUserFlowStatisticsResponseBodySagStatisticsStatistics `json:"Statistics,omitempty" xml:"Statistics,omitempty" type:"Repeated"`
}

func (s DescribeUserFlowStatisticsResponseBodySagStatistics) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserFlowStatisticsResponseBodySagStatistics) GoString() string {
	return s.String()
}

func (s *DescribeUserFlowStatisticsResponseBodySagStatistics) SetStatistics(v []*DescribeUserFlowStatisticsResponseBodySagStatisticsStatistics) *DescribeUserFlowStatisticsResponseBodySagStatistics {
	s.Statistics = v
	return s
}

type DescribeUserFlowStatisticsResponseBodySagStatisticsStatistics struct {
	TotalBytes *string `json:"TotalBytes,omitempty" xml:"TotalBytes,omitempty"`
	UserName   *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeUserFlowStatisticsResponseBodySagStatisticsStatistics) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserFlowStatisticsResponseBodySagStatisticsStatistics) GoString() string {
	return s.String()
}

func (s *DescribeUserFlowStatisticsResponseBodySagStatisticsStatistics) SetTotalBytes(v string) *DescribeUserFlowStatisticsResponseBodySagStatisticsStatistics {
	s.TotalBytes = &v
	return s
}

func (s *DescribeUserFlowStatisticsResponseBodySagStatisticsStatistics) SetUserName(v string) *DescribeUserFlowStatisticsResponseBodySagStatisticsStatistics {
	s.UserName = &v
	return s
}

type DescribeUserFlowStatisticsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUserFlowStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUserFlowStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserFlowStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserFlowStatisticsResponse) SetHeaders(v map[string]*string) *DescribeUserFlowStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserFlowStatisticsResponse) SetStatusCode(v int32) *DescribeUserFlowStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserFlowStatisticsResponse) SetBody(v *DescribeUserFlowStatisticsResponseBody) *DescribeUserFlowStatisticsResponse {
	s.Body = v
	return s
}

type DescribeUserOnlineClientStatisticsRequest struct {
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string   `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	UserNames            []*string `json:"UserNames,omitempty" xml:"UserNames,omitempty" type:"Repeated"`
}

func (s DescribeUserOnlineClientStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserOnlineClientStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserOnlineClientStatisticsRequest) SetOwnerAccount(v string) *DescribeUserOnlineClientStatisticsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeUserOnlineClientStatisticsRequest) SetOwnerId(v int64) *DescribeUserOnlineClientStatisticsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUserOnlineClientStatisticsRequest) SetRegionId(v string) *DescribeUserOnlineClientStatisticsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeUserOnlineClientStatisticsRequest) SetResourceOwnerAccount(v string) *DescribeUserOnlineClientStatisticsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeUserOnlineClientStatisticsRequest) SetResourceOwnerId(v int64) *DescribeUserOnlineClientStatisticsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeUserOnlineClientStatisticsRequest) SetSmartAGId(v string) *DescribeUserOnlineClientStatisticsRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeUserOnlineClientStatisticsRequest) SetUserNames(v []*string) *DescribeUserOnlineClientStatisticsRequest {
	s.UserNames = v
	return s
}

type DescribeUserOnlineClientStatisticsResponseBody struct {
	RequestId      *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserStatistics *DescribeUserOnlineClientStatisticsResponseBodyUserStatistics `json:"UserStatistics,omitempty" xml:"UserStatistics,omitempty" type:"Struct"`
}

func (s DescribeUserOnlineClientStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserOnlineClientStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserOnlineClientStatisticsResponseBody) SetRequestId(v string) *DescribeUserOnlineClientStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUserOnlineClientStatisticsResponseBody) SetUserStatistics(v *DescribeUserOnlineClientStatisticsResponseBodyUserStatistics) *DescribeUserOnlineClientStatisticsResponseBody {
	s.UserStatistics = v
	return s
}

type DescribeUserOnlineClientStatisticsResponseBodyUserStatistics struct {
	Statistics []*DescribeUserOnlineClientStatisticsResponseBodyUserStatisticsStatistics `json:"Statistics,omitempty" xml:"Statistics,omitempty" type:"Repeated"`
}

func (s DescribeUserOnlineClientStatisticsResponseBodyUserStatistics) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserOnlineClientStatisticsResponseBodyUserStatistics) GoString() string {
	return s.String()
}

func (s *DescribeUserOnlineClientStatisticsResponseBodyUserStatistics) SetStatistics(v []*DescribeUserOnlineClientStatisticsResponseBodyUserStatisticsStatistics) *DescribeUserOnlineClientStatisticsResponseBodyUserStatistics {
	s.Statistics = v
	return s
}

type DescribeUserOnlineClientStatisticsResponseBodyUserStatisticsStatistics struct {
	OnlineCount *string `json:"OnlineCount,omitempty" xml:"OnlineCount,omitempty"`
	UserName    *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeUserOnlineClientStatisticsResponseBodyUserStatisticsStatistics) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserOnlineClientStatisticsResponseBodyUserStatisticsStatistics) GoString() string {
	return s.String()
}

func (s *DescribeUserOnlineClientStatisticsResponseBodyUserStatisticsStatistics) SetOnlineCount(v string) *DescribeUserOnlineClientStatisticsResponseBodyUserStatisticsStatistics {
	s.OnlineCount = &v
	return s
}

func (s *DescribeUserOnlineClientStatisticsResponseBodyUserStatisticsStatistics) SetUserName(v string) *DescribeUserOnlineClientStatisticsResponseBodyUserStatisticsStatistics {
	s.UserName = &v
	return s
}

type DescribeUserOnlineClientStatisticsResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUserOnlineClientStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUserOnlineClientStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserOnlineClientStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserOnlineClientStatisticsResponse) SetHeaders(v map[string]*string) *DescribeUserOnlineClientStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserOnlineClientStatisticsResponse) SetStatusCode(v int32) *DescribeUserOnlineClientStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserOnlineClientStatisticsResponse) SetBody(v *DescribeUserOnlineClientStatisticsResponseBody) *DescribeUserOnlineClientStatisticsResponse {
	s.Body = v
	return s
}

type DescribeUserOnlineClientsRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	UserName             *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeUserOnlineClientsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserOnlineClientsRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserOnlineClientsRequest) SetOwnerAccount(v string) *DescribeUserOnlineClientsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeUserOnlineClientsRequest) SetOwnerId(v int64) *DescribeUserOnlineClientsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeUserOnlineClientsRequest) SetRegionId(v string) *DescribeUserOnlineClientsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeUserOnlineClientsRequest) SetResourceOwnerAccount(v string) *DescribeUserOnlineClientsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeUserOnlineClientsRequest) SetResourceOwnerId(v int64) *DescribeUserOnlineClientsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeUserOnlineClientsRequest) SetSmartAGId(v string) *DescribeUserOnlineClientsRequest {
	s.SmartAGId = &v
	return s
}

func (s *DescribeUserOnlineClientsRequest) SetUserName(v string) *DescribeUserOnlineClientsRequest {
	s.UserName = &v
	return s
}

type DescribeUserOnlineClientsResponseBody struct {
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Users     *DescribeUserOnlineClientsResponseBodyUsers `json:"Users,omitempty" xml:"Users,omitempty" type:"Struct"`
}

func (s DescribeUserOnlineClientsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserOnlineClientsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserOnlineClientsResponseBody) SetRequestId(v string) *DescribeUserOnlineClientsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUserOnlineClientsResponseBody) SetUsers(v *DescribeUserOnlineClientsResponseBodyUsers) *DescribeUserOnlineClientsResponseBody {
	s.Users = v
	return s
}

type DescribeUserOnlineClientsResponseBodyUsers struct {
	User []*DescribeUserOnlineClientsResponseBodyUsersUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s DescribeUserOnlineClientsResponseBodyUsers) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserOnlineClientsResponseBodyUsers) GoString() string {
	return s.String()
}

func (s *DescribeUserOnlineClientsResponseBodyUsers) SetUser(v []*DescribeUserOnlineClientsResponseBodyUsersUser) *DescribeUserOnlineClientsResponseBodyUsers {
	s.User = v
	return s
}

type DescribeUserOnlineClientsResponseBodyUsersUser struct {
	ClientIp   *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	OnlineTime *string `json:"OnlineTime,omitempty" xml:"OnlineTime,omitempty"`
}

func (s DescribeUserOnlineClientsResponseBodyUsersUser) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserOnlineClientsResponseBodyUsersUser) GoString() string {
	return s.String()
}

func (s *DescribeUserOnlineClientsResponseBodyUsersUser) SetClientIp(v string) *DescribeUserOnlineClientsResponseBodyUsersUser {
	s.ClientIp = &v
	return s
}

func (s *DescribeUserOnlineClientsResponseBodyUsersUser) SetOnlineTime(v string) *DescribeUserOnlineClientsResponseBodyUsersUser {
	s.OnlineTime = &v
	return s
}

type DescribeUserOnlineClientsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUserOnlineClientsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUserOnlineClientsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserOnlineClientsResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserOnlineClientsResponse) SetHeaders(v map[string]*string) *DescribeUserOnlineClientsResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserOnlineClientsResponse) SetStatusCode(v int32) *DescribeUserOnlineClientsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserOnlineClientsResponse) SetBody(v *DescribeUserOnlineClientsResponseBody) *DescribeUserOnlineClientsResponse {
	s.Body = v
	return s
}

type DiagnoseSmartAccessGatewayRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DiagnoseSmartAccessGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DiagnoseSmartAccessGatewayRequest) GoString() string {
	return s.String()
}

func (s *DiagnoseSmartAccessGatewayRequest) SetOwnerAccount(v string) *DiagnoseSmartAccessGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DiagnoseSmartAccessGatewayRequest) SetOwnerId(v int64) *DiagnoseSmartAccessGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *DiagnoseSmartAccessGatewayRequest) SetRegionId(v string) *DiagnoseSmartAccessGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *DiagnoseSmartAccessGatewayRequest) SetResourceOwnerAccount(v string) *DiagnoseSmartAccessGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DiagnoseSmartAccessGatewayRequest) SetResourceOwnerId(v int64) *DiagnoseSmartAccessGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DiagnoseSmartAccessGatewayRequest) SetSmartAGId(v string) *DiagnoseSmartAccessGatewayRequest {
	s.SmartAGId = &v
	return s
}

func (s *DiagnoseSmartAccessGatewayRequest) SetSmartAGSn(v string) *DiagnoseSmartAccessGatewayRequest {
	s.SmartAGSn = &v
	return s
}

type DiagnoseSmartAccessGatewayResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DiagnoseSmartAccessGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DiagnoseSmartAccessGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *DiagnoseSmartAccessGatewayResponseBody) SetRequestId(v string) *DiagnoseSmartAccessGatewayResponseBody {
	s.RequestId = &v
	return s
}

type DiagnoseSmartAccessGatewayResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DiagnoseSmartAccessGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DiagnoseSmartAccessGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DiagnoseSmartAccessGatewayResponse) GoString() string {
	return s.String()
}

func (s *DiagnoseSmartAccessGatewayResponse) SetHeaders(v map[string]*string) *DiagnoseSmartAccessGatewayResponse {
	s.Headers = v
	return s
}

func (s *DiagnoseSmartAccessGatewayResponse) SetStatusCode(v int32) *DiagnoseSmartAccessGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *DiagnoseSmartAccessGatewayResponse) SetBody(v *DiagnoseSmartAccessGatewayResponseBody) *DiagnoseSmartAccessGatewayResponse {
	s.Body = v
	return s
}

type DisableSmartAGDpiMonitorRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DryRun               *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DisableSmartAGDpiMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableSmartAGDpiMonitorRequest) GoString() string {
	return s.String()
}

func (s *DisableSmartAGDpiMonitorRequest) SetClientToken(v string) *DisableSmartAGDpiMonitorRequest {
	s.ClientToken = &v
	return s
}

func (s *DisableSmartAGDpiMonitorRequest) SetDryRun(v bool) *DisableSmartAGDpiMonitorRequest {
	s.DryRun = &v
	return s
}

func (s *DisableSmartAGDpiMonitorRequest) SetOwnerAccount(v string) *DisableSmartAGDpiMonitorRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DisableSmartAGDpiMonitorRequest) SetOwnerId(v int64) *DisableSmartAGDpiMonitorRequest {
	s.OwnerId = &v
	return s
}

func (s *DisableSmartAGDpiMonitorRequest) SetRegionId(v string) *DisableSmartAGDpiMonitorRequest {
	s.RegionId = &v
	return s
}

func (s *DisableSmartAGDpiMonitorRequest) SetResourceOwnerAccount(v string) *DisableSmartAGDpiMonitorRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DisableSmartAGDpiMonitorRequest) SetResourceOwnerId(v int64) *DisableSmartAGDpiMonitorRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DisableSmartAGDpiMonitorRequest) SetSmartAGId(v string) *DisableSmartAGDpiMonitorRequest {
	s.SmartAGId = &v
	return s
}

type DisableSmartAGDpiMonitorResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableSmartAGDpiMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableSmartAGDpiMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *DisableSmartAGDpiMonitorResponseBody) SetRequestId(v string) *DisableSmartAGDpiMonitorResponseBody {
	s.RequestId = &v
	return s
}

type DisableSmartAGDpiMonitorResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisableSmartAGDpiMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableSmartAGDpiMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableSmartAGDpiMonitorResponse) GoString() string {
	return s.String()
}

func (s *DisableSmartAGDpiMonitorResponse) SetHeaders(v map[string]*string) *DisableSmartAGDpiMonitorResponse {
	s.Headers = v
	return s
}

func (s *DisableSmartAGDpiMonitorResponse) SetStatusCode(v int32) *DisableSmartAGDpiMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableSmartAGDpiMonitorResponse) SetBody(v *DisableSmartAGDpiMonitorResponseBody) *DisableSmartAGDpiMonitorResponse {
	s.Body = v
	return s
}

type DisableSmartAccessGatewayUserRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	UserName             *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DisableSmartAccessGatewayUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableSmartAccessGatewayUserRequest) GoString() string {
	return s.String()
}

func (s *DisableSmartAccessGatewayUserRequest) SetOwnerAccount(v string) *DisableSmartAccessGatewayUserRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DisableSmartAccessGatewayUserRequest) SetOwnerId(v int64) *DisableSmartAccessGatewayUserRequest {
	s.OwnerId = &v
	return s
}

func (s *DisableSmartAccessGatewayUserRequest) SetRegionId(v string) *DisableSmartAccessGatewayUserRequest {
	s.RegionId = &v
	return s
}

func (s *DisableSmartAccessGatewayUserRequest) SetResourceOwnerAccount(v string) *DisableSmartAccessGatewayUserRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DisableSmartAccessGatewayUserRequest) SetResourceOwnerId(v int64) *DisableSmartAccessGatewayUserRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DisableSmartAccessGatewayUserRequest) SetSmartAGId(v string) *DisableSmartAccessGatewayUserRequest {
	s.SmartAGId = &v
	return s
}

func (s *DisableSmartAccessGatewayUserRequest) SetUserName(v string) *DisableSmartAccessGatewayUserRequest {
	s.UserName = &v
	return s
}

type DisableSmartAccessGatewayUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableSmartAccessGatewayUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableSmartAccessGatewayUserResponseBody) GoString() string {
	return s.String()
}

func (s *DisableSmartAccessGatewayUserResponseBody) SetRequestId(v string) *DisableSmartAccessGatewayUserResponseBody {
	s.RequestId = &v
	return s
}

type DisableSmartAccessGatewayUserResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisableSmartAccessGatewayUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableSmartAccessGatewayUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableSmartAccessGatewayUserResponse) GoString() string {
	return s.String()
}

func (s *DisableSmartAccessGatewayUserResponse) SetHeaders(v map[string]*string) *DisableSmartAccessGatewayUserResponse {
	s.Headers = v
	return s
}

func (s *DisableSmartAccessGatewayUserResponse) SetStatusCode(v int32) *DisableSmartAccessGatewayUserResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableSmartAccessGatewayUserResponse) SetBody(v *DisableSmartAccessGatewayUserResponseBody) *DisableSmartAccessGatewayUserResponse {
	s.Body = v
	return s
}

type DisassociateACLRequest struct {
	AclId                *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DisassociateACLRequest) String() string {
	return tea.Prettify(s)
}

func (s DisassociateACLRequest) GoString() string {
	return s.String()
}

func (s *DisassociateACLRequest) SetAclId(v string) *DisassociateACLRequest {
	s.AclId = &v
	return s
}

func (s *DisassociateACLRequest) SetOwnerAccount(v string) *DisassociateACLRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DisassociateACLRequest) SetOwnerId(v int64) *DisassociateACLRequest {
	s.OwnerId = &v
	return s
}

func (s *DisassociateACLRequest) SetRegionId(v string) *DisassociateACLRequest {
	s.RegionId = &v
	return s
}

func (s *DisassociateACLRequest) SetResourceOwnerAccount(v string) *DisassociateACLRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DisassociateACLRequest) SetResourceOwnerId(v int64) *DisassociateACLRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DisassociateACLRequest) SetSmartAGId(v string) *DisassociateACLRequest {
	s.SmartAGId = &v
	return s
}

type DisassociateACLResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisassociateACLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisassociateACLResponseBody) GoString() string {
	return s.String()
}

func (s *DisassociateACLResponseBody) SetRequestId(v string) *DisassociateACLResponseBody {
	s.RequestId = &v
	return s
}

type DisassociateACLResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisassociateACLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisassociateACLResponse) String() string {
	return tea.Prettify(s)
}

func (s DisassociateACLResponse) GoString() string {
	return s.String()
}

func (s *DisassociateACLResponse) SetHeaders(v map[string]*string) *DisassociateACLResponse {
	s.Headers = v
	return s
}

func (s *DisassociateACLResponse) SetStatusCode(v int32) *DisassociateACLResponse {
	s.StatusCode = &v
	return s
}

func (s *DisassociateACLResponse) SetBody(v *DisassociateACLResponseBody) *DisassociateACLResponse {
	s.Body = v
	return s
}

type DisassociateFlowLogRequest struct {
	FlowLogId            *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DisassociateFlowLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DisassociateFlowLogRequest) GoString() string {
	return s.String()
}

func (s *DisassociateFlowLogRequest) SetFlowLogId(v string) *DisassociateFlowLogRequest {
	s.FlowLogId = &v
	return s
}

func (s *DisassociateFlowLogRequest) SetOwnerAccount(v string) *DisassociateFlowLogRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DisassociateFlowLogRequest) SetOwnerId(v int64) *DisassociateFlowLogRequest {
	s.OwnerId = &v
	return s
}

func (s *DisassociateFlowLogRequest) SetRegionId(v string) *DisassociateFlowLogRequest {
	s.RegionId = &v
	return s
}

func (s *DisassociateFlowLogRequest) SetResourceOwnerAccount(v string) *DisassociateFlowLogRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DisassociateFlowLogRequest) SetResourceOwnerId(v int64) *DisassociateFlowLogRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DisassociateFlowLogRequest) SetSmartAGId(v string) *DisassociateFlowLogRequest {
	s.SmartAGId = &v
	return s
}

type DisassociateFlowLogResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisassociateFlowLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisassociateFlowLogResponseBody) GoString() string {
	return s.String()
}

func (s *DisassociateFlowLogResponseBody) SetRequestId(v string) *DisassociateFlowLogResponseBody {
	s.RequestId = &v
	return s
}

type DisassociateFlowLogResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisassociateFlowLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisassociateFlowLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DisassociateFlowLogResponse) GoString() string {
	return s.String()
}

func (s *DisassociateFlowLogResponse) SetHeaders(v map[string]*string) *DisassociateFlowLogResponse {
	s.Headers = v
	return s
}

func (s *DisassociateFlowLogResponse) SetStatusCode(v int32) *DisassociateFlowLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DisassociateFlowLogResponse) SetBody(v *DisassociateFlowLogResponseBody) *DisassociateFlowLogResponse {
	s.Body = v
	return s
}

type DisassociateQosRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QosId                *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DisassociateQosRequest) String() string {
	return tea.Prettify(s)
}

func (s DisassociateQosRequest) GoString() string {
	return s.String()
}

func (s *DisassociateQosRequest) SetOwnerAccount(v string) *DisassociateQosRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DisassociateQosRequest) SetOwnerId(v int64) *DisassociateQosRequest {
	s.OwnerId = &v
	return s
}

func (s *DisassociateQosRequest) SetQosId(v string) *DisassociateQosRequest {
	s.QosId = &v
	return s
}

func (s *DisassociateQosRequest) SetRegionId(v string) *DisassociateQosRequest {
	s.RegionId = &v
	return s
}

func (s *DisassociateQosRequest) SetResourceOwnerAccount(v string) *DisassociateQosRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DisassociateQosRequest) SetResourceOwnerId(v int64) *DisassociateQosRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DisassociateQosRequest) SetSmartAGId(v string) *DisassociateQosRequest {
	s.SmartAGId = &v
	return s
}

type DisassociateQosResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisassociateQosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisassociateQosResponseBody) GoString() string {
	return s.String()
}

func (s *DisassociateQosResponseBody) SetRequestId(v string) *DisassociateQosResponseBody {
	s.RequestId = &v
	return s
}

type DisassociateQosResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisassociateQosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisassociateQosResponse) String() string {
	return tea.Prettify(s)
}

func (s DisassociateQosResponse) GoString() string {
	return s.String()
}

func (s *DisassociateQosResponse) SetHeaders(v map[string]*string) *DisassociateQosResponse {
	s.Headers = v
	return s
}

func (s *DisassociateQosResponse) SetStatusCode(v int32) *DisassociateQosResponse {
	s.StatusCode = &v
	return s
}

func (s *DisassociateQosResponse) SetBody(v *DisassociateQosResponseBody) *DisassociateQosResponse {
	s.Body = v
	return s
}

type DiscribeSmartAccessGatewayDiagnosisReportRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s DiscribeSmartAccessGatewayDiagnosisReportRequest) String() string {
	return tea.Prettify(s)
}

func (s DiscribeSmartAccessGatewayDiagnosisReportRequest) GoString() string {
	return s.String()
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportRequest) SetOwnerAccount(v string) *DiscribeSmartAccessGatewayDiagnosisReportRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportRequest) SetOwnerId(v int64) *DiscribeSmartAccessGatewayDiagnosisReportRequest {
	s.OwnerId = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportRequest) SetRegionId(v string) *DiscribeSmartAccessGatewayDiagnosisReportRequest {
	s.RegionId = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportRequest) SetResourceOwnerAccount(v string) *DiscribeSmartAccessGatewayDiagnosisReportRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportRequest) SetResourceOwnerId(v int64) *DiscribeSmartAccessGatewayDiagnosisReportRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportRequest) SetSmartAGId(v string) *DiscribeSmartAccessGatewayDiagnosisReportRequest {
	s.SmartAGId = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportRequest) SetSmartAGSn(v string) *DiscribeSmartAccessGatewayDiagnosisReportRequest {
	s.SmartAGSn = &v
	return s
}

type DiscribeSmartAccessGatewayDiagnosisReportResponseBody struct {
	DiagnoseResult *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult `json:"DiagnoseResult,omitempty" xml:"DiagnoseResult,omitempty" type:"Struct"`
	RequestId      *string                                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBody) GoString() string {
	return s.String()
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBody) SetDiagnoseResult(v *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) *DiscribeSmartAccessGatewayDiagnosisReportResponseBody {
	s.DiagnoseResult = v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBody) SetRequestId(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBody {
	s.RequestId = &v
	return s
}

type DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult struct {
	BoxType          *string                                                                        `json:"BoxType,omitempty" xml:"BoxType,omitempty"`
	BoxVersion       *string                                                                        `json:"BoxVersion,omitempty" xml:"BoxVersion,omitempty"`
	Details          []*DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetails  `json:"Details,omitempty" xml:"Details,omitempty" type:"Repeated"`
	DiagnoseId       *string                                                                        `json:"DiagnoseId,omitempty" xml:"DiagnoseId,omitempty"`
	EndTime          *int32                                                                         `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FinishedNumber   *int32                                                                         `json:"FinishedNumber,omitempty" xml:"FinishedNumber,omitempty"`
	InstanceId       *string                                                                        `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Level            *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultLevel      `json:"Level,omitempty" xml:"Level,omitempty" type:"Struct"`
	MonitorVersion   *string                                                                        `json:"MonitorVersion,omitempty" xml:"MonitorVersion,omitempty"`
	Percent          *int32                                                                         `json:"Percent,omitempty" xml:"Percent,omitempty"`
	ReportSLSSuccess *int32                                                                         `json:"ReportSLSSuccess,omitempty" xml:"ReportSLSSuccess,omitempty"`
	SN               *string                                                                        `json:"SN,omitempty" xml:"SN,omitempty"`
	StartTime        *int32                                                                         `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	State            *string                                                                        `json:"State,omitempty" xml:"State,omitempty"`
	Statistics       *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultStatistics `json:"Statistics,omitempty" xml:"Statistics,omitempty" type:"Struct"`
	StoreType        *string                                                                        `json:"StoreType,omitempty" xml:"StoreType,omitempty"`
	TotalNumber      *int32                                                                         `json:"TotalNumber,omitempty" xml:"TotalNumber,omitempty"`
	UId              *string                                                                        `json:"UId,omitempty" xml:"UId,omitempty"`
	UserLevel        *string                                                                        `json:"UserLevel,omitempty" xml:"UserLevel,omitempty"`
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) String() string {
	return tea.Prettify(s)
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) GoString() string {
	return s.String()
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetBoxType(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.BoxType = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetBoxVersion(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.BoxVersion = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetDetails(v []*DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetails) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.Details = v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetDiagnoseId(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.DiagnoseId = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetEndTime(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.EndTime = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetFinishedNumber(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.FinishedNumber = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetInstanceId(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.InstanceId = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetLevel(v *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultLevel) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.Level = v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetMonitorVersion(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.MonitorVersion = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetPercent(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.Percent = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetReportSLSSuccess(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.ReportSLSSuccess = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetSN(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.SN = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetStartTime(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.StartTime = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetState(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.State = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetStatistics(v *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultStatistics) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.Statistics = v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetStoreType(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.StoreType = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetTotalNumber(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.TotalNumber = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetUId(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.UId = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult) SetUserLevel(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResult {
	s.UserLevel = &v
	return s
}

type DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetails struct {
	Items      []*DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems    `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	Statistics *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsStatistics `json:"Statistics,omitempty" xml:"Statistics,omitempty" type:"Struct"`
	Type       *string                                                                               `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetails) String() string {
	return tea.Prettify(s)
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetails) GoString() string {
	return s.String()
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetails) SetItems(v []*DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetails {
	s.Items = v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetails) SetStatistics(v *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsStatistics) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetails {
	s.Statistics = v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetails) SetType(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetails {
	s.Type = &v
	return s
}

type DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems struct {
	CN        *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN `json:"CN,omitempty" xml:"CN,omitempty" type:"Struct"`
	EN        *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN `json:"EN,omitempty" xml:"EN,omitempty" type:"Struct"`
	EndTime   *int64                                                                             `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ItemName  *string                                                                            `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	Level     *string                                                                            `json:"Level,omitempty" xml:"Level,omitempty"`
	StartTime *int64                                                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Type      *string                                                                            `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems) String() string {
	return tea.Prettify(s)
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems) GoString() string {
	return s.String()
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems) SetCN(v *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems {
	s.CN = v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems) SetEN(v *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems {
	s.EN = v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems) SetEndTime(v int64) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems {
	s.EndTime = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems) SetItemName(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems {
	s.ItemName = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems) SetLevel(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems {
	s.Level = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems) SetStartTime(v int64) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems {
	s.StartTime = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems) SetType(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItems {
	s.Type = &v
	return s
}

type DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN struct {
	Advice    []*string `json:"Advice,omitempty" xml:"Advice,omitempty" type:"Repeated"`
	Details   []*string `json:"Details,omitempty" xml:"Details,omitempty" type:"Repeated"`
	ItemLevel *string   `json:"ItemLevel,omitempty" xml:"ItemLevel,omitempty"`
	ItemName  *string   `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	ItemType  *string   `json:"ItemType,omitempty" xml:"ItemType,omitempty"`
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN) String() string {
	return tea.Prettify(s)
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN) GoString() string {
	return s.String()
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN) SetAdvice(v []*string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN {
	s.Advice = v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN) SetDetails(v []*string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN {
	s.Details = v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN) SetItemLevel(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN {
	s.ItemLevel = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN) SetItemName(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN {
	s.ItemName = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN) SetItemType(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsCN {
	s.ItemType = &v
	return s
}

type DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN struct {
	Advice    []*string `json:"Advice,omitempty" xml:"Advice,omitempty" type:"Repeated"`
	Details   []*string `json:"Details,omitempty" xml:"Details,omitempty" type:"Repeated"`
	ItemLevel *string   `json:"ItemLevel,omitempty" xml:"ItemLevel,omitempty"`
	ItemName  *string   `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	ItemType  *string   `json:"ItemType,omitempty" xml:"ItemType,omitempty"`
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN) String() string {
	return tea.Prettify(s)
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN) GoString() string {
	return s.String()
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN) SetAdvice(v []*string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN {
	s.Advice = v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN) SetDetails(v []*string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN {
	s.Details = v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN) SetItemLevel(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN {
	s.ItemLevel = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN) SetItemName(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN {
	s.ItemName = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN) SetItemType(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsItemsEN {
	s.ItemType = &v
	return s
}

type DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsStatistics struct {
	Error   *int32 `json:"Error,omitempty" xml:"Error,omitempty"`
	Info    *int32 `json:"Info,omitempty" xml:"Info,omitempty"`
	Total   *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
	Warning *int32 `json:"Warning,omitempty" xml:"Warning,omitempty"`
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsStatistics) String() string {
	return tea.Prettify(s)
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsStatistics) GoString() string {
	return s.String()
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsStatistics) SetError(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsStatistics {
	s.Error = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsStatistics) SetInfo(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsStatistics {
	s.Info = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsStatistics) SetTotal(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsStatistics {
	s.Total = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsStatistics) SetWarning(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultDetailsStatistics {
	s.Warning = &v
	return s
}

type DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultLevel struct {
	Biz           *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	Configuration *string `json:"Configuration,omitempty" xml:"Configuration,omitempty"`
	Total         *string `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultLevel) String() string {
	return tea.Prettify(s)
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultLevel) GoString() string {
	return s.String()
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultLevel) SetBiz(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultLevel {
	s.Biz = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultLevel) SetConfiguration(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultLevel {
	s.Configuration = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultLevel) SetTotal(v string) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultLevel {
	s.Total = &v
	return s
}

type DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultStatistics struct {
	Error   *int32 `json:"Error,omitempty" xml:"Error,omitempty"`
	Info    *int32 `json:"Info,omitempty" xml:"Info,omitempty"`
	Total   *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
	Warning *int32 `json:"Warning,omitempty" xml:"Warning,omitempty"`
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultStatistics) String() string {
	return tea.Prettify(s)
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultStatistics) GoString() string {
	return s.String()
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultStatistics) SetError(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultStatistics {
	s.Error = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultStatistics) SetInfo(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultStatistics {
	s.Info = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultStatistics) SetTotal(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultStatistics {
	s.Total = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultStatistics) SetWarning(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponseBodyDiagnoseResultStatistics {
	s.Warning = &v
	return s
}

type DiscribeSmartAccessGatewayDiagnosisReportResponse struct {
	Headers    map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DiscribeSmartAccessGatewayDiagnosisReportResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponse) String() string {
	return tea.Prettify(s)
}

func (s DiscribeSmartAccessGatewayDiagnosisReportResponse) GoString() string {
	return s.String()
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponse) SetHeaders(v map[string]*string) *DiscribeSmartAccessGatewayDiagnosisReportResponse {
	s.Headers = v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponse) SetStatusCode(v int32) *DiscribeSmartAccessGatewayDiagnosisReportResponse {
	s.StatusCode = &v
	return s
}

func (s *DiscribeSmartAccessGatewayDiagnosisReportResponse) SetBody(v *DiscribeSmartAccessGatewayDiagnosisReportResponseBody) *DiscribeSmartAccessGatewayDiagnosisReportResponse {
	s.Body = v
	return s
}

type DissociateSmartAGFromApplicationBandwidthPackageRequest struct {
	ApplicationBandwidthPackageId *string   `json:"ApplicationBandwidthPackageId,omitempty" xml:"ApplicationBandwidthPackageId,omitempty"`
	ClientToken                   *string   `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DryRun                        *bool     `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	RegionId                      *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SmartAGId                     *string   `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGIdList                 []*string `json:"SmartAGIdList,omitempty" xml:"SmartAGIdList,omitempty" type:"Repeated"`
}

func (s DissociateSmartAGFromApplicationBandwidthPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s DissociateSmartAGFromApplicationBandwidthPackageRequest) GoString() string {
	return s.String()
}

func (s *DissociateSmartAGFromApplicationBandwidthPackageRequest) SetApplicationBandwidthPackageId(v string) *DissociateSmartAGFromApplicationBandwidthPackageRequest {
	s.ApplicationBandwidthPackageId = &v
	return s
}

func (s *DissociateSmartAGFromApplicationBandwidthPackageRequest) SetClientToken(v string) *DissociateSmartAGFromApplicationBandwidthPackageRequest {
	s.ClientToken = &v
	return s
}

func (s *DissociateSmartAGFromApplicationBandwidthPackageRequest) SetDryRun(v bool) *DissociateSmartAGFromApplicationBandwidthPackageRequest {
	s.DryRun = &v
	return s
}

func (s *DissociateSmartAGFromApplicationBandwidthPackageRequest) SetRegionId(v string) *DissociateSmartAGFromApplicationBandwidthPackageRequest {
	s.RegionId = &v
	return s
}

func (s *DissociateSmartAGFromApplicationBandwidthPackageRequest) SetSmartAGId(v string) *DissociateSmartAGFromApplicationBandwidthPackageRequest {
	s.SmartAGId = &v
	return s
}

func (s *DissociateSmartAGFromApplicationBandwidthPackageRequest) SetSmartAGIdList(v []*string) *DissociateSmartAGFromApplicationBandwidthPackageRequest {
	s.SmartAGIdList = v
	return s
}

type DissociateSmartAGFromApplicationBandwidthPackageResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DissociateSmartAGFromApplicationBandwidthPackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DissociateSmartAGFromApplicationBandwidthPackageResponseBody) GoString() string {
	return s.String()
}

func (s *DissociateSmartAGFromApplicationBandwidthPackageResponseBody) SetRequestId(v string) *DissociateSmartAGFromApplicationBandwidthPackageResponseBody {
	s.RequestId = &v
	return s
}

type DissociateSmartAGFromApplicationBandwidthPackageResponse struct {
	Headers    map[string]*string                                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DissociateSmartAGFromApplicationBandwidthPackageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DissociateSmartAGFromApplicationBandwidthPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s DissociateSmartAGFromApplicationBandwidthPackageResponse) GoString() string {
	return s.String()
}

func (s *DissociateSmartAGFromApplicationBandwidthPackageResponse) SetHeaders(v map[string]*string) *DissociateSmartAGFromApplicationBandwidthPackageResponse {
	s.Headers = v
	return s
}

func (s *DissociateSmartAGFromApplicationBandwidthPackageResponse) SetStatusCode(v int32) *DissociateSmartAGFromApplicationBandwidthPackageResponse {
	s.StatusCode = &v
	return s
}

func (s *DissociateSmartAGFromApplicationBandwidthPackageResponse) SetBody(v *DissociateSmartAGFromApplicationBandwidthPackageResponseBody) *DissociateSmartAGFromApplicationBandwidthPackageResponse {
	s.Body = v
	return s
}

type DowngradeSmartAccessGatewayRequest struct {
	AutoPay              *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	BandWidthSpec        *int64  `json:"BandWidthSpec,omitempty" xml:"BandWidthSpec,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s DowngradeSmartAccessGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DowngradeSmartAccessGatewayRequest) GoString() string {
	return s.String()
}

func (s *DowngradeSmartAccessGatewayRequest) SetAutoPay(v bool) *DowngradeSmartAccessGatewayRequest {
	s.AutoPay = &v
	return s
}

func (s *DowngradeSmartAccessGatewayRequest) SetBandWidthSpec(v int64) *DowngradeSmartAccessGatewayRequest {
	s.BandWidthSpec = &v
	return s
}

func (s *DowngradeSmartAccessGatewayRequest) SetOwnerAccount(v string) *DowngradeSmartAccessGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DowngradeSmartAccessGatewayRequest) SetOwnerId(v int64) *DowngradeSmartAccessGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *DowngradeSmartAccessGatewayRequest) SetRegionId(v string) *DowngradeSmartAccessGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *DowngradeSmartAccessGatewayRequest) SetResourceOwnerAccount(v string) *DowngradeSmartAccessGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DowngradeSmartAccessGatewayRequest) SetResourceOwnerId(v int64) *DowngradeSmartAccessGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DowngradeSmartAccessGatewayRequest) SetSmartAGId(v string) *DowngradeSmartAccessGatewayRequest {
	s.SmartAGId = &v
	return s
}

type DowngradeSmartAccessGatewayResponseBody struct {
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DowngradeSmartAccessGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DowngradeSmartAccessGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *DowngradeSmartAccessGatewayResponseBody) SetOrderId(v string) *DowngradeSmartAccessGatewayResponseBody {
	s.OrderId = &v
	return s
}

func (s *DowngradeSmartAccessGatewayResponseBody) SetRequestId(v string) *DowngradeSmartAccessGatewayResponseBody {
	s.RequestId = &v
	return s
}

type DowngradeSmartAccessGatewayResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DowngradeSmartAccessGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DowngradeSmartAccessGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DowngradeSmartAccessGatewayResponse) GoString() string {
	return s.String()
}

func (s *DowngradeSmartAccessGatewayResponse) SetHeaders(v map[string]*string) *DowngradeSmartAccessGatewayResponse {
	s.Headers = v
	return s
}

func (s *DowngradeSmartAccessGatewayResponse) SetStatusCode(v int32) *DowngradeSmartAccessGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *DowngradeSmartAccessGatewayResponse) SetBody(v *DowngradeSmartAccessGatewayResponseBody) *DowngradeSmartAccessGatewayResponse {
	s.Body = v
	return s
}

type DowngradeSmartAccessGatewaySoftwareRequest struct {
	AutoPay              *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	DataPlan             *int64  `json:"DataPlan,omitempty" xml:"DataPlan,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	UserCount            *int32  `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
}

func (s DowngradeSmartAccessGatewaySoftwareRequest) String() string {
	return tea.Prettify(s)
}

func (s DowngradeSmartAccessGatewaySoftwareRequest) GoString() string {
	return s.String()
}

func (s *DowngradeSmartAccessGatewaySoftwareRequest) SetAutoPay(v bool) *DowngradeSmartAccessGatewaySoftwareRequest {
	s.AutoPay = &v
	return s
}

func (s *DowngradeSmartAccessGatewaySoftwareRequest) SetDataPlan(v int64) *DowngradeSmartAccessGatewaySoftwareRequest {
	s.DataPlan = &v
	return s
}

func (s *DowngradeSmartAccessGatewaySoftwareRequest) SetOwnerAccount(v string) *DowngradeSmartAccessGatewaySoftwareRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DowngradeSmartAccessGatewaySoftwareRequest) SetOwnerId(v int64) *DowngradeSmartAccessGatewaySoftwareRequest {
	s.OwnerId = &v
	return s
}

func (s *DowngradeSmartAccessGatewaySoftwareRequest) SetRegionId(v string) *DowngradeSmartAccessGatewaySoftwareRequest {
	s.RegionId = &v
	return s
}

func (s *DowngradeSmartAccessGatewaySoftwareRequest) SetResourceOwnerAccount(v string) *DowngradeSmartAccessGatewaySoftwareRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DowngradeSmartAccessGatewaySoftwareRequest) SetResourceOwnerId(v int64) *DowngradeSmartAccessGatewaySoftwareRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DowngradeSmartAccessGatewaySoftwareRequest) SetSmartAGId(v string) *DowngradeSmartAccessGatewaySoftwareRequest {
	s.SmartAGId = &v
	return s
}

func (s *DowngradeSmartAccessGatewaySoftwareRequest) SetUserCount(v int32) *DowngradeSmartAccessGatewaySoftwareRequest {
	s.UserCount = &v
	return s
}

type DowngradeSmartAccessGatewaySoftwareResponseBody struct {
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DowngradeSmartAccessGatewaySoftwareResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DowngradeSmartAccessGatewaySoftwareResponseBody) GoString() string {
	return s.String()
}

func (s *DowngradeSmartAccessGatewaySoftwareResponseBody) SetOrderId(v string) *DowngradeSmartAccessGatewaySoftwareResponseBody {
	s.OrderId = &v
	return s
}

func (s *DowngradeSmartAccessGatewaySoftwareResponseBody) SetRequestId(v string) *DowngradeSmartAccessGatewaySoftwareResponseBody {
	s.RequestId = &v
	return s
}

type DowngradeSmartAccessGatewaySoftwareResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DowngradeSmartAccessGatewaySoftwareResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DowngradeSmartAccessGatewaySoftwareResponse) String() string {
	return tea.Prettify(s)
}

func (s DowngradeSmartAccessGatewaySoftwareResponse) GoString() string {
	return s.String()
}

func (s *DowngradeSmartAccessGatewaySoftwareResponse) SetHeaders(v map[string]*string) *DowngradeSmartAccessGatewaySoftwareResponse {
	s.Headers = v
	return s
}

func (s *DowngradeSmartAccessGatewaySoftwareResponse) SetStatusCode(v int32) *DowngradeSmartAccessGatewaySoftwareResponse {
	s.StatusCode = &v
	return s
}

func (s *DowngradeSmartAccessGatewaySoftwareResponse) SetBody(v *DowngradeSmartAccessGatewaySoftwareResponseBody) *DowngradeSmartAccessGatewaySoftwareResponse {
	s.Body = v
	return s
}

type EnableSmartAGDpiMonitorRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DryRun               *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SlsLogStore          *string `json:"SlsLogStore,omitempty" xml:"SlsLogStore,omitempty"`
	SlsProjectName       *string `json:"SlsProjectName,omitempty" xml:"SlsProjectName,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s EnableSmartAGDpiMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableSmartAGDpiMonitorRequest) GoString() string {
	return s.String()
}

func (s *EnableSmartAGDpiMonitorRequest) SetClientToken(v string) *EnableSmartAGDpiMonitorRequest {
	s.ClientToken = &v
	return s
}

func (s *EnableSmartAGDpiMonitorRequest) SetDryRun(v bool) *EnableSmartAGDpiMonitorRequest {
	s.DryRun = &v
	return s
}

func (s *EnableSmartAGDpiMonitorRequest) SetOwnerAccount(v string) *EnableSmartAGDpiMonitorRequest {
	s.OwnerAccount = &v
	return s
}

func (s *EnableSmartAGDpiMonitorRequest) SetOwnerId(v int64) *EnableSmartAGDpiMonitorRequest {
	s.OwnerId = &v
	return s
}

func (s *EnableSmartAGDpiMonitorRequest) SetRegionId(v string) *EnableSmartAGDpiMonitorRequest {
	s.RegionId = &v
	return s
}

func (s *EnableSmartAGDpiMonitorRequest) SetResourceOwnerAccount(v string) *EnableSmartAGDpiMonitorRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *EnableSmartAGDpiMonitorRequest) SetResourceOwnerId(v int64) *EnableSmartAGDpiMonitorRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *EnableSmartAGDpiMonitorRequest) SetSlsLogStore(v string) *EnableSmartAGDpiMonitorRequest {
	s.SlsLogStore = &v
	return s
}

func (s *EnableSmartAGDpiMonitorRequest) SetSlsProjectName(v string) *EnableSmartAGDpiMonitorRequest {
	s.SlsProjectName = &v
	return s
}

func (s *EnableSmartAGDpiMonitorRequest) SetSmartAGId(v string) *EnableSmartAGDpiMonitorRequest {
	s.SmartAGId = &v
	return s
}

type EnableSmartAGDpiMonitorResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableSmartAGDpiMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableSmartAGDpiMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *EnableSmartAGDpiMonitorResponseBody) SetRequestId(v string) *EnableSmartAGDpiMonitorResponseBody {
	s.RequestId = &v
	return s
}

type EnableSmartAGDpiMonitorResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EnableSmartAGDpiMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableSmartAGDpiMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableSmartAGDpiMonitorResponse) GoString() string {
	return s.String()
}

func (s *EnableSmartAGDpiMonitorResponse) SetHeaders(v map[string]*string) *EnableSmartAGDpiMonitorResponse {
	s.Headers = v
	return s
}

func (s *EnableSmartAGDpiMonitorResponse) SetStatusCode(v int32) *EnableSmartAGDpiMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableSmartAGDpiMonitorResponse) SetBody(v *EnableSmartAGDpiMonitorResponseBody) *EnableSmartAGDpiMonitorResponse {
	s.Body = v
	return s
}

type EnableSmartAccessGatewayUserRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	UserName             *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s EnableSmartAccessGatewayUserRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableSmartAccessGatewayUserRequest) GoString() string {
	return s.String()
}

func (s *EnableSmartAccessGatewayUserRequest) SetOwnerAccount(v string) *EnableSmartAccessGatewayUserRequest {
	s.OwnerAccount = &v
	return s
}

func (s *EnableSmartAccessGatewayUserRequest) SetOwnerId(v int64) *EnableSmartAccessGatewayUserRequest {
	s.OwnerId = &v
	return s
}

func (s *EnableSmartAccessGatewayUserRequest) SetRegionId(v string) *EnableSmartAccessGatewayUserRequest {
	s.RegionId = &v
	return s
}

func (s *EnableSmartAccessGatewayUserRequest) SetResourceOwnerAccount(v string) *EnableSmartAccessGatewayUserRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *EnableSmartAccessGatewayUserRequest) SetResourceOwnerId(v int64) *EnableSmartAccessGatewayUserRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *EnableSmartAccessGatewayUserRequest) SetSmartAGId(v string) *EnableSmartAccessGatewayUserRequest {
	s.SmartAGId = &v
	return s
}

func (s *EnableSmartAccessGatewayUserRequest) SetUserName(v string) *EnableSmartAccessGatewayUserRequest {
	s.UserName = &v
	return s
}

type EnableSmartAccessGatewayUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableSmartAccessGatewayUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableSmartAccessGatewayUserResponseBody) GoString() string {
	return s.String()
}

func (s *EnableSmartAccessGatewayUserResponseBody) SetRequestId(v string) *EnableSmartAccessGatewayUserResponseBody {
	s.RequestId = &v
	return s
}

type EnableSmartAccessGatewayUserResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EnableSmartAccessGatewayUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableSmartAccessGatewayUserResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableSmartAccessGatewayUserResponse) GoString() string {
	return s.String()
}

func (s *EnableSmartAccessGatewayUserResponse) SetHeaders(v map[string]*string) *EnableSmartAccessGatewayUserResponse {
	s.Headers = v
	return s
}

func (s *EnableSmartAccessGatewayUserResponse) SetStatusCode(v int32) *EnableSmartAccessGatewayUserResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableSmartAccessGatewayUserResponse) SetBody(v *EnableSmartAccessGatewayUserResponseBody) *EnableSmartAccessGatewayUserResponse {
	s.Body = v
	return s
}

type GetAclAttributeRequest struct {
	AclId    *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetAclAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAclAttributeRequest) GoString() string {
	return s.String()
}

func (s *GetAclAttributeRequest) SetAclId(v string) *GetAclAttributeRequest {
	s.AclId = &v
	return s
}

func (s *GetAclAttributeRequest) SetRegionId(v string) *GetAclAttributeRequest {
	s.RegionId = &v
	return s
}

type GetAclAttributeResponseBody struct {
	AclId                   *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AclName                 *string `json:"AclName,omitempty" xml:"AclName,omitempty"`
	ErrorConfigSmartAGCount *int32  `json:"ErrorConfigSmartAGCount,omitempty" xml:"ErrorConfigSmartAGCount,omitempty"`
	RequestId               *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAclAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAclAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *GetAclAttributeResponseBody) SetAclId(v string) *GetAclAttributeResponseBody {
	s.AclId = &v
	return s
}

func (s *GetAclAttributeResponseBody) SetAclName(v string) *GetAclAttributeResponseBody {
	s.AclName = &v
	return s
}

func (s *GetAclAttributeResponseBody) SetErrorConfigSmartAGCount(v int32) *GetAclAttributeResponseBody {
	s.ErrorConfigSmartAGCount = &v
	return s
}

func (s *GetAclAttributeResponseBody) SetRequestId(v string) *GetAclAttributeResponseBody {
	s.RequestId = &v
	return s
}

type GetAclAttributeResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAclAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAclAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAclAttributeResponse) GoString() string {
	return s.String()
}

func (s *GetAclAttributeResponse) SetHeaders(v map[string]*string) *GetAclAttributeResponse {
	s.Headers = v
	return s
}

func (s *GetAclAttributeResponse) SetStatusCode(v int32) *GetAclAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAclAttributeResponse) SetBody(v *GetAclAttributeResponseBody) *GetAclAttributeResponse {
	s.Body = v
	return s
}

type GetAdvancedMonitorStateRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SagId    *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
}

func (s GetAdvancedMonitorStateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAdvancedMonitorStateRequest) GoString() string {
	return s.String()
}

func (s *GetAdvancedMonitorStateRequest) SetRegionId(v string) *GetAdvancedMonitorStateRequest {
	s.RegionId = &v
	return s
}

func (s *GetAdvancedMonitorStateRequest) SetSagId(v string) *GetAdvancedMonitorStateRequest {
	s.SagId = &v
	return s
}

type GetAdvancedMonitorStateResponseBody struct {
	Code      *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*GetAdvancedMonitorStateResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAdvancedMonitorStateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAdvancedMonitorStateResponseBody) GoString() string {
	return s.String()
}

func (s *GetAdvancedMonitorStateResponseBody) SetCode(v string) *GetAdvancedMonitorStateResponseBody {
	s.Code = &v
	return s
}

func (s *GetAdvancedMonitorStateResponseBody) SetData(v []*GetAdvancedMonitorStateResponseBodyData) *GetAdvancedMonitorStateResponseBody {
	s.Data = v
	return s
}

func (s *GetAdvancedMonitorStateResponseBody) SetMessage(v string) *GetAdvancedMonitorStateResponseBody {
	s.Message = &v
	return s
}

func (s *GetAdvancedMonitorStateResponseBody) SetRequestId(v string) *GetAdvancedMonitorStateResponseBody {
	s.RequestId = &v
	return s
}

type GetAdvancedMonitorStateResponseBodyData struct {
	Enable *bool `json:"Enable,omitempty" xml:"Enable,omitempty"`
}

func (s GetAdvancedMonitorStateResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAdvancedMonitorStateResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAdvancedMonitorStateResponseBodyData) SetEnable(v bool) *GetAdvancedMonitorStateResponseBodyData {
	s.Enable = &v
	return s
}

type GetAdvancedMonitorStateResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAdvancedMonitorStateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAdvancedMonitorStateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAdvancedMonitorStateResponse) GoString() string {
	return s.String()
}

func (s *GetAdvancedMonitorStateResponse) SetHeaders(v map[string]*string) *GetAdvancedMonitorStateResponse {
	s.Headers = v
	return s
}

func (s *GetAdvancedMonitorStateResponse) SetStatusCode(v int32) *GetAdvancedMonitorStateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAdvancedMonitorStateResponse) SetBody(v *GetAdvancedMonitorStateResponseBody) *GetAdvancedMonitorStateResponse {
	s.Body = v
	return s
}

type GetCloudConnectNetworkUseLimitRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s GetCloudConnectNetworkUseLimitRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCloudConnectNetworkUseLimitRequest) GoString() string {
	return s.String()
}

func (s *GetCloudConnectNetworkUseLimitRequest) SetOwnerAccount(v string) *GetCloudConnectNetworkUseLimitRequest {
	s.OwnerAccount = &v
	return s
}

func (s *GetCloudConnectNetworkUseLimitRequest) SetOwnerId(v int64) *GetCloudConnectNetworkUseLimitRequest {
	s.OwnerId = &v
	return s
}

func (s *GetCloudConnectNetworkUseLimitRequest) SetRegionId(v string) *GetCloudConnectNetworkUseLimitRequest {
	s.RegionId = &v
	return s
}

func (s *GetCloudConnectNetworkUseLimitRequest) SetResourceOwnerAccount(v string) *GetCloudConnectNetworkUseLimitRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GetCloudConnectNetworkUseLimitRequest) SetResourceOwnerId(v int64) *GetCloudConnectNetworkUseLimitRequest {
	s.ResourceOwnerId = &v
	return s
}

type GetCloudConnectNetworkUseLimitResponseBody struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalAmount *int32  `json:"TotalAmount,omitempty" xml:"TotalAmount,omitempty"`
	UsedAmount  *int32  `json:"UsedAmount,omitempty" xml:"UsedAmount,omitempty"`
}

func (s GetCloudConnectNetworkUseLimitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCloudConnectNetworkUseLimitResponseBody) GoString() string {
	return s.String()
}

func (s *GetCloudConnectNetworkUseLimitResponseBody) SetRequestId(v string) *GetCloudConnectNetworkUseLimitResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCloudConnectNetworkUseLimitResponseBody) SetTotalAmount(v int32) *GetCloudConnectNetworkUseLimitResponseBody {
	s.TotalAmount = &v
	return s
}

func (s *GetCloudConnectNetworkUseLimitResponseBody) SetUsedAmount(v int32) *GetCloudConnectNetworkUseLimitResponseBody {
	s.UsedAmount = &v
	return s
}

type GetCloudConnectNetworkUseLimitResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetCloudConnectNetworkUseLimitResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCloudConnectNetworkUseLimitResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCloudConnectNetworkUseLimitResponse) GoString() string {
	return s.String()
}

func (s *GetCloudConnectNetworkUseLimitResponse) SetHeaders(v map[string]*string) *GetCloudConnectNetworkUseLimitResponse {
	s.Headers = v
	return s
}

func (s *GetCloudConnectNetworkUseLimitResponse) SetStatusCode(v int32) *GetCloudConnectNetworkUseLimitResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCloudConnectNetworkUseLimitResponse) SetBody(v *GetCloudConnectNetworkUseLimitResponseBody) *GetCloudConnectNetworkUseLimitResponse {
	s.Body = v
	return s
}

type GetQosAttributeRequest struct {
	QosId    *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetQosAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQosAttributeRequest) GoString() string {
	return s.String()
}

func (s *GetQosAttributeRequest) SetQosId(v string) *GetQosAttributeRequest {
	s.QosId = &v
	return s
}

func (s *GetQosAttributeRequest) SetRegionId(v string) *GetQosAttributeRequest {
	s.RegionId = &v
	return s
}

type GetQosAttributeResponseBody struct {
	ErrorConfigSmartAGCount *int32                                    `json:"ErrorConfigSmartAGCount,omitempty" xml:"ErrorConfigSmartAGCount,omitempty"`
	QosCars                 []*GetQosAttributeResponseBodyQosCars     `json:"QosCars,omitempty" xml:"QosCars,omitempty" type:"Repeated"`
	QosDescription          *string                                   `json:"QosDescription,omitempty" xml:"QosDescription,omitempty"`
	QosName                 *string                                   `json:"QosName,omitempty" xml:"QosName,omitempty"`
	QosPolicies             []*GetQosAttributeResponseBodyQosPolicies `json:"QosPolicies,omitempty" xml:"QosPolicies,omitempty" type:"Repeated"`
	RequestId               *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetQosAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQosAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *GetQosAttributeResponseBody) SetErrorConfigSmartAGCount(v int32) *GetQosAttributeResponseBody {
	s.ErrorConfigSmartAGCount = &v
	return s
}

func (s *GetQosAttributeResponseBody) SetQosCars(v []*GetQosAttributeResponseBodyQosCars) *GetQosAttributeResponseBody {
	s.QosCars = v
	return s
}

func (s *GetQosAttributeResponseBody) SetQosDescription(v string) *GetQosAttributeResponseBody {
	s.QosDescription = &v
	return s
}

func (s *GetQosAttributeResponseBody) SetQosName(v string) *GetQosAttributeResponseBody {
	s.QosName = &v
	return s
}

func (s *GetQosAttributeResponseBody) SetQosPolicies(v []*GetQosAttributeResponseBodyQosPolicies) *GetQosAttributeResponseBody {
	s.QosPolicies = v
	return s
}

func (s *GetQosAttributeResponseBody) SetRequestId(v string) *GetQosAttributeResponseBody {
	s.RequestId = &v
	return s
}

type GetQosAttributeResponseBodyQosCars struct {
	LimitType           *string `json:"LimitType,omitempty" xml:"LimitType,omitempty"`
	MaxBandwidthAbs     *int32  `json:"MaxBandwidthAbs,omitempty" xml:"MaxBandwidthAbs,omitempty"`
	MaxBandwidthPercent *int32  `json:"MaxBandwidthPercent,omitempty" xml:"MaxBandwidthPercent,omitempty"`
	MinBandwidthAbs     *int32  `json:"MinBandwidthAbs,omitempty" xml:"MinBandwidthAbs,omitempty"`
	MinBandwidthPercent *int32  `json:"MinBandwidthPercent,omitempty" xml:"MinBandwidthPercent,omitempty"`
	PercentSourceType   *string `json:"PercentSourceType,omitempty" xml:"PercentSourceType,omitempty"`
	Priority            *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	QosCarDescription   *string `json:"QosCarDescription,omitempty" xml:"QosCarDescription,omitempty"`
	QosCarId            *string `json:"QosCarId,omitempty" xml:"QosCarId,omitempty"`
	QosCarName          *string `json:"QosCarName,omitempty" xml:"QosCarName,omitempty"`
}

func (s GetQosAttributeResponseBodyQosCars) String() string {
	return tea.Prettify(s)
}

func (s GetQosAttributeResponseBodyQosCars) GoString() string {
	return s.String()
}

func (s *GetQosAttributeResponseBodyQosCars) SetLimitType(v string) *GetQosAttributeResponseBodyQosCars {
	s.LimitType = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosCars) SetMaxBandwidthAbs(v int32) *GetQosAttributeResponseBodyQosCars {
	s.MaxBandwidthAbs = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosCars) SetMaxBandwidthPercent(v int32) *GetQosAttributeResponseBodyQosCars {
	s.MaxBandwidthPercent = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosCars) SetMinBandwidthAbs(v int32) *GetQosAttributeResponseBodyQosCars {
	s.MinBandwidthAbs = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosCars) SetMinBandwidthPercent(v int32) *GetQosAttributeResponseBodyQosCars {
	s.MinBandwidthPercent = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosCars) SetPercentSourceType(v string) *GetQosAttributeResponseBodyQosCars {
	s.PercentSourceType = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosCars) SetPriority(v int32) *GetQosAttributeResponseBodyQosCars {
	s.Priority = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosCars) SetQosCarDescription(v string) *GetQosAttributeResponseBodyQosCars {
	s.QosCarDescription = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosCars) SetQosCarId(v string) *GetQosAttributeResponseBodyQosCars {
	s.QosCarId = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosCars) SetQosCarName(v string) *GetQosAttributeResponseBodyQosCars {
	s.QosCarName = &v
	return s
}

type GetQosAttributeResponseBodyQosPolicies struct {
	DestCidr              *string `json:"DestCidr,omitempty" xml:"DestCidr,omitempty"`
	DestPortRange         *string `json:"DestPortRange,omitempty" xml:"DestPortRange,omitempty"`
	EndTime               *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	IpProtocol            *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Priority              *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	QosPolicieDescription *string `json:"QosPolicieDescription,omitempty" xml:"QosPolicieDescription,omitempty"`
	QosPolicieName        *string `json:"QosPolicieName,omitempty" xml:"QosPolicieName,omitempty"`
	SourceCidr            *string `json:"SourceCidr,omitempty" xml:"SourceCidr,omitempty"`
	SourcePortRange       *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	StartTime             *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetQosAttributeResponseBodyQosPolicies) String() string {
	return tea.Prettify(s)
}

func (s GetQosAttributeResponseBodyQosPolicies) GoString() string {
	return s.String()
}

func (s *GetQosAttributeResponseBodyQosPolicies) SetDestCidr(v string) *GetQosAttributeResponseBodyQosPolicies {
	s.DestCidr = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosPolicies) SetDestPortRange(v string) *GetQosAttributeResponseBodyQosPolicies {
	s.DestPortRange = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosPolicies) SetEndTime(v int64) *GetQosAttributeResponseBodyQosPolicies {
	s.EndTime = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosPolicies) SetIpProtocol(v string) *GetQosAttributeResponseBodyQosPolicies {
	s.IpProtocol = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosPolicies) SetPriority(v int32) *GetQosAttributeResponseBodyQosPolicies {
	s.Priority = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosPolicies) SetQosPolicieDescription(v string) *GetQosAttributeResponseBodyQosPolicies {
	s.QosPolicieDescription = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosPolicies) SetQosPolicieName(v string) *GetQosAttributeResponseBodyQosPolicies {
	s.QosPolicieName = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosPolicies) SetSourceCidr(v string) *GetQosAttributeResponseBodyQosPolicies {
	s.SourceCidr = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosPolicies) SetSourcePortRange(v string) *GetQosAttributeResponseBodyQosPolicies {
	s.SourcePortRange = &v
	return s
}

func (s *GetQosAttributeResponseBodyQosPolicies) SetStartTime(v int64) *GetQosAttributeResponseBodyQosPolicies {
	s.StartTime = &v
	return s
}

type GetQosAttributeResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetQosAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQosAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQosAttributeResponse) GoString() string {
	return s.String()
}

func (s *GetQosAttributeResponse) SetHeaders(v map[string]*string) *GetQosAttributeResponse {
	s.Headers = v
	return s
}

func (s *GetQosAttributeResponse) SetStatusCode(v int32) *GetQosAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQosAttributeResponse) SetBody(v *GetQosAttributeResponseBody) *GetQosAttributeResponse {
	s.Body = v
	return s
}

type GetSmartAGDpiAttributeRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s GetSmartAGDpiAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSmartAGDpiAttributeRequest) GoString() string {
	return s.String()
}

func (s *GetSmartAGDpiAttributeRequest) SetOwnerAccount(v string) *GetSmartAGDpiAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *GetSmartAGDpiAttributeRequest) SetOwnerId(v int64) *GetSmartAGDpiAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *GetSmartAGDpiAttributeRequest) SetRegionId(v string) *GetSmartAGDpiAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *GetSmartAGDpiAttributeRequest) SetResourceOwnerAccount(v string) *GetSmartAGDpiAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GetSmartAGDpiAttributeRequest) SetResourceOwnerId(v int64) *GetSmartAGDpiAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetSmartAGDpiAttributeRequest) SetSmartAGId(v string) *GetSmartAGDpiAttributeRequest {
	s.SmartAGId = &v
	return s
}

type GetSmartAGDpiAttributeResponseBody struct {
	DpiMonitorStatus *string `json:"DpiMonitorStatus,omitempty" xml:"DpiMonitorStatus,omitempty"`
	DpiStatus        *string `json:"DpiStatus,omitempty" xml:"DpiStatus,omitempty"`
	LogstoreName     *string `json:"LogstoreName,omitempty" xml:"LogstoreName,omitempty"`
	ProjectName      *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SlsRegion        *string `json:"SlsRegion,omitempty" xml:"SlsRegion,omitempty"`
}

func (s GetSmartAGDpiAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSmartAGDpiAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *GetSmartAGDpiAttributeResponseBody) SetDpiMonitorStatus(v string) *GetSmartAGDpiAttributeResponseBody {
	s.DpiMonitorStatus = &v
	return s
}

func (s *GetSmartAGDpiAttributeResponseBody) SetDpiStatus(v string) *GetSmartAGDpiAttributeResponseBody {
	s.DpiStatus = &v
	return s
}

func (s *GetSmartAGDpiAttributeResponseBody) SetLogstoreName(v string) *GetSmartAGDpiAttributeResponseBody {
	s.LogstoreName = &v
	return s
}

func (s *GetSmartAGDpiAttributeResponseBody) SetProjectName(v string) *GetSmartAGDpiAttributeResponseBody {
	s.ProjectName = &v
	return s
}

func (s *GetSmartAGDpiAttributeResponseBody) SetRequestId(v string) *GetSmartAGDpiAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSmartAGDpiAttributeResponseBody) SetSlsRegion(v string) *GetSmartAGDpiAttributeResponseBody {
	s.SlsRegion = &v
	return s
}

type GetSmartAGDpiAttributeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetSmartAGDpiAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSmartAGDpiAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSmartAGDpiAttributeResponse) GoString() string {
	return s.String()
}

func (s *GetSmartAGDpiAttributeResponse) SetHeaders(v map[string]*string) *GetSmartAGDpiAttributeResponse {
	s.Headers = v
	return s
}

func (s *GetSmartAGDpiAttributeResponse) SetStatusCode(v int32) *GetSmartAGDpiAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSmartAGDpiAttributeResponse) SetBody(v *GetSmartAGDpiAttributeResponseBody) *GetSmartAGDpiAttributeResponse {
	s.Body = v
	return s
}

type GetSmartAccessGatewayUseLimitRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s GetSmartAccessGatewayUseLimitRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSmartAccessGatewayUseLimitRequest) GoString() string {
	return s.String()
}

func (s *GetSmartAccessGatewayUseLimitRequest) SetOwnerAccount(v string) *GetSmartAccessGatewayUseLimitRequest {
	s.OwnerAccount = &v
	return s
}

func (s *GetSmartAccessGatewayUseLimitRequest) SetOwnerId(v int64) *GetSmartAccessGatewayUseLimitRequest {
	s.OwnerId = &v
	return s
}

func (s *GetSmartAccessGatewayUseLimitRequest) SetRegionId(v string) *GetSmartAccessGatewayUseLimitRequest {
	s.RegionId = &v
	return s
}

func (s *GetSmartAccessGatewayUseLimitRequest) SetResourceOwnerAccount(v string) *GetSmartAccessGatewayUseLimitRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GetSmartAccessGatewayUseLimitRequest) SetResourceOwnerId(v int64) *GetSmartAccessGatewayUseLimitRequest {
	s.ResourceOwnerId = &v
	return s
}

type GetSmartAccessGatewayUseLimitResponseBody struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalAmount *int32  `json:"TotalAmount,omitempty" xml:"TotalAmount,omitempty"`
	UsedAmount  *int32  `json:"UsedAmount,omitempty" xml:"UsedAmount,omitempty"`
}

func (s GetSmartAccessGatewayUseLimitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSmartAccessGatewayUseLimitResponseBody) GoString() string {
	return s.String()
}

func (s *GetSmartAccessGatewayUseLimitResponseBody) SetRequestId(v string) *GetSmartAccessGatewayUseLimitResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSmartAccessGatewayUseLimitResponseBody) SetTotalAmount(v int32) *GetSmartAccessGatewayUseLimitResponseBody {
	s.TotalAmount = &v
	return s
}

func (s *GetSmartAccessGatewayUseLimitResponseBody) SetUsedAmount(v int32) *GetSmartAccessGatewayUseLimitResponseBody {
	s.UsedAmount = &v
	return s
}

type GetSmartAccessGatewayUseLimitResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetSmartAccessGatewayUseLimitResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSmartAccessGatewayUseLimitResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSmartAccessGatewayUseLimitResponse) GoString() string {
	return s.String()
}

func (s *GetSmartAccessGatewayUseLimitResponse) SetHeaders(v map[string]*string) *GetSmartAccessGatewayUseLimitResponse {
	s.Headers = v
	return s
}

func (s *GetSmartAccessGatewayUseLimitResponse) SetStatusCode(v int32) *GetSmartAccessGatewayUseLimitResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSmartAccessGatewayUseLimitResponse) SetBody(v *GetSmartAccessGatewayUseLimitResponseBody) *GetSmartAccessGatewayUseLimitResponse {
	s.Body = v
	return s
}

type GrantInstanceToCbnRequest struct {
	CcnInstanceId        *string `json:"CcnInstanceId,omitempty" xml:"CcnInstanceId,omitempty"`
	CenInstanceId        *string `json:"CenInstanceId,omitempty" xml:"CenInstanceId,omitempty"`
	CenUid               *int64  `json:"CenUid,omitempty" xml:"CenUid,omitempty"`
	GrantTrafficService  *bool   `json:"GrantTrafficService,omitempty" xml:"GrantTrafficService,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s GrantInstanceToCbnRequest) String() string {
	return tea.Prettify(s)
}

func (s GrantInstanceToCbnRequest) GoString() string {
	return s.String()
}

func (s *GrantInstanceToCbnRequest) SetCcnInstanceId(v string) *GrantInstanceToCbnRequest {
	s.CcnInstanceId = &v
	return s
}

func (s *GrantInstanceToCbnRequest) SetCenInstanceId(v string) *GrantInstanceToCbnRequest {
	s.CenInstanceId = &v
	return s
}

func (s *GrantInstanceToCbnRequest) SetCenUid(v int64) *GrantInstanceToCbnRequest {
	s.CenUid = &v
	return s
}

func (s *GrantInstanceToCbnRequest) SetGrantTrafficService(v bool) *GrantInstanceToCbnRequest {
	s.GrantTrafficService = &v
	return s
}

func (s *GrantInstanceToCbnRequest) SetOwnerAccount(v string) *GrantInstanceToCbnRequest {
	s.OwnerAccount = &v
	return s
}

func (s *GrantInstanceToCbnRequest) SetOwnerId(v int64) *GrantInstanceToCbnRequest {
	s.OwnerId = &v
	return s
}

func (s *GrantInstanceToCbnRequest) SetRegionId(v string) *GrantInstanceToCbnRequest {
	s.RegionId = &v
	return s
}

func (s *GrantInstanceToCbnRequest) SetResourceOwnerAccount(v string) *GrantInstanceToCbnRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GrantInstanceToCbnRequest) SetResourceOwnerId(v int64) *GrantInstanceToCbnRequest {
	s.ResourceOwnerId = &v
	return s
}

type GrantInstanceToCbnResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GrantInstanceToCbnResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GrantInstanceToCbnResponseBody) GoString() string {
	return s.String()
}

func (s *GrantInstanceToCbnResponseBody) SetRequestId(v string) *GrantInstanceToCbnResponseBody {
	s.RequestId = &v
	return s
}

type GrantInstanceToCbnResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GrantInstanceToCbnResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GrantInstanceToCbnResponse) String() string {
	return tea.Prettify(s)
}

func (s GrantInstanceToCbnResponse) GoString() string {
	return s.String()
}

func (s *GrantInstanceToCbnResponse) SetHeaders(v map[string]*string) *GrantInstanceToCbnResponse {
	s.Headers = v
	return s
}

func (s *GrantInstanceToCbnResponse) SetStatusCode(v int32) *GrantInstanceToCbnResponse {
	s.StatusCode = &v
	return s
}

func (s *GrantInstanceToCbnResponse) SetBody(v *GrantInstanceToCbnResponseBody) *GrantInstanceToCbnResponse {
	s.Body = v
	return s
}

type GrantSagInstanceToCcnRequest struct {
	CcnInstanceId        *string `json:"CcnInstanceId,omitempty" xml:"CcnInstanceId,omitempty"`
	CcnUid               *int64  `json:"CcnUid,omitempty" xml:"CcnUid,omitempty"`
	GrantTrafficService  *bool   `json:"GrantTrafficService,omitempty" xml:"GrantTrafficService,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s GrantSagInstanceToCcnRequest) String() string {
	return tea.Prettify(s)
}

func (s GrantSagInstanceToCcnRequest) GoString() string {
	return s.String()
}

func (s *GrantSagInstanceToCcnRequest) SetCcnInstanceId(v string) *GrantSagInstanceToCcnRequest {
	s.CcnInstanceId = &v
	return s
}

func (s *GrantSagInstanceToCcnRequest) SetCcnUid(v int64) *GrantSagInstanceToCcnRequest {
	s.CcnUid = &v
	return s
}

func (s *GrantSagInstanceToCcnRequest) SetGrantTrafficService(v bool) *GrantSagInstanceToCcnRequest {
	s.GrantTrafficService = &v
	return s
}

func (s *GrantSagInstanceToCcnRequest) SetOwnerAccount(v string) *GrantSagInstanceToCcnRequest {
	s.OwnerAccount = &v
	return s
}

func (s *GrantSagInstanceToCcnRequest) SetOwnerId(v int64) *GrantSagInstanceToCcnRequest {
	s.OwnerId = &v
	return s
}

func (s *GrantSagInstanceToCcnRequest) SetRegionId(v string) *GrantSagInstanceToCcnRequest {
	s.RegionId = &v
	return s
}

func (s *GrantSagInstanceToCcnRequest) SetResourceOwnerAccount(v string) *GrantSagInstanceToCcnRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GrantSagInstanceToCcnRequest) SetResourceOwnerId(v int64) *GrantSagInstanceToCcnRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GrantSagInstanceToCcnRequest) SetSmartAGId(v string) *GrantSagInstanceToCcnRequest {
	s.SmartAGId = &v
	return s
}

type GrantSagInstanceToCcnResponseBody struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GrantSagInstanceToCcnResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GrantSagInstanceToCcnResponseBody) GoString() string {
	return s.String()
}

func (s *GrantSagInstanceToCcnResponseBody) SetInstanceId(v string) *GrantSagInstanceToCcnResponseBody {
	s.InstanceId = &v
	return s
}

func (s *GrantSagInstanceToCcnResponseBody) SetRequestId(v string) *GrantSagInstanceToCcnResponseBody {
	s.RequestId = &v
	return s
}

type GrantSagInstanceToCcnResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GrantSagInstanceToCcnResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GrantSagInstanceToCcnResponse) String() string {
	return tea.Prettify(s)
}

func (s GrantSagInstanceToCcnResponse) GoString() string {
	return s.String()
}

func (s *GrantSagInstanceToCcnResponse) SetHeaders(v map[string]*string) *GrantSagInstanceToCcnResponse {
	s.Headers = v
	return s
}

func (s *GrantSagInstanceToCcnResponse) SetStatusCode(v int32) *GrantSagInstanceToCcnResponse {
	s.StatusCode = &v
	return s
}

func (s *GrantSagInstanceToCcnResponse) SetBody(v *GrantSagInstanceToCcnResponseBody) *GrantSagInstanceToCcnResponse {
	s.Body = v
	return s
}

type GrantSagInstanceToVbrRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	VbrInstanceId        *string `json:"VbrInstanceId,omitempty" xml:"VbrInstanceId,omitempty"`
	VbrRegionId          *string `json:"VbrRegionId,omitempty" xml:"VbrRegionId,omitempty"`
	VbrUid               *int64  `json:"VbrUid,omitempty" xml:"VbrUid,omitempty"`
}

func (s GrantSagInstanceToVbrRequest) String() string {
	return tea.Prettify(s)
}

func (s GrantSagInstanceToVbrRequest) GoString() string {
	return s.String()
}

func (s *GrantSagInstanceToVbrRequest) SetOwnerAccount(v string) *GrantSagInstanceToVbrRequest {
	s.OwnerAccount = &v
	return s
}

func (s *GrantSagInstanceToVbrRequest) SetOwnerId(v int64) *GrantSagInstanceToVbrRequest {
	s.OwnerId = &v
	return s
}

func (s *GrantSagInstanceToVbrRequest) SetRegionId(v string) *GrantSagInstanceToVbrRequest {
	s.RegionId = &v
	return s
}

func (s *GrantSagInstanceToVbrRequest) SetResourceOwnerAccount(v string) *GrantSagInstanceToVbrRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GrantSagInstanceToVbrRequest) SetResourceOwnerId(v int64) *GrantSagInstanceToVbrRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GrantSagInstanceToVbrRequest) SetSmartAGId(v string) *GrantSagInstanceToVbrRequest {
	s.SmartAGId = &v
	return s
}

func (s *GrantSagInstanceToVbrRequest) SetVbrInstanceId(v string) *GrantSagInstanceToVbrRequest {
	s.VbrInstanceId = &v
	return s
}

func (s *GrantSagInstanceToVbrRequest) SetVbrRegionId(v string) *GrantSagInstanceToVbrRequest {
	s.VbrRegionId = &v
	return s
}

func (s *GrantSagInstanceToVbrRequest) SetVbrUid(v int64) *GrantSagInstanceToVbrRequest {
	s.VbrUid = &v
	return s
}

type GrantSagInstanceToVbrResponseBody struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GrantSagInstanceToVbrResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GrantSagInstanceToVbrResponseBody) GoString() string {
	return s.String()
}

func (s *GrantSagInstanceToVbrResponseBody) SetInstanceId(v string) *GrantSagInstanceToVbrResponseBody {
	s.InstanceId = &v
	return s
}

func (s *GrantSagInstanceToVbrResponseBody) SetRequestId(v string) *GrantSagInstanceToVbrResponseBody {
	s.RequestId = &v
	return s
}

type GrantSagInstanceToVbrResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GrantSagInstanceToVbrResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GrantSagInstanceToVbrResponse) String() string {
	return tea.Prettify(s)
}

func (s GrantSagInstanceToVbrResponse) GoString() string {
	return s.String()
}

func (s *GrantSagInstanceToVbrResponse) SetHeaders(v map[string]*string) *GrantSagInstanceToVbrResponse {
	s.Headers = v
	return s
}

func (s *GrantSagInstanceToVbrResponse) SetStatusCode(v int32) *GrantSagInstanceToVbrResponse {
	s.StatusCode = &v
	return s
}

func (s *GrantSagInstanceToVbrResponse) SetBody(v *GrantSagInstanceToVbrResponseBody) *GrantSagInstanceToVbrResponse {
	s.Body = v
	return s
}

type KickOutClientsRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	Username             *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s KickOutClientsRequest) String() string {
	return tea.Prettify(s)
}

func (s KickOutClientsRequest) GoString() string {
	return s.String()
}

func (s *KickOutClientsRequest) SetOwnerAccount(v string) *KickOutClientsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *KickOutClientsRequest) SetOwnerId(v int64) *KickOutClientsRequest {
	s.OwnerId = &v
	return s
}

func (s *KickOutClientsRequest) SetRegionId(v string) *KickOutClientsRequest {
	s.RegionId = &v
	return s
}

func (s *KickOutClientsRequest) SetResourceOwnerAccount(v string) *KickOutClientsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *KickOutClientsRequest) SetResourceOwnerId(v int64) *KickOutClientsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *KickOutClientsRequest) SetSmartAGId(v string) *KickOutClientsRequest {
	s.SmartAGId = &v
	return s
}

func (s *KickOutClientsRequest) SetUsername(v string) *KickOutClientsRequest {
	s.Username = &v
	return s
}

type KickOutClientsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s KickOutClientsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s KickOutClientsResponseBody) GoString() string {
	return s.String()
}

func (s *KickOutClientsResponseBody) SetRequestId(v string) *KickOutClientsResponseBody {
	s.RequestId = &v
	return s
}

type KickOutClientsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *KickOutClientsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s KickOutClientsResponse) String() string {
	return tea.Prettify(s)
}

func (s KickOutClientsResponse) GoString() string {
	return s.String()
}

func (s *KickOutClientsResponse) SetHeaders(v map[string]*string) *KickOutClientsResponse {
	s.Headers = v
	return s
}

func (s *KickOutClientsResponse) SetStatusCode(v int32) *KickOutClientsResponse {
	s.StatusCode = &v
	return s
}

func (s *KickOutClientsResponse) SetBody(v *KickOutClientsResponseBody) *KickOutClientsResponse {
	s.Body = v
	return s
}

type ListAccessPointNetworkQualitiesRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s ListAccessPointNetworkQualitiesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAccessPointNetworkQualitiesRequest) GoString() string {
	return s.String()
}

func (s *ListAccessPointNetworkQualitiesRequest) SetOwnerAccount(v string) *ListAccessPointNetworkQualitiesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListAccessPointNetworkQualitiesRequest) SetOwnerId(v int64) *ListAccessPointNetworkQualitiesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListAccessPointNetworkQualitiesRequest) SetRegionId(v string) *ListAccessPointNetworkQualitiesRequest {
	s.RegionId = &v
	return s
}

func (s *ListAccessPointNetworkQualitiesRequest) SetResourceOwnerAccount(v string) *ListAccessPointNetworkQualitiesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListAccessPointNetworkQualitiesRequest) SetResourceOwnerId(v int64) *ListAccessPointNetworkQualitiesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListAccessPointNetworkQualitiesRequest) SetSmartAGId(v string) *ListAccessPointNetworkQualitiesRequest {
	s.SmartAGId = &v
	return s
}

type ListAccessPointNetworkQualitiesResponseBody struct {
	AccessPointNetworkQualities []*ListAccessPointNetworkQualitiesResponseBodyAccessPointNetworkQualities `json:"AccessPointNetworkQualities,omitempty" xml:"AccessPointNetworkQualities,omitempty" type:"Repeated"`
	RequestId                   *string                                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAccessPointNetworkQualitiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAccessPointNetworkQualitiesResponseBody) GoString() string {
	return s.String()
}

func (s *ListAccessPointNetworkQualitiesResponseBody) SetAccessPointNetworkQualities(v []*ListAccessPointNetworkQualitiesResponseBodyAccessPointNetworkQualities) *ListAccessPointNetworkQualitiesResponseBody {
	s.AccessPointNetworkQualities = v
	return s
}

func (s *ListAccessPointNetworkQualitiesResponseBody) SetRequestId(v string) *ListAccessPointNetworkQualitiesResponseBody {
	s.RequestId = &v
	return s
}

type ListAccessPointNetworkQualitiesResponseBodyAccessPointNetworkQualities struct {
	Id   *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	Loss *string `json:"Loss,omitempty" xml:"Loss,omitempty"`
	Rtt  *string `json:"Rtt,omitempty" xml:"Rtt,omitempty"`
}

func (s ListAccessPointNetworkQualitiesResponseBodyAccessPointNetworkQualities) String() string {
	return tea.Prettify(s)
}

func (s ListAccessPointNetworkQualitiesResponseBodyAccessPointNetworkQualities) GoString() string {
	return s.String()
}

func (s *ListAccessPointNetworkQualitiesResponseBodyAccessPointNetworkQualities) SetId(v int32) *ListAccessPointNetworkQualitiesResponseBodyAccessPointNetworkQualities {
	s.Id = &v
	return s
}

func (s *ListAccessPointNetworkQualitiesResponseBodyAccessPointNetworkQualities) SetLoss(v string) *ListAccessPointNetworkQualitiesResponseBodyAccessPointNetworkQualities {
	s.Loss = &v
	return s
}

func (s *ListAccessPointNetworkQualitiesResponseBodyAccessPointNetworkQualities) SetRtt(v string) *ListAccessPointNetworkQualitiesResponseBodyAccessPointNetworkQualities {
	s.Rtt = &v
	return s
}

type ListAccessPointNetworkQualitiesResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAccessPointNetworkQualitiesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAccessPointNetworkQualitiesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAccessPointNetworkQualitiesResponse) GoString() string {
	return s.String()
}

func (s *ListAccessPointNetworkQualitiesResponse) SetHeaders(v map[string]*string) *ListAccessPointNetworkQualitiesResponse {
	s.Headers = v
	return s
}

func (s *ListAccessPointNetworkQualitiesResponse) SetStatusCode(v int32) *ListAccessPointNetworkQualitiesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAccessPointNetworkQualitiesResponse) SetBody(v *ListAccessPointNetworkQualitiesResponseBody) *ListAccessPointNetworkQualitiesResponse {
	s.Body = v
	return s
}

type ListAccessPointsRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s ListAccessPointsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAccessPointsRequest) GoString() string {
	return s.String()
}

func (s *ListAccessPointsRequest) SetOwnerAccount(v string) *ListAccessPointsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListAccessPointsRequest) SetOwnerId(v int64) *ListAccessPointsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListAccessPointsRequest) SetPageNumber(v int32) *ListAccessPointsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAccessPointsRequest) SetPageSize(v int32) *ListAccessPointsRequest {
	s.PageSize = &v
	return s
}

func (s *ListAccessPointsRequest) SetRegionId(v string) *ListAccessPointsRequest {
	s.RegionId = &v
	return s
}

func (s *ListAccessPointsRequest) SetResourceOwnerAccount(v string) *ListAccessPointsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListAccessPointsRequest) SetResourceOwnerId(v int64) *ListAccessPointsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListAccessPointsRequest) SetSmartAGId(v string) *ListAccessPointsRequest {
	s.SmartAGId = &v
	return s
}

type ListAccessPointsResponseBody struct {
	AccessPoints []*ListAccessPointsResponseBodyAccessPoints `json:"AccessPoints,omitempty" xml:"AccessPoints,omitempty" type:"Repeated"`
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount   *int32                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAccessPointsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAccessPointsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAccessPointsResponseBody) SetAccessPoints(v []*ListAccessPointsResponseBodyAccessPoints) *ListAccessPointsResponseBody {
	s.AccessPoints = v
	return s
}

func (s *ListAccessPointsResponseBody) SetRequestId(v string) *ListAccessPointsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAccessPointsResponseBody) SetTotalCount(v int32) *ListAccessPointsResponseBody {
	s.TotalCount = &v
	return s
}

type ListAccessPointsResponseBodyAccessPoints struct {
	AccessPointId        *int32  `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty"`
	ActiveSmartAGCount   *int32  `json:"ActiveSmartAGCount,omitempty" xml:"ActiveSmartAGCount,omitempty"`
	InactiveSmartAGCount *int32  `json:"InactiveSmartAGCount,omitempty" xml:"InactiveSmartAGCount,omitempty"`
	Latitude             *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	Longitude            *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
}

func (s ListAccessPointsResponseBodyAccessPoints) String() string {
	return tea.Prettify(s)
}

func (s ListAccessPointsResponseBodyAccessPoints) GoString() string {
	return s.String()
}

func (s *ListAccessPointsResponseBodyAccessPoints) SetAccessPointId(v int32) *ListAccessPointsResponseBodyAccessPoints {
	s.AccessPointId = &v
	return s
}

func (s *ListAccessPointsResponseBodyAccessPoints) SetActiveSmartAGCount(v int32) *ListAccessPointsResponseBodyAccessPoints {
	s.ActiveSmartAGCount = &v
	return s
}

func (s *ListAccessPointsResponseBodyAccessPoints) SetInactiveSmartAGCount(v int32) *ListAccessPointsResponseBodyAccessPoints {
	s.InactiveSmartAGCount = &v
	return s
}

func (s *ListAccessPointsResponseBodyAccessPoints) SetLatitude(v string) *ListAccessPointsResponseBodyAccessPoints {
	s.Latitude = &v
	return s
}

func (s *ListAccessPointsResponseBodyAccessPoints) SetLongitude(v string) *ListAccessPointsResponseBodyAccessPoints {
	s.Longitude = &v
	return s
}

type ListAccessPointsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAccessPointsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAccessPointsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAccessPointsResponse) GoString() string {
	return s.String()
}

func (s *ListAccessPointsResponse) SetHeaders(v map[string]*string) *ListAccessPointsResponse {
	s.Headers = v
	return s
}

func (s *ListAccessPointsResponse) SetStatusCode(v int32) *ListAccessPointsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAccessPointsResponse) SetBody(v *ListAccessPointsResponseBody) *ListAccessPointsResponse {
	s.Body = v
	return s
}

type ListAvailableServiceAddressRequest struct {
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SagId       *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
	Sn          *string `json:"Sn,omitempty" xml:"Sn,omitempty"`
}

func (s ListAvailableServiceAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAvailableServiceAddressRequest) GoString() string {
	return s.String()
}

func (s *ListAvailableServiceAddressRequest) SetAddressType(v string) *ListAvailableServiceAddressRequest {
	s.AddressType = &v
	return s
}

func (s *ListAvailableServiceAddressRequest) SetRegionId(v string) *ListAvailableServiceAddressRequest {
	s.RegionId = &v
	return s
}

func (s *ListAvailableServiceAddressRequest) SetSagId(v string) *ListAvailableServiceAddressRequest {
	s.SagId = &v
	return s
}

func (s *ListAvailableServiceAddressRequest) SetSn(v string) *ListAvailableServiceAddressRequest {
	s.Sn = &v
	return s
}

type ListAvailableServiceAddressResponseBody struct {
	Code      *string                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*ListAvailableServiceAddressResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                                        `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAvailableServiceAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAvailableServiceAddressResponseBody) GoString() string {
	return s.String()
}

func (s *ListAvailableServiceAddressResponseBody) SetCode(v string) *ListAvailableServiceAddressResponseBody {
	s.Code = &v
	return s
}

func (s *ListAvailableServiceAddressResponseBody) SetData(v []*ListAvailableServiceAddressResponseBodyData) *ListAvailableServiceAddressResponseBody {
	s.Data = v
	return s
}

func (s *ListAvailableServiceAddressResponseBody) SetMessage(v string) *ListAvailableServiceAddressResponseBody {
	s.Message = &v
	return s
}

func (s *ListAvailableServiceAddressResponseBody) SetRequestId(v string) *ListAvailableServiceAddressResponseBody {
	s.RequestId = &v
	return s
}

type ListAvailableServiceAddressResponseBodyData struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty"`
}

func (s ListAvailableServiceAddressResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAvailableServiceAddressResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAvailableServiceAddressResponseBodyData) SetAddress(v string) *ListAvailableServiceAddressResponseBodyData {
	s.Address = &v
	return s
}

func (s *ListAvailableServiceAddressResponseBodyData) SetAddressType(v string) *ListAvailableServiceAddressResponseBodyData {
	s.AddressType = &v
	return s
}

type ListAvailableServiceAddressResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAvailableServiceAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAvailableServiceAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAvailableServiceAddressResponse) GoString() string {
	return s.String()
}

func (s *ListAvailableServiceAddressResponse) SetHeaders(v map[string]*string) *ListAvailableServiceAddressResponse {
	s.Headers = v
	return s
}

func (s *ListAvailableServiceAddressResponse) SetStatusCode(v int32) *ListAvailableServiceAddressResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAvailableServiceAddressResponse) SetBody(v *ListAvailableServiceAddressResponseBody) *ListAvailableServiceAddressResponse {
	s.Body = v
	return s
}

type ListDpiConfigErrorRequest struct {
	DpiConfigType  *string `json:"DpiConfigType,omitempty" xml:"DpiConfigType,omitempty"`
	MaxResults     *int32  `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken      *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RuleInstanceId *string `json:"RuleInstanceId,omitempty" xml:"RuleInstanceId,omitempty"`
	SmartAGId      *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s ListDpiConfigErrorRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDpiConfigErrorRequest) GoString() string {
	return s.String()
}

func (s *ListDpiConfigErrorRequest) SetDpiConfigType(v string) *ListDpiConfigErrorRequest {
	s.DpiConfigType = &v
	return s
}

func (s *ListDpiConfigErrorRequest) SetMaxResults(v int32) *ListDpiConfigErrorRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDpiConfigErrorRequest) SetNextToken(v string) *ListDpiConfigErrorRequest {
	s.NextToken = &v
	return s
}

func (s *ListDpiConfigErrorRequest) SetRegionId(v string) *ListDpiConfigErrorRequest {
	s.RegionId = &v
	return s
}

func (s *ListDpiConfigErrorRequest) SetRuleInstanceId(v string) *ListDpiConfigErrorRequest {
	s.RuleInstanceId = &v
	return s
}

func (s *ListDpiConfigErrorRequest) SetSmartAGId(v string) *ListDpiConfigErrorRequest {
	s.SmartAGId = &v
	return s
}

type ListDpiConfigErrorResponseBody struct {
	DpiConfigError []*ListDpiConfigErrorResponseBodyDpiConfigError `json:"DpiConfigError,omitempty" xml:"DpiConfigError,omitempty" type:"Repeated"`
	MaxResults     *int32                                          `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken      *string                                         `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total          *int32                                          `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListDpiConfigErrorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDpiConfigErrorResponseBody) GoString() string {
	return s.String()
}

func (s *ListDpiConfigErrorResponseBody) SetDpiConfigError(v []*ListDpiConfigErrorResponseBodyDpiConfigError) *ListDpiConfigErrorResponseBody {
	s.DpiConfigError = v
	return s
}

func (s *ListDpiConfigErrorResponseBody) SetMaxResults(v int32) *ListDpiConfigErrorResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListDpiConfigErrorResponseBody) SetNextToken(v string) *ListDpiConfigErrorResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListDpiConfigErrorResponseBody) SetRequestId(v string) *ListDpiConfigErrorResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDpiConfigErrorResponseBody) SetTotal(v int32) *ListDpiConfigErrorResponseBody {
	s.Total = &v
	return s
}

type ListDpiConfigErrorResponseBodyDpiConfigError struct {
	ErrorType           *string                                                            `json:"ErrorType,omitempty" xml:"ErrorType,omitempty"`
	RuleConfigErrorList []*ListDpiConfigErrorResponseBodyDpiConfigErrorRuleConfigErrorList `json:"RuleConfigErrorList,omitempty" xml:"RuleConfigErrorList,omitempty" type:"Repeated"`
	SN                  *string                                                            `json:"SN,omitempty" xml:"SN,omitempty"`
	SmartAGId           *string                                                            `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s ListDpiConfigErrorResponseBodyDpiConfigError) String() string {
	return tea.Prettify(s)
}

func (s ListDpiConfigErrorResponseBodyDpiConfigError) GoString() string {
	return s.String()
}

func (s *ListDpiConfigErrorResponseBodyDpiConfigError) SetErrorType(v string) *ListDpiConfigErrorResponseBodyDpiConfigError {
	s.ErrorType = &v
	return s
}

func (s *ListDpiConfigErrorResponseBodyDpiConfigError) SetRuleConfigErrorList(v []*ListDpiConfigErrorResponseBodyDpiConfigErrorRuleConfigErrorList) *ListDpiConfigErrorResponseBodyDpiConfigError {
	s.RuleConfigErrorList = v
	return s
}

func (s *ListDpiConfigErrorResponseBodyDpiConfigError) SetSN(v string) *ListDpiConfigErrorResponseBodyDpiConfigError {
	s.SN = &v
	return s
}

func (s *ListDpiConfigErrorResponseBodyDpiConfigError) SetSmartAGId(v string) *ListDpiConfigErrorResponseBodyDpiConfigError {
	s.SmartAGId = &v
	return s
}

type ListDpiConfigErrorResponseBodyDpiConfigErrorRuleConfigErrorList struct {
	DpiGroupIds     []*string `json:"DpiGroupIds,omitempty" xml:"DpiGroupIds,omitempty" type:"Repeated"`
	DpiSignatureIds []*string `json:"DpiSignatureIds,omitempty" xml:"DpiSignatureIds,omitempty" type:"Repeated"`
	RuleId          *string   `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s ListDpiConfigErrorResponseBodyDpiConfigErrorRuleConfigErrorList) String() string {
	return tea.Prettify(s)
}

func (s ListDpiConfigErrorResponseBodyDpiConfigErrorRuleConfigErrorList) GoString() string {
	return s.String()
}

func (s *ListDpiConfigErrorResponseBodyDpiConfigErrorRuleConfigErrorList) SetDpiGroupIds(v []*string) *ListDpiConfigErrorResponseBodyDpiConfigErrorRuleConfigErrorList {
	s.DpiGroupIds = v
	return s
}

func (s *ListDpiConfigErrorResponseBodyDpiConfigErrorRuleConfigErrorList) SetDpiSignatureIds(v []*string) *ListDpiConfigErrorResponseBodyDpiConfigErrorRuleConfigErrorList {
	s.DpiSignatureIds = v
	return s
}

func (s *ListDpiConfigErrorResponseBodyDpiConfigErrorRuleConfigErrorList) SetRuleId(v string) *ListDpiConfigErrorResponseBodyDpiConfigErrorRuleConfigErrorList {
	s.RuleId = &v
	return s
}

type ListDpiConfigErrorResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListDpiConfigErrorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDpiConfigErrorResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDpiConfigErrorResponse) GoString() string {
	return s.String()
}

func (s *ListDpiConfigErrorResponse) SetHeaders(v map[string]*string) *ListDpiConfigErrorResponse {
	s.Headers = v
	return s
}

func (s *ListDpiConfigErrorResponse) SetStatusCode(v int32) *ListDpiConfigErrorResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDpiConfigErrorResponse) SetBody(v *ListDpiConfigErrorResponseBody) *ListDpiConfigErrorResponse {
	s.Body = v
	return s
}

type ListDpiGroupsRequest struct {
	DpiGroupIds          []*string `json:"DpiGroupIds,omitempty" xml:"DpiGroupIds,omitempty" type:"Repeated"`
	DpiGroupNames        []*string `json:"DpiGroupNames,omitempty" xml:"DpiGroupNames,omitempty" type:"Repeated"`
	MaxResults           *int32    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken            *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListDpiGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDpiGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListDpiGroupsRequest) SetDpiGroupIds(v []*string) *ListDpiGroupsRequest {
	s.DpiGroupIds = v
	return s
}

func (s *ListDpiGroupsRequest) SetDpiGroupNames(v []*string) *ListDpiGroupsRequest {
	s.DpiGroupNames = v
	return s
}

func (s *ListDpiGroupsRequest) SetMaxResults(v int32) *ListDpiGroupsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDpiGroupsRequest) SetNextToken(v string) *ListDpiGroupsRequest {
	s.NextToken = &v
	return s
}

func (s *ListDpiGroupsRequest) SetOwnerAccount(v string) *ListDpiGroupsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListDpiGroupsRequest) SetOwnerId(v int64) *ListDpiGroupsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListDpiGroupsRequest) SetRegionId(v string) *ListDpiGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *ListDpiGroupsRequest) SetResourceOwnerAccount(v string) *ListDpiGroupsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListDpiGroupsRequest) SetResourceOwnerId(v int64) *ListDpiGroupsRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListDpiGroupsResponseBody struct {
	DpiGroup   []*ListDpiGroupsResponseBodyDpiGroup `json:"DpiGroup,omitempty" xml:"DpiGroup,omitempty" type:"Repeated"`
	NextToken  *string                              `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDpiGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDpiGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDpiGroupsResponseBody) SetDpiGroup(v []*ListDpiGroupsResponseBodyDpiGroup) *ListDpiGroupsResponseBody {
	s.DpiGroup = v
	return s
}

func (s *ListDpiGroupsResponseBody) SetNextToken(v string) *ListDpiGroupsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListDpiGroupsResponseBody) SetRequestId(v string) *ListDpiGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDpiGroupsResponseBody) SetTotalCount(v int32) *ListDpiGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type ListDpiGroupsResponseBodyDpiGroup struct {
	DpiGroupId            *string `json:"DpiGroupId,omitempty" xml:"DpiGroupId,omitempty"`
	DpiGroupName          *string `json:"DpiGroupName,omitempty" xml:"DpiGroupName,omitempty"`
	MinEngineVersion      *string `json:"MinEngineVersion,omitempty" xml:"MinEngineVersion,omitempty"`
	MinSignatureDbVersion *string `json:"MinSignatureDbVersion,omitempty" xml:"MinSignatureDbVersion,omitempty"`
}

func (s ListDpiGroupsResponseBodyDpiGroup) String() string {
	return tea.Prettify(s)
}

func (s ListDpiGroupsResponseBodyDpiGroup) GoString() string {
	return s.String()
}

func (s *ListDpiGroupsResponseBodyDpiGroup) SetDpiGroupId(v string) *ListDpiGroupsResponseBodyDpiGroup {
	s.DpiGroupId = &v
	return s
}

func (s *ListDpiGroupsResponseBodyDpiGroup) SetDpiGroupName(v string) *ListDpiGroupsResponseBodyDpiGroup {
	s.DpiGroupName = &v
	return s
}

func (s *ListDpiGroupsResponseBodyDpiGroup) SetMinEngineVersion(v string) *ListDpiGroupsResponseBodyDpiGroup {
	s.MinEngineVersion = &v
	return s
}

func (s *ListDpiGroupsResponseBodyDpiGroup) SetMinSignatureDbVersion(v string) *ListDpiGroupsResponseBodyDpiGroup {
	s.MinSignatureDbVersion = &v
	return s
}

type ListDpiGroupsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListDpiGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDpiGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDpiGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListDpiGroupsResponse) SetHeaders(v map[string]*string) *ListDpiGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListDpiGroupsResponse) SetStatusCode(v int32) *ListDpiGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDpiGroupsResponse) SetBody(v *ListDpiGroupsResponseBody) *ListDpiGroupsResponse {
	s.Body = v
	return s
}

type ListDpiSignaturesRequest struct {
	DpiGroupId           *string   `json:"DpiGroupId,omitempty" xml:"DpiGroupId,omitempty"`
	DpiSignatureIds      []*string `json:"DpiSignatureIds,omitempty" xml:"DpiSignatureIds,omitempty" type:"Repeated"`
	DpiSignatureNames    []*string `json:"DpiSignatureNames,omitempty" xml:"DpiSignatureNames,omitempty" type:"Repeated"`
	MaxResults           *int32    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken            *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListDpiSignaturesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDpiSignaturesRequest) GoString() string {
	return s.String()
}

func (s *ListDpiSignaturesRequest) SetDpiGroupId(v string) *ListDpiSignaturesRequest {
	s.DpiGroupId = &v
	return s
}

func (s *ListDpiSignaturesRequest) SetDpiSignatureIds(v []*string) *ListDpiSignaturesRequest {
	s.DpiSignatureIds = v
	return s
}

func (s *ListDpiSignaturesRequest) SetDpiSignatureNames(v []*string) *ListDpiSignaturesRequest {
	s.DpiSignatureNames = v
	return s
}

func (s *ListDpiSignaturesRequest) SetMaxResults(v int32) *ListDpiSignaturesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDpiSignaturesRequest) SetNextToken(v string) *ListDpiSignaturesRequest {
	s.NextToken = &v
	return s
}

func (s *ListDpiSignaturesRequest) SetOwnerAccount(v string) *ListDpiSignaturesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListDpiSignaturesRequest) SetOwnerId(v int64) *ListDpiSignaturesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListDpiSignaturesRequest) SetRegionId(v string) *ListDpiSignaturesRequest {
	s.RegionId = &v
	return s
}

func (s *ListDpiSignaturesRequest) SetResourceOwnerAccount(v string) *ListDpiSignaturesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListDpiSignaturesRequest) SetResourceOwnerId(v int64) *ListDpiSignaturesRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListDpiSignaturesResponseBody struct {
	DpiSignature []*ListDpiSignaturesResponseBodyDpiSignature `json:"DpiSignature,omitempty" xml:"DpiSignature,omitempty" type:"Repeated"`
	NextToken    *string                                      `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount   *int32                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDpiSignaturesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDpiSignaturesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDpiSignaturesResponseBody) SetDpiSignature(v []*ListDpiSignaturesResponseBodyDpiSignature) *ListDpiSignaturesResponseBody {
	s.DpiSignature = v
	return s
}

func (s *ListDpiSignaturesResponseBody) SetNextToken(v string) *ListDpiSignaturesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListDpiSignaturesResponseBody) SetRequestId(v string) *ListDpiSignaturesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDpiSignaturesResponseBody) SetTotalCount(v int32) *ListDpiSignaturesResponseBody {
	s.TotalCount = &v
	return s
}

type ListDpiSignaturesResponseBodyDpiSignature struct {
	DpiGroupId            *string `json:"DpiGroupId,omitempty" xml:"DpiGroupId,omitempty"`
	DpiSignatureId        *string `json:"DpiSignatureId,omitempty" xml:"DpiSignatureId,omitempty"`
	DpiSignatureName      *string `json:"DpiSignatureName,omitempty" xml:"DpiSignatureName,omitempty"`
	MinEngineVersion      *string `json:"MinEngineVersion,omitempty" xml:"MinEngineVersion,omitempty"`
	MinSignatureDbVersion *string `json:"MinSignatureDbVersion,omitempty" xml:"MinSignatureDbVersion,omitempty"`
}

func (s ListDpiSignaturesResponseBodyDpiSignature) String() string {
	return tea.Prettify(s)
}

func (s ListDpiSignaturesResponseBodyDpiSignature) GoString() string {
	return s.String()
}

func (s *ListDpiSignaturesResponseBodyDpiSignature) SetDpiGroupId(v string) *ListDpiSignaturesResponseBodyDpiSignature {
	s.DpiGroupId = &v
	return s
}

func (s *ListDpiSignaturesResponseBodyDpiSignature) SetDpiSignatureId(v string) *ListDpiSignaturesResponseBodyDpiSignature {
	s.DpiSignatureId = &v
	return s
}

func (s *ListDpiSignaturesResponseBodyDpiSignature) SetDpiSignatureName(v string) *ListDpiSignaturesResponseBodyDpiSignature {
	s.DpiSignatureName = &v
	return s
}

func (s *ListDpiSignaturesResponseBodyDpiSignature) SetMinEngineVersion(v string) *ListDpiSignaturesResponseBodyDpiSignature {
	s.MinEngineVersion = &v
	return s
}

func (s *ListDpiSignaturesResponseBodyDpiSignature) SetMinSignatureDbVersion(v string) *ListDpiSignaturesResponseBodyDpiSignature {
	s.MinSignatureDbVersion = &v
	return s
}

type ListDpiSignaturesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListDpiSignaturesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDpiSignaturesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDpiSignaturesResponse) GoString() string {
	return s.String()
}

func (s *ListDpiSignaturesResponse) SetHeaders(v map[string]*string) *ListDpiSignaturesResponse {
	s.Headers = v
	return s
}

func (s *ListDpiSignaturesResponse) SetStatusCode(v int32) *ListDpiSignaturesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDpiSignaturesResponse) SetBody(v *ListDpiSignaturesResponseBody) *ListDpiSignaturesResponse {
	s.Body = v
	return s
}

type ListEnterpriseCodeRequest struct {
	EnterpriseCode *string `json:"EnterpriseCode,omitempty" xml:"EnterpriseCode,omitempty"`
	IsDefault      *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	MaxResults     *int32  `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken      *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListEnterpriseCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEnterpriseCodeRequest) GoString() string {
	return s.String()
}

func (s *ListEnterpriseCodeRequest) SetEnterpriseCode(v string) *ListEnterpriseCodeRequest {
	s.EnterpriseCode = &v
	return s
}

func (s *ListEnterpriseCodeRequest) SetIsDefault(v bool) *ListEnterpriseCodeRequest {
	s.IsDefault = &v
	return s
}

func (s *ListEnterpriseCodeRequest) SetMaxResults(v int32) *ListEnterpriseCodeRequest {
	s.MaxResults = &v
	return s
}

func (s *ListEnterpriseCodeRequest) SetNextToken(v string) *ListEnterpriseCodeRequest {
	s.NextToken = &v
	return s
}

func (s *ListEnterpriseCodeRequest) SetRegionId(v string) *ListEnterpriseCodeRequest {
	s.RegionId = &v
	return s
}

type ListEnterpriseCodeResponseBody struct {
	EnterpriseCodes []*ListEnterpriseCodeResponseBodyEnterpriseCodes `json:"EnterpriseCodes,omitempty" xml:"EnterpriseCodes,omitempty" type:"Repeated"`
	MaxResults      *int32                                           `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken       *string                                          `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId       *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount      *int32                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListEnterpriseCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEnterpriseCodeResponseBody) GoString() string {
	return s.String()
}

func (s *ListEnterpriseCodeResponseBody) SetEnterpriseCodes(v []*ListEnterpriseCodeResponseBodyEnterpriseCodes) *ListEnterpriseCodeResponseBody {
	s.EnterpriseCodes = v
	return s
}

func (s *ListEnterpriseCodeResponseBody) SetMaxResults(v int32) *ListEnterpriseCodeResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListEnterpriseCodeResponseBody) SetNextToken(v string) *ListEnterpriseCodeResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListEnterpriseCodeResponseBody) SetRequestId(v string) *ListEnterpriseCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEnterpriseCodeResponseBody) SetTotalCount(v int32) *ListEnterpriseCodeResponseBody {
	s.TotalCount = &v
	return s
}

type ListEnterpriseCodeResponseBodyEnterpriseCodes struct {
	EnterpriseCode *string `json:"EnterpriseCode,omitempty" xml:"EnterpriseCode,omitempty"`
	IsDefault      *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
}

func (s ListEnterpriseCodeResponseBodyEnterpriseCodes) String() string {
	return tea.Prettify(s)
}

func (s ListEnterpriseCodeResponseBodyEnterpriseCodes) GoString() string {
	return s.String()
}

func (s *ListEnterpriseCodeResponseBodyEnterpriseCodes) SetEnterpriseCode(v string) *ListEnterpriseCodeResponseBodyEnterpriseCodes {
	s.EnterpriseCode = &v
	return s
}

func (s *ListEnterpriseCodeResponseBodyEnterpriseCodes) SetIsDefault(v bool) *ListEnterpriseCodeResponseBodyEnterpriseCodes {
	s.IsDefault = &v
	return s
}

type ListEnterpriseCodeResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListEnterpriseCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListEnterpriseCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEnterpriseCodeResponse) GoString() string {
	return s.String()
}

func (s *ListEnterpriseCodeResponse) SetHeaders(v map[string]*string) *ListEnterpriseCodeResponse {
	s.Headers = v
	return s
}

func (s *ListEnterpriseCodeResponse) SetStatusCode(v int32) *ListEnterpriseCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEnterpriseCodeResponse) SetBody(v *ListEnterpriseCodeResponseBody) *ListEnterpriseCodeResponse {
	s.Body = v
	return s
}

type ListProbeTaskRequest struct {
	PageNumber  *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProbeTaskId *string `json:"ProbeTaskId,omitempty" xml:"ProbeTaskId,omitempty"`
	Protocol    *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SagId       *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
	SagName     *string `json:"SagName,omitempty" xml:"SagName,omitempty"`
	Sn          *string `json:"Sn,omitempty" xml:"Sn,omitempty"`
	TaskName    *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s ListProbeTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProbeTaskRequest) GoString() string {
	return s.String()
}

func (s *ListProbeTaskRequest) SetPageNumber(v int32) *ListProbeTaskRequest {
	s.PageNumber = &v
	return s
}

func (s *ListProbeTaskRequest) SetPageSize(v int32) *ListProbeTaskRequest {
	s.PageSize = &v
	return s
}

func (s *ListProbeTaskRequest) SetProbeTaskId(v string) *ListProbeTaskRequest {
	s.ProbeTaskId = &v
	return s
}

func (s *ListProbeTaskRequest) SetProtocol(v string) *ListProbeTaskRequest {
	s.Protocol = &v
	return s
}

func (s *ListProbeTaskRequest) SetRegionId(v string) *ListProbeTaskRequest {
	s.RegionId = &v
	return s
}

func (s *ListProbeTaskRequest) SetSagId(v string) *ListProbeTaskRequest {
	s.SagId = &v
	return s
}

func (s *ListProbeTaskRequest) SetSagName(v string) *ListProbeTaskRequest {
	s.SagName = &v
	return s
}

func (s *ListProbeTaskRequest) SetSn(v string) *ListProbeTaskRequest {
	s.Sn = &v
	return s
}

func (s *ListProbeTaskRequest) SetTaskName(v string) *ListProbeTaskRequest {
	s.TaskName = &v
	return s
}

type ListProbeTaskResponseBody struct {
	Code       *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data       []*ListProbeTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message    *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	PageNumber *int32                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListProbeTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProbeTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ListProbeTaskResponseBody) SetCode(v string) *ListProbeTaskResponseBody {
	s.Code = &v
	return s
}

func (s *ListProbeTaskResponseBody) SetData(v []*ListProbeTaskResponseBodyData) *ListProbeTaskResponseBody {
	s.Data = v
	return s
}

func (s *ListProbeTaskResponseBody) SetMessage(v string) *ListProbeTaskResponseBody {
	s.Message = &v
	return s
}

func (s *ListProbeTaskResponseBody) SetPageNumber(v int32) *ListProbeTaskResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListProbeTaskResponseBody) SetPageSize(v int32) *ListProbeTaskResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListProbeTaskResponseBody) SetRequestId(v string) *ListProbeTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListProbeTaskResponseBody) SetTotalCount(v int32) *ListProbeTaskResponseBody {
	s.TotalCount = &v
	return s
}

type ListProbeTaskResponseBodyData struct {
	Domain                 *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Enable                 *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	GmtCreate              *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModify              *string `json:"GmtModify,omitempty" xml:"GmtModify,omitempty"`
	PacketNumber           *int32  `json:"PacketNumber,omitempty" xml:"PacketNumber,omitempty"`
	Port                   *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	ProbeTaskId            *string `json:"ProbeTaskId,omitempty" xml:"ProbeTaskId,omitempty"`
	ProbeTaskSourceAddress *string `json:"ProbeTaskSourceAddress,omitempty" xml:"ProbeTaskSourceAddress,omitempty"`
	Protocol               *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	SagId                  *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
	Sn                     *string `json:"Sn,omitempty" xml:"Sn,omitempty"`
	TaskName               *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListProbeTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListProbeTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListProbeTaskResponseBodyData) SetDomain(v string) *ListProbeTaskResponseBodyData {
	s.Domain = &v
	return s
}

func (s *ListProbeTaskResponseBodyData) SetEnable(v bool) *ListProbeTaskResponseBodyData {
	s.Enable = &v
	return s
}

func (s *ListProbeTaskResponseBodyData) SetGmtCreate(v string) *ListProbeTaskResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *ListProbeTaskResponseBodyData) SetGmtModify(v string) *ListProbeTaskResponseBodyData {
	s.GmtModify = &v
	return s
}

func (s *ListProbeTaskResponseBodyData) SetPacketNumber(v int32) *ListProbeTaskResponseBodyData {
	s.PacketNumber = &v
	return s
}

func (s *ListProbeTaskResponseBodyData) SetPort(v int32) *ListProbeTaskResponseBodyData {
	s.Port = &v
	return s
}

func (s *ListProbeTaskResponseBodyData) SetProbeTaskId(v string) *ListProbeTaskResponseBodyData {
	s.ProbeTaskId = &v
	return s
}

func (s *ListProbeTaskResponseBodyData) SetProbeTaskSourceAddress(v string) *ListProbeTaskResponseBodyData {
	s.ProbeTaskSourceAddress = &v
	return s
}

func (s *ListProbeTaskResponseBodyData) SetProtocol(v string) *ListProbeTaskResponseBodyData {
	s.Protocol = &v
	return s
}

func (s *ListProbeTaskResponseBodyData) SetSagId(v string) *ListProbeTaskResponseBodyData {
	s.SagId = &v
	return s
}

func (s *ListProbeTaskResponseBodyData) SetSn(v string) *ListProbeTaskResponseBodyData {
	s.Sn = &v
	return s
}

func (s *ListProbeTaskResponseBodyData) SetTaskName(v string) *ListProbeTaskResponseBodyData {
	s.TaskName = &v
	return s
}

func (s *ListProbeTaskResponseBodyData) SetType(v string) *ListProbeTaskResponseBodyData {
	s.Type = &v
	return s
}

type ListProbeTaskResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListProbeTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListProbeTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProbeTaskResponse) GoString() string {
	return s.String()
}

func (s *ListProbeTaskResponse) SetHeaders(v map[string]*string) *ListProbeTaskResponse {
	s.Headers = v
	return s
}

func (s *ListProbeTaskResponse) SetStatusCode(v int32) *ListProbeTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProbeTaskResponse) SetBody(v *ListProbeTaskResponseBody) *ListProbeTaskResponse {
	s.Body = v
	return s
}

type ListSmartAGApiUnsupportedFeatureRequest struct {
	OpenApiName          *string `json:"OpenApiName,omitempty" xml:"OpenApiName,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SerialNumber         *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s ListSmartAGApiUnsupportedFeatureRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSmartAGApiUnsupportedFeatureRequest) GoString() string {
	return s.String()
}

func (s *ListSmartAGApiUnsupportedFeatureRequest) SetOpenApiName(v string) *ListSmartAGApiUnsupportedFeatureRequest {
	s.OpenApiName = &v
	return s
}

func (s *ListSmartAGApiUnsupportedFeatureRequest) SetOwnerAccount(v string) *ListSmartAGApiUnsupportedFeatureRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListSmartAGApiUnsupportedFeatureRequest) SetOwnerId(v int64) *ListSmartAGApiUnsupportedFeatureRequest {
	s.OwnerId = &v
	return s
}

func (s *ListSmartAGApiUnsupportedFeatureRequest) SetRegionId(v string) *ListSmartAGApiUnsupportedFeatureRequest {
	s.RegionId = &v
	return s
}

func (s *ListSmartAGApiUnsupportedFeatureRequest) SetResourceOwnerAccount(v string) *ListSmartAGApiUnsupportedFeatureRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListSmartAGApiUnsupportedFeatureRequest) SetResourceOwnerId(v int64) *ListSmartAGApiUnsupportedFeatureRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListSmartAGApiUnsupportedFeatureRequest) SetSerialNumber(v string) *ListSmartAGApiUnsupportedFeatureRequest {
	s.SerialNumber = &v
	return s
}

func (s *ListSmartAGApiUnsupportedFeatureRequest) SetSmartAGId(v string) *ListSmartAGApiUnsupportedFeatureRequest {
	s.SmartAGId = &v
	return s
}

type ListSmartAGApiUnsupportedFeatureResponseBody struct {
	Features  []*ListSmartAGApiUnsupportedFeatureResponseBodyFeatures `json:"Features,omitempty" xml:"Features,omitempty" type:"Repeated"`
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListSmartAGApiUnsupportedFeatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSmartAGApiUnsupportedFeatureResponseBody) GoString() string {
	return s.String()
}

func (s *ListSmartAGApiUnsupportedFeatureResponseBody) SetFeatures(v []*ListSmartAGApiUnsupportedFeatureResponseBodyFeatures) *ListSmartAGApiUnsupportedFeatureResponseBody {
	s.Features = v
	return s
}

func (s *ListSmartAGApiUnsupportedFeatureResponseBody) SetRequestId(v string) *ListSmartAGApiUnsupportedFeatureResponseBody {
	s.RequestId = &v
	return s
}

type ListSmartAGApiUnsupportedFeatureResponseBodyFeatures struct {
	Feature *string `json:"Feature,omitempty" xml:"Feature,omitempty"`
}

func (s ListSmartAGApiUnsupportedFeatureResponseBodyFeatures) String() string {
	return tea.Prettify(s)
}

func (s ListSmartAGApiUnsupportedFeatureResponseBodyFeatures) GoString() string {
	return s.String()
}

func (s *ListSmartAGApiUnsupportedFeatureResponseBodyFeatures) SetFeature(v string) *ListSmartAGApiUnsupportedFeatureResponseBodyFeatures {
	s.Feature = &v
	return s
}

type ListSmartAGApiUnsupportedFeatureResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSmartAGApiUnsupportedFeatureResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSmartAGApiUnsupportedFeatureResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSmartAGApiUnsupportedFeatureResponse) GoString() string {
	return s.String()
}

func (s *ListSmartAGApiUnsupportedFeatureResponse) SetHeaders(v map[string]*string) *ListSmartAGApiUnsupportedFeatureResponse {
	s.Headers = v
	return s
}

func (s *ListSmartAGApiUnsupportedFeatureResponse) SetStatusCode(v int32) *ListSmartAGApiUnsupportedFeatureResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSmartAGApiUnsupportedFeatureResponse) SetBody(v *ListSmartAGApiUnsupportedFeatureResponseBody) *ListSmartAGApiUnsupportedFeatureResponse {
	s.Body = v
	return s
}

type ListSmartAGByAccessPointRequest struct {
	AccessPointId        *int32  `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGStatus        *string `json:"SmartAGStatus,omitempty" xml:"SmartAGStatus,omitempty"`
}

func (s ListSmartAGByAccessPointRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSmartAGByAccessPointRequest) GoString() string {
	return s.String()
}

func (s *ListSmartAGByAccessPointRequest) SetAccessPointId(v int32) *ListSmartAGByAccessPointRequest {
	s.AccessPointId = &v
	return s
}

func (s *ListSmartAGByAccessPointRequest) SetOwnerAccount(v string) *ListSmartAGByAccessPointRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListSmartAGByAccessPointRequest) SetOwnerId(v int64) *ListSmartAGByAccessPointRequest {
	s.OwnerId = &v
	return s
}

func (s *ListSmartAGByAccessPointRequest) SetPageNumber(v int32) *ListSmartAGByAccessPointRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSmartAGByAccessPointRequest) SetPageSize(v int32) *ListSmartAGByAccessPointRequest {
	s.PageSize = &v
	return s
}

func (s *ListSmartAGByAccessPointRequest) SetRegionId(v string) *ListSmartAGByAccessPointRequest {
	s.RegionId = &v
	return s
}

func (s *ListSmartAGByAccessPointRequest) SetResourceOwnerAccount(v string) *ListSmartAGByAccessPointRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListSmartAGByAccessPointRequest) SetResourceOwnerId(v int64) *ListSmartAGByAccessPointRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListSmartAGByAccessPointRequest) SetSmartAGStatus(v string) *ListSmartAGByAccessPointRequest {
	s.SmartAGStatus = &v
	return s
}

type ListSmartAGByAccessPointResponseBody struct {
	RequestId           *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmartAccessGateways []*ListSmartAGByAccessPointResponseBodySmartAccessGateways `json:"SmartAccessGateways,omitempty" xml:"SmartAccessGateways,omitempty" type:"Repeated"`
	TotalCount          *int32                                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSmartAGByAccessPointResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSmartAGByAccessPointResponseBody) GoString() string {
	return s.String()
}

func (s *ListSmartAGByAccessPointResponseBody) SetRequestId(v string) *ListSmartAGByAccessPointResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSmartAGByAccessPointResponseBody) SetSmartAccessGateways(v []*ListSmartAGByAccessPointResponseBodySmartAccessGateways) *ListSmartAGByAccessPointResponseBody {
	s.SmartAccessGateways = v
	return s
}

func (s *ListSmartAGByAccessPointResponseBody) SetTotalCount(v int32) *ListSmartAGByAccessPointResponseBody {
	s.TotalCount = &v
	return s
}

type ListSmartAGByAccessPointResponseBodySmartAccessGateways struct {
	AssociatedCcnId    *string `json:"AssociatedCcnId,omitempty" xml:"AssociatedCcnId,omitempty"`
	HardwareVersion    *string `json:"HardwareVersion,omitempty" xml:"HardwareVersion,omitempty"`
	RoutingStrategy    *string `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	SmartAGDescription *string `json:"SmartAGDescription,omitempty" xml:"SmartAGDescription,omitempty"`
	SmartAGId          *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGName        *string `json:"SmartAGName,omitempty" xml:"SmartAGName,omitempty"`
	SmartAGStatus      *string `json:"SmartAGStatus,omitempty" xml:"SmartAGStatus,omitempty"`
}

func (s ListSmartAGByAccessPointResponseBodySmartAccessGateways) String() string {
	return tea.Prettify(s)
}

func (s ListSmartAGByAccessPointResponseBodySmartAccessGateways) GoString() string {
	return s.String()
}

func (s *ListSmartAGByAccessPointResponseBodySmartAccessGateways) SetAssociatedCcnId(v string) *ListSmartAGByAccessPointResponseBodySmartAccessGateways {
	s.AssociatedCcnId = &v
	return s
}

func (s *ListSmartAGByAccessPointResponseBodySmartAccessGateways) SetHardwareVersion(v string) *ListSmartAGByAccessPointResponseBodySmartAccessGateways {
	s.HardwareVersion = &v
	return s
}

func (s *ListSmartAGByAccessPointResponseBodySmartAccessGateways) SetRoutingStrategy(v string) *ListSmartAGByAccessPointResponseBodySmartAccessGateways {
	s.RoutingStrategy = &v
	return s
}

func (s *ListSmartAGByAccessPointResponseBodySmartAccessGateways) SetSmartAGDescription(v string) *ListSmartAGByAccessPointResponseBodySmartAccessGateways {
	s.SmartAGDescription = &v
	return s
}

func (s *ListSmartAGByAccessPointResponseBodySmartAccessGateways) SetSmartAGId(v string) *ListSmartAGByAccessPointResponseBodySmartAccessGateways {
	s.SmartAGId = &v
	return s
}

func (s *ListSmartAGByAccessPointResponseBodySmartAccessGateways) SetSmartAGName(v string) *ListSmartAGByAccessPointResponseBodySmartAccessGateways {
	s.SmartAGName = &v
	return s
}

func (s *ListSmartAGByAccessPointResponseBodySmartAccessGateways) SetSmartAGStatus(v string) *ListSmartAGByAccessPointResponseBodySmartAccessGateways {
	s.SmartAGStatus = &v
	return s
}

type ListSmartAGByAccessPointResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSmartAGByAccessPointResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSmartAGByAccessPointResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSmartAGByAccessPointResponse) GoString() string {
	return s.String()
}

func (s *ListSmartAGByAccessPointResponse) SetHeaders(v map[string]*string) *ListSmartAGByAccessPointResponse {
	s.Headers = v
	return s
}

func (s *ListSmartAGByAccessPointResponse) SetStatusCode(v int32) *ListSmartAGByAccessPointResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSmartAGByAccessPointResponse) SetBody(v *ListSmartAGByAccessPointResponseBody) *ListSmartAGByAccessPointResponse {
	s.Body = v
	return s
}

type ModifyACLRequest struct {
	AclId                *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyACLRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyACLRequest) GoString() string {
	return s.String()
}

func (s *ModifyACLRequest) SetAclId(v string) *ModifyACLRequest {
	s.AclId = &v
	return s
}

func (s *ModifyACLRequest) SetName(v string) *ModifyACLRequest {
	s.Name = &v
	return s
}

func (s *ModifyACLRequest) SetOwnerAccount(v string) *ModifyACLRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyACLRequest) SetOwnerId(v int64) *ModifyACLRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyACLRequest) SetRegionId(v string) *ModifyACLRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyACLRequest) SetResourceOwnerAccount(v string) *ModifyACLRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyACLRequest) SetResourceOwnerId(v int64) *ModifyACLRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyACLResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyACLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyACLResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyACLResponseBody) SetRequestId(v string) *ModifyACLResponseBody {
	s.RequestId = &v
	return s
}

type ModifyACLResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyACLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyACLResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyACLResponse) GoString() string {
	return s.String()
}

func (s *ModifyACLResponse) SetHeaders(v map[string]*string) *ModifyACLResponse {
	s.Headers = v
	return s
}

func (s *ModifyACLResponse) SetStatusCode(v int32) *ModifyACLResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyACLResponse) SetBody(v *ModifyACLResponseBody) *ModifyACLResponse {
	s.Body = v
	return s
}

type ModifyACLRuleRequest struct {
	AclId                *string   `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AcrId                *string   `json:"AcrId,omitempty" xml:"AcrId,omitempty"`
	Description          *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidr             *string   `json:"DestCidr,omitempty" xml:"DestCidr,omitempty"`
	DestPortRange        *string   `json:"DestPortRange,omitempty" xml:"DestPortRange,omitempty"`
	Direction            *string   `json:"Direction,omitempty" xml:"Direction,omitempty"`
	DpiGroupIds          []*string `json:"DpiGroupIds,omitempty" xml:"DpiGroupIds,omitempty" type:"Repeated"`
	DpiSignatureIds      []*string `json:"DpiSignatureIds,omitempty" xml:"DpiSignatureIds,omitempty" type:"Repeated"`
	IpProtocol           *string   `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Name                 *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Policy               *string   `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Priority             *int32    `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SourceCidr           *string   `json:"SourceCidr,omitempty" xml:"SourceCidr,omitempty"`
	SourcePortRange      *string   `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Type                 *string   `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyACLRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyACLRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifyACLRuleRequest) SetAclId(v string) *ModifyACLRuleRequest {
	s.AclId = &v
	return s
}

func (s *ModifyACLRuleRequest) SetAcrId(v string) *ModifyACLRuleRequest {
	s.AcrId = &v
	return s
}

func (s *ModifyACLRuleRequest) SetDescription(v string) *ModifyACLRuleRequest {
	s.Description = &v
	return s
}

func (s *ModifyACLRuleRequest) SetDestCidr(v string) *ModifyACLRuleRequest {
	s.DestCidr = &v
	return s
}

func (s *ModifyACLRuleRequest) SetDestPortRange(v string) *ModifyACLRuleRequest {
	s.DestPortRange = &v
	return s
}

func (s *ModifyACLRuleRequest) SetDirection(v string) *ModifyACLRuleRequest {
	s.Direction = &v
	return s
}

func (s *ModifyACLRuleRequest) SetDpiGroupIds(v []*string) *ModifyACLRuleRequest {
	s.DpiGroupIds = v
	return s
}

func (s *ModifyACLRuleRequest) SetDpiSignatureIds(v []*string) *ModifyACLRuleRequest {
	s.DpiSignatureIds = v
	return s
}

func (s *ModifyACLRuleRequest) SetIpProtocol(v string) *ModifyACLRuleRequest {
	s.IpProtocol = &v
	return s
}

func (s *ModifyACLRuleRequest) SetName(v string) *ModifyACLRuleRequest {
	s.Name = &v
	return s
}

func (s *ModifyACLRuleRequest) SetOwnerAccount(v string) *ModifyACLRuleRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyACLRuleRequest) SetOwnerId(v int64) *ModifyACLRuleRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyACLRuleRequest) SetPolicy(v string) *ModifyACLRuleRequest {
	s.Policy = &v
	return s
}

func (s *ModifyACLRuleRequest) SetPriority(v int32) *ModifyACLRuleRequest {
	s.Priority = &v
	return s
}

func (s *ModifyACLRuleRequest) SetRegionId(v string) *ModifyACLRuleRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyACLRuleRequest) SetResourceOwnerAccount(v string) *ModifyACLRuleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyACLRuleRequest) SetResourceOwnerId(v int64) *ModifyACLRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyACLRuleRequest) SetSourceCidr(v string) *ModifyACLRuleRequest {
	s.SourceCidr = &v
	return s
}

func (s *ModifyACLRuleRequest) SetSourcePortRange(v string) *ModifyACLRuleRequest {
	s.SourcePortRange = &v
	return s
}

func (s *ModifyACLRuleRequest) SetType(v string) *ModifyACLRuleRequest {
	s.Type = &v
	return s
}

type ModifyACLRuleResponseBody struct {
	AclId           *string                                   `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AcrId           *string                                   `json:"AcrId,omitempty" xml:"AcrId,omitempty"`
	Description     *string                                   `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidr        *string                                   `json:"DestCidr,omitempty" xml:"DestCidr,omitempty"`
	DestPortRange   *string                                   `json:"DestPortRange,omitempty" xml:"DestPortRange,omitempty"`
	Direction       *string                                   `json:"Direction,omitempty" xml:"Direction,omitempty"`
	DpiGroupIds     *ModifyACLRuleResponseBodyDpiGroupIds     `json:"DpiGroupIds,omitempty" xml:"DpiGroupIds,omitempty" type:"Struct"`
	DpiSignatureIds *ModifyACLRuleResponseBodyDpiSignatureIds `json:"DpiSignatureIds,omitempty" xml:"DpiSignatureIds,omitempty" type:"Struct"`
	GmtCreate       *int64                                    `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	IpProtocol      *string                                   `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Name            *string                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	Policy          *string                                   `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Priority        *int32                                    `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RequestId       *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SourceCidr      *string                                   `json:"SourceCidr,omitempty" xml:"SourceCidr,omitempty"`
	SourcePortRange *string                                   `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
}

func (s ModifyACLRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyACLRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyACLRuleResponseBody) SetAclId(v string) *ModifyACLRuleResponseBody {
	s.AclId = &v
	return s
}

func (s *ModifyACLRuleResponseBody) SetAcrId(v string) *ModifyACLRuleResponseBody {
	s.AcrId = &v
	return s
}

func (s *ModifyACLRuleResponseBody) SetDescription(v string) *ModifyACLRuleResponseBody {
	s.Description = &v
	return s
}

func (s *ModifyACLRuleResponseBody) SetDestCidr(v string) *ModifyACLRuleResponseBody {
	s.DestCidr = &v
	return s
}

func (s *ModifyACLRuleResponseBody) SetDestPortRange(v string) *ModifyACLRuleResponseBody {
	s.DestPortRange = &v
	return s
}

func (s *ModifyACLRuleResponseBody) SetDirection(v string) *ModifyACLRuleResponseBody {
	s.Direction = &v
	return s
}

func (s *ModifyACLRuleResponseBody) SetDpiGroupIds(v *ModifyACLRuleResponseBodyDpiGroupIds) *ModifyACLRuleResponseBody {
	s.DpiGroupIds = v
	return s
}

func (s *ModifyACLRuleResponseBody) SetDpiSignatureIds(v *ModifyACLRuleResponseBodyDpiSignatureIds) *ModifyACLRuleResponseBody {
	s.DpiSignatureIds = v
	return s
}

func (s *ModifyACLRuleResponseBody) SetGmtCreate(v int64) *ModifyACLRuleResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *ModifyACLRuleResponseBody) SetIpProtocol(v string) *ModifyACLRuleResponseBody {
	s.IpProtocol = &v
	return s
}

func (s *ModifyACLRuleResponseBody) SetName(v string) *ModifyACLRuleResponseBody {
	s.Name = &v
	return s
}

func (s *ModifyACLRuleResponseBody) SetPolicy(v string) *ModifyACLRuleResponseBody {
	s.Policy = &v
	return s
}

func (s *ModifyACLRuleResponseBody) SetPriority(v int32) *ModifyACLRuleResponseBody {
	s.Priority = &v
	return s
}

func (s *ModifyACLRuleResponseBody) SetRequestId(v string) *ModifyACLRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyACLRuleResponseBody) SetSourceCidr(v string) *ModifyACLRuleResponseBody {
	s.SourceCidr = &v
	return s
}

func (s *ModifyACLRuleResponseBody) SetSourcePortRange(v string) *ModifyACLRuleResponseBody {
	s.SourcePortRange = &v
	return s
}

type ModifyACLRuleResponseBodyDpiGroupIds struct {
	DpiGroupId []*string `json:"DpiGroupId,omitempty" xml:"DpiGroupId,omitempty" type:"Repeated"`
}

func (s ModifyACLRuleResponseBodyDpiGroupIds) String() string {
	return tea.Prettify(s)
}

func (s ModifyACLRuleResponseBodyDpiGroupIds) GoString() string {
	return s.String()
}

func (s *ModifyACLRuleResponseBodyDpiGroupIds) SetDpiGroupId(v []*string) *ModifyACLRuleResponseBodyDpiGroupIds {
	s.DpiGroupId = v
	return s
}

type ModifyACLRuleResponseBodyDpiSignatureIds struct {
	DpiSignatureId []*string `json:"DpiSignatureId,omitempty" xml:"DpiSignatureId,omitempty" type:"Repeated"`
}

func (s ModifyACLRuleResponseBodyDpiSignatureIds) String() string {
	return tea.Prettify(s)
}

func (s ModifyACLRuleResponseBodyDpiSignatureIds) GoString() string {
	return s.String()
}

func (s *ModifyACLRuleResponseBodyDpiSignatureIds) SetDpiSignatureId(v []*string) *ModifyACLRuleResponseBodyDpiSignatureIds {
	s.DpiSignatureId = v
	return s
}

type ModifyACLRuleResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyACLRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyACLRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyACLRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifyACLRuleResponse) SetHeaders(v map[string]*string) *ModifyACLRuleResponse {
	s.Headers = v
	return s
}

func (s *ModifyACLRuleResponse) SetStatusCode(v int32) *ModifyACLRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyACLRuleResponse) SetBody(v *ModifyACLRuleResponseBody) *ModifyACLRuleResponse {
	s.Body = v
	return s
}

type ModifyClientUserDNSRequest struct {
	AppDNS               []*string `json:"AppDNS,omitempty" xml:"AppDNS,omitempty" type:"Repeated"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RecoveredDNS         []*string `json:"RecoveredDNS,omitempty" xml:"RecoveredDNS,omitempty" type:"Repeated"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string   `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s ModifyClientUserDNSRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClientUserDNSRequest) GoString() string {
	return s.String()
}

func (s *ModifyClientUserDNSRequest) SetAppDNS(v []*string) *ModifyClientUserDNSRequest {
	s.AppDNS = v
	return s
}

func (s *ModifyClientUserDNSRequest) SetOwnerAccount(v string) *ModifyClientUserDNSRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyClientUserDNSRequest) SetOwnerId(v int64) *ModifyClientUserDNSRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyClientUserDNSRequest) SetRecoveredDNS(v []*string) *ModifyClientUserDNSRequest {
	s.RecoveredDNS = v
	return s
}

func (s *ModifyClientUserDNSRequest) SetRegionId(v string) *ModifyClientUserDNSRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyClientUserDNSRequest) SetResourceOwnerAccount(v string) *ModifyClientUserDNSRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyClientUserDNSRequest) SetResourceOwnerId(v int64) *ModifyClientUserDNSRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyClientUserDNSRequest) SetSmartAGId(v string) *ModifyClientUserDNSRequest {
	s.SmartAGId = &v
	return s
}

type ModifyClientUserDNSResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClientUserDNSResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClientUserDNSResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClientUserDNSResponseBody) SetRequestId(v string) *ModifyClientUserDNSResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClientUserDNSResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyClientUserDNSResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyClientUserDNSResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClientUserDNSResponse) GoString() string {
	return s.String()
}

func (s *ModifyClientUserDNSResponse) SetHeaders(v map[string]*string) *ModifyClientUserDNSResponse {
	s.Headers = v
	return s
}

func (s *ModifyClientUserDNSResponse) SetStatusCode(v int32) *ModifyClientUserDNSResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyClientUserDNSResponse) SetBody(v *ModifyClientUserDNSResponseBody) *ModifyClientUserDNSResponse {
	s.Body = v
	return s
}

type ModifyCloudConnectNetworkRequest struct {
	CcnId                *string `json:"CcnId,omitempty" xml:"CcnId,omitempty"`
	CidrBlock            *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InterworkingStatus   *string `json:"InterworkingStatus,omitempty" xml:"InterworkingStatus,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyCloudConnectNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCloudConnectNetworkRequest) GoString() string {
	return s.String()
}

func (s *ModifyCloudConnectNetworkRequest) SetCcnId(v string) *ModifyCloudConnectNetworkRequest {
	s.CcnId = &v
	return s
}

func (s *ModifyCloudConnectNetworkRequest) SetCidrBlock(v string) *ModifyCloudConnectNetworkRequest {
	s.CidrBlock = &v
	return s
}

func (s *ModifyCloudConnectNetworkRequest) SetDescription(v string) *ModifyCloudConnectNetworkRequest {
	s.Description = &v
	return s
}

func (s *ModifyCloudConnectNetworkRequest) SetInterworkingStatus(v string) *ModifyCloudConnectNetworkRequest {
	s.InterworkingStatus = &v
	return s
}

func (s *ModifyCloudConnectNetworkRequest) SetName(v string) *ModifyCloudConnectNetworkRequest {
	s.Name = &v
	return s
}

func (s *ModifyCloudConnectNetworkRequest) SetOwnerAccount(v string) *ModifyCloudConnectNetworkRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyCloudConnectNetworkRequest) SetOwnerId(v int64) *ModifyCloudConnectNetworkRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCloudConnectNetworkRequest) SetRegionId(v string) *ModifyCloudConnectNetworkRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyCloudConnectNetworkRequest) SetResourceOwnerAccount(v string) *ModifyCloudConnectNetworkRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyCloudConnectNetworkRequest) SetResourceOwnerId(v int64) *ModifyCloudConnectNetworkRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyCloudConnectNetworkResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyCloudConnectNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCloudConnectNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCloudConnectNetworkResponseBody) SetRequestId(v string) *ModifyCloudConnectNetworkResponseBody {
	s.RequestId = &v
	return s
}

type ModifyCloudConnectNetworkResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyCloudConnectNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCloudConnectNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCloudConnectNetworkResponse) GoString() string {
	return s.String()
}

func (s *ModifyCloudConnectNetworkResponse) SetHeaders(v map[string]*string) *ModifyCloudConnectNetworkResponse {
	s.Headers = v
	return s
}

func (s *ModifyCloudConnectNetworkResponse) SetStatusCode(v int32) *ModifyCloudConnectNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCloudConnectNetworkResponse) SetBody(v *ModifyCloudConnectNetworkResponseBody) *ModifyCloudConnectNetworkResponse {
	s.Body = v
	return s
}

type ModifyDeviceAutoUpgradePolicyRequest struct {
	CronExpression       *string `json:"CronExpression,omitempty" xml:"CronExpression,omitempty"`
	Duration             *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SerialNumber         *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	TimeZone             *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
	UpgradeType          *string `json:"UpgradeType,omitempty" xml:"UpgradeType,omitempty"`
	VersionType          *string `json:"VersionType,omitempty" xml:"VersionType,omitempty"`
}

func (s ModifyDeviceAutoUpgradePolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceAutoUpgradePolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyDeviceAutoUpgradePolicyRequest) SetCronExpression(v string) *ModifyDeviceAutoUpgradePolicyRequest {
	s.CronExpression = &v
	return s
}

func (s *ModifyDeviceAutoUpgradePolicyRequest) SetDuration(v int32) *ModifyDeviceAutoUpgradePolicyRequest {
	s.Duration = &v
	return s
}

func (s *ModifyDeviceAutoUpgradePolicyRequest) SetOwnerAccount(v string) *ModifyDeviceAutoUpgradePolicyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDeviceAutoUpgradePolicyRequest) SetOwnerId(v int64) *ModifyDeviceAutoUpgradePolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDeviceAutoUpgradePolicyRequest) SetRegionId(v string) *ModifyDeviceAutoUpgradePolicyRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDeviceAutoUpgradePolicyRequest) SetResourceOwnerAccount(v string) *ModifyDeviceAutoUpgradePolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDeviceAutoUpgradePolicyRequest) SetResourceOwnerId(v int64) *ModifyDeviceAutoUpgradePolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDeviceAutoUpgradePolicyRequest) SetSerialNumber(v string) *ModifyDeviceAutoUpgradePolicyRequest {
	s.SerialNumber = &v
	return s
}

func (s *ModifyDeviceAutoUpgradePolicyRequest) SetSmartAGId(v string) *ModifyDeviceAutoUpgradePolicyRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifyDeviceAutoUpgradePolicyRequest) SetTimeZone(v string) *ModifyDeviceAutoUpgradePolicyRequest {
	s.TimeZone = &v
	return s
}

func (s *ModifyDeviceAutoUpgradePolicyRequest) SetUpgradeType(v string) *ModifyDeviceAutoUpgradePolicyRequest {
	s.UpgradeType = &v
	return s
}

func (s *ModifyDeviceAutoUpgradePolicyRequest) SetVersionType(v string) *ModifyDeviceAutoUpgradePolicyRequest {
	s.VersionType = &v
	return s
}

type ModifyDeviceAutoUpgradePolicyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDeviceAutoUpgradePolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceAutoUpgradePolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDeviceAutoUpgradePolicyResponseBody) SetRequestId(v string) *ModifyDeviceAutoUpgradePolicyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDeviceAutoUpgradePolicyResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDeviceAutoUpgradePolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDeviceAutoUpgradePolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDeviceAutoUpgradePolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyDeviceAutoUpgradePolicyResponse) SetHeaders(v map[string]*string) *ModifyDeviceAutoUpgradePolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyDeviceAutoUpgradePolicyResponse) SetStatusCode(v int32) *ModifyDeviceAutoUpgradePolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDeviceAutoUpgradePolicyResponse) SetBody(v *ModifyDeviceAutoUpgradePolicyResponseBody) *ModifyDeviceAutoUpgradePolicyResponse {
	s.Body = v
	return s
}

type ModifyFlowLogAttributeRequest struct {
	ActiveAging          *int32  `json:"ActiveAging,omitempty" xml:"ActiveAging,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	FlowLogId            *string `json:"FlowLogId,omitempty" xml:"FlowLogId,omitempty"`
	InactiveAging        *int32  `json:"InactiveAging,omitempty" xml:"InactiveAging,omitempty"`
	LogstoreName         *string `json:"LogstoreName,omitempty" xml:"LogstoreName,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NetflowServerIp      *string `json:"NetflowServerIp,omitempty" xml:"NetflowServerIp,omitempty"`
	NetflowServerPort    *int32  `json:"NetflowServerPort,omitempty" xml:"NetflowServerPort,omitempty"`
	NetflowVersion       *string `json:"NetflowVersion,omitempty" xml:"NetflowVersion,omitempty"`
	OutputType           *string `json:"OutputType,omitempty" xml:"OutputType,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProjectName          *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SlsRegionId          *string `json:"SlsRegionId,omitempty" xml:"SlsRegionId,omitempty"`
}

func (s ModifyFlowLogAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowLogAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyFlowLogAttributeRequest) SetActiveAging(v int32) *ModifyFlowLogAttributeRequest {
	s.ActiveAging = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetDescription(v string) *ModifyFlowLogAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetFlowLogId(v string) *ModifyFlowLogAttributeRequest {
	s.FlowLogId = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetInactiveAging(v int32) *ModifyFlowLogAttributeRequest {
	s.InactiveAging = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetLogstoreName(v string) *ModifyFlowLogAttributeRequest {
	s.LogstoreName = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetName(v string) *ModifyFlowLogAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetNetflowServerIp(v string) *ModifyFlowLogAttributeRequest {
	s.NetflowServerIp = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetNetflowServerPort(v int32) *ModifyFlowLogAttributeRequest {
	s.NetflowServerPort = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetNetflowVersion(v string) *ModifyFlowLogAttributeRequest {
	s.NetflowVersion = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetOutputType(v string) *ModifyFlowLogAttributeRequest {
	s.OutputType = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetOwnerAccount(v string) *ModifyFlowLogAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetOwnerId(v int64) *ModifyFlowLogAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetProjectName(v string) *ModifyFlowLogAttributeRequest {
	s.ProjectName = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetRegionId(v string) *ModifyFlowLogAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetResourceOwnerAccount(v string) *ModifyFlowLogAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetResourceOwnerId(v int64) *ModifyFlowLogAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyFlowLogAttributeRequest) SetSlsRegionId(v string) *ModifyFlowLogAttributeRequest {
	s.SlsRegionId = &v
	return s
}

type ModifyFlowLogAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyFlowLogAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowLogAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFlowLogAttributeResponseBody) SetRequestId(v string) *ModifyFlowLogAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyFlowLogAttributeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyFlowLogAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyFlowLogAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowLogAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyFlowLogAttributeResponse) SetHeaders(v map[string]*string) *ModifyFlowLogAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyFlowLogAttributeResponse) SetStatusCode(v int32) *ModifyFlowLogAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyFlowLogAttributeResponse) SetBody(v *ModifyFlowLogAttributeResponseBody) *ModifyFlowLogAttributeResponse {
	s.Body = v
	return s
}

type ModifyHealthCheckRequest struct {
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DstIpAddr            *string `json:"DstIpAddr,omitempty" xml:"DstIpAddr,omitempty"`
	DstPort              *int32  `json:"DstPort,omitempty" xml:"DstPort,omitempty"`
	FailCountThreshold   *int32  `json:"FailCountThreshold,omitempty" xml:"FailCountThreshold,omitempty"`
	HcInstanceId         *string `json:"HcInstanceId,omitempty" xml:"HcInstanceId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProbeCount           *int32  `json:"ProbeCount,omitempty" xml:"ProbeCount,omitempty"`
	ProbeInterval        *int32  `json:"ProbeInterval,omitempty" xml:"ProbeInterval,omitempty"`
	ProbeTimeout         *int32  `json:"ProbeTimeout,omitempty" xml:"ProbeTimeout,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RttFailThreshold     *int32  `json:"RttFailThreshold,omitempty" xml:"RttFailThreshold,omitempty"`
	RttThreshold         *int32  `json:"RttThreshold,omitempty" xml:"RttThreshold,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SrcIpAddr            *string `json:"SrcIpAddr,omitempty" xml:"SrcIpAddr,omitempty"`
	SrcPort              *int32  `json:"SrcPort,omitempty" xml:"SrcPort,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyHealthCheckRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHealthCheckRequest) GoString() string {
	return s.String()
}

func (s *ModifyHealthCheckRequest) SetDescription(v string) *ModifyHealthCheckRequest {
	s.Description = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetDstIpAddr(v string) *ModifyHealthCheckRequest {
	s.DstIpAddr = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetDstPort(v int32) *ModifyHealthCheckRequest {
	s.DstPort = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetFailCountThreshold(v int32) *ModifyHealthCheckRequest {
	s.FailCountThreshold = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetHcInstanceId(v string) *ModifyHealthCheckRequest {
	s.HcInstanceId = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetName(v string) *ModifyHealthCheckRequest {
	s.Name = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetOwnerAccount(v string) *ModifyHealthCheckRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetOwnerId(v int64) *ModifyHealthCheckRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetProbeCount(v int32) *ModifyHealthCheckRequest {
	s.ProbeCount = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetProbeInterval(v int32) *ModifyHealthCheckRequest {
	s.ProbeInterval = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetProbeTimeout(v int32) *ModifyHealthCheckRequest {
	s.ProbeTimeout = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetRegionId(v string) *ModifyHealthCheckRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetResourceOwnerAccount(v string) *ModifyHealthCheckRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetResourceOwnerId(v int64) *ModifyHealthCheckRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetRttFailThreshold(v int32) *ModifyHealthCheckRequest {
	s.RttFailThreshold = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetRttThreshold(v int32) *ModifyHealthCheckRequest {
	s.RttThreshold = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetSmartAGId(v string) *ModifyHealthCheckRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetSrcIpAddr(v string) *ModifyHealthCheckRequest {
	s.SrcIpAddr = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetSrcPort(v int32) *ModifyHealthCheckRequest {
	s.SrcPort = &v
	return s
}

func (s *ModifyHealthCheckRequest) SetType(v string) *ModifyHealthCheckRequest {
	s.Type = &v
	return s
}

type ModifyHealthCheckResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyHealthCheckResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHealthCheckResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHealthCheckResponseBody) SetRequestId(v string) *ModifyHealthCheckResponseBody {
	s.RequestId = &v
	return s
}

type ModifyHealthCheckResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyHealthCheckResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyHealthCheckResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHealthCheckResponse) GoString() string {
	return s.String()
}

func (s *ModifyHealthCheckResponse) SetHeaders(v map[string]*string) *ModifyHealthCheckResponse {
	s.Headers = v
	return s
}

func (s *ModifyHealthCheckResponse) SetStatusCode(v int32) *ModifyHealthCheckResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHealthCheckResponse) SetBody(v *ModifyHealthCheckResponseBody) *ModifyHealthCheckResponse {
	s.Body = v
	return s
}

type ModifyQosRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	QosDescription       *string `json:"QosDescription,omitempty" xml:"QosDescription,omitempty"`
	QosId                *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	QosName              *string `json:"QosName,omitempty" xml:"QosName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyQosRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyQosRequest) GoString() string {
	return s.String()
}

func (s *ModifyQosRequest) SetOwnerAccount(v string) *ModifyQosRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyQosRequest) SetOwnerId(v int64) *ModifyQosRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyQosRequest) SetQosDescription(v string) *ModifyQosRequest {
	s.QosDescription = &v
	return s
}

func (s *ModifyQosRequest) SetQosId(v string) *ModifyQosRequest {
	s.QosId = &v
	return s
}

func (s *ModifyQosRequest) SetQosName(v string) *ModifyQosRequest {
	s.QosName = &v
	return s
}

func (s *ModifyQosRequest) SetRegionId(v string) *ModifyQosRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyQosRequest) SetResourceOwnerAccount(v string) *ModifyQosRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyQosRequest) SetResourceOwnerId(v int64) *ModifyQosRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyQosResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyQosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyQosResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyQosResponseBody) SetRequestId(v string) *ModifyQosResponseBody {
	s.RequestId = &v
	return s
}

type ModifyQosResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyQosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyQosResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyQosResponse) GoString() string {
	return s.String()
}

func (s *ModifyQosResponse) SetHeaders(v map[string]*string) *ModifyQosResponse {
	s.Headers = v
	return s
}

func (s *ModifyQosResponse) SetStatusCode(v int32) *ModifyQosResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyQosResponse) SetBody(v *ModifyQosResponseBody) *ModifyQosResponse {
	s.Body = v
	return s
}

type ModifyQosCarRequest struct {
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	LimitType            *string `json:"LimitType,omitempty" xml:"LimitType,omitempty"`
	MaxBandwidthAbs      *int32  `json:"MaxBandwidthAbs,omitempty" xml:"MaxBandwidthAbs,omitempty"`
	MaxBandwidthPercent  *int32  `json:"MaxBandwidthPercent,omitempty" xml:"MaxBandwidthPercent,omitempty"`
	MinBandwidthAbs      *int32  `json:"MinBandwidthAbs,omitempty" xml:"MinBandwidthAbs,omitempty"`
	MinBandwidthPercent  *int32  `json:"MinBandwidthPercent,omitempty" xml:"MinBandwidthPercent,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PercentSourceType    *string `json:"PercentSourceType,omitempty" xml:"PercentSourceType,omitempty"`
	Priority             *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	QosCarId             *string `json:"QosCarId,omitempty" xml:"QosCarId,omitempty"`
	QosId                *string `json:"QosId,omitempty" xml:"QosId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyQosCarRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyQosCarRequest) GoString() string {
	return s.String()
}

func (s *ModifyQosCarRequest) SetDescription(v string) *ModifyQosCarRequest {
	s.Description = &v
	return s
}

func (s *ModifyQosCarRequest) SetLimitType(v string) *ModifyQosCarRequest {
	s.LimitType = &v
	return s
}

func (s *ModifyQosCarRequest) SetMaxBandwidthAbs(v int32) *ModifyQosCarRequest {
	s.MaxBandwidthAbs = &v
	return s
}

func (s *ModifyQosCarRequest) SetMaxBandwidthPercent(v int32) *ModifyQosCarRequest {
	s.MaxBandwidthPercent = &v
	return s
}

func (s *ModifyQosCarRequest) SetMinBandwidthAbs(v int32) *ModifyQosCarRequest {
	s.MinBandwidthAbs = &v
	return s
}

func (s *ModifyQosCarRequest) SetMinBandwidthPercent(v int32) *ModifyQosCarRequest {
	s.MinBandwidthPercent = &v
	return s
}

func (s *ModifyQosCarRequest) SetName(v string) *ModifyQosCarRequest {
	s.Name = &v
	return s
}

func (s *ModifyQosCarRequest) SetOwnerAccount(v string) *ModifyQosCarRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyQosCarRequest) SetOwnerId(v int64) *ModifyQosCarRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyQosCarRequest) SetPercentSourceType(v string) *ModifyQosCarRequest {
	s.PercentSourceType = &v
	return s
}

func (s *ModifyQosCarRequest) SetPriority(v int32) *ModifyQosCarRequest {
	s.Priority = &v
	return s
}

func (s *ModifyQosCarRequest) SetQosCarId(v string) *ModifyQosCarRequest {
	s.QosCarId = &v
	return s
}

func (s *ModifyQosCarRequest) SetQosId(v string) *ModifyQosCarRequest {
	s.QosId = &v
	return s
}

func (s *ModifyQosCarRequest) SetRegionId(v string) *ModifyQosCarRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyQosCarRequest) SetResourceOwnerAccount(v string) *ModifyQosCarRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyQosCarRequest) SetResourceOwnerId(v int64) *ModifyQosCarRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyQosCarResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyQosCarResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyQosCarResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyQosCarResponseBody) SetRequestId(v string) *ModifyQosCarResponseBody {
	s.RequestId = &v
	return s
}

type ModifyQosCarResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyQosCarResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyQosCarResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyQosCarResponse) GoString() string {
	return s.String()
}

func (s *ModifyQosCarResponse) SetHeaders(v map[string]*string) *ModifyQosCarResponse {
	s.Headers = v
	return s
}

func (s *ModifyQosCarResponse) SetStatusCode(v int32) *ModifyQosCarResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyQosCarResponse) SetBody(v *ModifyQosCarResponseBody) *ModifyQosCarResponse {
	s.Body = v
	return s
}

type ModifyQosPolicyRequest struct {
	Description          *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidr             *string   `json:"DestCidr,omitempty" xml:"DestCidr,omitempty"`
	DestPortRange        *string   `json:"DestPortRange,omitempty" xml:"DestPortRange,omitempty"`
	DpiGroupIds          []*string `json:"DpiGroupIds,omitempty" xml:"DpiGroupIds,omitempty" type:"Repeated"`
	DpiSignatureIds      []*string `json:"DpiSignatureIds,omitempty" xml:"DpiSignatureIds,omitempty" type:"Repeated"`
	EndTime              *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	IpProtocol           *string   `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Name                 *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Priority             *int32    `json:"Priority,omitempty" xml:"Priority,omitempty"`
	QosId                *string   `json:"QosId,omitempty" xml:"QosId,omitempty"`
	QosPolicyId          *string   `json:"QosPolicyId,omitempty" xml:"QosPolicyId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SourceCidr           *string   `json:"SourceCidr,omitempty" xml:"SourceCidr,omitempty"`
	SourcePortRange      *string   `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	StartTime            *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ModifyQosPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyQosPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyQosPolicyRequest) SetDescription(v string) *ModifyQosPolicyRequest {
	s.Description = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetDestCidr(v string) *ModifyQosPolicyRequest {
	s.DestCidr = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetDestPortRange(v string) *ModifyQosPolicyRequest {
	s.DestPortRange = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetDpiGroupIds(v []*string) *ModifyQosPolicyRequest {
	s.DpiGroupIds = v
	return s
}

func (s *ModifyQosPolicyRequest) SetDpiSignatureIds(v []*string) *ModifyQosPolicyRequest {
	s.DpiSignatureIds = v
	return s
}

func (s *ModifyQosPolicyRequest) SetEndTime(v string) *ModifyQosPolicyRequest {
	s.EndTime = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetIpProtocol(v string) *ModifyQosPolicyRequest {
	s.IpProtocol = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetName(v string) *ModifyQosPolicyRequest {
	s.Name = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetOwnerAccount(v string) *ModifyQosPolicyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetOwnerId(v int64) *ModifyQosPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetPriority(v int32) *ModifyQosPolicyRequest {
	s.Priority = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetQosId(v string) *ModifyQosPolicyRequest {
	s.QosId = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetQosPolicyId(v string) *ModifyQosPolicyRequest {
	s.QosPolicyId = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetRegionId(v string) *ModifyQosPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetResourceOwnerAccount(v string) *ModifyQosPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetResourceOwnerId(v int64) *ModifyQosPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetSourceCidr(v string) *ModifyQosPolicyRequest {
	s.SourceCidr = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetSourcePortRange(v string) *ModifyQosPolicyRequest {
	s.SourcePortRange = &v
	return s
}

func (s *ModifyQosPolicyRequest) SetStartTime(v string) *ModifyQosPolicyRequest {
	s.StartTime = &v
	return s
}

type ModifyQosPolicyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyQosPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyQosPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyQosPolicyResponseBody) SetRequestId(v string) *ModifyQosPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyQosPolicyResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyQosPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyQosPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyQosPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyQosPolicyResponse) SetHeaders(v map[string]*string) *ModifyQosPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyQosPolicyResponse) SetStatusCode(v int32) *ModifyQosPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyQosPolicyResponse) SetBody(v *ModifyQosPolicyResponseBody) *ModifyQosPolicyResponse {
	s.Body = v
	return s
}

type ModifyRouteDistributionStrategyRequest struct {
	DestCidrBlock        *string `json:"DestCidrBlock,omitempty" xml:"DestCidrBlock,omitempty"`
	HcInstanceId         *string `json:"HcInstanceId,omitempty" xml:"HcInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RouteDistribution    *string `json:"RouteDistribution,omitempty" xml:"RouteDistribution,omitempty"`
	RouteSource          *string `json:"RouteSource,omitempty" xml:"RouteSource,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SourceType           *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s ModifyRouteDistributionStrategyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouteDistributionStrategyRequest) GoString() string {
	return s.String()
}

func (s *ModifyRouteDistributionStrategyRequest) SetDestCidrBlock(v string) *ModifyRouteDistributionStrategyRequest {
	s.DestCidrBlock = &v
	return s
}

func (s *ModifyRouteDistributionStrategyRequest) SetHcInstanceId(v string) *ModifyRouteDistributionStrategyRequest {
	s.HcInstanceId = &v
	return s
}

func (s *ModifyRouteDistributionStrategyRequest) SetOwnerAccount(v string) *ModifyRouteDistributionStrategyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyRouteDistributionStrategyRequest) SetOwnerId(v int64) *ModifyRouteDistributionStrategyRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyRouteDistributionStrategyRequest) SetRegionId(v string) *ModifyRouteDistributionStrategyRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyRouteDistributionStrategyRequest) SetResourceOwnerAccount(v string) *ModifyRouteDistributionStrategyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyRouteDistributionStrategyRequest) SetResourceOwnerId(v int64) *ModifyRouteDistributionStrategyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyRouteDistributionStrategyRequest) SetRouteDistribution(v string) *ModifyRouteDistributionStrategyRequest {
	s.RouteDistribution = &v
	return s
}

func (s *ModifyRouteDistributionStrategyRequest) SetRouteSource(v string) *ModifyRouteDistributionStrategyRequest {
	s.RouteSource = &v
	return s
}

func (s *ModifyRouteDistributionStrategyRequest) SetSmartAGId(v string) *ModifyRouteDistributionStrategyRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifyRouteDistributionStrategyRequest) SetSourceType(v string) *ModifyRouteDistributionStrategyRequest {
	s.SourceType = &v
	return s
}

type ModifyRouteDistributionStrategyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyRouteDistributionStrategyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouteDistributionStrategyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyRouteDistributionStrategyResponseBody) SetRequestId(v string) *ModifyRouteDistributionStrategyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyRouteDistributionStrategyResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyRouteDistributionStrategyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyRouteDistributionStrategyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyRouteDistributionStrategyResponse) GoString() string {
	return s.String()
}

func (s *ModifyRouteDistributionStrategyResponse) SetHeaders(v map[string]*string) *ModifyRouteDistributionStrategyResponse {
	s.Headers = v
	return s
}

func (s *ModifyRouteDistributionStrategyResponse) SetStatusCode(v int32) *ModifyRouteDistributionStrategyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyRouteDistributionStrategyResponse) SetBody(v *ModifyRouteDistributionStrategyResponseBody) *ModifyRouteDistributionStrategyResponse {
	s.Body = v
	return s
}

type ModifySAGAdminPasswordRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Password             *string `json:"Password,omitempty" xml:"Password,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s ModifySAGAdminPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySAGAdminPasswordRequest) GoString() string {
	return s.String()
}

func (s *ModifySAGAdminPasswordRequest) SetOwnerAccount(v string) *ModifySAGAdminPasswordRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySAGAdminPasswordRequest) SetOwnerId(v int64) *ModifySAGAdminPasswordRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySAGAdminPasswordRequest) SetPassword(v string) *ModifySAGAdminPasswordRequest {
	s.Password = &v
	return s
}

func (s *ModifySAGAdminPasswordRequest) SetRegionId(v string) *ModifySAGAdminPasswordRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySAGAdminPasswordRequest) SetResourceOwnerAccount(v string) *ModifySAGAdminPasswordRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySAGAdminPasswordRequest) SetResourceOwnerId(v int64) *ModifySAGAdminPasswordRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySAGAdminPasswordRequest) SetSmartAGId(v string) *ModifySAGAdminPasswordRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySAGAdminPasswordRequest) SetSmartAGSn(v string) *ModifySAGAdminPasswordRequest {
	s.SmartAGSn = &v
	return s
}

type ModifySAGAdminPasswordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySAGAdminPasswordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySAGAdminPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySAGAdminPasswordResponseBody) SetRequestId(v string) *ModifySAGAdminPasswordResponseBody {
	s.RequestId = &v
	return s
}

type ModifySAGAdminPasswordResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySAGAdminPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySAGAdminPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySAGAdminPasswordResponse) GoString() string {
	return s.String()
}

func (s *ModifySAGAdminPasswordResponse) SetHeaders(v map[string]*string) *ModifySAGAdminPasswordResponse {
	s.Headers = v
	return s
}

func (s *ModifySAGAdminPasswordResponse) SetStatusCode(v int32) *ModifySAGAdminPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySAGAdminPasswordResponse) SetBody(v *ModifySAGAdminPasswordResponseBody) *ModifySAGAdminPasswordResponse {
	s.Body = v
	return s
}

type ModifySagExpressConnectInterfaceRequest struct {
	IP                   *string `json:"IP,omitempty" xml:"IP,omitempty"`
	Mask                 *string `json:"Mask,omitempty" xml:"Mask,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PortName             *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
	Vlan                 *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s ModifySagExpressConnectInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagExpressConnectInterfaceRequest) GoString() string {
	return s.String()
}

func (s *ModifySagExpressConnectInterfaceRequest) SetIP(v string) *ModifySagExpressConnectInterfaceRequest {
	s.IP = &v
	return s
}

func (s *ModifySagExpressConnectInterfaceRequest) SetMask(v string) *ModifySagExpressConnectInterfaceRequest {
	s.Mask = &v
	return s
}

func (s *ModifySagExpressConnectInterfaceRequest) SetOwnerAccount(v string) *ModifySagExpressConnectInterfaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagExpressConnectInterfaceRequest) SetOwnerId(v int64) *ModifySagExpressConnectInterfaceRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagExpressConnectInterfaceRequest) SetPortName(v string) *ModifySagExpressConnectInterfaceRequest {
	s.PortName = &v
	return s
}

func (s *ModifySagExpressConnectInterfaceRequest) SetRegionId(v string) *ModifySagExpressConnectInterfaceRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagExpressConnectInterfaceRequest) SetResourceOwnerAccount(v string) *ModifySagExpressConnectInterfaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagExpressConnectInterfaceRequest) SetResourceOwnerId(v int64) *ModifySagExpressConnectInterfaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagExpressConnectInterfaceRequest) SetSmartAGId(v string) *ModifySagExpressConnectInterfaceRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagExpressConnectInterfaceRequest) SetSmartAGSn(v string) *ModifySagExpressConnectInterfaceRequest {
	s.SmartAGSn = &v
	return s
}

func (s *ModifySagExpressConnectInterfaceRequest) SetVlan(v string) *ModifySagExpressConnectInterfaceRequest {
	s.Vlan = &v
	return s
}

type ModifySagExpressConnectInterfaceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagExpressConnectInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagExpressConnectInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagExpressConnectInterfaceResponseBody) SetRequestId(v string) *ModifySagExpressConnectInterfaceResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagExpressConnectInterfaceResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagExpressConnectInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagExpressConnectInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagExpressConnectInterfaceResponse) GoString() string {
	return s.String()
}

func (s *ModifySagExpressConnectInterfaceResponse) SetHeaders(v map[string]*string) *ModifySagExpressConnectInterfaceResponse {
	s.Headers = v
	return s
}

func (s *ModifySagExpressConnectInterfaceResponse) SetStatusCode(v int32) *ModifySagExpressConnectInterfaceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagExpressConnectInterfaceResponse) SetBody(v *ModifySagExpressConnectInterfaceResponseBody) *ModifySagExpressConnectInterfaceResponse {
	s.Body = v
	return s
}

type ModifySagGlobalRouteProtocolRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RouteProtocol        *string `json:"RouteProtocol,omitempty" xml:"RouteProtocol,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s ModifySagGlobalRouteProtocolRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagGlobalRouteProtocolRequest) GoString() string {
	return s.String()
}

func (s *ModifySagGlobalRouteProtocolRequest) SetOwnerAccount(v string) *ModifySagGlobalRouteProtocolRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagGlobalRouteProtocolRequest) SetOwnerId(v int64) *ModifySagGlobalRouteProtocolRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagGlobalRouteProtocolRequest) SetRegionId(v string) *ModifySagGlobalRouteProtocolRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagGlobalRouteProtocolRequest) SetResourceOwnerAccount(v string) *ModifySagGlobalRouteProtocolRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagGlobalRouteProtocolRequest) SetResourceOwnerId(v int64) *ModifySagGlobalRouteProtocolRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagGlobalRouteProtocolRequest) SetRouteProtocol(v string) *ModifySagGlobalRouteProtocolRequest {
	s.RouteProtocol = &v
	return s
}

func (s *ModifySagGlobalRouteProtocolRequest) SetSmartAGId(v string) *ModifySagGlobalRouteProtocolRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagGlobalRouteProtocolRequest) SetSmartAGSn(v string) *ModifySagGlobalRouteProtocolRequest {
	s.SmartAGSn = &v
	return s
}

type ModifySagGlobalRouteProtocolResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagGlobalRouteProtocolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagGlobalRouteProtocolResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagGlobalRouteProtocolResponseBody) SetRequestId(v string) *ModifySagGlobalRouteProtocolResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagGlobalRouteProtocolResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagGlobalRouteProtocolResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagGlobalRouteProtocolResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagGlobalRouteProtocolResponse) GoString() string {
	return s.String()
}

func (s *ModifySagGlobalRouteProtocolResponse) SetHeaders(v map[string]*string) *ModifySagGlobalRouteProtocolResponse {
	s.Headers = v
	return s
}

func (s *ModifySagGlobalRouteProtocolResponse) SetStatusCode(v int32) *ModifySagGlobalRouteProtocolResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagGlobalRouteProtocolResponse) SetBody(v *ModifySagGlobalRouteProtocolResponseBody) *ModifySagGlobalRouteProtocolResponse {
	s.Body = v
	return s
}

type ModifySagHaRequest struct {
	Mode                 *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PortName             *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
	VirtualIp            *string `json:"VirtualIp,omitempty" xml:"VirtualIp,omitempty"`
}

func (s ModifySagHaRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagHaRequest) GoString() string {
	return s.String()
}

func (s *ModifySagHaRequest) SetMode(v string) *ModifySagHaRequest {
	s.Mode = &v
	return s
}

func (s *ModifySagHaRequest) SetOwnerAccount(v string) *ModifySagHaRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagHaRequest) SetOwnerId(v int64) *ModifySagHaRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagHaRequest) SetPortName(v string) *ModifySagHaRequest {
	s.PortName = &v
	return s
}

func (s *ModifySagHaRequest) SetRegionId(v string) *ModifySagHaRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagHaRequest) SetResourceOwnerAccount(v string) *ModifySagHaRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagHaRequest) SetResourceOwnerId(v int64) *ModifySagHaRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagHaRequest) SetSmartAGId(v string) *ModifySagHaRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagHaRequest) SetSmartAGSn(v string) *ModifySagHaRequest {
	s.SmartAGSn = &v
	return s
}

func (s *ModifySagHaRequest) SetVirtualIp(v string) *ModifySagHaRequest {
	s.VirtualIp = &v
	return s
}

type ModifySagHaResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagHaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagHaResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagHaResponseBody) SetRequestId(v string) *ModifySagHaResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagHaResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagHaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagHaResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagHaResponse) GoString() string {
	return s.String()
}

func (s *ModifySagHaResponse) SetHeaders(v map[string]*string) *ModifySagHaResponse {
	s.Headers = v
	return s
}

func (s *ModifySagHaResponse) SetStatusCode(v int32) *ModifySagHaResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagHaResponse) SetBody(v *ModifySagHaResponseBody) *ModifySagHaResponse {
	s.Body = v
	return s
}

type ModifySagLanRequest struct {
	EndIp                *string `json:"EndIp,omitempty" xml:"EndIp,omitempty"`
	IP                   *string `json:"IP,omitempty" xml:"IP,omitempty"`
	IPType               *string `json:"IPType,omitempty" xml:"IPType,omitempty"`
	Lease                *string `json:"Lease,omitempty" xml:"Lease,omitempty"`
	Mask                 *string `json:"Mask,omitempty" xml:"Mask,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PortName             *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
	StartIp              *string `json:"StartIp,omitempty" xml:"StartIp,omitempty"`
}

func (s ModifySagLanRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagLanRequest) GoString() string {
	return s.String()
}

func (s *ModifySagLanRequest) SetEndIp(v string) *ModifySagLanRequest {
	s.EndIp = &v
	return s
}

func (s *ModifySagLanRequest) SetIP(v string) *ModifySagLanRequest {
	s.IP = &v
	return s
}

func (s *ModifySagLanRequest) SetIPType(v string) *ModifySagLanRequest {
	s.IPType = &v
	return s
}

func (s *ModifySagLanRequest) SetLease(v string) *ModifySagLanRequest {
	s.Lease = &v
	return s
}

func (s *ModifySagLanRequest) SetMask(v string) *ModifySagLanRequest {
	s.Mask = &v
	return s
}

func (s *ModifySagLanRequest) SetOwnerAccount(v string) *ModifySagLanRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagLanRequest) SetOwnerId(v int64) *ModifySagLanRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagLanRequest) SetPortName(v string) *ModifySagLanRequest {
	s.PortName = &v
	return s
}

func (s *ModifySagLanRequest) SetRegionId(v string) *ModifySagLanRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagLanRequest) SetResourceOwnerAccount(v string) *ModifySagLanRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagLanRequest) SetResourceOwnerId(v int64) *ModifySagLanRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagLanRequest) SetSmartAGId(v string) *ModifySagLanRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagLanRequest) SetSmartAGSn(v string) *ModifySagLanRequest {
	s.SmartAGSn = &v
	return s
}

func (s *ModifySagLanRequest) SetStartIp(v string) *ModifySagLanRequest {
	s.StartIp = &v
	return s
}

type ModifySagLanResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagLanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagLanResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagLanResponseBody) SetRequestId(v string) *ModifySagLanResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagLanResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagLanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagLanResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagLanResponse) GoString() string {
	return s.String()
}

func (s *ModifySagLanResponse) SetHeaders(v map[string]*string) *ModifySagLanResponse {
	s.Headers = v
	return s
}

func (s *ModifySagLanResponse) SetStatusCode(v int32) *ModifySagLanResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagLanResponse) SetBody(v *ModifySagLanResponseBody) *ModifySagLanResponse {
	s.Body = v
	return s
}

type ModifySagManagementPortRequest struct {
	Gateway              *string `json:"Gateway,omitempty" xml:"Gateway,omitempty"`
	IP                   *string `json:"IP,omitempty" xml:"IP,omitempty"`
	Mask                 *string `json:"Mask,omitempty" xml:"Mask,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s ModifySagManagementPortRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagManagementPortRequest) GoString() string {
	return s.String()
}

func (s *ModifySagManagementPortRequest) SetGateway(v string) *ModifySagManagementPortRequest {
	s.Gateway = &v
	return s
}

func (s *ModifySagManagementPortRequest) SetIP(v string) *ModifySagManagementPortRequest {
	s.IP = &v
	return s
}

func (s *ModifySagManagementPortRequest) SetMask(v string) *ModifySagManagementPortRequest {
	s.Mask = &v
	return s
}

func (s *ModifySagManagementPortRequest) SetOwnerAccount(v string) *ModifySagManagementPortRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagManagementPortRequest) SetOwnerId(v int64) *ModifySagManagementPortRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagManagementPortRequest) SetRegionId(v string) *ModifySagManagementPortRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagManagementPortRequest) SetResourceOwnerAccount(v string) *ModifySagManagementPortRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagManagementPortRequest) SetResourceOwnerId(v int64) *ModifySagManagementPortRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagManagementPortRequest) SetSmartAGId(v string) *ModifySagManagementPortRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagManagementPortRequest) SetSmartAGSn(v string) *ModifySagManagementPortRequest {
	s.SmartAGSn = &v
	return s
}

type ModifySagManagementPortResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagManagementPortResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagManagementPortResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagManagementPortResponseBody) SetRequestId(v string) *ModifySagManagementPortResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagManagementPortResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagManagementPortResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagManagementPortResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagManagementPortResponse) GoString() string {
	return s.String()
}

func (s *ModifySagManagementPortResponse) SetHeaders(v map[string]*string) *ModifySagManagementPortResponse {
	s.Headers = v
	return s
}

func (s *ModifySagManagementPortResponse) SetStatusCode(v int32) *ModifySagManagementPortResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagManagementPortResponse) SetBody(v *ModifySagManagementPortResponseBody) *ModifySagManagementPortResponse {
	s.Body = v
	return s
}

type ModifySagPortRoleRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PortName             *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Role                 *string `json:"Role,omitempty" xml:"Role,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s ModifySagPortRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagPortRoleRequest) GoString() string {
	return s.String()
}

func (s *ModifySagPortRoleRequest) SetOwnerAccount(v string) *ModifySagPortRoleRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagPortRoleRequest) SetOwnerId(v int64) *ModifySagPortRoleRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagPortRoleRequest) SetPortName(v string) *ModifySagPortRoleRequest {
	s.PortName = &v
	return s
}

func (s *ModifySagPortRoleRequest) SetRegionId(v string) *ModifySagPortRoleRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagPortRoleRequest) SetResourceOwnerAccount(v string) *ModifySagPortRoleRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagPortRoleRequest) SetResourceOwnerId(v int64) *ModifySagPortRoleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagPortRoleRequest) SetRole(v string) *ModifySagPortRoleRequest {
	s.Role = &v
	return s
}

func (s *ModifySagPortRoleRequest) SetSmartAGId(v string) *ModifySagPortRoleRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagPortRoleRequest) SetSmartAGSn(v string) *ModifySagPortRoleRequest {
	s.SmartAGSn = &v
	return s
}

type ModifySagPortRoleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagPortRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagPortRoleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagPortRoleResponseBody) SetRequestId(v string) *ModifySagPortRoleResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagPortRoleResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagPortRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagPortRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagPortRoleResponse) GoString() string {
	return s.String()
}

func (s *ModifySagPortRoleResponse) SetHeaders(v map[string]*string) *ModifySagPortRoleResponse {
	s.Headers = v
	return s
}

func (s *ModifySagPortRoleResponse) SetStatusCode(v int32) *ModifySagPortRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagPortRoleResponse) SetBody(v *ModifySagPortRoleResponseBody) *ModifySagPortRoleResponse {
	s.Body = v
	return s
}

type ModifySagPortRouteProtocolRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PortName             *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RemoteAs             *string `json:"RemoteAs,omitempty" xml:"RemoteAs,omitempty"`
	RemoteIp             *string `json:"RemoteIp,omitempty" xml:"RemoteIp,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RouteProtocol        *string `json:"RouteProtocol,omitempty" xml:"RouteProtocol,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
	Vlan                 *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s ModifySagPortRouteProtocolRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagPortRouteProtocolRequest) GoString() string {
	return s.String()
}

func (s *ModifySagPortRouteProtocolRequest) SetOwnerAccount(v string) *ModifySagPortRouteProtocolRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagPortRouteProtocolRequest) SetOwnerId(v int64) *ModifySagPortRouteProtocolRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagPortRouteProtocolRequest) SetPortName(v string) *ModifySagPortRouteProtocolRequest {
	s.PortName = &v
	return s
}

func (s *ModifySagPortRouteProtocolRequest) SetRegionId(v string) *ModifySagPortRouteProtocolRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagPortRouteProtocolRequest) SetRemoteAs(v string) *ModifySagPortRouteProtocolRequest {
	s.RemoteAs = &v
	return s
}

func (s *ModifySagPortRouteProtocolRequest) SetRemoteIp(v string) *ModifySagPortRouteProtocolRequest {
	s.RemoteIp = &v
	return s
}

func (s *ModifySagPortRouteProtocolRequest) SetResourceOwnerAccount(v string) *ModifySagPortRouteProtocolRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagPortRouteProtocolRequest) SetResourceOwnerId(v int64) *ModifySagPortRouteProtocolRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagPortRouteProtocolRequest) SetRouteProtocol(v string) *ModifySagPortRouteProtocolRequest {
	s.RouteProtocol = &v
	return s
}

func (s *ModifySagPortRouteProtocolRequest) SetSmartAGId(v string) *ModifySagPortRouteProtocolRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagPortRouteProtocolRequest) SetSmartAGSn(v string) *ModifySagPortRouteProtocolRequest {
	s.SmartAGSn = &v
	return s
}

func (s *ModifySagPortRouteProtocolRequest) SetVlan(v string) *ModifySagPortRouteProtocolRequest {
	s.Vlan = &v
	return s
}

type ModifySagPortRouteProtocolResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagPortRouteProtocolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagPortRouteProtocolResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagPortRouteProtocolResponseBody) SetRequestId(v string) *ModifySagPortRouteProtocolResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagPortRouteProtocolResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagPortRouteProtocolResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagPortRouteProtocolResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagPortRouteProtocolResponse) GoString() string {
	return s.String()
}

func (s *ModifySagPortRouteProtocolResponse) SetHeaders(v map[string]*string) *ModifySagPortRouteProtocolResponse {
	s.Headers = v
	return s
}

func (s *ModifySagPortRouteProtocolResponse) SetStatusCode(v int32) *ModifySagPortRouteProtocolResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagPortRouteProtocolResponse) SetBody(v *ModifySagPortRouteProtocolResponseBody) *ModifySagPortRouteProtocolResponse {
	s.Body = v
	return s
}

type ModifySagRemoteAccessRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RemoteAccessIp       *string `json:"RemoteAccessIp,omitempty" xml:"RemoteAccessIp,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SerialNumber         *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s ModifySagRemoteAccessRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagRemoteAccessRequest) GoString() string {
	return s.String()
}

func (s *ModifySagRemoteAccessRequest) SetOwnerAccount(v string) *ModifySagRemoteAccessRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagRemoteAccessRequest) SetOwnerId(v int64) *ModifySagRemoteAccessRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagRemoteAccessRequest) SetRemoteAccessIp(v string) *ModifySagRemoteAccessRequest {
	s.RemoteAccessIp = &v
	return s
}

func (s *ModifySagRemoteAccessRequest) SetResourceOwnerAccount(v string) *ModifySagRemoteAccessRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagRemoteAccessRequest) SetResourceOwnerId(v int64) *ModifySagRemoteAccessRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagRemoteAccessRequest) SetSerialNumber(v string) *ModifySagRemoteAccessRequest {
	s.SerialNumber = &v
	return s
}

func (s *ModifySagRemoteAccessRequest) SetSmartAGId(v string) *ModifySagRemoteAccessRequest {
	s.SmartAGId = &v
	return s
}

type ModifySagRemoteAccessResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RemoteAccessIp *string `json:"RemoteAccessIp,omitempty" xml:"RemoteAccessIp,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SerialNumber   *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifySagRemoteAccessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagRemoteAccessResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagRemoteAccessResponseBody) SetCode(v string) *ModifySagRemoteAccessResponseBody {
	s.Code = &v
	return s
}

func (s *ModifySagRemoteAccessResponseBody) SetMessage(v string) *ModifySagRemoteAccessResponseBody {
	s.Message = &v
	return s
}

func (s *ModifySagRemoteAccessResponseBody) SetRemoteAccessIp(v string) *ModifySagRemoteAccessResponseBody {
	s.RemoteAccessIp = &v
	return s
}

func (s *ModifySagRemoteAccessResponseBody) SetRequestId(v string) *ModifySagRemoteAccessResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySagRemoteAccessResponseBody) SetSerialNumber(v string) *ModifySagRemoteAccessResponseBody {
	s.SerialNumber = &v
	return s
}

func (s *ModifySagRemoteAccessResponseBody) SetSuccess(v bool) *ModifySagRemoteAccessResponseBody {
	s.Success = &v
	return s
}

type ModifySagRemoteAccessResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagRemoteAccessResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagRemoteAccessResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagRemoteAccessResponse) GoString() string {
	return s.String()
}

func (s *ModifySagRemoteAccessResponse) SetHeaders(v map[string]*string) *ModifySagRemoteAccessResponse {
	s.Headers = v
	return s
}

func (s *ModifySagRemoteAccessResponse) SetStatusCode(v int32) *ModifySagRemoteAccessResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagRemoteAccessResponse) SetBody(v *ModifySagRemoteAccessResponseBody) *ModifySagRemoteAccessResponse {
	s.Body = v
	return s
}

type ModifySagRouteProtocolBgpRequest struct {
	HoldTime             *int32  `json:"HoldTime,omitempty" xml:"HoldTime,omitempty"`
	KeepAlive            *int32  `json:"KeepAlive,omitempty" xml:"KeepAlive,omitempty"`
	LocalAs              *int64  `json:"LocalAs,omitempty" xml:"LocalAs,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RouterId             *string `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s ModifySagRouteProtocolBgpRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagRouteProtocolBgpRequest) GoString() string {
	return s.String()
}

func (s *ModifySagRouteProtocolBgpRequest) SetHoldTime(v int32) *ModifySagRouteProtocolBgpRequest {
	s.HoldTime = &v
	return s
}

func (s *ModifySagRouteProtocolBgpRequest) SetKeepAlive(v int32) *ModifySagRouteProtocolBgpRequest {
	s.KeepAlive = &v
	return s
}

func (s *ModifySagRouteProtocolBgpRequest) SetLocalAs(v int64) *ModifySagRouteProtocolBgpRequest {
	s.LocalAs = &v
	return s
}

func (s *ModifySagRouteProtocolBgpRequest) SetOwnerAccount(v string) *ModifySagRouteProtocolBgpRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagRouteProtocolBgpRequest) SetOwnerId(v int64) *ModifySagRouteProtocolBgpRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagRouteProtocolBgpRequest) SetRegionId(v string) *ModifySagRouteProtocolBgpRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagRouteProtocolBgpRequest) SetResourceOwnerAccount(v string) *ModifySagRouteProtocolBgpRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagRouteProtocolBgpRequest) SetResourceOwnerId(v int64) *ModifySagRouteProtocolBgpRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagRouteProtocolBgpRequest) SetRouterId(v string) *ModifySagRouteProtocolBgpRequest {
	s.RouterId = &v
	return s
}

func (s *ModifySagRouteProtocolBgpRequest) SetSmartAGId(v string) *ModifySagRouteProtocolBgpRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagRouteProtocolBgpRequest) SetSmartAGSn(v string) *ModifySagRouteProtocolBgpRequest {
	s.SmartAGSn = &v
	return s
}

type ModifySagRouteProtocolBgpResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagRouteProtocolBgpResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagRouteProtocolBgpResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagRouteProtocolBgpResponseBody) SetRequestId(v string) *ModifySagRouteProtocolBgpResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagRouteProtocolBgpResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagRouteProtocolBgpResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagRouteProtocolBgpResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagRouteProtocolBgpResponse) GoString() string {
	return s.String()
}

func (s *ModifySagRouteProtocolBgpResponse) SetHeaders(v map[string]*string) *ModifySagRouteProtocolBgpResponse {
	s.Headers = v
	return s
}

func (s *ModifySagRouteProtocolBgpResponse) SetStatusCode(v int32) *ModifySagRouteProtocolBgpResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagRouteProtocolBgpResponse) SetBody(v *ModifySagRouteProtocolBgpResponseBody) *ModifySagRouteProtocolBgpResponse {
	s.Body = v
	return s
}

type ModifySagRouteProtocolOspfRequest struct {
	AreaId               *int32  `json:"AreaId,omitempty" xml:"AreaId,omitempty"`
	AuthenticationType   *string `json:"AuthenticationType,omitempty" xml:"AuthenticationType,omitempty"`
	DeadTime             *int32  `json:"DeadTime,omitempty" xml:"DeadTime,omitempty"`
	HelloTime            *int32  `json:"HelloTime,omitempty" xml:"HelloTime,omitempty"`
	Md5Key               *string `json:"Md5Key,omitempty" xml:"Md5Key,omitempty"`
	Md5KeyId             *int32  `json:"Md5KeyId,omitempty" xml:"Md5KeyId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Password             *string `json:"Password,omitempty" xml:"Password,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RouterId             *string `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s ModifySagRouteProtocolOspfRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagRouteProtocolOspfRequest) GoString() string {
	return s.String()
}

func (s *ModifySagRouteProtocolOspfRequest) SetAreaId(v int32) *ModifySagRouteProtocolOspfRequest {
	s.AreaId = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetAuthenticationType(v string) *ModifySagRouteProtocolOspfRequest {
	s.AuthenticationType = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetDeadTime(v int32) *ModifySagRouteProtocolOspfRequest {
	s.DeadTime = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetHelloTime(v int32) *ModifySagRouteProtocolOspfRequest {
	s.HelloTime = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetMd5Key(v string) *ModifySagRouteProtocolOspfRequest {
	s.Md5Key = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetMd5KeyId(v int32) *ModifySagRouteProtocolOspfRequest {
	s.Md5KeyId = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetOwnerAccount(v string) *ModifySagRouteProtocolOspfRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetOwnerId(v int64) *ModifySagRouteProtocolOspfRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetPassword(v string) *ModifySagRouteProtocolOspfRequest {
	s.Password = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetRegionId(v string) *ModifySagRouteProtocolOspfRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetResourceOwnerAccount(v string) *ModifySagRouteProtocolOspfRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetResourceOwnerId(v int64) *ModifySagRouteProtocolOspfRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetRouterId(v string) *ModifySagRouteProtocolOspfRequest {
	s.RouterId = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetSmartAGId(v string) *ModifySagRouteProtocolOspfRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagRouteProtocolOspfRequest) SetSmartAGSn(v string) *ModifySagRouteProtocolOspfRequest {
	s.SmartAGSn = &v
	return s
}

type ModifySagRouteProtocolOspfResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagRouteProtocolOspfResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagRouteProtocolOspfResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagRouteProtocolOspfResponseBody) SetRequestId(v string) *ModifySagRouteProtocolOspfResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagRouteProtocolOspfResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagRouteProtocolOspfResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagRouteProtocolOspfResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagRouteProtocolOspfResponse) GoString() string {
	return s.String()
}

func (s *ModifySagRouteProtocolOspfResponse) SetHeaders(v map[string]*string) *ModifySagRouteProtocolOspfResponse {
	s.Headers = v
	return s
}

func (s *ModifySagRouteProtocolOspfResponse) SetStatusCode(v int32) *ModifySagRouteProtocolOspfResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagRouteProtocolOspfResponse) SetBody(v *ModifySagRouteProtocolOspfResponseBody) *ModifySagRouteProtocolOspfResponse {
	s.Body = v
	return s
}

type ModifySagStaticRouteRequest struct {
	DestinationCidr      *string `json:"DestinationCidr,omitempty" xml:"DestinationCidr,omitempty"`
	NextHop              *string `json:"NextHop,omitempty" xml:"NextHop,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PortName             *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
	Vlan                 *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s ModifySagStaticRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagStaticRouteRequest) GoString() string {
	return s.String()
}

func (s *ModifySagStaticRouteRequest) SetDestinationCidr(v string) *ModifySagStaticRouteRequest {
	s.DestinationCidr = &v
	return s
}

func (s *ModifySagStaticRouteRequest) SetNextHop(v string) *ModifySagStaticRouteRequest {
	s.NextHop = &v
	return s
}

func (s *ModifySagStaticRouteRequest) SetOwnerAccount(v string) *ModifySagStaticRouteRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagStaticRouteRequest) SetOwnerId(v int64) *ModifySagStaticRouteRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagStaticRouteRequest) SetPortName(v string) *ModifySagStaticRouteRequest {
	s.PortName = &v
	return s
}

func (s *ModifySagStaticRouteRequest) SetRegionId(v string) *ModifySagStaticRouteRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagStaticRouteRequest) SetResourceOwnerAccount(v string) *ModifySagStaticRouteRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagStaticRouteRequest) SetResourceOwnerId(v int64) *ModifySagStaticRouteRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagStaticRouteRequest) SetSmartAGId(v string) *ModifySagStaticRouteRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagStaticRouteRequest) SetSmartAGSn(v string) *ModifySagStaticRouteRequest {
	s.SmartAGSn = &v
	return s
}

func (s *ModifySagStaticRouteRequest) SetVlan(v string) *ModifySagStaticRouteRequest {
	s.Vlan = &v
	return s
}

type ModifySagStaticRouteResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagStaticRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagStaticRouteResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagStaticRouteResponseBody) SetRequestId(v string) *ModifySagStaticRouteResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagStaticRouteResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagStaticRouteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagStaticRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagStaticRouteResponse) GoString() string {
	return s.String()
}

func (s *ModifySagStaticRouteResponse) SetHeaders(v map[string]*string) *ModifySagStaticRouteResponse {
	s.Headers = v
	return s
}

func (s *ModifySagStaticRouteResponse) SetStatusCode(v int32) *ModifySagStaticRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagStaticRouteResponse) SetBody(v *ModifySagStaticRouteResponseBody) *ModifySagStaticRouteResponse {
	s.Body = v
	return s
}

type ModifySagUserDnsRequest struct {
	MasterDns            *string `json:"MasterDns,omitempty" xml:"MasterDns,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SlaveDns             *string `json:"SlaveDns,omitempty" xml:"SlaveDns,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s ModifySagUserDnsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagUserDnsRequest) GoString() string {
	return s.String()
}

func (s *ModifySagUserDnsRequest) SetMasterDns(v string) *ModifySagUserDnsRequest {
	s.MasterDns = &v
	return s
}

func (s *ModifySagUserDnsRequest) SetOwnerAccount(v string) *ModifySagUserDnsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagUserDnsRequest) SetOwnerId(v int64) *ModifySagUserDnsRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagUserDnsRequest) SetRegionId(v string) *ModifySagUserDnsRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagUserDnsRequest) SetResourceOwnerAccount(v string) *ModifySagUserDnsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagUserDnsRequest) SetResourceOwnerId(v int64) *ModifySagUserDnsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagUserDnsRequest) SetSlaveDns(v string) *ModifySagUserDnsRequest {
	s.SlaveDns = &v
	return s
}

func (s *ModifySagUserDnsRequest) SetSmartAGId(v string) *ModifySagUserDnsRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagUserDnsRequest) SetSmartAGSn(v string) *ModifySagUserDnsRequest {
	s.SmartAGSn = &v
	return s
}

type ModifySagUserDnsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagUserDnsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagUserDnsResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagUserDnsResponseBody) SetRequestId(v string) *ModifySagUserDnsResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagUserDnsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagUserDnsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagUserDnsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagUserDnsResponse) GoString() string {
	return s.String()
}

func (s *ModifySagUserDnsResponse) SetHeaders(v map[string]*string) *ModifySagUserDnsResponse {
	s.Headers = v
	return s
}

func (s *ModifySagUserDnsResponse) SetStatusCode(v int32) *ModifySagUserDnsResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagUserDnsResponse) SetBody(v *ModifySagUserDnsResponseBody) *ModifySagUserDnsResponse {
	s.Body = v
	return s
}

type ModifySagWanRequest struct {
	Bandwidth            *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Gateway              *string `json:"Gateway,omitempty" xml:"Gateway,omitempty"`
	IP                   *string `json:"IP,omitempty" xml:"IP,omitempty"`
	IPType               *string `json:"IPType,omitempty" xml:"IPType,omitempty"`
	ISP                  *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	Mask                 *string `json:"Mask,omitempty" xml:"Mask,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Password             *string `json:"Password,omitempty" xml:"Password,omitempty"`
	PortName             *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	Priority             *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
	Username             *string `json:"Username,omitempty" xml:"Username,omitempty"`
	Weight               *int32  `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s ModifySagWanRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagWanRequest) GoString() string {
	return s.String()
}

func (s *ModifySagWanRequest) SetBandwidth(v int32) *ModifySagWanRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifySagWanRequest) SetGateway(v string) *ModifySagWanRequest {
	s.Gateway = &v
	return s
}

func (s *ModifySagWanRequest) SetIP(v string) *ModifySagWanRequest {
	s.IP = &v
	return s
}

func (s *ModifySagWanRequest) SetIPType(v string) *ModifySagWanRequest {
	s.IPType = &v
	return s
}

func (s *ModifySagWanRequest) SetISP(v string) *ModifySagWanRequest {
	s.ISP = &v
	return s
}

func (s *ModifySagWanRequest) SetMask(v string) *ModifySagWanRequest {
	s.Mask = &v
	return s
}

func (s *ModifySagWanRequest) SetOwnerAccount(v string) *ModifySagWanRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagWanRequest) SetOwnerId(v int64) *ModifySagWanRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagWanRequest) SetPassword(v string) *ModifySagWanRequest {
	s.Password = &v
	return s
}

func (s *ModifySagWanRequest) SetPortName(v string) *ModifySagWanRequest {
	s.PortName = &v
	return s
}

func (s *ModifySagWanRequest) SetPriority(v int32) *ModifySagWanRequest {
	s.Priority = &v
	return s
}

func (s *ModifySagWanRequest) SetRegionId(v string) *ModifySagWanRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagWanRequest) SetResourceOwnerAccount(v string) *ModifySagWanRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagWanRequest) SetResourceOwnerId(v int64) *ModifySagWanRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagWanRequest) SetSmartAGId(v string) *ModifySagWanRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagWanRequest) SetSmartAGSn(v string) *ModifySagWanRequest {
	s.SmartAGSn = &v
	return s
}

func (s *ModifySagWanRequest) SetUsername(v string) *ModifySagWanRequest {
	s.Username = &v
	return s
}

func (s *ModifySagWanRequest) SetWeight(v int32) *ModifySagWanRequest {
	s.Weight = &v
	return s
}

type ModifySagWanResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagWanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagWanResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagWanResponseBody) SetRequestId(v string) *ModifySagWanResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagWanResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagWanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagWanResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagWanResponse) GoString() string {
	return s.String()
}

func (s *ModifySagWanResponse) SetHeaders(v map[string]*string) *ModifySagWanResponse {
	s.Headers = v
	return s
}

func (s *ModifySagWanResponse) SetStatusCode(v int32) *ModifySagWanResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagWanResponse) SetBody(v *ModifySagWanResponseBody) *ModifySagWanResponse {
	s.Body = v
	return s
}

type ModifySagWanSnatRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
	Snat                 *string `json:"Snat,omitempty" xml:"Snat,omitempty"`
}

func (s ModifySagWanSnatRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagWanSnatRequest) GoString() string {
	return s.String()
}

func (s *ModifySagWanSnatRequest) SetOwnerAccount(v string) *ModifySagWanSnatRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagWanSnatRequest) SetOwnerId(v int64) *ModifySagWanSnatRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagWanSnatRequest) SetRegionId(v string) *ModifySagWanSnatRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagWanSnatRequest) SetResourceOwnerAccount(v string) *ModifySagWanSnatRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagWanSnatRequest) SetResourceOwnerId(v int64) *ModifySagWanSnatRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagWanSnatRequest) SetSmartAGId(v string) *ModifySagWanSnatRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagWanSnatRequest) SetSmartAGSn(v string) *ModifySagWanSnatRequest {
	s.SmartAGSn = &v
	return s
}

func (s *ModifySagWanSnatRequest) SetSnat(v string) *ModifySagWanSnatRequest {
	s.Snat = &v
	return s
}

type ModifySagWanSnatResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagWanSnatResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagWanSnatResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagWanSnatResponseBody) SetRequestId(v string) *ModifySagWanSnatResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagWanSnatResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagWanSnatResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagWanSnatResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagWanSnatResponse) GoString() string {
	return s.String()
}

func (s *ModifySagWanSnatResponse) SetHeaders(v map[string]*string) *ModifySagWanSnatResponse {
	s.Headers = v
	return s
}

func (s *ModifySagWanSnatResponse) SetStatusCode(v int32) *ModifySagWanSnatResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagWanSnatResponse) SetBody(v *ModifySagWanSnatResponseBody) *ModifySagWanSnatResponse {
	s.Body = v
	return s
}

type ModifySagWifiRequest struct {
	AuthenticationType   *string `json:"AuthenticationType,omitempty" xml:"AuthenticationType,omitempty"`
	Bandwidth            *string `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Channel              *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	EncryptAlgorithm     *string `json:"EncryptAlgorithm,omitempty" xml:"EncryptAlgorithm,omitempty"`
	IsAuth               *string `json:"IsAuth,omitempty" xml:"IsAuth,omitempty"`
	IsBroadcast          *string `json:"IsBroadcast,omitempty" xml:"IsBroadcast,omitempty"`
	IsEnable             *string `json:"IsEnable,omitempty" xml:"IsEnable,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Password             *string `json:"Password,omitempty" xml:"Password,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SSID                 *string `json:"SSID,omitempty" xml:"SSID,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s ModifySagWifiRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySagWifiRequest) GoString() string {
	return s.String()
}

func (s *ModifySagWifiRequest) SetAuthenticationType(v string) *ModifySagWifiRequest {
	s.AuthenticationType = &v
	return s
}

func (s *ModifySagWifiRequest) SetBandwidth(v string) *ModifySagWifiRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifySagWifiRequest) SetChannel(v string) *ModifySagWifiRequest {
	s.Channel = &v
	return s
}

func (s *ModifySagWifiRequest) SetEncryptAlgorithm(v string) *ModifySagWifiRequest {
	s.EncryptAlgorithm = &v
	return s
}

func (s *ModifySagWifiRequest) SetIsAuth(v string) *ModifySagWifiRequest {
	s.IsAuth = &v
	return s
}

func (s *ModifySagWifiRequest) SetIsBroadcast(v string) *ModifySagWifiRequest {
	s.IsBroadcast = &v
	return s
}

func (s *ModifySagWifiRequest) SetIsEnable(v string) *ModifySagWifiRequest {
	s.IsEnable = &v
	return s
}

func (s *ModifySagWifiRequest) SetOwnerAccount(v string) *ModifySagWifiRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySagWifiRequest) SetOwnerId(v int64) *ModifySagWifiRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySagWifiRequest) SetPassword(v string) *ModifySagWifiRequest {
	s.Password = &v
	return s
}

func (s *ModifySagWifiRequest) SetRegionId(v string) *ModifySagWifiRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySagWifiRequest) SetResourceOwnerAccount(v string) *ModifySagWifiRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySagWifiRequest) SetResourceOwnerId(v int64) *ModifySagWifiRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySagWifiRequest) SetSSID(v string) *ModifySagWifiRequest {
	s.SSID = &v
	return s
}

func (s *ModifySagWifiRequest) SetSmartAGId(v string) *ModifySagWifiRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySagWifiRequest) SetSmartAGSn(v string) *ModifySagWifiRequest {
	s.SmartAGSn = &v
	return s
}

type ModifySagWifiResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySagWifiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySagWifiResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySagWifiResponseBody) SetRequestId(v string) *ModifySagWifiResponseBody {
	s.RequestId = &v
	return s
}

type ModifySagWifiResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySagWifiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySagWifiResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySagWifiResponse) GoString() string {
	return s.String()
}

func (s *ModifySagWifiResponse) SetHeaders(v map[string]*string) *ModifySagWifiResponse {
	s.Headers = v
	return s
}

func (s *ModifySagWifiResponse) SetStatusCode(v int32) *ModifySagWifiResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySagWifiResponse) SetBody(v *ModifySagWifiResponseBody) *ModifySagWifiResponse {
	s.Body = v
	return s
}

type ModifySmartAccessGatewayRequest struct {
	CidrBlock                     *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description                   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnableSoftwareConnectionAudit *bool   `json:"EnableSoftwareConnectionAudit,omitempty" xml:"EnableSoftwareConnectionAudit,omitempty"`
	Name                          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount                  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Position                      *string `json:"Position,omitempty" xml:"Position,omitempty"`
	RegionId                      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount          *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId               *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RoutingStrategy               *string `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	SecurityLockThreshold         *int32  `json:"SecurityLockThreshold,omitempty" xml:"SecurityLockThreshold,omitempty"`
	SmartAGId                     *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s ModifySmartAccessGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySmartAccessGatewayRequest) GoString() string {
	return s.String()
}

func (s *ModifySmartAccessGatewayRequest) SetCidrBlock(v string) *ModifySmartAccessGatewayRequest {
	s.CidrBlock = &v
	return s
}

func (s *ModifySmartAccessGatewayRequest) SetDescription(v string) *ModifySmartAccessGatewayRequest {
	s.Description = &v
	return s
}

func (s *ModifySmartAccessGatewayRequest) SetEnableSoftwareConnectionAudit(v bool) *ModifySmartAccessGatewayRequest {
	s.EnableSoftwareConnectionAudit = &v
	return s
}

func (s *ModifySmartAccessGatewayRequest) SetName(v string) *ModifySmartAccessGatewayRequest {
	s.Name = &v
	return s
}

func (s *ModifySmartAccessGatewayRequest) SetOwnerAccount(v string) *ModifySmartAccessGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySmartAccessGatewayRequest) SetOwnerId(v int64) *ModifySmartAccessGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySmartAccessGatewayRequest) SetPosition(v string) *ModifySmartAccessGatewayRequest {
	s.Position = &v
	return s
}

func (s *ModifySmartAccessGatewayRequest) SetRegionId(v string) *ModifySmartAccessGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySmartAccessGatewayRequest) SetResourceOwnerAccount(v string) *ModifySmartAccessGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySmartAccessGatewayRequest) SetResourceOwnerId(v int64) *ModifySmartAccessGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySmartAccessGatewayRequest) SetRoutingStrategy(v string) *ModifySmartAccessGatewayRequest {
	s.RoutingStrategy = &v
	return s
}

func (s *ModifySmartAccessGatewayRequest) SetSecurityLockThreshold(v int32) *ModifySmartAccessGatewayRequest {
	s.SecurityLockThreshold = &v
	return s
}

func (s *ModifySmartAccessGatewayRequest) SetSmartAGId(v string) *ModifySmartAccessGatewayRequest {
	s.SmartAGId = &v
	return s
}

type ModifySmartAccessGatewayResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySmartAccessGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySmartAccessGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySmartAccessGatewayResponseBody) SetRequestId(v string) *ModifySmartAccessGatewayResponseBody {
	s.RequestId = &v
	return s
}

type ModifySmartAccessGatewayResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySmartAccessGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySmartAccessGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySmartAccessGatewayResponse) GoString() string {
	return s.String()
}

func (s *ModifySmartAccessGatewayResponse) SetHeaders(v map[string]*string) *ModifySmartAccessGatewayResponse {
	s.Headers = v
	return s
}

func (s *ModifySmartAccessGatewayResponse) SetStatusCode(v int32) *ModifySmartAccessGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySmartAccessGatewayResponse) SetBody(v *ModifySmartAccessGatewayResponseBody) *ModifySmartAccessGatewayResponse {
	s.Body = v
	return s
}

type ModifySmartAccessGatewayClientUserRequest struct {
	Bandwidth            *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Email                *string `json:"Email,omitempty" xml:"Email,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	UserName             *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ModifySmartAccessGatewayClientUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySmartAccessGatewayClientUserRequest) GoString() string {
	return s.String()
}

func (s *ModifySmartAccessGatewayClientUserRequest) SetBandwidth(v int32) *ModifySmartAccessGatewayClientUserRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifySmartAccessGatewayClientUserRequest) SetEmail(v string) *ModifySmartAccessGatewayClientUserRequest {
	s.Email = &v
	return s
}

func (s *ModifySmartAccessGatewayClientUserRequest) SetOwnerAccount(v string) *ModifySmartAccessGatewayClientUserRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySmartAccessGatewayClientUserRequest) SetOwnerId(v int64) *ModifySmartAccessGatewayClientUserRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySmartAccessGatewayClientUserRequest) SetRegionId(v string) *ModifySmartAccessGatewayClientUserRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySmartAccessGatewayClientUserRequest) SetResourceOwnerAccount(v string) *ModifySmartAccessGatewayClientUserRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySmartAccessGatewayClientUserRequest) SetResourceOwnerId(v int64) *ModifySmartAccessGatewayClientUserRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySmartAccessGatewayClientUserRequest) SetSmartAGId(v string) *ModifySmartAccessGatewayClientUserRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySmartAccessGatewayClientUserRequest) SetUserName(v string) *ModifySmartAccessGatewayClientUserRequest {
	s.UserName = &v
	return s
}

type ModifySmartAccessGatewayClientUserResponseBody struct {
	Bandwidth *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	ClientIp  *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserMail  *string `json:"UserMail,omitempty" xml:"UserMail,omitempty"`
	UserName  *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ModifySmartAccessGatewayClientUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySmartAccessGatewayClientUserResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySmartAccessGatewayClientUserResponseBody) SetBandwidth(v int32) *ModifySmartAccessGatewayClientUserResponseBody {
	s.Bandwidth = &v
	return s
}

func (s *ModifySmartAccessGatewayClientUserResponseBody) SetClientIp(v string) *ModifySmartAccessGatewayClientUserResponseBody {
	s.ClientIp = &v
	return s
}

func (s *ModifySmartAccessGatewayClientUserResponseBody) SetRequestId(v string) *ModifySmartAccessGatewayClientUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySmartAccessGatewayClientUserResponseBody) SetUserMail(v string) *ModifySmartAccessGatewayClientUserResponseBody {
	s.UserMail = &v
	return s
}

func (s *ModifySmartAccessGatewayClientUserResponseBody) SetUserName(v string) *ModifySmartAccessGatewayClientUserResponseBody {
	s.UserName = &v
	return s
}

type ModifySmartAccessGatewayClientUserResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySmartAccessGatewayClientUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySmartAccessGatewayClientUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySmartAccessGatewayClientUserResponse) GoString() string {
	return s.String()
}

func (s *ModifySmartAccessGatewayClientUserResponse) SetHeaders(v map[string]*string) *ModifySmartAccessGatewayClientUserResponse {
	s.Headers = v
	return s
}

func (s *ModifySmartAccessGatewayClientUserResponse) SetStatusCode(v int32) *ModifySmartAccessGatewayClientUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySmartAccessGatewayClientUserResponse) SetBody(v *ModifySmartAccessGatewayClientUserResponseBody) *ModifySmartAccessGatewayClientUserResponse {
	s.Body = v
	return s
}

type ModifySmartAccessGatewayUpBandwidthRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	UpBandwidth4G        *int32  `json:"UpBandwidth4G,omitempty" xml:"UpBandwidth4G,omitempty"`
	UpBandwidthWan       *int32  `json:"UpBandwidthWan,omitempty" xml:"UpBandwidthWan,omitempty"`
}

func (s ModifySmartAccessGatewayUpBandwidthRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySmartAccessGatewayUpBandwidthRequest) GoString() string {
	return s.String()
}

func (s *ModifySmartAccessGatewayUpBandwidthRequest) SetOwnerAccount(v string) *ModifySmartAccessGatewayUpBandwidthRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySmartAccessGatewayUpBandwidthRequest) SetOwnerId(v int64) *ModifySmartAccessGatewayUpBandwidthRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySmartAccessGatewayUpBandwidthRequest) SetRegionId(v string) *ModifySmartAccessGatewayUpBandwidthRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySmartAccessGatewayUpBandwidthRequest) SetResourceOwnerAccount(v string) *ModifySmartAccessGatewayUpBandwidthRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySmartAccessGatewayUpBandwidthRequest) SetResourceOwnerId(v int64) *ModifySmartAccessGatewayUpBandwidthRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySmartAccessGatewayUpBandwidthRequest) SetSmartAGId(v string) *ModifySmartAccessGatewayUpBandwidthRequest {
	s.SmartAGId = &v
	return s
}

func (s *ModifySmartAccessGatewayUpBandwidthRequest) SetUpBandwidth4G(v int32) *ModifySmartAccessGatewayUpBandwidthRequest {
	s.UpBandwidth4G = &v
	return s
}

func (s *ModifySmartAccessGatewayUpBandwidthRequest) SetUpBandwidthWan(v int32) *ModifySmartAccessGatewayUpBandwidthRequest {
	s.UpBandwidthWan = &v
	return s
}

type ModifySmartAccessGatewayUpBandwidthResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySmartAccessGatewayUpBandwidthResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySmartAccessGatewayUpBandwidthResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySmartAccessGatewayUpBandwidthResponseBody) SetRequestId(v string) *ModifySmartAccessGatewayUpBandwidthResponseBody {
	s.RequestId = &v
	return s
}

type ModifySmartAccessGatewayUpBandwidthResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySmartAccessGatewayUpBandwidthResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySmartAccessGatewayUpBandwidthResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySmartAccessGatewayUpBandwidthResponse) GoString() string {
	return s.String()
}

func (s *ModifySmartAccessGatewayUpBandwidthResponse) SetHeaders(v map[string]*string) *ModifySmartAccessGatewayUpBandwidthResponse {
	s.Headers = v
	return s
}

func (s *ModifySmartAccessGatewayUpBandwidthResponse) SetStatusCode(v int32) *ModifySmartAccessGatewayUpBandwidthResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySmartAccessGatewayUpBandwidthResponse) SetBody(v *ModifySmartAccessGatewayUpBandwidthResponseBody) *ModifySmartAccessGatewayUpBandwidthResponse {
	s.Body = v
	return s
}

type MoveResourceGroupRequest struct {
	NewResourceGroupId   *string `json:"NewResourceGroupId,omitempty" xml:"NewResourceGroupId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId           *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s MoveResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s MoveResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *MoveResourceGroupRequest) SetNewResourceGroupId(v string) *MoveResourceGroupRequest {
	s.NewResourceGroupId = &v
	return s
}

func (s *MoveResourceGroupRequest) SetOwnerAccount(v string) *MoveResourceGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *MoveResourceGroupRequest) SetOwnerId(v int64) *MoveResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *MoveResourceGroupRequest) SetRegionId(v string) *MoveResourceGroupRequest {
	s.RegionId = &v
	return s
}

func (s *MoveResourceGroupRequest) SetResourceId(v string) *MoveResourceGroupRequest {
	s.ResourceId = &v
	return s
}

func (s *MoveResourceGroupRequest) SetResourceOwnerAccount(v string) *MoveResourceGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *MoveResourceGroupRequest) SetResourceOwnerId(v int64) *MoveResourceGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *MoveResourceGroupRequest) SetResourceType(v string) *MoveResourceGroupRequest {
	s.ResourceType = &v
	return s
}

type MoveResourceGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s MoveResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MoveResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *MoveResourceGroupResponseBody) SetRequestId(v string) *MoveResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type MoveResourceGroupResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *MoveResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s MoveResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s MoveResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *MoveResourceGroupResponse) SetHeaders(v map[string]*string) *MoveResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *MoveResourceGroupResponse) SetStatusCode(v int32) *MoveResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *MoveResourceGroupResponse) SetBody(v *MoveResourceGroupResponseBody) *MoveResourceGroupResponse {
	s.Body = v
	return s
}

type ProbeAccessPointNetworkQualityRequest struct {
	AccessPointIds       []*int32 `json:"AccessPointIds,omitempty" xml:"AccessPointIds,omitempty" type:"Repeated"`
	OwnerAccount         *string  `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64   `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string  `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string  `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s ProbeAccessPointNetworkQualityRequest) String() string {
	return tea.Prettify(s)
}

func (s ProbeAccessPointNetworkQualityRequest) GoString() string {
	return s.String()
}

func (s *ProbeAccessPointNetworkQualityRequest) SetAccessPointIds(v []*int32) *ProbeAccessPointNetworkQualityRequest {
	s.AccessPointIds = v
	return s
}

func (s *ProbeAccessPointNetworkQualityRequest) SetOwnerAccount(v string) *ProbeAccessPointNetworkQualityRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ProbeAccessPointNetworkQualityRequest) SetOwnerId(v int64) *ProbeAccessPointNetworkQualityRequest {
	s.OwnerId = &v
	return s
}

func (s *ProbeAccessPointNetworkQualityRequest) SetRegionId(v string) *ProbeAccessPointNetworkQualityRequest {
	s.RegionId = &v
	return s
}

func (s *ProbeAccessPointNetworkQualityRequest) SetResourceOwnerAccount(v string) *ProbeAccessPointNetworkQualityRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ProbeAccessPointNetworkQualityRequest) SetResourceOwnerId(v int64) *ProbeAccessPointNetworkQualityRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ProbeAccessPointNetworkQualityRequest) SetSmartAGId(v string) *ProbeAccessPointNetworkQualityRequest {
	s.SmartAGId = &v
	return s
}

type ProbeAccessPointNetworkQualityResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ProbeAccessPointNetworkQualityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ProbeAccessPointNetworkQualityResponseBody) GoString() string {
	return s.String()
}

func (s *ProbeAccessPointNetworkQualityResponseBody) SetRequestId(v string) *ProbeAccessPointNetworkQualityResponseBody {
	s.RequestId = &v
	return s
}

type ProbeAccessPointNetworkQualityResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ProbeAccessPointNetworkQualityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ProbeAccessPointNetworkQualityResponse) String() string {
	return tea.Prettify(s)
}

func (s ProbeAccessPointNetworkQualityResponse) GoString() string {
	return s.String()
}

func (s *ProbeAccessPointNetworkQualityResponse) SetHeaders(v map[string]*string) *ProbeAccessPointNetworkQualityResponse {
	s.Headers = v
	return s
}

func (s *ProbeAccessPointNetworkQualityResponse) SetStatusCode(v int32) *ProbeAccessPointNetworkQualityResponse {
	s.StatusCode = &v
	return s
}

func (s *ProbeAccessPointNetworkQualityResponse) SetBody(v *ProbeAccessPointNetworkQualityResponseBody) *ProbeAccessPointNetworkQualityResponse {
	s.Body = v
	return s
}

type RebootSmartAccessGatewayRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SerialNumber         *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s RebootSmartAccessGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootSmartAccessGatewayRequest) GoString() string {
	return s.String()
}

func (s *RebootSmartAccessGatewayRequest) SetOwnerAccount(v string) *RebootSmartAccessGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RebootSmartAccessGatewayRequest) SetOwnerId(v int64) *RebootSmartAccessGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *RebootSmartAccessGatewayRequest) SetRegionId(v string) *RebootSmartAccessGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *RebootSmartAccessGatewayRequest) SetResourceOwnerAccount(v string) *RebootSmartAccessGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RebootSmartAccessGatewayRequest) SetResourceOwnerId(v int64) *RebootSmartAccessGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RebootSmartAccessGatewayRequest) SetSerialNumber(v string) *RebootSmartAccessGatewayRequest {
	s.SerialNumber = &v
	return s
}

func (s *RebootSmartAccessGatewayRequest) SetSmartAGId(v string) *RebootSmartAccessGatewayRequest {
	s.SmartAGId = &v
	return s
}

type RebootSmartAccessGatewayResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootSmartAccessGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebootSmartAccessGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *RebootSmartAccessGatewayResponseBody) SetRequestId(v string) *RebootSmartAccessGatewayResponseBody {
	s.RequestId = &v
	return s
}

type RebootSmartAccessGatewayResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RebootSmartAccessGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RebootSmartAccessGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootSmartAccessGatewayResponse) GoString() string {
	return s.String()
}

func (s *RebootSmartAccessGatewayResponse) SetHeaders(v map[string]*string) *RebootSmartAccessGatewayResponse {
	s.Headers = v
	return s
}

func (s *RebootSmartAccessGatewayResponse) SetStatusCode(v int32) *RebootSmartAccessGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *RebootSmartAccessGatewayResponse) SetBody(v *RebootSmartAccessGatewayResponseBody) *RebootSmartAccessGatewayResponse {
	s.Body = v
	return s
}

type ResetSmartAccessGatewayClientUserPasswordRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Password             *string `json:"Password,omitempty" xml:"Password,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	UserName             *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ResetSmartAccessGatewayClientUserPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetSmartAccessGatewayClientUserPasswordRequest) GoString() string {
	return s.String()
}

func (s *ResetSmartAccessGatewayClientUserPasswordRequest) SetOwnerAccount(v string) *ResetSmartAccessGatewayClientUserPasswordRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ResetSmartAccessGatewayClientUserPasswordRequest) SetOwnerId(v int64) *ResetSmartAccessGatewayClientUserPasswordRequest {
	s.OwnerId = &v
	return s
}

func (s *ResetSmartAccessGatewayClientUserPasswordRequest) SetPassword(v string) *ResetSmartAccessGatewayClientUserPasswordRequest {
	s.Password = &v
	return s
}

func (s *ResetSmartAccessGatewayClientUserPasswordRequest) SetRegionId(v string) *ResetSmartAccessGatewayClientUserPasswordRequest {
	s.RegionId = &v
	return s
}

func (s *ResetSmartAccessGatewayClientUserPasswordRequest) SetResourceOwnerAccount(v string) *ResetSmartAccessGatewayClientUserPasswordRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ResetSmartAccessGatewayClientUserPasswordRequest) SetResourceOwnerId(v int64) *ResetSmartAccessGatewayClientUserPasswordRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ResetSmartAccessGatewayClientUserPasswordRequest) SetSmartAGId(v string) *ResetSmartAccessGatewayClientUserPasswordRequest {
	s.SmartAGId = &v
	return s
}

func (s *ResetSmartAccessGatewayClientUserPasswordRequest) SetUserName(v string) *ResetSmartAccessGatewayClientUserPasswordRequest {
	s.UserName = &v
	return s
}

type ResetSmartAccessGatewayClientUserPasswordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetSmartAccessGatewayClientUserPasswordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetSmartAccessGatewayClientUserPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *ResetSmartAccessGatewayClientUserPasswordResponseBody) SetRequestId(v string) *ResetSmartAccessGatewayClientUserPasswordResponseBody {
	s.RequestId = &v
	return s
}

type ResetSmartAccessGatewayClientUserPasswordResponse struct {
	Headers    map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ResetSmartAccessGatewayClientUserPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetSmartAccessGatewayClientUserPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetSmartAccessGatewayClientUserPasswordResponse) GoString() string {
	return s.String()
}

func (s *ResetSmartAccessGatewayClientUserPasswordResponse) SetHeaders(v map[string]*string) *ResetSmartAccessGatewayClientUserPasswordResponse {
	s.Headers = v
	return s
}

func (s *ResetSmartAccessGatewayClientUserPasswordResponse) SetStatusCode(v int32) *ResetSmartAccessGatewayClientUserPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetSmartAccessGatewayClientUserPasswordResponse) SetBody(v *ResetSmartAccessGatewayClientUserPasswordResponseBody) *ResetSmartAccessGatewayClientUserPasswordResponse {
	s.Body = v
	return s
}

type RevokeInstanceFromCbnRequest struct {
	CcnInstanceId        *string `json:"CcnInstanceId,omitempty" xml:"CcnInstanceId,omitempty"`
	CenInstanceId        *string `json:"CenInstanceId,omitempty" xml:"CenInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s RevokeInstanceFromCbnRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeInstanceFromCbnRequest) GoString() string {
	return s.String()
}

func (s *RevokeInstanceFromCbnRequest) SetCcnInstanceId(v string) *RevokeInstanceFromCbnRequest {
	s.CcnInstanceId = &v
	return s
}

func (s *RevokeInstanceFromCbnRequest) SetCenInstanceId(v string) *RevokeInstanceFromCbnRequest {
	s.CenInstanceId = &v
	return s
}

func (s *RevokeInstanceFromCbnRequest) SetOwnerAccount(v string) *RevokeInstanceFromCbnRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RevokeInstanceFromCbnRequest) SetOwnerId(v int64) *RevokeInstanceFromCbnRequest {
	s.OwnerId = &v
	return s
}

func (s *RevokeInstanceFromCbnRequest) SetRegionId(v string) *RevokeInstanceFromCbnRequest {
	s.RegionId = &v
	return s
}

func (s *RevokeInstanceFromCbnRequest) SetResourceOwnerAccount(v string) *RevokeInstanceFromCbnRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RevokeInstanceFromCbnRequest) SetResourceOwnerId(v int64) *RevokeInstanceFromCbnRequest {
	s.ResourceOwnerId = &v
	return s
}

type RevokeInstanceFromCbnResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RevokeInstanceFromCbnResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeInstanceFromCbnResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeInstanceFromCbnResponseBody) SetRequestId(v string) *RevokeInstanceFromCbnResponseBody {
	s.RequestId = &v
	return s
}

type RevokeInstanceFromCbnResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RevokeInstanceFromCbnResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RevokeInstanceFromCbnResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeInstanceFromCbnResponse) GoString() string {
	return s.String()
}

func (s *RevokeInstanceFromCbnResponse) SetHeaders(v map[string]*string) *RevokeInstanceFromCbnResponse {
	s.Headers = v
	return s
}

func (s *RevokeInstanceFromCbnResponse) SetStatusCode(v int32) *RevokeInstanceFromCbnResponse {
	s.StatusCode = &v
	return s
}

func (s *RevokeInstanceFromCbnResponse) SetBody(v *RevokeInstanceFromCbnResponseBody) *RevokeInstanceFromCbnResponse {
	s.Body = v
	return s
}

type RevokeInstanceFromVbrRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	VbrInstanceId        *string `json:"VbrInstanceId,omitempty" xml:"VbrInstanceId,omitempty"`
}

func (s RevokeInstanceFromVbrRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeInstanceFromVbrRequest) GoString() string {
	return s.String()
}

func (s *RevokeInstanceFromVbrRequest) SetOwnerAccount(v string) *RevokeInstanceFromVbrRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RevokeInstanceFromVbrRequest) SetOwnerId(v int64) *RevokeInstanceFromVbrRequest {
	s.OwnerId = &v
	return s
}

func (s *RevokeInstanceFromVbrRequest) SetRegionId(v string) *RevokeInstanceFromVbrRequest {
	s.RegionId = &v
	return s
}

func (s *RevokeInstanceFromVbrRequest) SetResourceOwnerAccount(v string) *RevokeInstanceFromVbrRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RevokeInstanceFromVbrRequest) SetResourceOwnerId(v int64) *RevokeInstanceFromVbrRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RevokeInstanceFromVbrRequest) SetSmartAGId(v string) *RevokeInstanceFromVbrRequest {
	s.SmartAGId = &v
	return s
}

func (s *RevokeInstanceFromVbrRequest) SetVbrInstanceId(v string) *RevokeInstanceFromVbrRequest {
	s.VbrInstanceId = &v
	return s
}

type RevokeInstanceFromVbrResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RevokeInstanceFromVbrResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeInstanceFromVbrResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeInstanceFromVbrResponseBody) SetRequestId(v string) *RevokeInstanceFromVbrResponseBody {
	s.RequestId = &v
	return s
}

type RevokeInstanceFromVbrResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RevokeInstanceFromVbrResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RevokeInstanceFromVbrResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeInstanceFromVbrResponse) GoString() string {
	return s.String()
}

func (s *RevokeInstanceFromVbrResponse) SetHeaders(v map[string]*string) *RevokeInstanceFromVbrResponse {
	s.Headers = v
	return s
}

func (s *RevokeInstanceFromVbrResponse) SetStatusCode(v int32) *RevokeInstanceFromVbrResponse {
	s.StatusCode = &v
	return s
}

func (s *RevokeInstanceFromVbrResponse) SetBody(v *RevokeInstanceFromVbrResponseBody) *RevokeInstanceFromVbrResponse {
	s.Body = v
	return s
}

type RevokeSagInstanceFromCcnRequest struct {
	CcnInstanceId        *string `json:"CcnInstanceId,omitempty" xml:"CcnInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s RevokeSagInstanceFromCcnRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeSagInstanceFromCcnRequest) GoString() string {
	return s.String()
}

func (s *RevokeSagInstanceFromCcnRequest) SetCcnInstanceId(v string) *RevokeSagInstanceFromCcnRequest {
	s.CcnInstanceId = &v
	return s
}

func (s *RevokeSagInstanceFromCcnRequest) SetOwnerAccount(v string) *RevokeSagInstanceFromCcnRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RevokeSagInstanceFromCcnRequest) SetOwnerId(v int64) *RevokeSagInstanceFromCcnRequest {
	s.OwnerId = &v
	return s
}

func (s *RevokeSagInstanceFromCcnRequest) SetRegionId(v string) *RevokeSagInstanceFromCcnRequest {
	s.RegionId = &v
	return s
}

func (s *RevokeSagInstanceFromCcnRequest) SetResourceOwnerAccount(v string) *RevokeSagInstanceFromCcnRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RevokeSagInstanceFromCcnRequest) SetResourceOwnerId(v int64) *RevokeSagInstanceFromCcnRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RevokeSagInstanceFromCcnRequest) SetSmartAGId(v string) *RevokeSagInstanceFromCcnRequest {
	s.SmartAGId = &v
	return s
}

type RevokeSagInstanceFromCcnResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RevokeSagInstanceFromCcnResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeSagInstanceFromCcnResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeSagInstanceFromCcnResponseBody) SetRequestId(v string) *RevokeSagInstanceFromCcnResponseBody {
	s.RequestId = &v
	return s
}

type RevokeSagInstanceFromCcnResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RevokeSagInstanceFromCcnResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RevokeSagInstanceFromCcnResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeSagInstanceFromCcnResponse) GoString() string {
	return s.String()
}

func (s *RevokeSagInstanceFromCcnResponse) SetHeaders(v map[string]*string) *RevokeSagInstanceFromCcnResponse {
	s.Headers = v
	return s
}

func (s *RevokeSagInstanceFromCcnResponse) SetStatusCode(v int32) *RevokeSagInstanceFromCcnResponse {
	s.StatusCode = &v
	return s
}

func (s *RevokeSagInstanceFromCcnResponse) SetBody(v *RevokeSagInstanceFromCcnResponseBody) *RevokeSagInstanceFromCcnResponse {
	s.Body = v
	return s
}

type RoamClientUserRequest struct {
	OriginRegionId       *string `json:"OriginRegionId,omitempty" xml:"OriginRegionId,omitempty"`
	OriginSmartAGId      *string `json:"OriginSmartAGId,omitempty" xml:"OriginSmartAGId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TargetSmartAGId      *string `json:"TargetSmartAGId,omitempty" xml:"TargetSmartAGId,omitempty"`
	UserName             *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s RoamClientUserRequest) String() string {
	return tea.Prettify(s)
}

func (s RoamClientUserRequest) GoString() string {
	return s.String()
}

func (s *RoamClientUserRequest) SetOriginRegionId(v string) *RoamClientUserRequest {
	s.OriginRegionId = &v
	return s
}

func (s *RoamClientUserRequest) SetOriginSmartAGId(v string) *RoamClientUserRequest {
	s.OriginSmartAGId = &v
	return s
}

func (s *RoamClientUserRequest) SetOwnerAccount(v string) *RoamClientUserRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RoamClientUserRequest) SetOwnerId(v int64) *RoamClientUserRequest {
	s.OwnerId = &v
	return s
}

func (s *RoamClientUserRequest) SetRegionId(v string) *RoamClientUserRequest {
	s.RegionId = &v
	return s
}

func (s *RoamClientUserRequest) SetResourceOwnerAccount(v string) *RoamClientUserRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RoamClientUserRequest) SetResourceOwnerId(v int64) *RoamClientUserRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RoamClientUserRequest) SetTargetSmartAGId(v string) *RoamClientUserRequest {
	s.TargetSmartAGId = &v
	return s
}

func (s *RoamClientUserRequest) SetUserName(v string) *RoamClientUserRequest {
	s.UserName = &v
	return s
}

type RoamClientUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RoamClientUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RoamClientUserResponseBody) GoString() string {
	return s.String()
}

func (s *RoamClientUserResponseBody) SetRequestId(v string) *RoamClientUserResponseBody {
	s.RequestId = &v
	return s
}

type RoamClientUserResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RoamClientUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RoamClientUserResponse) String() string {
	return tea.Prettify(s)
}

func (s RoamClientUserResponse) GoString() string {
	return s.String()
}

func (s *RoamClientUserResponse) SetHeaders(v map[string]*string) *RoamClientUserResponse {
	s.Headers = v
	return s
}

func (s *RoamClientUserResponse) SetStatusCode(v int32) *RoamClientUserResponse {
	s.StatusCode = &v
	return s
}

func (s *RoamClientUserResponse) SetBody(v *RoamClientUserResponseBody) *RoamClientUserResponse {
	s.Body = v
	return s
}

type SetAdvancedMonitorStateRequest struct {
	Enable   *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SagId    *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
}

func (s SetAdvancedMonitorStateRequest) String() string {
	return tea.Prettify(s)
}

func (s SetAdvancedMonitorStateRequest) GoString() string {
	return s.String()
}

func (s *SetAdvancedMonitorStateRequest) SetEnable(v bool) *SetAdvancedMonitorStateRequest {
	s.Enable = &v
	return s
}

func (s *SetAdvancedMonitorStateRequest) SetRegionId(v string) *SetAdvancedMonitorStateRequest {
	s.RegionId = &v
	return s
}

func (s *SetAdvancedMonitorStateRequest) SetSagId(v string) *SetAdvancedMonitorStateRequest {
	s.SagId = &v
	return s
}

type SetAdvancedMonitorStateResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetAdvancedMonitorStateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetAdvancedMonitorStateResponseBody) GoString() string {
	return s.String()
}

func (s *SetAdvancedMonitorStateResponseBody) SetCode(v string) *SetAdvancedMonitorStateResponseBody {
	s.Code = &v
	return s
}

func (s *SetAdvancedMonitorStateResponseBody) SetMessage(v string) *SetAdvancedMonitorStateResponseBody {
	s.Message = &v
	return s
}

func (s *SetAdvancedMonitorStateResponseBody) SetRequestId(v string) *SetAdvancedMonitorStateResponseBody {
	s.RequestId = &v
	return s
}

type SetAdvancedMonitorStateResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetAdvancedMonitorStateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetAdvancedMonitorStateResponse) String() string {
	return tea.Prettify(s)
}

func (s SetAdvancedMonitorStateResponse) GoString() string {
	return s.String()
}

func (s *SetAdvancedMonitorStateResponse) SetHeaders(v map[string]*string) *SetAdvancedMonitorStateResponse {
	s.Headers = v
	return s
}

func (s *SetAdvancedMonitorStateResponse) SetStatusCode(v int32) *SetAdvancedMonitorStateResponse {
	s.StatusCode = &v
	return s
}

func (s *SetAdvancedMonitorStateResponse) SetBody(v *SetAdvancedMonitorStateResponseBody) *SetAdvancedMonitorStateResponse {
	s.Body = v
	return s
}

type SynchronizeSmartAGWebConfigRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGSn            *string `json:"SmartAGSn,omitempty" xml:"SmartAGSn,omitempty"`
}

func (s SynchronizeSmartAGWebConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeSmartAGWebConfigRequest) GoString() string {
	return s.String()
}

func (s *SynchronizeSmartAGWebConfigRequest) SetOwnerAccount(v string) *SynchronizeSmartAGWebConfigRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SynchronizeSmartAGWebConfigRequest) SetOwnerId(v int64) *SynchronizeSmartAGWebConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *SynchronizeSmartAGWebConfigRequest) SetRegionId(v string) *SynchronizeSmartAGWebConfigRequest {
	s.RegionId = &v
	return s
}

func (s *SynchronizeSmartAGWebConfigRequest) SetResourceOwnerAccount(v string) *SynchronizeSmartAGWebConfigRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SynchronizeSmartAGWebConfigRequest) SetResourceOwnerId(v int64) *SynchronizeSmartAGWebConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SynchronizeSmartAGWebConfigRequest) SetSmartAGId(v string) *SynchronizeSmartAGWebConfigRequest {
	s.SmartAGId = &v
	return s
}

func (s *SynchronizeSmartAGWebConfigRequest) SetSmartAGSn(v string) *SynchronizeSmartAGWebConfigRequest {
	s.SmartAGSn = &v
	return s
}

type SynchronizeSmartAGWebConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SynchronizeSmartAGWebConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeSmartAGWebConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SynchronizeSmartAGWebConfigResponseBody) SetRequestId(v string) *SynchronizeSmartAGWebConfigResponseBody {
	s.RequestId = &v
	return s
}

type SynchronizeSmartAGWebConfigResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SynchronizeSmartAGWebConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SynchronizeSmartAGWebConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeSmartAGWebConfigResponse) GoString() string {
	return s.String()
}

func (s *SynchronizeSmartAGWebConfigResponse) SetHeaders(v map[string]*string) *SynchronizeSmartAGWebConfigResponse {
	s.Headers = v
	return s
}

func (s *SynchronizeSmartAGWebConfigResponse) SetStatusCode(v int32) *SynchronizeSmartAGWebConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SynchronizeSmartAGWebConfigResponse) SetBody(v *SynchronizeSmartAGWebConfigResponseBody) *SynchronizeSmartAGWebConfigResponse {
	s.Body = v
	return s
}

type UnbindSerialNumberRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SerialNumber         *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s UnbindSerialNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindSerialNumberRequest) GoString() string {
	return s.String()
}

func (s *UnbindSerialNumberRequest) SetOwnerAccount(v string) *UnbindSerialNumberRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnbindSerialNumberRequest) SetOwnerId(v int64) *UnbindSerialNumberRequest {
	s.OwnerId = &v
	return s
}

func (s *UnbindSerialNumberRequest) SetRegionId(v string) *UnbindSerialNumberRequest {
	s.RegionId = &v
	return s
}

func (s *UnbindSerialNumberRequest) SetResourceOwnerAccount(v string) *UnbindSerialNumberRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnbindSerialNumberRequest) SetResourceOwnerId(v int64) *UnbindSerialNumberRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnbindSerialNumberRequest) SetSerialNumber(v string) *UnbindSerialNumberRequest {
	s.SerialNumber = &v
	return s
}

func (s *UnbindSerialNumberRequest) SetSmartAGId(v string) *UnbindSerialNumberRequest {
	s.SmartAGId = &v
	return s
}

type UnbindSerialNumberResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindSerialNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindSerialNumberResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindSerialNumberResponseBody) SetRequestId(v string) *UnbindSerialNumberResponseBody {
	s.RequestId = &v
	return s
}

type UnbindSerialNumberResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UnbindSerialNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindSerialNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindSerialNumberResponse) GoString() string {
	return s.String()
}

func (s *UnbindSerialNumberResponse) SetHeaders(v map[string]*string) *UnbindSerialNumberResponse {
	s.Headers = v
	return s
}

func (s *UnbindSerialNumberResponse) SetStatusCode(v int32) *UnbindSerialNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindSerialNumberResponse) SetBody(v *UnbindSerialNumberResponseBody) *UnbindSerialNumberResponse {
	s.Body = v
	return s
}

type UnbindSmartAccessGatewayRequest struct {
	CcnId                *string `json:"CcnId,omitempty" xml:"CcnId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGUid           *int64  `json:"SmartAGUid,omitempty" xml:"SmartAGUid,omitempty"`
}

func (s UnbindSmartAccessGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindSmartAccessGatewayRequest) GoString() string {
	return s.String()
}

func (s *UnbindSmartAccessGatewayRequest) SetCcnId(v string) *UnbindSmartAccessGatewayRequest {
	s.CcnId = &v
	return s
}

func (s *UnbindSmartAccessGatewayRequest) SetOwnerAccount(v string) *UnbindSmartAccessGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnbindSmartAccessGatewayRequest) SetOwnerId(v int64) *UnbindSmartAccessGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *UnbindSmartAccessGatewayRequest) SetRegionId(v string) *UnbindSmartAccessGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *UnbindSmartAccessGatewayRequest) SetResourceOwnerAccount(v string) *UnbindSmartAccessGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnbindSmartAccessGatewayRequest) SetResourceOwnerId(v int64) *UnbindSmartAccessGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnbindSmartAccessGatewayRequest) SetSmartAGId(v string) *UnbindSmartAccessGatewayRequest {
	s.SmartAGId = &v
	return s
}

func (s *UnbindSmartAccessGatewayRequest) SetSmartAGUid(v int64) *UnbindSmartAccessGatewayRequest {
	s.SmartAGUid = &v
	return s
}

type UnbindSmartAccessGatewayResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindSmartAccessGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindSmartAccessGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindSmartAccessGatewayResponseBody) SetRequestId(v string) *UnbindSmartAccessGatewayResponseBody {
	s.RequestId = &v
	return s
}

type UnbindSmartAccessGatewayResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UnbindSmartAccessGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindSmartAccessGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindSmartAccessGatewayResponse) GoString() string {
	return s.String()
}

func (s *UnbindSmartAccessGatewayResponse) SetHeaders(v map[string]*string) *UnbindSmartAccessGatewayResponse {
	s.Headers = v
	return s
}

func (s *UnbindSmartAccessGatewayResponse) SetStatusCode(v int32) *UnbindSmartAccessGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindSmartAccessGatewayResponse) SetBody(v *UnbindSmartAccessGatewayResponseBody) *UnbindSmartAccessGatewayResponse {
	s.Body = v
	return s
}

type UnbindVbrRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	SmartAGUid           *int64  `json:"SmartAGUid,omitempty" xml:"SmartAGUid,omitempty"`
	VbrId                *string `json:"VbrId,omitempty" xml:"VbrId,omitempty"`
	VbrRegionId          *string `json:"VbrRegionId,omitempty" xml:"VbrRegionId,omitempty"`
}

func (s UnbindVbrRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindVbrRequest) GoString() string {
	return s.String()
}

func (s *UnbindVbrRequest) SetOwnerAccount(v string) *UnbindVbrRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnbindVbrRequest) SetOwnerId(v int64) *UnbindVbrRequest {
	s.OwnerId = &v
	return s
}

func (s *UnbindVbrRequest) SetRegionId(v string) *UnbindVbrRequest {
	s.RegionId = &v
	return s
}

func (s *UnbindVbrRequest) SetResourceOwnerAccount(v string) *UnbindVbrRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnbindVbrRequest) SetResourceOwnerId(v int64) *UnbindVbrRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnbindVbrRequest) SetSmartAGId(v string) *UnbindVbrRequest {
	s.SmartAGId = &v
	return s
}

func (s *UnbindVbrRequest) SetSmartAGUid(v int64) *UnbindVbrRequest {
	s.SmartAGUid = &v
	return s
}

func (s *UnbindVbrRequest) SetVbrId(v string) *UnbindVbrRequest {
	s.VbrId = &v
	return s
}

func (s *UnbindVbrRequest) SetVbrRegionId(v string) *UnbindVbrRequest {
	s.VbrRegionId = &v
	return s
}

type UnbindVbrResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindVbrResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindVbrResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindVbrResponseBody) SetRequestId(v string) *UnbindVbrResponseBody {
	s.RequestId = &v
	return s
}

type UnbindVbrResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UnbindVbrResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindVbrResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindVbrResponse) GoString() string {
	return s.String()
}

func (s *UnbindVbrResponse) SetHeaders(v map[string]*string) *UnbindVbrResponse {
	s.Headers = v
	return s
}

func (s *UnbindVbrResponse) SetStatusCode(v int32) *UnbindVbrResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindVbrResponse) SetBody(v *UnbindVbrResponseBody) *UnbindVbrResponse {
	s.Body = v
	return s
}

type UnlockSmartAccessGatewayRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s UnlockSmartAccessGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s UnlockSmartAccessGatewayRequest) GoString() string {
	return s.String()
}

func (s *UnlockSmartAccessGatewayRequest) SetOwnerAccount(v string) *UnlockSmartAccessGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnlockSmartAccessGatewayRequest) SetOwnerId(v int64) *UnlockSmartAccessGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *UnlockSmartAccessGatewayRequest) SetRegionId(v string) *UnlockSmartAccessGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *UnlockSmartAccessGatewayRequest) SetResourceOwnerAccount(v string) *UnlockSmartAccessGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnlockSmartAccessGatewayRequest) SetResourceOwnerId(v int64) *UnlockSmartAccessGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnlockSmartAccessGatewayRequest) SetSmartAGId(v string) *UnlockSmartAccessGatewayRequest {
	s.SmartAGId = &v
	return s
}

type UnlockSmartAccessGatewayResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnlockSmartAccessGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnlockSmartAccessGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *UnlockSmartAccessGatewayResponseBody) SetRequestId(v string) *UnlockSmartAccessGatewayResponseBody {
	s.RequestId = &v
	return s
}

type UnlockSmartAccessGatewayResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UnlockSmartAccessGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnlockSmartAccessGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s UnlockSmartAccessGatewayResponse) GoString() string {
	return s.String()
}

func (s *UnlockSmartAccessGatewayResponse) SetHeaders(v map[string]*string) *UnlockSmartAccessGatewayResponse {
	s.Headers = v
	return s
}

func (s *UnlockSmartAccessGatewayResponse) SetStatusCode(v int32) *UnlockSmartAccessGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *UnlockSmartAccessGatewayResponse) SetBody(v *UnlockSmartAccessGatewayResponseBody) *UnlockSmartAccessGatewayResponse {
	s.Body = v
	return s
}

type UpdateEnterpriseCodeRequest struct {
	ClientToken    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	EnterpriseCode *string `json:"EnterpriseCode,omitempty" xml:"EnterpriseCode,omitempty"`
	IsDefault      *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpdateEnterpriseCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnterpriseCodeRequest) GoString() string {
	return s.String()
}

func (s *UpdateEnterpriseCodeRequest) SetClientToken(v string) *UpdateEnterpriseCodeRequest {
	s.ClientToken = &v
	return s
}

func (s *UpdateEnterpriseCodeRequest) SetEnterpriseCode(v string) *UpdateEnterpriseCodeRequest {
	s.EnterpriseCode = &v
	return s
}

func (s *UpdateEnterpriseCodeRequest) SetIsDefault(v bool) *UpdateEnterpriseCodeRequest {
	s.IsDefault = &v
	return s
}

func (s *UpdateEnterpriseCodeRequest) SetRegionId(v string) *UpdateEnterpriseCodeRequest {
	s.RegionId = &v
	return s
}

type UpdateEnterpriseCodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateEnterpriseCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnterpriseCodeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEnterpriseCodeResponseBody) SetRequestId(v string) *UpdateEnterpriseCodeResponseBody {
	s.RequestId = &v
	return s
}

type UpdateEnterpriseCodeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateEnterpriseCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateEnterpriseCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnterpriseCodeResponse) GoString() string {
	return s.String()
}

func (s *UpdateEnterpriseCodeResponse) SetHeaders(v map[string]*string) *UpdateEnterpriseCodeResponse {
	s.Headers = v
	return s
}

func (s *UpdateEnterpriseCodeResponse) SetStatusCode(v int32) *UpdateEnterpriseCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateEnterpriseCodeResponse) SetBody(v *UpdateEnterpriseCodeResponseBody) *UpdateEnterpriseCodeResponse {
	s.Body = v
	return s
}

type UpdateProbeTaskRequest struct {
	Domain                 *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Enable                 *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	PacketNumber           *int32  `json:"PacketNumber,omitempty" xml:"PacketNumber,omitempty"`
	Port                   *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	ProbeTaskId            *string `json:"ProbeTaskId,omitempty" xml:"ProbeTaskId,omitempty"`
	ProbeTaskSourceAddress *string `json:"ProbeTaskSourceAddress,omitempty" xml:"ProbeTaskSourceAddress,omitempty"`
	Protocol               *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SagId                  *string `json:"SagId,omitempty" xml:"SagId,omitempty"`
	Sn                     *string `json:"Sn,omitempty" xml:"Sn,omitempty"`
	TaskName               *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s UpdateProbeTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProbeTaskRequest) GoString() string {
	return s.String()
}

func (s *UpdateProbeTaskRequest) SetDomain(v string) *UpdateProbeTaskRequest {
	s.Domain = &v
	return s
}

func (s *UpdateProbeTaskRequest) SetEnable(v bool) *UpdateProbeTaskRequest {
	s.Enable = &v
	return s
}

func (s *UpdateProbeTaskRequest) SetPacketNumber(v int32) *UpdateProbeTaskRequest {
	s.PacketNumber = &v
	return s
}

func (s *UpdateProbeTaskRequest) SetPort(v int32) *UpdateProbeTaskRequest {
	s.Port = &v
	return s
}

func (s *UpdateProbeTaskRequest) SetProbeTaskId(v string) *UpdateProbeTaskRequest {
	s.ProbeTaskId = &v
	return s
}

func (s *UpdateProbeTaskRequest) SetProbeTaskSourceAddress(v string) *UpdateProbeTaskRequest {
	s.ProbeTaskSourceAddress = &v
	return s
}

func (s *UpdateProbeTaskRequest) SetProtocol(v string) *UpdateProbeTaskRequest {
	s.Protocol = &v
	return s
}

func (s *UpdateProbeTaskRequest) SetRegionId(v string) *UpdateProbeTaskRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateProbeTaskRequest) SetSagId(v string) *UpdateProbeTaskRequest {
	s.SagId = &v
	return s
}

func (s *UpdateProbeTaskRequest) SetSn(v string) *UpdateProbeTaskRequest {
	s.Sn = &v
	return s
}

func (s *UpdateProbeTaskRequest) SetTaskName(v string) *UpdateProbeTaskRequest {
	s.TaskName = &v
	return s
}

type UpdateProbeTaskResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateProbeTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProbeTaskResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProbeTaskResponseBody) SetCode(v string) *UpdateProbeTaskResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateProbeTaskResponseBody) SetMessage(v string) *UpdateProbeTaskResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateProbeTaskResponseBody) SetRequestId(v string) *UpdateProbeTaskResponseBody {
	s.RequestId = &v
	return s
}

type UpdateProbeTaskResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateProbeTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateProbeTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProbeTaskResponse) GoString() string {
	return s.String()
}

func (s *UpdateProbeTaskResponse) SetHeaders(v map[string]*string) *UpdateProbeTaskResponse {
	s.Headers = v
	return s
}

func (s *UpdateProbeTaskResponse) SetStatusCode(v int32) *UpdateProbeTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateProbeTaskResponse) SetBody(v *UpdateProbeTaskResponseBody) *UpdateProbeTaskResponse {
	s.Body = v
	return s
}

type UpdateSmartAGAccessPointRequest struct {
	AccessPointId        *int32  `json:"AccessPointId,omitempty" xml:"AccessPointId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s UpdateSmartAGAccessPointRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAGAccessPointRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartAGAccessPointRequest) SetAccessPointId(v int32) *UpdateSmartAGAccessPointRequest {
	s.AccessPointId = &v
	return s
}

func (s *UpdateSmartAGAccessPointRequest) SetOwnerAccount(v string) *UpdateSmartAGAccessPointRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateSmartAGAccessPointRequest) SetOwnerId(v int64) *UpdateSmartAGAccessPointRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateSmartAGAccessPointRequest) SetRegionId(v string) *UpdateSmartAGAccessPointRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSmartAGAccessPointRequest) SetResourceOwnerAccount(v string) *UpdateSmartAGAccessPointRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateSmartAGAccessPointRequest) SetResourceOwnerId(v int64) *UpdateSmartAGAccessPointRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateSmartAGAccessPointRequest) SetSmartAGId(v string) *UpdateSmartAGAccessPointRequest {
	s.SmartAGId = &v
	return s
}

type UpdateSmartAGAccessPointResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateSmartAGAccessPointResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAGAccessPointResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartAGAccessPointResponseBody) SetRequestId(v string) *UpdateSmartAGAccessPointResponseBody {
	s.RequestId = &v
	return s
}

type UpdateSmartAGAccessPointResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartAGAccessPointResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartAGAccessPointResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAGAccessPointResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartAGAccessPointResponse) SetHeaders(v map[string]*string) *UpdateSmartAGAccessPointResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartAGAccessPointResponse) SetStatusCode(v int32) *UpdateSmartAGAccessPointResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartAGAccessPointResponse) SetBody(v *UpdateSmartAGAccessPointResponseBody) *UpdateSmartAGAccessPointResponse {
	s.Body = v
	return s
}

type UpdateSmartAGDpiAttributeRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DpiEnabled           *bool   `json:"DpiEnabled,omitempty" xml:"DpiEnabled,omitempty"`
	DryRun               *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s UpdateSmartAGDpiAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAGDpiAttributeRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartAGDpiAttributeRequest) SetClientToken(v string) *UpdateSmartAGDpiAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *UpdateSmartAGDpiAttributeRequest) SetDpiEnabled(v bool) *UpdateSmartAGDpiAttributeRequest {
	s.DpiEnabled = &v
	return s
}

func (s *UpdateSmartAGDpiAttributeRequest) SetDryRun(v bool) *UpdateSmartAGDpiAttributeRequest {
	s.DryRun = &v
	return s
}

func (s *UpdateSmartAGDpiAttributeRequest) SetOwnerAccount(v string) *UpdateSmartAGDpiAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateSmartAGDpiAttributeRequest) SetOwnerId(v int64) *UpdateSmartAGDpiAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateSmartAGDpiAttributeRequest) SetRegionId(v string) *UpdateSmartAGDpiAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSmartAGDpiAttributeRequest) SetResourceOwnerAccount(v string) *UpdateSmartAGDpiAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateSmartAGDpiAttributeRequest) SetResourceOwnerId(v int64) *UpdateSmartAGDpiAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateSmartAGDpiAttributeRequest) SetSmartAGId(v string) *UpdateSmartAGDpiAttributeRequest {
	s.SmartAGId = &v
	return s
}

type UpdateSmartAGDpiAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateSmartAGDpiAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAGDpiAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartAGDpiAttributeResponseBody) SetRequestId(v string) *UpdateSmartAGDpiAttributeResponseBody {
	s.RequestId = &v
	return s
}

type UpdateSmartAGDpiAttributeResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartAGDpiAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartAGDpiAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAGDpiAttributeResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartAGDpiAttributeResponse) SetHeaders(v map[string]*string) *UpdateSmartAGDpiAttributeResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartAGDpiAttributeResponse) SetStatusCode(v int32) *UpdateSmartAGDpiAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartAGDpiAttributeResponse) SetBody(v *UpdateSmartAGDpiAttributeResponseBody) *UpdateSmartAGDpiAttributeResponse {
	s.Body = v
	return s
}

type UpdateSmartAGEnterpriseCodeRequest struct {
	ClientToken    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	EnterpriseCode *string `json:"EnterpriseCode,omitempty" xml:"EnterpriseCode,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SmartAGId      *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s UpdateSmartAGEnterpriseCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAGEnterpriseCodeRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartAGEnterpriseCodeRequest) SetClientToken(v string) *UpdateSmartAGEnterpriseCodeRequest {
	s.ClientToken = &v
	return s
}

func (s *UpdateSmartAGEnterpriseCodeRequest) SetEnterpriseCode(v string) *UpdateSmartAGEnterpriseCodeRequest {
	s.EnterpriseCode = &v
	return s
}

func (s *UpdateSmartAGEnterpriseCodeRequest) SetRegionId(v string) *UpdateSmartAGEnterpriseCodeRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSmartAGEnterpriseCodeRequest) SetSmartAGId(v string) *UpdateSmartAGEnterpriseCodeRequest {
	s.SmartAGId = &v
	return s
}

type UpdateSmartAGEnterpriseCodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateSmartAGEnterpriseCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAGEnterpriseCodeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartAGEnterpriseCodeResponseBody) SetRequestId(v string) *UpdateSmartAGEnterpriseCodeResponseBody {
	s.RequestId = &v
	return s
}

type UpdateSmartAGEnterpriseCodeResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartAGEnterpriseCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartAGEnterpriseCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAGEnterpriseCodeResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartAGEnterpriseCodeResponse) SetHeaders(v map[string]*string) *UpdateSmartAGEnterpriseCodeResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartAGEnterpriseCodeResponse) SetStatusCode(v int32) *UpdateSmartAGEnterpriseCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartAGEnterpriseCodeResponse) SetBody(v *UpdateSmartAGEnterpriseCodeResponseBody) *UpdateSmartAGEnterpriseCodeResponse {
	s.Body = v
	return s
}

type UpdateSmartAGUserAccelerateConfigRequest struct {
	Bandwidth   *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DryRun      *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SmartAGId   *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	UserName    *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s UpdateSmartAGUserAccelerateConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAGUserAccelerateConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartAGUserAccelerateConfigRequest) SetBandwidth(v int32) *UpdateSmartAGUserAccelerateConfigRequest {
	s.Bandwidth = &v
	return s
}

func (s *UpdateSmartAGUserAccelerateConfigRequest) SetClientToken(v string) *UpdateSmartAGUserAccelerateConfigRequest {
	s.ClientToken = &v
	return s
}

func (s *UpdateSmartAGUserAccelerateConfigRequest) SetDryRun(v bool) *UpdateSmartAGUserAccelerateConfigRequest {
	s.DryRun = &v
	return s
}

func (s *UpdateSmartAGUserAccelerateConfigRequest) SetRegionId(v string) *UpdateSmartAGUserAccelerateConfigRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSmartAGUserAccelerateConfigRequest) SetSmartAGId(v string) *UpdateSmartAGUserAccelerateConfigRequest {
	s.SmartAGId = &v
	return s
}

func (s *UpdateSmartAGUserAccelerateConfigRequest) SetUserName(v string) *UpdateSmartAGUserAccelerateConfigRequest {
	s.UserName = &v
	return s
}

type UpdateSmartAGUserAccelerateConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateSmartAGUserAccelerateConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAGUserAccelerateConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartAGUserAccelerateConfigResponseBody) SetRequestId(v string) *UpdateSmartAGUserAccelerateConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateSmartAGUserAccelerateConfigResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartAGUserAccelerateConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartAGUserAccelerateConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAGUserAccelerateConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartAGUserAccelerateConfigResponse) SetHeaders(v map[string]*string) *UpdateSmartAGUserAccelerateConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartAGUserAccelerateConfigResponse) SetStatusCode(v int32) *UpdateSmartAGUserAccelerateConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartAGUserAccelerateConfigResponse) SetBody(v *UpdateSmartAGUserAccelerateConfigResponseBody) *UpdateSmartAGUserAccelerateConfigResponse {
	s.Body = v
	return s
}

type UpdateSmartAccessGatewayAdminPasswordRequest struct {
	CrossAccount *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	Password     *string `json:"Password,omitempty" xml:"Password,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceUid  *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	SagInsId     *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn        *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
}

func (s UpdateSmartAccessGatewayAdminPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayAdminPasswordRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayAdminPasswordRequest) SetCrossAccount(v bool) *UpdateSmartAccessGatewayAdminPasswordRequest {
	s.CrossAccount = &v
	return s
}

func (s *UpdateSmartAccessGatewayAdminPasswordRequest) SetPassword(v string) *UpdateSmartAccessGatewayAdminPasswordRequest {
	s.Password = &v
	return s
}

func (s *UpdateSmartAccessGatewayAdminPasswordRequest) SetRegionId(v string) *UpdateSmartAccessGatewayAdminPasswordRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSmartAccessGatewayAdminPasswordRequest) SetResourceUid(v string) *UpdateSmartAccessGatewayAdminPasswordRequest {
	s.ResourceUid = &v
	return s
}

func (s *UpdateSmartAccessGatewayAdminPasswordRequest) SetSagInsId(v string) *UpdateSmartAccessGatewayAdminPasswordRequest {
	s.SagInsId = &v
	return s
}

func (s *UpdateSmartAccessGatewayAdminPasswordRequest) SetSagSn(v string) *UpdateSmartAccessGatewayAdminPasswordRequest {
	s.SagSn = &v
	return s
}

type UpdateSmartAccessGatewayAdminPasswordResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateSmartAccessGatewayAdminPasswordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayAdminPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayAdminPasswordResponseBody) SetCode(v string) *UpdateSmartAccessGatewayAdminPasswordResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSmartAccessGatewayAdminPasswordResponseBody) SetMessage(v string) *UpdateSmartAccessGatewayAdminPasswordResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSmartAccessGatewayAdminPasswordResponseBody) SetRequestId(v string) *UpdateSmartAccessGatewayAdminPasswordResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSmartAccessGatewayAdminPasswordResponseBody) SetSuccess(v bool) *UpdateSmartAccessGatewayAdminPasswordResponseBody {
	s.Success = &v
	return s
}

type UpdateSmartAccessGatewayAdminPasswordResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartAccessGatewayAdminPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartAccessGatewayAdminPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayAdminPasswordResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayAdminPasswordResponse) SetHeaders(v map[string]*string) *UpdateSmartAccessGatewayAdminPasswordResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartAccessGatewayAdminPasswordResponse) SetStatusCode(v int32) *UpdateSmartAccessGatewayAdminPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartAccessGatewayAdminPasswordResponse) SetBody(v *UpdateSmartAccessGatewayAdminPasswordResponseBody) *UpdateSmartAccessGatewayAdminPasswordResponse {
	s.Body = v
	return s
}

type UpdateSmartAccessGatewayBgpRouteRequest struct {
	CrossAccount *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	HoldTime     *int32  `json:"HoldTime,omitempty" xml:"HoldTime,omitempty"`
	KeepAlive    *int32  `json:"KeepAlive,omitempty" xml:"KeepAlive,omitempty"`
	LocalAs      *int64  `json:"LocalAs,omitempty" xml:"LocalAs,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceUid  *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	RouterId     *string `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	SagInsId     *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn        *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
}

func (s UpdateSmartAccessGatewayBgpRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayBgpRouteRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayBgpRouteRequest) SetCrossAccount(v bool) *UpdateSmartAccessGatewayBgpRouteRequest {
	s.CrossAccount = &v
	return s
}

func (s *UpdateSmartAccessGatewayBgpRouteRequest) SetHoldTime(v int32) *UpdateSmartAccessGatewayBgpRouteRequest {
	s.HoldTime = &v
	return s
}

func (s *UpdateSmartAccessGatewayBgpRouteRequest) SetKeepAlive(v int32) *UpdateSmartAccessGatewayBgpRouteRequest {
	s.KeepAlive = &v
	return s
}

func (s *UpdateSmartAccessGatewayBgpRouteRequest) SetLocalAs(v int64) *UpdateSmartAccessGatewayBgpRouteRequest {
	s.LocalAs = &v
	return s
}

func (s *UpdateSmartAccessGatewayBgpRouteRequest) SetRegionId(v string) *UpdateSmartAccessGatewayBgpRouteRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSmartAccessGatewayBgpRouteRequest) SetResourceUid(v string) *UpdateSmartAccessGatewayBgpRouteRequest {
	s.ResourceUid = &v
	return s
}

func (s *UpdateSmartAccessGatewayBgpRouteRequest) SetRouterId(v string) *UpdateSmartAccessGatewayBgpRouteRequest {
	s.RouterId = &v
	return s
}

func (s *UpdateSmartAccessGatewayBgpRouteRequest) SetSagInsId(v string) *UpdateSmartAccessGatewayBgpRouteRequest {
	s.SagInsId = &v
	return s
}

func (s *UpdateSmartAccessGatewayBgpRouteRequest) SetSagSn(v string) *UpdateSmartAccessGatewayBgpRouteRequest {
	s.SagSn = &v
	return s
}

type UpdateSmartAccessGatewayBgpRouteResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateSmartAccessGatewayBgpRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayBgpRouteResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayBgpRouteResponseBody) SetCode(v string) *UpdateSmartAccessGatewayBgpRouteResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSmartAccessGatewayBgpRouteResponseBody) SetMessage(v string) *UpdateSmartAccessGatewayBgpRouteResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSmartAccessGatewayBgpRouteResponseBody) SetRequestId(v string) *UpdateSmartAccessGatewayBgpRouteResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSmartAccessGatewayBgpRouteResponseBody) SetSuccess(v bool) *UpdateSmartAccessGatewayBgpRouteResponseBody {
	s.Success = &v
	return s
}

type UpdateSmartAccessGatewayBgpRouteResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartAccessGatewayBgpRouteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartAccessGatewayBgpRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayBgpRouteResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayBgpRouteResponse) SetHeaders(v map[string]*string) *UpdateSmartAccessGatewayBgpRouteResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartAccessGatewayBgpRouteResponse) SetStatusCode(v int32) *UpdateSmartAccessGatewayBgpRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartAccessGatewayBgpRouteResponse) SetBody(v *UpdateSmartAccessGatewayBgpRouteResponseBody) *UpdateSmartAccessGatewayBgpRouteResponse {
	s.Body = v
	return s
}

type UpdateSmartAccessGatewayDnsRequest struct {
	CrossAccount *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	MasterDns    *string `json:"MasterDns,omitempty" xml:"MasterDns,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceUid  *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	SagInsId     *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn        *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
	SlaveDns     *string `json:"SlaveDns,omitempty" xml:"SlaveDns,omitempty"`
}

func (s UpdateSmartAccessGatewayDnsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayDnsRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayDnsRequest) SetCrossAccount(v bool) *UpdateSmartAccessGatewayDnsRequest {
	s.CrossAccount = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsRequest) SetMasterDns(v string) *UpdateSmartAccessGatewayDnsRequest {
	s.MasterDns = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsRequest) SetRegionId(v string) *UpdateSmartAccessGatewayDnsRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsRequest) SetResourceUid(v string) *UpdateSmartAccessGatewayDnsRequest {
	s.ResourceUid = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsRequest) SetSagInsId(v string) *UpdateSmartAccessGatewayDnsRequest {
	s.SagInsId = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsRequest) SetSagSn(v string) *UpdateSmartAccessGatewayDnsRequest {
	s.SagSn = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsRequest) SetSlaveDns(v string) *UpdateSmartAccessGatewayDnsRequest {
	s.SlaveDns = &v
	return s
}

type UpdateSmartAccessGatewayDnsResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateSmartAccessGatewayDnsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayDnsResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayDnsResponseBody) SetCode(v string) *UpdateSmartAccessGatewayDnsResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsResponseBody) SetMessage(v string) *UpdateSmartAccessGatewayDnsResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsResponseBody) SetRequestId(v string) *UpdateSmartAccessGatewayDnsResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsResponseBody) SetSuccess(v bool) *UpdateSmartAccessGatewayDnsResponseBody {
	s.Success = &v
	return s
}

type UpdateSmartAccessGatewayDnsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartAccessGatewayDnsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartAccessGatewayDnsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayDnsResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayDnsResponse) SetHeaders(v map[string]*string) *UpdateSmartAccessGatewayDnsResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartAccessGatewayDnsResponse) SetStatusCode(v int32) *UpdateSmartAccessGatewayDnsResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsResponse) SetBody(v *UpdateSmartAccessGatewayDnsResponseBody) *UpdateSmartAccessGatewayDnsResponse {
	s.Body = v
	return s
}

type UpdateSmartAccessGatewayDnsForwardRequest struct {
	Domain            *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MasterIp          *string `json:"MasterIp,omitempty" xml:"MasterIp,omitempty"`
	Mode              *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	OutboundPortIndex *int32  `json:"OutboundPortIndex,omitempty" xml:"OutboundPortIndex,omitempty"`
	OutboundPortName  *string `json:"OutboundPortName,omitempty" xml:"OutboundPortName,omitempty"`
	OutboundPortType  *string `json:"OutboundPortType,omitempty" xml:"OutboundPortType,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SagInsId          *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn             *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
	SlaveIp           *string `json:"SlaveIp,omitempty" xml:"SlaveIp,omitempty"`
}

func (s UpdateSmartAccessGatewayDnsForwardRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayDnsForwardRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayDnsForwardRequest) SetDomain(v string) *UpdateSmartAccessGatewayDnsForwardRequest {
	s.Domain = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardRequest) SetInstanceId(v string) *UpdateSmartAccessGatewayDnsForwardRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardRequest) SetMasterIp(v string) *UpdateSmartAccessGatewayDnsForwardRequest {
	s.MasterIp = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardRequest) SetMode(v string) *UpdateSmartAccessGatewayDnsForwardRequest {
	s.Mode = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardRequest) SetOutboundPortIndex(v int32) *UpdateSmartAccessGatewayDnsForwardRequest {
	s.OutboundPortIndex = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardRequest) SetOutboundPortName(v string) *UpdateSmartAccessGatewayDnsForwardRequest {
	s.OutboundPortName = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardRequest) SetOutboundPortType(v string) *UpdateSmartAccessGatewayDnsForwardRequest {
	s.OutboundPortType = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardRequest) SetRegionId(v string) *UpdateSmartAccessGatewayDnsForwardRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardRequest) SetSagInsId(v string) *UpdateSmartAccessGatewayDnsForwardRequest {
	s.SagInsId = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardRequest) SetSagSn(v string) *UpdateSmartAccessGatewayDnsForwardRequest {
	s.SagSn = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardRequest) SetSlaveIp(v string) *UpdateSmartAccessGatewayDnsForwardRequest {
	s.SlaveIp = &v
	return s
}

type UpdateSmartAccessGatewayDnsForwardResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateSmartAccessGatewayDnsForwardResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayDnsForwardResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayDnsForwardResponseBody) SetCode(v string) *UpdateSmartAccessGatewayDnsForwardResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardResponseBody) SetHttpStatusCode(v string) *UpdateSmartAccessGatewayDnsForwardResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardResponseBody) SetMessage(v string) *UpdateSmartAccessGatewayDnsForwardResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardResponseBody) SetRequestId(v string) *UpdateSmartAccessGatewayDnsForwardResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardResponseBody) SetSuccess(v string) *UpdateSmartAccessGatewayDnsForwardResponseBody {
	s.Success = &v
	return s
}

type UpdateSmartAccessGatewayDnsForwardResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartAccessGatewayDnsForwardResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartAccessGatewayDnsForwardResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayDnsForwardResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayDnsForwardResponse) SetHeaders(v map[string]*string) *UpdateSmartAccessGatewayDnsForwardResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardResponse) SetStatusCode(v int32) *UpdateSmartAccessGatewayDnsForwardResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartAccessGatewayDnsForwardResponse) SetBody(v *UpdateSmartAccessGatewayDnsForwardResponseBody) *UpdateSmartAccessGatewayDnsForwardResponse {
	s.Body = v
	return s
}

type UpdateSmartAccessGatewayGlobalRouteProtocolRequest struct {
	CrossAccount  *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceUid   *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	RouteProtocol *string `json:"RouteProtocol,omitempty" xml:"RouteProtocol,omitempty"`
	SagInsId      *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn         *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
}

func (s UpdateSmartAccessGatewayGlobalRouteProtocolRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayGlobalRouteProtocolRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayGlobalRouteProtocolRequest) SetCrossAccount(v bool) *UpdateSmartAccessGatewayGlobalRouteProtocolRequest {
	s.CrossAccount = &v
	return s
}

func (s *UpdateSmartAccessGatewayGlobalRouteProtocolRequest) SetRegionId(v string) *UpdateSmartAccessGatewayGlobalRouteProtocolRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSmartAccessGatewayGlobalRouteProtocolRequest) SetResourceUid(v string) *UpdateSmartAccessGatewayGlobalRouteProtocolRequest {
	s.ResourceUid = &v
	return s
}

func (s *UpdateSmartAccessGatewayGlobalRouteProtocolRequest) SetRouteProtocol(v string) *UpdateSmartAccessGatewayGlobalRouteProtocolRequest {
	s.RouteProtocol = &v
	return s
}

func (s *UpdateSmartAccessGatewayGlobalRouteProtocolRequest) SetSagInsId(v string) *UpdateSmartAccessGatewayGlobalRouteProtocolRequest {
	s.SagInsId = &v
	return s
}

func (s *UpdateSmartAccessGatewayGlobalRouteProtocolRequest) SetSagSn(v string) *UpdateSmartAccessGatewayGlobalRouteProtocolRequest {
	s.SagSn = &v
	return s
}

type UpdateSmartAccessGatewayGlobalRouteProtocolResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateSmartAccessGatewayGlobalRouteProtocolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayGlobalRouteProtocolResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayGlobalRouteProtocolResponseBody) SetCode(v string) *UpdateSmartAccessGatewayGlobalRouteProtocolResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSmartAccessGatewayGlobalRouteProtocolResponseBody) SetMessage(v string) *UpdateSmartAccessGatewayGlobalRouteProtocolResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSmartAccessGatewayGlobalRouteProtocolResponseBody) SetRequestId(v string) *UpdateSmartAccessGatewayGlobalRouteProtocolResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSmartAccessGatewayGlobalRouteProtocolResponseBody) SetSuccess(v bool) *UpdateSmartAccessGatewayGlobalRouteProtocolResponseBody {
	s.Success = &v
	return s
}

type UpdateSmartAccessGatewayGlobalRouteProtocolResponse struct {
	Headers    map[string]*string                                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartAccessGatewayGlobalRouteProtocolResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartAccessGatewayGlobalRouteProtocolResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayGlobalRouteProtocolResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayGlobalRouteProtocolResponse) SetHeaders(v map[string]*string) *UpdateSmartAccessGatewayGlobalRouteProtocolResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartAccessGatewayGlobalRouteProtocolResponse) SetStatusCode(v int32) *UpdateSmartAccessGatewayGlobalRouteProtocolResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartAccessGatewayGlobalRouteProtocolResponse) SetBody(v *UpdateSmartAccessGatewayGlobalRouteProtocolResponseBody) *UpdateSmartAccessGatewayGlobalRouteProtocolResponse {
	s.Body = v
	return s
}

type UpdateSmartAccessGatewayOspfRouteRequest struct {
	AreaId               *int32  `json:"AreaId,omitempty" xml:"AreaId,omitempty"`
	AuthenticationType   *string `json:"AuthenticationType,omitempty" xml:"AuthenticationType,omitempty"`
	CrossAccount         *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	DeadTime             *int32  `json:"DeadTime,omitempty" xml:"DeadTime,omitempty"`
	HelloTime            *int32  `json:"HelloTime,omitempty" xml:"HelloTime,omitempty"`
	InterfaceName        *string `json:"InterfaceName,omitempty" xml:"InterfaceName,omitempty"`
	Md5Key               *string `json:"Md5Key,omitempty" xml:"Md5Key,omitempty"`
	Md5KeyId             *int32  `json:"Md5KeyId,omitempty" xml:"Md5KeyId,omitempty"`
	Networks             *string `json:"Networks,omitempty" xml:"Networks,omitempty"`
	OspfCost             *int32  `json:"OspfCost,omitempty" xml:"OspfCost,omitempty"`
	OspfNetworkType      *string `json:"OspfNetworkType,omitempty" xml:"OspfNetworkType,omitempty"`
	Password             *string `json:"Password,omitempty" xml:"Password,omitempty"`
	RedistributeProtocol *string `json:"RedistributeProtocol,omitempty" xml:"RedistributeProtocol,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceUid          *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	RouterId             *string `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	SagInsId             *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn                *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
}

func (s UpdateSmartAccessGatewayOspfRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayOspfRouteRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetAreaId(v int32) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.AreaId = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetAuthenticationType(v string) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.AuthenticationType = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetCrossAccount(v bool) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.CrossAccount = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetDeadTime(v int32) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.DeadTime = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetHelloTime(v int32) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.HelloTime = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetInterfaceName(v string) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.InterfaceName = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetMd5Key(v string) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.Md5Key = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetMd5KeyId(v int32) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.Md5KeyId = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetNetworks(v string) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.Networks = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetOspfCost(v int32) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.OspfCost = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetOspfNetworkType(v string) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.OspfNetworkType = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetPassword(v string) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.Password = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetRedistributeProtocol(v string) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.RedistributeProtocol = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetRegionId(v string) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetResourceUid(v string) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.ResourceUid = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetRouterId(v string) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.RouterId = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetSagInsId(v string) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.SagInsId = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteRequest) SetSagSn(v string) *UpdateSmartAccessGatewayOspfRouteRequest {
	s.SagSn = &v
	return s
}

type UpdateSmartAccessGatewayOspfRouteResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateSmartAccessGatewayOspfRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayOspfRouteResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayOspfRouteResponseBody) SetCode(v string) *UpdateSmartAccessGatewayOspfRouteResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteResponseBody) SetMessage(v string) *UpdateSmartAccessGatewayOspfRouteResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteResponseBody) SetRequestId(v string) *UpdateSmartAccessGatewayOspfRouteResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteResponseBody) SetSuccess(v bool) *UpdateSmartAccessGatewayOspfRouteResponseBody {
	s.Success = &v
	return s
}

type UpdateSmartAccessGatewayOspfRouteResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartAccessGatewayOspfRouteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartAccessGatewayOspfRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayOspfRouteResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayOspfRouteResponse) SetHeaders(v map[string]*string) *UpdateSmartAccessGatewayOspfRouteResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteResponse) SetStatusCode(v int32) *UpdateSmartAccessGatewayOspfRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartAccessGatewayOspfRouteResponse) SetBody(v *UpdateSmartAccessGatewayOspfRouteResponseBody) *UpdateSmartAccessGatewayOspfRouteResponse {
	s.Body = v
	return s
}

type UpdateSmartAccessGatewayPortRouteProtocolRequest struct {
	CrossAccount  *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	PortName      *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RemoteAs      *string `json:"RemoteAs,omitempty" xml:"RemoteAs,omitempty"`
	RemoteIp      *string `json:"RemoteIp,omitempty" xml:"RemoteIp,omitempty"`
	ResourceUid   *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	RouteProtocol *string `json:"RouteProtocol,omitempty" xml:"RouteProtocol,omitempty"`
	SagInsId      *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn         *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
	Vlan          *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s UpdateSmartAccessGatewayPortRouteProtocolRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayPortRouteProtocolRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolRequest) SetCrossAccount(v bool) *UpdateSmartAccessGatewayPortRouteProtocolRequest {
	s.CrossAccount = &v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolRequest) SetPortName(v string) *UpdateSmartAccessGatewayPortRouteProtocolRequest {
	s.PortName = &v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolRequest) SetRegionId(v string) *UpdateSmartAccessGatewayPortRouteProtocolRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolRequest) SetRemoteAs(v string) *UpdateSmartAccessGatewayPortRouteProtocolRequest {
	s.RemoteAs = &v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolRequest) SetRemoteIp(v string) *UpdateSmartAccessGatewayPortRouteProtocolRequest {
	s.RemoteIp = &v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolRequest) SetResourceUid(v string) *UpdateSmartAccessGatewayPortRouteProtocolRequest {
	s.ResourceUid = &v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolRequest) SetRouteProtocol(v string) *UpdateSmartAccessGatewayPortRouteProtocolRequest {
	s.RouteProtocol = &v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolRequest) SetSagInsId(v string) *UpdateSmartAccessGatewayPortRouteProtocolRequest {
	s.SagInsId = &v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolRequest) SetSagSn(v string) *UpdateSmartAccessGatewayPortRouteProtocolRequest {
	s.SagSn = &v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolRequest) SetVlan(v string) *UpdateSmartAccessGatewayPortRouteProtocolRequest {
	s.Vlan = &v
	return s
}

type UpdateSmartAccessGatewayPortRouteProtocolResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateSmartAccessGatewayPortRouteProtocolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayPortRouteProtocolResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolResponseBody) SetCode(v string) *UpdateSmartAccessGatewayPortRouteProtocolResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolResponseBody) SetMessage(v string) *UpdateSmartAccessGatewayPortRouteProtocolResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolResponseBody) SetRequestId(v string) *UpdateSmartAccessGatewayPortRouteProtocolResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolResponseBody) SetSuccess(v bool) *UpdateSmartAccessGatewayPortRouteProtocolResponseBody {
	s.Success = &v
	return s
}

type UpdateSmartAccessGatewayPortRouteProtocolResponse struct {
	Headers    map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartAccessGatewayPortRouteProtocolResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartAccessGatewayPortRouteProtocolResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayPortRouteProtocolResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolResponse) SetHeaders(v map[string]*string) *UpdateSmartAccessGatewayPortRouteProtocolResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolResponse) SetStatusCode(v int32) *UpdateSmartAccessGatewayPortRouteProtocolResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartAccessGatewayPortRouteProtocolResponse) SetBody(v *UpdateSmartAccessGatewayPortRouteProtocolResponseBody) *UpdateSmartAccessGatewayPortRouteProtocolResponse {
	s.Body = v
	return s
}

type UpdateSmartAccessGatewayVersionRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SerialNumber         *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	VersionCode          *string `json:"VersionCode,omitempty" xml:"VersionCode,omitempty"`
	VersionType          *string `json:"VersionType,omitempty" xml:"VersionType,omitempty"`
}

func (s UpdateSmartAccessGatewayVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayVersionRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayVersionRequest) SetOwnerAccount(v string) *UpdateSmartAccessGatewayVersionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateSmartAccessGatewayVersionRequest) SetOwnerId(v int64) *UpdateSmartAccessGatewayVersionRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateSmartAccessGatewayVersionRequest) SetRegionId(v string) *UpdateSmartAccessGatewayVersionRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSmartAccessGatewayVersionRequest) SetResourceOwnerAccount(v string) *UpdateSmartAccessGatewayVersionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateSmartAccessGatewayVersionRequest) SetResourceOwnerId(v int64) *UpdateSmartAccessGatewayVersionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateSmartAccessGatewayVersionRequest) SetSerialNumber(v string) *UpdateSmartAccessGatewayVersionRequest {
	s.SerialNumber = &v
	return s
}

func (s *UpdateSmartAccessGatewayVersionRequest) SetSmartAGId(v string) *UpdateSmartAccessGatewayVersionRequest {
	s.SmartAGId = &v
	return s
}

func (s *UpdateSmartAccessGatewayVersionRequest) SetVersionCode(v string) *UpdateSmartAccessGatewayVersionRequest {
	s.VersionCode = &v
	return s
}

func (s *UpdateSmartAccessGatewayVersionRequest) SetVersionType(v string) *UpdateSmartAccessGatewayVersionRequest {
	s.VersionType = &v
	return s
}

type UpdateSmartAccessGatewayVersionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateSmartAccessGatewayVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayVersionResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayVersionResponseBody) SetRequestId(v string) *UpdateSmartAccessGatewayVersionResponseBody {
	s.RequestId = &v
	return s
}

type UpdateSmartAccessGatewayVersionResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartAccessGatewayVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartAccessGatewayVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayVersionResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayVersionResponse) SetHeaders(v map[string]*string) *UpdateSmartAccessGatewayVersionResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartAccessGatewayVersionResponse) SetStatusCode(v int32) *UpdateSmartAccessGatewayVersionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartAccessGatewayVersionResponse) SetBody(v *UpdateSmartAccessGatewayVersionResponseBody) *UpdateSmartAccessGatewayVersionResponse {
	s.Body = v
	return s
}

type UpdateSmartAccessGatewayWanSnatRequest struct {
	CrossAccount *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceUid  *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	SagInsId     *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn        *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
	Snat         *string `json:"Snat,omitempty" xml:"Snat,omitempty"`
}

func (s UpdateSmartAccessGatewayWanSnatRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayWanSnatRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayWanSnatRequest) SetCrossAccount(v bool) *UpdateSmartAccessGatewayWanSnatRequest {
	s.CrossAccount = &v
	return s
}

func (s *UpdateSmartAccessGatewayWanSnatRequest) SetRegionId(v string) *UpdateSmartAccessGatewayWanSnatRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateSmartAccessGatewayWanSnatRequest) SetResourceUid(v string) *UpdateSmartAccessGatewayWanSnatRequest {
	s.ResourceUid = &v
	return s
}

func (s *UpdateSmartAccessGatewayWanSnatRequest) SetSagInsId(v string) *UpdateSmartAccessGatewayWanSnatRequest {
	s.SagInsId = &v
	return s
}

func (s *UpdateSmartAccessGatewayWanSnatRequest) SetSagSn(v string) *UpdateSmartAccessGatewayWanSnatRequest {
	s.SagSn = &v
	return s
}

func (s *UpdateSmartAccessGatewayWanSnatRequest) SetSnat(v string) *UpdateSmartAccessGatewayWanSnatRequest {
	s.Snat = &v
	return s
}

type UpdateSmartAccessGatewayWanSnatResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateSmartAccessGatewayWanSnatResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayWanSnatResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayWanSnatResponseBody) SetCode(v string) *UpdateSmartAccessGatewayWanSnatResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSmartAccessGatewayWanSnatResponseBody) SetMessage(v string) *UpdateSmartAccessGatewayWanSnatResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSmartAccessGatewayWanSnatResponseBody) SetRequestId(v string) *UpdateSmartAccessGatewayWanSnatResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSmartAccessGatewayWanSnatResponseBody) SetSuccess(v bool) *UpdateSmartAccessGatewayWanSnatResponseBody {
	s.Success = &v
	return s
}

type UpdateSmartAccessGatewayWanSnatResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartAccessGatewayWanSnatResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartAccessGatewayWanSnatResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartAccessGatewayWanSnatResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartAccessGatewayWanSnatResponse) SetHeaders(v map[string]*string) *UpdateSmartAccessGatewayWanSnatResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartAccessGatewayWanSnatResponse) SetStatusCode(v int32) *UpdateSmartAccessGatewayWanSnatResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartAccessGatewayWanSnatResponse) SetBody(v *UpdateSmartAccessGatewayWanSnatResponseBody) *UpdateSmartAccessGatewayWanSnatResponse {
	s.Body = v
	return s
}

type UpgradeSmartAccessGatewayRequest struct {
	AutoPay              *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	BandWidthSpec        *int64  `json:"BandWidthSpec,omitempty" xml:"BandWidthSpec,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
}

func (s UpgradeSmartAccessGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeSmartAccessGatewayRequest) GoString() string {
	return s.String()
}

func (s *UpgradeSmartAccessGatewayRequest) SetAutoPay(v bool) *UpgradeSmartAccessGatewayRequest {
	s.AutoPay = &v
	return s
}

func (s *UpgradeSmartAccessGatewayRequest) SetBandWidthSpec(v int64) *UpgradeSmartAccessGatewayRequest {
	s.BandWidthSpec = &v
	return s
}

func (s *UpgradeSmartAccessGatewayRequest) SetOwnerAccount(v string) *UpgradeSmartAccessGatewayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpgradeSmartAccessGatewayRequest) SetOwnerId(v int64) *UpgradeSmartAccessGatewayRequest {
	s.OwnerId = &v
	return s
}

func (s *UpgradeSmartAccessGatewayRequest) SetRegionId(v string) *UpgradeSmartAccessGatewayRequest {
	s.RegionId = &v
	return s
}

func (s *UpgradeSmartAccessGatewayRequest) SetResourceOwnerAccount(v string) *UpgradeSmartAccessGatewayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpgradeSmartAccessGatewayRequest) SetResourceOwnerId(v int64) *UpgradeSmartAccessGatewayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpgradeSmartAccessGatewayRequest) SetSmartAGId(v string) *UpgradeSmartAccessGatewayRequest {
	s.SmartAGId = &v
	return s
}

type UpgradeSmartAccessGatewayResponseBody struct {
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpgradeSmartAccessGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeSmartAccessGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeSmartAccessGatewayResponseBody) SetOrderId(v string) *UpgradeSmartAccessGatewayResponseBody {
	s.OrderId = &v
	return s
}

func (s *UpgradeSmartAccessGatewayResponseBody) SetRequestId(v string) *UpgradeSmartAccessGatewayResponseBody {
	s.RequestId = &v
	return s
}

type UpgradeSmartAccessGatewayResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpgradeSmartAccessGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpgradeSmartAccessGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeSmartAccessGatewayResponse) GoString() string {
	return s.String()
}

func (s *UpgradeSmartAccessGatewayResponse) SetHeaders(v map[string]*string) *UpgradeSmartAccessGatewayResponse {
	s.Headers = v
	return s
}

func (s *UpgradeSmartAccessGatewayResponse) SetStatusCode(v int32) *UpgradeSmartAccessGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeSmartAccessGatewayResponse) SetBody(v *UpgradeSmartAccessGatewayResponseBody) *UpgradeSmartAccessGatewayResponse {
	s.Body = v
	return s
}

type UpgradeSmartAccessGatewaySoftwareRequest struct {
	AutoPay              *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	DataPlan             *int64  `json:"DataPlan,omitempty" xml:"DataPlan,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmartAGId            *string `json:"SmartAGId,omitempty" xml:"SmartAGId,omitempty"`
	UserCount            *int32  `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
}

func (s UpgradeSmartAccessGatewaySoftwareRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeSmartAccessGatewaySoftwareRequest) GoString() string {
	return s.String()
}

func (s *UpgradeSmartAccessGatewaySoftwareRequest) SetAutoPay(v bool) *UpgradeSmartAccessGatewaySoftwareRequest {
	s.AutoPay = &v
	return s
}

func (s *UpgradeSmartAccessGatewaySoftwareRequest) SetDataPlan(v int64) *UpgradeSmartAccessGatewaySoftwareRequest {
	s.DataPlan = &v
	return s
}

func (s *UpgradeSmartAccessGatewaySoftwareRequest) SetOwnerAccount(v string) *UpgradeSmartAccessGatewaySoftwareRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpgradeSmartAccessGatewaySoftwareRequest) SetOwnerId(v int64) *UpgradeSmartAccessGatewaySoftwareRequest {
	s.OwnerId = &v
	return s
}

func (s *UpgradeSmartAccessGatewaySoftwareRequest) SetRegionId(v string) *UpgradeSmartAccessGatewaySoftwareRequest {
	s.RegionId = &v
	return s
}

func (s *UpgradeSmartAccessGatewaySoftwareRequest) SetResourceOwnerAccount(v string) *UpgradeSmartAccessGatewaySoftwareRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpgradeSmartAccessGatewaySoftwareRequest) SetResourceOwnerId(v int64) *UpgradeSmartAccessGatewaySoftwareRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpgradeSmartAccessGatewaySoftwareRequest) SetSmartAGId(v string) *UpgradeSmartAccessGatewaySoftwareRequest {
	s.SmartAGId = &v
	return s
}

func (s *UpgradeSmartAccessGatewaySoftwareRequest) SetUserCount(v int32) *UpgradeSmartAccessGatewaySoftwareRequest {
	s.UserCount = &v
	return s
}

type UpgradeSmartAccessGatewaySoftwareResponseBody struct {
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpgradeSmartAccessGatewaySoftwareResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeSmartAccessGatewaySoftwareResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeSmartAccessGatewaySoftwareResponseBody) SetOrderId(v string) *UpgradeSmartAccessGatewaySoftwareResponseBody {
	s.OrderId = &v
	return s
}

func (s *UpgradeSmartAccessGatewaySoftwareResponseBody) SetRequestId(v string) *UpgradeSmartAccessGatewaySoftwareResponseBody {
	s.RequestId = &v
	return s
}

type UpgradeSmartAccessGatewaySoftwareResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpgradeSmartAccessGatewaySoftwareResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpgradeSmartAccessGatewaySoftwareResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeSmartAccessGatewaySoftwareResponse) GoString() string {
	return s.String()
}

func (s *UpgradeSmartAccessGatewaySoftwareResponse) SetHeaders(v map[string]*string) *UpgradeSmartAccessGatewaySoftwareResponse {
	s.Headers = v
	return s
}

func (s *UpgradeSmartAccessGatewaySoftwareResponse) SetStatusCode(v int32) *UpgradeSmartAccessGatewaySoftwareResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeSmartAccessGatewaySoftwareResponse) SetBody(v *UpgradeSmartAccessGatewaySoftwareResponseBody) *UpgradeSmartAccessGatewaySoftwareResponse {
	s.Body = v
	return s
}

type ViewSmartAccessGatewayBgpRouteRequest struct {
	CrossAccount *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceUid  *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	SagInsId     *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn        *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
}

func (s ViewSmartAccessGatewayBgpRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayBgpRouteRequest) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayBgpRouteRequest) SetCrossAccount(v bool) *ViewSmartAccessGatewayBgpRouteRequest {
	s.CrossAccount = &v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteRequest) SetRegionId(v string) *ViewSmartAccessGatewayBgpRouteRequest {
	s.RegionId = &v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteRequest) SetResourceUid(v string) *ViewSmartAccessGatewayBgpRouteRequest {
	s.ResourceUid = &v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteRequest) SetSagInsId(v string) *ViewSmartAccessGatewayBgpRouteRequest {
	s.SagInsId = &v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteRequest) SetSagSn(v string) *ViewSmartAccessGatewayBgpRouteRequest {
	s.SagSn = &v
	return s
}

type ViewSmartAccessGatewayBgpRouteResponseBody struct {
	HoldTime   *int32                                                  `json:"HoldTime,omitempty" xml:"HoldTime,omitempty"`
	KeepAlive  *int32                                                  `json:"KeepAlive,omitempty" xml:"KeepAlive,omitempty"`
	LocalAs    *int32                                                  `json:"LocalAs,omitempty" xml:"LocalAs,omitempty"`
	RequestId  *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RouterId   *string                                                 `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	TaskStates []*ViewSmartAccessGatewayBgpRouteResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s ViewSmartAccessGatewayBgpRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayBgpRouteResponseBody) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayBgpRouteResponseBody) SetHoldTime(v int32) *ViewSmartAccessGatewayBgpRouteResponseBody {
	s.HoldTime = &v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteResponseBody) SetKeepAlive(v int32) *ViewSmartAccessGatewayBgpRouteResponseBody {
	s.KeepAlive = &v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteResponseBody) SetLocalAs(v int32) *ViewSmartAccessGatewayBgpRouteResponseBody {
	s.LocalAs = &v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteResponseBody) SetRequestId(v string) *ViewSmartAccessGatewayBgpRouteResponseBody {
	s.RequestId = &v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteResponseBody) SetRouterId(v string) *ViewSmartAccessGatewayBgpRouteResponseBody {
	s.RouterId = &v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteResponseBody) SetTaskStates(v []*ViewSmartAccessGatewayBgpRouteResponseBodyTaskStates) *ViewSmartAccessGatewayBgpRouteResponseBody {
	s.TaskStates = v
	return s
}

type ViewSmartAccessGatewayBgpRouteResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ViewSmartAccessGatewayBgpRouteResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayBgpRouteResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayBgpRouteResponseBodyTaskStates) SetCreateTime(v string) *ViewSmartAccessGatewayBgpRouteResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteResponseBodyTaskStates) SetErrorCode(v string) *ViewSmartAccessGatewayBgpRouteResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteResponseBodyTaskStates) SetErrorMessage(v string) *ViewSmartAccessGatewayBgpRouteResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteResponseBodyTaskStates) SetState(v string) *ViewSmartAccessGatewayBgpRouteResponseBodyTaskStates {
	s.State = &v
	return s
}

type ViewSmartAccessGatewayBgpRouteResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ViewSmartAccessGatewayBgpRouteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ViewSmartAccessGatewayBgpRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayBgpRouteResponse) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayBgpRouteResponse) SetHeaders(v map[string]*string) *ViewSmartAccessGatewayBgpRouteResponse {
	s.Headers = v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteResponse) SetStatusCode(v int32) *ViewSmartAccessGatewayBgpRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *ViewSmartAccessGatewayBgpRouteResponse) SetBody(v *ViewSmartAccessGatewayBgpRouteResponseBody) *ViewSmartAccessGatewayBgpRouteResponse {
	s.Body = v
	return s
}

type ViewSmartAccessGatewayDnsRequest struct {
	CrossAccount *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceUid  *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	SagInsId     *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn        *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
}

func (s ViewSmartAccessGatewayDnsRequest) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayDnsRequest) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayDnsRequest) SetCrossAccount(v bool) *ViewSmartAccessGatewayDnsRequest {
	s.CrossAccount = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsRequest) SetRegionId(v string) *ViewSmartAccessGatewayDnsRequest {
	s.RegionId = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsRequest) SetResourceUid(v string) *ViewSmartAccessGatewayDnsRequest {
	s.ResourceUid = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsRequest) SetSagInsId(v string) *ViewSmartAccessGatewayDnsRequest {
	s.SagInsId = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsRequest) SetSagSn(v string) *ViewSmartAccessGatewayDnsRequest {
	s.SagSn = &v
	return s
}

type ViewSmartAccessGatewayDnsResponseBody struct {
	MasterDns  *string                                            `json:"MasterDns,omitempty" xml:"MasterDns,omitempty"`
	RequestId  *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SlaveDns   *string                                            `json:"SlaveDns,omitempty" xml:"SlaveDns,omitempty"`
	TaskStates []*ViewSmartAccessGatewayDnsResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s ViewSmartAccessGatewayDnsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayDnsResponseBody) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayDnsResponseBody) SetMasterDns(v string) *ViewSmartAccessGatewayDnsResponseBody {
	s.MasterDns = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsResponseBody) SetRequestId(v string) *ViewSmartAccessGatewayDnsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsResponseBody) SetSlaveDns(v string) *ViewSmartAccessGatewayDnsResponseBody {
	s.SlaveDns = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsResponseBody) SetTaskStates(v []*ViewSmartAccessGatewayDnsResponseBodyTaskStates) *ViewSmartAccessGatewayDnsResponseBody {
	s.TaskStates = v
	return s
}

type ViewSmartAccessGatewayDnsResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ViewSmartAccessGatewayDnsResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayDnsResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayDnsResponseBodyTaskStates) SetCreateTime(v string) *ViewSmartAccessGatewayDnsResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsResponseBodyTaskStates) SetErrorCode(v string) *ViewSmartAccessGatewayDnsResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsResponseBodyTaskStates) SetErrorMessage(v string) *ViewSmartAccessGatewayDnsResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsResponseBodyTaskStates) SetState(v string) *ViewSmartAccessGatewayDnsResponseBodyTaskStates {
	s.State = &v
	return s
}

type ViewSmartAccessGatewayDnsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ViewSmartAccessGatewayDnsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ViewSmartAccessGatewayDnsResponse) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayDnsResponse) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayDnsResponse) SetHeaders(v map[string]*string) *ViewSmartAccessGatewayDnsResponse {
	s.Headers = v
	return s
}

func (s *ViewSmartAccessGatewayDnsResponse) SetStatusCode(v int32) *ViewSmartAccessGatewayDnsResponse {
	s.StatusCode = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsResponse) SetBody(v *ViewSmartAccessGatewayDnsResponseBody) *ViewSmartAccessGatewayDnsResponse {
	s.Body = v
	return s
}

type ViewSmartAccessGatewayDnsForwardsRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SagInsId *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn    *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
}

func (s ViewSmartAccessGatewayDnsForwardsRequest) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayDnsForwardsRequest) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayDnsForwardsRequest) SetRegionId(v string) *ViewSmartAccessGatewayDnsForwardsRequest {
	s.RegionId = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsRequest) SetSagInsId(v string) *ViewSmartAccessGatewayDnsForwardsRequest {
	s.SagInsId = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsRequest) SetSagSn(v string) *ViewSmartAccessGatewayDnsForwardsRequest {
	s.SagSn = &v
	return s
}

type ViewSmartAccessGatewayDnsForwardsResponseBody struct {
	Code           *string                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Count          *int32                                               `json:"Count,omitempty" xml:"Count,omitempty"`
	Data           []*ViewSmartAccessGatewayDnsForwardsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	HttpStatusCode *int32                                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                              `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ViewSmartAccessGatewayDnsForwardsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayDnsForwardsResponseBody) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBody) SetCode(v string) *ViewSmartAccessGatewayDnsForwardsResponseBody {
	s.Code = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBody) SetCount(v int32) *ViewSmartAccessGatewayDnsForwardsResponseBody {
	s.Count = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBody) SetData(v []*ViewSmartAccessGatewayDnsForwardsResponseBodyData) *ViewSmartAccessGatewayDnsForwardsResponseBody {
	s.Data = v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBody) SetHttpStatusCode(v int32) *ViewSmartAccessGatewayDnsForwardsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBody) SetMessage(v string) *ViewSmartAccessGatewayDnsForwardsResponseBody {
	s.Message = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBody) SetRequestId(v string) *ViewSmartAccessGatewayDnsForwardsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBody) SetSuccess(v bool) *ViewSmartAccessGatewayDnsForwardsResponseBody {
	s.Success = &v
	return s
}

type ViewSmartAccessGatewayDnsForwardsResponseBodyData struct {
	Domain            *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MasterIp          *string `json:"MasterIp,omitempty" xml:"MasterIp,omitempty"`
	Mode              *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	OutboundPortIndex *int32  `json:"OutboundPortIndex,omitempty" xml:"OutboundPortIndex,omitempty"`
	OutboundPortName  *string `json:"OutboundPortName,omitempty" xml:"OutboundPortName,omitempty"`
	OutboundPortType  *string `json:"OutboundPortType,omitempty" xml:"OutboundPortType,omitempty"`
	SlaveIp           *string `json:"SlaveIp,omitempty" xml:"SlaveIp,omitempty"`
}

func (s ViewSmartAccessGatewayDnsForwardsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayDnsForwardsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBodyData) SetDomain(v string) *ViewSmartAccessGatewayDnsForwardsResponseBodyData {
	s.Domain = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBodyData) SetInstanceId(v string) *ViewSmartAccessGatewayDnsForwardsResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBodyData) SetMasterIp(v string) *ViewSmartAccessGatewayDnsForwardsResponseBodyData {
	s.MasterIp = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBodyData) SetMode(v string) *ViewSmartAccessGatewayDnsForwardsResponseBodyData {
	s.Mode = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBodyData) SetOutboundPortIndex(v int32) *ViewSmartAccessGatewayDnsForwardsResponseBodyData {
	s.OutboundPortIndex = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBodyData) SetOutboundPortName(v string) *ViewSmartAccessGatewayDnsForwardsResponseBodyData {
	s.OutboundPortName = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBodyData) SetOutboundPortType(v string) *ViewSmartAccessGatewayDnsForwardsResponseBodyData {
	s.OutboundPortType = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponseBodyData) SetSlaveIp(v string) *ViewSmartAccessGatewayDnsForwardsResponseBodyData {
	s.SlaveIp = &v
	return s
}

type ViewSmartAccessGatewayDnsForwardsResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ViewSmartAccessGatewayDnsForwardsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ViewSmartAccessGatewayDnsForwardsResponse) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayDnsForwardsResponse) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayDnsForwardsResponse) SetHeaders(v map[string]*string) *ViewSmartAccessGatewayDnsForwardsResponse {
	s.Headers = v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponse) SetStatusCode(v int32) *ViewSmartAccessGatewayDnsForwardsResponse {
	s.StatusCode = &v
	return s
}

func (s *ViewSmartAccessGatewayDnsForwardsResponse) SetBody(v *ViewSmartAccessGatewayDnsForwardsResponseBody) *ViewSmartAccessGatewayDnsForwardsResponse {
	s.Body = v
	return s
}

type ViewSmartAccessGatewayGlobalRouteProtocolRequest struct {
	CrossAccount *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceUid  *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	SagInsId     *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn        *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
}

func (s ViewSmartAccessGatewayGlobalRouteProtocolRequest) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayGlobalRouteProtocolRequest) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolRequest) SetCrossAccount(v bool) *ViewSmartAccessGatewayGlobalRouteProtocolRequest {
	s.CrossAccount = &v
	return s
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolRequest) SetRegionId(v string) *ViewSmartAccessGatewayGlobalRouteProtocolRequest {
	s.RegionId = &v
	return s
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolRequest) SetResourceUid(v string) *ViewSmartAccessGatewayGlobalRouteProtocolRequest {
	s.ResourceUid = &v
	return s
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolRequest) SetSagInsId(v string) *ViewSmartAccessGatewayGlobalRouteProtocolRequest {
	s.SagInsId = &v
	return s
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolRequest) SetSagSn(v string) *ViewSmartAccessGatewayGlobalRouteProtocolRequest {
	s.SagSn = &v
	return s
}

type ViewSmartAccessGatewayGlobalRouteProtocolResponseBody struct {
	RequestId     *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RouteProtocol *string                                                            `json:"RouteProtocol,omitempty" xml:"RouteProtocol,omitempty"`
	TaskStates    []*ViewSmartAccessGatewayGlobalRouteProtocolResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s ViewSmartAccessGatewayGlobalRouteProtocolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayGlobalRouteProtocolResponseBody) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolResponseBody) SetRequestId(v string) *ViewSmartAccessGatewayGlobalRouteProtocolResponseBody {
	s.RequestId = &v
	return s
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolResponseBody) SetRouteProtocol(v string) *ViewSmartAccessGatewayGlobalRouteProtocolResponseBody {
	s.RouteProtocol = &v
	return s
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolResponseBody) SetTaskStates(v []*ViewSmartAccessGatewayGlobalRouteProtocolResponseBodyTaskStates) *ViewSmartAccessGatewayGlobalRouteProtocolResponseBody {
	s.TaskStates = v
	return s
}

type ViewSmartAccessGatewayGlobalRouteProtocolResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ViewSmartAccessGatewayGlobalRouteProtocolResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayGlobalRouteProtocolResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolResponseBodyTaskStates) SetCreateTime(v string) *ViewSmartAccessGatewayGlobalRouteProtocolResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolResponseBodyTaskStates) SetErrorCode(v string) *ViewSmartAccessGatewayGlobalRouteProtocolResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolResponseBodyTaskStates) SetErrorMessage(v string) *ViewSmartAccessGatewayGlobalRouteProtocolResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolResponseBodyTaskStates) SetState(v string) *ViewSmartAccessGatewayGlobalRouteProtocolResponseBodyTaskStates {
	s.State = &v
	return s
}

type ViewSmartAccessGatewayGlobalRouteProtocolResponse struct {
	Headers    map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ViewSmartAccessGatewayGlobalRouteProtocolResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ViewSmartAccessGatewayGlobalRouteProtocolResponse) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayGlobalRouteProtocolResponse) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolResponse) SetHeaders(v map[string]*string) *ViewSmartAccessGatewayGlobalRouteProtocolResponse {
	s.Headers = v
	return s
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolResponse) SetStatusCode(v int32) *ViewSmartAccessGatewayGlobalRouteProtocolResponse {
	s.StatusCode = &v
	return s
}

func (s *ViewSmartAccessGatewayGlobalRouteProtocolResponse) SetBody(v *ViewSmartAccessGatewayGlobalRouteProtocolResponseBody) *ViewSmartAccessGatewayGlobalRouteProtocolResponse {
	s.Body = v
	return s
}

type ViewSmartAccessGatewayOspfRouteRequest struct {
	CrossAccount *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceUid  *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	SagInsId     *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn        *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
}

func (s ViewSmartAccessGatewayOspfRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayOspfRouteRequest) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayOspfRouteRequest) SetCrossAccount(v bool) *ViewSmartAccessGatewayOspfRouteRequest {
	s.CrossAccount = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteRequest) SetRegionId(v string) *ViewSmartAccessGatewayOspfRouteRequest {
	s.RegionId = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteRequest) SetResourceUid(v string) *ViewSmartAccessGatewayOspfRouteRequest {
	s.ResourceUid = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteRequest) SetSagInsId(v string) *ViewSmartAccessGatewayOspfRouteRequest {
	s.SagInsId = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteRequest) SetSagSn(v string) *ViewSmartAccessGatewayOspfRouteRequest {
	s.SagSn = &v
	return s
}

type ViewSmartAccessGatewayOspfRouteResponseBody struct {
	AreaId             *int32                                                   `json:"AreaId,omitempty" xml:"AreaId,omitempty"`
	AuthenticationType *string                                                  `json:"AuthenticationType,omitempty" xml:"AuthenticationType,omitempty"`
	DeadTime           *int32                                                   `json:"DeadTime,omitempty" xml:"DeadTime,omitempty"`
	HelloTime          *int32                                                   `json:"HelloTime,omitempty" xml:"HelloTime,omitempty"`
	Md5Key             *string                                                  `json:"Md5Key,omitempty" xml:"Md5Key,omitempty"`
	Md5KeyId           *int32                                                   `json:"Md5KeyId,omitempty" xml:"Md5KeyId,omitempty"`
	RequestId          *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RouterId           *string                                                  `json:"RouterId,omitempty" xml:"RouterId,omitempty"`
	TaskStates         []*ViewSmartAccessGatewayOspfRouteResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s ViewSmartAccessGatewayOspfRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayOspfRouteResponseBody) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayOspfRouteResponseBody) SetAreaId(v int32) *ViewSmartAccessGatewayOspfRouteResponseBody {
	s.AreaId = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteResponseBody) SetAuthenticationType(v string) *ViewSmartAccessGatewayOspfRouteResponseBody {
	s.AuthenticationType = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteResponseBody) SetDeadTime(v int32) *ViewSmartAccessGatewayOspfRouteResponseBody {
	s.DeadTime = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteResponseBody) SetHelloTime(v int32) *ViewSmartAccessGatewayOspfRouteResponseBody {
	s.HelloTime = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteResponseBody) SetMd5Key(v string) *ViewSmartAccessGatewayOspfRouteResponseBody {
	s.Md5Key = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteResponseBody) SetMd5KeyId(v int32) *ViewSmartAccessGatewayOspfRouteResponseBody {
	s.Md5KeyId = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteResponseBody) SetRequestId(v string) *ViewSmartAccessGatewayOspfRouteResponseBody {
	s.RequestId = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteResponseBody) SetRouterId(v string) *ViewSmartAccessGatewayOspfRouteResponseBody {
	s.RouterId = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteResponseBody) SetTaskStates(v []*ViewSmartAccessGatewayOspfRouteResponseBodyTaskStates) *ViewSmartAccessGatewayOspfRouteResponseBody {
	s.TaskStates = v
	return s
}

type ViewSmartAccessGatewayOspfRouteResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ViewSmartAccessGatewayOspfRouteResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayOspfRouteResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayOspfRouteResponseBodyTaskStates) SetCreateTime(v string) *ViewSmartAccessGatewayOspfRouteResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteResponseBodyTaskStates) SetErrorCode(v string) *ViewSmartAccessGatewayOspfRouteResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteResponseBodyTaskStates) SetErrorMessage(v string) *ViewSmartAccessGatewayOspfRouteResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteResponseBodyTaskStates) SetState(v string) *ViewSmartAccessGatewayOspfRouteResponseBodyTaskStates {
	s.State = &v
	return s
}

type ViewSmartAccessGatewayOspfRouteResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ViewSmartAccessGatewayOspfRouteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ViewSmartAccessGatewayOspfRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayOspfRouteResponse) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayOspfRouteResponse) SetHeaders(v map[string]*string) *ViewSmartAccessGatewayOspfRouteResponse {
	s.Headers = v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteResponse) SetStatusCode(v int32) *ViewSmartAccessGatewayOspfRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *ViewSmartAccessGatewayOspfRouteResponse) SetBody(v *ViewSmartAccessGatewayOspfRouteResponseBody) *ViewSmartAccessGatewayOspfRouteResponse {
	s.Body = v
	return s
}

type ViewSmartAccessGatewayPortRouteProtocolRequest struct {
	CrossAccount *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceUid  *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	SagInsId     *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn        *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
}

func (s ViewSmartAccessGatewayPortRouteProtocolRequest) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayPortRouteProtocolRequest) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayPortRouteProtocolRequest) SetCrossAccount(v bool) *ViewSmartAccessGatewayPortRouteProtocolRequest {
	s.CrossAccount = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolRequest) SetRegionId(v string) *ViewSmartAccessGatewayPortRouteProtocolRequest {
	s.RegionId = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolRequest) SetResourceUid(v string) *ViewSmartAccessGatewayPortRouteProtocolRequest {
	s.ResourceUid = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolRequest) SetSagInsId(v string) *ViewSmartAccessGatewayPortRouteProtocolRequest {
	s.SagInsId = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolRequest) SetSagSn(v string) *ViewSmartAccessGatewayPortRouteProtocolRequest {
	s.SagSn = &v
	return s
}

type ViewSmartAccessGatewayPortRouteProtocolResponseBody struct {
	Ports      []*ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts      `json:"Ports,omitempty" xml:"Ports,omitempty" type:"Repeated"`
	RequestId  *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskStates []*ViewSmartAccessGatewayPortRouteProtocolResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s ViewSmartAccessGatewayPortRouteProtocolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayPortRouteProtocolResponseBody) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBody) SetPorts(v []*ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts) *ViewSmartAccessGatewayPortRouteProtocolResponseBody {
	s.Ports = v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBody) SetRequestId(v string) *ViewSmartAccessGatewayPortRouteProtocolResponseBody {
	s.RequestId = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBody) SetTaskStates(v []*ViewSmartAccessGatewayPortRouteProtocolResponseBodyTaskStates) *ViewSmartAccessGatewayPortRouteProtocolResponseBody {
	s.TaskStates = v
	return s
}

type ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts struct {
	NeighborIp    *string `json:"NeighborIp,omitempty" xml:"NeighborIp,omitempty"`
	PortName      *string `json:"PortName,omitempty" xml:"PortName,omitempty"`
	RemoteAs      *string `json:"RemoteAs,omitempty" xml:"RemoteAs,omitempty"`
	RemoteIp      *string `json:"RemoteIp,omitempty" xml:"RemoteIp,omitempty"`
	RouteProtocol *string `json:"RouteProtocol,omitempty" xml:"RouteProtocol,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Vlan          *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts) SetNeighborIp(v string) *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts {
	s.NeighborIp = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts) SetPortName(v string) *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts {
	s.PortName = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts) SetRemoteAs(v string) *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts {
	s.RemoteAs = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts) SetRemoteIp(v string) *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts {
	s.RemoteIp = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts) SetRouteProtocol(v string) *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts {
	s.RouteProtocol = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts) SetStatus(v string) *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts {
	s.Status = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts) SetVlan(v string) *ViewSmartAccessGatewayPortRouteProtocolResponseBodyPorts {
	s.Vlan = &v
	return s
}

type ViewSmartAccessGatewayPortRouteProtocolResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ViewSmartAccessGatewayPortRouteProtocolResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayPortRouteProtocolResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBodyTaskStates) SetCreateTime(v string) *ViewSmartAccessGatewayPortRouteProtocolResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBodyTaskStates) SetErrorCode(v string) *ViewSmartAccessGatewayPortRouteProtocolResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBodyTaskStates) SetErrorMessage(v string) *ViewSmartAccessGatewayPortRouteProtocolResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponseBodyTaskStates) SetState(v string) *ViewSmartAccessGatewayPortRouteProtocolResponseBodyTaskStates {
	s.State = &v
	return s
}

type ViewSmartAccessGatewayPortRouteProtocolResponse struct {
	Headers    map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ViewSmartAccessGatewayPortRouteProtocolResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ViewSmartAccessGatewayPortRouteProtocolResponse) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayPortRouteProtocolResponse) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponse) SetHeaders(v map[string]*string) *ViewSmartAccessGatewayPortRouteProtocolResponse {
	s.Headers = v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponse) SetStatusCode(v int32) *ViewSmartAccessGatewayPortRouteProtocolResponse {
	s.StatusCode = &v
	return s
}

func (s *ViewSmartAccessGatewayPortRouteProtocolResponse) SetBody(v *ViewSmartAccessGatewayPortRouteProtocolResponseBody) *ViewSmartAccessGatewayPortRouteProtocolResponse {
	s.Body = v
	return s
}

type ViewSmartAccessGatewayRoutesRequest struct {
	CrossAccount *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceUid  *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	SagInsId     *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn        *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
}

func (s ViewSmartAccessGatewayRoutesRequest) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayRoutesRequest) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayRoutesRequest) SetCrossAccount(v bool) *ViewSmartAccessGatewayRoutesRequest {
	s.CrossAccount = &v
	return s
}

func (s *ViewSmartAccessGatewayRoutesRequest) SetRegionId(v string) *ViewSmartAccessGatewayRoutesRequest {
	s.RegionId = &v
	return s
}

func (s *ViewSmartAccessGatewayRoutesRequest) SetResourceUid(v string) *ViewSmartAccessGatewayRoutesRequest {
	s.ResourceUid = &v
	return s
}

func (s *ViewSmartAccessGatewayRoutesRequest) SetSagInsId(v string) *ViewSmartAccessGatewayRoutesRequest {
	s.SagInsId = &v
	return s
}

func (s *ViewSmartAccessGatewayRoutesRequest) SetSagSn(v string) *ViewSmartAccessGatewayRoutesRequest {
	s.SagSn = &v
	return s
}

type ViewSmartAccessGatewayRoutesResponseBody struct {
	RequestId *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Routes    []*ViewSmartAccessGatewayRoutesResponseBodyRoutes `json:"Routes,omitempty" xml:"Routes,omitempty" type:"Repeated"`
}

func (s ViewSmartAccessGatewayRoutesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayRoutesResponseBody) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayRoutesResponseBody) SetRequestId(v string) *ViewSmartAccessGatewayRoutesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ViewSmartAccessGatewayRoutesResponseBody) SetRoutes(v []*ViewSmartAccessGatewayRoutesResponseBodyRoutes) *ViewSmartAccessGatewayRoutesResponseBody {
	s.Routes = v
	return s
}

type ViewSmartAccessGatewayRoutesResponseBodyRoutes struct {
	ConflictCidrs []*string `json:"ConflictCidrs,omitempty" xml:"ConflictCidrs,omitempty" type:"Repeated"`
	Cost          *string   `json:"Cost,omitempty" xml:"Cost,omitempty"`
	Dst           *string   `json:"Dst,omitempty" xml:"Dst,omitempty"`
	Idx           *int32    `json:"Idx,omitempty" xml:"Idx,omitempty"`
	Nexthop       *string   `json:"Nexthop,omitempty" xml:"Nexthop,omitempty"`
	Role          *string   `json:"Role,omitempty" xml:"Role,omitempty"`
	Type          *string   `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ViewSmartAccessGatewayRoutesResponseBodyRoutes) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayRoutesResponseBodyRoutes) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayRoutesResponseBodyRoutes) SetConflictCidrs(v []*string) *ViewSmartAccessGatewayRoutesResponseBodyRoutes {
	s.ConflictCidrs = v
	return s
}

func (s *ViewSmartAccessGatewayRoutesResponseBodyRoutes) SetCost(v string) *ViewSmartAccessGatewayRoutesResponseBodyRoutes {
	s.Cost = &v
	return s
}

func (s *ViewSmartAccessGatewayRoutesResponseBodyRoutes) SetDst(v string) *ViewSmartAccessGatewayRoutesResponseBodyRoutes {
	s.Dst = &v
	return s
}

func (s *ViewSmartAccessGatewayRoutesResponseBodyRoutes) SetIdx(v int32) *ViewSmartAccessGatewayRoutesResponseBodyRoutes {
	s.Idx = &v
	return s
}

func (s *ViewSmartAccessGatewayRoutesResponseBodyRoutes) SetNexthop(v string) *ViewSmartAccessGatewayRoutesResponseBodyRoutes {
	s.Nexthop = &v
	return s
}

func (s *ViewSmartAccessGatewayRoutesResponseBodyRoutes) SetRole(v string) *ViewSmartAccessGatewayRoutesResponseBodyRoutes {
	s.Role = &v
	return s
}

func (s *ViewSmartAccessGatewayRoutesResponseBodyRoutes) SetType(v string) *ViewSmartAccessGatewayRoutesResponseBodyRoutes {
	s.Type = &v
	return s
}

type ViewSmartAccessGatewayRoutesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ViewSmartAccessGatewayRoutesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ViewSmartAccessGatewayRoutesResponse) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayRoutesResponse) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayRoutesResponse) SetHeaders(v map[string]*string) *ViewSmartAccessGatewayRoutesResponse {
	s.Headers = v
	return s
}

func (s *ViewSmartAccessGatewayRoutesResponse) SetStatusCode(v int32) *ViewSmartAccessGatewayRoutesResponse {
	s.StatusCode = &v
	return s
}

func (s *ViewSmartAccessGatewayRoutesResponse) SetBody(v *ViewSmartAccessGatewayRoutesResponseBody) *ViewSmartAccessGatewayRoutesResponse {
	s.Body = v
	return s
}

type ViewSmartAccessGatewayWanSnatRequest struct {
	CrossAccount *bool   `json:"CrossAccount,omitempty" xml:"CrossAccount,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceUid  *string `json:"ResourceUid,omitempty" xml:"ResourceUid,omitempty"`
	SagInsId     *string `json:"SagInsId,omitempty" xml:"SagInsId,omitempty"`
	SagSn        *string `json:"SagSn,omitempty" xml:"SagSn,omitempty"`
}

func (s ViewSmartAccessGatewayWanSnatRequest) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayWanSnatRequest) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayWanSnatRequest) SetCrossAccount(v bool) *ViewSmartAccessGatewayWanSnatRequest {
	s.CrossAccount = &v
	return s
}

func (s *ViewSmartAccessGatewayWanSnatRequest) SetRegionId(v string) *ViewSmartAccessGatewayWanSnatRequest {
	s.RegionId = &v
	return s
}

func (s *ViewSmartAccessGatewayWanSnatRequest) SetResourceUid(v string) *ViewSmartAccessGatewayWanSnatRequest {
	s.ResourceUid = &v
	return s
}

func (s *ViewSmartAccessGatewayWanSnatRequest) SetSagInsId(v string) *ViewSmartAccessGatewayWanSnatRequest {
	s.SagInsId = &v
	return s
}

func (s *ViewSmartAccessGatewayWanSnatRequest) SetSagSn(v string) *ViewSmartAccessGatewayWanSnatRequest {
	s.SagSn = &v
	return s
}

type ViewSmartAccessGatewayWanSnatResponseBody struct {
	RequestId  *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Snat       *string                                                `json:"Snat,omitempty" xml:"Snat,omitempty"`
	TaskStates []*ViewSmartAccessGatewayWanSnatResponseBodyTaskStates `json:"TaskStates,omitempty" xml:"TaskStates,omitempty" type:"Repeated"`
}

func (s ViewSmartAccessGatewayWanSnatResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayWanSnatResponseBody) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayWanSnatResponseBody) SetRequestId(v string) *ViewSmartAccessGatewayWanSnatResponseBody {
	s.RequestId = &v
	return s
}

func (s *ViewSmartAccessGatewayWanSnatResponseBody) SetSnat(v string) *ViewSmartAccessGatewayWanSnatResponseBody {
	s.Snat = &v
	return s
}

func (s *ViewSmartAccessGatewayWanSnatResponseBody) SetTaskStates(v []*ViewSmartAccessGatewayWanSnatResponseBodyTaskStates) *ViewSmartAccessGatewayWanSnatResponseBody {
	s.TaskStates = v
	return s
}

type ViewSmartAccessGatewayWanSnatResponseBodyTaskStates struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ViewSmartAccessGatewayWanSnatResponseBodyTaskStates) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayWanSnatResponseBodyTaskStates) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayWanSnatResponseBodyTaskStates) SetCreateTime(v string) *ViewSmartAccessGatewayWanSnatResponseBodyTaskStates {
	s.CreateTime = &v
	return s
}

func (s *ViewSmartAccessGatewayWanSnatResponseBodyTaskStates) SetErrorCode(v string) *ViewSmartAccessGatewayWanSnatResponseBodyTaskStates {
	s.ErrorCode = &v
	return s
}

func (s *ViewSmartAccessGatewayWanSnatResponseBodyTaskStates) SetErrorMessage(v string) *ViewSmartAccessGatewayWanSnatResponseBodyTaskStates {
	s.ErrorMessage = &v
	return s
}

func (s *ViewSmartAccessGatewayWanSnatResponseBodyTaskStates) SetState(v string) *ViewSmartAccessGatewayWanSnatResponseBodyTaskStates {
	s.State = &v
	return s
}

type ViewSmartAccessGatewayWanSnatResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ViewSmartAccessGatewayWanSnatResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ViewSmartAccessGatewayWanSnatResponse) String() string {
	return tea.Prettify(s)
}

func (s ViewSmartAccessGatewayWanSnatResponse) GoString() string {
	return s.String()
}

func (s *ViewSmartAccessGatewayWanSnatResponse) SetHeaders(v map[string]*string) *ViewSmartAccessGatewayWanSnatResponse {
	s.Headers = v
	return s
}

func (s *ViewSmartAccessGatewayWanSnatResponse) SetStatusCode(v int32) *ViewSmartAccessGatewayWanSnatResponse {
	s.StatusCode = &v
	return s
}

func (s *ViewSmartAccessGatewayWanSnatResponse) SetBody(v *ViewSmartAccessGatewayWanSnatResponseBody) *ViewSmartAccessGatewayWanSnatResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("smartag"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ActivateSmartAccessGatewayWithOptions(request *ActivateSmartAccessGatewayRequest, runtime *util.RuntimeOptions) (_result *ActivateSmartAccessGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ActivateSmartAccessGateway"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ActivateSmartAccessGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ActivateSmartAccessGateway(request *ActivateSmartAccessGatewayRequest) (_result *ActivateSmartAccessGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ActivateSmartAccessGatewayResponse{}
	_body, _err := client.ActivateSmartAccessGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ActiveFlowLogWithOptions(request *ActiveFlowLogRequest, runtime *util.RuntimeOptions) (_result *ActiveFlowLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowLogId)) {
		query["FlowLogId"] = request.FlowLogId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ActiveFlowLog"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ActiveFlowLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ActiveFlowLog(request *ActiveFlowLogRequest) (_result *ActiveFlowLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ActiveFlowLogResponse{}
	_body, _err := client.ActiveFlowLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddACLRuleWithOptions(request *AddACLRuleRequest, runtime *util.RuntimeOptions) (_result *AddACLRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DestCidr)) {
		query["DestCidr"] = request.DestCidr
	}

	if !tea.BoolValue(util.IsUnset(request.DestPortRange)) {
		query["DestPortRange"] = request.DestPortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Direction)) {
		query["Direction"] = request.Direction
	}

	if !tea.BoolValue(util.IsUnset(request.DpiGroupIds)) {
		query["DpiGroupIds"] = request.DpiGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.DpiSignatureIds)) {
		query["DpiSignatureIds"] = request.DpiSignatureIds
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Policy)) {
		query["Policy"] = request.Policy
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceCidr)) {
		query["SourceCidr"] = request.SourceCidr
	}

	if !tea.BoolValue(util.IsUnset(request.SourcePortRange)) {
		query["SourcePortRange"] = request.SourcePortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddACLRule"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddACLRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddACLRule(request *AddACLRuleRequest) (_result *AddACLRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddACLRuleResponse{}
	_body, _err := client.AddACLRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddDnatEntryWithOptions(request *AddDnatEntryRequest, runtime *util.RuntimeOptions) (_result *AddDnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExternalIp)) {
		query["ExternalIp"] = request.ExternalIp
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalPort)) {
		query["ExternalPort"] = request.ExternalPort
	}

	if !tea.BoolValue(util.IsUnset(request.InternalIp)) {
		query["InternalIp"] = request.InternalIp
	}

	if !tea.BoolValue(util.IsUnset(request.InternalPort)) {
		query["InternalPort"] = request.InternalPort
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddDnatEntry"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddDnatEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddDnatEntry(request *AddDnatEntryRequest) (_result *AddDnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddDnatEntryResponse{}
	_body, _err := client.AddDnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddSmartAccessGatewayDnsForwardWithOptions(request *AddSmartAccessGatewayDnsForwardRequest, runtime *util.RuntimeOptions) (_result *AddSmartAccessGatewayDnsForwardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.MasterIp)) {
		query["MasterIp"] = request.MasterIp
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundPortIndex)) {
		query["OutboundPortIndex"] = request.OutboundPortIndex
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundPortName)) {
		query["OutboundPortName"] = request.OutboundPortName
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundPortType)) {
		query["OutboundPortType"] = request.OutboundPortType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	if !tea.BoolValue(util.IsUnset(request.SlaveIp)) {
		query["SlaveIp"] = request.SlaveIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddSmartAccessGatewayDnsForward"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddSmartAccessGatewayDnsForwardResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddSmartAccessGatewayDnsForward(request *AddSmartAccessGatewayDnsForwardRequest) (_result *AddSmartAccessGatewayDnsForwardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddSmartAccessGatewayDnsForwardResponse{}
	_body, _err := client.AddSmartAccessGatewayDnsForwardWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddSnatEntryWithOptions(request *AddSnatEntryRequest, runtime *util.RuntimeOptions) (_result *AddSnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SnatIp)) {
		query["SnatIp"] = request.SnatIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddSnatEntry"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddSnatEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddSnatEntry(request *AddSnatEntryRequest) (_result *AddSnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddSnatEntryResponse{}
	_body, _err := client.AddSnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateACLWithOptions(request *AssociateACLRequest, runtime *util.RuntimeOptions) (_result *AssociateACLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AssociateACL"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AssociateACLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateACL(request *AssociateACLRequest) (_result *AssociateACLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateACLResponse{}
	_body, _err := client.AssociateACLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateFlowLogWithOptions(request *AssociateFlowLogRequest, runtime *util.RuntimeOptions) (_result *AssociateFlowLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowLogId)) {
		query["FlowLogId"] = request.FlowLogId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AssociateFlowLog"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AssociateFlowLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateFlowLog(request *AssociateFlowLogRequest) (_result *AssociateFlowLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateFlowLogResponse{}
	_body, _err := client.AssociateFlowLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateQosWithOptions(request *AssociateQosRequest, runtime *util.RuntimeOptions) (_result *AssociateQosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QosId)) {
		query["QosId"] = request.QosId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AssociateQos"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AssociateQosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateQos(request *AssociateQosRequest) (_result *AssociateQosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateQosResponse{}
	_body, _err := client.AssociateQosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateSmartAGWithApplicationBandwidthPackageWithOptions(request *AssociateSmartAGWithApplicationBandwidthPackageRequest, runtime *util.RuntimeOptions) (_result *AssociateSmartAGWithApplicationBandwidthPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplicationBandwidthPackageId)) {
		query["ApplicationBandwidthPackageId"] = request.ApplicationBandwidthPackageId
	}

	if !tea.BoolValue(util.IsUnset(request.AssociateConfigs)) {
		query["AssociateConfigs"] = request.AssociateConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AssociateSmartAGWithApplicationBandwidthPackage"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AssociateSmartAGWithApplicationBandwidthPackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateSmartAGWithApplicationBandwidthPackage(request *AssociateSmartAGWithApplicationBandwidthPackageRequest) (_result *AssociateSmartAGWithApplicationBandwidthPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateSmartAGWithApplicationBandwidthPackageResponse{}
	_body, _err := client.AssociateSmartAGWithApplicationBandwidthPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindSerialNumberWithOptions(request *BindSerialNumberRequest, runtime *util.RuntimeOptions) (_result *BindSerialNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumber)) {
		query["SerialNumber"] = request.SerialNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindSerialNumber"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindSerialNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindSerialNumber(request *BindSerialNumberRequest) (_result *BindSerialNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindSerialNumberResponse{}
	_body, _err := client.BindSerialNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindSmartAccessGatewayWithOptions(request *BindSmartAccessGatewayRequest, runtime *util.RuntimeOptions) (_result *BindSmartAccessGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CcnId)) {
		query["CcnId"] = request.CcnId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGUid)) {
		query["SmartAGUid"] = request.SmartAGUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindSmartAccessGateway"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindSmartAccessGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindSmartAccessGateway(request *BindSmartAccessGatewayRequest) (_result *BindSmartAccessGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindSmartAccessGatewayResponse{}
	_body, _err := client.BindSmartAccessGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindVbrWithOptions(request *BindVbrRequest, runtime *util.RuntimeOptions) (_result *BindVbrResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGUid)) {
		query["SmartAGUid"] = request.SmartAGUid
	}

	if !tea.BoolValue(util.IsUnset(request.VbrId)) {
		query["VbrId"] = request.VbrId
	}

	if !tea.BoolValue(util.IsUnset(request.VbrRegionId)) {
		query["VbrRegionId"] = request.VbrRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindVbr"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindVbrResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindVbr(request *BindVbrRequest) (_result *BindVbrResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindVbrResponse{}
	_body, _err := client.BindVbrWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ClearSagCipherWithOptions(request *ClearSagCipherRequest, runtime *util.RuntimeOptions) (_result *ClearSagCipherResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	if !tea.BoolValue(util.IsUnset(request.SnNumber)) {
		query["SnNumber"] = request.SnNumber
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ClearSagCipher"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ClearSagCipherResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ClearSagCipher(request *ClearSagCipherRequest) (_result *ClearSagCipherResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ClearSagCipherResponse{}
	_body, _err := client.ClearSagCipherWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ClearSagRouteableAddressWithOptions(request *ClearSagRouteableAddressRequest, runtime *util.RuntimeOptions) (_result *ClearSagRouteableAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ClearSagRouteableAddress"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ClearSagRouteableAddressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ClearSagRouteableAddress(request *ClearSagRouteableAddressRequest) (_result *ClearSagRouteableAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ClearSagRouteableAddressResponse{}
	_body, _err := client.ClearSagRouteableAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateACLWithOptions(request *CreateACLRequest, runtime *util.RuntimeOptions) (_result *CreateACLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclType)) {
		query["AclType"] = request.AclType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateACL"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateACLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateACL(request *CreateACLRequest) (_result *CreateACLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateACLResponse{}
	_body, _err := client.CreateACLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCloudConnectNetworkWithOptions(request *CreateCloudConnectNetworkRequest, runtime *util.RuntimeOptions) (_result *CreateCloudConnectNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SnatCidrBlock)) {
		query["SnatCidrBlock"] = request.SnatCidrBlock
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCloudConnectNetwork"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCloudConnectNetworkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCloudConnectNetwork(request *CreateCloudConnectNetworkRequest) (_result *CreateCloudConnectNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCloudConnectNetworkResponse{}
	_body, _err := client.CreateCloudConnectNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEnterpriseCodeWithOptions(request *CreateEnterpriseCodeRequest, runtime *util.RuntimeOptions) (_result *CreateEnterpriseCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.EnterpriseCode)) {
		query["EnterpriseCode"] = request.EnterpriseCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEnterpriseCode"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEnterpriseCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEnterpriseCode(request *CreateEnterpriseCodeRequest) (_result *CreateEnterpriseCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEnterpriseCodeResponse{}
	_body, _err := client.CreateEnterpriseCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowLogWithOptions(request *CreateFlowLogRequest, runtime *util.RuntimeOptions) (_result *CreateFlowLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActiveAging)) {
		query["ActiveAging"] = request.ActiveAging
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InactiveAging)) {
		query["InactiveAging"] = request.InactiveAging
	}

	if !tea.BoolValue(util.IsUnset(request.LogstoreName)) {
		query["LogstoreName"] = request.LogstoreName
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NetflowServerIp)) {
		query["NetflowServerIp"] = request.NetflowServerIp
	}

	if !tea.BoolValue(util.IsUnset(request.NetflowServerPort)) {
		query["NetflowServerPort"] = request.NetflowServerPort
	}

	if !tea.BoolValue(util.IsUnset(request.NetflowVersion)) {
		query["NetflowVersion"] = request.NetflowVersion
	}

	if !tea.BoolValue(util.IsUnset(request.OutputType)) {
		query["OutputType"] = request.OutputType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		query["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SlsRegionId)) {
		query["SlsRegionId"] = request.SlsRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFlowLog"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFlowLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowLog(request *CreateFlowLogRequest) (_result *CreateFlowLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowLogResponse{}
	_body, _err := client.CreateFlowLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateHealthCheckWithOptions(request *CreateHealthCheckRequest, runtime *util.RuntimeOptions) (_result *CreateHealthCheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DstIpAddr)) {
		query["DstIpAddr"] = request.DstIpAddr
	}

	if !tea.BoolValue(util.IsUnset(request.DstPort)) {
		query["DstPort"] = request.DstPort
	}

	if !tea.BoolValue(util.IsUnset(request.FailCountThreshold)) {
		query["FailCountThreshold"] = request.FailCountThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeCount)) {
		query["ProbeCount"] = request.ProbeCount
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeInterval)) {
		query["ProbeInterval"] = request.ProbeInterval
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeTimeout)) {
		query["ProbeTimeout"] = request.ProbeTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RttFailThreshold)) {
		query["RttFailThreshold"] = request.RttFailThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.RttThreshold)) {
		query["RttThreshold"] = request.RttThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SrcIpAddr)) {
		query["SrcIpAddr"] = request.SrcIpAddr
	}

	if !tea.BoolValue(util.IsUnset(request.SrcPort)) {
		query["SrcPort"] = request.SrcPort
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHealthCheck"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateHealthCheckResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateHealthCheck(request *CreateHealthCheckRequest) (_result *CreateHealthCheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHealthCheckResponse{}
	_body, _err := client.CreateHealthCheckWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateProbeTaskWithOptions(request *CreateProbeTaskRequest, runtime *util.RuntimeOptions) (_result *CreateProbeTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.Enable)) {
		query["Enable"] = request.Enable
	}

	if !tea.BoolValue(util.IsUnset(request.PacketNumber)) {
		query["PacketNumber"] = request.PacketNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeTaskSourceAddress)) {
		query["ProbeTaskSourceAddress"] = request.ProbeTaskSourceAddress
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		query["Protocol"] = request.Protocol
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	if !tea.BoolValue(util.IsUnset(request.Sn)) {
		query["Sn"] = request.Sn
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateProbeTask"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateProbeTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateProbeTask(request *CreateProbeTaskRequest) (_result *CreateProbeTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProbeTaskResponse{}
	_body, _err := client.CreateProbeTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateQosWithOptions(request *CreateQosRequest, runtime *util.RuntimeOptions) (_result *CreateQosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QosDescription)) {
		query["QosDescription"] = request.QosDescription
	}

	if !tea.BoolValue(util.IsUnset(request.QosName)) {
		query["QosName"] = request.QosName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateQos"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateQosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateQos(request *CreateQosRequest) (_result *CreateQosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateQosResponse{}
	_body, _err := client.CreateQosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateQosCarWithOptions(request *CreateQosCarRequest, runtime *util.RuntimeOptions) (_result *CreateQosCarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.LimitType)) {
		query["LimitType"] = request.LimitType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxBandwidthAbs)) {
		query["MaxBandwidthAbs"] = request.MaxBandwidthAbs
	}

	if !tea.BoolValue(util.IsUnset(request.MaxBandwidthPercent)) {
		query["MaxBandwidthPercent"] = request.MaxBandwidthPercent
	}

	if !tea.BoolValue(util.IsUnset(request.MinBandwidthAbs)) {
		query["MinBandwidthAbs"] = request.MinBandwidthAbs
	}

	if !tea.BoolValue(util.IsUnset(request.MinBandwidthPercent)) {
		query["MinBandwidthPercent"] = request.MinBandwidthPercent
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PercentSourceType)) {
		query["PercentSourceType"] = request.PercentSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.QosId)) {
		query["QosId"] = request.QosId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateQosCar"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateQosCarResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateQosCar(request *CreateQosCarRequest) (_result *CreateQosCarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateQosCarResponse{}
	_body, _err := client.CreateQosCarWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateQosPolicyWithOptions(request *CreateQosPolicyRequest, runtime *util.RuntimeOptions) (_result *CreateQosPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DestCidr)) {
		query["DestCidr"] = request.DestCidr
	}

	if !tea.BoolValue(util.IsUnset(request.DestPortRange)) {
		query["DestPortRange"] = request.DestPortRange
	}

	if !tea.BoolValue(util.IsUnset(request.DpiGroupIds)) {
		query["DpiGroupIds"] = request.DpiGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.DpiSignatureIds)) {
		query["DpiSignatureIds"] = request.DpiSignatureIds
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.QosId)) {
		query["QosId"] = request.QosId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceCidr)) {
		query["SourceCidr"] = request.SourceCidr
	}

	if !tea.BoolValue(util.IsUnset(request.SourcePortRange)) {
		query["SourcePortRange"] = request.SourcePortRange
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateQosPolicy"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateQosPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateQosPolicy(request *CreateQosPolicyRequest) (_result *CreateQosPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateQosPolicyResponse{}
	_body, _err := client.CreateQosPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSagExpressConnectInterfaceWithOptions(request *CreateSagExpressConnectInterfaceRequest, runtime *util.RuntimeOptions) (_result *CreateSagExpressConnectInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IP)) {
		query["IP"] = request.IP
	}

	if !tea.BoolValue(util.IsUnset(request.Mask)) {
		query["Mask"] = request.Mask
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PortName)) {
		query["PortName"] = request.PortName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	if !tea.BoolValue(util.IsUnset(request.Vlan)) {
		query["Vlan"] = request.Vlan
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSagExpressConnectInterface"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSagExpressConnectInterfaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSagExpressConnectInterface(request *CreateSagExpressConnectInterfaceRequest) (_result *CreateSagExpressConnectInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSagExpressConnectInterfaceResponse{}
	_body, _err := client.CreateSagExpressConnectInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSagStaticRouteWithOptions(request *CreateSagStaticRouteRequest, runtime *util.RuntimeOptions) (_result *CreateSagStaticRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationCidr)) {
		query["DestinationCidr"] = request.DestinationCidr
	}

	if !tea.BoolValue(util.IsUnset(request.NextHop)) {
		query["NextHop"] = request.NextHop
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PortName)) {
		query["PortName"] = request.PortName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	if !tea.BoolValue(util.IsUnset(request.Vlan)) {
		query["Vlan"] = request.Vlan
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSagStaticRoute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSagStaticRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSagStaticRoute(request *CreateSagStaticRouteRequest) (_result *CreateSagStaticRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSagStaticRouteResponse{}
	_body, _err := client.CreateSagStaticRouteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateServiceAddressWithOptions(request *CreateServiceAddressRequest, runtime *util.RuntimeOptions) (_result *CreateServiceAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		query["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.AddressType)) {
		query["AddressType"] = request.AddressType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	if !tea.BoolValue(util.IsUnset(request.Sn)) {
		query["Sn"] = request.Sn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateServiceAddress"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateServiceAddressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateServiceAddress(request *CreateServiceAddressRequest) (_result *CreateServiceAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateServiceAddressResponse{}
	_body, _err := client.CreateServiceAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSmartAccessGatewayWithOptions(request *CreateSmartAccessGatewayRequest, runtime *util.RuntimeOptions) (_result *CreateSmartAccessGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlreadyHaveSag)) {
		query["AlreadyHaveSag"] = request.AlreadyHaveSag
	}

	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.BuyerMessage)) {
		query["BuyerMessage"] = request.BuyerMessage
	}

	if !tea.BoolValue(util.IsUnset(request.CPEVersion)) {
		query["CPEVersion"] = request.CPEVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.HaType)) {
		query["HaType"] = request.HaType
	}

	if !tea.BoolValue(util.IsUnset(request.HardWareSpec)) {
		query["HardWareSpec"] = request.HardWareSpec
	}

	if !tea.BoolValue(util.IsUnset(request.MaxBandWidth)) {
		query["MaxBandWidth"] = request.MaxBandWidth
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverAddress)) {
		query["ReceiverAddress"] = request.ReceiverAddress
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverCity)) {
		query["ReceiverCity"] = request.ReceiverCity
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverCountry)) {
		query["ReceiverCountry"] = request.ReceiverCountry
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverDistrict)) {
		query["ReceiverDistrict"] = request.ReceiverDistrict
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverEmail)) {
		query["ReceiverEmail"] = request.ReceiverEmail
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverMobile)) {
		query["ReceiverMobile"] = request.ReceiverMobile
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverName)) {
		query["ReceiverName"] = request.ReceiverName
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverPhone)) {
		query["ReceiverPhone"] = request.ReceiverPhone
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverState)) {
		query["ReceiverState"] = request.ReceiverState
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverTown)) {
		query["ReceiverTown"] = request.ReceiverTown
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverZip)) {
		query["ReceiverZip"] = request.ReceiverZip
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSmartAccessGateway"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSmartAccessGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSmartAccessGateway(request *CreateSmartAccessGatewayRequest) (_result *CreateSmartAccessGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSmartAccessGatewayResponse{}
	_body, _err := client.CreateSmartAccessGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSmartAccessGatewayClientUserWithOptions(request *CreateSmartAccessGatewayClientUserRequest, runtime *util.RuntimeOptions) (_result *CreateSmartAccessGatewayClientUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.ClientIp)) {
		query["ClientIp"] = request.ClientIp
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UserMail)) {
		query["UserMail"] = request.UserMail
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSmartAccessGatewayClientUser"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSmartAccessGatewayClientUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSmartAccessGatewayClientUser(request *CreateSmartAccessGatewayClientUserRequest) (_result *CreateSmartAccessGatewayClientUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSmartAccessGatewayClientUserResponse{}
	_body, _err := client.CreateSmartAccessGatewayClientUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSmartAccessGatewaySoftwareWithOptions(request *CreateSmartAccessGatewaySoftwareRequest, runtime *util.RuntimeOptions) (_result *CreateSmartAccessGatewaySoftwareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.DataPlan)) {
		query["DataPlan"] = request.DataPlan
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.UserCount)) {
		query["UserCount"] = request.UserCount
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSmartAccessGatewaySoftware"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSmartAccessGatewaySoftwareResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSmartAccessGatewaySoftware(request *CreateSmartAccessGatewaySoftwareRequest) (_result *CreateSmartAccessGatewaySoftwareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSmartAccessGatewaySoftwareResponse{}
	_body, _err := client.CreateSmartAccessGatewaySoftwareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeactiveFlowLogWithOptions(request *DeactiveFlowLogRequest, runtime *util.RuntimeOptions) (_result *DeactiveFlowLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowLogId)) {
		query["FlowLogId"] = request.FlowLogId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeactiveFlowLog"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeactiveFlowLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeactiveFlowLog(request *DeactiveFlowLogRequest) (_result *DeactiveFlowLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeactiveFlowLogResponse{}
	_body, _err := client.DeactiveFlowLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteACLWithOptions(request *DeleteACLRequest, runtime *util.RuntimeOptions) (_result *DeleteACLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteACL"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteACLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteACL(request *DeleteACLRequest) (_result *DeleteACLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteACLResponse{}
	_body, _err := client.DeleteACLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteACLRuleWithOptions(request *DeleteACLRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteACLRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.AcrId)) {
		query["AcrId"] = request.AcrId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteACLRule"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteACLRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteACLRule(request *DeleteACLRuleRequest) (_result *DeleteACLRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteACLRuleResponse{}
	_body, _err := client.DeleteACLRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCloudConnectNetworkWithOptions(request *DeleteCloudConnectNetworkRequest, runtime *util.RuntimeOptions) (_result *DeleteCloudConnectNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CcnId)) {
		query["CcnId"] = request.CcnId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCloudConnectNetwork"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCloudConnectNetworkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCloudConnectNetwork(request *DeleteCloudConnectNetworkRequest) (_result *DeleteCloudConnectNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCloudConnectNetworkResponse{}
	_body, _err := client.DeleteCloudConnectNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDnatEntryWithOptions(request *DeleteDnatEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteDnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DnatEntryId)) {
		query["DnatEntryId"] = request.DnatEntryId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDnatEntry"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDnatEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDnatEntry(request *DeleteDnatEntryRequest) (_result *DeleteDnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDnatEntryResponse{}
	_body, _err := client.DeleteDnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEnterpriseCodeWithOptions(request *DeleteEnterpriseCodeRequest, runtime *util.RuntimeOptions) (_result *DeleteEnterpriseCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.EnterpriseCode)) {
		query["EnterpriseCode"] = request.EnterpriseCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEnterpriseCode"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEnterpriseCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEnterpriseCode(request *DeleteEnterpriseCodeRequest) (_result *DeleteEnterpriseCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEnterpriseCodeResponse{}
	_body, _err := client.DeleteEnterpriseCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowLogWithOptions(request *DeleteFlowLogRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowLogId)) {
		query["FlowLogId"] = request.FlowLogId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFlowLog"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFlowLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowLog(request *DeleteFlowLogRequest) (_result *DeleteFlowLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowLogResponse{}
	_body, _err := client.DeleteFlowLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteHealthCheckWithOptions(request *DeleteHealthCheckRequest, runtime *util.RuntimeOptions) (_result *DeleteHealthCheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HcInstanceId)) {
		query["HcInstanceId"] = request.HcInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHealthCheck"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteHealthCheckResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteHealthCheck(request *DeleteHealthCheckRequest) (_result *DeleteHealthCheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHealthCheckResponse{}
	_body, _err := client.DeleteHealthCheckWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteProbeTaskWithOptions(request *DeleteProbeTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteProbeTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProbeTaskId)) {
		query["ProbeTaskId"] = request.ProbeTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	if !tea.BoolValue(util.IsUnset(request.Sn)) {
		query["Sn"] = request.Sn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteProbeTask"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteProbeTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteProbeTask(request *DeleteProbeTaskRequest) (_result *DeleteProbeTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProbeTaskResponse{}
	_body, _err := client.DeleteProbeTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteQosWithOptions(request *DeleteQosRequest, runtime *util.RuntimeOptions) (_result *DeleteQosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QosId)) {
		query["QosId"] = request.QosId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteQos"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteQosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteQos(request *DeleteQosRequest) (_result *DeleteQosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteQosResponse{}
	_body, _err := client.DeleteQosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteQosCarWithOptions(request *DeleteQosCarRequest, runtime *util.RuntimeOptions) (_result *DeleteQosCarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QosCarId)) {
		query["QosCarId"] = request.QosCarId
	}

	if !tea.BoolValue(util.IsUnset(request.QosId)) {
		query["QosId"] = request.QosId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteQosCar"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteQosCarResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteQosCar(request *DeleteQosCarRequest) (_result *DeleteQosCarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteQosCarResponse{}
	_body, _err := client.DeleteQosCarWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteQosPolicyWithOptions(request *DeleteQosPolicyRequest, runtime *util.RuntimeOptions) (_result *DeleteQosPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QosId)) {
		query["QosId"] = request.QosId
	}

	if !tea.BoolValue(util.IsUnset(request.QosPolicyId)) {
		query["QosPolicyId"] = request.QosPolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteQosPolicy"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteQosPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteQosPolicy(request *DeleteQosPolicyRequest) (_result *DeleteQosPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteQosPolicyResponse{}
	_body, _err := client.DeleteQosPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRouteDistributionStrategyWithOptions(request *DeleteRouteDistributionStrategyRequest, runtime *util.RuntimeOptions) (_result *DeleteRouteDistributionStrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestCidrBlock)) {
		query["DestCidrBlock"] = request.DestCidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RouteSource)) {
		query["RouteSource"] = request.RouteSource
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRouteDistributionStrategy"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRouteDistributionStrategyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRouteDistributionStrategy(request *DeleteRouteDistributionStrategyRequest) (_result *DeleteRouteDistributionStrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRouteDistributionStrategyResponse{}
	_body, _err := client.DeleteRouteDistributionStrategyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSagExpressConnectInterfaceWithOptions(request *DeleteSagExpressConnectInterfaceRequest, runtime *util.RuntimeOptions) (_result *DeleteSagExpressConnectInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PortName)) {
		query["PortName"] = request.PortName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	if !tea.BoolValue(util.IsUnset(request.Vlan)) {
		query["Vlan"] = request.Vlan
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSagExpressConnectInterface"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSagExpressConnectInterfaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSagExpressConnectInterface(request *DeleteSagExpressConnectInterfaceRequest) (_result *DeleteSagExpressConnectInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSagExpressConnectInterfaceResponse{}
	_body, _err := client.DeleteSagExpressConnectInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSagStaticRouteWithOptions(request *DeleteSagStaticRouteRequest, runtime *util.RuntimeOptions) (_result *DeleteSagStaticRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationCidr)) {
		query["DestinationCidr"] = request.DestinationCidr
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PortName)) {
		query["PortName"] = request.PortName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	if !tea.BoolValue(util.IsUnset(request.Vlan)) {
		query["Vlan"] = request.Vlan
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSagStaticRoute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSagStaticRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSagStaticRoute(request *DeleteSagStaticRouteRequest) (_result *DeleteSagStaticRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSagStaticRouteResponse{}
	_body, _err := client.DeleteSagStaticRouteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteServiceAddressWithOptions(request *DeleteServiceAddressRequest, runtime *util.RuntimeOptions) (_result *DeleteServiceAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		query["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.AddressType)) {
		query["AddressType"] = request.AddressType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	if !tea.BoolValue(util.IsUnset(request.Sn)) {
		query["Sn"] = request.Sn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteServiceAddress"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteServiceAddressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteServiceAddress(request *DeleteServiceAddressRequest) (_result *DeleteServiceAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteServiceAddressResponse{}
	_body, _err := client.DeleteServiceAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSmartAccessGatewayWithOptions(request *DeleteSmartAccessGatewayRequest, runtime *util.RuntimeOptions) (_result *DeleteSmartAccessGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSmartAccessGateway"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSmartAccessGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSmartAccessGateway(request *DeleteSmartAccessGatewayRequest) (_result *DeleteSmartAccessGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSmartAccessGatewayResponse{}
	_body, _err := client.DeleteSmartAccessGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSmartAccessGatewayClientUserWithOptions(request *DeleteSmartAccessGatewayClientUserRequest, runtime *util.RuntimeOptions) (_result *DeleteSmartAccessGatewayClientUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSmartAccessGatewayClientUser"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSmartAccessGatewayClientUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSmartAccessGatewayClientUser(request *DeleteSmartAccessGatewayClientUserRequest) (_result *DeleteSmartAccessGatewayClientUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSmartAccessGatewayClientUserResponse{}
	_body, _err := client.DeleteSmartAccessGatewayClientUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSmartAccessGatewayDnsForwardWithOptions(request *DeleteSmartAccessGatewayDnsForwardRequest, runtime *util.RuntimeOptions) (_result *DeleteSmartAccessGatewayDnsForwardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSmartAccessGatewayDnsForward"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSmartAccessGatewayDnsForwardResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSmartAccessGatewayDnsForward(request *DeleteSmartAccessGatewayDnsForwardRequest) (_result *DeleteSmartAccessGatewayDnsForwardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSmartAccessGatewayDnsForwardResponse{}
	_body, _err := client.DeleteSmartAccessGatewayDnsForwardWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSnatEntryWithOptions(request *DeleteSnatEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteSnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSnatEntry"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSnatEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSnatEntry(request *DeleteSnatEntryRequest) (_result *DeleteSnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSnatEntryResponse{}
	_body, _err := client.DeleteSnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeACLAttributeWithOptions(request *DescribeACLAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeACLAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.Direction)) {
		query["Direction"] = request.Direction
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeACLAttribute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeACLAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeACLAttribute(request *DescribeACLAttributeRequest) (_result *DescribeACLAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeACLAttributeResponse{}
	_body, _err := client.DescribeACLAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeACLsWithOptions(request *DescribeACLsRequest, runtime *util.RuntimeOptions) (_result *DescribeACLsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclIds)) {
		query["AclIds"] = request.AclIds
	}

	if !tea.BoolValue(util.IsUnset(request.AclType)) {
		query["AclType"] = request.AclType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeACLs"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeACLsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeACLs(request *DescribeACLsRequest) (_result *DescribeACLsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeACLsResponse{}
	_body, _err := client.DescribeACLsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBindableSmartAccessGatewaysWithOptions(request *DescribeBindableSmartAccessGatewaysRequest, runtime *util.RuntimeOptions) (_result *DescribeBindableSmartAccessGatewaysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CcnId)) {
		query["CcnId"] = request.CcnId
	}

	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBindableSmartAccessGateways"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBindableSmartAccessGatewaysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBindableSmartAccessGateways(request *DescribeBindableSmartAccessGatewaysRequest) (_result *DescribeBindableSmartAccessGatewaysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBindableSmartAccessGatewaysResponse{}
	_body, _err := client.DescribeBindableSmartAccessGatewaysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClientUserDNSWithOptions(request *DescribeClientUserDNSRequest, runtime *util.RuntimeOptions) (_result *DescribeClientUserDNSResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClientUserDNS"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClientUserDNSResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClientUserDNS(request *DescribeClientUserDNSRequest) (_result *DescribeClientUserDNSResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClientUserDNSResponse{}
	_body, _err := client.DescribeClientUserDNSWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCloudConnectNetworksWithOptions(request *DescribeCloudConnectNetworksRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudConnectNetworksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CcnId)) {
		query["CcnId"] = request.CcnId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudConnectNetworks"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudConnectNetworksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCloudConnectNetworks(request *DescribeCloudConnectNetworksRequest) (_result *DescribeCloudConnectNetworksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudConnectNetworksResponse{}
	_body, _err := client.DescribeCloudConnectNetworksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDeviceAutoUpgradePolicyWithOptions(request *DescribeDeviceAutoUpgradePolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeDeviceAutoUpgradePolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumber)) {
		query["SerialNumber"] = request.SerialNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.VersionType)) {
		query["VersionType"] = request.VersionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDeviceAutoUpgradePolicy"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDeviceAutoUpgradePolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDeviceAutoUpgradePolicy(request *DescribeDeviceAutoUpgradePolicyRequest) (_result *DescribeDeviceAutoUpgradePolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeviceAutoUpgradePolicyResponse{}
	_body, _err := client.DescribeDeviceAutoUpgradePolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDnatEntriesWithOptions(request *DescribeDnatEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeDnatEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDnatEntries"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDnatEntriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDnatEntries(request *DescribeDnatEntriesRequest) (_result *DescribeDnatEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDnatEntriesResponse{}
	_body, _err := client.DescribeDnatEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowLogSagsWithOptions(request *DescribeFlowLogSagsRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowLogSagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowLogId)) {
		query["FlowLogId"] = request.FlowLogId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlowLogSags"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowLogSagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowLogSags(request *DescribeFlowLogSagsRequest) (_result *DescribeFlowLogSagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowLogSagsResponse{}
	_body, _err := client.DescribeFlowLogSagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowLogsWithOptions(request *DescribeFlowLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.FlowLogId)) {
		query["FlowLogId"] = request.FlowLogId
	}

	if !tea.BoolValue(util.IsUnset(request.FlowLogName)) {
		query["FlowLogName"] = request.FlowLogName
	}

	if !tea.BoolValue(util.IsUnset(request.OutputType)) {
		query["OutputType"] = request.OutputType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlowLogs"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowLogs(request *DescribeFlowLogsRequest) (_result *DescribeFlowLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowLogsResponse{}
	_body, _err := client.DescribeFlowLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeGrantRulesWithOptions(request *DescribeGrantRulesRequest, runtime *util.RuntimeOptions) (_result *DescribeGrantRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssociatedCcnId)) {
		query["AssociatedCcnId"] = request.AssociatedCcnId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGrantRules"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGrantRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeGrantRules(request *DescribeGrantRulesRequest) (_result *DescribeGrantRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGrantRulesResponse{}
	_body, _err := client.DescribeGrantRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeGrantSagRulesWithOptions(request *DescribeGrantSagRulesRequest, runtime *util.RuntimeOptions) (_result *DescribeGrantSagRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGrantSagRules"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGrantSagRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeGrantSagRules(request *DescribeGrantSagRulesRequest) (_result *DescribeGrantSagRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGrantSagRulesResponse{}
	_body, _err := client.DescribeGrantSagRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeGrantSagVbrRulesWithOptions(request *DescribeGrantSagVbrRulesRequest, runtime *util.RuntimeOptions) (_result *DescribeGrantSagVbrRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.VbrInstanceId)) {
		query["VbrInstanceId"] = request.VbrInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGrantSagVbrRules"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGrantSagVbrRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeGrantSagVbrRules(request *DescribeGrantSagVbrRulesRequest) (_result *DescribeGrantSagVbrRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGrantSagVbrRulesResponse{}
	_body, _err := client.DescribeGrantSagVbrRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHealthCheckAttributeWithOptions(request *DescribeHealthCheckAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeHealthCheckAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HcInstanceId)) {
		query["HcInstanceId"] = request.HcInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHealthCheckAttribute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHealthCheckAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHealthCheckAttribute(request *DescribeHealthCheckAttributeRequest) (_result *DescribeHealthCheckAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHealthCheckAttributeResponse{}
	_body, _err := client.DescribeHealthCheckAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHealthChecksWithOptions(request *DescribeHealthChecksRequest, runtime *util.RuntimeOptions) (_result *DescribeHealthChecksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HcInstanceId)) {
		query["HcInstanceId"] = request.HcInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHealthChecks"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHealthChecksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHealthChecks(request *DescribeHealthChecksRequest) (_result *DescribeHealthChecksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHealthChecksResponse{}
	_body, _err := client.DescribeHealthChecksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeQosCarsWithOptions(request *DescribeQosCarsRequest, runtime *util.RuntimeOptions) (_result *DescribeQosCarsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QosCarId)) {
		query["QosCarId"] = request.QosCarId
	}

	if !tea.BoolValue(util.IsUnset(request.QosId)) {
		query["QosId"] = request.QosId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeQosCars"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeQosCarsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeQosCars(request *DescribeQosCarsRequest) (_result *DescribeQosCarsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeQosCarsResponse{}
	_body, _err := client.DescribeQosCarsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeQosPoliciesWithOptions(request *DescribeQosPoliciesRequest, runtime *util.RuntimeOptions) (_result *DescribeQosPoliciesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.QosId)) {
		query["QosId"] = request.QosId
	}

	if !tea.BoolValue(util.IsUnset(request.QosPolicyId)) {
		query["QosPolicyId"] = request.QosPolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeQosPolicies"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeQosPoliciesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeQosPolicies(request *DescribeQosPoliciesRequest) (_result *DescribeQosPoliciesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeQosPoliciesResponse{}
	_body, _err := client.DescribeQosPoliciesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeQosesWithOptions(request *DescribeQosesRequest, runtime *util.RuntimeOptions) (_result *DescribeQosesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QosIds)) {
		query["QosIds"] = request.QosIds
	}

	if !tea.BoolValue(util.IsUnset(request.QosName)) {
		query["QosName"] = request.QosName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeQoses"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeQosesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeQoses(request *DescribeQosesRequest) (_result *DescribeQosesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeQosesResponse{}
	_body, _err := client.DescribeQosesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRegionsWithOptions(request *DescribeRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcceptLanguage)) {
		query["AcceptLanguage"] = request.AcceptLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRegions"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRegions(request *DescribeRegionsRequest) (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRouteDistributionStrategiesWithOptions(request *DescribeRouteDistributionStrategiesRequest, runtime *util.RuntimeOptions) (_result *DescribeRouteDistributionStrategiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRouteDistributionStrategies"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRouteDistributionStrategiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRouteDistributionStrategies(request *DescribeRouteDistributionStrategiesRequest) (_result *DescribeRouteDistributionStrategiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRouteDistributionStrategiesResponse{}
	_body, _err := client.DescribeRouteDistributionStrategiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSAGDeviceInfoWithOptions(request *DescribeSAGDeviceInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeSAGDeviceInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSAGDeviceInfo"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSAGDeviceInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSAGDeviceInfo(request *DescribeSAGDeviceInfoRequest) (_result *DescribeSAGDeviceInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSAGDeviceInfoResponse{}
	_body, _err := client.DescribeSAGDeviceInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagCurrentDnsWithOptions(request *DescribeSagCurrentDnsRequest, runtime *util.RuntimeOptions) (_result *DescribeSagCurrentDnsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagCurrentDns"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagCurrentDnsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagCurrentDns(request *DescribeSagCurrentDnsRequest) (_result *DescribeSagCurrentDnsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagCurrentDnsResponse{}
	_body, _err := client.DescribeSagCurrentDnsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagDropTopNWithOptions(request *DescribeSagDropTopNRequest, runtime *util.RuntimeOptions) (_result *DescribeSagDropTopNResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagDropTopN"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagDropTopNResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagDropTopN(request *DescribeSagDropTopNRequest) (_result *DescribeSagDropTopNResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagDropTopNResponse{}
	_body, _err := client.DescribeSagDropTopNWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagExpressConnectInterfaceListWithOptions(request *DescribeSagExpressConnectInterfaceListRequest, runtime *util.RuntimeOptions) (_result *DescribeSagExpressConnectInterfaceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PortName)) {
		query["PortName"] = request.PortName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagExpressConnectInterfaceList"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagExpressConnectInterfaceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagExpressConnectInterfaceList(request *DescribeSagExpressConnectInterfaceListRequest) (_result *DescribeSagExpressConnectInterfaceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagExpressConnectInterfaceListResponse{}
	_body, _err := client.DescribeSagExpressConnectInterfaceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagGlobalRouteProtocolWithOptions(request *DescribeSagGlobalRouteProtocolRequest, runtime *util.RuntimeOptions) (_result *DescribeSagGlobalRouteProtocolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagGlobalRouteProtocol"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagGlobalRouteProtocolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagGlobalRouteProtocol(request *DescribeSagGlobalRouteProtocolRequest) (_result *DescribeSagGlobalRouteProtocolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagGlobalRouteProtocolResponse{}
	_body, _err := client.DescribeSagGlobalRouteProtocolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagHaWithOptions(request *DescribeSagHaRequest, runtime *util.RuntimeOptions) (_result *DescribeSagHaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagHa"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagHaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagHa(request *DescribeSagHaRequest) (_result *DescribeSagHaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagHaResponse{}
	_body, _err := client.DescribeSagHaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagLanListWithOptions(request *DescribeSagLanListRequest, runtime *util.RuntimeOptions) (_result *DescribeSagLanListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagLanList"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagLanListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagLanList(request *DescribeSagLanListRequest) (_result *DescribeSagLanListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagLanListResponse{}
	_body, _err := client.DescribeSagLanListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagManagementPortWithOptions(request *DescribeSagManagementPortRequest, runtime *util.RuntimeOptions) (_result *DescribeSagManagementPortResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagManagementPort"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagManagementPortResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagManagementPort(request *DescribeSagManagementPortRequest) (_result *DescribeSagManagementPortResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagManagementPortResponse{}
	_body, _err := client.DescribeSagManagementPortWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagOnlineClientStatisticsWithOptions(request *DescribeSagOnlineClientStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeSagOnlineClientStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGIds)) {
		query["SmartAGIds"] = request.SmartAGIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagOnlineClientStatistics"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagOnlineClientStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagOnlineClientStatistics(request *DescribeSagOnlineClientStatisticsRequest) (_result *DescribeSagOnlineClientStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagOnlineClientStatisticsResponse{}
	_body, _err := client.DescribeSagOnlineClientStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagPortListWithOptions(request *DescribeSagPortListRequest, runtime *util.RuntimeOptions) (_result *DescribeSagPortListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagPortList"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagPortListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagPortList(request *DescribeSagPortListRequest) (_result *DescribeSagPortListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagPortListResponse{}
	_body, _err := client.DescribeSagPortListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagPortRouteProtocolListWithOptions(request *DescribeSagPortRouteProtocolListRequest, runtime *util.RuntimeOptions) (_result *DescribeSagPortRouteProtocolListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagPortRouteProtocolList"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagPortRouteProtocolListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagPortRouteProtocolList(request *DescribeSagPortRouteProtocolListRequest) (_result *DescribeSagPortRouteProtocolListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagPortRouteProtocolListResponse{}
	_body, _err := client.DescribeSagPortRouteProtocolListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagRemoteAccessWithOptions(request *DescribeSagRemoteAccessRequest, runtime *util.RuntimeOptions) (_result *DescribeSagRemoteAccessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumber)) {
		query["SerialNumber"] = request.SerialNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagRemoteAccess"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagRemoteAccessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagRemoteAccess(request *DescribeSagRemoteAccessRequest) (_result *DescribeSagRemoteAccessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagRemoteAccessResponse{}
	_body, _err := client.DescribeSagRemoteAccessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagRouteListWithOptions(request *DescribeSagRouteListRequest, runtime *util.RuntimeOptions) (_result *DescribeSagRouteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagRouteList"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagRouteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagRouteList(request *DescribeSagRouteListRequest) (_result *DescribeSagRouteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagRouteListResponse{}
	_body, _err := client.DescribeSagRouteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagRouteProtocolBgpWithOptions(request *DescribeSagRouteProtocolBgpRequest, runtime *util.RuntimeOptions) (_result *DescribeSagRouteProtocolBgpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagRouteProtocolBgp"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagRouteProtocolBgpResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagRouteProtocolBgp(request *DescribeSagRouteProtocolBgpRequest) (_result *DescribeSagRouteProtocolBgpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagRouteProtocolBgpResponse{}
	_body, _err := client.DescribeSagRouteProtocolBgpWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagRouteProtocolOspfWithOptions(request *DescribeSagRouteProtocolOspfRequest, runtime *util.RuntimeOptions) (_result *DescribeSagRouteProtocolOspfResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagRouteProtocolOspf"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagRouteProtocolOspfResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagRouteProtocolOspf(request *DescribeSagRouteProtocolOspfRequest) (_result *DescribeSagRouteProtocolOspfResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagRouteProtocolOspfResponse{}
	_body, _err := client.DescribeSagRouteProtocolOspfWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagStaticRouteListWithOptions(request *DescribeSagStaticRouteListRequest, runtime *util.RuntimeOptions) (_result *DescribeSagStaticRouteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagStaticRouteList"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagStaticRouteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagStaticRouteList(request *DescribeSagStaticRouteListRequest) (_result *DescribeSagStaticRouteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagStaticRouteListResponse{}
	_body, _err := client.DescribeSagStaticRouteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagTrafficTopNWithOptions(request *DescribeSagTrafficTopNRequest, runtime *util.RuntimeOptions) (_result *DescribeSagTrafficTopNResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagTrafficTopN"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagTrafficTopNResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagTrafficTopN(request *DescribeSagTrafficTopNRequest) (_result *DescribeSagTrafficTopNResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagTrafficTopNResponse{}
	_body, _err := client.DescribeSagTrafficTopNWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagUserDnsWithOptions(request *DescribeSagUserDnsRequest, runtime *util.RuntimeOptions) (_result *DescribeSagUserDnsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagUserDns"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagUserDnsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagUserDns(request *DescribeSagUserDnsRequest) (_result *DescribeSagUserDnsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagUserDnsResponse{}
	_body, _err := client.DescribeSagUserDnsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagVbrRelationsWithOptions(request *DescribeSagVbrRelationsRequest, runtime *util.RuntimeOptions) (_result *DescribeSagVbrRelationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.VbrInstanceIds)) {
		query["VbrInstanceIds"] = request.VbrInstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.VbrRegionId)) {
		query["VbrRegionId"] = request.VbrRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagVbrRelations"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagVbrRelationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagVbrRelations(request *DescribeSagVbrRelationsRequest) (_result *DescribeSagVbrRelationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagVbrRelationsResponse{}
	_body, _err := client.DescribeSagVbrRelationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagWan4GWithOptions(request *DescribeSagWan4GRequest, runtime *util.RuntimeOptions) (_result *DescribeSagWan4GResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagWan4G"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagWan4GResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagWan4G(request *DescribeSagWan4GRequest) (_result *DescribeSagWan4GResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagWan4GResponse{}
	_body, _err := client.DescribeSagWan4GWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagWanListWithOptions(request *DescribeSagWanListRequest, runtime *util.RuntimeOptions) (_result *DescribeSagWanListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagWanList"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagWanListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagWanList(request *DescribeSagWanListRequest) (_result *DescribeSagWanListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagWanListResponse{}
	_body, _err := client.DescribeSagWanListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagWanSnatWithOptions(request *DescribeSagWanSnatRequest, runtime *util.RuntimeOptions) (_result *DescribeSagWanSnatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagWanSnat"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagWanSnatResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagWanSnat(request *DescribeSagWanSnatRequest) (_result *DescribeSagWanSnatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagWanSnatResponse{}
	_body, _err := client.DescribeSagWanSnatWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSagWifiWithOptions(request *DescribeSagWifiRequest, runtime *util.RuntimeOptions) (_result *DescribeSagWifiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSagWifi"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSagWifiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSagWifi(request *DescribeSagWifiRequest) (_result *DescribeSagWifiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSagWifiResponse{}
	_body, _err := client.DescribeSagWifiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSmartAccessGatewayAttributeWithOptions(request *DescribeSmartAccessGatewayAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeSmartAccessGatewayAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSmartAccessGatewayAttribute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSmartAccessGatewayAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSmartAccessGatewayAttribute(request *DescribeSmartAccessGatewayAttributeRequest) (_result *DescribeSmartAccessGatewayAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSmartAccessGatewayAttributeResponse{}
	_body, _err := client.DescribeSmartAccessGatewayAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSmartAccessGatewayClientUsersWithOptions(request *DescribeSmartAccessGatewayClientUsersRequest, runtime *util.RuntimeOptions) (_result *DescribeSmartAccessGatewayClientUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UserMail)) {
		query["UserMail"] = request.UserMail
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSmartAccessGatewayClientUsers"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSmartAccessGatewayClientUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSmartAccessGatewayClientUsers(request *DescribeSmartAccessGatewayClientUsersRequest) (_result *DescribeSmartAccessGatewayClientUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSmartAccessGatewayClientUsersResponse{}
	_body, _err := client.DescribeSmartAccessGatewayClientUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSmartAccessGatewayHaWithOptions(request *DescribeSmartAccessGatewayHaRequest, runtime *util.RuntimeOptions) (_result *DescribeSmartAccessGatewayHaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSmartAccessGatewayHa"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSmartAccessGatewayHaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSmartAccessGatewayHa(request *DescribeSmartAccessGatewayHaRequest) (_result *DescribeSmartAccessGatewayHaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSmartAccessGatewayHaResponse{}
	_body, _err := client.DescribeSmartAccessGatewayHaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSmartAccessGatewayVersionsWithOptions(request *DescribeSmartAccessGatewayVersionsRequest, runtime *util.RuntimeOptions) (_result *DescribeSmartAccessGatewayVersionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	if !tea.BoolValue(util.IsUnset(request.VersionType)) {
		query["VersionType"] = request.VersionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSmartAccessGatewayVersions"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSmartAccessGatewayVersionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSmartAccessGatewayVersions(request *DescribeSmartAccessGatewayVersionsRequest) (_result *DescribeSmartAccessGatewayVersionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSmartAccessGatewayVersionsResponse{}
	_body, _err := client.DescribeSmartAccessGatewayVersionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSmartAccessGatewaysWithOptions(request *DescribeSmartAccessGatewaysRequest, runtime *util.RuntimeOptions) (_result *DescribeSmartAccessGatewaysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclIds)) {
		query["AclIds"] = request.AclIds
	}

	if !tea.BoolValue(util.IsUnset(request.AssociatedCcnId)) {
		query["AssociatedCcnId"] = request.AssociatedCcnId
	}

	if !tea.BoolValue(util.IsUnset(request.AssociatedCcnName)) {
		query["AssociatedCcnName"] = request.AssociatedCcnName
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessState)) {
		query["BusinessState"] = request.BusinessState
	}

	if !tea.BoolValue(util.IsUnset(request.CanAssociateQos)) {
		query["CanAssociateQos"] = request.CanAssociateQos
	}

	if !tea.BoolValue(util.IsUnset(request.HardwareType)) {
		query["HardwareType"] = request.HardwareType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumber)) {
		query["SerialNumber"] = request.SerialNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGIds)) {
		query["SmartAGIds"] = request.SmartAGIds
	}

	if !tea.BoolValue(util.IsUnset(request.SoftwareVersion)) {
		query["SoftwareVersion"] = request.SoftwareVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.UnboundAclIds)) {
		query["UnboundAclIds"] = request.UnboundAclIds
	}

	if !tea.BoolValue(util.IsUnset(request.VersionComparator)) {
		query["VersionComparator"] = request.VersionComparator
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSmartAccessGateways"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSmartAccessGatewaysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSmartAccessGateways(request *DescribeSmartAccessGatewaysRequest) (_result *DescribeSmartAccessGatewaysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSmartAccessGatewaysResponse{}
	_body, _err := client.DescribeSmartAccessGatewaysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnatEntriesWithOptions(request *DescribeSnatEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeSnatEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSnatEntries"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSnatEntriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnatEntries(request *DescribeSnatEntriesRequest) (_result *DescribeSnatEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnatEntriesResponse{}
	_body, _err := client.DescribeSnatEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUnbindFlowLogSagsWithOptions(request *DescribeUnbindFlowLogSagsRequest, runtime *util.RuntimeOptions) (_result *DescribeUnbindFlowLogSagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUnbindFlowLogSags"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUnbindFlowLogSagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUnbindFlowLogSags(request *DescribeUnbindFlowLogSagsRequest) (_result *DescribeUnbindFlowLogSagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUnbindFlowLogSagsResponse{}
	_body, _err := client.DescribeUnbindFlowLogSagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUserFlowStatisticsWithOptions(request *DescribeUserFlowStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeUserFlowStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.StatisticsDate)) {
		query["StatisticsDate"] = request.StatisticsDate
	}

	if !tea.BoolValue(util.IsUnset(request.UserNames)) {
		query["UserNames"] = request.UserNames
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserFlowStatistics"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserFlowStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUserFlowStatistics(request *DescribeUserFlowStatisticsRequest) (_result *DescribeUserFlowStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserFlowStatisticsResponse{}
	_body, _err := client.DescribeUserFlowStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUserOnlineClientStatisticsWithOptions(request *DescribeUserOnlineClientStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeUserOnlineClientStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UserNames)) {
		query["UserNames"] = request.UserNames
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserOnlineClientStatistics"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserOnlineClientStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUserOnlineClientStatistics(request *DescribeUserOnlineClientStatisticsRequest) (_result *DescribeUserOnlineClientStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserOnlineClientStatisticsResponse{}
	_body, _err := client.DescribeUserOnlineClientStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUserOnlineClientsWithOptions(request *DescribeUserOnlineClientsRequest, runtime *util.RuntimeOptions) (_result *DescribeUserOnlineClientsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserOnlineClients"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserOnlineClientsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUserOnlineClients(request *DescribeUserOnlineClientsRequest) (_result *DescribeUserOnlineClientsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserOnlineClientsResponse{}
	_body, _err := client.DescribeUserOnlineClientsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DiagnoseSmartAccessGatewayWithOptions(request *DiagnoseSmartAccessGatewayRequest, runtime *util.RuntimeOptions) (_result *DiagnoseSmartAccessGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DiagnoseSmartAccessGateway"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DiagnoseSmartAccessGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DiagnoseSmartAccessGateway(request *DiagnoseSmartAccessGatewayRequest) (_result *DiagnoseSmartAccessGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DiagnoseSmartAccessGatewayResponse{}
	_body, _err := client.DiagnoseSmartAccessGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableSmartAGDpiMonitorWithOptions(request *DisableSmartAGDpiMonitorRequest, runtime *util.RuntimeOptions) (_result *DisableSmartAGDpiMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableSmartAGDpiMonitor"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableSmartAGDpiMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableSmartAGDpiMonitor(request *DisableSmartAGDpiMonitorRequest) (_result *DisableSmartAGDpiMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableSmartAGDpiMonitorResponse{}
	_body, _err := client.DisableSmartAGDpiMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableSmartAccessGatewayUserWithOptions(request *DisableSmartAccessGatewayUserRequest, runtime *util.RuntimeOptions) (_result *DisableSmartAccessGatewayUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableSmartAccessGatewayUser"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableSmartAccessGatewayUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableSmartAccessGatewayUser(request *DisableSmartAccessGatewayUserRequest) (_result *DisableSmartAccessGatewayUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableSmartAccessGatewayUserResponse{}
	_body, _err := client.DisableSmartAccessGatewayUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisassociateACLWithOptions(request *DisassociateACLRequest, runtime *util.RuntimeOptions) (_result *DisassociateACLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisassociateACL"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisassociateACLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisassociateACL(request *DisassociateACLRequest) (_result *DisassociateACLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisassociateACLResponse{}
	_body, _err := client.DisassociateACLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisassociateFlowLogWithOptions(request *DisassociateFlowLogRequest, runtime *util.RuntimeOptions) (_result *DisassociateFlowLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowLogId)) {
		query["FlowLogId"] = request.FlowLogId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisassociateFlowLog"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisassociateFlowLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisassociateFlowLog(request *DisassociateFlowLogRequest) (_result *DisassociateFlowLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisassociateFlowLogResponse{}
	_body, _err := client.DisassociateFlowLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisassociateQosWithOptions(request *DisassociateQosRequest, runtime *util.RuntimeOptions) (_result *DisassociateQosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QosId)) {
		query["QosId"] = request.QosId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisassociateQos"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisassociateQosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisassociateQos(request *DisassociateQosRequest) (_result *DisassociateQosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisassociateQosResponse{}
	_body, _err := client.DisassociateQosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DiscribeSmartAccessGatewayDiagnosisReportWithOptions(request *DiscribeSmartAccessGatewayDiagnosisReportRequest, runtime *util.RuntimeOptions) (_result *DiscribeSmartAccessGatewayDiagnosisReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DiscribeSmartAccessGatewayDiagnosisReport"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DiscribeSmartAccessGatewayDiagnosisReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DiscribeSmartAccessGatewayDiagnosisReport(request *DiscribeSmartAccessGatewayDiagnosisReportRequest) (_result *DiscribeSmartAccessGatewayDiagnosisReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DiscribeSmartAccessGatewayDiagnosisReportResponse{}
	_body, _err := client.DiscribeSmartAccessGatewayDiagnosisReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DissociateSmartAGFromApplicationBandwidthPackageWithOptions(request *DissociateSmartAGFromApplicationBandwidthPackageRequest, runtime *util.RuntimeOptions) (_result *DissociateSmartAGFromApplicationBandwidthPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplicationBandwidthPackageId)) {
		query["ApplicationBandwidthPackageId"] = request.ApplicationBandwidthPackageId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGIdList)) {
		query["SmartAGIdList"] = request.SmartAGIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DissociateSmartAGFromApplicationBandwidthPackage"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DissociateSmartAGFromApplicationBandwidthPackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DissociateSmartAGFromApplicationBandwidthPackage(request *DissociateSmartAGFromApplicationBandwidthPackageRequest) (_result *DissociateSmartAGFromApplicationBandwidthPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DissociateSmartAGFromApplicationBandwidthPackageResponse{}
	_body, _err := client.DissociateSmartAGFromApplicationBandwidthPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DowngradeSmartAccessGatewayWithOptions(request *DowngradeSmartAccessGatewayRequest, runtime *util.RuntimeOptions) (_result *DowngradeSmartAccessGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.BandWidthSpec)) {
		query["BandWidthSpec"] = request.BandWidthSpec
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DowngradeSmartAccessGateway"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DowngradeSmartAccessGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DowngradeSmartAccessGateway(request *DowngradeSmartAccessGatewayRequest) (_result *DowngradeSmartAccessGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DowngradeSmartAccessGatewayResponse{}
	_body, _err := client.DowngradeSmartAccessGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DowngradeSmartAccessGatewaySoftwareWithOptions(request *DowngradeSmartAccessGatewaySoftwareRequest, runtime *util.RuntimeOptions) (_result *DowngradeSmartAccessGatewaySoftwareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.DataPlan)) {
		query["DataPlan"] = request.DataPlan
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UserCount)) {
		query["UserCount"] = request.UserCount
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DowngradeSmartAccessGatewaySoftware"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DowngradeSmartAccessGatewaySoftwareResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DowngradeSmartAccessGatewaySoftware(request *DowngradeSmartAccessGatewaySoftwareRequest) (_result *DowngradeSmartAccessGatewaySoftwareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DowngradeSmartAccessGatewaySoftwareResponse{}
	_body, _err := client.DowngradeSmartAccessGatewaySoftwareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableSmartAGDpiMonitorWithOptions(request *EnableSmartAGDpiMonitorRequest, runtime *util.RuntimeOptions) (_result *EnableSmartAGDpiMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SlsLogStore)) {
		query["SlsLogStore"] = request.SlsLogStore
	}

	if !tea.BoolValue(util.IsUnset(request.SlsProjectName)) {
		query["SlsProjectName"] = request.SlsProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableSmartAGDpiMonitor"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableSmartAGDpiMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableSmartAGDpiMonitor(request *EnableSmartAGDpiMonitorRequest) (_result *EnableSmartAGDpiMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableSmartAGDpiMonitorResponse{}
	_body, _err := client.EnableSmartAGDpiMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableSmartAccessGatewayUserWithOptions(request *EnableSmartAccessGatewayUserRequest, runtime *util.RuntimeOptions) (_result *EnableSmartAccessGatewayUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableSmartAccessGatewayUser"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableSmartAccessGatewayUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableSmartAccessGatewayUser(request *EnableSmartAccessGatewayUserRequest) (_result *EnableSmartAccessGatewayUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableSmartAccessGatewayUserResponse{}
	_body, _err := client.EnableSmartAccessGatewayUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAclAttributeWithOptions(request *GetAclAttributeRequest, runtime *util.RuntimeOptions) (_result *GetAclAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAclAttribute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAclAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAclAttribute(request *GetAclAttributeRequest) (_result *GetAclAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAclAttributeResponse{}
	_body, _err := client.GetAclAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAdvancedMonitorStateWithOptions(request *GetAdvancedMonitorStateRequest, runtime *util.RuntimeOptions) (_result *GetAdvancedMonitorStateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAdvancedMonitorState"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAdvancedMonitorStateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAdvancedMonitorState(request *GetAdvancedMonitorStateRequest) (_result *GetAdvancedMonitorStateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAdvancedMonitorStateResponse{}
	_body, _err := client.GetAdvancedMonitorStateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCloudConnectNetworkUseLimitWithOptions(request *GetCloudConnectNetworkUseLimitRequest, runtime *util.RuntimeOptions) (_result *GetCloudConnectNetworkUseLimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCloudConnectNetworkUseLimit"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCloudConnectNetworkUseLimitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCloudConnectNetworkUseLimit(request *GetCloudConnectNetworkUseLimitRequest) (_result *GetCloudConnectNetworkUseLimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCloudConnectNetworkUseLimitResponse{}
	_body, _err := client.GetCloudConnectNetworkUseLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * ****
 *
 * @param request GetQosAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQosAttributeResponse
 */
func (client *Client) GetQosAttributeWithOptions(request *GetQosAttributeRequest, runtime *util.RuntimeOptions) (_result *GetQosAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.QosId)) {
		query["QosId"] = request.QosId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQosAttribute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetQosAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * ****
 *
 * @param request GetQosAttributeRequest
 * @return GetQosAttributeResponse
 */
func (client *Client) GetQosAttribute(request *GetQosAttributeRequest) (_result *GetQosAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQosAttributeResponse{}
	_body, _err := client.GetQosAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSmartAGDpiAttributeWithOptions(request *GetSmartAGDpiAttributeRequest, runtime *util.RuntimeOptions) (_result *GetSmartAGDpiAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSmartAGDpiAttribute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSmartAGDpiAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSmartAGDpiAttribute(request *GetSmartAGDpiAttributeRequest) (_result *GetSmartAGDpiAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSmartAGDpiAttributeResponse{}
	_body, _err := client.GetSmartAGDpiAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSmartAccessGatewayUseLimitWithOptions(request *GetSmartAccessGatewayUseLimitRequest, runtime *util.RuntimeOptions) (_result *GetSmartAccessGatewayUseLimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSmartAccessGatewayUseLimit"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSmartAccessGatewayUseLimitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSmartAccessGatewayUseLimit(request *GetSmartAccessGatewayUseLimitRequest) (_result *GetSmartAccessGatewayUseLimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSmartAccessGatewayUseLimitResponse{}
	_body, _err := client.GetSmartAccessGatewayUseLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GrantInstanceToCbnWithOptions(request *GrantInstanceToCbnRequest, runtime *util.RuntimeOptions) (_result *GrantInstanceToCbnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CcnInstanceId)) {
		query["CcnInstanceId"] = request.CcnInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.CenInstanceId)) {
		query["CenInstanceId"] = request.CenInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.CenUid)) {
		query["CenUid"] = request.CenUid
	}

	if !tea.BoolValue(util.IsUnset(request.GrantTrafficService)) {
		query["GrantTrafficService"] = request.GrantTrafficService
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GrantInstanceToCbn"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GrantInstanceToCbnResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GrantInstanceToCbn(request *GrantInstanceToCbnRequest) (_result *GrantInstanceToCbnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GrantInstanceToCbnResponse{}
	_body, _err := client.GrantInstanceToCbnWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GrantSagInstanceToCcnWithOptions(request *GrantSagInstanceToCcnRequest, runtime *util.RuntimeOptions) (_result *GrantSagInstanceToCcnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CcnInstanceId)) {
		query["CcnInstanceId"] = request.CcnInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.CcnUid)) {
		query["CcnUid"] = request.CcnUid
	}

	if !tea.BoolValue(util.IsUnset(request.GrantTrafficService)) {
		query["GrantTrafficService"] = request.GrantTrafficService
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GrantSagInstanceToCcn"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GrantSagInstanceToCcnResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GrantSagInstanceToCcn(request *GrantSagInstanceToCcnRequest) (_result *GrantSagInstanceToCcnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GrantSagInstanceToCcnResponse{}
	_body, _err := client.GrantSagInstanceToCcnWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GrantSagInstanceToVbrWithOptions(request *GrantSagInstanceToVbrRequest, runtime *util.RuntimeOptions) (_result *GrantSagInstanceToVbrResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.VbrInstanceId)) {
		query["VbrInstanceId"] = request.VbrInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.VbrRegionId)) {
		query["VbrRegionId"] = request.VbrRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.VbrUid)) {
		query["VbrUid"] = request.VbrUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GrantSagInstanceToVbr"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GrantSagInstanceToVbrResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GrantSagInstanceToVbr(request *GrantSagInstanceToVbrRequest) (_result *GrantSagInstanceToVbrResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GrantSagInstanceToVbrResponse{}
	_body, _err := client.GrantSagInstanceToVbrWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) KickOutClientsWithOptions(request *KickOutClientsRequest, runtime *util.RuntimeOptions) (_result *KickOutClientsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		query["Username"] = request.Username
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("KickOutClients"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &KickOutClientsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) KickOutClients(request *KickOutClientsRequest) (_result *KickOutClientsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &KickOutClientsResponse{}
	_body, _err := client.KickOutClientsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAccessPointNetworkQualitiesWithOptions(request *ListAccessPointNetworkQualitiesRequest, runtime *util.RuntimeOptions) (_result *ListAccessPointNetworkQualitiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAccessPointNetworkQualities"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAccessPointNetworkQualitiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAccessPointNetworkQualities(request *ListAccessPointNetworkQualitiesRequest) (_result *ListAccessPointNetworkQualitiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAccessPointNetworkQualitiesResponse{}
	_body, _err := client.ListAccessPointNetworkQualitiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAccessPointsWithOptions(request *ListAccessPointsRequest, runtime *util.RuntimeOptions) (_result *ListAccessPointsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAccessPoints"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAccessPointsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAccessPoints(request *ListAccessPointsRequest) (_result *ListAccessPointsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAccessPointsResponse{}
	_body, _err := client.ListAccessPointsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAvailableServiceAddressWithOptions(request *ListAvailableServiceAddressRequest, runtime *util.RuntimeOptions) (_result *ListAvailableServiceAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddressType)) {
		query["AddressType"] = request.AddressType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	if !tea.BoolValue(util.IsUnset(request.Sn)) {
		query["Sn"] = request.Sn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAvailableServiceAddress"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAvailableServiceAddressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAvailableServiceAddress(request *ListAvailableServiceAddressRequest) (_result *ListAvailableServiceAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAvailableServiceAddressResponse{}
	_body, _err := client.ListAvailableServiceAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDpiConfigErrorWithOptions(request *ListDpiConfigErrorRequest, runtime *util.RuntimeOptions) (_result *ListDpiConfigErrorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DpiConfigType)) {
		query["DpiConfigType"] = request.DpiConfigType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleInstanceId)) {
		query["RuleInstanceId"] = request.RuleInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDpiConfigError"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDpiConfigErrorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDpiConfigError(request *ListDpiConfigErrorRequest) (_result *ListDpiConfigErrorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDpiConfigErrorResponse{}
	_body, _err := client.ListDpiConfigErrorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDpiGroupsWithOptions(request *ListDpiGroupsRequest, runtime *util.RuntimeOptions) (_result *ListDpiGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DpiGroupIds)) {
		query["DpiGroupIds"] = request.DpiGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.DpiGroupNames)) {
		query["DpiGroupNames"] = request.DpiGroupNames
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDpiGroups"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDpiGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDpiGroups(request *ListDpiGroupsRequest) (_result *ListDpiGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDpiGroupsResponse{}
	_body, _err := client.ListDpiGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDpiSignaturesWithOptions(request *ListDpiSignaturesRequest, runtime *util.RuntimeOptions) (_result *ListDpiSignaturesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DpiGroupId)) {
		query["DpiGroupId"] = request.DpiGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.DpiSignatureIds)) {
		query["DpiSignatureIds"] = request.DpiSignatureIds
	}

	if !tea.BoolValue(util.IsUnset(request.DpiSignatureNames)) {
		query["DpiSignatureNames"] = request.DpiSignatureNames
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDpiSignatures"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDpiSignaturesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDpiSignatures(request *ListDpiSignaturesRequest) (_result *ListDpiSignaturesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDpiSignaturesResponse{}
	_body, _err := client.ListDpiSignaturesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEnterpriseCodeWithOptions(request *ListEnterpriseCodeRequest, runtime *util.RuntimeOptions) (_result *ListEnterpriseCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnterpriseCode)) {
		query["EnterpriseCode"] = request.EnterpriseCode
	}

	if !tea.BoolValue(util.IsUnset(request.IsDefault)) {
		query["IsDefault"] = request.IsDefault
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEnterpriseCode"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEnterpriseCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEnterpriseCode(request *ListEnterpriseCodeRequest) (_result *ListEnterpriseCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEnterpriseCodeResponse{}
	_body, _err := client.ListEnterpriseCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListProbeTaskWithOptions(request *ListProbeTaskRequest, runtime *util.RuntimeOptions) (_result *ListProbeTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeTaskId)) {
		query["ProbeTaskId"] = request.ProbeTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		query["Protocol"] = request.Protocol
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	if !tea.BoolValue(util.IsUnset(request.SagName)) {
		query["SagName"] = request.SagName
	}

	if !tea.BoolValue(util.IsUnset(request.Sn)) {
		query["Sn"] = request.Sn
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProbeTask"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProbeTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListProbeTask(request *ListProbeTaskRequest) (_result *ListProbeTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProbeTaskResponse{}
	_body, _err := client.ListProbeTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSmartAGApiUnsupportedFeatureWithOptions(request *ListSmartAGApiUnsupportedFeatureRequest, runtime *util.RuntimeOptions) (_result *ListSmartAGApiUnsupportedFeatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OpenApiName)) {
		query["OpenApiName"] = request.OpenApiName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumber)) {
		query["SerialNumber"] = request.SerialNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSmartAGApiUnsupportedFeature"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSmartAGApiUnsupportedFeatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSmartAGApiUnsupportedFeature(request *ListSmartAGApiUnsupportedFeatureRequest) (_result *ListSmartAGApiUnsupportedFeatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSmartAGApiUnsupportedFeatureResponse{}
	_body, _err := client.ListSmartAGApiUnsupportedFeatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSmartAGByAccessPointWithOptions(request *ListSmartAGByAccessPointRequest, runtime *util.RuntimeOptions) (_result *ListSmartAGByAccessPointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessPointId)) {
		query["AccessPointId"] = request.AccessPointId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGStatus)) {
		query["SmartAGStatus"] = request.SmartAGStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSmartAGByAccessPoint"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSmartAGByAccessPointResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSmartAGByAccessPoint(request *ListSmartAGByAccessPointRequest) (_result *ListSmartAGByAccessPointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSmartAGByAccessPointResponse{}
	_body, _err := client.ListSmartAGByAccessPointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyACLWithOptions(request *ModifyACLRequest, runtime *util.RuntimeOptions) (_result *ModifyACLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyACL"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyACLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyACL(request *ModifyACLRequest) (_result *ModifyACLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyACLResponse{}
	_body, _err := client.ModifyACLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyACLRuleWithOptions(request *ModifyACLRuleRequest, runtime *util.RuntimeOptions) (_result *ModifyACLRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.AcrId)) {
		query["AcrId"] = request.AcrId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DestCidr)) {
		query["DestCidr"] = request.DestCidr
	}

	if !tea.BoolValue(util.IsUnset(request.DestPortRange)) {
		query["DestPortRange"] = request.DestPortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Direction)) {
		query["Direction"] = request.Direction
	}

	if !tea.BoolValue(util.IsUnset(request.DpiGroupIds)) {
		query["DpiGroupIds"] = request.DpiGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.DpiSignatureIds)) {
		query["DpiSignatureIds"] = request.DpiSignatureIds
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Policy)) {
		query["Policy"] = request.Policy
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceCidr)) {
		query["SourceCidr"] = request.SourceCidr
	}

	if !tea.BoolValue(util.IsUnset(request.SourcePortRange)) {
		query["SourcePortRange"] = request.SourcePortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyACLRule"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyACLRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyACLRule(request *ModifyACLRuleRequest) (_result *ModifyACLRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyACLRuleResponse{}
	_body, _err := client.ModifyACLRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClientUserDNSWithOptions(request *ModifyClientUserDNSRequest, runtime *util.RuntimeOptions) (_result *ModifyClientUserDNSResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppDNS)) {
		query["AppDNS"] = request.AppDNS
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RecoveredDNS)) {
		query["RecoveredDNS"] = request.RecoveredDNS
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyClientUserDNS"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyClientUserDNSResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClientUserDNS(request *ModifyClientUserDNSRequest) (_result *ModifyClientUserDNSResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClientUserDNSResponse{}
	_body, _err := client.ModifyClientUserDNSWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCloudConnectNetworkWithOptions(request *ModifyCloudConnectNetworkRequest, runtime *util.RuntimeOptions) (_result *ModifyCloudConnectNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CcnId)) {
		query["CcnId"] = request.CcnId
	}

	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InterworkingStatus)) {
		query["InterworkingStatus"] = request.InterworkingStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCloudConnectNetwork"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCloudConnectNetworkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCloudConnectNetwork(request *ModifyCloudConnectNetworkRequest) (_result *ModifyCloudConnectNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCloudConnectNetworkResponse{}
	_body, _err := client.ModifyCloudConnectNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDeviceAutoUpgradePolicyWithOptions(request *ModifyDeviceAutoUpgradePolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyDeviceAutoUpgradePolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CronExpression)) {
		query["CronExpression"] = request.CronExpression
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumber)) {
		query["SerialNumber"] = request.SerialNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.TimeZone)) {
		query["TimeZone"] = request.TimeZone
	}

	if !tea.BoolValue(util.IsUnset(request.UpgradeType)) {
		query["UpgradeType"] = request.UpgradeType
	}

	if !tea.BoolValue(util.IsUnset(request.VersionType)) {
		query["VersionType"] = request.VersionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDeviceAutoUpgradePolicy"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDeviceAutoUpgradePolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDeviceAutoUpgradePolicy(request *ModifyDeviceAutoUpgradePolicyRequest) (_result *ModifyDeviceAutoUpgradePolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDeviceAutoUpgradePolicyResponse{}
	_body, _err := client.ModifyDeviceAutoUpgradePolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyFlowLogAttributeWithOptions(request *ModifyFlowLogAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyFlowLogAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActiveAging)) {
		query["ActiveAging"] = request.ActiveAging
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.FlowLogId)) {
		query["FlowLogId"] = request.FlowLogId
	}

	if !tea.BoolValue(util.IsUnset(request.InactiveAging)) {
		query["InactiveAging"] = request.InactiveAging
	}

	if !tea.BoolValue(util.IsUnset(request.LogstoreName)) {
		query["LogstoreName"] = request.LogstoreName
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NetflowServerIp)) {
		query["NetflowServerIp"] = request.NetflowServerIp
	}

	if !tea.BoolValue(util.IsUnset(request.NetflowServerPort)) {
		query["NetflowServerPort"] = request.NetflowServerPort
	}

	if !tea.BoolValue(util.IsUnset(request.NetflowVersion)) {
		query["NetflowVersion"] = request.NetflowVersion
	}

	if !tea.BoolValue(util.IsUnset(request.OutputType)) {
		query["OutputType"] = request.OutputType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		query["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SlsRegionId)) {
		query["SlsRegionId"] = request.SlsRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyFlowLogAttribute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyFlowLogAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyFlowLogAttribute(request *ModifyFlowLogAttributeRequest) (_result *ModifyFlowLogAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFlowLogAttributeResponse{}
	_body, _err := client.ModifyFlowLogAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyHealthCheckWithOptions(request *ModifyHealthCheckRequest, runtime *util.RuntimeOptions) (_result *ModifyHealthCheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DstIpAddr)) {
		query["DstIpAddr"] = request.DstIpAddr
	}

	if !tea.BoolValue(util.IsUnset(request.DstPort)) {
		query["DstPort"] = request.DstPort
	}

	if !tea.BoolValue(util.IsUnset(request.FailCountThreshold)) {
		query["FailCountThreshold"] = request.FailCountThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.HcInstanceId)) {
		query["HcInstanceId"] = request.HcInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeCount)) {
		query["ProbeCount"] = request.ProbeCount
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeInterval)) {
		query["ProbeInterval"] = request.ProbeInterval
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeTimeout)) {
		query["ProbeTimeout"] = request.ProbeTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RttFailThreshold)) {
		query["RttFailThreshold"] = request.RttFailThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.RttThreshold)) {
		query["RttThreshold"] = request.RttThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SrcIpAddr)) {
		query["SrcIpAddr"] = request.SrcIpAddr
	}

	if !tea.BoolValue(util.IsUnset(request.SrcPort)) {
		query["SrcPort"] = request.SrcPort
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHealthCheck"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyHealthCheckResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyHealthCheck(request *ModifyHealthCheckRequest) (_result *ModifyHealthCheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHealthCheckResponse{}
	_body, _err := client.ModifyHealthCheckWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyQosWithOptions(request *ModifyQosRequest, runtime *util.RuntimeOptions) (_result *ModifyQosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.QosDescription)) {
		query["QosDescription"] = request.QosDescription
	}

	if !tea.BoolValue(util.IsUnset(request.QosId)) {
		query["QosId"] = request.QosId
	}

	if !tea.BoolValue(util.IsUnset(request.QosName)) {
		query["QosName"] = request.QosName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyQos"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyQosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyQos(request *ModifyQosRequest) (_result *ModifyQosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyQosResponse{}
	_body, _err := client.ModifyQosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyQosCarWithOptions(request *ModifyQosCarRequest, runtime *util.RuntimeOptions) (_result *ModifyQosCarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.LimitType)) {
		query["LimitType"] = request.LimitType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxBandwidthAbs)) {
		query["MaxBandwidthAbs"] = request.MaxBandwidthAbs
	}

	if !tea.BoolValue(util.IsUnset(request.MaxBandwidthPercent)) {
		query["MaxBandwidthPercent"] = request.MaxBandwidthPercent
	}

	if !tea.BoolValue(util.IsUnset(request.MinBandwidthAbs)) {
		query["MinBandwidthAbs"] = request.MinBandwidthAbs
	}

	if !tea.BoolValue(util.IsUnset(request.MinBandwidthPercent)) {
		query["MinBandwidthPercent"] = request.MinBandwidthPercent
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PercentSourceType)) {
		query["PercentSourceType"] = request.PercentSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.QosCarId)) {
		query["QosCarId"] = request.QosCarId
	}

	if !tea.BoolValue(util.IsUnset(request.QosId)) {
		query["QosId"] = request.QosId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyQosCar"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyQosCarResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyQosCar(request *ModifyQosCarRequest) (_result *ModifyQosCarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyQosCarResponse{}
	_body, _err := client.ModifyQosCarWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyQosPolicyWithOptions(request *ModifyQosPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyQosPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DestCidr)) {
		query["DestCidr"] = request.DestCidr
	}

	if !tea.BoolValue(util.IsUnset(request.DestPortRange)) {
		query["DestPortRange"] = request.DestPortRange
	}

	if !tea.BoolValue(util.IsUnset(request.DpiGroupIds)) {
		query["DpiGroupIds"] = request.DpiGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.DpiSignatureIds)) {
		query["DpiSignatureIds"] = request.DpiSignatureIds
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.QosId)) {
		query["QosId"] = request.QosId
	}

	if !tea.BoolValue(util.IsUnset(request.QosPolicyId)) {
		query["QosPolicyId"] = request.QosPolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceCidr)) {
		query["SourceCidr"] = request.SourceCidr
	}

	if !tea.BoolValue(util.IsUnset(request.SourcePortRange)) {
		query["SourcePortRange"] = request.SourcePortRange
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyQosPolicy"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyQosPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyQosPolicy(request *ModifyQosPolicyRequest) (_result *ModifyQosPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyQosPolicyResponse{}
	_body, _err := client.ModifyQosPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyRouteDistributionStrategyWithOptions(request *ModifyRouteDistributionStrategyRequest, runtime *util.RuntimeOptions) (_result *ModifyRouteDistributionStrategyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestCidrBlock)) {
		query["DestCidrBlock"] = request.DestCidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.HcInstanceId)) {
		query["HcInstanceId"] = request.HcInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RouteDistribution)) {
		query["RouteDistribution"] = request.RouteDistribution
	}

	if !tea.BoolValue(util.IsUnset(request.RouteSource)) {
		query["RouteSource"] = request.RouteSource
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyRouteDistributionStrategy"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyRouteDistributionStrategyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyRouteDistributionStrategy(request *ModifyRouteDistributionStrategyRequest) (_result *ModifyRouteDistributionStrategyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyRouteDistributionStrategyResponse{}
	_body, _err := client.ModifyRouteDistributionStrategyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySAGAdminPasswordWithOptions(request *ModifySAGAdminPasswordRequest, runtime *util.RuntimeOptions) (_result *ModifySAGAdminPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySAGAdminPassword"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySAGAdminPasswordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySAGAdminPassword(request *ModifySAGAdminPasswordRequest) (_result *ModifySAGAdminPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySAGAdminPasswordResponse{}
	_body, _err := client.ModifySAGAdminPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagExpressConnectInterfaceWithOptions(request *ModifySagExpressConnectInterfaceRequest, runtime *util.RuntimeOptions) (_result *ModifySagExpressConnectInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IP)) {
		query["IP"] = request.IP
	}

	if !tea.BoolValue(util.IsUnset(request.Mask)) {
		query["Mask"] = request.Mask
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PortName)) {
		query["PortName"] = request.PortName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	if !tea.BoolValue(util.IsUnset(request.Vlan)) {
		query["Vlan"] = request.Vlan
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagExpressConnectInterface"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagExpressConnectInterfaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagExpressConnectInterface(request *ModifySagExpressConnectInterfaceRequest) (_result *ModifySagExpressConnectInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagExpressConnectInterfaceResponse{}
	_body, _err := client.ModifySagExpressConnectInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagGlobalRouteProtocolWithOptions(request *ModifySagGlobalRouteProtocolRequest, runtime *util.RuntimeOptions) (_result *ModifySagGlobalRouteProtocolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RouteProtocol)) {
		query["RouteProtocol"] = request.RouteProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagGlobalRouteProtocol"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagGlobalRouteProtocolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagGlobalRouteProtocol(request *ModifySagGlobalRouteProtocolRequest) (_result *ModifySagGlobalRouteProtocolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagGlobalRouteProtocolResponse{}
	_body, _err := client.ModifySagGlobalRouteProtocolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagHaWithOptions(request *ModifySagHaRequest, runtime *util.RuntimeOptions) (_result *ModifySagHaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PortName)) {
		query["PortName"] = request.PortName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	if !tea.BoolValue(util.IsUnset(request.VirtualIp)) {
		query["VirtualIp"] = request.VirtualIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagHa"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagHaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagHa(request *ModifySagHaRequest) (_result *ModifySagHaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagHaResponse{}
	_body, _err := client.ModifySagHaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagLanWithOptions(request *ModifySagLanRequest, runtime *util.RuntimeOptions) (_result *ModifySagLanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndIp)) {
		query["EndIp"] = request.EndIp
	}

	if !tea.BoolValue(util.IsUnset(request.IP)) {
		query["IP"] = request.IP
	}

	if !tea.BoolValue(util.IsUnset(request.IPType)) {
		query["IPType"] = request.IPType
	}

	if !tea.BoolValue(util.IsUnset(request.Lease)) {
		query["Lease"] = request.Lease
	}

	if !tea.BoolValue(util.IsUnset(request.Mask)) {
		query["Mask"] = request.Mask
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PortName)) {
		query["PortName"] = request.PortName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	if !tea.BoolValue(util.IsUnset(request.StartIp)) {
		query["StartIp"] = request.StartIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagLan"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagLanResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagLan(request *ModifySagLanRequest) (_result *ModifySagLanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagLanResponse{}
	_body, _err := client.ModifySagLanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagManagementPortWithOptions(request *ModifySagManagementPortRequest, runtime *util.RuntimeOptions) (_result *ModifySagManagementPortResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Gateway)) {
		query["Gateway"] = request.Gateway
	}

	if !tea.BoolValue(util.IsUnset(request.IP)) {
		query["IP"] = request.IP
	}

	if !tea.BoolValue(util.IsUnset(request.Mask)) {
		query["Mask"] = request.Mask
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagManagementPort"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagManagementPortResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagManagementPort(request *ModifySagManagementPortRequest) (_result *ModifySagManagementPortResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagManagementPortResponse{}
	_body, _err := client.ModifySagManagementPortWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagPortRoleWithOptions(request *ModifySagPortRoleRequest, runtime *util.RuntimeOptions) (_result *ModifySagPortRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PortName)) {
		query["PortName"] = request.PortName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagPortRole"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagPortRoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagPortRole(request *ModifySagPortRoleRequest) (_result *ModifySagPortRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagPortRoleResponse{}
	_body, _err := client.ModifySagPortRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagPortRouteProtocolWithOptions(request *ModifySagPortRouteProtocolRequest, runtime *util.RuntimeOptions) (_result *ModifySagPortRouteProtocolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PortName)) {
		query["PortName"] = request.PortName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteAs)) {
		query["RemoteAs"] = request.RemoteAs
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteIp)) {
		query["RemoteIp"] = request.RemoteIp
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RouteProtocol)) {
		query["RouteProtocol"] = request.RouteProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	if !tea.BoolValue(util.IsUnset(request.Vlan)) {
		query["Vlan"] = request.Vlan
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagPortRouteProtocol"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagPortRouteProtocolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagPortRouteProtocol(request *ModifySagPortRouteProtocolRequest) (_result *ModifySagPortRouteProtocolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagPortRouteProtocolResponse{}
	_body, _err := client.ModifySagPortRouteProtocolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagRemoteAccessWithOptions(request *ModifySagRemoteAccessRequest, runtime *util.RuntimeOptions) (_result *ModifySagRemoteAccessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteAccessIp)) {
		query["RemoteAccessIp"] = request.RemoteAccessIp
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumber)) {
		query["SerialNumber"] = request.SerialNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagRemoteAccess"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagRemoteAccessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagRemoteAccess(request *ModifySagRemoteAccessRequest) (_result *ModifySagRemoteAccessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagRemoteAccessResponse{}
	_body, _err := client.ModifySagRemoteAccessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagRouteProtocolBgpWithOptions(request *ModifySagRouteProtocolBgpRequest, runtime *util.RuntimeOptions) (_result *ModifySagRouteProtocolBgpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HoldTime)) {
		query["HoldTime"] = request.HoldTime
	}

	if !tea.BoolValue(util.IsUnset(request.KeepAlive)) {
		query["KeepAlive"] = request.KeepAlive
	}

	if !tea.BoolValue(util.IsUnset(request.LocalAs)) {
		query["LocalAs"] = request.LocalAs
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RouterId)) {
		query["RouterId"] = request.RouterId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagRouteProtocolBgp"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagRouteProtocolBgpResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagRouteProtocolBgp(request *ModifySagRouteProtocolBgpRequest) (_result *ModifySagRouteProtocolBgpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagRouteProtocolBgpResponse{}
	_body, _err := client.ModifySagRouteProtocolBgpWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagRouteProtocolOspfWithOptions(request *ModifySagRouteProtocolOspfRequest, runtime *util.RuntimeOptions) (_result *ModifySagRouteProtocolOspfResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AreaId)) {
		query["AreaId"] = request.AreaId
	}

	if !tea.BoolValue(util.IsUnset(request.AuthenticationType)) {
		query["AuthenticationType"] = request.AuthenticationType
	}

	if !tea.BoolValue(util.IsUnset(request.DeadTime)) {
		query["DeadTime"] = request.DeadTime
	}

	if !tea.BoolValue(util.IsUnset(request.HelloTime)) {
		query["HelloTime"] = request.HelloTime
	}

	if !tea.BoolValue(util.IsUnset(request.Md5Key)) {
		query["Md5Key"] = request.Md5Key
	}

	if !tea.BoolValue(util.IsUnset(request.Md5KeyId)) {
		query["Md5KeyId"] = request.Md5KeyId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RouterId)) {
		query["RouterId"] = request.RouterId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagRouteProtocolOspf"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagRouteProtocolOspfResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagRouteProtocolOspf(request *ModifySagRouteProtocolOspfRequest) (_result *ModifySagRouteProtocolOspfResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagRouteProtocolOspfResponse{}
	_body, _err := client.ModifySagRouteProtocolOspfWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagStaticRouteWithOptions(request *ModifySagStaticRouteRequest, runtime *util.RuntimeOptions) (_result *ModifySagStaticRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationCidr)) {
		query["DestinationCidr"] = request.DestinationCidr
	}

	if !tea.BoolValue(util.IsUnset(request.NextHop)) {
		query["NextHop"] = request.NextHop
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PortName)) {
		query["PortName"] = request.PortName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	if !tea.BoolValue(util.IsUnset(request.Vlan)) {
		query["Vlan"] = request.Vlan
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagStaticRoute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagStaticRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagStaticRoute(request *ModifySagStaticRouteRequest) (_result *ModifySagStaticRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagStaticRouteResponse{}
	_body, _err := client.ModifySagStaticRouteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagUserDnsWithOptions(request *ModifySagUserDnsRequest, runtime *util.RuntimeOptions) (_result *ModifySagUserDnsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MasterDns)) {
		query["MasterDns"] = request.MasterDns
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SlaveDns)) {
		query["SlaveDns"] = request.SlaveDns
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagUserDns"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagUserDnsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagUserDns(request *ModifySagUserDnsRequest) (_result *ModifySagUserDnsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagUserDnsResponse{}
	_body, _err := client.ModifySagUserDnsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagWanWithOptions(request *ModifySagWanRequest, runtime *util.RuntimeOptions) (_result *ModifySagWanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.Gateway)) {
		query["Gateway"] = request.Gateway
	}

	if !tea.BoolValue(util.IsUnset(request.IP)) {
		query["IP"] = request.IP
	}

	if !tea.BoolValue(util.IsUnset(request.IPType)) {
		query["IPType"] = request.IPType
	}

	if !tea.BoolValue(util.IsUnset(request.ISP)) {
		query["ISP"] = request.ISP
	}

	if !tea.BoolValue(util.IsUnset(request.Mask)) {
		query["Mask"] = request.Mask
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.PortName)) {
		query["PortName"] = request.PortName
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		query["Username"] = request.Username
	}

	if !tea.BoolValue(util.IsUnset(request.Weight)) {
		query["Weight"] = request.Weight
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagWan"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagWanResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagWan(request *ModifySagWanRequest) (_result *ModifySagWanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagWanResponse{}
	_body, _err := client.ModifySagWanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagWanSnatWithOptions(request *ModifySagWanSnatRequest, runtime *util.RuntimeOptions) (_result *ModifySagWanSnatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	if !tea.BoolValue(util.IsUnset(request.Snat)) {
		query["Snat"] = request.Snat
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagWanSnat"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagWanSnatResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagWanSnat(request *ModifySagWanSnatRequest) (_result *ModifySagWanSnatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagWanSnatResponse{}
	_body, _err := client.ModifySagWanSnatWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySagWifiWithOptions(request *ModifySagWifiRequest, runtime *util.RuntimeOptions) (_result *ModifySagWifiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthenticationType)) {
		query["AuthenticationType"] = request.AuthenticationType
	}

	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.EncryptAlgorithm)) {
		query["EncryptAlgorithm"] = request.EncryptAlgorithm
	}

	if !tea.BoolValue(util.IsUnset(request.IsAuth)) {
		query["IsAuth"] = request.IsAuth
	}

	if !tea.BoolValue(util.IsUnset(request.IsBroadcast)) {
		query["IsBroadcast"] = request.IsBroadcast
	}

	if !tea.BoolValue(util.IsUnset(request.IsEnable)) {
		query["IsEnable"] = request.IsEnable
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SSID)) {
		query["SSID"] = request.SSID
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySagWifi"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySagWifiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySagWifi(request *ModifySagWifiRequest) (_result *ModifySagWifiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySagWifiResponse{}
	_body, _err := client.ModifySagWifiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySmartAccessGatewayWithOptions(request *ModifySmartAccessGatewayRequest, runtime *util.RuntimeOptions) (_result *ModifySmartAccessGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnableSoftwareConnectionAudit)) {
		query["EnableSoftwareConnectionAudit"] = request.EnableSoftwareConnectionAudit
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Position)) {
		query["Position"] = request.Position
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RoutingStrategy)) {
		query["RoutingStrategy"] = request.RoutingStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityLockThreshold)) {
		query["SecurityLockThreshold"] = request.SecurityLockThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySmartAccessGateway"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySmartAccessGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySmartAccessGateway(request *ModifySmartAccessGatewayRequest) (_result *ModifySmartAccessGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySmartAccessGatewayResponse{}
	_body, _err := client.ModifySmartAccessGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySmartAccessGatewayClientUserWithOptions(request *ModifySmartAccessGatewayClientUserRequest, runtime *util.RuntimeOptions) (_result *ModifySmartAccessGatewayClientUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.Email)) {
		query["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySmartAccessGatewayClientUser"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySmartAccessGatewayClientUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySmartAccessGatewayClientUser(request *ModifySmartAccessGatewayClientUserRequest) (_result *ModifySmartAccessGatewayClientUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySmartAccessGatewayClientUserResponse{}
	_body, _err := client.ModifySmartAccessGatewayClientUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySmartAccessGatewayUpBandwidthWithOptions(request *ModifySmartAccessGatewayUpBandwidthRequest, runtime *util.RuntimeOptions) (_result *ModifySmartAccessGatewayUpBandwidthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UpBandwidth4G)) {
		query["UpBandwidth4G"] = request.UpBandwidth4G
	}

	if !tea.BoolValue(util.IsUnset(request.UpBandwidthWan)) {
		query["UpBandwidthWan"] = request.UpBandwidthWan
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySmartAccessGatewayUpBandwidth"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySmartAccessGatewayUpBandwidthResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySmartAccessGatewayUpBandwidth(request *ModifySmartAccessGatewayUpBandwidthRequest) (_result *ModifySmartAccessGatewayUpBandwidthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySmartAccessGatewayUpBandwidthResponse{}
	_body, _err := client.ModifySmartAccessGatewayUpBandwidthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) MoveResourceGroupWithOptions(request *MoveResourceGroupRequest, runtime *util.RuntimeOptions) (_result *MoveResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NewResourceGroupId)) {
		query["NewResourceGroupId"] = request.NewResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("MoveResourceGroup"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &MoveResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) MoveResourceGroup(request *MoveResourceGroupRequest) (_result *MoveResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MoveResourceGroupResponse{}
	_body, _err := client.MoveResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ProbeAccessPointNetworkQualityWithOptions(request *ProbeAccessPointNetworkQualityRequest, runtime *util.RuntimeOptions) (_result *ProbeAccessPointNetworkQualityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessPointIds)) {
		query["AccessPointIds"] = request.AccessPointIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ProbeAccessPointNetworkQuality"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ProbeAccessPointNetworkQualityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ProbeAccessPointNetworkQuality(request *ProbeAccessPointNetworkQualityRequest) (_result *ProbeAccessPointNetworkQualityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ProbeAccessPointNetworkQualityResponse{}
	_body, _err := client.ProbeAccessPointNetworkQualityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RebootSmartAccessGatewayWithOptions(request *RebootSmartAccessGatewayRequest, runtime *util.RuntimeOptions) (_result *RebootSmartAccessGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumber)) {
		query["SerialNumber"] = request.SerialNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RebootSmartAccessGateway"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RebootSmartAccessGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RebootSmartAccessGateway(request *RebootSmartAccessGatewayRequest) (_result *RebootSmartAccessGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootSmartAccessGatewayResponse{}
	_body, _err := client.RebootSmartAccessGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetSmartAccessGatewayClientUserPasswordWithOptions(request *ResetSmartAccessGatewayClientUserPasswordRequest, runtime *util.RuntimeOptions) (_result *ResetSmartAccessGatewayClientUserPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetSmartAccessGatewayClientUserPassword"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetSmartAccessGatewayClientUserPasswordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetSmartAccessGatewayClientUserPassword(request *ResetSmartAccessGatewayClientUserPasswordRequest) (_result *ResetSmartAccessGatewayClientUserPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetSmartAccessGatewayClientUserPasswordResponse{}
	_body, _err := client.ResetSmartAccessGatewayClientUserPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeInstanceFromCbnWithOptions(request *RevokeInstanceFromCbnRequest, runtime *util.RuntimeOptions) (_result *RevokeInstanceFromCbnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CcnInstanceId)) {
		query["CcnInstanceId"] = request.CcnInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.CenInstanceId)) {
		query["CenInstanceId"] = request.CenInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokeInstanceFromCbn"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RevokeInstanceFromCbnResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeInstanceFromCbn(request *RevokeInstanceFromCbnRequest) (_result *RevokeInstanceFromCbnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeInstanceFromCbnResponse{}
	_body, _err := client.RevokeInstanceFromCbnWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeInstanceFromVbrWithOptions(request *RevokeInstanceFromVbrRequest, runtime *util.RuntimeOptions) (_result *RevokeInstanceFromVbrResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.VbrInstanceId)) {
		query["VbrInstanceId"] = request.VbrInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokeInstanceFromVbr"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RevokeInstanceFromVbrResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeInstanceFromVbr(request *RevokeInstanceFromVbrRequest) (_result *RevokeInstanceFromVbrResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeInstanceFromVbrResponse{}
	_body, _err := client.RevokeInstanceFromVbrWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeSagInstanceFromCcnWithOptions(request *RevokeSagInstanceFromCcnRequest, runtime *util.RuntimeOptions) (_result *RevokeSagInstanceFromCcnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CcnInstanceId)) {
		query["CcnInstanceId"] = request.CcnInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokeSagInstanceFromCcn"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RevokeSagInstanceFromCcnResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeSagInstanceFromCcn(request *RevokeSagInstanceFromCcnRequest) (_result *RevokeSagInstanceFromCcnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeSagInstanceFromCcnResponse{}
	_body, _err := client.RevokeSagInstanceFromCcnWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RoamClientUserWithOptions(request *RoamClientUserRequest, runtime *util.RuntimeOptions) (_result *RoamClientUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OriginRegionId)) {
		query["OriginRegionId"] = request.OriginRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.OriginSmartAGId)) {
		query["OriginSmartAGId"] = request.OriginSmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetSmartAGId)) {
		query["TargetSmartAGId"] = request.TargetSmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RoamClientUser"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RoamClientUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RoamClientUser(request *RoamClientUserRequest) (_result *RoamClientUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RoamClientUserResponse{}
	_body, _err := client.RoamClientUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetAdvancedMonitorStateWithOptions(request *SetAdvancedMonitorStateRequest, runtime *util.RuntimeOptions) (_result *SetAdvancedMonitorStateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Enable)) {
		query["Enable"] = request.Enable
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetAdvancedMonitorState"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetAdvancedMonitorStateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetAdvancedMonitorState(request *SetAdvancedMonitorStateRequest) (_result *SetAdvancedMonitorStateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetAdvancedMonitorStateResponse{}
	_body, _err := client.SetAdvancedMonitorStateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SynchronizeSmartAGWebConfigWithOptions(request *SynchronizeSmartAGWebConfigRequest, runtime *util.RuntimeOptions) (_result *SynchronizeSmartAGWebConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGSn)) {
		query["SmartAGSn"] = request.SmartAGSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SynchronizeSmartAGWebConfig"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SynchronizeSmartAGWebConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SynchronizeSmartAGWebConfig(request *SynchronizeSmartAGWebConfigRequest) (_result *SynchronizeSmartAGWebConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SynchronizeSmartAGWebConfigResponse{}
	_body, _err := client.SynchronizeSmartAGWebConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindSerialNumberWithOptions(request *UnbindSerialNumberRequest, runtime *util.RuntimeOptions) (_result *UnbindSerialNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumber)) {
		query["SerialNumber"] = request.SerialNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindSerialNumber"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindSerialNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindSerialNumber(request *UnbindSerialNumberRequest) (_result *UnbindSerialNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindSerialNumberResponse{}
	_body, _err := client.UnbindSerialNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindSmartAccessGatewayWithOptions(request *UnbindSmartAccessGatewayRequest, runtime *util.RuntimeOptions) (_result *UnbindSmartAccessGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CcnId)) {
		query["CcnId"] = request.CcnId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGUid)) {
		query["SmartAGUid"] = request.SmartAGUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindSmartAccessGateway"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindSmartAccessGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindSmartAccessGateway(request *UnbindSmartAccessGatewayRequest) (_result *UnbindSmartAccessGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindSmartAccessGatewayResponse{}
	_body, _err := client.UnbindSmartAccessGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindVbrWithOptions(request *UnbindVbrRequest, runtime *util.RuntimeOptions) (_result *UnbindVbrResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGUid)) {
		query["SmartAGUid"] = request.SmartAGUid
	}

	if !tea.BoolValue(util.IsUnset(request.VbrId)) {
		query["VbrId"] = request.VbrId
	}

	if !tea.BoolValue(util.IsUnset(request.VbrRegionId)) {
		query["VbrRegionId"] = request.VbrRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindVbr"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindVbrResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindVbr(request *UnbindVbrRequest) (_result *UnbindVbrResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindVbrResponse{}
	_body, _err := client.UnbindVbrWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnlockSmartAccessGatewayWithOptions(request *UnlockSmartAccessGatewayRequest, runtime *util.RuntimeOptions) (_result *UnlockSmartAccessGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnlockSmartAccessGateway"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnlockSmartAccessGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnlockSmartAccessGateway(request *UnlockSmartAccessGatewayRequest) (_result *UnlockSmartAccessGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnlockSmartAccessGatewayResponse{}
	_body, _err := client.UnlockSmartAccessGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateEnterpriseCodeWithOptions(request *UpdateEnterpriseCodeRequest, runtime *util.RuntimeOptions) (_result *UpdateEnterpriseCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.EnterpriseCode)) {
		query["EnterpriseCode"] = request.EnterpriseCode
	}

	if !tea.BoolValue(util.IsUnset(request.IsDefault)) {
		query["IsDefault"] = request.IsDefault
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateEnterpriseCode"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateEnterpriseCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateEnterpriseCode(request *UpdateEnterpriseCodeRequest) (_result *UpdateEnterpriseCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEnterpriseCodeResponse{}
	_body, _err := client.UpdateEnterpriseCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateProbeTaskWithOptions(request *UpdateProbeTaskRequest, runtime *util.RuntimeOptions) (_result *UpdateProbeTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.Enable)) {
		query["Enable"] = request.Enable
	}

	if !tea.BoolValue(util.IsUnset(request.PacketNumber)) {
		query["PacketNumber"] = request.PacketNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeTaskId)) {
		query["ProbeTaskId"] = request.ProbeTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.ProbeTaskSourceAddress)) {
		query["ProbeTaskSourceAddress"] = request.ProbeTaskSourceAddress
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		query["Protocol"] = request.Protocol
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SagId)) {
		query["SagId"] = request.SagId
	}

	if !tea.BoolValue(util.IsUnset(request.Sn)) {
		query["Sn"] = request.Sn
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateProbeTask"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateProbeTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateProbeTask(request *UpdateProbeTaskRequest) (_result *UpdateProbeTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProbeTaskResponse{}
	_body, _err := client.UpdateProbeTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartAGAccessPointWithOptions(request *UpdateSmartAGAccessPointRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartAGAccessPointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessPointId)) {
		query["AccessPointId"] = request.AccessPointId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartAGAccessPoint"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartAGAccessPointResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartAGAccessPoint(request *UpdateSmartAGAccessPointRequest) (_result *UpdateSmartAGAccessPointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartAGAccessPointResponse{}
	_body, _err := client.UpdateSmartAGAccessPointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartAGDpiAttributeWithOptions(request *UpdateSmartAGDpiAttributeRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartAGDpiAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DpiEnabled)) {
		query["DpiEnabled"] = request.DpiEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartAGDpiAttribute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartAGDpiAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartAGDpiAttribute(request *UpdateSmartAGDpiAttributeRequest) (_result *UpdateSmartAGDpiAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartAGDpiAttributeResponse{}
	_body, _err := client.UpdateSmartAGDpiAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartAGEnterpriseCodeWithOptions(request *UpdateSmartAGEnterpriseCodeRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartAGEnterpriseCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.EnterpriseCode)) {
		query["EnterpriseCode"] = request.EnterpriseCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartAGEnterpriseCode"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartAGEnterpriseCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartAGEnterpriseCode(request *UpdateSmartAGEnterpriseCodeRequest) (_result *UpdateSmartAGEnterpriseCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartAGEnterpriseCodeResponse{}
	_body, _err := client.UpdateSmartAGEnterpriseCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartAGUserAccelerateConfigWithOptions(request *UpdateSmartAGUserAccelerateConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartAGUserAccelerateConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartAGUserAccelerateConfig"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartAGUserAccelerateConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartAGUserAccelerateConfig(request *UpdateSmartAGUserAccelerateConfigRequest) (_result *UpdateSmartAGUserAccelerateConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartAGUserAccelerateConfigResponse{}
	_body, _err := client.UpdateSmartAGUserAccelerateConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayAdminPasswordWithOptions(request *UpdateSmartAccessGatewayAdminPasswordRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartAccessGatewayAdminPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartAccessGatewayAdminPassword"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartAccessGatewayAdminPasswordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayAdminPassword(request *UpdateSmartAccessGatewayAdminPasswordRequest) (_result *UpdateSmartAccessGatewayAdminPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartAccessGatewayAdminPasswordResponse{}
	_body, _err := client.UpdateSmartAccessGatewayAdminPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayBgpRouteWithOptions(request *UpdateSmartAccessGatewayBgpRouteRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartAccessGatewayBgpRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.HoldTime)) {
		query["HoldTime"] = request.HoldTime
	}

	if !tea.BoolValue(util.IsUnset(request.KeepAlive)) {
		query["KeepAlive"] = request.KeepAlive
	}

	if !tea.BoolValue(util.IsUnset(request.LocalAs)) {
		query["LocalAs"] = request.LocalAs
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.RouterId)) {
		query["RouterId"] = request.RouterId
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartAccessGatewayBgpRoute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartAccessGatewayBgpRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayBgpRoute(request *UpdateSmartAccessGatewayBgpRouteRequest) (_result *UpdateSmartAccessGatewayBgpRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartAccessGatewayBgpRouteResponse{}
	_body, _err := client.UpdateSmartAccessGatewayBgpRouteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayDnsWithOptions(request *UpdateSmartAccessGatewayDnsRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartAccessGatewayDnsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.MasterDns)) {
		query["MasterDns"] = request.MasterDns
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	if !tea.BoolValue(util.IsUnset(request.SlaveDns)) {
		query["SlaveDns"] = request.SlaveDns
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartAccessGatewayDns"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartAccessGatewayDnsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayDns(request *UpdateSmartAccessGatewayDnsRequest) (_result *UpdateSmartAccessGatewayDnsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartAccessGatewayDnsResponse{}
	_body, _err := client.UpdateSmartAccessGatewayDnsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayDnsForwardWithOptions(request *UpdateSmartAccessGatewayDnsForwardRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartAccessGatewayDnsForwardResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MasterIp)) {
		query["MasterIp"] = request.MasterIp
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundPortIndex)) {
		query["OutboundPortIndex"] = request.OutboundPortIndex
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundPortName)) {
		query["OutboundPortName"] = request.OutboundPortName
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundPortType)) {
		query["OutboundPortType"] = request.OutboundPortType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	if !tea.BoolValue(util.IsUnset(request.SlaveIp)) {
		query["SlaveIp"] = request.SlaveIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartAccessGatewayDnsForward"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartAccessGatewayDnsForwardResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayDnsForward(request *UpdateSmartAccessGatewayDnsForwardRequest) (_result *UpdateSmartAccessGatewayDnsForwardResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartAccessGatewayDnsForwardResponse{}
	_body, _err := client.UpdateSmartAccessGatewayDnsForwardWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayGlobalRouteProtocolWithOptions(request *UpdateSmartAccessGatewayGlobalRouteProtocolRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartAccessGatewayGlobalRouteProtocolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.RouteProtocol)) {
		query["RouteProtocol"] = request.RouteProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartAccessGatewayGlobalRouteProtocol"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartAccessGatewayGlobalRouteProtocolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayGlobalRouteProtocol(request *UpdateSmartAccessGatewayGlobalRouteProtocolRequest) (_result *UpdateSmartAccessGatewayGlobalRouteProtocolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartAccessGatewayGlobalRouteProtocolResponse{}
	_body, _err := client.UpdateSmartAccessGatewayGlobalRouteProtocolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayOspfRouteWithOptions(request *UpdateSmartAccessGatewayOspfRouteRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartAccessGatewayOspfRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AreaId)) {
		query["AreaId"] = request.AreaId
	}

	if !tea.BoolValue(util.IsUnset(request.AuthenticationType)) {
		query["AuthenticationType"] = request.AuthenticationType
	}

	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.DeadTime)) {
		query["DeadTime"] = request.DeadTime
	}

	if !tea.BoolValue(util.IsUnset(request.HelloTime)) {
		query["HelloTime"] = request.HelloTime
	}

	if !tea.BoolValue(util.IsUnset(request.InterfaceName)) {
		query["InterfaceName"] = request.InterfaceName
	}

	if !tea.BoolValue(util.IsUnset(request.Md5Key)) {
		query["Md5Key"] = request.Md5Key
	}

	if !tea.BoolValue(util.IsUnset(request.Md5KeyId)) {
		query["Md5KeyId"] = request.Md5KeyId
	}

	if !tea.BoolValue(util.IsUnset(request.Networks)) {
		query["Networks"] = request.Networks
	}

	if !tea.BoolValue(util.IsUnset(request.OspfCost)) {
		query["OspfCost"] = request.OspfCost
	}

	if !tea.BoolValue(util.IsUnset(request.OspfNetworkType)) {
		query["OspfNetworkType"] = request.OspfNetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RedistributeProtocol)) {
		query["RedistributeProtocol"] = request.RedistributeProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.RouterId)) {
		query["RouterId"] = request.RouterId
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartAccessGatewayOspfRoute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartAccessGatewayOspfRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayOspfRoute(request *UpdateSmartAccessGatewayOspfRouteRequest) (_result *UpdateSmartAccessGatewayOspfRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartAccessGatewayOspfRouteResponse{}
	_body, _err := client.UpdateSmartAccessGatewayOspfRouteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayPortRouteProtocolWithOptions(request *UpdateSmartAccessGatewayPortRouteProtocolRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartAccessGatewayPortRouteProtocolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.PortName)) {
		query["PortName"] = request.PortName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteAs)) {
		query["RemoteAs"] = request.RemoteAs
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteIp)) {
		query["RemoteIp"] = request.RemoteIp
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.RouteProtocol)) {
		query["RouteProtocol"] = request.RouteProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	if !tea.BoolValue(util.IsUnset(request.Vlan)) {
		query["Vlan"] = request.Vlan
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartAccessGatewayPortRouteProtocol"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartAccessGatewayPortRouteProtocolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayPortRouteProtocol(request *UpdateSmartAccessGatewayPortRouteProtocolRequest) (_result *UpdateSmartAccessGatewayPortRouteProtocolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartAccessGatewayPortRouteProtocolResponse{}
	_body, _err := client.UpdateSmartAccessGatewayPortRouteProtocolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayVersionWithOptions(request *UpdateSmartAccessGatewayVersionRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartAccessGatewayVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumber)) {
		query["SerialNumber"] = request.SerialNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.VersionCode)) {
		query["VersionCode"] = request.VersionCode
	}

	if !tea.BoolValue(util.IsUnset(request.VersionType)) {
		query["VersionType"] = request.VersionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartAccessGatewayVersion"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartAccessGatewayVersionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayVersion(request *UpdateSmartAccessGatewayVersionRequest) (_result *UpdateSmartAccessGatewayVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartAccessGatewayVersionResponse{}
	_body, _err := client.UpdateSmartAccessGatewayVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayWanSnatWithOptions(request *UpdateSmartAccessGatewayWanSnatRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartAccessGatewayWanSnatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	if !tea.BoolValue(util.IsUnset(request.Snat)) {
		query["Snat"] = request.Snat
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartAccessGatewayWanSnat"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartAccessGatewayWanSnatResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartAccessGatewayWanSnat(request *UpdateSmartAccessGatewayWanSnatRequest) (_result *UpdateSmartAccessGatewayWanSnatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartAccessGatewayWanSnatResponse{}
	_body, _err := client.UpdateSmartAccessGatewayWanSnatWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpgradeSmartAccessGatewayWithOptions(request *UpgradeSmartAccessGatewayRequest, runtime *util.RuntimeOptions) (_result *UpgradeSmartAccessGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.BandWidthSpec)) {
		query["BandWidthSpec"] = request.BandWidthSpec
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeSmartAccessGateway"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpgradeSmartAccessGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpgradeSmartAccessGateway(request *UpgradeSmartAccessGatewayRequest) (_result *UpgradeSmartAccessGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeSmartAccessGatewayResponse{}
	_body, _err := client.UpgradeSmartAccessGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpgradeSmartAccessGatewaySoftwareWithOptions(request *UpgradeSmartAccessGatewaySoftwareRequest, runtime *util.RuntimeOptions) (_result *UpgradeSmartAccessGatewaySoftwareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.DataPlan)) {
		query["DataPlan"] = request.DataPlan
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmartAGId)) {
		query["SmartAGId"] = request.SmartAGId
	}

	if !tea.BoolValue(util.IsUnset(request.UserCount)) {
		query["UserCount"] = request.UserCount
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeSmartAccessGatewaySoftware"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpgradeSmartAccessGatewaySoftwareResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpgradeSmartAccessGatewaySoftware(request *UpgradeSmartAccessGatewaySoftwareRequest) (_result *UpgradeSmartAccessGatewaySoftwareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeSmartAccessGatewaySoftwareResponse{}
	_body, _err := client.UpgradeSmartAccessGatewaySoftwareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayBgpRouteWithOptions(request *ViewSmartAccessGatewayBgpRouteRequest, runtime *util.RuntimeOptions) (_result *ViewSmartAccessGatewayBgpRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ViewSmartAccessGatewayBgpRoute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ViewSmartAccessGatewayBgpRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayBgpRoute(request *ViewSmartAccessGatewayBgpRouteRequest) (_result *ViewSmartAccessGatewayBgpRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ViewSmartAccessGatewayBgpRouteResponse{}
	_body, _err := client.ViewSmartAccessGatewayBgpRouteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayDnsWithOptions(request *ViewSmartAccessGatewayDnsRequest, runtime *util.RuntimeOptions) (_result *ViewSmartAccessGatewayDnsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ViewSmartAccessGatewayDns"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ViewSmartAccessGatewayDnsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayDns(request *ViewSmartAccessGatewayDnsRequest) (_result *ViewSmartAccessGatewayDnsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ViewSmartAccessGatewayDnsResponse{}
	_body, _err := client.ViewSmartAccessGatewayDnsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayDnsForwardsWithOptions(request *ViewSmartAccessGatewayDnsForwardsRequest, runtime *util.RuntimeOptions) (_result *ViewSmartAccessGatewayDnsForwardsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ViewSmartAccessGatewayDnsForwards"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ViewSmartAccessGatewayDnsForwardsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayDnsForwards(request *ViewSmartAccessGatewayDnsForwardsRequest) (_result *ViewSmartAccessGatewayDnsForwardsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ViewSmartAccessGatewayDnsForwardsResponse{}
	_body, _err := client.ViewSmartAccessGatewayDnsForwardsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayGlobalRouteProtocolWithOptions(request *ViewSmartAccessGatewayGlobalRouteProtocolRequest, runtime *util.RuntimeOptions) (_result *ViewSmartAccessGatewayGlobalRouteProtocolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ViewSmartAccessGatewayGlobalRouteProtocol"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ViewSmartAccessGatewayGlobalRouteProtocolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayGlobalRouteProtocol(request *ViewSmartAccessGatewayGlobalRouteProtocolRequest) (_result *ViewSmartAccessGatewayGlobalRouteProtocolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ViewSmartAccessGatewayGlobalRouteProtocolResponse{}
	_body, _err := client.ViewSmartAccessGatewayGlobalRouteProtocolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayOspfRouteWithOptions(request *ViewSmartAccessGatewayOspfRouteRequest, runtime *util.RuntimeOptions) (_result *ViewSmartAccessGatewayOspfRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ViewSmartAccessGatewayOspfRoute"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ViewSmartAccessGatewayOspfRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayOspfRoute(request *ViewSmartAccessGatewayOspfRouteRequest) (_result *ViewSmartAccessGatewayOspfRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ViewSmartAccessGatewayOspfRouteResponse{}
	_body, _err := client.ViewSmartAccessGatewayOspfRouteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayPortRouteProtocolWithOptions(request *ViewSmartAccessGatewayPortRouteProtocolRequest, runtime *util.RuntimeOptions) (_result *ViewSmartAccessGatewayPortRouteProtocolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ViewSmartAccessGatewayPortRouteProtocol"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ViewSmartAccessGatewayPortRouteProtocolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayPortRouteProtocol(request *ViewSmartAccessGatewayPortRouteProtocolRequest) (_result *ViewSmartAccessGatewayPortRouteProtocolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ViewSmartAccessGatewayPortRouteProtocolResponse{}
	_body, _err := client.ViewSmartAccessGatewayPortRouteProtocolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayRoutesWithOptions(request *ViewSmartAccessGatewayRoutesRequest, runtime *util.RuntimeOptions) (_result *ViewSmartAccessGatewayRoutesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ViewSmartAccessGatewayRoutes"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ViewSmartAccessGatewayRoutesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayRoutes(request *ViewSmartAccessGatewayRoutesRequest) (_result *ViewSmartAccessGatewayRoutesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ViewSmartAccessGatewayRoutesResponse{}
	_body, _err := client.ViewSmartAccessGatewayRoutesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayWanSnatWithOptions(request *ViewSmartAccessGatewayWanSnatRequest, runtime *util.RuntimeOptions) (_result *ViewSmartAccessGatewayWanSnatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CrossAccount)) {
		query["CrossAccount"] = request.CrossAccount
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceUid)) {
		query["ResourceUid"] = request.ResourceUid
	}

	if !tea.BoolValue(util.IsUnset(request.SagInsId)) {
		query["SagInsId"] = request.SagInsId
	}

	if !tea.BoolValue(util.IsUnset(request.SagSn)) {
		query["SagSn"] = request.SagSn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ViewSmartAccessGatewayWanSnat"),
		Version:     tea.String("2018-03-13"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ViewSmartAccessGatewayWanSnatResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ViewSmartAccessGatewayWanSnat(request *ViewSmartAccessGatewayWanSnatRequest) (_result *ViewSmartAccessGatewayWanSnatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ViewSmartAccessGatewayWanSnatResponse{}
	_body, _err := client.ViewSmartAccessGatewayWanSnatWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
