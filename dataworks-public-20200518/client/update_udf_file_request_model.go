// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"github.com/alibabacloud-go/tea/dara"
)

type iUpdateUdfFileRequest interface {
	dara.Model
	String() string
	GoString() string
	SetClassName(v string) *UpdateUdfFileRequest
	GetClassName() *string
	SetCmdDescription(v string) *UpdateUdfFileRequest
	GetCmdDescription() *string
	SetExample(v string) *UpdateUdfFileRequest
	GetExample() *string
	SetFileFolderPath(v string) *UpdateUdfFileRequest
	GetFileFolderPath() *string
	SetFileId(v string) *UpdateUdfFileRequest
	GetFileId() *string
	SetFunctionType(v string) *UpdateUdfFileRequest
	GetFunctionType() *string
	SetParameterDescription(v string) *UpdateUdfFileRequest
	GetParameterDescription() *string
	SetProjectId(v int64) *UpdateUdfFileRequest
	GetProjectId() *int64
	SetProjectIdentifier(v string) *UpdateUdfFileRequest
	GetProjectIdentifier() *string
	SetResources(v string) *UpdateUdfFileRequest
	GetResources() *string
	SetReturnValue(v string) *UpdateUdfFileRequest
	GetReturnValue() *string
	SetUdfDescription(v string) *UpdateUdfFileRequest
	GetUdfDescription() *string
}

type UpdateUdfFileRequest struct {
	// The name of the class in which the function is defined. This parameter corresponds to the Class Name parameter in the Register Function section of the configuration tab of the function in the DataWorks console.
	//
	// This parameter is required.
	//
	// example:
	//
	// com.alibaba.DataWorks.api.udf.StringConcat
	ClassName *string `json:"ClassName,omitempty" xml:"ClassName,omitempty"`
	// The syntax used for calling the function. This parameter corresponds to the Expression Syntax parameter in the Register Function section of the configuration tab of the function in the DataWorks console.
	//
	// example:
	//
	// StringConcat(String... substrs)
	CmdDescription *string `json:"CmdDescription,omitempty" xml:"CmdDescription,omitempty"`
	// The example for calling the function. This parameter corresponds to the Example parameter in the Register Function section of the configuration tab of the function in the DataWorks console.
	//
	// example:
	//
	// StringConcat(\\"a\\", \\"b\\", \\"c\\")
	Example *string `json:"Example,omitempty" xml:"Example,omitempty"`
	// The path of the folder in which the function file is stored.
	//
	// example:
	//
	// Business_process/First_Business_Process/function/string_processing_function
	FileFolderPath *string `json:"FileFolderPath,omitempty" xml:"FileFolderPath,omitempty"`
	// The file ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000001
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The type of the function. Valid values: MATH, AGGREGATE, STRING, DATE, ANALYTIC, and OTHER. This parameter corresponds to the Function Type parameter in the Register Function section of the configuration tab of the function on the DataStudio page.
	//
	// This parameter is required.
	//
	// example:
	//
	// STRING
	FunctionType *string `json:"FunctionType,omitempty" xml:"FunctionType,omitempty"`
	// The description of the input parameters of the function. This parameter corresponds to the Parameter Description parameter in the Register Function section of the configuration tab of the function on the DataStudio page.
	//
	// Valid values:
	//
	// 	- ALL_ALLOWD
	//
	// 	- FAILURE_ALLOWED
	//
	// 	- ALL_DENIED
	//
	// example:
	//
	// List of strings to be connected
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	// The ID of the DataWorks workspace. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace Management page and view the workspace ID.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The unique identifier of the DataWorks workspace. You can click the identifier in the upper-left corner of the DataStudio page to switch to another workspace.
	//
	// You must specify either this parameter or ProjectId to determine the DataWorks workspace to which the operation is applied.
	//
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	// The names of the resources that are referenced by the function. This parameter corresponds to the Resources parameter in the Register Function section of the configuration tab of the function in the DataWorks console. Separate multiple resource names with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// string-concat-1.0.0.jar,commons-lang-2.6.jar
	Resources *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	// The description of the return value of the function. This parameter corresponds to the Return Value parameter in the Register Function section of the configuration tab of the function on the DataStudio page.
	//
	// example:
	//
	// New strings generated by concatenating all strings before and after the input order
	ReturnValue *string `json:"ReturnValue,omitempty" xml:"ReturnValue,omitempty"`
	// The description of the function. This parameter corresponds to the Description parameter in the Register Function section of the configuration tab of the function on the DataStudio page.
	//
	// example:
	//
	// Concatenate several strings to generate a new string
	UdfDescription *string `json:"UdfDescription,omitempty" xml:"UdfDescription,omitempty"`
}

func (s UpdateUdfFileRequest) String() string {
	return dara.Prettify(s)
}

func (s UpdateUdfFileRequest) GoString() string {
	return s.String()
}

func (s *UpdateUdfFileRequest) GetClassName() *string {
	return s.ClassName
}

func (s *UpdateUdfFileRequest) GetCmdDescription() *string {
	return s.CmdDescription
}

func (s *UpdateUdfFileRequest) GetExample() *string {
	return s.Example
}

func (s *UpdateUdfFileRequest) GetFileFolderPath() *string {
	return s.FileFolderPath
}

func (s *UpdateUdfFileRequest) GetFileId() *string {
	return s.FileId
}

func (s *UpdateUdfFileRequest) GetFunctionType() *string {
	return s.FunctionType
}

func (s *UpdateUdfFileRequest) GetParameterDescription() *string {
	return s.ParameterDescription
}

func (s *UpdateUdfFileRequest) GetProjectId() *int64 {
	return s.ProjectId
}

func (s *UpdateUdfFileRequest) GetProjectIdentifier() *string {
	return s.ProjectIdentifier
}

func (s *UpdateUdfFileRequest) GetResources() *string {
	return s.Resources
}

func (s *UpdateUdfFileRequest) GetReturnValue() *string {
	return s.ReturnValue
}

func (s *UpdateUdfFileRequest) GetUdfDescription() *string {
	return s.UdfDescription
}

func (s *UpdateUdfFileRequest) SetClassName(v string) *UpdateUdfFileRequest {
	s.ClassName = &v
	return s
}

func (s *UpdateUdfFileRequest) SetCmdDescription(v string) *UpdateUdfFileRequest {
	s.CmdDescription = &v
	return s
}

func (s *UpdateUdfFileRequest) SetExample(v string) *UpdateUdfFileRequest {
	s.Example = &v
	return s
}

func (s *UpdateUdfFileRequest) SetFileFolderPath(v string) *UpdateUdfFileRequest {
	s.FileFolderPath = &v
	return s
}

func (s *UpdateUdfFileRequest) SetFileId(v string) *UpdateUdfFileRequest {
	s.FileId = &v
	return s
}

func (s *UpdateUdfFileRequest) SetFunctionType(v string) *UpdateUdfFileRequest {
	s.FunctionType = &v
	return s
}

func (s *UpdateUdfFileRequest) SetParameterDescription(v string) *UpdateUdfFileRequest {
	s.ParameterDescription = &v
	return s
}

func (s *UpdateUdfFileRequest) SetProjectId(v int64) *UpdateUdfFileRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateUdfFileRequest) SetProjectIdentifier(v string) *UpdateUdfFileRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *UpdateUdfFileRequest) SetResources(v string) *UpdateUdfFileRequest {
	s.Resources = &v
	return s
}

func (s *UpdateUdfFileRequest) SetReturnValue(v string) *UpdateUdfFileRequest {
	s.ReturnValue = &v
	return s
}

func (s *UpdateUdfFileRequest) SetUdfDescription(v string) *UpdateUdfFileRequest {
	s.UdfDescription = &v
	return s
}

func (s *UpdateUdfFileRequest) Validate() error {
	return dara.Validate(s)
}
