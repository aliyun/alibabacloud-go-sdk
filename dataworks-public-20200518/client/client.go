// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	openplatform "github.com/alibabacloud-go/openplatform-20191219/client"
	fileform "github.com/alibabacloud-go/tea-fileform/service"
	oss "github.com/alibabacloud-go/tea-oss-sdk/client"
	ossutil "github.com/alibabacloud-go/tea-oss-utils/service"
	rpc "github.com/alibabacloud-go/tea-rpc/client"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
	"io"
)

type AbolishDataServiceApiRequest struct {
	ApiId     *int64 `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId  *int64 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s AbolishDataServiceApiRequest) String() string {
	return tea.Prettify(s)
}

func (s AbolishDataServiceApiRequest) GoString() string {
	return s.String()
}

func (s *AbolishDataServiceApiRequest) SetApiId(v int64) *AbolishDataServiceApiRequest {
	s.ApiId = &v
	return s
}

func (s *AbolishDataServiceApiRequest) SetProjectId(v int64) *AbolishDataServiceApiRequest {
	s.ProjectId = &v
	return s
}

func (s *AbolishDataServiceApiRequest) SetTenantId(v int64) *AbolishDataServiceApiRequest {
	s.TenantId = &v
	return s
}

type AbolishDataServiceApiResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AbolishDataServiceApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AbolishDataServiceApiResponseBody) GoString() string {
	return s.String()
}

func (s *AbolishDataServiceApiResponseBody) SetData(v bool) *AbolishDataServiceApiResponseBody {
	s.Data = &v
	return s
}

func (s *AbolishDataServiceApiResponseBody) SetErrorCode(v string) *AbolishDataServiceApiResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AbolishDataServiceApiResponseBody) SetErrorMessage(v string) *AbolishDataServiceApiResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *AbolishDataServiceApiResponseBody) SetHttpStatusCode(v int32) *AbolishDataServiceApiResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AbolishDataServiceApiResponseBody) SetRequestId(v string) *AbolishDataServiceApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *AbolishDataServiceApiResponseBody) SetSuccess(v bool) *AbolishDataServiceApiResponseBody {
	s.Success = &v
	return s
}

type AbolishDataServiceApiResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AbolishDataServiceApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AbolishDataServiceApiResponse) String() string {
	return tea.Prettify(s)
}

func (s AbolishDataServiceApiResponse) GoString() string {
	return s.String()
}

func (s *AbolishDataServiceApiResponse) SetHeaders(v map[string]*string) *AbolishDataServiceApiResponse {
	s.Headers = v
	return s
}

func (s *AbolishDataServiceApiResponse) SetBody(v *AbolishDataServiceApiResponseBody) *AbolishDataServiceApiResponse {
	s.Body = v
	return s
}

type AddProjectMemberToRoleRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RoleCode    *string `json:"RoleCode,omitempty" xml:"RoleCode,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AddProjectMemberToRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s AddProjectMemberToRoleRequest) GoString() string {
	return s.String()
}

func (s *AddProjectMemberToRoleRequest) SetClientToken(v string) *AddProjectMemberToRoleRequest {
	s.ClientToken = &v
	return s
}

func (s *AddProjectMemberToRoleRequest) SetProjectId(v int64) *AddProjectMemberToRoleRequest {
	s.ProjectId = &v
	return s
}

func (s *AddProjectMemberToRoleRequest) SetRoleCode(v string) *AddProjectMemberToRoleRequest {
	s.RoleCode = &v
	return s
}

func (s *AddProjectMemberToRoleRequest) SetUserId(v string) *AddProjectMemberToRoleRequest {
	s.UserId = &v
	return s
}

type AddProjectMemberToRoleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddProjectMemberToRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddProjectMemberToRoleResponseBody) GoString() string {
	return s.String()
}

func (s *AddProjectMemberToRoleResponseBody) SetRequestId(v string) *AddProjectMemberToRoleResponseBody {
	s.RequestId = &v
	return s
}

type AddProjectMemberToRoleResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddProjectMemberToRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddProjectMemberToRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s AddProjectMemberToRoleResponse) GoString() string {
	return s.String()
}

func (s *AddProjectMemberToRoleResponse) SetHeaders(v map[string]*string) *AddProjectMemberToRoleResponse {
	s.Headers = v
	return s
}

func (s *AddProjectMemberToRoleResponse) SetBody(v *AddProjectMemberToRoleResponseBody) *AddProjectMemberToRoleResponse {
	s.Body = v
	return s
}

type AddToMetaCategoryRequest struct {
	CategoryId *int64  `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	TableGuid  *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s AddToMetaCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s AddToMetaCategoryRequest) GoString() string {
	return s.String()
}

func (s *AddToMetaCategoryRequest) SetCategoryId(v int64) *AddToMetaCategoryRequest {
	s.CategoryId = &v
	return s
}

func (s *AddToMetaCategoryRequest) SetTableGuid(v string) *AddToMetaCategoryRequest {
	s.TableGuid = &v
	return s
}

type AddToMetaCategoryResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddToMetaCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddToMetaCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *AddToMetaCategoryResponseBody) SetData(v bool) *AddToMetaCategoryResponseBody {
	s.Data = &v
	return s
}

func (s *AddToMetaCategoryResponseBody) SetErrorCode(v string) *AddToMetaCategoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AddToMetaCategoryResponseBody) SetErrorMessage(v string) *AddToMetaCategoryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *AddToMetaCategoryResponseBody) SetHttpStatusCode(v int32) *AddToMetaCategoryResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddToMetaCategoryResponseBody) SetRequestId(v string) *AddToMetaCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddToMetaCategoryResponseBody) SetSuccess(v bool) *AddToMetaCategoryResponseBody {
	s.Success = &v
	return s
}

type AddToMetaCategoryResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddToMetaCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddToMetaCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s AddToMetaCategoryResponse) GoString() string {
	return s.String()
}

func (s *AddToMetaCategoryResponse) SetHeaders(v map[string]*string) *AddToMetaCategoryResponse {
	s.Headers = v
	return s
}

func (s *AddToMetaCategoryResponse) SetBody(v *AddToMetaCategoryResponseBody) *AddToMetaCategoryResponse {
	s.Body = v
	return s
}

type ApprovePermissionApplyOrderRequest struct {
	ApproveAction  *int32  `json:"ApproveAction,omitempty" xml:"ApproveAction,omitempty"`
	ApproveComment *string `json:"ApproveComment,omitempty" xml:"ApproveComment,omitempty"`
	FlowId         *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
}

func (s ApprovePermissionApplyOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s ApprovePermissionApplyOrderRequest) GoString() string {
	return s.String()
}

func (s *ApprovePermissionApplyOrderRequest) SetApproveAction(v int32) *ApprovePermissionApplyOrderRequest {
	s.ApproveAction = &v
	return s
}

func (s *ApprovePermissionApplyOrderRequest) SetApproveComment(v string) *ApprovePermissionApplyOrderRequest {
	s.ApproveComment = &v
	return s
}

func (s *ApprovePermissionApplyOrderRequest) SetFlowId(v string) *ApprovePermissionApplyOrderRequest {
	s.FlowId = &v
	return s
}

type ApprovePermissionApplyOrderResponseBody struct {
	ApproveSuccess *bool   `json:"ApproveSuccess,omitempty" xml:"ApproveSuccess,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ApprovePermissionApplyOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApprovePermissionApplyOrderResponseBody) GoString() string {
	return s.String()
}

func (s *ApprovePermissionApplyOrderResponseBody) SetApproveSuccess(v bool) *ApprovePermissionApplyOrderResponseBody {
	s.ApproveSuccess = &v
	return s
}

func (s *ApprovePermissionApplyOrderResponseBody) SetRequestId(v string) *ApprovePermissionApplyOrderResponseBody {
	s.RequestId = &v
	return s
}

type ApprovePermissionApplyOrderResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ApprovePermissionApplyOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ApprovePermissionApplyOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s ApprovePermissionApplyOrderResponse) GoString() string {
	return s.String()
}

func (s *ApprovePermissionApplyOrderResponse) SetHeaders(v map[string]*string) *ApprovePermissionApplyOrderResponse {
	s.Headers = v
	return s
}

func (s *ApprovePermissionApplyOrderResponse) SetBody(v *ApprovePermissionApplyOrderResponseBody) *ApprovePermissionApplyOrderResponse {
	s.Body = v
	return s
}

type CheckFileDeploymentRequest struct {
	CheckDetailUrl    *string `json:"CheckDetailUrl,omitempty" xml:"CheckDetailUrl,omitempty"`
	CheckerInstanceId *string `json:"CheckerInstanceId,omitempty" xml:"CheckerInstanceId,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CheckFileDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckFileDeploymentRequest) GoString() string {
	return s.String()
}

func (s *CheckFileDeploymentRequest) SetCheckDetailUrl(v string) *CheckFileDeploymentRequest {
	s.CheckDetailUrl = &v
	return s
}

func (s *CheckFileDeploymentRequest) SetCheckerInstanceId(v string) *CheckFileDeploymentRequest {
	s.CheckerInstanceId = &v
	return s
}

func (s *CheckFileDeploymentRequest) SetStatus(v string) *CheckFileDeploymentRequest {
	s.Status = &v
	return s
}

type CheckFileDeploymentResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckFileDeploymentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckFileDeploymentResponseBody) GoString() string {
	return s.String()
}

func (s *CheckFileDeploymentResponseBody) SetRequestId(v string) *CheckFileDeploymentResponseBody {
	s.RequestId = &v
	return s
}

type CheckFileDeploymentResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CheckFileDeploymentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckFileDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckFileDeploymentResponse) GoString() string {
	return s.String()
}

func (s *CheckFileDeploymentResponse) SetHeaders(v map[string]*string) *CheckFileDeploymentResponse {
	s.Headers = v
	return s
}

func (s *CheckFileDeploymentResponse) SetBody(v *CheckFileDeploymentResponseBody) *CheckFileDeploymentResponse {
	s.Body = v
	return s
}

type CheckMetaPartitionRequest struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DatabaseName   *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	Partition      *string `json:"Partition,omitempty" xml:"Partition,omitempty"`
	TableGuid      *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TableName      *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s CheckMetaPartitionRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckMetaPartitionRequest) GoString() string {
	return s.String()
}

func (s *CheckMetaPartitionRequest) SetClusterId(v string) *CheckMetaPartitionRequest {
	s.ClusterId = &v
	return s
}

func (s *CheckMetaPartitionRequest) SetDataSourceType(v string) *CheckMetaPartitionRequest {
	s.DataSourceType = &v
	return s
}

func (s *CheckMetaPartitionRequest) SetDatabaseName(v string) *CheckMetaPartitionRequest {
	s.DatabaseName = &v
	return s
}

func (s *CheckMetaPartitionRequest) SetPartition(v string) *CheckMetaPartitionRequest {
	s.Partition = &v
	return s
}

func (s *CheckMetaPartitionRequest) SetTableGuid(v string) *CheckMetaPartitionRequest {
	s.TableGuid = &v
	return s
}

func (s *CheckMetaPartitionRequest) SetTableName(v string) *CheckMetaPartitionRequest {
	s.TableName = &v
	return s
}

type CheckMetaPartitionResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CheckMetaPartitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckMetaPartitionResponseBody) GoString() string {
	return s.String()
}

func (s *CheckMetaPartitionResponseBody) SetData(v bool) *CheckMetaPartitionResponseBody {
	s.Data = &v
	return s
}

func (s *CheckMetaPartitionResponseBody) SetErrorCode(v string) *CheckMetaPartitionResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CheckMetaPartitionResponseBody) SetErrorMessage(v string) *CheckMetaPartitionResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CheckMetaPartitionResponseBody) SetHttpStatusCode(v int32) *CheckMetaPartitionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CheckMetaPartitionResponseBody) SetRequestId(v string) *CheckMetaPartitionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckMetaPartitionResponseBody) SetSuccess(v bool) *CheckMetaPartitionResponseBody {
	s.Success = &v
	return s
}

type CheckMetaPartitionResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CheckMetaPartitionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckMetaPartitionResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckMetaPartitionResponse) GoString() string {
	return s.String()
}

func (s *CheckMetaPartitionResponse) SetHeaders(v map[string]*string) *CheckMetaPartitionResponse {
	s.Headers = v
	return s
}

func (s *CheckMetaPartitionResponse) SetBody(v *CheckMetaPartitionResponseBody) *CheckMetaPartitionResponse {
	s.Body = v
	return s
}

type CheckMetaTableRequest struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DatabaseName   *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	TableGuid      *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TableName      *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s CheckMetaTableRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckMetaTableRequest) GoString() string {
	return s.String()
}

func (s *CheckMetaTableRequest) SetClusterId(v string) *CheckMetaTableRequest {
	s.ClusterId = &v
	return s
}

func (s *CheckMetaTableRequest) SetDataSourceType(v string) *CheckMetaTableRequest {
	s.DataSourceType = &v
	return s
}

func (s *CheckMetaTableRequest) SetDatabaseName(v string) *CheckMetaTableRequest {
	s.DatabaseName = &v
	return s
}

func (s *CheckMetaTableRequest) SetTableGuid(v string) *CheckMetaTableRequest {
	s.TableGuid = &v
	return s
}

func (s *CheckMetaTableRequest) SetTableName(v string) *CheckMetaTableRequest {
	s.TableName = &v
	return s
}

type CheckMetaTableResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckMetaTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckMetaTableResponseBody) GoString() string {
	return s.String()
}

func (s *CheckMetaTableResponseBody) SetData(v bool) *CheckMetaTableResponseBody {
	s.Data = &v
	return s
}

func (s *CheckMetaTableResponseBody) SetRequestId(v string) *CheckMetaTableResponseBody {
	s.RequestId = &v
	return s
}

type CheckMetaTableResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CheckMetaTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckMetaTableResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckMetaTableResponse) GoString() string {
	return s.String()
}

func (s *CheckMetaTableResponse) SetHeaders(v map[string]*string) *CheckMetaTableResponse {
	s.Headers = v
	return s
}

func (s *CheckMetaTableResponse) SetBody(v *CheckMetaTableResponseBody) *CheckMetaTableResponse {
	s.Body = v
	return s
}

type CreateBusinessRequest struct {
	BusinessName      *string `json:"BusinessName,omitempty" xml:"BusinessName,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Owner             *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	UseType           *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s CreateBusinessRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessRequest) GoString() string {
	return s.String()
}

func (s *CreateBusinessRequest) SetBusinessName(v string) *CreateBusinessRequest {
	s.BusinessName = &v
	return s
}

func (s *CreateBusinessRequest) SetDescription(v string) *CreateBusinessRequest {
	s.Description = &v
	return s
}

func (s *CreateBusinessRequest) SetOwner(v string) *CreateBusinessRequest {
	s.Owner = &v
	return s
}

func (s *CreateBusinessRequest) SetProjectId(v int64) *CreateBusinessRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateBusinessRequest) SetProjectIdentifier(v string) *CreateBusinessRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *CreateBusinessRequest) SetUseType(v string) *CreateBusinessRequest {
	s.UseType = &v
	return s
}

type CreateBusinessResponseBody struct {
	BusinessId     *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateBusinessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBusinessResponseBody) SetBusinessId(v int64) *CreateBusinessResponseBody {
	s.BusinessId = &v
	return s
}

func (s *CreateBusinessResponseBody) SetErrorCode(v string) *CreateBusinessResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateBusinessResponseBody) SetErrorMessage(v string) *CreateBusinessResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateBusinessResponseBody) SetHttpStatusCode(v int32) *CreateBusinessResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateBusinessResponseBody) SetRequestId(v string) *CreateBusinessResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateBusinessResponseBody) SetSuccess(v bool) *CreateBusinessResponseBody {
	s.Success = &v
	return s
}

type CreateBusinessResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateBusinessResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateBusinessResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessResponse) GoString() string {
	return s.String()
}

func (s *CreateBusinessResponse) SetHeaders(v map[string]*string) *CreateBusinessResponse {
	s.Headers = v
	return s
}

func (s *CreateBusinessResponse) SetBody(v *CreateBusinessResponseBody) *CreateBusinessResponse {
	s.Body = v
	return s
}

type CreateConnectionRequest struct {
	ConnectionType *string `json:"ConnectionType,omitempty" xml:"ConnectionType,omitempty"`
	Content        *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnvType        *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SubType        *string `json:"SubType,omitempty" xml:"SubType,omitempty"`
}

func (s CreateConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConnectionRequest) GoString() string {
	return s.String()
}

func (s *CreateConnectionRequest) SetConnectionType(v string) *CreateConnectionRequest {
	s.ConnectionType = &v
	return s
}

func (s *CreateConnectionRequest) SetContent(v string) *CreateConnectionRequest {
	s.Content = &v
	return s
}

func (s *CreateConnectionRequest) SetDescription(v string) *CreateConnectionRequest {
	s.Description = &v
	return s
}

func (s *CreateConnectionRequest) SetEnvType(v int32) *CreateConnectionRequest {
	s.EnvType = &v
	return s
}

func (s *CreateConnectionRequest) SetName(v string) *CreateConnectionRequest {
	s.Name = &v
	return s
}

func (s *CreateConnectionRequest) SetProjectId(v int64) *CreateConnectionRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateConnectionRequest) SetSubType(v string) *CreateConnectionRequest {
	s.SubType = &v
	return s
}

type CreateConnectionResponseBody struct {
	Data           *int64  `json:"Data,omitempty" xml:"Data,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateConnectionResponseBody) SetData(v int64) *CreateConnectionResponseBody {
	s.Data = &v
	return s
}

func (s *CreateConnectionResponseBody) SetHttpStatusCode(v string) *CreateConnectionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateConnectionResponseBody) SetRequestId(v string) *CreateConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateConnectionResponseBody) SetSuccess(v bool) *CreateConnectionResponseBody {
	s.Success = &v
	return s
}

type CreateConnectionResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConnectionResponse) GoString() string {
	return s.String()
}

func (s *CreateConnectionResponse) SetHeaders(v map[string]*string) *CreateConnectionResponse {
	s.Headers = v
	return s
}

func (s *CreateConnectionResponse) SetBody(v *CreateConnectionResponseBody) *CreateConnectionResponse {
	s.Body = v
	return s
}

type CreateDISyncTaskRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TaskContent *string `json:"TaskContent,omitempty" xml:"TaskContent,omitempty"`
	TaskName    *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskParam   *string `json:"TaskParam,omitempty" xml:"TaskParam,omitempty"`
	TaskType    *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s CreateDISyncTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDISyncTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateDISyncTaskRequest) SetClientToken(v string) *CreateDISyncTaskRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDISyncTaskRequest) SetProjectId(v int64) *CreateDISyncTaskRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDISyncTaskRequest) SetTaskContent(v string) *CreateDISyncTaskRequest {
	s.TaskContent = &v
	return s
}

func (s *CreateDISyncTaskRequest) SetTaskName(v string) *CreateDISyncTaskRequest {
	s.TaskName = &v
	return s
}

func (s *CreateDISyncTaskRequest) SetTaskParam(v string) *CreateDISyncTaskRequest {
	s.TaskParam = &v
	return s
}

func (s *CreateDISyncTaskRequest) SetTaskType(v string) *CreateDISyncTaskRequest {
	s.TaskType = &v
	return s
}

type CreateDISyncTaskResponseBody struct {
	Data      *CreateDISyncTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDISyncTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDISyncTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDISyncTaskResponseBody) SetData(v *CreateDISyncTaskResponseBodyData) *CreateDISyncTaskResponseBody {
	s.Data = v
	return s
}

func (s *CreateDISyncTaskResponseBody) SetRequestId(v string) *CreateDISyncTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDISyncTaskResponseBody) SetSuccess(v bool) *CreateDISyncTaskResponseBody {
	s.Success = &v
	return s
}

type CreateDISyncTaskResponseBodyData struct {
	FileId  *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Status  *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateDISyncTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateDISyncTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateDISyncTaskResponseBodyData) SetFileId(v int64) *CreateDISyncTaskResponseBodyData {
	s.FileId = &v
	return s
}

func (s *CreateDISyncTaskResponseBodyData) SetMessage(v string) *CreateDISyncTaskResponseBodyData {
	s.Message = &v
	return s
}

func (s *CreateDISyncTaskResponseBodyData) SetStatus(v string) *CreateDISyncTaskResponseBodyData {
	s.Status = &v
	return s
}

type CreateDISyncTaskResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDISyncTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDISyncTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDISyncTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateDISyncTaskResponse) SetHeaders(v map[string]*string) *CreateDISyncTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateDISyncTaskResponse) SetBody(v *CreateDISyncTaskResponseBody) *CreateDISyncTaskResponse {
	s.Body = v
	return s
}

type CreateDagComplementRequest struct {
	BizBeginTime   *string `json:"BizBeginTime,omitempty" xml:"BizBeginTime,omitempty"`
	BizEndTime     *string `json:"BizEndTime,omitempty" xml:"BizEndTime,omitempty"`
	EndBizDate     *string `json:"EndBizDate,omitempty" xml:"EndBizDate,omitempty"`
	ExcludeNodeIds *string `json:"ExcludeNodeIds,omitempty" xml:"ExcludeNodeIds,omitempty"`
	IncludeNodeIds *string `json:"IncludeNodeIds,omitempty" xml:"IncludeNodeIds,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NodeParams     *string `json:"NodeParams,omitempty" xml:"NodeParams,omitempty"`
	Parallelism    *bool   `json:"Parallelism,omitempty" xml:"Parallelism,omitempty"`
	ProjectEnv     *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	RootNodeId     *int64  `json:"RootNodeId,omitempty" xml:"RootNodeId,omitempty"`
	StartBizDate   *string `json:"StartBizDate,omitempty" xml:"StartBizDate,omitempty"`
}

func (s CreateDagComplementRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDagComplementRequest) GoString() string {
	return s.String()
}

func (s *CreateDagComplementRequest) SetBizBeginTime(v string) *CreateDagComplementRequest {
	s.BizBeginTime = &v
	return s
}

func (s *CreateDagComplementRequest) SetBizEndTime(v string) *CreateDagComplementRequest {
	s.BizEndTime = &v
	return s
}

func (s *CreateDagComplementRequest) SetEndBizDate(v string) *CreateDagComplementRequest {
	s.EndBizDate = &v
	return s
}

func (s *CreateDagComplementRequest) SetExcludeNodeIds(v string) *CreateDagComplementRequest {
	s.ExcludeNodeIds = &v
	return s
}

func (s *CreateDagComplementRequest) SetIncludeNodeIds(v string) *CreateDagComplementRequest {
	s.IncludeNodeIds = &v
	return s
}

func (s *CreateDagComplementRequest) SetName(v string) *CreateDagComplementRequest {
	s.Name = &v
	return s
}

func (s *CreateDagComplementRequest) SetNodeParams(v string) *CreateDagComplementRequest {
	s.NodeParams = &v
	return s
}

func (s *CreateDagComplementRequest) SetParallelism(v bool) *CreateDagComplementRequest {
	s.Parallelism = &v
	return s
}

func (s *CreateDagComplementRequest) SetProjectEnv(v string) *CreateDagComplementRequest {
	s.ProjectEnv = &v
	return s
}

func (s *CreateDagComplementRequest) SetRootNodeId(v int64) *CreateDagComplementRequest {
	s.RootNodeId = &v
	return s
}

func (s *CreateDagComplementRequest) SetStartBizDate(v string) *CreateDagComplementRequest {
	s.StartBizDate = &v
	return s
}

type CreateDagComplementResponseBody struct {
	Data           []*int64 `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorCode      *string  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDagComplementResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDagComplementResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDagComplementResponseBody) SetData(v []*int64) *CreateDagComplementResponseBody {
	s.Data = v
	return s
}

func (s *CreateDagComplementResponseBody) SetErrorCode(v string) *CreateDagComplementResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateDagComplementResponseBody) SetErrorMessage(v string) *CreateDagComplementResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateDagComplementResponseBody) SetHttpStatusCode(v int32) *CreateDagComplementResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateDagComplementResponseBody) SetRequestId(v string) *CreateDagComplementResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDagComplementResponseBody) SetSuccess(v bool) *CreateDagComplementResponseBody {
	s.Success = &v
	return s
}

type CreateDagComplementResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDagComplementResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDagComplementResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDagComplementResponse) GoString() string {
	return s.String()
}

func (s *CreateDagComplementResponse) SetHeaders(v map[string]*string) *CreateDagComplementResponse {
	s.Headers = v
	return s
}

func (s *CreateDagComplementResponse) SetBody(v *CreateDagComplementResponseBody) *CreateDagComplementResponse {
	s.Body = v
	return s
}

type CreateDagTestRequest struct {
	Bizdate    *string `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NodeId     *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeParams *string `json:"NodeParams,omitempty" xml:"NodeParams,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s CreateDagTestRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDagTestRequest) GoString() string {
	return s.String()
}

func (s *CreateDagTestRequest) SetBizdate(v string) *CreateDagTestRequest {
	s.Bizdate = &v
	return s
}

func (s *CreateDagTestRequest) SetName(v string) *CreateDagTestRequest {
	s.Name = &v
	return s
}

func (s *CreateDagTestRequest) SetNodeId(v int64) *CreateDagTestRequest {
	s.NodeId = &v
	return s
}

func (s *CreateDagTestRequest) SetNodeParams(v string) *CreateDagTestRequest {
	s.NodeParams = &v
	return s
}

func (s *CreateDagTestRequest) SetProjectEnv(v string) *CreateDagTestRequest {
	s.ProjectEnv = &v
	return s
}

type CreateDagTestResponseBody struct {
	Data           *int64  `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDagTestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDagTestResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDagTestResponseBody) SetData(v int64) *CreateDagTestResponseBody {
	s.Data = &v
	return s
}

func (s *CreateDagTestResponseBody) SetErrorCode(v string) *CreateDagTestResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateDagTestResponseBody) SetErrorMessage(v string) *CreateDagTestResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateDagTestResponseBody) SetHttpStatusCode(v int32) *CreateDagTestResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateDagTestResponseBody) SetRequestId(v string) *CreateDagTestResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDagTestResponseBody) SetSuccess(v bool) *CreateDagTestResponseBody {
	s.Success = &v
	return s
}

type CreateDagTestResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDagTestResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDagTestResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDagTestResponse) GoString() string {
	return s.String()
}

func (s *CreateDagTestResponse) SetHeaders(v map[string]*string) *CreateDagTestResponse {
	s.Headers = v
	return s
}

func (s *CreateDagTestResponse) SetBody(v *CreateDagTestResponseBody) *CreateDagTestResponse {
	s.Body = v
	return s
}

type CreateDataServiceApiRequest struct {
	ApiDescription      *string `json:"ApiDescription,omitempty" xml:"ApiDescription,omitempty"`
	ApiMode             *int32  `json:"ApiMode,omitempty" xml:"ApiMode,omitempty"`
	ApiName             *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiPath             *string `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	FolderId            *int64  `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	GroupId             *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ProjectId           *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Protocols           *string `json:"Protocols,omitempty" xml:"Protocols,omitempty"`
	RegistrationDetails *string `json:"RegistrationDetails,omitempty" xml:"RegistrationDetails,omitempty"`
	RequestMethod       *int32  `json:"RequestMethod,omitempty" xml:"RequestMethod,omitempty"`
	ResponseContentType *int32  `json:"ResponseContentType,omitempty" xml:"ResponseContentType,omitempty"`
	ScriptDetails       *string `json:"ScriptDetails,omitempty" xml:"ScriptDetails,omitempty"`
	TenantId            *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Timeout             *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	VisibleRange        *int32  `json:"VisibleRange,omitempty" xml:"VisibleRange,omitempty"`
	WizardDetails       *string `json:"WizardDetails,omitempty" xml:"WizardDetails,omitempty"`
}

func (s CreateDataServiceApiRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataServiceApiRequest) GoString() string {
	return s.String()
}

func (s *CreateDataServiceApiRequest) SetApiDescription(v string) *CreateDataServiceApiRequest {
	s.ApiDescription = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetApiMode(v int32) *CreateDataServiceApiRequest {
	s.ApiMode = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetApiName(v string) *CreateDataServiceApiRequest {
	s.ApiName = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetApiPath(v string) *CreateDataServiceApiRequest {
	s.ApiPath = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetFolderId(v int64) *CreateDataServiceApiRequest {
	s.FolderId = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetGroupId(v string) *CreateDataServiceApiRequest {
	s.GroupId = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetProjectId(v int64) *CreateDataServiceApiRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetProtocols(v string) *CreateDataServiceApiRequest {
	s.Protocols = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetRegistrationDetails(v string) *CreateDataServiceApiRequest {
	s.RegistrationDetails = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetRequestMethod(v int32) *CreateDataServiceApiRequest {
	s.RequestMethod = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetResponseContentType(v int32) *CreateDataServiceApiRequest {
	s.ResponseContentType = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetScriptDetails(v string) *CreateDataServiceApiRequest {
	s.ScriptDetails = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetTenantId(v int64) *CreateDataServiceApiRequest {
	s.TenantId = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetTimeout(v int32) *CreateDataServiceApiRequest {
	s.Timeout = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetVisibleRange(v int32) *CreateDataServiceApiRequest {
	s.VisibleRange = &v
	return s
}

func (s *CreateDataServiceApiRequest) SetWizardDetails(v string) *CreateDataServiceApiRequest {
	s.WizardDetails = &v
	return s
}

type CreateDataServiceApiResponseBody struct {
	Data           *int64  `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDataServiceApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataServiceApiResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataServiceApiResponseBody) SetData(v int64) *CreateDataServiceApiResponseBody {
	s.Data = &v
	return s
}

func (s *CreateDataServiceApiResponseBody) SetErrorCode(v string) *CreateDataServiceApiResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateDataServiceApiResponseBody) SetErrorMessage(v string) *CreateDataServiceApiResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateDataServiceApiResponseBody) SetHttpStatusCode(v int32) *CreateDataServiceApiResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateDataServiceApiResponseBody) SetRequestId(v string) *CreateDataServiceApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDataServiceApiResponseBody) SetSuccess(v bool) *CreateDataServiceApiResponseBody {
	s.Success = &v
	return s
}

type CreateDataServiceApiResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDataServiceApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDataServiceApiResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataServiceApiResponse) GoString() string {
	return s.String()
}

func (s *CreateDataServiceApiResponse) SetHeaders(v map[string]*string) *CreateDataServiceApiResponse {
	s.Headers = v
	return s
}

func (s *CreateDataServiceApiResponse) SetBody(v *CreateDataServiceApiResponseBody) *CreateDataServiceApiResponse {
	s.Body = v
	return s
}

type CreateDataServiceApiAuthorityRequest struct {
	ApiId               *int64 `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	AuthorizedProjectId *int64 `json:"AuthorizedProjectId,omitempty" xml:"AuthorizedProjectId,omitempty"`
	EndTime             *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ProjectId           *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId            *int64 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s CreateDataServiceApiAuthorityRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataServiceApiAuthorityRequest) GoString() string {
	return s.String()
}

func (s *CreateDataServiceApiAuthorityRequest) SetApiId(v int64) *CreateDataServiceApiAuthorityRequest {
	s.ApiId = &v
	return s
}

func (s *CreateDataServiceApiAuthorityRequest) SetAuthorizedProjectId(v int64) *CreateDataServiceApiAuthorityRequest {
	s.AuthorizedProjectId = &v
	return s
}

func (s *CreateDataServiceApiAuthorityRequest) SetEndTime(v int64) *CreateDataServiceApiAuthorityRequest {
	s.EndTime = &v
	return s
}

func (s *CreateDataServiceApiAuthorityRequest) SetProjectId(v int64) *CreateDataServiceApiAuthorityRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataServiceApiAuthorityRequest) SetTenantId(v int64) *CreateDataServiceApiAuthorityRequest {
	s.TenantId = &v
	return s
}

type CreateDataServiceApiAuthorityResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDataServiceApiAuthorityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataServiceApiAuthorityResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataServiceApiAuthorityResponseBody) SetRequestId(v string) *CreateDataServiceApiAuthorityResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDataServiceApiAuthorityResponseBody) SetSuccess(v bool) *CreateDataServiceApiAuthorityResponseBody {
	s.Success = &v
	return s
}

type CreateDataServiceApiAuthorityResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDataServiceApiAuthorityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDataServiceApiAuthorityResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataServiceApiAuthorityResponse) GoString() string {
	return s.String()
}

func (s *CreateDataServiceApiAuthorityResponse) SetHeaders(v map[string]*string) *CreateDataServiceApiAuthorityResponse {
	s.Headers = v
	return s
}

func (s *CreateDataServiceApiAuthorityResponse) SetBody(v *CreateDataServiceApiAuthorityResponseBody) *CreateDataServiceApiAuthorityResponse {
	s.Body = v
	return s
}

type CreateDataServiceFolderRequest struct {
	FolderName *string `json:"FolderName,omitempty" xml:"FolderName,omitempty"`
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ParentId   *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ProjectId  *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId   *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s CreateDataServiceFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataServiceFolderRequest) GoString() string {
	return s.String()
}

func (s *CreateDataServiceFolderRequest) SetFolderName(v string) *CreateDataServiceFolderRequest {
	s.FolderName = &v
	return s
}

func (s *CreateDataServiceFolderRequest) SetGroupId(v string) *CreateDataServiceFolderRequest {
	s.GroupId = &v
	return s
}

func (s *CreateDataServiceFolderRequest) SetParentId(v int64) *CreateDataServiceFolderRequest {
	s.ParentId = &v
	return s
}

func (s *CreateDataServiceFolderRequest) SetProjectId(v int64) *CreateDataServiceFolderRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataServiceFolderRequest) SetTenantId(v int64) *CreateDataServiceFolderRequest {
	s.TenantId = &v
	return s
}

type CreateDataServiceFolderResponseBody struct {
	FolderId  *int64  `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDataServiceFolderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataServiceFolderResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataServiceFolderResponseBody) SetFolderId(v int64) *CreateDataServiceFolderResponseBody {
	s.FolderId = &v
	return s
}

func (s *CreateDataServiceFolderResponseBody) SetRequestId(v string) *CreateDataServiceFolderResponseBody {
	s.RequestId = &v
	return s
}

type CreateDataServiceFolderResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDataServiceFolderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDataServiceFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataServiceFolderResponse) GoString() string {
	return s.String()
}

func (s *CreateDataServiceFolderResponse) SetHeaders(v map[string]*string) *CreateDataServiceFolderResponse {
	s.Headers = v
	return s
}

func (s *CreateDataServiceFolderResponse) SetBody(v *CreateDataServiceFolderResponseBody) *CreateDataServiceFolderResponse {
	s.Body = v
	return s
}

type CreateDataServiceGroupRequest struct {
	ApiGatewayGroupId *string `json:"ApiGatewayGroupId,omitempty" xml:"ApiGatewayGroupId,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupName         *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId          *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s CreateDataServiceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataServiceGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateDataServiceGroupRequest) SetApiGatewayGroupId(v string) *CreateDataServiceGroupRequest {
	s.ApiGatewayGroupId = &v
	return s
}

func (s *CreateDataServiceGroupRequest) SetDescription(v string) *CreateDataServiceGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateDataServiceGroupRequest) SetGroupName(v string) *CreateDataServiceGroupRequest {
	s.GroupName = &v
	return s
}

func (s *CreateDataServiceGroupRequest) SetProjectId(v int64) *CreateDataServiceGroupRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataServiceGroupRequest) SetTenantId(v int64) *CreateDataServiceGroupRequest {
	s.TenantId = &v
	return s
}

type CreateDataServiceGroupResponseBody struct {
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDataServiceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataServiceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataServiceGroupResponseBody) SetGroupId(v string) *CreateDataServiceGroupResponseBody {
	s.GroupId = &v
	return s
}

func (s *CreateDataServiceGroupResponseBody) SetRequestId(v string) *CreateDataServiceGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateDataServiceGroupResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDataServiceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDataServiceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataServiceGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateDataServiceGroupResponse) SetHeaders(v map[string]*string) *CreateDataServiceGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateDataServiceGroupResponse) SetBody(v *CreateDataServiceGroupResponseBody) *CreateDataServiceGroupResponse {
	s.Body = v
	return s
}

type CreateDataSourceRequest struct {
	Content        *string `json:"Content,omitempty" xml:"Content,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnvType        *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SubType        *string `json:"SubType,omitempty" xml:"SubType,omitempty"`
}

func (s CreateDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateDataSourceRequest) SetContent(v string) *CreateDataSourceRequest {
	s.Content = &v
	return s
}

func (s *CreateDataSourceRequest) SetDataSourceType(v string) *CreateDataSourceRequest {
	s.DataSourceType = &v
	return s
}

func (s *CreateDataSourceRequest) SetDescription(v string) *CreateDataSourceRequest {
	s.Description = &v
	return s
}

func (s *CreateDataSourceRequest) SetEnvType(v int32) *CreateDataSourceRequest {
	s.EnvType = &v
	return s
}

func (s *CreateDataSourceRequest) SetName(v string) *CreateDataSourceRequest {
	s.Name = &v
	return s
}

func (s *CreateDataSourceRequest) SetProjectId(v int64) *CreateDataSourceRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataSourceRequest) SetSubType(v string) *CreateDataSourceRequest {
	s.SubType = &v
	return s
}

type CreateDataSourceResponseBody struct {
	Data           *int64  `json:"Data,omitempty" xml:"Data,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataSourceResponseBody) SetData(v int64) *CreateDataSourceResponseBody {
	s.Data = &v
	return s
}

func (s *CreateDataSourceResponseBody) SetHttpStatusCode(v string) *CreateDataSourceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateDataSourceResponseBody) SetRequestId(v string) *CreateDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDataSourceResponseBody) SetSuccess(v bool) *CreateDataSourceResponseBody {
	s.Success = &v
	return s
}

type CreateDataSourceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateDataSourceResponse) SetHeaders(v map[string]*string) *CreateDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateDataSourceResponse) SetBody(v *CreateDataSourceResponseBody) *CreateDataSourceResponse {
	s.Body = v
	return s
}

type CreateExportMigrationRequest struct {
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ExportMode         *string `json:"ExportMode,omitempty" xml:"ExportMode,omitempty"`
	ExportObjectStatus *string `json:"ExportObjectStatus,omitempty" xml:"ExportObjectStatus,omitempty"`
	IncrementalSince   *int64  `json:"IncrementalSince,omitempty" xml:"IncrementalSince,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProjectId          *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s CreateExportMigrationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateExportMigrationRequest) GoString() string {
	return s.String()
}

func (s *CreateExportMigrationRequest) SetDescription(v string) *CreateExportMigrationRequest {
	s.Description = &v
	return s
}

func (s *CreateExportMigrationRequest) SetExportMode(v string) *CreateExportMigrationRequest {
	s.ExportMode = &v
	return s
}

func (s *CreateExportMigrationRequest) SetExportObjectStatus(v string) *CreateExportMigrationRequest {
	s.ExportObjectStatus = &v
	return s
}

func (s *CreateExportMigrationRequest) SetIncrementalSince(v int64) *CreateExportMigrationRequest {
	s.IncrementalSince = &v
	return s
}

func (s *CreateExportMigrationRequest) SetName(v string) *CreateExportMigrationRequest {
	s.Name = &v
	return s
}

func (s *CreateExportMigrationRequest) SetProjectId(v int64) *CreateExportMigrationRequest {
	s.ProjectId = &v
	return s
}

type CreateExportMigrationResponseBody struct {
	Data      *int64  `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateExportMigrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateExportMigrationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateExportMigrationResponseBody) SetData(v int64) *CreateExportMigrationResponseBody {
	s.Data = &v
	return s
}

func (s *CreateExportMigrationResponseBody) SetRequestId(v string) *CreateExportMigrationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateExportMigrationResponseBody) SetSuccess(v bool) *CreateExportMigrationResponseBody {
	s.Success = &v
	return s
}

type CreateExportMigrationResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateExportMigrationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateExportMigrationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateExportMigrationResponse) GoString() string {
	return s.String()
}

func (s *CreateExportMigrationResponse) SetHeaders(v map[string]*string) *CreateExportMigrationResponse {
	s.Headers = v
	return s
}

func (s *CreateExportMigrationResponse) SetBody(v *CreateExportMigrationResponseBody) *CreateExportMigrationResponse {
	s.Body = v
	return s
}

type CreateFileRequest struct {
	AdvancedSettings        *string `json:"AdvancedSettings,omitempty" xml:"AdvancedSettings,omitempty"`
	AutoParsing             *bool   `json:"AutoParsing,omitempty" xml:"AutoParsing,omitempty"`
	AutoRerunIntervalMillis *int32  `json:"AutoRerunIntervalMillis,omitempty" xml:"AutoRerunIntervalMillis,omitempty"`
	AutoRerunTimes          *int32  `json:"AutoRerunTimes,omitempty" xml:"AutoRerunTimes,omitempty"`
	ConnectionName          *string `json:"ConnectionName,omitempty" xml:"ConnectionName,omitempty"`
	Content                 *string `json:"Content,omitempty" xml:"Content,omitempty"`
	CronExpress             *string `json:"CronExpress,omitempty" xml:"CronExpress,omitempty"`
	CycleType               *string `json:"CycleType,omitempty" xml:"CycleType,omitempty"`
	DependentNodeIdList     *string `json:"DependentNodeIdList,omitempty" xml:"DependentNodeIdList,omitempty"`
	DependentType           *string `json:"DependentType,omitempty" xml:"DependentType,omitempty"`
	EndEffectDate           *int64  `json:"EndEffectDate,omitempty" xml:"EndEffectDate,omitempty"`
	FileDescription         *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	FileFolderPath          *string `json:"FileFolderPath,omitempty" xml:"FileFolderPath,omitempty"`
	FileName                *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FileType                *int32  `json:"FileType,omitempty" xml:"FileType,omitempty"`
	InputList               *string `json:"InputList,omitempty" xml:"InputList,omitempty"`
	Owner                   *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ParaValue               *string `json:"ParaValue,omitempty" xml:"ParaValue,omitempty"`
	ProjectId               *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier       *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	RerunMode               *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	ResourceGroupId         *int64  `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceGroupIdentifier *string `json:"ResourceGroupIdentifier,omitempty" xml:"ResourceGroupIdentifier,omitempty"`
	SchedulerType           *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
	StartEffectDate         *int64  `json:"StartEffectDate,omitempty" xml:"StartEffectDate,omitempty"`
	StartImmediately        *bool   `json:"StartImmediately,omitempty" xml:"StartImmediately,omitempty"`
	Stop                    *bool   `json:"Stop,omitempty" xml:"Stop,omitempty"`
}

func (s CreateFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFileRequest) GoString() string {
	return s.String()
}

func (s *CreateFileRequest) SetAdvancedSettings(v string) *CreateFileRequest {
	s.AdvancedSettings = &v
	return s
}

func (s *CreateFileRequest) SetAutoParsing(v bool) *CreateFileRequest {
	s.AutoParsing = &v
	return s
}

func (s *CreateFileRequest) SetAutoRerunIntervalMillis(v int32) *CreateFileRequest {
	s.AutoRerunIntervalMillis = &v
	return s
}

func (s *CreateFileRequest) SetAutoRerunTimes(v int32) *CreateFileRequest {
	s.AutoRerunTimes = &v
	return s
}

func (s *CreateFileRequest) SetConnectionName(v string) *CreateFileRequest {
	s.ConnectionName = &v
	return s
}

func (s *CreateFileRequest) SetContent(v string) *CreateFileRequest {
	s.Content = &v
	return s
}

func (s *CreateFileRequest) SetCronExpress(v string) *CreateFileRequest {
	s.CronExpress = &v
	return s
}

func (s *CreateFileRequest) SetCycleType(v string) *CreateFileRequest {
	s.CycleType = &v
	return s
}

func (s *CreateFileRequest) SetDependentNodeIdList(v string) *CreateFileRequest {
	s.DependentNodeIdList = &v
	return s
}

func (s *CreateFileRequest) SetDependentType(v string) *CreateFileRequest {
	s.DependentType = &v
	return s
}

func (s *CreateFileRequest) SetEndEffectDate(v int64) *CreateFileRequest {
	s.EndEffectDate = &v
	return s
}

func (s *CreateFileRequest) SetFileDescription(v string) *CreateFileRequest {
	s.FileDescription = &v
	return s
}

func (s *CreateFileRequest) SetFileFolderPath(v string) *CreateFileRequest {
	s.FileFolderPath = &v
	return s
}

func (s *CreateFileRequest) SetFileName(v string) *CreateFileRequest {
	s.FileName = &v
	return s
}

func (s *CreateFileRequest) SetFileType(v int32) *CreateFileRequest {
	s.FileType = &v
	return s
}

func (s *CreateFileRequest) SetInputList(v string) *CreateFileRequest {
	s.InputList = &v
	return s
}

func (s *CreateFileRequest) SetOwner(v string) *CreateFileRequest {
	s.Owner = &v
	return s
}

func (s *CreateFileRequest) SetParaValue(v string) *CreateFileRequest {
	s.ParaValue = &v
	return s
}

func (s *CreateFileRequest) SetProjectId(v int64) *CreateFileRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFileRequest) SetProjectIdentifier(v string) *CreateFileRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *CreateFileRequest) SetRerunMode(v string) *CreateFileRequest {
	s.RerunMode = &v
	return s
}

func (s *CreateFileRequest) SetResourceGroupId(v int64) *CreateFileRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateFileRequest) SetResourceGroupIdentifier(v string) *CreateFileRequest {
	s.ResourceGroupIdentifier = &v
	return s
}

func (s *CreateFileRequest) SetSchedulerType(v string) *CreateFileRequest {
	s.SchedulerType = &v
	return s
}

func (s *CreateFileRequest) SetStartEffectDate(v int64) *CreateFileRequest {
	s.StartEffectDate = &v
	return s
}

func (s *CreateFileRequest) SetStartImmediately(v bool) *CreateFileRequest {
	s.StartImmediately = &v
	return s
}

func (s *CreateFileRequest) SetStop(v bool) *CreateFileRequest {
	s.Stop = &v
	return s
}

type CreateFileResponseBody struct {
	Data           *int64  `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFileResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFileResponseBody) SetData(v int64) *CreateFileResponseBody {
	s.Data = &v
	return s
}

func (s *CreateFileResponseBody) SetErrorCode(v string) *CreateFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateFileResponseBody) SetErrorMessage(v string) *CreateFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateFileResponseBody) SetHttpStatusCode(v int32) *CreateFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateFileResponseBody) SetRequestId(v string) *CreateFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFileResponseBody) SetSuccess(v bool) *CreateFileResponseBody {
	s.Success = &v
	return s
}

type CreateFileResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFileResponse) GoString() string {
	return s.String()
}

func (s *CreateFileResponse) SetHeaders(v map[string]*string) *CreateFileResponse {
	s.Headers = v
	return s
}

func (s *CreateFileResponse) SetBody(v *CreateFileResponseBody) *CreateFileResponse {
	s.Body = v
	return s
}

type CreateFolderRequest struct {
	FolderPath        *string `json:"FolderPath,omitempty" xml:"FolderPath,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s CreateFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFolderRequest) GoString() string {
	return s.String()
}

func (s *CreateFolderRequest) SetFolderPath(v string) *CreateFolderRequest {
	s.FolderPath = &v
	return s
}

func (s *CreateFolderRequest) SetProjectId(v int64) *CreateFolderRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFolderRequest) SetProjectIdentifier(v string) *CreateFolderRequest {
	s.ProjectIdentifier = &v
	return s
}

type CreateFolderResponseBody struct {
	Data           *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateFolderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFolderResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFolderResponseBody) SetData(v string) *CreateFolderResponseBody {
	s.Data = &v
	return s
}

func (s *CreateFolderResponseBody) SetErrorCode(v string) *CreateFolderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateFolderResponseBody) SetErrorMessage(v string) *CreateFolderResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateFolderResponseBody) SetHttpStatusCode(v int32) *CreateFolderResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateFolderResponseBody) SetRequestId(v string) *CreateFolderResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFolderResponseBody) SetSuccess(v bool) *CreateFolderResponseBody {
	s.Success = &v
	return s
}

type CreateFolderResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateFolderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFolderResponse) GoString() string {
	return s.String()
}

func (s *CreateFolderResponse) SetHeaders(v map[string]*string) *CreateFolderResponse {
	s.Headers = v
	return s
}

func (s *CreateFolderResponse) SetBody(v *CreateFolderResponseBody) *CreateFolderResponse {
	s.Body = v
	return s
}

type CreateImportMigrationRequest struct {
	CalculateEngineMap *string `json:"CalculateEngineMap,omitempty" xml:"CalculateEngineMap,omitempty"`
	CommitRule         *string `json:"CommitRule,omitempty" xml:"CommitRule,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PackageFile        *string `json:"PackageFile,omitempty" xml:"PackageFile,omitempty"`
	PackageType        *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	ProjectId          *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ResourceGroupMap   *string `json:"ResourceGroupMap,omitempty" xml:"ResourceGroupMap,omitempty"`
	WorkspaceMap       *string `json:"WorkspaceMap,omitempty" xml:"WorkspaceMap,omitempty"`
}

func (s CreateImportMigrationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateImportMigrationRequest) GoString() string {
	return s.String()
}

func (s *CreateImportMigrationRequest) SetCalculateEngineMap(v string) *CreateImportMigrationRequest {
	s.CalculateEngineMap = &v
	return s
}

func (s *CreateImportMigrationRequest) SetCommitRule(v string) *CreateImportMigrationRequest {
	s.CommitRule = &v
	return s
}

func (s *CreateImportMigrationRequest) SetDescription(v string) *CreateImportMigrationRequest {
	s.Description = &v
	return s
}

func (s *CreateImportMigrationRequest) SetName(v string) *CreateImportMigrationRequest {
	s.Name = &v
	return s
}

func (s *CreateImportMigrationRequest) SetPackageFile(v string) *CreateImportMigrationRequest {
	s.PackageFile = &v
	return s
}

func (s *CreateImportMigrationRequest) SetPackageType(v string) *CreateImportMigrationRequest {
	s.PackageType = &v
	return s
}

func (s *CreateImportMigrationRequest) SetProjectId(v int64) *CreateImportMigrationRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateImportMigrationRequest) SetResourceGroupMap(v string) *CreateImportMigrationRequest {
	s.ResourceGroupMap = &v
	return s
}

func (s *CreateImportMigrationRequest) SetWorkspaceMap(v string) *CreateImportMigrationRequest {
	s.WorkspaceMap = &v
	return s
}

type CreateImportMigrationAdvanceRequest struct {
	PackageFileObject  io.Reader `json:"PackageFileObject,omitempty" xml:"PackageFileObject,omitempty" require:"true"`
	CalculateEngineMap *string   `json:"CalculateEngineMap,omitempty" xml:"CalculateEngineMap,omitempty"`
	CommitRule         *string   `json:"CommitRule,omitempty" xml:"CommitRule,omitempty"`
	Description        *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	Name               *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	PackageType        *string   `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	ProjectId          *int64    `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ResourceGroupMap   *string   `json:"ResourceGroupMap,omitempty" xml:"ResourceGroupMap,omitempty"`
	WorkspaceMap       *string   `json:"WorkspaceMap,omitempty" xml:"WorkspaceMap,omitempty"`
}

func (s CreateImportMigrationAdvanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateImportMigrationAdvanceRequest) GoString() string {
	return s.String()
}

func (s *CreateImportMigrationAdvanceRequest) SetPackageFileObject(v io.Reader) *CreateImportMigrationAdvanceRequest {
	s.PackageFileObject = v
	return s
}

func (s *CreateImportMigrationAdvanceRequest) SetCalculateEngineMap(v string) *CreateImportMigrationAdvanceRequest {
	s.CalculateEngineMap = &v
	return s
}

func (s *CreateImportMigrationAdvanceRequest) SetCommitRule(v string) *CreateImportMigrationAdvanceRequest {
	s.CommitRule = &v
	return s
}

func (s *CreateImportMigrationAdvanceRequest) SetDescription(v string) *CreateImportMigrationAdvanceRequest {
	s.Description = &v
	return s
}

func (s *CreateImportMigrationAdvanceRequest) SetName(v string) *CreateImportMigrationAdvanceRequest {
	s.Name = &v
	return s
}

func (s *CreateImportMigrationAdvanceRequest) SetPackageType(v string) *CreateImportMigrationAdvanceRequest {
	s.PackageType = &v
	return s
}

func (s *CreateImportMigrationAdvanceRequest) SetProjectId(v int64) *CreateImportMigrationAdvanceRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateImportMigrationAdvanceRequest) SetResourceGroupMap(v string) *CreateImportMigrationAdvanceRequest {
	s.ResourceGroupMap = &v
	return s
}

func (s *CreateImportMigrationAdvanceRequest) SetWorkspaceMap(v string) *CreateImportMigrationAdvanceRequest {
	s.WorkspaceMap = &v
	return s
}

type CreateImportMigrationResponseBody struct {
	Data           *int64  `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateImportMigrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateImportMigrationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateImportMigrationResponseBody) SetData(v int64) *CreateImportMigrationResponseBody {
	s.Data = &v
	return s
}

func (s *CreateImportMigrationResponseBody) SetErrorCode(v string) *CreateImportMigrationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateImportMigrationResponseBody) SetErrorMessage(v string) *CreateImportMigrationResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateImportMigrationResponseBody) SetHttpStatusCode(v int32) *CreateImportMigrationResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateImportMigrationResponseBody) SetRequestId(v string) *CreateImportMigrationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateImportMigrationResponseBody) SetSuccess(v bool) *CreateImportMigrationResponseBody {
	s.Success = &v
	return s
}

type CreateImportMigrationResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateImportMigrationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateImportMigrationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateImportMigrationResponse) GoString() string {
	return s.String()
}

func (s *CreateImportMigrationResponse) SetHeaders(v map[string]*string) *CreateImportMigrationResponse {
	s.Headers = v
	return s
}

func (s *CreateImportMigrationResponse) SetBody(v *CreateImportMigrationResponseBody) *CreateImportMigrationResponse {
	s.Body = v
	return s
}

type CreateManualDagRequest struct {
	BizDate        *string `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	DagParameters  *string `json:"DagParameters,omitempty" xml:"DagParameters,omitempty"`
	ExcludeNodeIds *string `json:"ExcludeNodeIds,omitempty" xml:"ExcludeNodeIds,omitempty"`
	FlowName       *string `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	IncludeNodeIds *string `json:"IncludeNodeIds,omitempty" xml:"IncludeNodeIds,omitempty"`
	NodeParameters *string `json:"NodeParameters,omitempty" xml:"NodeParameters,omitempty"`
	ProjectEnv     *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	ProjectName    *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
}

func (s CreateManualDagRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateManualDagRequest) GoString() string {
	return s.String()
}

func (s *CreateManualDagRequest) SetBizDate(v string) *CreateManualDagRequest {
	s.BizDate = &v
	return s
}

func (s *CreateManualDagRequest) SetDagParameters(v string) *CreateManualDagRequest {
	s.DagParameters = &v
	return s
}

func (s *CreateManualDagRequest) SetExcludeNodeIds(v string) *CreateManualDagRequest {
	s.ExcludeNodeIds = &v
	return s
}

func (s *CreateManualDagRequest) SetFlowName(v string) *CreateManualDagRequest {
	s.FlowName = &v
	return s
}

func (s *CreateManualDagRequest) SetIncludeNodeIds(v string) *CreateManualDagRequest {
	s.IncludeNodeIds = &v
	return s
}

func (s *CreateManualDagRequest) SetNodeParameters(v string) *CreateManualDagRequest {
	s.NodeParameters = &v
	return s
}

func (s *CreateManualDagRequest) SetProjectEnv(v string) *CreateManualDagRequest {
	s.ProjectEnv = &v
	return s
}

func (s *CreateManualDagRequest) SetProjectName(v string) *CreateManualDagRequest {
	s.ProjectName = &v
	return s
}

type CreateManualDagResponseBody struct {
	DagId     *int64  `json:"DagId,omitempty" xml:"DagId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateManualDagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateManualDagResponseBody) GoString() string {
	return s.String()
}

func (s *CreateManualDagResponseBody) SetDagId(v int64) *CreateManualDagResponseBody {
	s.DagId = &v
	return s
}

func (s *CreateManualDagResponseBody) SetRequestId(v string) *CreateManualDagResponseBody {
	s.RequestId = &v
	return s
}

type CreateManualDagResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateManualDagResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateManualDagResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateManualDagResponse) GoString() string {
	return s.String()
}

func (s *CreateManualDagResponse) SetHeaders(v map[string]*string) *CreateManualDagResponse {
	s.Headers = v
	return s
}

func (s *CreateManualDagResponse) SetBody(v *CreateManualDagResponseBody) *CreateManualDagResponse {
	s.Body = v
	return s
}

type CreateMetaCategoryRequest struct {
	Comment  *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ParentId *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s CreateMetaCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaCategoryRequest) GoString() string {
	return s.String()
}

func (s *CreateMetaCategoryRequest) SetComment(v string) *CreateMetaCategoryRequest {
	s.Comment = &v
	return s
}

func (s *CreateMetaCategoryRequest) SetName(v string) *CreateMetaCategoryRequest {
	s.Name = &v
	return s
}

func (s *CreateMetaCategoryRequest) SetParentId(v int64) *CreateMetaCategoryRequest {
	s.ParentId = &v
	return s
}

type CreateMetaCategoryResponseBody struct {
	Data           *CreateMetaCategoryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                             `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMetaCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMetaCategoryResponseBody) SetData(v *CreateMetaCategoryResponseBodyData) *CreateMetaCategoryResponseBody {
	s.Data = v
	return s
}

func (s *CreateMetaCategoryResponseBody) SetErrorCode(v string) *CreateMetaCategoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateMetaCategoryResponseBody) SetErrorMessage(v string) *CreateMetaCategoryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateMetaCategoryResponseBody) SetHttpStatusCode(v int32) *CreateMetaCategoryResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateMetaCategoryResponseBody) SetRequestId(v string) *CreateMetaCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMetaCategoryResponseBody) SetSuccess(v bool) *CreateMetaCategoryResponseBody {
	s.Success = &v
	return s
}

type CreateMetaCategoryResponseBodyData struct {
	CategoryId *int64 `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
}

func (s CreateMetaCategoryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaCategoryResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateMetaCategoryResponseBodyData) SetCategoryId(v int64) *CreateMetaCategoryResponseBodyData {
	s.CategoryId = &v
	return s
}

type CreateMetaCategoryResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateMetaCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMetaCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaCategoryResponse) GoString() string {
	return s.String()
}

func (s *CreateMetaCategoryResponse) SetHeaders(v map[string]*string) *CreateMetaCategoryResponse {
	s.Headers = v
	return s
}

func (s *CreateMetaCategoryResponse) SetBody(v *CreateMetaCategoryResponseBody) *CreateMetaCategoryResponse {
	s.Body = v
	return s
}

type CreatePermissionApplyOrderRequest struct {
	ApplyObject           []*CreatePermissionApplyOrderRequestApplyObject `json:"ApplyObject,omitempty" xml:"ApplyObject,omitempty" type:"Repeated"`
	ApplyReason           *string                                         `json:"ApplyReason,omitempty" xml:"ApplyReason,omitempty"`
	ApplyUserIds          *string                                         `json:"ApplyUserIds,omitempty" xml:"ApplyUserIds,omitempty"`
	Deadline              *int64                                          `json:"Deadline,omitempty" xml:"Deadline,omitempty"`
	EngineType            *string                                         `json:"EngineType,omitempty" xml:"EngineType,omitempty"`
	MaxComputeProjectName *string                                         `json:"MaxComputeProjectName,omitempty" xml:"MaxComputeProjectName,omitempty"`
	OrderType             *int32                                          `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	WorkspaceId           *int32                                          `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreatePermissionApplyOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePermissionApplyOrderRequest) GoString() string {
	return s.String()
}

func (s *CreatePermissionApplyOrderRequest) SetApplyObject(v []*CreatePermissionApplyOrderRequestApplyObject) *CreatePermissionApplyOrderRequest {
	s.ApplyObject = v
	return s
}

func (s *CreatePermissionApplyOrderRequest) SetApplyReason(v string) *CreatePermissionApplyOrderRequest {
	s.ApplyReason = &v
	return s
}

func (s *CreatePermissionApplyOrderRequest) SetApplyUserIds(v string) *CreatePermissionApplyOrderRequest {
	s.ApplyUserIds = &v
	return s
}

func (s *CreatePermissionApplyOrderRequest) SetDeadline(v int64) *CreatePermissionApplyOrderRequest {
	s.Deadline = &v
	return s
}

func (s *CreatePermissionApplyOrderRequest) SetEngineType(v string) *CreatePermissionApplyOrderRequest {
	s.EngineType = &v
	return s
}

func (s *CreatePermissionApplyOrderRequest) SetMaxComputeProjectName(v string) *CreatePermissionApplyOrderRequest {
	s.MaxComputeProjectName = &v
	return s
}

func (s *CreatePermissionApplyOrderRequest) SetOrderType(v int32) *CreatePermissionApplyOrderRequest {
	s.OrderType = &v
	return s
}

func (s *CreatePermissionApplyOrderRequest) SetWorkspaceId(v int32) *CreatePermissionApplyOrderRequest {
	s.WorkspaceId = &v
	return s
}

type CreatePermissionApplyOrderRequestApplyObject struct {
	Actions        *string                                                       `json:"Actions,omitempty" xml:"Actions,omitempty"`
	ColumnMetaList []*CreatePermissionApplyOrderRequestApplyObjectColumnMetaList `json:"ColumnMetaList,omitempty" xml:"ColumnMetaList,omitempty" type:"Repeated"`
	Name           *string                                                       `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreatePermissionApplyOrderRequestApplyObject) String() string {
	return tea.Prettify(s)
}

func (s CreatePermissionApplyOrderRequestApplyObject) GoString() string {
	return s.String()
}

func (s *CreatePermissionApplyOrderRequestApplyObject) SetActions(v string) *CreatePermissionApplyOrderRequestApplyObject {
	s.Actions = &v
	return s
}

func (s *CreatePermissionApplyOrderRequestApplyObject) SetColumnMetaList(v []*CreatePermissionApplyOrderRequestApplyObjectColumnMetaList) *CreatePermissionApplyOrderRequestApplyObject {
	s.ColumnMetaList = v
	return s
}

func (s *CreatePermissionApplyOrderRequestApplyObject) SetName(v string) *CreatePermissionApplyOrderRequestApplyObject {
	s.Name = &v
	return s
}

type CreatePermissionApplyOrderRequestApplyObjectColumnMetaList struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreatePermissionApplyOrderRequestApplyObjectColumnMetaList) String() string {
	return tea.Prettify(s)
}

func (s CreatePermissionApplyOrderRequestApplyObjectColumnMetaList) GoString() string {
	return s.String()
}

func (s *CreatePermissionApplyOrderRequestApplyObjectColumnMetaList) SetName(v string) *CreatePermissionApplyOrderRequestApplyObjectColumnMetaList {
	s.Name = &v
	return s
}

type CreatePermissionApplyOrderResponseBody struct {
	FlowId    []*string `json:"FlowId,omitempty" xml:"FlowId,omitempty" type:"Repeated"`
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreatePermissionApplyOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePermissionApplyOrderResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePermissionApplyOrderResponseBody) SetFlowId(v []*string) *CreatePermissionApplyOrderResponseBody {
	s.FlowId = v
	return s
}

func (s *CreatePermissionApplyOrderResponseBody) SetRequestId(v string) *CreatePermissionApplyOrderResponseBody {
	s.RequestId = &v
	return s
}

type CreatePermissionApplyOrderResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreatePermissionApplyOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreatePermissionApplyOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePermissionApplyOrderResponse) GoString() string {
	return s.String()
}

func (s *CreatePermissionApplyOrderResponse) SetHeaders(v map[string]*string) *CreatePermissionApplyOrderResponse {
	s.Headers = v
	return s
}

func (s *CreatePermissionApplyOrderResponse) SetBody(v *CreatePermissionApplyOrderResponseBody) *CreatePermissionApplyOrderResponse {
	s.Body = v
	return s
}

type CreateProjectMemberRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RoleCode    *string `json:"RoleCode,omitempty" xml:"RoleCode,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CreateProjectMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectMemberRequest) GoString() string {
	return s.String()
}

func (s *CreateProjectMemberRequest) SetClientToken(v string) *CreateProjectMemberRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateProjectMemberRequest) SetProjectId(v int64) *CreateProjectMemberRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateProjectMemberRequest) SetRoleCode(v string) *CreateProjectMemberRequest {
	s.RoleCode = &v
	return s
}

func (s *CreateProjectMemberRequest) SetUserId(v string) *CreateProjectMemberRequest {
	s.UserId = &v
	return s
}

type CreateProjectMemberResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateProjectMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectMemberResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProjectMemberResponseBody) SetRequestId(v string) *CreateProjectMemberResponseBody {
	s.RequestId = &v
	return s
}

type CreateProjectMemberResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateProjectMemberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateProjectMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectMemberResponse) GoString() string {
	return s.String()
}

func (s *CreateProjectMemberResponse) SetHeaders(v map[string]*string) *CreateProjectMemberResponse {
	s.Headers = v
	return s
}

func (s *CreateProjectMemberResponse) SetBody(v *CreateProjectMemberResponseBody) *CreateProjectMemberResponse {
	s.Body = v
	return s
}

type CreateQualityEntityRequest struct {
	EntityLevel     *int32  `json:"EntityLevel,omitempty" xml:"EntityLevel,omitempty"`
	EnvType         *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	MatchExpression *string `json:"MatchExpression,omitempty" xml:"MatchExpression,omitempty"`
	ProjectName     *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	TableName       *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s CreateQualityEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateQualityEntityRequest) GoString() string {
	return s.String()
}

func (s *CreateQualityEntityRequest) SetEntityLevel(v int32) *CreateQualityEntityRequest {
	s.EntityLevel = &v
	return s
}

func (s *CreateQualityEntityRequest) SetEnvType(v string) *CreateQualityEntityRequest {
	s.EnvType = &v
	return s
}

func (s *CreateQualityEntityRequest) SetMatchExpression(v string) *CreateQualityEntityRequest {
	s.MatchExpression = &v
	return s
}

func (s *CreateQualityEntityRequest) SetProjectName(v string) *CreateQualityEntityRequest {
	s.ProjectName = &v
	return s
}

func (s *CreateQualityEntityRequest) SetTableName(v string) *CreateQualityEntityRequest {
	s.TableName = &v
	return s
}

type CreateQualityEntityResponseBody struct {
	Data           *int32  `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateQualityEntityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateQualityEntityResponseBody) GoString() string {
	return s.String()
}

func (s *CreateQualityEntityResponseBody) SetData(v int32) *CreateQualityEntityResponseBody {
	s.Data = &v
	return s
}

func (s *CreateQualityEntityResponseBody) SetErrorCode(v string) *CreateQualityEntityResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateQualityEntityResponseBody) SetErrorMessage(v string) *CreateQualityEntityResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateQualityEntityResponseBody) SetHttpStatusCode(v int32) *CreateQualityEntityResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateQualityEntityResponseBody) SetRequestId(v string) *CreateQualityEntityResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateQualityEntityResponseBody) SetSuccess(v bool) *CreateQualityEntityResponseBody {
	s.Success = &v
	return s
}

type CreateQualityEntityResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateQualityEntityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateQualityEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateQualityEntityResponse) GoString() string {
	return s.String()
}

func (s *CreateQualityEntityResponse) SetHeaders(v map[string]*string) *CreateQualityEntityResponse {
	s.Headers = v
	return s
}

func (s *CreateQualityEntityResponse) SetBody(v *CreateQualityEntityResponseBody) *CreateQualityEntityResponse {
	s.Body = v
	return s
}

type CreateQualityFollowerRequest struct {
	AlarmMode   *int32  `json:"AlarmMode,omitempty" xml:"AlarmMode,omitempty"`
	EntityId    *int64  `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	Follower    *string `json:"Follower,omitempty" xml:"Follower,omitempty"`
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
}

func (s CreateQualityFollowerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateQualityFollowerRequest) GoString() string {
	return s.String()
}

func (s *CreateQualityFollowerRequest) SetAlarmMode(v int32) *CreateQualityFollowerRequest {
	s.AlarmMode = &v
	return s
}

func (s *CreateQualityFollowerRequest) SetEntityId(v int64) *CreateQualityFollowerRequest {
	s.EntityId = &v
	return s
}

func (s *CreateQualityFollowerRequest) SetFollower(v string) *CreateQualityFollowerRequest {
	s.Follower = &v
	return s
}

func (s *CreateQualityFollowerRequest) SetProjectName(v string) *CreateQualityFollowerRequest {
	s.ProjectName = &v
	return s
}

type CreateQualityFollowerResponseBody struct {
	Data           *int32  `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateQualityFollowerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateQualityFollowerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateQualityFollowerResponseBody) SetData(v int32) *CreateQualityFollowerResponseBody {
	s.Data = &v
	return s
}

func (s *CreateQualityFollowerResponseBody) SetErrorCode(v string) *CreateQualityFollowerResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateQualityFollowerResponseBody) SetErrorMessage(v string) *CreateQualityFollowerResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateQualityFollowerResponseBody) SetHttpStatusCode(v int32) *CreateQualityFollowerResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateQualityFollowerResponseBody) SetRequestId(v string) *CreateQualityFollowerResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateQualityFollowerResponseBody) SetSuccess(v bool) *CreateQualityFollowerResponseBody {
	s.Success = &v
	return s
}

type CreateQualityFollowerResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateQualityFollowerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateQualityFollowerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateQualityFollowerResponse) GoString() string {
	return s.String()
}

func (s *CreateQualityFollowerResponse) SetHeaders(v map[string]*string) *CreateQualityFollowerResponse {
	s.Headers = v
	return s
}

func (s *CreateQualityFollowerResponse) SetBody(v *CreateQualityFollowerResponseBody) *CreateQualityFollowerResponse {
	s.Body = v
	return s
}

type CreateQualityRelativeNodeRequest struct {
	EnvType               *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	MatchExpression       *string `json:"MatchExpression,omitempty" xml:"MatchExpression,omitempty"`
	NodeId                *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	ProjectId             *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName           *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	TableName             *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	TargetNodeProjectId   *int64  `json:"TargetNodeProjectId,omitempty" xml:"TargetNodeProjectId,omitempty"`
	TargetNodeProjectName *string `json:"TargetNodeProjectName,omitempty" xml:"TargetNodeProjectName,omitempty"`
}

func (s CreateQualityRelativeNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateQualityRelativeNodeRequest) GoString() string {
	return s.String()
}

func (s *CreateQualityRelativeNodeRequest) SetEnvType(v string) *CreateQualityRelativeNodeRequest {
	s.EnvType = &v
	return s
}

func (s *CreateQualityRelativeNodeRequest) SetMatchExpression(v string) *CreateQualityRelativeNodeRequest {
	s.MatchExpression = &v
	return s
}

func (s *CreateQualityRelativeNodeRequest) SetNodeId(v int64) *CreateQualityRelativeNodeRequest {
	s.NodeId = &v
	return s
}

func (s *CreateQualityRelativeNodeRequest) SetProjectId(v int64) *CreateQualityRelativeNodeRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateQualityRelativeNodeRequest) SetProjectName(v string) *CreateQualityRelativeNodeRequest {
	s.ProjectName = &v
	return s
}

func (s *CreateQualityRelativeNodeRequest) SetTableName(v string) *CreateQualityRelativeNodeRequest {
	s.TableName = &v
	return s
}

func (s *CreateQualityRelativeNodeRequest) SetTargetNodeProjectId(v int64) *CreateQualityRelativeNodeRequest {
	s.TargetNodeProjectId = &v
	return s
}

func (s *CreateQualityRelativeNodeRequest) SetTargetNodeProjectName(v string) *CreateQualityRelativeNodeRequest {
	s.TargetNodeProjectName = &v
	return s
}

type CreateQualityRelativeNodeResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateQualityRelativeNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateQualityRelativeNodeResponseBody) GoString() string {
	return s.String()
}

func (s *CreateQualityRelativeNodeResponseBody) SetData(v bool) *CreateQualityRelativeNodeResponseBody {
	s.Data = &v
	return s
}

func (s *CreateQualityRelativeNodeResponseBody) SetErrorCode(v string) *CreateQualityRelativeNodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateQualityRelativeNodeResponseBody) SetErrorMessage(v string) *CreateQualityRelativeNodeResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateQualityRelativeNodeResponseBody) SetHttpStatusCode(v int32) *CreateQualityRelativeNodeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateQualityRelativeNodeResponseBody) SetRequestId(v string) *CreateQualityRelativeNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateQualityRelativeNodeResponseBody) SetSuccess(v bool) *CreateQualityRelativeNodeResponseBody {
	s.Success = &v
	return s
}

type CreateQualityRelativeNodeResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateQualityRelativeNodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateQualityRelativeNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateQualityRelativeNodeResponse) GoString() string {
	return s.String()
}

func (s *CreateQualityRelativeNodeResponse) SetHeaders(v map[string]*string) *CreateQualityRelativeNodeResponse {
	s.Headers = v
	return s
}

func (s *CreateQualityRelativeNodeResponse) SetBody(v *CreateQualityRelativeNodeResponseBody) *CreateQualityRelativeNodeResponse {
	s.Body = v
	return s
}

type CreateQualityRuleRequest struct {
	BlockType         *int32  `json:"BlockType,omitempty" xml:"BlockType,omitempty"`
	Checker           *int32  `json:"Checker,omitempty" xml:"Checker,omitempty"`
	Comment           *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CriticalThreshold *string `json:"CriticalThreshold,omitempty" xml:"CriticalThreshold,omitempty"`
	EntityId          *int64  `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	ExpectValue       *string `json:"ExpectValue,omitempty" xml:"ExpectValue,omitempty"`
	MethodName        *string `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	Operator          *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	PredictType       *int32  `json:"PredictType,omitempty" xml:"PredictType,omitempty"`
	ProjectName       *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	Property          *string `json:"Property,omitempty" xml:"Property,omitempty"`
	PropertyType      *string `json:"PropertyType,omitempty" xml:"PropertyType,omitempty"`
	RuleName          *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleType          *int32  `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	TemplateId        *int32  `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Trend             *string `json:"Trend,omitempty" xml:"Trend,omitempty"`
	WarningThreshold  *string `json:"WarningThreshold,omitempty" xml:"WarningThreshold,omitempty"`
	WhereCondition    *string `json:"WhereCondition,omitempty" xml:"WhereCondition,omitempty"`
}

func (s CreateQualityRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateQualityRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateQualityRuleRequest) SetBlockType(v int32) *CreateQualityRuleRequest {
	s.BlockType = &v
	return s
}

func (s *CreateQualityRuleRequest) SetChecker(v int32) *CreateQualityRuleRequest {
	s.Checker = &v
	return s
}

func (s *CreateQualityRuleRequest) SetComment(v string) *CreateQualityRuleRequest {
	s.Comment = &v
	return s
}

func (s *CreateQualityRuleRequest) SetCriticalThreshold(v string) *CreateQualityRuleRequest {
	s.CriticalThreshold = &v
	return s
}

func (s *CreateQualityRuleRequest) SetEntityId(v int64) *CreateQualityRuleRequest {
	s.EntityId = &v
	return s
}

func (s *CreateQualityRuleRequest) SetExpectValue(v string) *CreateQualityRuleRequest {
	s.ExpectValue = &v
	return s
}

func (s *CreateQualityRuleRequest) SetMethodName(v string) *CreateQualityRuleRequest {
	s.MethodName = &v
	return s
}

func (s *CreateQualityRuleRequest) SetOperator(v string) *CreateQualityRuleRequest {
	s.Operator = &v
	return s
}

func (s *CreateQualityRuleRequest) SetPredictType(v int32) *CreateQualityRuleRequest {
	s.PredictType = &v
	return s
}

func (s *CreateQualityRuleRequest) SetProjectName(v string) *CreateQualityRuleRequest {
	s.ProjectName = &v
	return s
}

func (s *CreateQualityRuleRequest) SetProperty(v string) *CreateQualityRuleRequest {
	s.Property = &v
	return s
}

func (s *CreateQualityRuleRequest) SetPropertyType(v string) *CreateQualityRuleRequest {
	s.PropertyType = &v
	return s
}

func (s *CreateQualityRuleRequest) SetRuleName(v string) *CreateQualityRuleRequest {
	s.RuleName = &v
	return s
}

func (s *CreateQualityRuleRequest) SetRuleType(v int32) *CreateQualityRuleRequest {
	s.RuleType = &v
	return s
}

func (s *CreateQualityRuleRequest) SetTemplateId(v int32) *CreateQualityRuleRequest {
	s.TemplateId = &v
	return s
}

func (s *CreateQualityRuleRequest) SetTrend(v string) *CreateQualityRuleRequest {
	s.Trend = &v
	return s
}

func (s *CreateQualityRuleRequest) SetWarningThreshold(v string) *CreateQualityRuleRequest {
	s.WarningThreshold = &v
	return s
}

func (s *CreateQualityRuleRequest) SetWhereCondition(v string) *CreateQualityRuleRequest {
	s.WhereCondition = &v
	return s
}

type CreateQualityRuleResponseBody struct {
	Data           *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateQualityRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateQualityRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateQualityRuleResponseBody) SetData(v string) *CreateQualityRuleResponseBody {
	s.Data = &v
	return s
}

func (s *CreateQualityRuleResponseBody) SetErrorCode(v string) *CreateQualityRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateQualityRuleResponseBody) SetErrorMessage(v string) *CreateQualityRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateQualityRuleResponseBody) SetHttpStatusCode(v int32) *CreateQualityRuleResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateQualityRuleResponseBody) SetRequestId(v string) *CreateQualityRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateQualityRuleResponseBody) SetSuccess(v bool) *CreateQualityRuleResponseBody {
	s.Success = &v
	return s
}

type CreateQualityRuleResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateQualityRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateQualityRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateQualityRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateQualityRuleResponse) SetHeaders(v map[string]*string) *CreateQualityRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateQualityRuleResponse) SetBody(v *CreateQualityRuleResponseBody) *CreateQualityRuleResponse {
	s.Body = v
	return s
}

type CreateRemindRequest struct {
	AlertInterval *int32  `json:"AlertInterval,omitempty" xml:"AlertInterval,omitempty"`
	AlertMethods  *string `json:"AlertMethods,omitempty" xml:"AlertMethods,omitempty"`
	AlertTargets  *string `json:"AlertTargets,omitempty" xml:"AlertTargets,omitempty"`
	AlertUnit     *string `json:"AlertUnit,omitempty" xml:"AlertUnit,omitempty"`
	BaselineIds   *string `json:"BaselineIds,omitempty" xml:"BaselineIds,omitempty"`
	BizProcessIds *string `json:"BizProcessIds,omitempty" xml:"BizProcessIds,omitempty"`
	Detail        *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
	DndEnd        *string `json:"DndEnd,omitempty" xml:"DndEnd,omitempty"`
	MaxAlertTimes *int32  `json:"MaxAlertTimes,omitempty" xml:"MaxAlertTimes,omitempty"`
	NodeIds       *string `json:"NodeIds,omitempty" xml:"NodeIds,omitempty"`
	ProjectId     *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RemindName    *string `json:"RemindName,omitempty" xml:"RemindName,omitempty"`
	RemindType    *string `json:"RemindType,omitempty" xml:"RemindType,omitempty"`
	RemindUnit    *string `json:"RemindUnit,omitempty" xml:"RemindUnit,omitempty"`
	RobotUrls     *string `json:"RobotUrls,omitempty" xml:"RobotUrls,omitempty"`
}

func (s CreateRemindRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRemindRequest) GoString() string {
	return s.String()
}

func (s *CreateRemindRequest) SetAlertInterval(v int32) *CreateRemindRequest {
	s.AlertInterval = &v
	return s
}

func (s *CreateRemindRequest) SetAlertMethods(v string) *CreateRemindRequest {
	s.AlertMethods = &v
	return s
}

func (s *CreateRemindRequest) SetAlertTargets(v string) *CreateRemindRequest {
	s.AlertTargets = &v
	return s
}

func (s *CreateRemindRequest) SetAlertUnit(v string) *CreateRemindRequest {
	s.AlertUnit = &v
	return s
}

func (s *CreateRemindRequest) SetBaselineIds(v string) *CreateRemindRequest {
	s.BaselineIds = &v
	return s
}

func (s *CreateRemindRequest) SetBizProcessIds(v string) *CreateRemindRequest {
	s.BizProcessIds = &v
	return s
}

func (s *CreateRemindRequest) SetDetail(v string) *CreateRemindRequest {
	s.Detail = &v
	return s
}

func (s *CreateRemindRequest) SetDndEnd(v string) *CreateRemindRequest {
	s.DndEnd = &v
	return s
}

func (s *CreateRemindRequest) SetMaxAlertTimes(v int32) *CreateRemindRequest {
	s.MaxAlertTimes = &v
	return s
}

func (s *CreateRemindRequest) SetNodeIds(v string) *CreateRemindRequest {
	s.NodeIds = &v
	return s
}

func (s *CreateRemindRequest) SetProjectId(v int64) *CreateRemindRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateRemindRequest) SetRemindName(v string) *CreateRemindRequest {
	s.RemindName = &v
	return s
}

func (s *CreateRemindRequest) SetRemindType(v string) *CreateRemindRequest {
	s.RemindType = &v
	return s
}

func (s *CreateRemindRequest) SetRemindUnit(v string) *CreateRemindRequest {
	s.RemindUnit = &v
	return s
}

func (s *CreateRemindRequest) SetRobotUrls(v string) *CreateRemindRequest {
	s.RobotUrls = &v
	return s
}

type CreateRemindResponseBody struct {
	Data           *int64  `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateRemindResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRemindResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRemindResponseBody) SetData(v int64) *CreateRemindResponseBody {
	s.Data = &v
	return s
}

func (s *CreateRemindResponseBody) SetErrorCode(v string) *CreateRemindResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateRemindResponseBody) SetErrorMessage(v string) *CreateRemindResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateRemindResponseBody) SetHttpStatusCode(v int32) *CreateRemindResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateRemindResponseBody) SetRequestId(v string) *CreateRemindResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRemindResponseBody) SetSuccess(v bool) *CreateRemindResponseBody {
	s.Success = &v
	return s
}

type CreateRemindResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateRemindResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateRemindResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRemindResponse) GoString() string {
	return s.String()
}

func (s *CreateRemindResponse) SetHeaders(v map[string]*string) *CreateRemindResponse {
	s.Headers = v
	return s
}

func (s *CreateRemindResponse) SetBody(v *CreateRemindResponseBody) *CreateRemindResponse {
	s.Body = v
	return s
}

type CreateTableRequest struct {
	AppGuid           *string                      `json:"AppGuid,omitempty" xml:"AppGuid,omitempty"`
	CategoryId        *int64                       `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	ClientToken       *string                      `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Columns           []*CreateTableRequestColumns `json:"Columns,omitempty" xml:"Columns,omitempty" type:"Repeated"`
	Comment           *string                      `json:"Comment,omitempty" xml:"Comment,omitempty"`
	Endpoint          *string                      `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	EnvType           *int32                       `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	ExternalTableType *string                      `json:"ExternalTableType,omitempty" xml:"ExternalTableType,omitempty"`
	HasPart           *int32                       `json:"HasPart,omitempty" xml:"HasPart,omitempty"`
	IsView            *int32                       `json:"IsView,omitempty" xml:"IsView,omitempty"`
	LifeCycle         *int32                       `json:"LifeCycle,omitempty" xml:"LifeCycle,omitempty"`
	Location          *string                      `json:"Location,omitempty" xml:"Location,omitempty"`
	LogicalLevelId    *int64                       `json:"LogicalLevelId,omitempty" xml:"LogicalLevelId,omitempty"`
	OwnerId           *string                      `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PhysicsLevelId    *int64                       `json:"PhysicsLevelId,omitempty" xml:"PhysicsLevelId,omitempty"`
	ProjectId         *int64                       `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TableName         *string                      `json:"TableName,omitempty" xml:"TableName,omitempty"`
	Themes            []*CreateTableRequestThemes  `json:"Themes,omitempty" xml:"Themes,omitempty" type:"Repeated"`
	Visibility        *int32                       `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s CreateTableRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTableRequest) GoString() string {
	return s.String()
}

func (s *CreateTableRequest) SetAppGuid(v string) *CreateTableRequest {
	s.AppGuid = &v
	return s
}

func (s *CreateTableRequest) SetCategoryId(v int64) *CreateTableRequest {
	s.CategoryId = &v
	return s
}

func (s *CreateTableRequest) SetClientToken(v string) *CreateTableRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateTableRequest) SetColumns(v []*CreateTableRequestColumns) *CreateTableRequest {
	s.Columns = v
	return s
}

func (s *CreateTableRequest) SetComment(v string) *CreateTableRequest {
	s.Comment = &v
	return s
}

func (s *CreateTableRequest) SetEndpoint(v string) *CreateTableRequest {
	s.Endpoint = &v
	return s
}

func (s *CreateTableRequest) SetEnvType(v int32) *CreateTableRequest {
	s.EnvType = &v
	return s
}

func (s *CreateTableRequest) SetExternalTableType(v string) *CreateTableRequest {
	s.ExternalTableType = &v
	return s
}

func (s *CreateTableRequest) SetHasPart(v int32) *CreateTableRequest {
	s.HasPart = &v
	return s
}

func (s *CreateTableRequest) SetIsView(v int32) *CreateTableRequest {
	s.IsView = &v
	return s
}

func (s *CreateTableRequest) SetLifeCycle(v int32) *CreateTableRequest {
	s.LifeCycle = &v
	return s
}

func (s *CreateTableRequest) SetLocation(v string) *CreateTableRequest {
	s.Location = &v
	return s
}

func (s *CreateTableRequest) SetLogicalLevelId(v int64) *CreateTableRequest {
	s.LogicalLevelId = &v
	return s
}

func (s *CreateTableRequest) SetOwnerId(v string) *CreateTableRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateTableRequest) SetPhysicsLevelId(v int64) *CreateTableRequest {
	s.PhysicsLevelId = &v
	return s
}

func (s *CreateTableRequest) SetProjectId(v int64) *CreateTableRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateTableRequest) SetTableName(v string) *CreateTableRequest {
	s.TableName = &v
	return s
}

func (s *CreateTableRequest) SetThemes(v []*CreateTableRequestThemes) *CreateTableRequest {
	s.Themes = v
	return s
}

func (s *CreateTableRequest) SetVisibility(v int32) *CreateTableRequest {
	s.Visibility = &v
	return s
}

type CreateTableRequestColumns struct {
	ColumnName     *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ColumnNameCn   *string `json:"ColumnNameCn,omitempty" xml:"ColumnNameCn,omitempty"`
	ColumnType     *string `json:"ColumnType,omitempty" xml:"ColumnType,omitempty"`
	Comment        *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	IsPartitionCol *bool   `json:"IsPartitionCol,omitempty" xml:"IsPartitionCol,omitempty"`
	Length         *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	SeqNumber      *int32  `json:"SeqNumber,omitempty" xml:"SeqNumber,omitempty"`
}

func (s CreateTableRequestColumns) String() string {
	return tea.Prettify(s)
}

func (s CreateTableRequestColumns) GoString() string {
	return s.String()
}

func (s *CreateTableRequestColumns) SetColumnName(v string) *CreateTableRequestColumns {
	s.ColumnName = &v
	return s
}

func (s *CreateTableRequestColumns) SetColumnNameCn(v string) *CreateTableRequestColumns {
	s.ColumnNameCn = &v
	return s
}

func (s *CreateTableRequestColumns) SetColumnType(v string) *CreateTableRequestColumns {
	s.ColumnType = &v
	return s
}

func (s *CreateTableRequestColumns) SetComment(v string) *CreateTableRequestColumns {
	s.Comment = &v
	return s
}

func (s *CreateTableRequestColumns) SetIsPartitionCol(v bool) *CreateTableRequestColumns {
	s.IsPartitionCol = &v
	return s
}

func (s *CreateTableRequestColumns) SetLength(v int32) *CreateTableRequestColumns {
	s.Length = &v
	return s
}

func (s *CreateTableRequestColumns) SetSeqNumber(v int32) *CreateTableRequestColumns {
	s.SeqNumber = &v
	return s
}

type CreateTableRequestThemes struct {
	ThemeId    *int64 `json:"ThemeId,omitempty" xml:"ThemeId,omitempty"`
	ThemeLevel *int32 `json:"ThemeLevel,omitempty" xml:"ThemeLevel,omitempty"`
}

func (s CreateTableRequestThemes) String() string {
	return tea.Prettify(s)
}

func (s CreateTableRequestThemes) GoString() string {
	return s.String()
}

func (s *CreateTableRequestThemes) SetThemeId(v int64) *CreateTableRequestThemes {
	s.ThemeId = &v
	return s
}

func (s *CreateTableRequestThemes) SetThemeLevel(v int32) *CreateTableRequestThemes {
	s.ThemeLevel = &v
	return s
}

type CreateTableResponseBody struct {
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskInfo  *CreateTableResponseBodyTaskInfo `json:"TaskInfo,omitempty" xml:"TaskInfo,omitempty" type:"Struct"`
}

func (s CreateTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTableResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTableResponseBody) SetRequestId(v string) *CreateTableResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTableResponseBody) SetTaskInfo(v *CreateTableResponseBodyTaskInfo) *CreateTableResponseBody {
	s.TaskInfo = v
	return s
}

type CreateTableResponseBodyTaskInfo struct {
	Content    *string `json:"Content,omitempty" xml:"Content,omitempty"`
	NextTaskId *string `json:"NextTaskId,omitempty" xml:"NextTaskId,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateTableResponseBodyTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateTableResponseBodyTaskInfo) GoString() string {
	return s.String()
}

func (s *CreateTableResponseBodyTaskInfo) SetContent(v string) *CreateTableResponseBodyTaskInfo {
	s.Content = &v
	return s
}

func (s *CreateTableResponseBodyTaskInfo) SetNextTaskId(v string) *CreateTableResponseBodyTaskInfo {
	s.NextTaskId = &v
	return s
}

func (s *CreateTableResponseBodyTaskInfo) SetStatus(v string) *CreateTableResponseBodyTaskInfo {
	s.Status = &v
	return s
}

func (s *CreateTableResponseBodyTaskInfo) SetTaskId(v string) *CreateTableResponseBodyTaskInfo {
	s.TaskId = &v
	return s
}

type CreateTableResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateTableResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTableResponse) GoString() string {
	return s.String()
}

func (s *CreateTableResponse) SetHeaders(v map[string]*string) *CreateTableResponse {
	s.Headers = v
	return s
}

func (s *CreateTableResponse) SetBody(v *CreateTableResponseBody) *CreateTableResponse {
	s.Body = v
	return s
}

type CreateTableLevelRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	LevelType   *int32  `json:"LevelType,omitempty" xml:"LevelType,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s CreateTableLevelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTableLevelRequest) GoString() string {
	return s.String()
}

func (s *CreateTableLevelRequest) SetDescription(v string) *CreateTableLevelRequest {
	s.Description = &v
	return s
}

func (s *CreateTableLevelRequest) SetLevelType(v int32) *CreateTableLevelRequest {
	s.LevelType = &v
	return s
}

func (s *CreateTableLevelRequest) SetName(v string) *CreateTableLevelRequest {
	s.Name = &v
	return s
}

func (s *CreateTableLevelRequest) SetProjectId(v int64) *CreateTableLevelRequest {
	s.ProjectId = &v
	return s
}

type CreateTableLevelResponseBody struct {
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	LevelId        *int64  `json:"LevelId,omitempty" xml:"LevelId,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateTableLevelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTableLevelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTableLevelResponseBody) SetErrorCode(v string) *CreateTableLevelResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateTableLevelResponseBody) SetErrorMessage(v string) *CreateTableLevelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateTableLevelResponseBody) SetHttpStatusCode(v int32) *CreateTableLevelResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateTableLevelResponseBody) SetLevelId(v int64) *CreateTableLevelResponseBody {
	s.LevelId = &v
	return s
}

func (s *CreateTableLevelResponseBody) SetRequestId(v string) *CreateTableLevelResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTableLevelResponseBody) SetSuccess(v bool) *CreateTableLevelResponseBody {
	s.Success = &v
	return s
}

type CreateTableLevelResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateTableLevelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateTableLevelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTableLevelResponse) GoString() string {
	return s.String()
}

func (s *CreateTableLevelResponse) SetHeaders(v map[string]*string) *CreateTableLevelResponse {
	s.Headers = v
	return s
}

func (s *CreateTableLevelResponse) SetBody(v *CreateTableLevelResponseBody) *CreateTableLevelResponse {
	s.Body = v
	return s
}

type CreateTableThemeRequest struct {
	Level     *int32  `json:"Level,omitempty" xml:"Level,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ParentId  *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s CreateTableThemeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTableThemeRequest) GoString() string {
	return s.String()
}

func (s *CreateTableThemeRequest) SetLevel(v int32) *CreateTableThemeRequest {
	s.Level = &v
	return s
}

func (s *CreateTableThemeRequest) SetName(v string) *CreateTableThemeRequest {
	s.Name = &v
	return s
}

func (s *CreateTableThemeRequest) SetParentId(v int64) *CreateTableThemeRequest {
	s.ParentId = &v
	return s
}

func (s *CreateTableThemeRequest) SetProjectId(v int64) *CreateTableThemeRequest {
	s.ProjectId = &v
	return s
}

type CreateTableThemeResponseBody struct {
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ThemeId        *int64  `json:"ThemeId,omitempty" xml:"ThemeId,omitempty"`
}

func (s CreateTableThemeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTableThemeResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTableThemeResponseBody) SetErrorCode(v string) *CreateTableThemeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateTableThemeResponseBody) SetErrorMessage(v string) *CreateTableThemeResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateTableThemeResponseBody) SetHttpStatusCode(v int32) *CreateTableThemeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateTableThemeResponseBody) SetRequestId(v string) *CreateTableThemeResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTableThemeResponseBody) SetSuccess(v bool) *CreateTableThemeResponseBody {
	s.Success = &v
	return s
}

func (s *CreateTableThemeResponseBody) SetThemeId(v int64) *CreateTableThemeResponseBody {
	s.ThemeId = &v
	return s
}

type CreateTableThemeResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateTableThemeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateTableThemeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTableThemeResponse) GoString() string {
	return s.String()
}

func (s *CreateTableThemeResponse) SetHeaders(v map[string]*string) *CreateTableThemeResponse {
	s.Headers = v
	return s
}

func (s *CreateTableThemeResponse) SetBody(v *CreateTableThemeResponseBody) *CreateTableThemeResponse {
	s.Body = v
	return s
}

type CreateUdfFileRequest struct {
	ClassName            *string `json:"ClassName,omitempty" xml:"ClassName,omitempty"`
	CmdDescription       *string `json:"CmdDescription,omitempty" xml:"CmdDescription,omitempty"`
	Example              *string `json:"Example,omitempty" xml:"Example,omitempty"`
	FileFolderPath       *string `json:"FileFolderPath,omitempty" xml:"FileFolderPath,omitempty"`
	FileName             *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FunctionType         *string `json:"FunctionType,omitempty" xml:"FunctionType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ProjectId            *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier    *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	Resources            *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	ReturnValue          *string `json:"ReturnValue,omitempty" xml:"ReturnValue,omitempty"`
	UdfDescription       *string `json:"UdfDescription,omitempty" xml:"UdfDescription,omitempty"`
}

func (s CreateUdfFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUdfFileRequest) GoString() string {
	return s.String()
}

func (s *CreateUdfFileRequest) SetClassName(v string) *CreateUdfFileRequest {
	s.ClassName = &v
	return s
}

func (s *CreateUdfFileRequest) SetCmdDescription(v string) *CreateUdfFileRequest {
	s.CmdDescription = &v
	return s
}

func (s *CreateUdfFileRequest) SetExample(v string) *CreateUdfFileRequest {
	s.Example = &v
	return s
}

func (s *CreateUdfFileRequest) SetFileFolderPath(v string) *CreateUdfFileRequest {
	s.FileFolderPath = &v
	return s
}

func (s *CreateUdfFileRequest) SetFileName(v string) *CreateUdfFileRequest {
	s.FileName = &v
	return s
}

func (s *CreateUdfFileRequest) SetFunctionType(v string) *CreateUdfFileRequest {
	s.FunctionType = &v
	return s
}

func (s *CreateUdfFileRequest) SetParameterDescription(v string) *CreateUdfFileRequest {
	s.ParameterDescription = &v
	return s
}

func (s *CreateUdfFileRequest) SetProjectId(v int64) *CreateUdfFileRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateUdfFileRequest) SetProjectIdentifier(v string) *CreateUdfFileRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *CreateUdfFileRequest) SetResources(v string) *CreateUdfFileRequest {
	s.Resources = &v
	return s
}

func (s *CreateUdfFileRequest) SetReturnValue(v string) *CreateUdfFileRequest {
	s.ReturnValue = &v
	return s
}

func (s *CreateUdfFileRequest) SetUdfDescription(v string) *CreateUdfFileRequest {
	s.UdfDescription = &v
	return s
}

type CreateUdfFileResponseBody struct {
	Data           *int64  `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateUdfFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUdfFileResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUdfFileResponseBody) SetData(v int64) *CreateUdfFileResponseBody {
	s.Data = &v
	return s
}

func (s *CreateUdfFileResponseBody) SetErrorCode(v string) *CreateUdfFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateUdfFileResponseBody) SetErrorMessage(v string) *CreateUdfFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateUdfFileResponseBody) SetHttpStatusCode(v int32) *CreateUdfFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateUdfFileResponseBody) SetRequestId(v string) *CreateUdfFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateUdfFileResponseBody) SetSuccess(v bool) *CreateUdfFileResponseBody {
	s.Success = &v
	return s
}

type CreateUdfFileResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateUdfFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateUdfFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUdfFileResponse) GoString() string {
	return s.String()
}

func (s *CreateUdfFileResponse) SetHeaders(v map[string]*string) *CreateUdfFileResponse {
	s.Headers = v
	return s
}

func (s *CreateUdfFileResponse) SetBody(v *CreateUdfFileResponseBody) *CreateUdfFileResponse {
	s.Body = v
	return s
}

type DeleteBusinessRequest struct {
	BusinessId        *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s DeleteBusinessRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBusinessRequest) GoString() string {
	return s.String()
}

func (s *DeleteBusinessRequest) SetBusinessId(v int64) *DeleteBusinessRequest {
	s.BusinessId = &v
	return s
}

func (s *DeleteBusinessRequest) SetProjectId(v int64) *DeleteBusinessRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteBusinessRequest) SetProjectIdentifier(v string) *DeleteBusinessRequest {
	s.ProjectIdentifier = &v
	return s
}

type DeleteBusinessResponseBody struct {
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteBusinessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBusinessResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBusinessResponseBody) SetErrorCode(v string) *DeleteBusinessResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteBusinessResponseBody) SetErrorMessage(v string) *DeleteBusinessResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteBusinessResponseBody) SetHttpStatusCode(v int32) *DeleteBusinessResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteBusinessResponseBody) SetRequestId(v string) *DeleteBusinessResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteBusinessResponseBody) SetSuccess(v bool) *DeleteBusinessResponseBody {
	s.Success = &v
	return s
}

type DeleteBusinessResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteBusinessResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteBusinessResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBusinessResponse) GoString() string {
	return s.String()
}

func (s *DeleteBusinessResponse) SetHeaders(v map[string]*string) *DeleteBusinessResponse {
	s.Headers = v
	return s
}

func (s *DeleteBusinessResponse) SetBody(v *DeleteBusinessResponseBody) *DeleteBusinessResponse {
	s.Body = v
	return s
}

type DeleteConnectionRequest struct {
	ConnectionId *int64 `json:"ConnectionId,omitempty" xml:"ConnectionId,omitempty"`
}

func (s DeleteConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConnectionRequest) GoString() string {
	return s.String()
}

func (s *DeleteConnectionRequest) SetConnectionId(v int64) *DeleteConnectionRequest {
	s.ConnectionId = &v
	return s
}

type DeleteConnectionResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteConnectionResponseBody) SetData(v bool) *DeleteConnectionResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteConnectionResponseBody) SetHttpStatusCode(v string) *DeleteConnectionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteConnectionResponseBody) SetRequestId(v string) *DeleteConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteConnectionResponseBody) SetSuccess(v bool) *DeleteConnectionResponseBody {
	s.Success = &v
	return s
}

type DeleteConnectionResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConnectionResponse) GoString() string {
	return s.String()
}

func (s *DeleteConnectionResponse) SetHeaders(v map[string]*string) *DeleteConnectionResponse {
	s.Headers = v
	return s
}

func (s *DeleteConnectionResponse) SetBody(v *DeleteConnectionResponseBody) *DeleteConnectionResponse {
	s.Body = v
	return s
}

type DeleteDISyncTaskRequest struct {
	FileId    *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TaskType  *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DeleteDISyncTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDISyncTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteDISyncTaskRequest) SetFileId(v int64) *DeleteDISyncTaskRequest {
	s.FileId = &v
	return s
}

func (s *DeleteDISyncTaskRequest) SetProjectId(v int64) *DeleteDISyncTaskRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteDISyncTaskRequest) SetTaskType(v string) *DeleteDISyncTaskRequest {
	s.TaskType = &v
	return s
}

type DeleteDISyncTaskResponseBody struct {
	Data      *DeleteDISyncTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDISyncTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDISyncTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDISyncTaskResponseBody) SetData(v *DeleteDISyncTaskResponseBodyData) *DeleteDISyncTaskResponseBody {
	s.Data = v
	return s
}

func (s *DeleteDISyncTaskResponseBody) SetRequestId(v string) *DeleteDISyncTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDISyncTaskResponseBody) SetSuccess(v bool) *DeleteDISyncTaskResponseBody {
	s.Success = &v
	return s
}

type DeleteDISyncTaskResponseBodyData struct {
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Status  *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteDISyncTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteDISyncTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteDISyncTaskResponseBodyData) SetMessage(v string) *DeleteDISyncTaskResponseBodyData {
	s.Message = &v
	return s
}

func (s *DeleteDISyncTaskResponseBodyData) SetStatus(v string) *DeleteDISyncTaskResponseBodyData {
	s.Status = &v
	return s
}

type DeleteDISyncTaskResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDISyncTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDISyncTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDISyncTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteDISyncTaskResponse) SetHeaders(v map[string]*string) *DeleteDISyncTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteDISyncTaskResponse) SetBody(v *DeleteDISyncTaskResponseBody) *DeleteDISyncTaskResponse {
	s.Body = v
	return s
}

type DeleteDataServiceApiRequest struct {
	ApiId     *int64 `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId  *int64 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DeleteDataServiceApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataServiceApiRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataServiceApiRequest) SetApiId(v int64) *DeleteDataServiceApiRequest {
	s.ApiId = &v
	return s
}

func (s *DeleteDataServiceApiRequest) SetProjectId(v int64) *DeleteDataServiceApiRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteDataServiceApiRequest) SetTenantId(v int64) *DeleteDataServiceApiRequest {
	s.TenantId = &v
	return s
}

type DeleteDataServiceApiResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDataServiceApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataServiceApiResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataServiceApiResponseBody) SetData(v bool) *DeleteDataServiceApiResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteDataServiceApiResponseBody) SetErrorCode(v string) *DeleteDataServiceApiResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteDataServiceApiResponseBody) SetErrorMessage(v string) *DeleteDataServiceApiResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteDataServiceApiResponseBody) SetHttpStatusCode(v int32) *DeleteDataServiceApiResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteDataServiceApiResponseBody) SetRequestId(v string) *DeleteDataServiceApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDataServiceApiResponseBody) SetSuccess(v bool) *DeleteDataServiceApiResponseBody {
	s.Success = &v
	return s
}

type DeleteDataServiceApiResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDataServiceApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDataServiceApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataServiceApiResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataServiceApiResponse) SetHeaders(v map[string]*string) *DeleteDataServiceApiResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataServiceApiResponse) SetBody(v *DeleteDataServiceApiResponseBody) *DeleteDataServiceApiResponse {
	s.Body = v
	return s
}

type DeleteDataServiceApiAuthorityRequest struct {
	ApiId               *int64 `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	AuthorizedProjectId *int64 `json:"AuthorizedProjectId,omitempty" xml:"AuthorizedProjectId,omitempty"`
	ProjectId           *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId            *int64 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DeleteDataServiceApiAuthorityRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataServiceApiAuthorityRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataServiceApiAuthorityRequest) SetApiId(v int64) *DeleteDataServiceApiAuthorityRequest {
	s.ApiId = &v
	return s
}

func (s *DeleteDataServiceApiAuthorityRequest) SetAuthorizedProjectId(v int64) *DeleteDataServiceApiAuthorityRequest {
	s.AuthorizedProjectId = &v
	return s
}

func (s *DeleteDataServiceApiAuthorityRequest) SetProjectId(v int64) *DeleteDataServiceApiAuthorityRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteDataServiceApiAuthorityRequest) SetTenantId(v int64) *DeleteDataServiceApiAuthorityRequest {
	s.TenantId = &v
	return s
}

type DeleteDataServiceApiAuthorityResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDataServiceApiAuthorityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataServiceApiAuthorityResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataServiceApiAuthorityResponseBody) SetRequestId(v string) *DeleteDataServiceApiAuthorityResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDataServiceApiAuthorityResponseBody) SetSuccess(v bool) *DeleteDataServiceApiAuthorityResponseBody {
	s.Success = &v
	return s
}

type DeleteDataServiceApiAuthorityResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDataServiceApiAuthorityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDataServiceApiAuthorityResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataServiceApiAuthorityResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataServiceApiAuthorityResponse) SetHeaders(v map[string]*string) *DeleteDataServiceApiAuthorityResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataServiceApiAuthorityResponse) SetBody(v *DeleteDataServiceApiAuthorityResponseBody) *DeleteDataServiceApiAuthorityResponse {
	s.Body = v
	return s
}

type DeleteDataSourceRequest struct {
	DataSourceId *int64 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
}

func (s DeleteDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceRequest) SetDataSourceId(v int64) *DeleteDataSourceRequest {
	s.DataSourceId = &v
	return s
}

type DeleteDataSourceResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceResponseBody) SetData(v bool) *DeleteDataSourceResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetHttpStatusCode(v string) *DeleteDataSourceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetRequestId(v string) *DeleteDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetSuccess(v bool) *DeleteDataSourceResponseBody {
	s.Success = &v
	return s
}

type DeleteDataSourceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceResponse) SetHeaders(v map[string]*string) *DeleteDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataSourceResponse) SetBody(v *DeleteDataSourceResponseBody) *DeleteDataSourceResponse {
	s.Body = v
	return s
}

type DeleteFileRequest struct {
	FileId            *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s DeleteFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileRequest) GoString() string {
	return s.String()
}

func (s *DeleteFileRequest) SetFileId(v int64) *DeleteFileRequest {
	s.FileId = &v
	return s
}

func (s *DeleteFileRequest) SetProjectId(v int64) *DeleteFileRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFileRequest) SetProjectIdentifier(v string) *DeleteFileRequest {
	s.ProjectIdentifier = &v
	return s
}

type DeleteFileResponseBody struct {
	DeploymentId   *int64  `json:"DeploymentId,omitempty" xml:"DeploymentId,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFileResponseBody) SetDeploymentId(v int64) *DeleteFileResponseBody {
	s.DeploymentId = &v
	return s
}

func (s *DeleteFileResponseBody) SetErrorCode(v string) *DeleteFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteFileResponseBody) SetErrorMessage(v string) *DeleteFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteFileResponseBody) SetHttpStatusCode(v int32) *DeleteFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteFileResponseBody) SetRequestId(v string) *DeleteFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFileResponseBody) SetSuccess(v bool) *DeleteFileResponseBody {
	s.Success = &v
	return s
}

type DeleteFileResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileResponse) GoString() string {
	return s.String()
}

func (s *DeleteFileResponse) SetHeaders(v map[string]*string) *DeleteFileResponse {
	s.Headers = v
	return s
}

func (s *DeleteFileResponse) SetBody(v *DeleteFileResponseBody) *DeleteFileResponse {
	s.Body = v
	return s
}

type DeleteFolderRequest struct {
	FolderId          *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s DeleteFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFolderRequest) GoString() string {
	return s.String()
}

func (s *DeleteFolderRequest) SetFolderId(v string) *DeleteFolderRequest {
	s.FolderId = &v
	return s
}

func (s *DeleteFolderRequest) SetProjectId(v int64) *DeleteFolderRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFolderRequest) SetProjectIdentifier(v string) *DeleteFolderRequest {
	s.ProjectIdentifier = &v
	return s
}

type DeleteFolderResponseBody struct {
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteFolderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFolderResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFolderResponseBody) SetErrorCode(v string) *DeleteFolderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteFolderResponseBody) SetErrorMessage(v string) *DeleteFolderResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteFolderResponseBody) SetHttpStatusCode(v int32) *DeleteFolderResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteFolderResponseBody) SetRequestId(v string) *DeleteFolderResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFolderResponseBody) SetSuccess(v bool) *DeleteFolderResponseBody {
	s.Success = &v
	return s
}

type DeleteFolderResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteFolderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFolderResponse) GoString() string {
	return s.String()
}

func (s *DeleteFolderResponse) SetHeaders(v map[string]*string) *DeleteFolderResponse {
	s.Headers = v
	return s
}

func (s *DeleteFolderResponse) SetBody(v *DeleteFolderResponseBody) *DeleteFolderResponse {
	s.Body = v
	return s
}

type DeleteFromMetaCategoryRequest struct {
	CategoryId *int64  `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	TableGuid  *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s DeleteFromMetaCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFromMetaCategoryRequest) GoString() string {
	return s.String()
}

func (s *DeleteFromMetaCategoryRequest) SetCategoryId(v int64) *DeleteFromMetaCategoryRequest {
	s.CategoryId = &v
	return s
}

func (s *DeleteFromMetaCategoryRequest) SetTableGuid(v string) *DeleteFromMetaCategoryRequest {
	s.TableGuid = &v
	return s
}

type DeleteFromMetaCategoryResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteFromMetaCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFromMetaCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFromMetaCategoryResponseBody) SetData(v bool) *DeleteFromMetaCategoryResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteFromMetaCategoryResponseBody) SetErrorCode(v string) *DeleteFromMetaCategoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteFromMetaCategoryResponseBody) SetErrorMessage(v string) *DeleteFromMetaCategoryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteFromMetaCategoryResponseBody) SetHttpStatusCode(v int32) *DeleteFromMetaCategoryResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteFromMetaCategoryResponseBody) SetRequestId(v string) *DeleteFromMetaCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFromMetaCategoryResponseBody) SetSuccess(v bool) *DeleteFromMetaCategoryResponseBody {
	s.Success = &v
	return s
}

type DeleteFromMetaCategoryResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteFromMetaCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteFromMetaCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFromMetaCategoryResponse) GoString() string {
	return s.String()
}

func (s *DeleteFromMetaCategoryResponse) SetHeaders(v map[string]*string) *DeleteFromMetaCategoryResponse {
	s.Headers = v
	return s
}

func (s *DeleteFromMetaCategoryResponse) SetBody(v *DeleteFromMetaCategoryResponseBody) *DeleteFromMetaCategoryResponse {
	s.Body = v
	return s
}

type DeleteMetaCategoryRequest struct {
	CategoryId *int64 `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
}

func (s DeleteMetaCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetaCategoryRequest) GoString() string {
	return s.String()
}

func (s *DeleteMetaCategoryRequest) SetCategoryId(v int64) *DeleteMetaCategoryRequest {
	s.CategoryId = &v
	return s
}

type DeleteMetaCategoryResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMetaCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetaCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMetaCategoryResponseBody) SetData(v bool) *DeleteMetaCategoryResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteMetaCategoryResponseBody) SetErrorCode(v string) *DeleteMetaCategoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteMetaCategoryResponseBody) SetErrorMessage(v string) *DeleteMetaCategoryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteMetaCategoryResponseBody) SetHttpStatusCode(v int32) *DeleteMetaCategoryResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteMetaCategoryResponseBody) SetRequestId(v string) *DeleteMetaCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMetaCategoryResponseBody) SetSuccess(v bool) *DeleteMetaCategoryResponseBody {
	s.Success = &v
	return s
}

type DeleteMetaCategoryResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteMetaCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMetaCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetaCategoryResponse) GoString() string {
	return s.String()
}

func (s *DeleteMetaCategoryResponse) SetHeaders(v map[string]*string) *DeleteMetaCategoryResponse {
	s.Headers = v
	return s
}

func (s *DeleteMetaCategoryResponse) SetBody(v *DeleteMetaCategoryResponseBody) *DeleteMetaCategoryResponse {
	s.Body = v
	return s
}

type DeleteProjectMemberRequest struct {
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	UserId    *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DeleteProjectMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectMemberRequest) GoString() string {
	return s.String()
}

func (s *DeleteProjectMemberRequest) SetProjectId(v int64) *DeleteProjectMemberRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteProjectMemberRequest) SetUserId(v string) *DeleteProjectMemberRequest {
	s.UserId = &v
	return s
}

type DeleteProjectMemberResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteProjectMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectMemberResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProjectMemberResponseBody) SetRequestId(v string) *DeleteProjectMemberResponseBody {
	s.RequestId = &v
	return s
}

type DeleteProjectMemberResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteProjectMemberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteProjectMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectMemberResponse) GoString() string {
	return s.String()
}

func (s *DeleteProjectMemberResponse) SetHeaders(v map[string]*string) *DeleteProjectMemberResponse {
	s.Headers = v
	return s
}

func (s *DeleteProjectMemberResponse) SetBody(v *DeleteProjectMemberResponseBody) *DeleteProjectMemberResponse {
	s.Body = v
	return s
}

type DeleteQualityEntityRequest struct {
	EntityId    *int64  `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	EnvType     *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
}

func (s DeleteQualityEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteQualityEntityRequest) GoString() string {
	return s.String()
}

func (s *DeleteQualityEntityRequest) SetEntityId(v int64) *DeleteQualityEntityRequest {
	s.EntityId = &v
	return s
}

func (s *DeleteQualityEntityRequest) SetEnvType(v string) *DeleteQualityEntityRequest {
	s.EnvType = &v
	return s
}

func (s *DeleteQualityEntityRequest) SetProjectName(v string) *DeleteQualityEntityRequest {
	s.ProjectName = &v
	return s
}

type DeleteQualityEntityResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteQualityEntityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteQualityEntityResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteQualityEntityResponseBody) SetData(v bool) *DeleteQualityEntityResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteQualityEntityResponseBody) SetErrorCode(v string) *DeleteQualityEntityResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteQualityEntityResponseBody) SetErrorMessage(v string) *DeleteQualityEntityResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteQualityEntityResponseBody) SetHttpStatusCode(v int32) *DeleteQualityEntityResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteQualityEntityResponseBody) SetRequestId(v string) *DeleteQualityEntityResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteQualityEntityResponseBody) SetSuccess(v bool) *DeleteQualityEntityResponseBody {
	s.Success = &v
	return s
}

type DeleteQualityEntityResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteQualityEntityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteQualityEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteQualityEntityResponse) GoString() string {
	return s.String()
}

func (s *DeleteQualityEntityResponse) SetHeaders(v map[string]*string) *DeleteQualityEntityResponse {
	s.Headers = v
	return s
}

func (s *DeleteQualityEntityResponse) SetBody(v *DeleteQualityEntityResponseBody) *DeleteQualityEntityResponse {
	s.Body = v
	return s
}

type DeleteQualityFollowerRequest struct {
	FollowerId  *int64  `json:"FollowerId,omitempty" xml:"FollowerId,omitempty"`
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
}

func (s DeleteQualityFollowerRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteQualityFollowerRequest) GoString() string {
	return s.String()
}

func (s *DeleteQualityFollowerRequest) SetFollowerId(v int64) *DeleteQualityFollowerRequest {
	s.FollowerId = &v
	return s
}

func (s *DeleteQualityFollowerRequest) SetProjectName(v string) *DeleteQualityFollowerRequest {
	s.ProjectName = &v
	return s
}

type DeleteQualityFollowerResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteQualityFollowerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteQualityFollowerResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteQualityFollowerResponseBody) SetData(v bool) *DeleteQualityFollowerResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteQualityFollowerResponseBody) SetErrorCode(v string) *DeleteQualityFollowerResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteQualityFollowerResponseBody) SetErrorMessage(v string) *DeleteQualityFollowerResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteQualityFollowerResponseBody) SetHttpStatusCode(v int32) *DeleteQualityFollowerResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteQualityFollowerResponseBody) SetRequestId(v string) *DeleteQualityFollowerResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteQualityFollowerResponseBody) SetSuccess(v bool) *DeleteQualityFollowerResponseBody {
	s.Success = &v
	return s
}

type DeleteQualityFollowerResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteQualityFollowerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteQualityFollowerResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteQualityFollowerResponse) GoString() string {
	return s.String()
}

func (s *DeleteQualityFollowerResponse) SetHeaders(v map[string]*string) *DeleteQualityFollowerResponse {
	s.Headers = v
	return s
}

func (s *DeleteQualityFollowerResponse) SetBody(v *DeleteQualityFollowerResponseBody) *DeleteQualityFollowerResponse {
	s.Body = v
	return s
}

type DeleteQualityRelativeNodeRequest struct {
	EnvType               *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	MatchExpression       *string `json:"MatchExpression,omitempty" xml:"MatchExpression,omitempty"`
	NodeId                *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	ProjectId             *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName           *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	TableName             *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	TargetNodeProjectId   *int64  `json:"TargetNodeProjectId,omitempty" xml:"TargetNodeProjectId,omitempty"`
	TargetNodeProjectName *string `json:"TargetNodeProjectName,omitempty" xml:"TargetNodeProjectName,omitempty"`
}

func (s DeleteQualityRelativeNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteQualityRelativeNodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteQualityRelativeNodeRequest) SetEnvType(v string) *DeleteQualityRelativeNodeRequest {
	s.EnvType = &v
	return s
}

func (s *DeleteQualityRelativeNodeRequest) SetMatchExpression(v string) *DeleteQualityRelativeNodeRequest {
	s.MatchExpression = &v
	return s
}

func (s *DeleteQualityRelativeNodeRequest) SetNodeId(v int64) *DeleteQualityRelativeNodeRequest {
	s.NodeId = &v
	return s
}

func (s *DeleteQualityRelativeNodeRequest) SetProjectId(v int64) *DeleteQualityRelativeNodeRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteQualityRelativeNodeRequest) SetProjectName(v string) *DeleteQualityRelativeNodeRequest {
	s.ProjectName = &v
	return s
}

func (s *DeleteQualityRelativeNodeRequest) SetTableName(v string) *DeleteQualityRelativeNodeRequest {
	s.TableName = &v
	return s
}

func (s *DeleteQualityRelativeNodeRequest) SetTargetNodeProjectId(v int64) *DeleteQualityRelativeNodeRequest {
	s.TargetNodeProjectId = &v
	return s
}

func (s *DeleteQualityRelativeNodeRequest) SetTargetNodeProjectName(v string) *DeleteQualityRelativeNodeRequest {
	s.TargetNodeProjectName = &v
	return s
}

type DeleteQualityRelativeNodeResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteQualityRelativeNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteQualityRelativeNodeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteQualityRelativeNodeResponseBody) SetData(v bool) *DeleteQualityRelativeNodeResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteQualityRelativeNodeResponseBody) SetErrorCode(v string) *DeleteQualityRelativeNodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteQualityRelativeNodeResponseBody) SetErrorMessage(v string) *DeleteQualityRelativeNodeResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteQualityRelativeNodeResponseBody) SetHttpStatusCode(v int32) *DeleteQualityRelativeNodeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteQualityRelativeNodeResponseBody) SetRequestId(v string) *DeleteQualityRelativeNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteQualityRelativeNodeResponseBody) SetSuccess(v bool) *DeleteQualityRelativeNodeResponseBody {
	s.Success = &v
	return s
}

type DeleteQualityRelativeNodeResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteQualityRelativeNodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteQualityRelativeNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteQualityRelativeNodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteQualityRelativeNodeResponse) SetHeaders(v map[string]*string) *DeleteQualityRelativeNodeResponse {
	s.Headers = v
	return s
}

func (s *DeleteQualityRelativeNodeResponse) SetBody(v *DeleteQualityRelativeNodeResponseBody) *DeleteQualityRelativeNodeResponse {
	s.Body = v
	return s
}

type DeleteQualityRuleRequest struct {
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	RuleId      *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DeleteQualityRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteQualityRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteQualityRuleRequest) SetProjectName(v string) *DeleteQualityRuleRequest {
	s.ProjectName = &v
	return s
}

func (s *DeleteQualityRuleRequest) SetRuleId(v int64) *DeleteQualityRuleRequest {
	s.RuleId = &v
	return s
}

type DeleteQualityRuleResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteQualityRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteQualityRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteQualityRuleResponseBody) SetData(v bool) *DeleteQualityRuleResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteQualityRuleResponseBody) SetErrorCode(v string) *DeleteQualityRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteQualityRuleResponseBody) SetErrorMessage(v string) *DeleteQualityRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteQualityRuleResponseBody) SetHttpStatusCode(v int32) *DeleteQualityRuleResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteQualityRuleResponseBody) SetRequestId(v string) *DeleteQualityRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteQualityRuleResponseBody) SetSuccess(v bool) *DeleteQualityRuleResponseBody {
	s.Success = &v
	return s
}

type DeleteQualityRuleResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteQualityRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteQualityRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteQualityRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteQualityRuleResponse) SetHeaders(v map[string]*string) *DeleteQualityRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteQualityRuleResponse) SetBody(v *DeleteQualityRuleResponseBody) *DeleteQualityRuleResponse {
	s.Body = v
	return s
}

type DeleteRemindRequest struct {
	RemindId *int64 `json:"RemindId,omitempty" xml:"RemindId,omitempty"`
}

func (s DeleteRemindRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRemindRequest) GoString() string {
	return s.String()
}

func (s *DeleteRemindRequest) SetRemindId(v int64) *DeleteRemindRequest {
	s.RemindId = &v
	return s
}

type DeleteRemindResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteRemindResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRemindResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRemindResponseBody) SetData(v bool) *DeleteRemindResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteRemindResponseBody) SetErrorCode(v string) *DeleteRemindResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteRemindResponseBody) SetErrorMessage(v string) *DeleteRemindResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteRemindResponseBody) SetHttpStatusCode(v int32) *DeleteRemindResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteRemindResponseBody) SetRequestId(v string) *DeleteRemindResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRemindResponseBody) SetSuccess(v bool) *DeleteRemindResponseBody {
	s.Success = &v
	return s
}

type DeleteRemindResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteRemindResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteRemindResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRemindResponse) GoString() string {
	return s.String()
}

func (s *DeleteRemindResponse) SetHeaders(v map[string]*string) *DeleteRemindResponse {
	s.Headers = v
	return s
}

func (s *DeleteRemindResponse) SetBody(v *DeleteRemindResponseBody) *DeleteRemindResponse {
	s.Body = v
	return s
}

type DeleteTableRequest struct {
	AppGuid   *string `json:"AppGuid,omitempty" xml:"AppGuid,omitempty"`
	EnvType   *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s DeleteTableRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTableRequest) GoString() string {
	return s.String()
}

func (s *DeleteTableRequest) SetAppGuid(v string) *DeleteTableRequest {
	s.AppGuid = &v
	return s
}

func (s *DeleteTableRequest) SetEnvType(v int32) *DeleteTableRequest {
	s.EnvType = &v
	return s
}

func (s *DeleteTableRequest) SetProjectId(v int64) *DeleteTableRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteTableRequest) SetTableName(v string) *DeleteTableRequest {
	s.TableName = &v
	return s
}

type DeleteTableResponseBody struct {
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskInfo  *DeleteTableResponseBodyTaskInfo `json:"TaskInfo,omitempty" xml:"TaskInfo,omitempty" type:"Struct"`
}

func (s DeleteTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTableResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTableResponseBody) SetRequestId(v string) *DeleteTableResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTableResponseBody) SetTaskInfo(v *DeleteTableResponseBodyTaskInfo) *DeleteTableResponseBody {
	s.TaskInfo = v
	return s
}

type DeleteTableResponseBodyTaskInfo struct {
	Content    *string `json:"Content,omitempty" xml:"Content,omitempty"`
	NextTaskId *string `json:"NextTaskId,omitempty" xml:"NextTaskId,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DeleteTableResponseBodyTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s DeleteTableResponseBodyTaskInfo) GoString() string {
	return s.String()
}

func (s *DeleteTableResponseBodyTaskInfo) SetContent(v string) *DeleteTableResponseBodyTaskInfo {
	s.Content = &v
	return s
}

func (s *DeleteTableResponseBodyTaskInfo) SetNextTaskId(v string) *DeleteTableResponseBodyTaskInfo {
	s.NextTaskId = &v
	return s
}

func (s *DeleteTableResponseBodyTaskInfo) SetStatus(v string) *DeleteTableResponseBodyTaskInfo {
	s.Status = &v
	return s
}

func (s *DeleteTableResponseBodyTaskInfo) SetTaskId(v string) *DeleteTableResponseBodyTaskInfo {
	s.TaskId = &v
	return s
}

type DeleteTableResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteTableResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTableResponse) GoString() string {
	return s.String()
}

func (s *DeleteTableResponse) SetHeaders(v map[string]*string) *DeleteTableResponse {
	s.Headers = v
	return s
}

func (s *DeleteTableResponse) SetBody(v *DeleteTableResponseBody) *DeleteTableResponse {
	s.Body = v
	return s
}

type DeleteTableLevelRequest struct {
	LevelId   *int64 `json:"LevelId,omitempty" xml:"LevelId,omitempty"`
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteTableLevelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTableLevelRequest) GoString() string {
	return s.String()
}

func (s *DeleteTableLevelRequest) SetLevelId(v int64) *DeleteTableLevelRequest {
	s.LevelId = &v
	return s
}

func (s *DeleteTableLevelRequest) SetProjectId(v int64) *DeleteTableLevelRequest {
	s.ProjectId = &v
	return s
}

type DeleteTableLevelResponseBody struct {
	DeleteResult *bool   `json:"DeleteResult,omitempty" xml:"DeleteResult,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTableLevelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTableLevelResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTableLevelResponseBody) SetDeleteResult(v bool) *DeleteTableLevelResponseBody {
	s.DeleteResult = &v
	return s
}

func (s *DeleteTableLevelResponseBody) SetRequestId(v string) *DeleteTableLevelResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTableLevelResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteTableLevelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteTableLevelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTableLevelResponse) GoString() string {
	return s.String()
}

func (s *DeleteTableLevelResponse) SetHeaders(v map[string]*string) *DeleteTableLevelResponse {
	s.Headers = v
	return s
}

func (s *DeleteTableLevelResponse) SetBody(v *DeleteTableLevelResponseBody) *DeleteTableLevelResponse {
	s.Body = v
	return s
}

type DeleteTableThemeRequest struct {
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ThemeId   *int64 `json:"ThemeId,omitempty" xml:"ThemeId,omitempty"`
}

func (s DeleteTableThemeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTableThemeRequest) GoString() string {
	return s.String()
}

func (s *DeleteTableThemeRequest) SetProjectId(v int64) *DeleteTableThemeRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteTableThemeRequest) SetThemeId(v int64) *DeleteTableThemeRequest {
	s.ThemeId = &v
	return s
}

type DeleteTableThemeResponseBody struct {
	DeleteResult   *bool   `json:"DeleteResult,omitempty" xml:"DeleteResult,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteTableThemeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTableThemeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTableThemeResponseBody) SetDeleteResult(v bool) *DeleteTableThemeResponseBody {
	s.DeleteResult = &v
	return s
}

func (s *DeleteTableThemeResponseBody) SetErrorCode(v string) *DeleteTableThemeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteTableThemeResponseBody) SetErrorMessage(v string) *DeleteTableThemeResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteTableThemeResponseBody) SetHttpStatusCode(v int32) *DeleteTableThemeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteTableThemeResponseBody) SetRequestId(v string) *DeleteTableThemeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTableThemeResponseBody) SetSuccess(v bool) *DeleteTableThemeResponseBody {
	s.Success = &v
	return s
}

type DeleteTableThemeResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteTableThemeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteTableThemeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTableThemeResponse) GoString() string {
	return s.String()
}

func (s *DeleteTableThemeResponse) SetHeaders(v map[string]*string) *DeleteTableThemeResponse {
	s.Headers = v
	return s
}

func (s *DeleteTableThemeResponse) SetBody(v *DeleteTableThemeResponseBody) *DeleteTableThemeResponse {
	s.Body = v
	return s
}

type DeployDISyncTaskRequest struct {
	FileId    *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TaskType  *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DeployDISyncTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployDISyncTaskRequest) GoString() string {
	return s.String()
}

func (s *DeployDISyncTaskRequest) SetFileId(v int64) *DeployDISyncTaskRequest {
	s.FileId = &v
	return s
}

func (s *DeployDISyncTaskRequest) SetProjectId(v int64) *DeployDISyncTaskRequest {
	s.ProjectId = &v
	return s
}

func (s *DeployDISyncTaskRequest) SetTaskType(v string) *DeployDISyncTaskRequest {
	s.TaskType = &v
	return s
}

type DeployDISyncTaskResponseBody struct {
	Data      *DeployDISyncTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeployDISyncTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeployDISyncTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeployDISyncTaskResponseBody) SetData(v *DeployDISyncTaskResponseBodyData) *DeployDISyncTaskResponseBody {
	s.Data = v
	return s
}

func (s *DeployDISyncTaskResponseBody) SetRequestId(v string) *DeployDISyncTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeployDISyncTaskResponseBody) SetSuccess(v bool) *DeployDISyncTaskResponseBody {
	s.Success = &v
	return s
}

type DeployDISyncTaskResponseBodyData struct {
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Status  *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeployDISyncTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeployDISyncTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeployDISyncTaskResponseBodyData) SetMessage(v string) *DeployDISyncTaskResponseBodyData {
	s.Message = &v
	return s
}

func (s *DeployDISyncTaskResponseBodyData) SetStatus(v string) *DeployDISyncTaskResponseBodyData {
	s.Status = &v
	return s
}

type DeployDISyncTaskResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeployDISyncTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeployDISyncTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployDISyncTaskResponse) GoString() string {
	return s.String()
}

func (s *DeployDISyncTaskResponse) SetHeaders(v map[string]*string) *DeployDISyncTaskResponse {
	s.Headers = v
	return s
}

func (s *DeployDISyncTaskResponse) SetBody(v *DeployDISyncTaskResponseBody) *DeployDISyncTaskResponse {
	s.Body = v
	return s
}

type DeployFileRequest struct {
	Comment           *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	FileId            *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	NodeId            *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s DeployFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployFileRequest) GoString() string {
	return s.String()
}

func (s *DeployFileRequest) SetComment(v string) *DeployFileRequest {
	s.Comment = &v
	return s
}

func (s *DeployFileRequest) SetFileId(v int64) *DeployFileRequest {
	s.FileId = &v
	return s
}

func (s *DeployFileRequest) SetNodeId(v int64) *DeployFileRequest {
	s.NodeId = &v
	return s
}

func (s *DeployFileRequest) SetProjectId(v int64) *DeployFileRequest {
	s.ProjectId = &v
	return s
}

func (s *DeployFileRequest) SetProjectIdentifier(v string) *DeployFileRequest {
	s.ProjectIdentifier = &v
	return s
}

type DeployFileResponseBody struct {
	Data           *int64  `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeployFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeployFileResponseBody) GoString() string {
	return s.String()
}

func (s *DeployFileResponseBody) SetData(v int64) *DeployFileResponseBody {
	s.Data = &v
	return s
}

func (s *DeployFileResponseBody) SetErrorCode(v string) *DeployFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeployFileResponseBody) SetErrorMessage(v string) *DeployFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeployFileResponseBody) SetHttpStatusCode(v int32) *DeployFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeployFileResponseBody) SetRequestId(v string) *DeployFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeployFileResponseBody) SetSuccess(v bool) *DeployFileResponseBody {
	s.Success = &v
	return s
}

type DeployFileResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeployFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeployFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployFileResponse) GoString() string {
	return s.String()
}

func (s *DeployFileResponse) SetHeaders(v map[string]*string) *DeployFileResponse {
	s.Headers = v
	return s
}

func (s *DeployFileResponse) SetBody(v *DeployFileResponseBody) *DeployFileResponse {
	s.Body = v
	return s
}

type DesensitizeDataRequest struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	SceneCode *string `json:"SceneCode,omitempty" xml:"SceneCode,omitempty"`
}

func (s DesensitizeDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DesensitizeDataRequest) GoString() string {
	return s.String()
}

func (s *DesensitizeDataRequest) SetData(v string) *DesensitizeDataRequest {
	s.Data = &v
	return s
}

func (s *DesensitizeDataRequest) SetSceneCode(v string) *DesensitizeDataRequest {
	s.SceneCode = &v
	return s
}

type DesensitizeDataResponseBody struct {
	DesensitizeData *string `json:"DesensitizeData,omitempty" xml:"DesensitizeData,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DesensitizeDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DesensitizeDataResponseBody) GoString() string {
	return s.String()
}

func (s *DesensitizeDataResponseBody) SetDesensitizeData(v string) *DesensitizeDataResponseBody {
	s.DesensitizeData = &v
	return s
}

func (s *DesensitizeDataResponseBody) SetRequestId(v string) *DesensitizeDataResponseBody {
	s.RequestId = &v
	return s
}

type DesensitizeDataResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DesensitizeDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DesensitizeDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DesensitizeDataResponse) GoString() string {
	return s.String()
}

func (s *DesensitizeDataResponse) SetHeaders(v map[string]*string) *DesensitizeDataResponse {
	s.Headers = v
	return s
}

func (s *DesensitizeDataResponse) SetBody(v *DesensitizeDataResponseBody) *DesensitizeDataResponse {
	s.Body = v
	return s
}

type EstablishRelationTableToBusinessRequest struct {
	BusinessId        *string `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	FolderId          *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	TableGuid         *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s EstablishRelationTableToBusinessRequest) String() string {
	return tea.Prettify(s)
}

func (s EstablishRelationTableToBusinessRequest) GoString() string {
	return s.String()
}

func (s *EstablishRelationTableToBusinessRequest) SetBusinessId(v string) *EstablishRelationTableToBusinessRequest {
	s.BusinessId = &v
	return s
}

func (s *EstablishRelationTableToBusinessRequest) SetFolderId(v string) *EstablishRelationTableToBusinessRequest {
	s.FolderId = &v
	return s
}

func (s *EstablishRelationTableToBusinessRequest) SetProjectId(v int64) *EstablishRelationTableToBusinessRequest {
	s.ProjectId = &v
	return s
}

func (s *EstablishRelationTableToBusinessRequest) SetProjectIdentifier(v string) *EstablishRelationTableToBusinessRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *EstablishRelationTableToBusinessRequest) SetTableGuid(v string) *EstablishRelationTableToBusinessRequest {
	s.TableGuid = &v
	return s
}

type EstablishRelationTableToBusinessResponseBody struct {
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s EstablishRelationTableToBusinessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EstablishRelationTableToBusinessResponseBody) GoString() string {
	return s.String()
}

func (s *EstablishRelationTableToBusinessResponseBody) SetErrorCode(v string) *EstablishRelationTableToBusinessResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *EstablishRelationTableToBusinessResponseBody) SetErrorMessage(v string) *EstablishRelationTableToBusinessResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *EstablishRelationTableToBusinessResponseBody) SetHttpStatusCode(v int32) *EstablishRelationTableToBusinessResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *EstablishRelationTableToBusinessResponseBody) SetRequestId(v string) *EstablishRelationTableToBusinessResponseBody {
	s.RequestId = &v
	return s
}

func (s *EstablishRelationTableToBusinessResponseBody) SetSuccess(v bool) *EstablishRelationTableToBusinessResponseBody {
	s.Success = &v
	return s
}

type EstablishRelationTableToBusinessResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EstablishRelationTableToBusinessResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EstablishRelationTableToBusinessResponse) String() string {
	return tea.Prettify(s)
}

func (s EstablishRelationTableToBusinessResponse) GoString() string {
	return s.String()
}

func (s *EstablishRelationTableToBusinessResponse) SetHeaders(v map[string]*string) *EstablishRelationTableToBusinessResponse {
	s.Headers = v
	return s
}

func (s *EstablishRelationTableToBusinessResponse) SetBody(v *EstablishRelationTableToBusinessResponseBody) *EstablishRelationTableToBusinessResponse {
	s.Body = v
	return s
}

type ExportDataSourcesRequest struct {
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	EnvType        *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SubType        *string `json:"SubType,omitempty" xml:"SubType,omitempty"`
}

func (s ExportDataSourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportDataSourcesRequest) GoString() string {
	return s.String()
}

func (s *ExportDataSourcesRequest) SetDataSourceType(v string) *ExportDataSourcesRequest {
	s.DataSourceType = &v
	return s
}

func (s *ExportDataSourcesRequest) SetEnvType(v int32) *ExportDataSourcesRequest {
	s.EnvType = &v
	return s
}

func (s *ExportDataSourcesRequest) SetName(v string) *ExportDataSourcesRequest {
	s.Name = &v
	return s
}

func (s *ExportDataSourcesRequest) SetPageNumber(v int32) *ExportDataSourcesRequest {
	s.PageNumber = &v
	return s
}

func (s *ExportDataSourcesRequest) SetPageSize(v int32) *ExportDataSourcesRequest {
	s.PageSize = &v
	return s
}

func (s *ExportDataSourcesRequest) SetProjectId(v int64) *ExportDataSourcesRequest {
	s.ProjectId = &v
	return s
}

func (s *ExportDataSourcesRequest) SetSubType(v string) *ExportDataSourcesRequest {
	s.SubType = &v
	return s
}

type ExportDataSourcesResponseBody struct {
	Data           *ExportDataSourcesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExportDataSourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportDataSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ExportDataSourcesResponseBody) SetData(v *ExportDataSourcesResponseBodyData) *ExportDataSourcesResponseBody {
	s.Data = v
	return s
}

func (s *ExportDataSourcesResponseBody) SetHttpStatusCode(v int32) *ExportDataSourcesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ExportDataSourcesResponseBody) SetRequestId(v string) *ExportDataSourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportDataSourcesResponseBody) SetSuccess(v bool) *ExportDataSourcesResponseBody {
	s.Success = &v
	return s
}

type ExportDataSourcesResponseBodyData struct {
	DataSources []*ExportDataSourcesResponseBodyDataDataSources `json:"DataSources,omitempty" xml:"DataSources,omitempty" type:"Repeated"`
	PageNumber  *int32                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ExportDataSourcesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ExportDataSourcesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ExportDataSourcesResponseBodyData) SetDataSources(v []*ExportDataSourcesResponseBodyDataDataSources) *ExportDataSourcesResponseBodyData {
	s.DataSources = v
	return s
}

func (s *ExportDataSourcesResponseBodyData) SetPageNumber(v int32) *ExportDataSourcesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ExportDataSourcesResponseBodyData) SetPageSize(v int32) *ExportDataSourcesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ExportDataSourcesResponseBodyData) SetTotalCount(v int32) *ExportDataSourcesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ExportDataSourcesResponseBodyDataDataSources struct {
	BindingCalcEngineId *int32  `json:"BindingCalcEngineId,omitempty" xml:"BindingCalcEngineId,omitempty"`
	ConnectStatus       *int32  `json:"ConnectStatus,omitempty" xml:"ConnectStatus,omitempty"`
	Content             *string `json:"Content,omitempty" xml:"Content,omitempty"`
	DataSourceType      *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DefaultEngine       *bool   `json:"DefaultEngine,omitempty" xml:"DefaultEngine,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnvType             *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	GmtCreate           *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified         *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id                  *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name                *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Operator            *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	ProjectId           *int32  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Sequence            *int32  `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
	Shared              *bool   `json:"Shared,omitempty" xml:"Shared,omitempty"`
	Status              *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	SubType             *string `json:"SubType,omitempty" xml:"SubType,omitempty"`
	TenantId            *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ExportDataSourcesResponseBodyDataDataSources) String() string {
	return tea.Prettify(s)
}

func (s ExportDataSourcesResponseBodyDataDataSources) GoString() string {
	return s.String()
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetBindingCalcEngineId(v int32) *ExportDataSourcesResponseBodyDataDataSources {
	s.BindingCalcEngineId = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetConnectStatus(v int32) *ExportDataSourcesResponseBodyDataDataSources {
	s.ConnectStatus = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetContent(v string) *ExportDataSourcesResponseBodyDataDataSources {
	s.Content = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetDataSourceType(v string) *ExportDataSourcesResponseBodyDataDataSources {
	s.DataSourceType = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetDefaultEngine(v bool) *ExportDataSourcesResponseBodyDataDataSources {
	s.DefaultEngine = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetDescription(v string) *ExportDataSourcesResponseBodyDataDataSources {
	s.Description = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetEnvType(v int32) *ExportDataSourcesResponseBodyDataDataSources {
	s.EnvType = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetGmtCreate(v string) *ExportDataSourcesResponseBodyDataDataSources {
	s.GmtCreate = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetGmtModified(v string) *ExportDataSourcesResponseBodyDataDataSources {
	s.GmtModified = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetId(v int32) *ExportDataSourcesResponseBodyDataDataSources {
	s.Id = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetName(v string) *ExportDataSourcesResponseBodyDataDataSources {
	s.Name = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetOperator(v string) *ExportDataSourcesResponseBodyDataDataSources {
	s.Operator = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetProjectId(v int32) *ExportDataSourcesResponseBodyDataDataSources {
	s.ProjectId = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetSequence(v int32) *ExportDataSourcesResponseBodyDataDataSources {
	s.Sequence = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetShared(v bool) *ExportDataSourcesResponseBodyDataDataSources {
	s.Shared = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetStatus(v int32) *ExportDataSourcesResponseBodyDataDataSources {
	s.Status = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetSubType(v string) *ExportDataSourcesResponseBodyDataDataSources {
	s.SubType = &v
	return s
}

func (s *ExportDataSourcesResponseBodyDataDataSources) SetTenantId(v int64) *ExportDataSourcesResponseBodyDataDataSources {
	s.TenantId = &v
	return s
}

type ExportDataSourcesResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ExportDataSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExportDataSourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportDataSourcesResponse) GoString() string {
	return s.String()
}

func (s *ExportDataSourcesResponse) SetHeaders(v map[string]*string) *ExportDataSourcesResponse {
	s.Headers = v
	return s
}

func (s *ExportDataSourcesResponse) SetBody(v *ExportDataSourcesResponseBody) *ExportDataSourcesResponse {
	s.Body = v
	return s
}

type GenerateDISyncTaskConfigForCreatingRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TaskParam   *string `json:"TaskParam,omitempty" xml:"TaskParam,omitempty"`
	TaskType    *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s GenerateDISyncTaskConfigForCreatingRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateDISyncTaskConfigForCreatingRequest) GoString() string {
	return s.String()
}

func (s *GenerateDISyncTaskConfigForCreatingRequest) SetClientToken(v string) *GenerateDISyncTaskConfigForCreatingRequest {
	s.ClientToken = &v
	return s
}

func (s *GenerateDISyncTaskConfigForCreatingRequest) SetProjectId(v int64) *GenerateDISyncTaskConfigForCreatingRequest {
	s.ProjectId = &v
	return s
}

func (s *GenerateDISyncTaskConfigForCreatingRequest) SetTaskParam(v string) *GenerateDISyncTaskConfigForCreatingRequest {
	s.TaskParam = &v
	return s
}

func (s *GenerateDISyncTaskConfigForCreatingRequest) SetTaskType(v string) *GenerateDISyncTaskConfigForCreatingRequest {
	s.TaskType = &v
	return s
}

type GenerateDISyncTaskConfigForCreatingResponseBody struct {
	Data      *GenerateDISyncTaskConfigForCreatingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GenerateDISyncTaskConfigForCreatingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateDISyncTaskConfigForCreatingResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateDISyncTaskConfigForCreatingResponseBody) SetData(v *GenerateDISyncTaskConfigForCreatingResponseBodyData) *GenerateDISyncTaskConfigForCreatingResponseBody {
	s.Data = v
	return s
}

func (s *GenerateDISyncTaskConfigForCreatingResponseBody) SetRequestId(v string) *GenerateDISyncTaskConfigForCreatingResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateDISyncTaskConfigForCreatingResponseBody) SetSuccess(v bool) *GenerateDISyncTaskConfigForCreatingResponseBody {
	s.Success = &v
	return s
}

type GenerateDISyncTaskConfigForCreatingResponseBodyData struct {
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	ProcessId *int64  `json:"ProcessId,omitempty" xml:"ProcessId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GenerateDISyncTaskConfigForCreatingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GenerateDISyncTaskConfigForCreatingResponseBodyData) GoString() string {
	return s.String()
}

func (s *GenerateDISyncTaskConfigForCreatingResponseBodyData) SetMessage(v string) *GenerateDISyncTaskConfigForCreatingResponseBodyData {
	s.Message = &v
	return s
}

func (s *GenerateDISyncTaskConfigForCreatingResponseBodyData) SetProcessId(v int64) *GenerateDISyncTaskConfigForCreatingResponseBodyData {
	s.ProcessId = &v
	return s
}

func (s *GenerateDISyncTaskConfigForCreatingResponseBodyData) SetStatus(v string) *GenerateDISyncTaskConfigForCreatingResponseBodyData {
	s.Status = &v
	return s
}

type GenerateDISyncTaskConfigForCreatingResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GenerateDISyncTaskConfigForCreatingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GenerateDISyncTaskConfigForCreatingResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateDISyncTaskConfigForCreatingResponse) GoString() string {
	return s.String()
}

func (s *GenerateDISyncTaskConfigForCreatingResponse) SetHeaders(v map[string]*string) *GenerateDISyncTaskConfigForCreatingResponse {
	s.Headers = v
	return s
}

func (s *GenerateDISyncTaskConfigForCreatingResponse) SetBody(v *GenerateDISyncTaskConfigForCreatingResponseBody) *GenerateDISyncTaskConfigForCreatingResponse {
	s.Body = v
	return s
}

type GenerateDISyncTaskConfigForUpdatingRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TaskId      *int64  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskParam   *string `json:"TaskParam,omitempty" xml:"TaskParam,omitempty"`
	TaskType    *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s GenerateDISyncTaskConfigForUpdatingRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateDISyncTaskConfigForUpdatingRequest) GoString() string {
	return s.String()
}

func (s *GenerateDISyncTaskConfigForUpdatingRequest) SetClientToken(v string) *GenerateDISyncTaskConfigForUpdatingRequest {
	s.ClientToken = &v
	return s
}

func (s *GenerateDISyncTaskConfigForUpdatingRequest) SetProjectId(v int64) *GenerateDISyncTaskConfigForUpdatingRequest {
	s.ProjectId = &v
	return s
}

func (s *GenerateDISyncTaskConfigForUpdatingRequest) SetTaskId(v int64) *GenerateDISyncTaskConfigForUpdatingRequest {
	s.TaskId = &v
	return s
}

func (s *GenerateDISyncTaskConfigForUpdatingRequest) SetTaskParam(v string) *GenerateDISyncTaskConfigForUpdatingRequest {
	s.TaskParam = &v
	return s
}

func (s *GenerateDISyncTaskConfigForUpdatingRequest) SetTaskType(v string) *GenerateDISyncTaskConfigForUpdatingRequest {
	s.TaskType = &v
	return s
}

type GenerateDISyncTaskConfigForUpdatingResponseBody struct {
	Data      *GenerateDISyncTaskConfigForUpdatingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GenerateDISyncTaskConfigForUpdatingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateDISyncTaskConfigForUpdatingResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateDISyncTaskConfigForUpdatingResponseBody) SetData(v *GenerateDISyncTaskConfigForUpdatingResponseBodyData) *GenerateDISyncTaskConfigForUpdatingResponseBody {
	s.Data = v
	return s
}

func (s *GenerateDISyncTaskConfigForUpdatingResponseBody) SetRequestId(v string) *GenerateDISyncTaskConfigForUpdatingResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateDISyncTaskConfigForUpdatingResponseBody) SetSuccess(v bool) *GenerateDISyncTaskConfigForUpdatingResponseBody {
	s.Success = &v
	return s
}

type GenerateDISyncTaskConfigForUpdatingResponseBodyData struct {
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	ProcessId *int64  `json:"ProcessId,omitempty" xml:"ProcessId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GenerateDISyncTaskConfigForUpdatingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GenerateDISyncTaskConfigForUpdatingResponseBodyData) GoString() string {
	return s.String()
}

func (s *GenerateDISyncTaskConfigForUpdatingResponseBodyData) SetMessage(v string) *GenerateDISyncTaskConfigForUpdatingResponseBodyData {
	s.Message = &v
	return s
}

func (s *GenerateDISyncTaskConfigForUpdatingResponseBodyData) SetProcessId(v int64) *GenerateDISyncTaskConfigForUpdatingResponseBodyData {
	s.ProcessId = &v
	return s
}

func (s *GenerateDISyncTaskConfigForUpdatingResponseBodyData) SetStatus(v string) *GenerateDISyncTaskConfigForUpdatingResponseBodyData {
	s.Status = &v
	return s
}

type GenerateDISyncTaskConfigForUpdatingResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GenerateDISyncTaskConfigForUpdatingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GenerateDISyncTaskConfigForUpdatingResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateDISyncTaskConfigForUpdatingResponse) GoString() string {
	return s.String()
}

func (s *GenerateDISyncTaskConfigForUpdatingResponse) SetHeaders(v map[string]*string) *GenerateDISyncTaskConfigForUpdatingResponse {
	s.Headers = v
	return s
}

func (s *GenerateDISyncTaskConfigForUpdatingResponse) SetBody(v *GenerateDISyncTaskConfigForUpdatingResponseBody) *GenerateDISyncTaskConfigForUpdatingResponse {
	s.Body = v
	return s
}

type GetBaselineConfigRequest struct {
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
}

func (s GetBaselineConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineConfigRequest) GoString() string {
	return s.String()
}

func (s *GetBaselineConfigRequest) SetBaselineId(v int64) *GetBaselineConfigRequest {
	s.BaselineId = &v
	return s
}

type GetBaselineConfigResponseBody struct {
	Data           *GetBaselineConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                            `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetBaselineConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetBaselineConfigResponseBody) SetData(v *GetBaselineConfigResponseBodyData) *GetBaselineConfigResponseBody {
	s.Data = v
	return s
}

func (s *GetBaselineConfigResponseBody) SetErrorCode(v string) *GetBaselineConfigResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetBaselineConfigResponseBody) SetErrorMessage(v string) *GetBaselineConfigResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetBaselineConfigResponseBody) SetHttpStatusCode(v int32) *GetBaselineConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetBaselineConfigResponseBody) SetRequestId(v string) *GetBaselineConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBaselineConfigResponseBody) SetSuccess(v bool) *GetBaselineConfigResponseBody {
	s.Success = &v
	return s
}

type GetBaselineConfigResponseBodyData struct {
	BaselineId    *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	BaselineName  *string `json:"BaselineName,omitempty" xml:"BaselineName,omitempty"`
	BaselineType  *string `json:"BaselineType,omitempty" xml:"BaselineType,omitempty"`
	ExpHour       *int32  `json:"ExpHour,omitempty" xml:"ExpHour,omitempty"`
	ExpMinu       *int32  `json:"ExpMinu,omitempty" xml:"ExpMinu,omitempty"`
	HourExpDetail *string `json:"HourExpDetail,omitempty" xml:"HourExpDetail,omitempty"`
	HourSlaDetail *string `json:"HourSlaDetail,omitempty" xml:"HourSlaDetail,omitempty"`
	IsDefault     *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Priority      *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ProjectId     *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SlaHour       *int32  `json:"SlaHour,omitempty" xml:"SlaHour,omitempty"`
	SlaMinu       *int32  `json:"SlaMinu,omitempty" xml:"SlaMinu,omitempty"`
	UseFlag       *bool   `json:"UseFlag,omitempty" xml:"UseFlag,omitempty"`
}

func (s GetBaselineConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetBaselineConfigResponseBodyData) SetBaselineId(v int64) *GetBaselineConfigResponseBodyData {
	s.BaselineId = &v
	return s
}

func (s *GetBaselineConfigResponseBodyData) SetBaselineName(v string) *GetBaselineConfigResponseBodyData {
	s.BaselineName = &v
	return s
}

func (s *GetBaselineConfigResponseBodyData) SetBaselineType(v string) *GetBaselineConfigResponseBodyData {
	s.BaselineType = &v
	return s
}

func (s *GetBaselineConfigResponseBodyData) SetExpHour(v int32) *GetBaselineConfigResponseBodyData {
	s.ExpHour = &v
	return s
}

func (s *GetBaselineConfigResponseBodyData) SetExpMinu(v int32) *GetBaselineConfigResponseBodyData {
	s.ExpMinu = &v
	return s
}

func (s *GetBaselineConfigResponseBodyData) SetHourExpDetail(v string) *GetBaselineConfigResponseBodyData {
	s.HourExpDetail = &v
	return s
}

func (s *GetBaselineConfigResponseBodyData) SetHourSlaDetail(v string) *GetBaselineConfigResponseBodyData {
	s.HourSlaDetail = &v
	return s
}

func (s *GetBaselineConfigResponseBodyData) SetIsDefault(v bool) *GetBaselineConfigResponseBodyData {
	s.IsDefault = &v
	return s
}

func (s *GetBaselineConfigResponseBodyData) SetOwner(v string) *GetBaselineConfigResponseBodyData {
	s.Owner = &v
	return s
}

func (s *GetBaselineConfigResponseBodyData) SetPriority(v int32) *GetBaselineConfigResponseBodyData {
	s.Priority = &v
	return s
}

func (s *GetBaselineConfigResponseBodyData) SetProjectId(v int64) *GetBaselineConfigResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetBaselineConfigResponseBodyData) SetSlaHour(v int32) *GetBaselineConfigResponseBodyData {
	s.SlaHour = &v
	return s
}

func (s *GetBaselineConfigResponseBodyData) SetSlaMinu(v int32) *GetBaselineConfigResponseBodyData {
	s.SlaMinu = &v
	return s
}

func (s *GetBaselineConfigResponseBodyData) SetUseFlag(v bool) *GetBaselineConfigResponseBodyData {
	s.UseFlag = &v
	return s
}

type GetBaselineConfigResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetBaselineConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetBaselineConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineConfigResponse) GoString() string {
	return s.String()
}

func (s *GetBaselineConfigResponse) SetHeaders(v map[string]*string) *GetBaselineConfigResponse {
	s.Headers = v
	return s
}

func (s *GetBaselineConfigResponse) SetBody(v *GetBaselineConfigResponseBody) *GetBaselineConfigResponse {
	s.Body = v
	return s
}

type GetBaselineKeyPathRequest struct {
	BaselineId *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	Bizdate    *string `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	InGroupId  *int32  `json:"InGroupId,omitempty" xml:"InGroupId,omitempty"`
}

func (s GetBaselineKeyPathRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineKeyPathRequest) GoString() string {
	return s.String()
}

func (s *GetBaselineKeyPathRequest) SetBaselineId(v int64) *GetBaselineKeyPathRequest {
	s.BaselineId = &v
	return s
}

func (s *GetBaselineKeyPathRequest) SetBizdate(v string) *GetBaselineKeyPathRequest {
	s.Bizdate = &v
	return s
}

func (s *GetBaselineKeyPathRequest) SetInGroupId(v int32) *GetBaselineKeyPathRequest {
	s.InGroupId = &v
	return s
}

type GetBaselineKeyPathResponseBody struct {
	Data           []*GetBaselineKeyPathResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorCode      *string                               `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetBaselineKeyPathResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineKeyPathResponseBody) GoString() string {
	return s.String()
}

func (s *GetBaselineKeyPathResponseBody) SetData(v []*GetBaselineKeyPathResponseBodyData) *GetBaselineKeyPathResponseBody {
	s.Data = v
	return s
}

func (s *GetBaselineKeyPathResponseBody) SetErrorCode(v string) *GetBaselineKeyPathResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetBaselineKeyPathResponseBody) SetErrorMessage(v string) *GetBaselineKeyPathResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetBaselineKeyPathResponseBody) SetHttpStatusCode(v int32) *GetBaselineKeyPathResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetBaselineKeyPathResponseBody) SetRequestId(v string) *GetBaselineKeyPathResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBaselineKeyPathResponseBody) SetSuccess(v bool) *GetBaselineKeyPathResponseBody {
	s.Success = &v
	return s
}

type GetBaselineKeyPathResponseBodyData struct {
	Bizdate    *int64                                      `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	InGroupId  *int32                                      `json:"InGroupId,omitempty" xml:"InGroupId,omitempty"`
	InstanceId *int64                                      `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NodeId     *int64                                      `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName   *string                                     `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner      *string                                     `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PrgType    *int32                                      `json:"PrgType,omitempty" xml:"PrgType,omitempty"`
	ProjectId  *int64                                      `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Runs       []*GetBaselineKeyPathResponseBodyDataRuns   `json:"Runs,omitempty" xml:"Runs,omitempty" type:"Repeated"`
	Topics     []*GetBaselineKeyPathResponseBodyDataTopics `json:"Topics,omitempty" xml:"Topics,omitempty" type:"Repeated"`
}

func (s GetBaselineKeyPathResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineKeyPathResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetBaselineKeyPathResponseBodyData) SetBizdate(v int64) *GetBaselineKeyPathResponseBodyData {
	s.Bizdate = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyData) SetInGroupId(v int32) *GetBaselineKeyPathResponseBodyData {
	s.InGroupId = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyData) SetInstanceId(v int64) *GetBaselineKeyPathResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyData) SetNodeId(v int64) *GetBaselineKeyPathResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyData) SetNodeName(v string) *GetBaselineKeyPathResponseBodyData {
	s.NodeName = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyData) SetOwner(v string) *GetBaselineKeyPathResponseBodyData {
	s.Owner = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyData) SetPrgType(v int32) *GetBaselineKeyPathResponseBodyData {
	s.PrgType = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyData) SetProjectId(v int64) *GetBaselineKeyPathResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyData) SetRuns(v []*GetBaselineKeyPathResponseBodyDataRuns) *GetBaselineKeyPathResponseBodyData {
	s.Runs = v
	return s
}

func (s *GetBaselineKeyPathResponseBodyData) SetTopics(v []*GetBaselineKeyPathResponseBodyDataTopics) *GetBaselineKeyPathResponseBodyData {
	s.Topics = v
	return s
}

type GetBaselineKeyPathResponseBodyDataRuns struct {
	AbsTime           *int64  `json:"AbsTime,omitempty" xml:"AbsTime,omitempty"`
	BeginCast         *int64  `json:"BeginCast,omitempty" xml:"BeginCast,omitempty"`
	BeginRunningTime  *int64  `json:"BeginRunningTime,omitempty" xml:"BeginRunningTime,omitempty"`
	BeginWaitResTime  *int64  `json:"BeginWaitResTime,omitempty" xml:"BeginWaitResTime,omitempty"`
	BeginWaitTimeTime *int64  `json:"BeginWaitTimeTime,omitempty" xml:"BeginWaitTimeTime,omitempty"`
	Bizdate           *int64  `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	CycTime           *int64  `json:"CycTime,omitempty" xml:"CycTime,omitempty"`
	EndCast           *int64  `json:"EndCast,omitempty" xml:"EndCast,omitempty"`
	FinishTime        *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InGroupId         *int32  `json:"InGroupId,omitempty" xml:"InGroupId,omitempty"`
	InstanceId        *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NodeId            *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName          *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner             *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBaselineKeyPathResponseBodyDataRuns) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineKeyPathResponseBodyDataRuns) GoString() string {
	return s.String()
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetAbsTime(v int64) *GetBaselineKeyPathResponseBodyDataRuns {
	s.AbsTime = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetBeginCast(v int64) *GetBaselineKeyPathResponseBodyDataRuns {
	s.BeginCast = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetBeginRunningTime(v int64) *GetBaselineKeyPathResponseBodyDataRuns {
	s.BeginRunningTime = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetBeginWaitResTime(v int64) *GetBaselineKeyPathResponseBodyDataRuns {
	s.BeginWaitResTime = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetBeginWaitTimeTime(v int64) *GetBaselineKeyPathResponseBodyDataRuns {
	s.BeginWaitTimeTime = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetBizdate(v int64) *GetBaselineKeyPathResponseBodyDataRuns {
	s.Bizdate = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetCycTime(v int64) *GetBaselineKeyPathResponseBodyDataRuns {
	s.CycTime = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetEndCast(v int64) *GetBaselineKeyPathResponseBodyDataRuns {
	s.EndCast = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetFinishTime(v int64) *GetBaselineKeyPathResponseBodyDataRuns {
	s.FinishTime = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetInGroupId(v int32) *GetBaselineKeyPathResponseBodyDataRuns {
	s.InGroupId = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetInstanceId(v int64) *GetBaselineKeyPathResponseBodyDataRuns {
	s.InstanceId = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetNodeId(v int64) *GetBaselineKeyPathResponseBodyDataRuns {
	s.NodeId = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetNodeName(v string) *GetBaselineKeyPathResponseBodyDataRuns {
	s.NodeName = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetOwner(v string) *GetBaselineKeyPathResponseBodyDataRuns {
	s.Owner = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetProjectId(v int64) *GetBaselineKeyPathResponseBodyDataRuns {
	s.ProjectId = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataRuns) SetStatus(v string) *GetBaselineKeyPathResponseBodyDataRuns {
	s.Status = &v
	return s
}

type GetBaselineKeyPathResponseBodyDataTopics struct {
	AddTime    *int64 `json:"AddTime,omitempty" xml:"AddTime,omitempty"`
	InstanceId *int64 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TopicId    *int64 `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
	TopicName  *int64 `json:"TopicName,omitempty" xml:"TopicName,omitempty"`
}

func (s GetBaselineKeyPathResponseBodyDataTopics) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineKeyPathResponseBodyDataTopics) GoString() string {
	return s.String()
}

func (s *GetBaselineKeyPathResponseBodyDataTopics) SetAddTime(v int64) *GetBaselineKeyPathResponseBodyDataTopics {
	s.AddTime = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataTopics) SetInstanceId(v int64) *GetBaselineKeyPathResponseBodyDataTopics {
	s.InstanceId = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataTopics) SetTopicId(v int64) *GetBaselineKeyPathResponseBodyDataTopics {
	s.TopicId = &v
	return s
}

func (s *GetBaselineKeyPathResponseBodyDataTopics) SetTopicName(v int64) *GetBaselineKeyPathResponseBodyDataTopics {
	s.TopicName = &v
	return s
}

type GetBaselineKeyPathResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetBaselineKeyPathResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetBaselineKeyPathResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineKeyPathResponse) GoString() string {
	return s.String()
}

func (s *GetBaselineKeyPathResponse) SetHeaders(v map[string]*string) *GetBaselineKeyPathResponse {
	s.Headers = v
	return s
}

func (s *GetBaselineKeyPathResponse) SetBody(v *GetBaselineKeyPathResponseBody) *GetBaselineKeyPathResponse {
	s.Body = v
	return s
}

type GetBaselineStatusRequest struct {
	BaselineId *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	Bizdate    *string `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	InGroupId  *int32  `json:"InGroupId,omitempty" xml:"InGroupId,omitempty"`
}

func (s GetBaselineStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineStatusRequest) GoString() string {
	return s.String()
}

func (s *GetBaselineStatusRequest) SetBaselineId(v int64) *GetBaselineStatusRequest {
	s.BaselineId = &v
	return s
}

func (s *GetBaselineStatusRequest) SetBizdate(v string) *GetBaselineStatusRequest {
	s.Bizdate = &v
	return s
}

func (s *GetBaselineStatusRequest) SetInGroupId(v int32) *GetBaselineStatusRequest {
	s.InGroupId = &v
	return s
}

type GetBaselineStatusResponseBody struct {
	Data           *GetBaselineStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                            `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetBaselineStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineStatusResponseBody) GoString() string {
	return s.String()
}

func (s *GetBaselineStatusResponseBody) SetData(v *GetBaselineStatusResponseBodyData) *GetBaselineStatusResponseBody {
	s.Data = v
	return s
}

func (s *GetBaselineStatusResponseBody) SetErrorCode(v string) *GetBaselineStatusResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetBaselineStatusResponseBody) SetErrorMessage(v string) *GetBaselineStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetBaselineStatusResponseBody) SetHttpStatusCode(v int32) *GetBaselineStatusResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetBaselineStatusResponseBody) SetRequestId(v string) *GetBaselineStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBaselineStatusResponseBody) SetSuccess(v bool) *GetBaselineStatusResponseBody {
	s.Success = &v
	return s
}

type GetBaselineStatusResponseBodyData struct {
	BaselineId    *int64                                          `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	BaselineName  *string                                         `json:"BaselineName,omitempty" xml:"BaselineName,omitempty"`
	Bizdate       *int64                                          `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	BlockInstance *GetBaselineStatusResponseBodyDataBlockInstance `json:"BlockInstance,omitempty" xml:"BlockInstance,omitempty" type:"Struct"`
	Buffer        *float32                                        `json:"Buffer,omitempty" xml:"Buffer,omitempty"`
	EndCast       *int64                                          `json:"EndCast,omitempty" xml:"EndCast,omitempty"`
	ExpTime       *int64                                          `json:"ExpTime,omitempty" xml:"ExpTime,omitempty"`
	FinishStatus  *string                                         `json:"FinishStatus,omitempty" xml:"FinishStatus,omitempty"`
	FinishTime    *int64                                          `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InGroupId     *int32                                          `json:"InGroupId,omitempty" xml:"InGroupId,omitempty"`
	LastInstance  *GetBaselineStatusResponseBodyDataLastInstance  `json:"LastInstance,omitempty" xml:"LastInstance,omitempty" type:"Struct"`
	Owner         *string                                         `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Priority      *int32                                          `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ProjectId     *int64                                          `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SlaTime       *int64                                          `json:"SlaTime,omitempty" xml:"SlaTime,omitempty"`
	Status        *string                                         `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBaselineStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetBaselineStatusResponseBodyData) SetBaselineId(v int64) *GetBaselineStatusResponseBodyData {
	s.BaselineId = &v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetBaselineName(v string) *GetBaselineStatusResponseBodyData {
	s.BaselineName = &v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetBizdate(v int64) *GetBaselineStatusResponseBodyData {
	s.Bizdate = &v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetBlockInstance(v *GetBaselineStatusResponseBodyDataBlockInstance) *GetBaselineStatusResponseBodyData {
	s.BlockInstance = v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetBuffer(v float32) *GetBaselineStatusResponseBodyData {
	s.Buffer = &v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetEndCast(v int64) *GetBaselineStatusResponseBodyData {
	s.EndCast = &v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetExpTime(v int64) *GetBaselineStatusResponseBodyData {
	s.ExpTime = &v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetFinishStatus(v string) *GetBaselineStatusResponseBodyData {
	s.FinishStatus = &v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetFinishTime(v int64) *GetBaselineStatusResponseBodyData {
	s.FinishTime = &v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetInGroupId(v int32) *GetBaselineStatusResponseBodyData {
	s.InGroupId = &v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetLastInstance(v *GetBaselineStatusResponseBodyDataLastInstance) *GetBaselineStatusResponseBodyData {
	s.LastInstance = v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetOwner(v string) *GetBaselineStatusResponseBodyData {
	s.Owner = &v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetPriority(v int32) *GetBaselineStatusResponseBodyData {
	s.Priority = &v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetProjectId(v int64) *GetBaselineStatusResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetSlaTime(v int64) *GetBaselineStatusResponseBodyData {
	s.SlaTime = &v
	return s
}

func (s *GetBaselineStatusResponseBodyData) SetStatus(v string) *GetBaselineStatusResponseBodyData {
	s.Status = &v
	return s
}

type GetBaselineStatusResponseBodyDataBlockInstance struct {
	EndCast    *int64  `json:"EndCast,omitempty" xml:"EndCast,omitempty"`
	FinishTime *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InstanceId *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NodeId     *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName   *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner      *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId  *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBaselineStatusResponseBodyDataBlockInstance) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineStatusResponseBodyDataBlockInstance) GoString() string {
	return s.String()
}

func (s *GetBaselineStatusResponseBodyDataBlockInstance) SetEndCast(v int64) *GetBaselineStatusResponseBodyDataBlockInstance {
	s.EndCast = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataBlockInstance) SetFinishTime(v int64) *GetBaselineStatusResponseBodyDataBlockInstance {
	s.FinishTime = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataBlockInstance) SetInstanceId(v int64) *GetBaselineStatusResponseBodyDataBlockInstance {
	s.InstanceId = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataBlockInstance) SetNodeId(v int64) *GetBaselineStatusResponseBodyDataBlockInstance {
	s.NodeId = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataBlockInstance) SetNodeName(v string) *GetBaselineStatusResponseBodyDataBlockInstance {
	s.NodeName = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataBlockInstance) SetOwner(v string) *GetBaselineStatusResponseBodyDataBlockInstance {
	s.Owner = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataBlockInstance) SetProjectId(v int64) *GetBaselineStatusResponseBodyDataBlockInstance {
	s.ProjectId = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataBlockInstance) SetStatus(v string) *GetBaselineStatusResponseBodyDataBlockInstance {
	s.Status = &v
	return s
}

type GetBaselineStatusResponseBodyDataLastInstance struct {
	EndCast    *int64  `json:"EndCast,omitempty" xml:"EndCast,omitempty"`
	FinishTime *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InstanceId *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NodeId     *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName   *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner      *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId  *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBaselineStatusResponseBodyDataLastInstance) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineStatusResponseBodyDataLastInstance) GoString() string {
	return s.String()
}

func (s *GetBaselineStatusResponseBodyDataLastInstance) SetEndCast(v int64) *GetBaselineStatusResponseBodyDataLastInstance {
	s.EndCast = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataLastInstance) SetFinishTime(v int64) *GetBaselineStatusResponseBodyDataLastInstance {
	s.FinishTime = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataLastInstance) SetInstanceId(v int64) *GetBaselineStatusResponseBodyDataLastInstance {
	s.InstanceId = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataLastInstance) SetNodeId(v int64) *GetBaselineStatusResponseBodyDataLastInstance {
	s.NodeId = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataLastInstance) SetNodeName(v string) *GetBaselineStatusResponseBodyDataLastInstance {
	s.NodeName = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataLastInstance) SetOwner(v string) *GetBaselineStatusResponseBodyDataLastInstance {
	s.Owner = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataLastInstance) SetProjectId(v int64) *GetBaselineStatusResponseBodyDataLastInstance {
	s.ProjectId = &v
	return s
}

func (s *GetBaselineStatusResponseBodyDataLastInstance) SetStatus(v string) *GetBaselineStatusResponseBodyDataLastInstance {
	s.Status = &v
	return s
}

type GetBaselineStatusResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetBaselineStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetBaselineStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBaselineStatusResponse) GoString() string {
	return s.String()
}

func (s *GetBaselineStatusResponse) SetHeaders(v map[string]*string) *GetBaselineStatusResponse {
	s.Headers = v
	return s
}

func (s *GetBaselineStatusResponse) SetBody(v *GetBaselineStatusResponseBody) *GetBaselineStatusResponse {
	s.Body = v
	return s
}

type GetBusinessRequest struct {
	BusinessId        *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s GetBusinessRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessRequest) SetBusinessId(v int64) *GetBusinessRequest {
	s.BusinessId = &v
	return s
}

func (s *GetBusinessRequest) SetProjectId(v int64) *GetBusinessRequest {
	s.ProjectId = &v
	return s
}

func (s *GetBusinessRequest) SetProjectIdentifier(v string) *GetBusinessRequest {
	s.ProjectIdentifier = &v
	return s
}

type GetBusinessResponseBody struct {
	Data           *GetBusinessResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                       `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetBusinessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessResponseBody) SetData(v *GetBusinessResponseBodyData) *GetBusinessResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessResponseBody) SetErrorCode(v string) *GetBusinessResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetBusinessResponseBody) SetErrorMessage(v string) *GetBusinessResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetBusinessResponseBody) SetHttpStatusCode(v int32) *GetBusinessResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetBusinessResponseBody) SetRequestId(v string) *GetBusinessResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessResponseBody) SetSuccess(v bool) *GetBusinessResponseBody {
	s.Success = &v
	return s
}

type GetBusinessResponseBodyData struct {
	BusinessId   *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	BusinessName *string `json:"BusinessName,omitempty" xml:"BusinessName,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Owner        *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId    *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	UseType      *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s GetBusinessResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetBusinessResponseBodyData) SetBusinessId(v int64) *GetBusinessResponseBodyData {
	s.BusinessId = &v
	return s
}

func (s *GetBusinessResponseBodyData) SetBusinessName(v string) *GetBusinessResponseBodyData {
	s.BusinessName = &v
	return s
}

func (s *GetBusinessResponseBodyData) SetDescription(v string) *GetBusinessResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetBusinessResponseBodyData) SetOwner(v string) *GetBusinessResponseBodyData {
	s.Owner = &v
	return s
}

func (s *GetBusinessResponseBodyData) SetProjectId(v string) *GetBusinessResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetBusinessResponseBodyData) SetUseType(v string) *GetBusinessResponseBodyData {
	s.UseType = &v
	return s
}

type GetBusinessResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetBusinessResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetBusinessResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessResponse) SetHeaders(v map[string]*string) *GetBusinessResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessResponse) SetBody(v *GetBusinessResponseBody) *GetBusinessResponse {
	s.Body = v
	return s
}

type GetDDLJobStatusRequest struct {
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetDDLJobStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDDLJobStatusRequest) GoString() string {
	return s.String()
}

func (s *GetDDLJobStatusRequest) SetTaskId(v string) *GetDDLJobStatusRequest {
	s.TaskId = &v
	return s
}

type GetDDLJobStatusResponseBody struct {
	Data      *GetDDLJobStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDDLJobStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDDLJobStatusResponseBody) GoString() string {
	return s.String()
}

func (s *GetDDLJobStatusResponseBody) SetData(v *GetDDLJobStatusResponseBodyData) *GetDDLJobStatusResponseBody {
	s.Data = v
	return s
}

func (s *GetDDLJobStatusResponseBody) SetRequestId(v string) *GetDDLJobStatusResponseBody {
	s.RequestId = &v
	return s
}

type GetDDLJobStatusResponseBodyData struct {
	Content    *string `json:"Content,omitempty" xml:"Content,omitempty"`
	NextTaskId *string `json:"NextTaskId,omitempty" xml:"NextTaskId,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetDDLJobStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDDLJobStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDDLJobStatusResponseBodyData) SetContent(v string) *GetDDLJobStatusResponseBodyData {
	s.Content = &v
	return s
}

func (s *GetDDLJobStatusResponseBodyData) SetNextTaskId(v string) *GetDDLJobStatusResponseBodyData {
	s.NextTaskId = &v
	return s
}

func (s *GetDDLJobStatusResponseBodyData) SetStatus(v string) *GetDDLJobStatusResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetDDLJobStatusResponseBodyData) SetTaskId(v string) *GetDDLJobStatusResponseBodyData {
	s.TaskId = &v
	return s
}

type GetDDLJobStatusResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDDLJobStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDDLJobStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDDLJobStatusResponse) GoString() string {
	return s.String()
}

func (s *GetDDLJobStatusResponse) SetHeaders(v map[string]*string) *GetDDLJobStatusResponse {
	s.Headers = v
	return s
}

func (s *GetDDLJobStatusResponse) SetBody(v *GetDDLJobStatusResponseBody) *GetDDLJobStatusResponse {
	s.Body = v
	return s
}

type GetDISyncInstanceInfoRequest struct {
	FileId    *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TaskType  *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s GetDISyncInstanceInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncInstanceInfoRequest) GoString() string {
	return s.String()
}

func (s *GetDISyncInstanceInfoRequest) SetFileId(v int64) *GetDISyncInstanceInfoRequest {
	s.FileId = &v
	return s
}

func (s *GetDISyncInstanceInfoRequest) SetProjectId(v int64) *GetDISyncInstanceInfoRequest {
	s.ProjectId = &v
	return s
}

func (s *GetDISyncInstanceInfoRequest) SetTaskType(v string) *GetDISyncInstanceInfoRequest {
	s.TaskType = &v
	return s
}

type GetDISyncInstanceInfoResponseBody struct {
	Data      *GetDISyncInstanceInfoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDISyncInstanceInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncInstanceInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetDISyncInstanceInfoResponseBody) SetData(v *GetDISyncInstanceInfoResponseBodyData) *GetDISyncInstanceInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetDISyncInstanceInfoResponseBody) SetRequestId(v string) *GetDISyncInstanceInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDISyncInstanceInfoResponseBody) SetSuccess(v bool) *GetDISyncInstanceInfoResponseBody {
	s.Success = &v
	return s
}

type GetDISyncInstanceInfoResponseBodyData struct {
	Message      *string                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	Name         *string                                            `json:"Name,omitempty" xml:"Name,omitempty"`
	SolutionInfo *GetDISyncInstanceInfoResponseBodyDataSolutionInfo `json:"SolutionInfo,omitempty" xml:"SolutionInfo,omitempty" type:"Struct"`
	Status       *string                                            `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDISyncInstanceInfoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncInstanceInfoResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDISyncInstanceInfoResponseBodyData) SetMessage(v string) *GetDISyncInstanceInfoResponseBodyData {
	s.Message = &v
	return s
}

func (s *GetDISyncInstanceInfoResponseBodyData) SetName(v string) *GetDISyncInstanceInfoResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetDISyncInstanceInfoResponseBodyData) SetSolutionInfo(v *GetDISyncInstanceInfoResponseBodyDataSolutionInfo) *GetDISyncInstanceInfoResponseBodyData {
	s.SolutionInfo = v
	return s
}

func (s *GetDISyncInstanceInfoResponseBodyData) SetStatus(v string) *GetDISyncInstanceInfoResponseBodyData {
	s.Status = &v
	return s
}

type GetDISyncInstanceInfoResponseBodyDataSolutionInfo struct {
	CreatorName *string                                                        `json:"CreatorName,omitempty" xml:"CreatorName,omitempty"`
	Id          *int64                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	Status      *string                                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	StepDetail  []*GetDISyncInstanceInfoResponseBodyDataSolutionInfoStepDetail `json:"StepDetail,omitempty" xml:"StepDetail,omitempty" type:"Repeated"`
}

func (s GetDISyncInstanceInfoResponseBodyDataSolutionInfo) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncInstanceInfoResponseBodyDataSolutionInfo) GoString() string {
	return s.String()
}

func (s *GetDISyncInstanceInfoResponseBodyDataSolutionInfo) SetCreatorName(v string) *GetDISyncInstanceInfoResponseBodyDataSolutionInfo {
	s.CreatorName = &v
	return s
}

func (s *GetDISyncInstanceInfoResponseBodyDataSolutionInfo) SetId(v int64) *GetDISyncInstanceInfoResponseBodyDataSolutionInfo {
	s.Id = &v
	return s
}

func (s *GetDISyncInstanceInfoResponseBodyDataSolutionInfo) SetStatus(v string) *GetDISyncInstanceInfoResponseBodyDataSolutionInfo {
	s.Status = &v
	return s
}

func (s *GetDISyncInstanceInfoResponseBodyDataSolutionInfo) SetStepDetail(v []*GetDISyncInstanceInfoResponseBodyDataSolutionInfoStepDetail) *GetDISyncInstanceInfoResponseBodyDataSolutionInfo {
	s.StepDetail = v
	return s
}

type GetDISyncInstanceInfoResponseBodyDataSolutionInfoStepDetail struct {
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
	StepId   *int64  `json:"StepId,omitempty" xml:"StepId,omitempty"`
	StepName *string `json:"StepName,omitempty" xml:"StepName,omitempty"`
}

func (s GetDISyncInstanceInfoResponseBodyDataSolutionInfoStepDetail) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncInstanceInfoResponseBodyDataSolutionInfoStepDetail) GoString() string {
	return s.String()
}

func (s *GetDISyncInstanceInfoResponseBodyDataSolutionInfoStepDetail) SetStatus(v string) *GetDISyncInstanceInfoResponseBodyDataSolutionInfoStepDetail {
	s.Status = &v
	return s
}

func (s *GetDISyncInstanceInfoResponseBodyDataSolutionInfoStepDetail) SetStepId(v int64) *GetDISyncInstanceInfoResponseBodyDataSolutionInfoStepDetail {
	s.StepId = &v
	return s
}

func (s *GetDISyncInstanceInfoResponseBodyDataSolutionInfoStepDetail) SetStepName(v string) *GetDISyncInstanceInfoResponseBodyDataSolutionInfoStepDetail {
	s.StepName = &v
	return s
}

type GetDISyncInstanceInfoResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDISyncInstanceInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDISyncInstanceInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncInstanceInfoResponse) GoString() string {
	return s.String()
}

func (s *GetDISyncInstanceInfoResponse) SetHeaders(v map[string]*string) *GetDISyncInstanceInfoResponse {
	s.Headers = v
	return s
}

func (s *GetDISyncInstanceInfoResponse) SetBody(v *GetDISyncInstanceInfoResponseBody) *GetDISyncInstanceInfoResponse {
	s.Body = v
	return s
}

type GetDISyncTaskRequest struct {
	FileId    *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TaskType  *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s GetDISyncTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncTaskRequest) GoString() string {
	return s.String()
}

func (s *GetDISyncTaskRequest) SetFileId(v int64) *GetDISyncTaskRequest {
	s.FileId = &v
	return s
}

func (s *GetDISyncTaskRequest) SetProjectId(v int64) *GetDISyncTaskRequest {
	s.ProjectId = &v
	return s
}

func (s *GetDISyncTaskRequest) SetTaskType(v string) *GetDISyncTaskRequest {
	s.TaskType = &v
	return s
}

type GetDISyncTaskResponseBody struct {
	Data      *GetDISyncTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDISyncTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetDISyncTaskResponseBody) SetData(v *GetDISyncTaskResponseBodyData) *GetDISyncTaskResponseBody {
	s.Data = v
	return s
}

func (s *GetDISyncTaskResponseBody) SetRequestId(v string) *GetDISyncTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDISyncTaskResponseBody) SetSuccess(v bool) *GetDISyncTaskResponseBody {
	s.Success = &v
	return s
}

type GetDISyncTaskResponseBodyData struct {
	Code           *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	SolutionDetail *GetDISyncTaskResponseBodyDataSolutionDetail `json:"SolutionDetail,omitempty" xml:"SolutionDetail,omitempty" type:"Struct"`
	Status         *string                                      `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDISyncTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDISyncTaskResponseBodyData) SetCode(v string) *GetDISyncTaskResponseBodyData {
	s.Code = &v
	return s
}

func (s *GetDISyncTaskResponseBodyData) SetMessage(v string) *GetDISyncTaskResponseBodyData {
	s.Message = &v
	return s
}

func (s *GetDISyncTaskResponseBodyData) SetSolutionDetail(v *GetDISyncTaskResponseBodyDataSolutionDetail) *GetDISyncTaskResponseBodyData {
	s.SolutionDetail = v
	return s
}

func (s *GetDISyncTaskResponseBodyData) SetStatus(v string) *GetDISyncTaskResponseBodyData {
	s.Status = &v
	return s
}

type GetDISyncTaskResponseBodyDataSolutionDetail struct {
	CreatorName    *string `json:"CreatorName,omitempty" xml:"CreatorName,omitempty"`
	Id             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProcessContent *string `json:"ProcessContent,omitempty" xml:"ProcessContent,omitempty"`
	ProcessExtra   *string `json:"ProcessExtra,omitempty" xml:"ProcessExtra,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SourceType     *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitTime     *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDISyncTaskResponseBodyDataSolutionDetail) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncTaskResponseBodyDataSolutionDetail) GoString() string {
	return s.String()
}

func (s *GetDISyncTaskResponseBodyDataSolutionDetail) SetCreatorName(v string) *GetDISyncTaskResponseBodyDataSolutionDetail {
	s.CreatorName = &v
	return s
}

func (s *GetDISyncTaskResponseBodyDataSolutionDetail) SetId(v int64) *GetDISyncTaskResponseBodyDataSolutionDetail {
	s.Id = &v
	return s
}

func (s *GetDISyncTaskResponseBodyDataSolutionDetail) SetName(v string) *GetDISyncTaskResponseBodyDataSolutionDetail {
	s.Name = &v
	return s
}

func (s *GetDISyncTaskResponseBodyDataSolutionDetail) SetProcessContent(v string) *GetDISyncTaskResponseBodyDataSolutionDetail {
	s.ProcessContent = &v
	return s
}

func (s *GetDISyncTaskResponseBodyDataSolutionDetail) SetProcessExtra(v string) *GetDISyncTaskResponseBodyDataSolutionDetail {
	s.ProcessExtra = &v
	return s
}

func (s *GetDISyncTaskResponseBodyDataSolutionDetail) SetProjectId(v int64) *GetDISyncTaskResponseBodyDataSolutionDetail {
	s.ProjectId = &v
	return s
}

func (s *GetDISyncTaskResponseBodyDataSolutionDetail) SetSourceType(v string) *GetDISyncTaskResponseBodyDataSolutionDetail {
	s.SourceType = &v
	return s
}

func (s *GetDISyncTaskResponseBodyDataSolutionDetail) SetStartTime(v string) *GetDISyncTaskResponseBodyDataSolutionDetail {
	s.StartTime = &v
	return s
}

func (s *GetDISyncTaskResponseBodyDataSolutionDetail) SetStatus(v string) *GetDISyncTaskResponseBodyDataSolutionDetail {
	s.Status = &v
	return s
}

func (s *GetDISyncTaskResponseBodyDataSolutionDetail) SetSubmitTime(v string) *GetDISyncTaskResponseBodyDataSolutionDetail {
	s.SubmitTime = &v
	return s
}

func (s *GetDISyncTaskResponseBodyDataSolutionDetail) SetType(v string) *GetDISyncTaskResponseBodyDataSolutionDetail {
	s.Type = &v
	return s
}

type GetDISyncTaskResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDISyncTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDISyncTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncTaskResponse) GoString() string {
	return s.String()
}

func (s *GetDISyncTaskResponse) SetHeaders(v map[string]*string) *GetDISyncTaskResponse {
	s.Headers = v
	return s
}

func (s *GetDISyncTaskResponse) SetBody(v *GetDISyncTaskResponseBody) *GetDISyncTaskResponse {
	s.Body = v
	return s
}

type GetDISyncTaskMetricInfoRequest struct {
	EndDate   *int64 `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	FileId    *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	StartDate *int64 `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
}

func (s GetDISyncTaskMetricInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncTaskMetricInfoRequest) GoString() string {
	return s.String()
}

func (s *GetDISyncTaskMetricInfoRequest) SetEndDate(v int64) *GetDISyncTaskMetricInfoRequest {
	s.EndDate = &v
	return s
}

func (s *GetDISyncTaskMetricInfoRequest) SetFileId(v int64) *GetDISyncTaskMetricInfoRequest {
	s.FileId = &v
	return s
}

func (s *GetDISyncTaskMetricInfoRequest) SetProjectId(v int64) *GetDISyncTaskMetricInfoRequest {
	s.ProjectId = &v
	return s
}

func (s *GetDISyncTaskMetricInfoRequest) SetStartDate(v int64) *GetDISyncTaskMetricInfoRequest {
	s.StartDate = &v
	return s
}

type GetDISyncTaskMetricInfoResponseBody struct {
	MetricInfo *GetDISyncTaskMetricInfoResponseBodyMetricInfo `json:"MetricInfo,omitempty" xml:"MetricInfo,omitempty" type:"Struct"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// isSuccess
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDISyncTaskMetricInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncTaskMetricInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetDISyncTaskMetricInfoResponseBody) SetMetricInfo(v *GetDISyncTaskMetricInfoResponseBodyMetricInfo) *GetDISyncTaskMetricInfoResponseBody {
	s.MetricInfo = v
	return s
}

func (s *GetDISyncTaskMetricInfoResponseBody) SetRequestId(v string) *GetDISyncTaskMetricInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDISyncTaskMetricInfoResponseBody) SetSuccess(v bool) *GetDISyncTaskMetricInfoResponseBody {
	s.Success = &v
	return s
}

type GetDISyncTaskMetricInfoResponseBodyMetricInfo struct {
	DeleteReaderRecords *int64  `json:"DeleteReaderRecords,omitempty" xml:"DeleteReaderRecords,omitempty"`
	DeleteWriterRecords *int64  `json:"DeleteWriterRecords,omitempty" xml:"DeleteWriterRecords,omitempty"`
	InsertReaderRecords *int64  `json:"InsertReaderRecords,omitempty" xml:"InsertReaderRecords,omitempty"`
	InsertWriterRecords *int64  `json:"InsertWriterRecords,omitempty" xml:"InsertWriterRecords,omitempty"`
	LastTaskDelay       *int64  `json:"LastTaskDelay,omitempty" xml:"LastTaskDelay,omitempty"`
	Message             *string `json:"Message,omitempty" xml:"Message,omitempty"`
	SumReaderRecords    *int64  `json:"SumReaderRecords,omitempty" xml:"SumReaderRecords,omitempty"`
	SumWriterRecords    *int64  `json:"SumWriterRecords,omitempty" xml:"SumWriterRecords,omitempty"`
	UpdateReaderRecords *int64  `json:"UpdateReaderRecords,omitempty" xml:"UpdateReaderRecords,omitempty"`
	UpdateWriterRecords *int64  `json:"UpdateWriterRecords,omitempty" xml:"UpdateWriterRecords,omitempty"`
}

func (s GetDISyncTaskMetricInfoResponseBodyMetricInfo) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncTaskMetricInfoResponseBodyMetricInfo) GoString() string {
	return s.String()
}

func (s *GetDISyncTaskMetricInfoResponseBodyMetricInfo) SetDeleteReaderRecords(v int64) *GetDISyncTaskMetricInfoResponseBodyMetricInfo {
	s.DeleteReaderRecords = &v
	return s
}

func (s *GetDISyncTaskMetricInfoResponseBodyMetricInfo) SetDeleteWriterRecords(v int64) *GetDISyncTaskMetricInfoResponseBodyMetricInfo {
	s.DeleteWriterRecords = &v
	return s
}

func (s *GetDISyncTaskMetricInfoResponseBodyMetricInfo) SetInsertReaderRecords(v int64) *GetDISyncTaskMetricInfoResponseBodyMetricInfo {
	s.InsertReaderRecords = &v
	return s
}

func (s *GetDISyncTaskMetricInfoResponseBodyMetricInfo) SetInsertWriterRecords(v int64) *GetDISyncTaskMetricInfoResponseBodyMetricInfo {
	s.InsertWriterRecords = &v
	return s
}

func (s *GetDISyncTaskMetricInfoResponseBodyMetricInfo) SetLastTaskDelay(v int64) *GetDISyncTaskMetricInfoResponseBodyMetricInfo {
	s.LastTaskDelay = &v
	return s
}

func (s *GetDISyncTaskMetricInfoResponseBodyMetricInfo) SetMessage(v string) *GetDISyncTaskMetricInfoResponseBodyMetricInfo {
	s.Message = &v
	return s
}

func (s *GetDISyncTaskMetricInfoResponseBodyMetricInfo) SetSumReaderRecords(v int64) *GetDISyncTaskMetricInfoResponseBodyMetricInfo {
	s.SumReaderRecords = &v
	return s
}

func (s *GetDISyncTaskMetricInfoResponseBodyMetricInfo) SetSumWriterRecords(v int64) *GetDISyncTaskMetricInfoResponseBodyMetricInfo {
	s.SumWriterRecords = &v
	return s
}

func (s *GetDISyncTaskMetricInfoResponseBodyMetricInfo) SetUpdateReaderRecords(v int64) *GetDISyncTaskMetricInfoResponseBodyMetricInfo {
	s.UpdateReaderRecords = &v
	return s
}

func (s *GetDISyncTaskMetricInfoResponseBodyMetricInfo) SetUpdateWriterRecords(v int64) *GetDISyncTaskMetricInfoResponseBodyMetricInfo {
	s.UpdateWriterRecords = &v
	return s
}

type GetDISyncTaskMetricInfoResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDISyncTaskMetricInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDISyncTaskMetricInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDISyncTaskMetricInfoResponse) GoString() string {
	return s.String()
}

func (s *GetDISyncTaskMetricInfoResponse) SetHeaders(v map[string]*string) *GetDISyncTaskMetricInfoResponse {
	s.Headers = v
	return s
}

func (s *GetDISyncTaskMetricInfoResponse) SetBody(v *GetDISyncTaskMetricInfoResponseBody) *GetDISyncTaskMetricInfoResponse {
	s.Body = v
	return s
}

type GetDagRequest struct {
	DagId      *int64  `json:"DagId,omitempty" xml:"DagId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s GetDagRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDagRequest) GoString() string {
	return s.String()
}

func (s *GetDagRequest) SetDagId(v int64) *GetDagRequest {
	s.DagId = &v
	return s
}

func (s *GetDagRequest) SetProjectEnv(v string) *GetDagRequest {
	s.ProjectEnv = &v
	return s
}

type GetDagResponseBody struct {
	Data           *GetDagResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDagResponseBody) GoString() string {
	return s.String()
}

func (s *GetDagResponseBody) SetData(v *GetDagResponseBodyData) *GetDagResponseBody {
	s.Data = v
	return s
}

func (s *GetDagResponseBody) SetErrorCode(v string) *GetDagResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetDagResponseBody) SetErrorMessage(v string) *GetDagResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetDagResponseBody) SetHttpStatusCode(v int32) *GetDagResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDagResponseBody) SetRequestId(v string) *GetDagResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDagResponseBody) SetSuccess(v bool) *GetDagResponseBody {
	s.Success = &v
	return s
}

type GetDagResponseBodyData struct {
	Bizdate    *int64  `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	CreateTime *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	DagId      *int64  `json:"DagId,omitempty" xml:"DagId,omitempty"`
	FinishTime *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Gmtdate    *int64  `json:"Gmtdate,omitempty" xml:"Gmtdate,omitempty"`
	ModifyTime *int64  `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OpSeq      *int64  `json:"OpSeq,omitempty" xml:"OpSeq,omitempty"`
	ProjectId  *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	StartTime  *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDagResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDagResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDagResponseBodyData) SetBizdate(v int64) *GetDagResponseBodyData {
	s.Bizdate = &v
	return s
}

func (s *GetDagResponseBodyData) SetCreateTime(v int64) *GetDagResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetDagResponseBodyData) SetCreateUser(v string) *GetDagResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *GetDagResponseBodyData) SetDagId(v int64) *GetDagResponseBodyData {
	s.DagId = &v
	return s
}

func (s *GetDagResponseBodyData) SetFinishTime(v int64) *GetDagResponseBodyData {
	s.FinishTime = &v
	return s
}

func (s *GetDagResponseBodyData) SetGmtdate(v int64) *GetDagResponseBodyData {
	s.Gmtdate = &v
	return s
}

func (s *GetDagResponseBodyData) SetModifyTime(v int64) *GetDagResponseBodyData {
	s.ModifyTime = &v
	return s
}

func (s *GetDagResponseBodyData) SetName(v string) *GetDagResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetDagResponseBodyData) SetOpSeq(v int64) *GetDagResponseBodyData {
	s.OpSeq = &v
	return s
}

func (s *GetDagResponseBodyData) SetProjectId(v int64) *GetDagResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetDagResponseBodyData) SetStartTime(v int64) *GetDagResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *GetDagResponseBodyData) SetStatus(v string) *GetDagResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetDagResponseBodyData) SetType(v string) *GetDagResponseBodyData {
	s.Type = &v
	return s
}

type GetDagResponse struct {
	Headers map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDagResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDagResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDagResponse) GoString() string {
	return s.String()
}

func (s *GetDagResponse) SetHeaders(v map[string]*string) *GetDagResponse {
	s.Headers = v
	return s
}

func (s *GetDagResponse) SetBody(v *GetDagResponseBody) *GetDagResponse {
	s.Body = v
	return s
}

type GetDataServiceApiRequest struct {
	ApiId     *int64 `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId  *int64 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s GetDataServiceApiRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiRequest) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiRequest) SetApiId(v int64) *GetDataServiceApiRequest {
	s.ApiId = &v
	return s
}

func (s *GetDataServiceApiRequest) SetProjectId(v int64) *GetDataServiceApiRequest {
	s.ProjectId = &v
	return s
}

func (s *GetDataServiceApiRequest) SetTenantId(v int64) *GetDataServiceApiRequest {
	s.TenantId = &v
	return s
}

type GetDataServiceApiResponseBody struct {
	Data           *GetDataServiceApiResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                            `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDataServiceApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponseBody) SetData(v *GetDataServiceApiResponseBodyData) *GetDataServiceApiResponseBody {
	s.Data = v
	return s
}

func (s *GetDataServiceApiResponseBody) SetErrorCode(v string) *GetDataServiceApiResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetDataServiceApiResponseBody) SetErrorMessage(v string) *GetDataServiceApiResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetDataServiceApiResponseBody) SetHttpStatusCode(v int32) *GetDataServiceApiResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDataServiceApiResponseBody) SetRequestId(v string) *GetDataServiceApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDataServiceApiResponseBody) SetSuccess(v bool) *GetDataServiceApiResponseBody {
	s.Success = &v
	return s
}

type GetDataServiceApiResponseBodyData struct {
	ApiId               *int64                                                `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiMode             *int32                                                `json:"ApiMode,omitempty" xml:"ApiMode,omitempty"`
	ApiName             *string                                               `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiPath             *string                                               `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	CreatedTime         *string                                               `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	CreatorId           *string                                               `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	Description         *string                                               `json:"Description,omitempty" xml:"Description,omitempty"`
	FolderId            *int64                                                `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	GroupId             *string                                               `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModifiedTime        *string                                               `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	OperatorId          *string                                               `json:"OperatorId,omitempty" xml:"OperatorId,omitempty"`
	ProjectId           *int64                                                `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Protocols           []*int32                                              `json:"Protocols,omitempty" xml:"Protocols,omitempty" type:"Repeated"`
	RegistrationDetails *GetDataServiceApiResponseBodyDataRegistrationDetails `json:"RegistrationDetails,omitempty" xml:"RegistrationDetails,omitempty" type:"Struct"`
	RequestMethod       *int32                                                `json:"RequestMethod,omitempty" xml:"RequestMethod,omitempty"`
	ResponseContentType *int32                                                `json:"ResponseContentType,omitempty" xml:"ResponseContentType,omitempty"`
	ScriptDetails       *GetDataServiceApiResponseBodyDataScriptDetails       `json:"ScriptDetails,omitempty" xml:"ScriptDetails,omitempty" type:"Struct"`
	Status              *int32                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	TenantId            *int64                                                `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Timeout             *int32                                                `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	VisibleRange        *int32                                                `json:"VisibleRange,omitempty" xml:"VisibleRange,omitempty"`
	WizardDetails       *GetDataServiceApiResponseBodyDataWizardDetails       `json:"WizardDetails,omitempty" xml:"WizardDetails,omitempty" type:"Struct"`
}

func (s GetDataServiceApiResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponseBodyData) SetApiId(v int64) *GetDataServiceApiResponseBodyData {
	s.ApiId = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetApiMode(v int32) *GetDataServiceApiResponseBodyData {
	s.ApiMode = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetApiName(v string) *GetDataServiceApiResponseBodyData {
	s.ApiName = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetApiPath(v string) *GetDataServiceApiResponseBodyData {
	s.ApiPath = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetCreatedTime(v string) *GetDataServiceApiResponseBodyData {
	s.CreatedTime = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetCreatorId(v string) *GetDataServiceApiResponseBodyData {
	s.CreatorId = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetDescription(v string) *GetDataServiceApiResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetFolderId(v int64) *GetDataServiceApiResponseBodyData {
	s.FolderId = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetGroupId(v string) *GetDataServiceApiResponseBodyData {
	s.GroupId = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetModifiedTime(v string) *GetDataServiceApiResponseBodyData {
	s.ModifiedTime = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetOperatorId(v string) *GetDataServiceApiResponseBodyData {
	s.OperatorId = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetProjectId(v int64) *GetDataServiceApiResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetProtocols(v []*int32) *GetDataServiceApiResponseBodyData {
	s.Protocols = v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetRegistrationDetails(v *GetDataServiceApiResponseBodyDataRegistrationDetails) *GetDataServiceApiResponseBodyData {
	s.RegistrationDetails = v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetRequestMethod(v int32) *GetDataServiceApiResponseBodyData {
	s.RequestMethod = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetResponseContentType(v int32) *GetDataServiceApiResponseBodyData {
	s.ResponseContentType = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetScriptDetails(v *GetDataServiceApiResponseBodyDataScriptDetails) *GetDataServiceApiResponseBodyData {
	s.ScriptDetails = v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetStatus(v int32) *GetDataServiceApiResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetTenantId(v int64) *GetDataServiceApiResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetTimeout(v int32) *GetDataServiceApiResponseBodyData {
	s.Timeout = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetVisibleRange(v int32) *GetDataServiceApiResponseBodyData {
	s.VisibleRange = &v
	return s
}

func (s *GetDataServiceApiResponseBodyData) SetWizardDetails(v *GetDataServiceApiResponseBodyDataWizardDetails) *GetDataServiceApiResponseBodyData {
	s.WizardDetails = v
	return s
}

type GetDataServiceApiResponseBodyDataRegistrationDetails struct {
	FailedResultSample            *string                                                                              `json:"FailedResultSample,omitempty" xml:"FailedResultSample,omitempty"`
	RegistrationErrorCodes        []*GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes        `json:"RegistrationErrorCodes,omitempty" xml:"RegistrationErrorCodes,omitempty" type:"Repeated"`
	RegistrationRequestParameters []*GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters `json:"RegistrationRequestParameters,omitempty" xml:"RegistrationRequestParameters,omitempty" type:"Repeated"`
	ServiceContentType            *int32                                                                               `json:"ServiceContentType,omitempty" xml:"ServiceContentType,omitempty"`
	ServiceHost                   *string                                                                              `json:"ServiceHost,omitempty" xml:"ServiceHost,omitempty"`
	ServicePath                   *string                                                                              `json:"ServicePath,omitempty" xml:"ServicePath,omitempty"`
	ServiceRequestBodyDescription *string                                                                              `json:"ServiceRequestBodyDescription,omitempty" xml:"ServiceRequestBodyDescription,omitempty"`
	SuccessfulResultSample        *string                                                                              `json:"SuccessfulResultSample,omitempty" xml:"SuccessfulResultSample,omitempty"`
}

func (s GetDataServiceApiResponseBodyDataRegistrationDetails) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponseBodyDataRegistrationDetails) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetails) SetFailedResultSample(v string) *GetDataServiceApiResponseBodyDataRegistrationDetails {
	s.FailedResultSample = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetails) SetRegistrationErrorCodes(v []*GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes) *GetDataServiceApiResponseBodyDataRegistrationDetails {
	s.RegistrationErrorCodes = v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetails) SetRegistrationRequestParameters(v []*GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) *GetDataServiceApiResponseBodyDataRegistrationDetails {
	s.RegistrationRequestParameters = v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetails) SetServiceContentType(v int32) *GetDataServiceApiResponseBodyDataRegistrationDetails {
	s.ServiceContentType = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetails) SetServiceHost(v string) *GetDataServiceApiResponseBodyDataRegistrationDetails {
	s.ServiceHost = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetails) SetServicePath(v string) *GetDataServiceApiResponseBodyDataRegistrationDetails {
	s.ServicePath = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetails) SetServiceRequestBodyDescription(v string) *GetDataServiceApiResponseBodyDataRegistrationDetails {
	s.ServiceRequestBodyDescription = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetails) SetSuccessfulResultSample(v string) *GetDataServiceApiResponseBodyDataRegistrationDetails {
	s.SuccessfulResultSample = &v
	return s
}

type GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes struct {
	ErrorCode     *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage  *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorSolution *string `json:"ErrorSolution,omitempty" xml:"ErrorSolution,omitempty"`
}

func (s GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes) SetErrorCode(v string) *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes {
	s.ErrorCode = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes) SetErrorMessage(v string) *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes {
	s.ErrorMessage = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes) SetErrorSolution(v string) *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes {
	s.ErrorSolution = &v
	return s
}

type GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters struct {
	ColumnName           *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	DefaultValue         *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	IsRequiredParameter  *bool   `json:"IsRequiredParameter,omitempty" xml:"IsRequiredParameter,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterOperator    *int32  `json:"ParameterOperator,omitempty" xml:"ParameterOperator,omitempty"`
	ParameterPosition    *int32  `json:"ParameterPosition,omitempty" xml:"ParameterPosition,omitempty"`
}

func (s GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetColumnName(v string) *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.ColumnName = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetDefaultValue(v string) *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.DefaultValue = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetExampleValue(v string) *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.ExampleValue = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetIsRequiredParameter(v bool) *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.IsRequiredParameter = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetParameterDataType(v int32) *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.ParameterDataType = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetParameterDescription(v string) *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.ParameterDescription = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetParameterName(v string) *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.ParameterName = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetParameterOperator(v int32) *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.ParameterOperator = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetParameterPosition(v int32) *GetDataServiceApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.ParameterPosition = &v
	return s
}

type GetDataServiceApiResponseBodyDataScriptDetails struct {
	IsPagedResponse          *bool                                                                     `json:"IsPagedResponse,omitempty" xml:"IsPagedResponse,omitempty"`
	Script                   *string                                                                   `json:"Script,omitempty" xml:"Script,omitempty"`
	ScriptConnection         *GetDataServiceApiResponseBodyDataScriptDetailsScriptConnection           `json:"ScriptConnection,omitempty" xml:"ScriptConnection,omitempty" type:"Struct"`
	ScriptRequestParameters  []*GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters  `json:"ScriptRequestParameters,omitempty" xml:"ScriptRequestParameters,omitempty" type:"Repeated"`
	ScriptResponseParameters []*GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters `json:"ScriptResponseParameters,omitempty" xml:"ScriptResponseParameters,omitempty" type:"Repeated"`
}

func (s GetDataServiceApiResponseBodyDataScriptDetails) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponseBodyDataScriptDetails) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponseBodyDataScriptDetails) SetIsPagedResponse(v bool) *GetDataServiceApiResponseBodyDataScriptDetails {
	s.IsPagedResponse = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetails) SetScript(v string) *GetDataServiceApiResponseBodyDataScriptDetails {
	s.Script = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetails) SetScriptConnection(v *GetDataServiceApiResponseBodyDataScriptDetailsScriptConnection) *GetDataServiceApiResponseBodyDataScriptDetails {
	s.ScriptConnection = v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetails) SetScriptRequestParameters(v []*GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters) *GetDataServiceApiResponseBodyDataScriptDetails {
	s.ScriptRequestParameters = v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetails) SetScriptResponseParameters(v []*GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters) *GetDataServiceApiResponseBodyDataScriptDetails {
	s.ScriptResponseParameters = v
	return s
}

type GetDataServiceApiResponseBodyDataScriptDetailsScriptConnection struct {
	ConnectionId *int64  `json:"ConnectionId,omitempty" xml:"ConnectionId,omitempty"`
	TableName    *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetDataServiceApiResponseBodyDataScriptDetailsScriptConnection) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponseBodyDataScriptDetailsScriptConnection) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptConnection) SetConnectionId(v int64) *GetDataServiceApiResponseBodyDataScriptDetailsScriptConnection {
	s.ConnectionId = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptConnection) SetTableName(v string) *GetDataServiceApiResponseBodyDataScriptDetailsScriptConnection {
	s.TableName = &v
	return s
}

type GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters struct {
	ColumnName           *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	DefaultValue         *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	IsRequiredParameter  *bool   `json:"IsRequiredParameter,omitempty" xml:"IsRequiredParameter,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterOperator    *int32  `json:"ParameterOperator,omitempty" xml:"ParameterOperator,omitempty"`
	ParameterPosition    *int32  `json:"ParameterPosition,omitempty" xml:"ParameterPosition,omitempty"`
}

func (s GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters) SetColumnName(v string) *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.ColumnName = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters) SetDefaultValue(v string) *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.DefaultValue = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters) SetExampleValue(v string) *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.ExampleValue = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters) SetIsRequiredParameter(v bool) *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.IsRequiredParameter = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters) SetParameterDataType(v int32) *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.ParameterDataType = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters) SetParameterDescription(v string) *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.ParameterDescription = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters) SetParameterName(v string) *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.ParameterName = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters) SetParameterOperator(v int32) *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.ParameterOperator = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters) SetParameterPosition(v int32) *GetDataServiceApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.ParameterPosition = &v
	return s
}

type GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters struct {
	ColumnName           *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
}

func (s GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters) SetColumnName(v string) *GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters {
	s.ColumnName = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters) SetExampleValue(v string) *GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters {
	s.ExampleValue = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters) SetParameterDataType(v int32) *GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters {
	s.ParameterDataType = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters) SetParameterDescription(v string) *GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters {
	s.ParameterDescription = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters) SetParameterName(v string) *GetDataServiceApiResponseBodyDataScriptDetailsScriptResponseParameters {
	s.ParameterName = &v
	return s
}

type GetDataServiceApiResponseBodyDataWizardDetails struct {
	IsPagedResponse          *bool                                                                     `json:"IsPagedResponse,omitempty" xml:"IsPagedResponse,omitempty"`
	WizardConnection         *GetDataServiceApiResponseBodyDataWizardDetailsWizardConnection           `json:"WizardConnection,omitempty" xml:"WizardConnection,omitempty" type:"Struct"`
	WizardRequestParameters  []*GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters  `json:"WizardRequestParameters,omitempty" xml:"WizardRequestParameters,omitempty" type:"Repeated"`
	WizardResponseParameters []*GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters `json:"WizardResponseParameters,omitempty" xml:"WizardResponseParameters,omitempty" type:"Repeated"`
}

func (s GetDataServiceApiResponseBodyDataWizardDetails) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponseBodyDataWizardDetails) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponseBodyDataWizardDetails) SetIsPagedResponse(v bool) *GetDataServiceApiResponseBodyDataWizardDetails {
	s.IsPagedResponse = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetails) SetWizardConnection(v *GetDataServiceApiResponseBodyDataWizardDetailsWizardConnection) *GetDataServiceApiResponseBodyDataWizardDetails {
	s.WizardConnection = v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetails) SetWizardRequestParameters(v []*GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters) *GetDataServiceApiResponseBodyDataWizardDetails {
	s.WizardRequestParameters = v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetails) SetWizardResponseParameters(v []*GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters) *GetDataServiceApiResponseBodyDataWizardDetails {
	s.WizardResponseParameters = v
	return s
}

type GetDataServiceApiResponseBodyDataWizardDetailsWizardConnection struct {
	ConnectionId *int64  `json:"ConnectionId,omitempty" xml:"ConnectionId,omitempty"`
	TableName    *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetDataServiceApiResponseBodyDataWizardDetailsWizardConnection) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponseBodyDataWizardDetailsWizardConnection) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardConnection) SetConnectionId(v int64) *GetDataServiceApiResponseBodyDataWizardDetailsWizardConnection {
	s.ConnectionId = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardConnection) SetTableName(v string) *GetDataServiceApiResponseBodyDataWizardDetailsWizardConnection {
	s.TableName = &v
	return s
}

type GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters struct {
	ColumnName           *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	DefaultValue         *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	IsRequiredParameter  *bool   `json:"IsRequiredParameter,omitempty" xml:"IsRequiredParameter,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterOperator    *int32  `json:"ParameterOperator,omitempty" xml:"ParameterOperator,omitempty"`
	ParameterPosition    *int32  `json:"ParameterPosition,omitempty" xml:"ParameterPosition,omitempty"`
}

func (s GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters) SetColumnName(v string) *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.ColumnName = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters) SetDefaultValue(v string) *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.DefaultValue = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters) SetExampleValue(v string) *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.ExampleValue = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters) SetIsRequiredParameter(v bool) *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.IsRequiredParameter = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters) SetParameterDataType(v int32) *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.ParameterDataType = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters) SetParameterDescription(v string) *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.ParameterDescription = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters) SetParameterName(v string) *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.ParameterName = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters) SetParameterOperator(v int32) *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.ParameterOperator = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters) SetParameterPosition(v int32) *GetDataServiceApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.ParameterPosition = &v
	return s
}

type GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters struct {
	ColumnName           *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
}

func (s GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters) SetColumnName(v string) *GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters {
	s.ColumnName = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters) SetExampleValue(v string) *GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters {
	s.ExampleValue = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters) SetParameterDataType(v int32) *GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters {
	s.ParameterDataType = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters) SetParameterDescription(v string) *GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters {
	s.ParameterDescription = &v
	return s
}

func (s *GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters) SetParameterName(v string) *GetDataServiceApiResponseBodyDataWizardDetailsWizardResponseParameters {
	s.ParameterName = &v
	return s
}

type GetDataServiceApiResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDataServiceApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDataServiceApiResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApiResponse) GoString() string {
	return s.String()
}

func (s *GetDataServiceApiResponse) SetHeaders(v map[string]*string) *GetDataServiceApiResponse {
	s.Headers = v
	return s
}

func (s *GetDataServiceApiResponse) SetBody(v *GetDataServiceApiResponseBody) *GetDataServiceApiResponse {
	s.Body = v
	return s
}

type GetDataServiceApplicationRequest struct {
	ApplicationId *int64 `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	ProjectId     *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId      *int64 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s GetDataServiceApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApplicationRequest) GoString() string {
	return s.String()
}

func (s *GetDataServiceApplicationRequest) SetApplicationId(v int64) *GetDataServiceApplicationRequest {
	s.ApplicationId = &v
	return s
}

func (s *GetDataServiceApplicationRequest) SetProjectId(v int64) *GetDataServiceApplicationRequest {
	s.ProjectId = &v
	return s
}

func (s *GetDataServiceApplicationRequest) SetTenantId(v int64) *GetDataServiceApplicationRequest {
	s.TenantId = &v
	return s
}

type GetDataServiceApplicationResponseBody struct {
	Data           *GetDataServiceApplicationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                                    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                     `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDataServiceApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataServiceApplicationResponseBody) SetData(v *GetDataServiceApplicationResponseBodyData) *GetDataServiceApplicationResponseBody {
	s.Data = v
	return s
}

func (s *GetDataServiceApplicationResponseBody) SetErrorCode(v string) *GetDataServiceApplicationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetDataServiceApplicationResponseBody) SetErrorMessage(v string) *GetDataServiceApplicationResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetDataServiceApplicationResponseBody) SetHttpStatusCode(v int32) *GetDataServiceApplicationResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDataServiceApplicationResponseBody) SetRequestId(v string) *GetDataServiceApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDataServiceApplicationResponseBody) SetSuccess(v bool) *GetDataServiceApplicationResponseBody {
	s.Success = &v
	return s
}

type GetDataServiceApplicationResponseBodyData struct {
	ApplicationCode   *string `json:"ApplicationCode,omitempty" xml:"ApplicationCode,omitempty"`
	ApplicationId     *int64  `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	ApplicationKey    *string `json:"ApplicationKey,omitempty" xml:"ApplicationKey,omitempty"`
	ApplicationName   *string `json:"ApplicationName,omitempty" xml:"ApplicationName,omitempty"`
	ApplicationSecret *string `json:"ApplicationSecret,omitempty" xml:"ApplicationSecret,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetDataServiceApplicationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApplicationResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDataServiceApplicationResponseBodyData) SetApplicationCode(v string) *GetDataServiceApplicationResponseBodyData {
	s.ApplicationCode = &v
	return s
}

func (s *GetDataServiceApplicationResponseBodyData) SetApplicationId(v int64) *GetDataServiceApplicationResponseBodyData {
	s.ApplicationId = &v
	return s
}

func (s *GetDataServiceApplicationResponseBodyData) SetApplicationKey(v string) *GetDataServiceApplicationResponseBodyData {
	s.ApplicationKey = &v
	return s
}

func (s *GetDataServiceApplicationResponseBodyData) SetApplicationName(v string) *GetDataServiceApplicationResponseBodyData {
	s.ApplicationName = &v
	return s
}

func (s *GetDataServiceApplicationResponseBodyData) SetApplicationSecret(v string) *GetDataServiceApplicationResponseBodyData {
	s.ApplicationSecret = &v
	return s
}

func (s *GetDataServiceApplicationResponseBodyData) SetProjectId(v int64) *GetDataServiceApplicationResponseBodyData {
	s.ProjectId = &v
	return s
}

type GetDataServiceApplicationResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDataServiceApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDataServiceApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceApplicationResponse) GoString() string {
	return s.String()
}

func (s *GetDataServiceApplicationResponse) SetHeaders(v map[string]*string) *GetDataServiceApplicationResponse {
	s.Headers = v
	return s
}

func (s *GetDataServiceApplicationResponse) SetBody(v *GetDataServiceApplicationResponseBody) *GetDataServiceApplicationResponse {
	s.Body = v
	return s
}

type GetDataServiceFolderRequest struct {
	FolderId  *int64 `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId  *int64 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s GetDataServiceFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceFolderRequest) GoString() string {
	return s.String()
}

func (s *GetDataServiceFolderRequest) SetFolderId(v int64) *GetDataServiceFolderRequest {
	s.FolderId = &v
	return s
}

func (s *GetDataServiceFolderRequest) SetProjectId(v int64) *GetDataServiceFolderRequest {
	s.ProjectId = &v
	return s
}

func (s *GetDataServiceFolderRequest) SetTenantId(v int64) *GetDataServiceFolderRequest {
	s.TenantId = &v
	return s
}

type GetDataServiceFolderResponseBody struct {
	Folder    *GetDataServiceFolderResponseBodyFolder `json:"Folder,omitempty" xml:"Folder,omitempty" type:"Struct"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDataServiceFolderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceFolderResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataServiceFolderResponseBody) SetFolder(v *GetDataServiceFolderResponseBodyFolder) *GetDataServiceFolderResponseBody {
	s.Folder = v
	return s
}

func (s *GetDataServiceFolderResponseBody) SetRequestId(v string) *GetDataServiceFolderResponseBody {
	s.RequestId = &v
	return s
}

type GetDataServiceFolderResponseBodyFolder struct {
	CreatedTime  *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	FolderId     *int64  `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	FolderName   *string `json:"FolderName,omitempty" xml:"FolderName,omitempty"`
	GroupId      *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	ParentId     *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ProjectId    *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId     *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s GetDataServiceFolderResponseBodyFolder) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceFolderResponseBodyFolder) GoString() string {
	return s.String()
}

func (s *GetDataServiceFolderResponseBodyFolder) SetCreatedTime(v string) *GetDataServiceFolderResponseBodyFolder {
	s.CreatedTime = &v
	return s
}

func (s *GetDataServiceFolderResponseBodyFolder) SetFolderId(v int64) *GetDataServiceFolderResponseBodyFolder {
	s.FolderId = &v
	return s
}

func (s *GetDataServiceFolderResponseBodyFolder) SetFolderName(v string) *GetDataServiceFolderResponseBodyFolder {
	s.FolderName = &v
	return s
}

func (s *GetDataServiceFolderResponseBodyFolder) SetGroupId(v string) *GetDataServiceFolderResponseBodyFolder {
	s.GroupId = &v
	return s
}

func (s *GetDataServiceFolderResponseBodyFolder) SetModifiedTime(v string) *GetDataServiceFolderResponseBodyFolder {
	s.ModifiedTime = &v
	return s
}

func (s *GetDataServiceFolderResponseBodyFolder) SetParentId(v int64) *GetDataServiceFolderResponseBodyFolder {
	s.ParentId = &v
	return s
}

func (s *GetDataServiceFolderResponseBodyFolder) SetProjectId(v int64) *GetDataServiceFolderResponseBodyFolder {
	s.ProjectId = &v
	return s
}

func (s *GetDataServiceFolderResponseBodyFolder) SetTenantId(v int64) *GetDataServiceFolderResponseBodyFolder {
	s.TenantId = &v
	return s
}

type GetDataServiceFolderResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDataServiceFolderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDataServiceFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceFolderResponse) GoString() string {
	return s.String()
}

func (s *GetDataServiceFolderResponse) SetHeaders(v map[string]*string) *GetDataServiceFolderResponse {
	s.Headers = v
	return s
}

func (s *GetDataServiceFolderResponse) SetBody(v *GetDataServiceFolderResponseBody) *GetDataServiceFolderResponse {
	s.Body = v
	return s
}

type GetDataServiceGroupRequest struct {
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId  *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s GetDataServiceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceGroupRequest) GoString() string {
	return s.String()
}

func (s *GetDataServiceGroupRequest) SetGroupId(v string) *GetDataServiceGroupRequest {
	s.GroupId = &v
	return s
}

func (s *GetDataServiceGroupRequest) SetProjectId(v int64) *GetDataServiceGroupRequest {
	s.ProjectId = &v
	return s
}

func (s *GetDataServiceGroupRequest) SetTenantId(v int64) *GetDataServiceGroupRequest {
	s.TenantId = &v
	return s
}

type GetDataServiceGroupResponseBody struct {
	Group     *GetDataServiceGroupResponseBodyGroup `json:"Group,omitempty" xml:"Group,omitempty" type:"Struct"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDataServiceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataServiceGroupResponseBody) SetGroup(v *GetDataServiceGroupResponseBodyGroup) *GetDataServiceGroupResponseBody {
	s.Group = v
	return s
}

func (s *GetDataServiceGroupResponseBody) SetRequestId(v string) *GetDataServiceGroupResponseBody {
	s.RequestId = &v
	return s
}

type GetDataServiceGroupResponseBodyGroup struct {
	ApiGatewayGroupId *string `json:"ApiGatewayGroupId,omitempty" xml:"ApiGatewayGroupId,omitempty"`
	CreatedTime       *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	CreatorId         *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId           *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName         *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	ModifiedTime      *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId          *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s GetDataServiceGroupResponseBodyGroup) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceGroupResponseBodyGroup) GoString() string {
	return s.String()
}

func (s *GetDataServiceGroupResponseBodyGroup) SetApiGatewayGroupId(v string) *GetDataServiceGroupResponseBodyGroup {
	s.ApiGatewayGroupId = &v
	return s
}

func (s *GetDataServiceGroupResponseBodyGroup) SetCreatedTime(v string) *GetDataServiceGroupResponseBodyGroup {
	s.CreatedTime = &v
	return s
}

func (s *GetDataServiceGroupResponseBodyGroup) SetCreatorId(v string) *GetDataServiceGroupResponseBodyGroup {
	s.CreatorId = &v
	return s
}

func (s *GetDataServiceGroupResponseBodyGroup) SetDescription(v string) *GetDataServiceGroupResponseBodyGroup {
	s.Description = &v
	return s
}

func (s *GetDataServiceGroupResponseBodyGroup) SetGroupId(v string) *GetDataServiceGroupResponseBodyGroup {
	s.GroupId = &v
	return s
}

func (s *GetDataServiceGroupResponseBodyGroup) SetGroupName(v string) *GetDataServiceGroupResponseBodyGroup {
	s.GroupName = &v
	return s
}

func (s *GetDataServiceGroupResponseBodyGroup) SetModifiedTime(v string) *GetDataServiceGroupResponseBodyGroup {
	s.ModifiedTime = &v
	return s
}

func (s *GetDataServiceGroupResponseBodyGroup) SetProjectId(v int64) *GetDataServiceGroupResponseBodyGroup {
	s.ProjectId = &v
	return s
}

func (s *GetDataServiceGroupResponseBodyGroup) SetTenantId(v int64) *GetDataServiceGroupResponseBodyGroup {
	s.TenantId = &v
	return s
}

type GetDataServiceGroupResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDataServiceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDataServiceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataServiceGroupResponse) GoString() string {
	return s.String()
}

func (s *GetDataServiceGroupResponse) SetHeaders(v map[string]*string) *GetDataServiceGroupResponse {
	s.Headers = v
	return s
}

func (s *GetDataServiceGroupResponse) SetBody(v *GetDataServiceGroupResponseBody) *GetDataServiceGroupResponse {
	s.Body = v
	return s
}

type GetDataServicePublishedApiRequest struct {
	ApiId     *int64 `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId  *int64 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s GetDataServicePublishedApiRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiRequest) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiRequest) SetApiId(v int64) *GetDataServicePublishedApiRequest {
	s.ApiId = &v
	return s
}

func (s *GetDataServicePublishedApiRequest) SetProjectId(v int64) *GetDataServicePublishedApiRequest {
	s.ProjectId = &v
	return s
}

func (s *GetDataServicePublishedApiRequest) SetTenantId(v int64) *GetDataServicePublishedApiRequest {
	s.TenantId = &v
	return s
}

type GetDataServicePublishedApiResponseBody struct {
	Data           *GetDataServicePublishedApiResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                                     `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDataServicePublishedApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBody) SetData(v *GetDataServicePublishedApiResponseBodyData) *GetDataServicePublishedApiResponseBody {
	s.Data = v
	return s
}

func (s *GetDataServicePublishedApiResponseBody) SetErrorCode(v string) *GetDataServicePublishedApiResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBody) SetErrorMessage(v string) *GetDataServicePublishedApiResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBody) SetHttpStatusCode(v int32) *GetDataServicePublishedApiResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBody) SetRequestId(v string) *GetDataServicePublishedApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBody) SetSuccess(v bool) *GetDataServicePublishedApiResponseBody {
	s.Success = &v
	return s
}

type GetDataServicePublishedApiResponseBodyData struct {
	ApiId               *int64                                                         `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiMode             *int32                                                         `json:"ApiMode,omitempty" xml:"ApiMode,omitempty"`
	ApiName             *string                                                        `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiPath             *string                                                        `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	CreatedTime         *string                                                        `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	CreatorId           *string                                                        `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	Description         *string                                                        `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId             *string                                                        `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModifiedTime        *string                                                        `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	OperatorId          *string                                                        `json:"OperatorId,omitempty" xml:"OperatorId,omitempty"`
	ProjectId           *int64                                                         `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Protocols           []*int32                                                       `json:"Protocols,omitempty" xml:"Protocols,omitempty" type:"Repeated"`
	RegistrationDetails *GetDataServicePublishedApiResponseBodyDataRegistrationDetails `json:"RegistrationDetails,omitempty" xml:"RegistrationDetails,omitempty" type:"Struct"`
	RequestMethod       *int32                                                         `json:"RequestMethod,omitempty" xml:"RequestMethod,omitempty"`
	ResponseContentType *int32                                                         `json:"ResponseContentType,omitempty" xml:"ResponseContentType,omitempty"`
	ScriptDetails       *GetDataServicePublishedApiResponseBodyDataScriptDetails       `json:"ScriptDetails,omitempty" xml:"ScriptDetails,omitempty" type:"Struct"`
	Status              *int32                                                         `json:"Status,omitempty" xml:"Status,omitempty"`
	TenantId            *int64                                                         `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Timeout             *int32                                                         `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	VisibleRange        *int32                                                         `json:"VisibleRange,omitempty" xml:"VisibleRange,omitempty"`
	WizardDetails       *GetDataServicePublishedApiResponseBodyDataWizardDetails       `json:"WizardDetails,omitempty" xml:"WizardDetails,omitempty" type:"Struct"`
}

func (s GetDataServicePublishedApiResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyData) SetApiId(v int64) *GetDataServicePublishedApiResponseBodyData {
	s.ApiId = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetApiMode(v int32) *GetDataServicePublishedApiResponseBodyData {
	s.ApiMode = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetApiName(v string) *GetDataServicePublishedApiResponseBodyData {
	s.ApiName = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetApiPath(v string) *GetDataServicePublishedApiResponseBodyData {
	s.ApiPath = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetCreatedTime(v string) *GetDataServicePublishedApiResponseBodyData {
	s.CreatedTime = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetCreatorId(v string) *GetDataServicePublishedApiResponseBodyData {
	s.CreatorId = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetDescription(v string) *GetDataServicePublishedApiResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetGroupId(v string) *GetDataServicePublishedApiResponseBodyData {
	s.GroupId = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetModifiedTime(v string) *GetDataServicePublishedApiResponseBodyData {
	s.ModifiedTime = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetOperatorId(v string) *GetDataServicePublishedApiResponseBodyData {
	s.OperatorId = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetProjectId(v int64) *GetDataServicePublishedApiResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetProtocols(v []*int32) *GetDataServicePublishedApiResponseBodyData {
	s.Protocols = v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetRegistrationDetails(v *GetDataServicePublishedApiResponseBodyDataRegistrationDetails) *GetDataServicePublishedApiResponseBodyData {
	s.RegistrationDetails = v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetRequestMethod(v int32) *GetDataServicePublishedApiResponseBodyData {
	s.RequestMethod = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetResponseContentType(v int32) *GetDataServicePublishedApiResponseBodyData {
	s.ResponseContentType = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetScriptDetails(v *GetDataServicePublishedApiResponseBodyDataScriptDetails) *GetDataServicePublishedApiResponseBodyData {
	s.ScriptDetails = v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetStatus(v int32) *GetDataServicePublishedApiResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetTenantId(v int64) *GetDataServicePublishedApiResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetTimeout(v int32) *GetDataServicePublishedApiResponseBodyData {
	s.Timeout = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetVisibleRange(v int32) *GetDataServicePublishedApiResponseBodyData {
	s.VisibleRange = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyData) SetWizardDetails(v *GetDataServicePublishedApiResponseBodyDataWizardDetails) *GetDataServicePublishedApiResponseBodyData {
	s.WizardDetails = v
	return s
}

type GetDataServicePublishedApiResponseBodyDataRegistrationDetails struct {
	FailedResultSample            *string                                                                                       `json:"FailedResultSample,omitempty" xml:"FailedResultSample,omitempty"`
	RegistrationErrorCodes        []*GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes        `json:"RegistrationErrorCodes,omitempty" xml:"RegistrationErrorCodes,omitempty" type:"Repeated"`
	RegistrationRequestParameters []*GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters `json:"RegistrationRequestParameters,omitempty" xml:"RegistrationRequestParameters,omitempty" type:"Repeated"`
	ServiceContentType            *int32                                                                                        `json:"ServiceContentType,omitempty" xml:"ServiceContentType,omitempty"`
	ServiceHost                   *string                                                                                       `json:"ServiceHost,omitempty" xml:"ServiceHost,omitempty"`
	ServicePath                   *string                                                                                       `json:"ServicePath,omitempty" xml:"ServicePath,omitempty"`
	ServiceRequestBodyDescription *string                                                                                       `json:"ServiceRequestBodyDescription,omitempty" xml:"ServiceRequestBodyDescription,omitempty"`
	SuccessfulResultSample        *string                                                                                       `json:"SuccessfulResultSample,omitempty" xml:"SuccessfulResultSample,omitempty"`
}

func (s GetDataServicePublishedApiResponseBodyDataRegistrationDetails) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyDataRegistrationDetails) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetails) SetFailedResultSample(v string) *GetDataServicePublishedApiResponseBodyDataRegistrationDetails {
	s.FailedResultSample = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetails) SetRegistrationErrorCodes(v []*GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes) *GetDataServicePublishedApiResponseBodyDataRegistrationDetails {
	s.RegistrationErrorCodes = v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetails) SetRegistrationRequestParameters(v []*GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) *GetDataServicePublishedApiResponseBodyDataRegistrationDetails {
	s.RegistrationRequestParameters = v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetails) SetServiceContentType(v int32) *GetDataServicePublishedApiResponseBodyDataRegistrationDetails {
	s.ServiceContentType = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetails) SetServiceHost(v string) *GetDataServicePublishedApiResponseBodyDataRegistrationDetails {
	s.ServiceHost = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetails) SetServicePath(v string) *GetDataServicePublishedApiResponseBodyDataRegistrationDetails {
	s.ServicePath = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetails) SetServiceRequestBodyDescription(v string) *GetDataServicePublishedApiResponseBodyDataRegistrationDetails {
	s.ServiceRequestBodyDescription = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetails) SetSuccessfulResultSample(v string) *GetDataServicePublishedApiResponseBodyDataRegistrationDetails {
	s.SuccessfulResultSample = &v
	return s
}

type GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes struct {
	ErrorCode     *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage  *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorSolution *string `json:"ErrorSolution,omitempty" xml:"ErrorSolution,omitempty"`
}

func (s GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes) SetErrorCode(v string) *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes {
	s.ErrorCode = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes) SetErrorMessage(v string) *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes {
	s.ErrorMessage = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes) SetErrorSolution(v string) *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationErrorCodes {
	s.ErrorSolution = &v
	return s
}

type GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters struct {
	DefaultValue         *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	IsRequiredParameter  *bool   `json:"IsRequiredParameter,omitempty" xml:"IsRequiredParameter,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterOperator    *int32  `json:"ParameterOperator,omitempty" xml:"ParameterOperator,omitempty"`
	ParameterPosition    *int32  `json:"ParameterPosition,omitempty" xml:"ParameterPosition,omitempty"`
}

func (s GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetDefaultValue(v string) *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.DefaultValue = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetExampleValue(v string) *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.ExampleValue = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetIsRequiredParameter(v bool) *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.IsRequiredParameter = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetParameterDataType(v int32) *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.ParameterDataType = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetParameterDescription(v string) *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.ParameterDescription = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetParameterName(v string) *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.ParameterName = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetParameterOperator(v int32) *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.ParameterOperator = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters) SetParameterPosition(v int32) *GetDataServicePublishedApiResponseBodyDataRegistrationDetailsRegistrationRequestParameters {
	s.ParameterPosition = &v
	return s
}

type GetDataServicePublishedApiResponseBodyDataScriptDetails struct {
	FailedResultSample       *string                                                                            `json:"FailedResultSample,omitempty" xml:"FailedResultSample,omitempty"`
	IsPagedResponse          *bool                                                                              `json:"IsPagedResponse,omitempty" xml:"IsPagedResponse,omitempty"`
	Script                   *string                                                                            `json:"Script,omitempty" xml:"Script,omitempty"`
	ScriptConnection         *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptConnection           `json:"ScriptConnection,omitempty" xml:"ScriptConnection,omitempty" type:"Struct"`
	ScriptErrorCodes         []*GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptErrorCodes         `json:"ScriptErrorCodes,omitempty" xml:"ScriptErrorCodes,omitempty" type:"Repeated"`
	ScriptRequestParameters  []*GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters  `json:"ScriptRequestParameters,omitempty" xml:"ScriptRequestParameters,omitempty" type:"Repeated"`
	ScriptResponseParameters []*GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptResponseParameters `json:"ScriptResponseParameters,omitempty" xml:"ScriptResponseParameters,omitempty" type:"Repeated"`
	SuccessfulResultSample   *string                                                                            `json:"SuccessfulResultSample,omitempty" xml:"SuccessfulResultSample,omitempty"`
}

func (s GetDataServicePublishedApiResponseBodyDataScriptDetails) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyDataScriptDetails) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetails) SetFailedResultSample(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetails {
	s.FailedResultSample = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetails) SetIsPagedResponse(v bool) *GetDataServicePublishedApiResponseBodyDataScriptDetails {
	s.IsPagedResponse = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetails) SetScript(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetails {
	s.Script = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetails) SetScriptConnection(v *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptConnection) *GetDataServicePublishedApiResponseBodyDataScriptDetails {
	s.ScriptConnection = v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetails) SetScriptErrorCodes(v []*GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptErrorCodes) *GetDataServicePublishedApiResponseBodyDataScriptDetails {
	s.ScriptErrorCodes = v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetails) SetScriptRequestParameters(v []*GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters) *GetDataServicePublishedApiResponseBodyDataScriptDetails {
	s.ScriptRequestParameters = v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetails) SetScriptResponseParameters(v []*GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptResponseParameters) *GetDataServicePublishedApiResponseBodyDataScriptDetails {
	s.ScriptResponseParameters = v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetails) SetSuccessfulResultSample(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetails {
	s.SuccessfulResultSample = &v
	return s
}

type GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptConnection struct {
	ConnectionId *int64  `json:"ConnectionId,omitempty" xml:"ConnectionId,omitempty"`
	TableName    *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptConnection) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptConnection) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptConnection) SetConnectionId(v int64) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptConnection {
	s.ConnectionId = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptConnection) SetTableName(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptConnection {
	s.TableName = &v
	return s
}

type GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptErrorCodes struct {
	ErrorCode     *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage  *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorSolution *string `json:"ErrorSolution,omitempty" xml:"ErrorSolution,omitempty"`
}

func (s GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptErrorCodes) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptErrorCodes) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptErrorCodes) SetErrorCode(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptErrorCodes {
	s.ErrorCode = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptErrorCodes) SetErrorMessage(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptErrorCodes {
	s.ErrorMessage = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptErrorCodes) SetErrorSolution(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptErrorCodes {
	s.ErrorSolution = &v
	return s
}

type GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters struct {
	DefaultValue         *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	IsRequiredParameter  *bool   `json:"IsRequiredParameter,omitempty" xml:"IsRequiredParameter,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterOperator    *int32  `json:"ParameterOperator,omitempty" xml:"ParameterOperator,omitempty"`
	ParameterPosition    *int32  `json:"ParameterPosition,omitempty" xml:"ParameterPosition,omitempty"`
}

func (s GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters) SetDefaultValue(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.DefaultValue = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters) SetExampleValue(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.ExampleValue = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters) SetIsRequiredParameter(v bool) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.IsRequiredParameter = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters) SetParameterDataType(v int32) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.ParameterDataType = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters) SetParameterDescription(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.ParameterDescription = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters) SetParameterName(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.ParameterName = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters) SetParameterOperator(v int32) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.ParameterOperator = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters) SetParameterPosition(v int32) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptRequestParameters {
	s.ParameterPosition = &v
	return s
}

type GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptResponseParameters struct {
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
}

func (s GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptResponseParameters) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptResponseParameters) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptResponseParameters) SetExampleValue(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptResponseParameters {
	s.ExampleValue = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptResponseParameters) SetParameterDataType(v int32) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptResponseParameters {
	s.ParameterDataType = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptResponseParameters) SetParameterDescription(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptResponseParameters {
	s.ParameterDescription = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptResponseParameters) SetParameterName(v string) *GetDataServicePublishedApiResponseBodyDataScriptDetailsScriptResponseParameters {
	s.ParameterName = &v
	return s
}

type GetDataServicePublishedApiResponseBodyDataWizardDetails struct {
	FailedResultSample       *string                                                                            `json:"FailedResultSample,omitempty" xml:"FailedResultSample,omitempty"`
	IsPagedResponse          *bool                                                                              `json:"IsPagedResponse,omitempty" xml:"IsPagedResponse,omitempty"`
	SuccessfulResultSample   *string                                                                            `json:"SuccessfulResultSample,omitempty" xml:"SuccessfulResultSample,omitempty"`
	WizardConnection         *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardConnection           `json:"WizardConnection,omitempty" xml:"WizardConnection,omitempty" type:"Struct"`
	WizardErrorCodes         []*GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardErrorCodes         `json:"WizardErrorCodes,omitempty" xml:"WizardErrorCodes,omitempty" type:"Repeated"`
	WizardRequestParameters  []*GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters  `json:"WizardRequestParameters,omitempty" xml:"WizardRequestParameters,omitempty" type:"Repeated"`
	WizardResponseParameters []*GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardResponseParameters `json:"WizardResponseParameters,omitempty" xml:"WizardResponseParameters,omitempty" type:"Repeated"`
}

func (s GetDataServicePublishedApiResponseBodyDataWizardDetails) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyDataWizardDetails) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetails) SetFailedResultSample(v string) *GetDataServicePublishedApiResponseBodyDataWizardDetails {
	s.FailedResultSample = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetails) SetIsPagedResponse(v bool) *GetDataServicePublishedApiResponseBodyDataWizardDetails {
	s.IsPagedResponse = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetails) SetSuccessfulResultSample(v string) *GetDataServicePublishedApiResponseBodyDataWizardDetails {
	s.SuccessfulResultSample = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetails) SetWizardConnection(v *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardConnection) *GetDataServicePublishedApiResponseBodyDataWizardDetails {
	s.WizardConnection = v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetails) SetWizardErrorCodes(v []*GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardErrorCodes) *GetDataServicePublishedApiResponseBodyDataWizardDetails {
	s.WizardErrorCodes = v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetails) SetWizardRequestParameters(v []*GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters) *GetDataServicePublishedApiResponseBodyDataWizardDetails {
	s.WizardRequestParameters = v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetails) SetWizardResponseParameters(v []*GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardResponseParameters) *GetDataServicePublishedApiResponseBodyDataWizardDetails {
	s.WizardResponseParameters = v
	return s
}

type GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardConnection struct {
	ConnectionId *int64  `json:"ConnectionId,omitempty" xml:"ConnectionId,omitempty"`
	TableName    *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardConnection) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardConnection) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardConnection) SetConnectionId(v int64) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardConnection {
	s.ConnectionId = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardConnection) SetTableName(v string) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardConnection {
	s.TableName = &v
	return s
}

type GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardErrorCodes struct {
	ErrorCode     *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage  *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorSolution *string `json:"ErrorSolution,omitempty" xml:"ErrorSolution,omitempty"`
}

func (s GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardErrorCodes) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardErrorCodes) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardErrorCodes) SetErrorCode(v string) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardErrorCodes {
	s.ErrorCode = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardErrorCodes) SetErrorMessage(v string) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardErrorCodes {
	s.ErrorMessage = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardErrorCodes) SetErrorSolution(v string) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardErrorCodes {
	s.ErrorSolution = &v
	return s
}

type GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters struct {
	DefaultValue         *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	IsRequiredParameter  *bool   `json:"IsRequiredParameter,omitempty" xml:"IsRequiredParameter,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterOperator    *int32  `json:"ParameterOperator,omitempty" xml:"ParameterOperator,omitempty"`
	ParameterPosition    *int32  `json:"ParameterPosition,omitempty" xml:"ParameterPosition,omitempty"`
}

func (s GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters) SetDefaultValue(v string) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.DefaultValue = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters) SetExampleValue(v string) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.ExampleValue = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters) SetIsRequiredParameter(v bool) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.IsRequiredParameter = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters) SetParameterDataType(v int32) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.ParameterDataType = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters) SetParameterDescription(v string) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.ParameterDescription = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters) SetParameterName(v string) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.ParameterName = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters) SetParameterOperator(v int32) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.ParameterOperator = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters) SetParameterPosition(v int32) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardRequestParameters {
	s.ParameterPosition = &v
	return s
}

type GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardResponseParameters struct {
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
}

func (s GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardResponseParameters) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardResponseParameters) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardResponseParameters) SetExampleValue(v string) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardResponseParameters {
	s.ExampleValue = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardResponseParameters) SetParameterDataType(v int32) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardResponseParameters {
	s.ParameterDataType = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardResponseParameters) SetParameterDescription(v string) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardResponseParameters {
	s.ParameterDescription = &v
	return s
}

func (s *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardResponseParameters) SetParameterName(v string) *GetDataServicePublishedApiResponseBodyDataWizardDetailsWizardResponseParameters {
	s.ParameterName = &v
	return s
}

type GetDataServicePublishedApiResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDataServicePublishedApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDataServicePublishedApiResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataServicePublishedApiResponse) GoString() string {
	return s.String()
}

func (s *GetDataServicePublishedApiResponse) SetHeaders(v map[string]*string) *GetDataServicePublishedApiResponse {
	s.Headers = v
	return s
}

func (s *GetDataServicePublishedApiResponse) SetBody(v *GetDataServicePublishedApiResponseBody) *GetDataServicePublishedApiResponse {
	s.Body = v
	return s
}

type GetDataSourceMetaRequest struct {
	DatasourceName *string `json:"DatasourceName,omitempty" xml:"DatasourceName,omitempty"`
	EnvType        *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	PageNumber     *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetDataSourceMetaRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceMetaRequest) GoString() string {
	return s.String()
}

func (s *GetDataSourceMetaRequest) SetDatasourceName(v string) *GetDataSourceMetaRequest {
	s.DatasourceName = &v
	return s
}

func (s *GetDataSourceMetaRequest) SetEnvType(v string) *GetDataSourceMetaRequest {
	s.EnvType = &v
	return s
}

func (s *GetDataSourceMetaRequest) SetPageNumber(v int64) *GetDataSourceMetaRequest {
	s.PageNumber = &v
	return s
}

func (s *GetDataSourceMetaRequest) SetPageSize(v int64) *GetDataSourceMetaRequest {
	s.PageSize = &v
	return s
}

func (s *GetDataSourceMetaRequest) SetProjectId(v int64) *GetDataSourceMetaRequest {
	s.ProjectId = &v
	return s
}

type GetDataSourceMetaResponseBody struct {
	Data      *GetDataSourceMetaResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDataSourceMetaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceMetaResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataSourceMetaResponseBody) SetData(v *GetDataSourceMetaResponseBodyData) *GetDataSourceMetaResponseBody {
	s.Data = v
	return s
}

func (s *GetDataSourceMetaResponseBody) SetRequestId(v string) *GetDataSourceMetaResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDataSourceMetaResponseBody) SetSuccess(v bool) *GetDataSourceMetaResponseBody {
	s.Success = &v
	return s
}

type GetDataSourceMetaResponseBodyData struct {
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Meta    *string `json:"Meta,omitempty" xml:"Meta,omitempty"`
	Status  *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDataSourceMetaResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceMetaResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDataSourceMetaResponseBodyData) SetMessage(v string) *GetDataSourceMetaResponseBodyData {
	s.Message = &v
	return s
}

func (s *GetDataSourceMetaResponseBodyData) SetMeta(v string) *GetDataSourceMetaResponseBodyData {
	s.Meta = &v
	return s
}

func (s *GetDataSourceMetaResponseBodyData) SetStatus(v string) *GetDataSourceMetaResponseBodyData {
	s.Status = &v
	return s
}

type GetDataSourceMetaResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDataSourceMetaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDataSourceMetaResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceMetaResponse) GoString() string {
	return s.String()
}

func (s *GetDataSourceMetaResponse) SetHeaders(v map[string]*string) *GetDataSourceMetaResponse {
	s.Headers = v
	return s
}

func (s *GetDataSourceMetaResponse) SetBody(v *GetDataSourceMetaResponseBody) *GetDataSourceMetaResponse {
	s.Body = v
	return s
}

type GetDeploymentRequest struct {
	DeploymentId      *int64  `json:"DeploymentId,omitempty" xml:"DeploymentId,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s GetDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentRequest) GoString() string {
	return s.String()
}

func (s *GetDeploymentRequest) SetDeploymentId(v int64) *GetDeploymentRequest {
	s.DeploymentId = &v
	return s
}

func (s *GetDeploymentRequest) SetProjectId(v int64) *GetDeploymentRequest {
	s.ProjectId = &v
	return s
}

func (s *GetDeploymentRequest) SetProjectIdentifier(v string) *GetDeploymentRequest {
	s.ProjectIdentifier = &v
	return s
}

type GetDeploymentResponseBody struct {
	Data           *GetDeploymentResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                        `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                         `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDeploymentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeploymentResponseBody) SetData(v *GetDeploymentResponseBodyData) *GetDeploymentResponseBody {
	s.Data = v
	return s
}

func (s *GetDeploymentResponseBody) SetErrorCode(v string) *GetDeploymentResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetDeploymentResponseBody) SetErrorMessage(v string) *GetDeploymentResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetDeploymentResponseBody) SetHttpStatusCode(v int32) *GetDeploymentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDeploymentResponseBody) SetRequestId(v string) *GetDeploymentResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDeploymentResponseBody) SetSuccess(v bool) *GetDeploymentResponseBody {
	s.Success = &v
	return s
}

type GetDeploymentResponseBodyData struct {
	Deployment *GetDeploymentResponseBodyDataDeployment `json:"Deployment,omitempty" xml:"Deployment,omitempty" type:"Struct"`
}

func (s GetDeploymentResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDeploymentResponseBodyData) SetDeployment(v *GetDeploymentResponseBodyDataDeployment) *GetDeploymentResponseBodyData {
	s.Deployment = v
	return s
}

type GetDeploymentResponseBodyDataDeployment struct {
	CheckingStatus  *int32  `json:"CheckingStatus,omitempty" xml:"CheckingStatus,omitempty"`
	CreateTime      *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreatorId       *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	ErrorMessage    *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ExecuteTime     *int64  `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	FromEnvironment *int32  `json:"FromEnvironment,omitempty" xml:"FromEnvironment,omitempty"`
	HandlerId       *string `json:"HandlerId,omitempty" xml:"HandlerId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Status          *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	ToEnvironment   *int32  `json:"ToEnvironment,omitempty" xml:"ToEnvironment,omitempty"`
}

func (s GetDeploymentResponseBodyDataDeployment) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentResponseBodyDataDeployment) GoString() string {
	return s.String()
}

func (s *GetDeploymentResponseBodyDataDeployment) SetCheckingStatus(v int32) *GetDeploymentResponseBodyDataDeployment {
	s.CheckingStatus = &v
	return s
}

func (s *GetDeploymentResponseBodyDataDeployment) SetCreateTime(v int64) *GetDeploymentResponseBodyDataDeployment {
	s.CreateTime = &v
	return s
}

func (s *GetDeploymentResponseBodyDataDeployment) SetCreatorId(v string) *GetDeploymentResponseBodyDataDeployment {
	s.CreatorId = &v
	return s
}

func (s *GetDeploymentResponseBodyDataDeployment) SetErrorMessage(v string) *GetDeploymentResponseBodyDataDeployment {
	s.ErrorMessage = &v
	return s
}

func (s *GetDeploymentResponseBodyDataDeployment) SetExecuteTime(v int64) *GetDeploymentResponseBodyDataDeployment {
	s.ExecuteTime = &v
	return s
}

func (s *GetDeploymentResponseBodyDataDeployment) SetFromEnvironment(v int32) *GetDeploymentResponseBodyDataDeployment {
	s.FromEnvironment = &v
	return s
}

func (s *GetDeploymentResponseBodyDataDeployment) SetHandlerId(v string) *GetDeploymentResponseBodyDataDeployment {
	s.HandlerId = &v
	return s
}

func (s *GetDeploymentResponseBodyDataDeployment) SetName(v string) *GetDeploymentResponseBodyDataDeployment {
	s.Name = &v
	return s
}

func (s *GetDeploymentResponseBodyDataDeployment) SetStatus(v int32) *GetDeploymentResponseBodyDataDeployment {
	s.Status = &v
	return s
}

func (s *GetDeploymentResponseBodyDataDeployment) SetToEnvironment(v int32) *GetDeploymentResponseBodyDataDeployment {
	s.ToEnvironment = &v
	return s
}

type GetDeploymentResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDeploymentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentResponse) GoString() string {
	return s.String()
}

func (s *GetDeploymentResponse) SetHeaders(v map[string]*string) *GetDeploymentResponse {
	s.Headers = v
	return s
}

func (s *GetDeploymentResponse) SetBody(v *GetDeploymentResponseBody) *GetDeploymentResponse {
	s.Body = v
	return s
}

type GetFileRequest struct {
	FileId            *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	NodeId            *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s GetFileRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileRequest) GoString() string {
	return s.String()
}

func (s *GetFileRequest) SetFileId(v int64) *GetFileRequest {
	s.FileId = &v
	return s
}

func (s *GetFileRequest) SetNodeId(v int64) *GetFileRequest {
	s.NodeId = &v
	return s
}

func (s *GetFileRequest) SetProjectId(v int64) *GetFileRequest {
	s.ProjectId = &v
	return s
}

func (s *GetFileRequest) SetProjectIdentifier(v string) *GetFileRequest {
	s.ProjectIdentifier = &v
	return s
}

type GetFileResponseBody struct {
	Data           *GetFileResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBody) GoString() string {
	return s.String()
}

func (s *GetFileResponseBody) SetData(v *GetFileResponseBodyData) *GetFileResponseBody {
	s.Data = v
	return s
}

func (s *GetFileResponseBody) SetErrorCode(v string) *GetFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetFileResponseBody) SetErrorMessage(v string) *GetFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetFileResponseBody) SetHttpStatusCode(v int32) *GetFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetFileResponseBody) SetRequestId(v string) *GetFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFileResponseBody) SetSuccess(v bool) *GetFileResponseBody {
	s.Success = &v
	return s
}

type GetFileResponseBodyData struct {
	File              *GetFileResponseBodyDataFile              `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	NodeConfiguration *GetFileResponseBodyDataNodeConfiguration `json:"NodeConfiguration,omitempty" xml:"NodeConfiguration,omitempty" type:"Struct"`
}

func (s GetFileResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFileResponseBodyData) SetFile(v *GetFileResponseBodyDataFile) *GetFileResponseBodyData {
	s.File = v
	return s
}

func (s *GetFileResponseBodyData) SetNodeConfiguration(v *GetFileResponseBodyDataNodeConfiguration) *GetFileResponseBodyData {
	s.NodeConfiguration = v
	return s
}

type GetFileResponseBodyDataFile struct {
	AdvancedSettings *string `json:"AdvancedSettings,omitempty" xml:"AdvancedSettings,omitempty"`
	AutoParsing      *bool   `json:"AutoParsing,omitempty" xml:"AutoParsing,omitempty"`
	BizId            *int64  `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BusinessId       *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	CommitStatus     *int32  `json:"CommitStatus,omitempty" xml:"CommitStatus,omitempty"`
	ConnectionName   *string `json:"ConnectionName,omitempty" xml:"ConnectionName,omitempty"`
	Content          *string `json:"Content,omitempty" xml:"Content,omitempty"`
	CreateTime       *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreateUser       *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	CurrentVersion   *int32  `json:"CurrentVersion,omitempty" xml:"CurrentVersion,omitempty"`
	DeletedStatus    *string `json:"DeletedStatus,omitempty" xml:"DeletedStatus,omitempty"`
	FileDescription  *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	FileFolderId     *string `json:"FileFolderId,omitempty" xml:"FileFolderId,omitempty"`
	FileName         *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FileType         *int32  `json:"FileType,omitempty" xml:"FileType,omitempty"`
	IsMaxCompute     *bool   `json:"IsMaxCompute,omitempty" xml:"IsMaxCompute,omitempty"`
	LastEditTime     *int64  `json:"LastEditTime,omitempty" xml:"LastEditTime,omitempty"`
	LastEditUser     *string `json:"LastEditUser,omitempty" xml:"LastEditUser,omitempty"`
	NodeId           *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	Owner            *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ParentId         *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	UseType          *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s GetFileResponseBodyDataFile) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBodyDataFile) GoString() string {
	return s.String()
}

func (s *GetFileResponseBodyDataFile) SetAdvancedSettings(v string) *GetFileResponseBodyDataFile {
	s.AdvancedSettings = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetAutoParsing(v bool) *GetFileResponseBodyDataFile {
	s.AutoParsing = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetBizId(v int64) *GetFileResponseBodyDataFile {
	s.BizId = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetBusinessId(v int64) *GetFileResponseBodyDataFile {
	s.BusinessId = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetCommitStatus(v int32) *GetFileResponseBodyDataFile {
	s.CommitStatus = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetConnectionName(v string) *GetFileResponseBodyDataFile {
	s.ConnectionName = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetContent(v string) *GetFileResponseBodyDataFile {
	s.Content = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetCreateTime(v int64) *GetFileResponseBodyDataFile {
	s.CreateTime = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetCreateUser(v string) *GetFileResponseBodyDataFile {
	s.CreateUser = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetCurrentVersion(v int32) *GetFileResponseBodyDataFile {
	s.CurrentVersion = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetDeletedStatus(v string) *GetFileResponseBodyDataFile {
	s.DeletedStatus = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetFileDescription(v string) *GetFileResponseBodyDataFile {
	s.FileDescription = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetFileFolderId(v string) *GetFileResponseBodyDataFile {
	s.FileFolderId = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetFileName(v string) *GetFileResponseBodyDataFile {
	s.FileName = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetFileType(v int32) *GetFileResponseBodyDataFile {
	s.FileType = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetIsMaxCompute(v bool) *GetFileResponseBodyDataFile {
	s.IsMaxCompute = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetLastEditTime(v int64) *GetFileResponseBodyDataFile {
	s.LastEditTime = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetLastEditUser(v string) *GetFileResponseBodyDataFile {
	s.LastEditUser = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetNodeId(v int64) *GetFileResponseBodyDataFile {
	s.NodeId = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetOwner(v string) *GetFileResponseBodyDataFile {
	s.Owner = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetParentId(v int64) *GetFileResponseBodyDataFile {
	s.ParentId = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetUseType(v string) *GetFileResponseBodyDataFile {
	s.UseType = &v
	return s
}

type GetFileResponseBodyDataNodeConfiguration struct {
	AutoRerunIntervalMillis *int32                                                `json:"AutoRerunIntervalMillis,omitempty" xml:"AutoRerunIntervalMillis,omitempty"`
	AutoRerunTimes          *int32                                                `json:"AutoRerunTimes,omitempty" xml:"AutoRerunTimes,omitempty"`
	CronExpress             *string                                               `json:"CronExpress,omitempty" xml:"CronExpress,omitempty"`
	CycleType               *string                                               `json:"CycleType,omitempty" xml:"CycleType,omitempty"`
	DependentNodeIdList     *string                                               `json:"DependentNodeIdList,omitempty" xml:"DependentNodeIdList,omitempty"`
	DependentType           *string                                               `json:"DependentType,omitempty" xml:"DependentType,omitempty"`
	EndEffectDate           *int64                                                `json:"EndEffectDate,omitempty" xml:"EndEffectDate,omitempty"`
	InputList               []*GetFileResponseBodyDataNodeConfigurationInputList  `json:"InputList,omitempty" xml:"InputList,omitempty" type:"Repeated"`
	OutputList              []*GetFileResponseBodyDataNodeConfigurationOutputList `json:"OutputList,omitempty" xml:"OutputList,omitempty" type:"Repeated"`
	ParaValue               *string                                               `json:"ParaValue,omitempty" xml:"ParaValue,omitempty"`
	RerunMode               *string                                               `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	ResourceGroupId         *int64                                                `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SchedulerType           *string                                               `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
	StartEffectDate         *int64                                                `json:"StartEffectDate,omitempty" xml:"StartEffectDate,omitempty"`
	StartImmediately        *bool                                                 `json:"StartImmediately,omitempty" xml:"StartImmediately,omitempty"`
	Stop                    *bool                                                 `json:"Stop,omitempty" xml:"Stop,omitempty"`
}

func (s GetFileResponseBodyDataNodeConfiguration) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBodyDataNodeConfiguration) GoString() string {
	return s.String()
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetAutoRerunIntervalMillis(v int32) *GetFileResponseBodyDataNodeConfiguration {
	s.AutoRerunIntervalMillis = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetAutoRerunTimes(v int32) *GetFileResponseBodyDataNodeConfiguration {
	s.AutoRerunTimes = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetCronExpress(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.CronExpress = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetCycleType(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.CycleType = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetDependentNodeIdList(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.DependentNodeIdList = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetDependentType(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.DependentType = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetEndEffectDate(v int64) *GetFileResponseBodyDataNodeConfiguration {
	s.EndEffectDate = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetInputList(v []*GetFileResponseBodyDataNodeConfigurationInputList) *GetFileResponseBodyDataNodeConfiguration {
	s.InputList = v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetOutputList(v []*GetFileResponseBodyDataNodeConfigurationOutputList) *GetFileResponseBodyDataNodeConfiguration {
	s.OutputList = v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetParaValue(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.ParaValue = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetRerunMode(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.RerunMode = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetResourceGroupId(v int64) *GetFileResponseBodyDataNodeConfiguration {
	s.ResourceGroupId = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetSchedulerType(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.SchedulerType = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetStartEffectDate(v int64) *GetFileResponseBodyDataNodeConfiguration {
	s.StartEffectDate = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetStartImmediately(v bool) *GetFileResponseBodyDataNodeConfiguration {
	s.StartImmediately = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetStop(v bool) *GetFileResponseBodyDataNodeConfiguration {
	s.Stop = &v
	return s
}

type GetFileResponseBodyDataNodeConfigurationInputList struct {
	Input     *string `json:"Input,omitempty" xml:"Input,omitempty"`
	ParseType *string `json:"ParseType,omitempty" xml:"ParseType,omitempty"`
}

func (s GetFileResponseBodyDataNodeConfigurationInputList) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBodyDataNodeConfigurationInputList) GoString() string {
	return s.String()
}

func (s *GetFileResponseBodyDataNodeConfigurationInputList) SetInput(v string) *GetFileResponseBodyDataNodeConfigurationInputList {
	s.Input = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfigurationInputList) SetParseType(v string) *GetFileResponseBodyDataNodeConfigurationInputList {
	s.ParseType = &v
	return s
}

type GetFileResponseBodyDataNodeConfigurationOutputList struct {
	Output       *string `json:"Output,omitempty" xml:"Output,omitempty"`
	RefTableName *string `json:"RefTableName,omitempty" xml:"RefTableName,omitempty"`
}

func (s GetFileResponseBodyDataNodeConfigurationOutputList) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBodyDataNodeConfigurationOutputList) GoString() string {
	return s.String()
}

func (s *GetFileResponseBodyDataNodeConfigurationOutputList) SetOutput(v string) *GetFileResponseBodyDataNodeConfigurationOutputList {
	s.Output = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfigurationOutputList) SetRefTableName(v string) *GetFileResponseBodyDataNodeConfigurationOutputList {
	s.RefTableName = &v
	return s
}

type GetFileResponse struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetFileResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponse) GoString() string {
	return s.String()
}

func (s *GetFileResponse) SetHeaders(v map[string]*string) *GetFileResponse {
	s.Headers = v
	return s
}

func (s *GetFileResponse) SetBody(v *GetFileResponseBody) *GetFileResponse {
	s.Body = v
	return s
}

type GetFileTypeStatisticRequest struct {
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	ProjectId  *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetFileTypeStatisticRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileTypeStatisticRequest) GoString() string {
	return s.String()
}

func (s *GetFileTypeStatisticRequest) SetProjectEnv(v string) *GetFileTypeStatisticRequest {
	s.ProjectEnv = &v
	return s
}

func (s *GetFileTypeStatisticRequest) SetProjectId(v int64) *GetFileTypeStatisticRequest {
	s.ProjectId = &v
	return s
}

type GetFileTypeStatisticResponseBody struct {
	ProgramTypeAndCounts []*GetFileTypeStatisticResponseBodyProgramTypeAndCounts `json:"ProgramTypeAndCounts,omitempty" xml:"ProgramTypeAndCounts,omitempty" type:"Repeated"`
	RequestId            *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetFileTypeStatisticResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFileTypeStatisticResponseBody) GoString() string {
	return s.String()
}

func (s *GetFileTypeStatisticResponseBody) SetProgramTypeAndCounts(v []*GetFileTypeStatisticResponseBodyProgramTypeAndCounts) *GetFileTypeStatisticResponseBody {
	s.ProgramTypeAndCounts = v
	return s
}

func (s *GetFileTypeStatisticResponseBody) SetRequestId(v string) *GetFileTypeStatisticResponseBody {
	s.RequestId = &v
	return s
}

type GetFileTypeStatisticResponseBodyProgramTypeAndCounts struct {
	Count       *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	ProgramType *string `json:"ProgramType,omitempty" xml:"ProgramType,omitempty"`
}

func (s GetFileTypeStatisticResponseBodyProgramTypeAndCounts) String() string {
	return tea.Prettify(s)
}

func (s GetFileTypeStatisticResponseBodyProgramTypeAndCounts) GoString() string {
	return s.String()
}

func (s *GetFileTypeStatisticResponseBodyProgramTypeAndCounts) SetCount(v int32) *GetFileTypeStatisticResponseBodyProgramTypeAndCounts {
	s.Count = &v
	return s
}

func (s *GetFileTypeStatisticResponseBodyProgramTypeAndCounts) SetProgramType(v string) *GetFileTypeStatisticResponseBodyProgramTypeAndCounts {
	s.ProgramType = &v
	return s
}

type GetFileTypeStatisticResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetFileTypeStatisticResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetFileTypeStatisticResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileTypeStatisticResponse) GoString() string {
	return s.String()
}

func (s *GetFileTypeStatisticResponse) SetHeaders(v map[string]*string) *GetFileTypeStatisticResponse {
	s.Headers = v
	return s
}

func (s *GetFileTypeStatisticResponse) SetBody(v *GetFileTypeStatisticResponseBody) *GetFileTypeStatisticResponse {
	s.Body = v
	return s
}

type GetFileVersionRequest struct {
	FileId            *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	FileVersion       *int32  `json:"FileVersion,omitempty" xml:"FileVersion,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s GetFileVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileVersionRequest) GoString() string {
	return s.String()
}

func (s *GetFileVersionRequest) SetFileId(v int64) *GetFileVersionRequest {
	s.FileId = &v
	return s
}

func (s *GetFileVersionRequest) SetFileVersion(v int32) *GetFileVersionRequest {
	s.FileVersion = &v
	return s
}

func (s *GetFileVersionRequest) SetProjectId(v int64) *GetFileVersionRequest {
	s.ProjectId = &v
	return s
}

func (s *GetFileVersionRequest) SetProjectIdentifier(v string) *GetFileVersionRequest {
	s.ProjectIdentifier = &v
	return s
}

type GetFileVersionResponseBody struct {
	Data           *GetFileVersionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                         `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFileVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFileVersionResponseBody) GoString() string {
	return s.String()
}

func (s *GetFileVersionResponseBody) SetData(v *GetFileVersionResponseBodyData) *GetFileVersionResponseBody {
	s.Data = v
	return s
}

func (s *GetFileVersionResponseBody) SetErrorCode(v string) *GetFileVersionResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetFileVersionResponseBody) SetErrorMessage(v string) *GetFileVersionResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetFileVersionResponseBody) SetHttpStatusCode(v int32) *GetFileVersionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetFileVersionResponseBody) SetRequestId(v string) *GetFileVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFileVersionResponseBody) SetSuccess(v bool) *GetFileVersionResponseBody {
	s.Success = &v
	return s
}

type GetFileVersionResponseBodyData struct {
	ChangeType          *string `json:"ChangeType,omitempty" xml:"ChangeType,omitempty"`
	Comment             *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CommitTime          *int64  `json:"CommitTime,omitempty" xml:"CommitTime,omitempty"`
	CommitUser          *string `json:"CommitUser,omitempty" xml:"CommitUser,omitempty"`
	FileContent         *string `json:"FileContent,omitempty" xml:"FileContent,omitempty"`
	FileName            *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FilePropertyContent *string `json:"FilePropertyContent,omitempty" xml:"FilePropertyContent,omitempty"`
	FileVersion         *int32  `json:"FileVersion,omitempty" xml:"FileVersion,omitempty"`
	IsCurrentProd       *bool   `json:"IsCurrentProd,omitempty" xml:"IsCurrentProd,omitempty"`
	NodeContent         *string `json:"NodeContent,omitempty" xml:"NodeContent,omitempty"`
	NodeId              *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	Status              *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UseType             *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s GetFileVersionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFileVersionResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFileVersionResponseBodyData) SetChangeType(v string) *GetFileVersionResponseBodyData {
	s.ChangeType = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetComment(v string) *GetFileVersionResponseBodyData {
	s.Comment = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetCommitTime(v int64) *GetFileVersionResponseBodyData {
	s.CommitTime = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetCommitUser(v string) *GetFileVersionResponseBodyData {
	s.CommitUser = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetFileContent(v string) *GetFileVersionResponseBodyData {
	s.FileContent = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetFileName(v string) *GetFileVersionResponseBodyData {
	s.FileName = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetFilePropertyContent(v string) *GetFileVersionResponseBodyData {
	s.FilePropertyContent = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetFileVersion(v int32) *GetFileVersionResponseBodyData {
	s.FileVersion = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetIsCurrentProd(v bool) *GetFileVersionResponseBodyData {
	s.IsCurrentProd = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetNodeContent(v string) *GetFileVersionResponseBodyData {
	s.NodeContent = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetNodeId(v int64) *GetFileVersionResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetStatus(v string) *GetFileVersionResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetUseType(v string) *GetFileVersionResponseBodyData {
	s.UseType = &v
	return s
}

type GetFileVersionResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetFileVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetFileVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileVersionResponse) GoString() string {
	return s.String()
}

func (s *GetFileVersionResponse) SetHeaders(v map[string]*string) *GetFileVersionResponse {
	s.Headers = v
	return s
}

func (s *GetFileVersionResponse) SetBody(v *GetFileVersionResponseBody) *GetFileVersionResponse {
	s.Body = v
	return s
}

type GetFolderRequest struct {
	FolderId          *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	FolderPath        *string `json:"FolderPath,omitempty" xml:"FolderPath,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s GetFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFolderRequest) GoString() string {
	return s.String()
}

func (s *GetFolderRequest) SetFolderId(v string) *GetFolderRequest {
	s.FolderId = &v
	return s
}

func (s *GetFolderRequest) SetFolderPath(v string) *GetFolderRequest {
	s.FolderPath = &v
	return s
}

func (s *GetFolderRequest) SetProjectId(v int64) *GetFolderRequest {
	s.ProjectId = &v
	return s
}

func (s *GetFolderRequest) SetProjectIdentifier(v string) *GetFolderRequest {
	s.ProjectIdentifier = &v
	return s
}

type GetFolderResponseBody struct {
	Data           *GetFolderResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                     `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFolderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFolderResponseBody) GoString() string {
	return s.String()
}

func (s *GetFolderResponseBody) SetData(v *GetFolderResponseBodyData) *GetFolderResponseBody {
	s.Data = v
	return s
}

func (s *GetFolderResponseBody) SetErrorCode(v string) *GetFolderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetFolderResponseBody) SetErrorMessage(v string) *GetFolderResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetFolderResponseBody) SetHttpStatusCode(v int32) *GetFolderResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetFolderResponseBody) SetRequestId(v string) *GetFolderResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFolderResponseBody) SetSuccess(v bool) *GetFolderResponseBody {
	s.Success = &v
	return s
}

type GetFolderResponseBodyData struct {
	FolderId   *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	FolderPath *string `json:"FolderPath,omitempty" xml:"FolderPath,omitempty"`
}

func (s GetFolderResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFolderResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFolderResponseBodyData) SetFolderId(v string) *GetFolderResponseBodyData {
	s.FolderId = &v
	return s
}

func (s *GetFolderResponseBodyData) SetFolderPath(v string) *GetFolderResponseBodyData {
	s.FolderPath = &v
	return s
}

type GetFolderResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetFolderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFolderResponse) GoString() string {
	return s.String()
}

func (s *GetFolderResponse) SetHeaders(v map[string]*string) *GetFolderResponse {
	s.Headers = v
	return s
}

func (s *GetFolderResponse) SetBody(v *GetFolderResponseBody) *GetFolderResponse {
	s.Body = v
	return s
}

type GetIDEEventDetailRequest struct {
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetIDEEventDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailRequest) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailRequest) SetMessageId(v string) *GetIDEEventDetailRequest {
	s.MessageId = &v
	return s
}

func (s *GetIDEEventDetailRequest) SetProjectId(v int64) *GetIDEEventDetailRequest {
	s.ProjectId = &v
	return s
}

type GetIDEEventDetailResponseBody struct {
	EventDetail *GetIDEEventDetailResponseBodyEventDetail `json:"EventDetail,omitempty" xml:"EventDetail,omitempty" type:"Struct"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetIDEEventDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBody) SetEventDetail(v *GetIDEEventDetailResponseBodyEventDetail) *GetIDEEventDetailResponseBody {
	s.EventDetail = v
	return s
}

func (s *GetIDEEventDetailResponseBody) SetRequestId(v string) *GetIDEEventDetailResponseBody {
	s.RequestId = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetail struct {
	CommittedFile        *GetIDEEventDetailResponseBodyEventDetailCommittedFile        `json:"CommittedFile,omitempty" xml:"CommittedFile,omitempty" type:"Struct"`
	DeletedFile          *GetIDEEventDetailResponseBodyEventDetailDeletedFile          `json:"DeletedFile,omitempty" xml:"DeletedFile,omitempty" type:"Struct"`
	FileExecutionCommand *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand `json:"FileExecutionCommand,omitempty" xml:"FileExecutionCommand,omitempty" type:"Struct"`
	TableModel           *GetIDEEventDetailResponseBodyEventDetailTableModel           `json:"TableModel,omitempty" xml:"TableModel,omitempty" type:"Struct"`
}

func (s GetIDEEventDetailResponseBodyEventDetail) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetail) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetail) SetCommittedFile(v *GetIDEEventDetailResponseBodyEventDetailCommittedFile) *GetIDEEventDetailResponseBodyEventDetail {
	s.CommittedFile = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetail) SetDeletedFile(v *GetIDEEventDetailResponseBodyEventDetailDeletedFile) *GetIDEEventDetailResponseBodyEventDetail {
	s.DeletedFile = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetail) SetFileExecutionCommand(v *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) *GetIDEEventDetailResponseBodyEventDetail {
	s.FileExecutionCommand = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetail) SetTableModel(v *GetIDEEventDetailResponseBodyEventDetailTableModel) *GetIDEEventDetailResponseBodyEventDetail {
	s.TableModel = v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailCommittedFile struct {
	ChangeType          *string                                                                   `json:"ChangeType,omitempty" xml:"ChangeType,omitempty"`
	Comment             *string                                                                   `json:"Comment,omitempty" xml:"Comment,omitempty"`
	Committor           *string                                                                   `json:"Committor,omitempty" xml:"Committor,omitempty"`
	Content             *string                                                                   `json:"Content,omitempty" xml:"Content,omitempty"`
	FileId              *int64                                                                    `json:"FileId,omitempty" xml:"FileId,omitempty"`
	FileName            *string                                                                   `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FilePropertyContent *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent `json:"FilePropertyContent,omitempty" xml:"FilePropertyContent,omitempty" type:"Struct"`
	FileType            *int64                                                                    `json:"FileType,omitempty" xml:"FileType,omitempty"`
	NodeConfiguration   *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration   `json:"NodeConfiguration,omitempty" xml:"NodeConfiguration,omitempty" type:"Struct"`
	NodeId              *int64                                                                    `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	UseType             *string                                                                   `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFile) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFile) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetChangeType(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.ChangeType = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetComment(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.Comment = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetCommittor(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.Committor = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetContent(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.Content = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetFileId(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.FileId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetFileName(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.FileName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetFilePropertyContent(v *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.FilePropertyContent = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetFileType(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.FileType = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetNodeConfiguration(v *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.NodeConfiguration = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetNodeId(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.NodeId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetUseType(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.UseType = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent struct {
	BusinessId     *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	CurrentVersion *int64  `json:"CurrentVersion,omitempty" xml:"CurrentVersion,omitempty"`
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	FolderId       *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	Owner          *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ParentFileId   *int64  `json:"ParentFileId,omitempty" xml:"ParentFileId,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) SetBusinessId(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent {
	s.BusinessId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) SetCurrentVersion(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent {
	s.CurrentVersion = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) SetDataSourceName(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent {
	s.DataSourceName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) SetFolderId(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent {
	s.FolderId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) SetOwner(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent {
	s.Owner = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) SetParentFileId(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent {
	s.ParentFileId = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration struct {
	AutoRerunIntervalMillis *int64                                                                              `json:"AutoRerunIntervalMillis,omitempty" xml:"AutoRerunIntervalMillis,omitempty"`
	AutoRerunTimes          *int64                                                                              `json:"AutoRerunTimes,omitempty" xml:"AutoRerunTimes,omitempty"`
	CronExpress             *string                                                                             `json:"CronExpress,omitempty" xml:"CronExpress,omitempty"`
	CycleType               *string                                                                             `json:"CycleType,omitempty" xml:"CycleType,omitempty"`
	DependentNodeIdList     *string                                                                             `json:"DependentNodeIdList,omitempty" xml:"DependentNodeIdList,omitempty"`
	DependentType           *string                                                                             `json:"DependentType,omitempty" xml:"DependentType,omitempty"`
	InputList               []*GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList  `json:"InputList,omitempty" xml:"InputList,omitempty" type:"Repeated"`
	OutputList              []*GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList `json:"OutputList,omitempty" xml:"OutputList,omitempty" type:"Repeated"`
	ParaValue               *string                                                                             `json:"ParaValue,omitempty" xml:"ParaValue,omitempty"`
	RerunMode               *string                                                                             `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	ResourceGroupId         *int64                                                                              `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SchedulerType           *string                                                                             `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetAutoRerunIntervalMillis(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.AutoRerunIntervalMillis = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetAutoRerunTimes(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.AutoRerunTimes = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetCronExpress(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.CronExpress = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetCycleType(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.CycleType = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetDependentNodeIdList(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.DependentNodeIdList = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetDependentType(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.DependentType = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetInputList(v []*GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.InputList = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetOutputList(v []*GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.OutputList = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetParaValue(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.ParaValue = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetRerunMode(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.RerunMode = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetResourceGroupId(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.ResourceGroupId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetSchedulerType(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.SchedulerType = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList struct {
	Input     *string `json:"Input,omitempty" xml:"Input,omitempty"`
	ParseType *string `json:"ParseType,omitempty" xml:"ParseType,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList) SetInput(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList {
	s.Input = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList) SetParseType(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList {
	s.ParseType = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList struct {
	Output       *string `json:"Output,omitempty" xml:"Output,omitempty"`
	RefTableName *string `json:"RefTableName,omitempty" xml:"RefTableName,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList) SetOutput(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList {
	s.Output = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList) SetRefTableName(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList {
	s.RefTableName = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailDeletedFile struct {
	BusinessId     *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	Content        *string `json:"Content,omitempty" xml:"Content,omitempty"`
	CurrentVersion *int64  `json:"CurrentVersion,omitempty" xml:"CurrentVersion,omitempty"`
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	FileId         *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	FileName       *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FileType       *int64  `json:"FileType,omitempty" xml:"FileType,omitempty"`
	FolderId       *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	NodeId         *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	Owner          *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ParentFileId   *int64  `json:"ParentFileId,omitempty" xml:"ParentFileId,omitempty"`
	UseType        *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailDeletedFile) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailDeletedFile) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetBusinessId(v int64) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.BusinessId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetContent(v string) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.Content = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetCurrentVersion(v int64) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.CurrentVersion = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetDataSourceName(v string) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.DataSourceName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetFileId(v int64) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.FileId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetFileName(v string) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.FileName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetFileType(v int64) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.FileType = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetFolderId(v string) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.FolderId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetNodeId(v int64) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.NodeId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetOwner(v string) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.Owner = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetParentFileId(v int64) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.ParentFileId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetUseType(v string) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.UseType = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand struct {
	Content        *string `json:"Content,omitempty" xml:"Content,omitempty"`
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	FileId         *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	FileType       *int64  `json:"FileType,omitempty" xml:"FileType,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) SetContent(v string) *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand {
	s.Content = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) SetDataSourceName(v string) *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand {
	s.DataSourceName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) SetFileId(v int64) *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand {
	s.FileId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) SetFileType(v int64) *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand {
	s.FileType = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailTableModel struct {
	Columns        []*GetIDEEventDetailResponseBodyEventDetailTableModelColumns `json:"Columns,omitempty" xml:"Columns,omitempty" type:"Repeated"`
	Comment        *string                                                      `json:"Comment,omitempty" xml:"Comment,omitempty"`
	DataSourceName *string                                                      `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	Env            *string                                                      `json:"Env,omitempty" xml:"Env,omitempty"`
	LifeCycle      *int64                                                       `json:"LifeCycle,omitempty" xml:"LifeCycle,omitempty"`
	Location       *string                                                      `json:"Location,omitempty" xml:"Location,omitempty"`
	TableName      *string                                                      `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailTableModel) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailTableModel) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetColumns(v []*GetIDEEventDetailResponseBodyEventDetailTableModelColumns) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.Columns = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetComment(v string) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.Comment = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetDataSourceName(v string) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.DataSourceName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetEnv(v string) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.Env = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetLifeCycle(v int64) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.LifeCycle = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetLocation(v string) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.Location = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetTableName(v string) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.TableName = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailTableModelColumns struct {
	ColumnName        *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ColumnType        *string `json:"ColumnType,omitempty" xml:"ColumnType,omitempty"`
	Comment           *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	IsPartitionColumn *bool   `json:"IsPartitionColumn,omitempty" xml:"IsPartitionColumn,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailTableModelColumns) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailTableModelColumns) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModelColumns) SetColumnName(v string) *GetIDEEventDetailResponseBodyEventDetailTableModelColumns {
	s.ColumnName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModelColumns) SetColumnType(v string) *GetIDEEventDetailResponseBodyEventDetailTableModelColumns {
	s.ColumnType = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModelColumns) SetComment(v string) *GetIDEEventDetailResponseBodyEventDetailTableModelColumns {
	s.Comment = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModelColumns) SetIsPartitionColumn(v bool) *GetIDEEventDetailResponseBodyEventDetailTableModelColumns {
	s.IsPartitionColumn = &v
	return s
}

type GetIDEEventDetailResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetIDEEventDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetIDEEventDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponse) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponse) SetHeaders(v map[string]*string) *GetIDEEventDetailResponse {
	s.Headers = v
	return s
}

func (s *GetIDEEventDetailResponse) SetBody(v *GetIDEEventDetailResponseBody) *GetIDEEventDetailResponse {
	s.Body = v
	return s
}

type GetInstanceRequest struct {
	InstanceId *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s GetInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceRequest) SetInstanceId(v int64) *GetInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceRequest) SetProjectEnv(v string) *GetInstanceRequest {
	s.ProjectEnv = &v
	return s
}

type GetInstanceResponseBody struct {
	Data           *GetInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                       `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBody) SetData(v *GetInstanceResponseBodyData) *GetInstanceResponseBody {
	s.Data = v
	return s
}

func (s *GetInstanceResponseBody) SetErrorCode(v string) *GetInstanceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetInstanceResponseBody) SetErrorMessage(v string) *GetInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetInstanceResponseBody) SetHttpStatusCode(v int32) *GetInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetInstanceResponseBody) SetRequestId(v string) *GetInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceResponseBody) SetSuccess(v bool) *GetInstanceResponseBody {
	s.Success = &v
	return s
}

type GetInstanceResponseBodyData struct {
	BaselineId        *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	BeginRunningTime  *int64  `json:"BeginRunningTime,omitempty" xml:"BeginRunningTime,omitempty"`
	BeginWaitResTime  *int64  `json:"BeginWaitResTime,omitempty" xml:"BeginWaitResTime,omitempty"`
	BeginWaitTimeTime *int64  `json:"BeginWaitTimeTime,omitempty" xml:"BeginWaitTimeTime,omitempty"`
	Bizdate           *int64  `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	BusinessId        *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	Connection        *string `json:"Connection,omitempty" xml:"Connection,omitempty"`
	CreateTime        *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreateUser        *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	CycTime           *int64  `json:"CycTime,omitempty" xml:"CycTime,omitempty"`
	DagId             *int64  `json:"DagId,omitempty" xml:"DagId,omitempty"`
	DagType           *string `json:"DagType,omitempty" xml:"DagType,omitempty"`
	DqcDescription    *string `json:"DqcDescription,omitempty" xml:"DqcDescription,omitempty"`
	DqcType           *int32  `json:"DqcType,omitempty" xml:"DqcType,omitempty"`
	FinishTime        *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InstanceId        *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ModifyTime        *int64  `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	NodeId            *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName          *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	ParamValues       *string `json:"ParamValues,omitempty" xml:"ParamValues,omitempty"`
	Priority          *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RelatedFlowId     *int64  `json:"RelatedFlowId,omitempty" xml:"RelatedFlowId,omitempty"`
	RepeatInterval    *int64  `json:"RepeatInterval,omitempty" xml:"RepeatInterval,omitempty"`
	Repeatability     *bool   `json:"Repeatability,omitempty" xml:"Repeatability,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskRerunTime     *int32  `json:"TaskRerunTime,omitempty" xml:"TaskRerunTime,omitempty"`
	TaskType          *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s GetInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBodyData) SetBaselineId(v int64) *GetInstanceResponseBodyData {
	s.BaselineId = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetBeginRunningTime(v int64) *GetInstanceResponseBodyData {
	s.BeginRunningTime = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetBeginWaitResTime(v int64) *GetInstanceResponseBodyData {
	s.BeginWaitResTime = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetBeginWaitTimeTime(v int64) *GetInstanceResponseBodyData {
	s.BeginWaitTimeTime = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetBizdate(v int64) *GetInstanceResponseBodyData {
	s.Bizdate = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetBusinessId(v int64) *GetInstanceResponseBodyData {
	s.BusinessId = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetConnection(v string) *GetInstanceResponseBodyData {
	s.Connection = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetCreateTime(v int64) *GetInstanceResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetCreateUser(v string) *GetInstanceResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetCycTime(v int64) *GetInstanceResponseBodyData {
	s.CycTime = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetDagId(v int64) *GetInstanceResponseBodyData {
	s.DagId = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetDagType(v string) *GetInstanceResponseBodyData {
	s.DagType = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetDqcDescription(v string) *GetInstanceResponseBodyData {
	s.DqcDescription = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetDqcType(v int32) *GetInstanceResponseBodyData {
	s.DqcType = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetFinishTime(v int64) *GetInstanceResponseBodyData {
	s.FinishTime = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetInstanceId(v int64) *GetInstanceResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetModifyTime(v int64) *GetInstanceResponseBodyData {
	s.ModifyTime = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetNodeId(v int64) *GetInstanceResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetNodeName(v string) *GetInstanceResponseBodyData {
	s.NodeName = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetParamValues(v string) *GetInstanceResponseBodyData {
	s.ParamValues = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetPriority(v int32) *GetInstanceResponseBodyData {
	s.Priority = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetRelatedFlowId(v int64) *GetInstanceResponseBodyData {
	s.RelatedFlowId = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetRepeatInterval(v int64) *GetInstanceResponseBodyData {
	s.RepeatInterval = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetRepeatability(v bool) *GetInstanceResponseBodyData {
	s.Repeatability = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetStatus(v string) *GetInstanceResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetTaskRerunTime(v int32) *GetInstanceResponseBodyData {
	s.TaskRerunTime = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetTaskType(v string) *GetInstanceResponseBodyData {
	s.TaskType = &v
	return s
}

type GetInstanceResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceResponse) SetHeaders(v map[string]*string) *GetInstanceResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceResponse) SetBody(v *GetInstanceResponseBody) *GetInstanceResponse {
	s.Body = v
	return s
}

type GetInstanceConsumeTimeRankRequest struct {
	Bizdate   *string `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetInstanceConsumeTimeRankRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceConsumeTimeRankRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceConsumeTimeRankRequest) SetBizdate(v string) *GetInstanceConsumeTimeRankRequest {
	s.Bizdate = &v
	return s
}

func (s *GetInstanceConsumeTimeRankRequest) SetProjectId(v int64) *GetInstanceConsumeTimeRankRequest {
	s.ProjectId = &v
	return s
}

type GetInstanceConsumeTimeRankResponseBody struct {
	InstanceConsumeTimeRank *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRank `json:"InstanceConsumeTimeRank,omitempty" xml:"InstanceConsumeTimeRank,omitempty" type:"Struct"`
	RequestId               *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetInstanceConsumeTimeRankResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceConsumeTimeRankResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceConsumeTimeRankResponseBody) SetInstanceConsumeTimeRank(v *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRank) *GetInstanceConsumeTimeRankResponseBody {
	s.InstanceConsumeTimeRank = v
	return s
}

func (s *GetInstanceConsumeTimeRankResponseBody) SetRequestId(v string) *GetInstanceConsumeTimeRankResponseBody {
	s.RequestId = &v
	return s
}

type GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRank struct {
	ConsumeTimeRank []*GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank `json:"ConsumeTimeRank,omitempty" xml:"ConsumeTimeRank,omitempty" type:"Repeated"`
	UpdateTime      *int64                                                                          `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRank) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRank) GoString() string {
	return s.String()
}

func (s *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRank) SetConsumeTimeRank(v []*GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank) *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRank {
	s.ConsumeTimeRank = v
	return s
}

func (s *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRank) SetUpdateTime(v int64) *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRank {
	s.UpdateTime = &v
	return s
}

type GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank struct {
	Bizdate    *int64  `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	Consumed   *int64  `json:"Consumed,omitempty" xml:"Consumed,omitempty"`
	InstanceId *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NodeId     *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName   *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner      *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PrgType    *int32  `json:"PrgType,omitempty" xml:"PrgType,omitempty"`
}

func (s GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank) GoString() string {
	return s.String()
}

func (s *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetBizdate(v int64) *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.Bizdate = &v
	return s
}

func (s *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetConsumed(v int64) *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.Consumed = &v
	return s
}

func (s *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetInstanceId(v int64) *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetNodeId(v int64) *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.NodeId = &v
	return s
}

func (s *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetNodeName(v string) *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.NodeName = &v
	return s
}

func (s *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetOwner(v string) *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.Owner = &v
	return s
}

func (s *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetPrgType(v int32) *GetInstanceConsumeTimeRankResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.PrgType = &v
	return s
}

type GetInstanceConsumeTimeRankResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetInstanceConsumeTimeRankResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceConsumeTimeRankResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceConsumeTimeRankResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceConsumeTimeRankResponse) SetHeaders(v map[string]*string) *GetInstanceConsumeTimeRankResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceConsumeTimeRankResponse) SetBody(v *GetInstanceConsumeTimeRankResponseBody) *GetInstanceConsumeTimeRankResponse {
	s.Body = v
	return s
}

type GetInstanceCountTrendRequest struct {
	BeginDate *string `json:"BeginDate,omitempty" xml:"BeginDate,omitempty"`
	EndDate   *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetInstanceCountTrendRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceCountTrendRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceCountTrendRequest) SetBeginDate(v string) *GetInstanceCountTrendRequest {
	s.BeginDate = &v
	return s
}

func (s *GetInstanceCountTrendRequest) SetEndDate(v string) *GetInstanceCountTrendRequest {
	s.EndDate = &v
	return s
}

func (s *GetInstanceCountTrendRequest) SetProjectId(v int64) *GetInstanceCountTrendRequest {
	s.ProjectId = &v
	return s
}

type GetInstanceCountTrendResponseBody struct {
	InstanceCounts []*GetInstanceCountTrendResponseBodyInstanceCounts `json:"InstanceCounts,omitempty" xml:"InstanceCounts,omitempty" type:"Repeated"`
	RequestId      *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetInstanceCountTrendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceCountTrendResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceCountTrendResponseBody) SetInstanceCounts(v []*GetInstanceCountTrendResponseBodyInstanceCounts) *GetInstanceCountTrendResponseBody {
	s.InstanceCounts = v
	return s
}

func (s *GetInstanceCountTrendResponseBody) SetRequestId(v string) *GetInstanceCountTrendResponseBody {
	s.RequestId = &v
	return s
}

type GetInstanceCountTrendResponseBodyInstanceCounts struct {
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	Date  *int64 `json:"Date,omitempty" xml:"Date,omitempty"`
}

func (s GetInstanceCountTrendResponseBodyInstanceCounts) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceCountTrendResponseBodyInstanceCounts) GoString() string {
	return s.String()
}

func (s *GetInstanceCountTrendResponseBodyInstanceCounts) SetCount(v int32) *GetInstanceCountTrendResponseBodyInstanceCounts {
	s.Count = &v
	return s
}

func (s *GetInstanceCountTrendResponseBodyInstanceCounts) SetDate(v int64) *GetInstanceCountTrendResponseBodyInstanceCounts {
	s.Date = &v
	return s
}

type GetInstanceCountTrendResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetInstanceCountTrendResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceCountTrendResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceCountTrendResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceCountTrendResponse) SetHeaders(v map[string]*string) *GetInstanceCountTrendResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceCountTrendResponse) SetBody(v *GetInstanceCountTrendResponseBody) *GetInstanceCountTrendResponse {
	s.Body = v
	return s
}

type GetInstanceErrorRankRequest struct {
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetInstanceErrorRankRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceErrorRankRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceErrorRankRequest) SetProjectId(v int64) *GetInstanceErrorRankRequest {
	s.ProjectId = &v
	return s
}

type GetInstanceErrorRankResponseBody struct {
	InstanceErrorRank *GetInstanceErrorRankResponseBodyInstanceErrorRank `json:"InstanceErrorRank,omitempty" xml:"InstanceErrorRank,omitempty" type:"Struct"`
	RequestId         *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetInstanceErrorRankResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceErrorRankResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceErrorRankResponseBody) SetInstanceErrorRank(v *GetInstanceErrorRankResponseBodyInstanceErrorRank) *GetInstanceErrorRankResponseBody {
	s.InstanceErrorRank = v
	return s
}

func (s *GetInstanceErrorRankResponseBody) SetRequestId(v string) *GetInstanceErrorRankResponseBody {
	s.RequestId = &v
	return s
}

type GetInstanceErrorRankResponseBodyInstanceErrorRank struct {
	ErrorRank  []*GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank `json:"ErrorRank,omitempty" xml:"ErrorRank,omitempty" type:"Repeated"`
	UpdateTime *int64                                                        `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s GetInstanceErrorRankResponseBodyInstanceErrorRank) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceErrorRankResponseBodyInstanceErrorRank) GoString() string {
	return s.String()
}

func (s *GetInstanceErrorRankResponseBodyInstanceErrorRank) SetErrorRank(v []*GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank) *GetInstanceErrorRankResponseBodyInstanceErrorRank {
	s.ErrorRank = v
	return s
}

func (s *GetInstanceErrorRankResponseBodyInstanceErrorRank) SetUpdateTime(v int64) *GetInstanceErrorRankResponseBodyInstanceErrorRank {
	s.UpdateTime = &v
	return s
}

type GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank struct {
	Count     *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	NodeId    *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName  *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner     *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PrgType   *int32  `json:"PrgType,omitempty" xml:"PrgType,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank) GoString() string {
	return s.String()
}

func (s *GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank) SetCount(v int32) *GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank {
	s.Count = &v
	return s
}

func (s *GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank) SetNodeId(v int64) *GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank {
	s.NodeId = &v
	return s
}

func (s *GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank) SetNodeName(v string) *GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank {
	s.NodeName = &v
	return s
}

func (s *GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank) SetOwner(v string) *GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank {
	s.Owner = &v
	return s
}

func (s *GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank) SetPrgType(v int32) *GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank {
	s.PrgType = &v
	return s
}

func (s *GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank) SetProjectId(v int64) *GetInstanceErrorRankResponseBodyInstanceErrorRankErrorRank {
	s.ProjectId = &v
	return s
}

type GetInstanceErrorRankResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetInstanceErrorRankResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceErrorRankResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceErrorRankResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceErrorRankResponse) SetHeaders(v map[string]*string) *GetInstanceErrorRankResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceErrorRankResponse) SetBody(v *GetInstanceErrorRankResponseBody) *GetInstanceErrorRankResponse {
	s.Body = v
	return s
}

type GetInstanceLogRequest struct {
	InstanceId *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s GetInstanceLogRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceLogRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceLogRequest) SetInstanceId(v int64) *GetInstanceLogRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceLogRequest) SetProjectEnv(v string) *GetInstanceLogRequest {
	s.ProjectEnv = &v
	return s
}

type GetInstanceLogResponseBody struct {
	Data           *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInstanceLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceLogResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceLogResponseBody) SetData(v string) *GetInstanceLogResponseBody {
	s.Data = &v
	return s
}

func (s *GetInstanceLogResponseBody) SetErrorCode(v string) *GetInstanceLogResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetInstanceLogResponseBody) SetErrorMessage(v string) *GetInstanceLogResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetInstanceLogResponseBody) SetHttpStatusCode(v int32) *GetInstanceLogResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetInstanceLogResponseBody) SetRequestId(v string) *GetInstanceLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceLogResponseBody) SetSuccess(v bool) *GetInstanceLogResponseBody {
	s.Success = &v
	return s
}

type GetInstanceLogResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetInstanceLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceLogResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceLogResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceLogResponse) SetHeaders(v map[string]*string) *GetInstanceLogResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceLogResponse) SetBody(v *GetInstanceLogResponseBody) *GetInstanceLogResponse {
	s.Body = v
	return s
}

type GetInstanceStatusCountRequest struct {
	BizDate    *string `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	ProjectId  *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetInstanceStatusCountRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStatusCountRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceStatusCountRequest) SetBizDate(v string) *GetInstanceStatusCountRequest {
	s.BizDate = &v
	return s
}

func (s *GetInstanceStatusCountRequest) SetProjectEnv(v string) *GetInstanceStatusCountRequest {
	s.ProjectEnv = &v
	return s
}

func (s *GetInstanceStatusCountRequest) SetProjectId(v int64) *GetInstanceStatusCountRequest {
	s.ProjectId = &v
	return s
}

type GetInstanceStatusCountResponseBody struct {
	RequestId   *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StatusCount *GetInstanceStatusCountResponseBodyStatusCount `json:"StatusCount,omitempty" xml:"StatusCount,omitempty" type:"Struct"`
}

func (s GetInstanceStatusCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStatusCountResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceStatusCountResponseBody) SetRequestId(v string) *GetInstanceStatusCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceStatusCountResponseBody) SetStatusCount(v *GetInstanceStatusCountResponseBodyStatusCount) *GetInstanceStatusCountResponseBody {
	s.StatusCount = v
	return s
}

type GetInstanceStatusCountResponseBodyStatusCount struct {
	FailureCount  *int32 `json:"FailureCount,omitempty" xml:"FailureCount,omitempty"`
	NotRunCount   *int32 `json:"NotRunCount,omitempty" xml:"NotRunCount,omitempty"`
	RunningCount  *int32 `json:"RunningCount,omitempty" xml:"RunningCount,omitempty"`
	SuccessCount  *int32 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
	TotalCount    *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	WaitResCount  *int32 `json:"WaitResCount,omitempty" xml:"WaitResCount,omitempty"`
	WaitTimeCount *int32 `json:"WaitTimeCount,omitempty" xml:"WaitTimeCount,omitempty"`
}

func (s GetInstanceStatusCountResponseBodyStatusCount) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStatusCountResponseBodyStatusCount) GoString() string {
	return s.String()
}

func (s *GetInstanceStatusCountResponseBodyStatusCount) SetFailureCount(v int32) *GetInstanceStatusCountResponseBodyStatusCount {
	s.FailureCount = &v
	return s
}

func (s *GetInstanceStatusCountResponseBodyStatusCount) SetNotRunCount(v int32) *GetInstanceStatusCountResponseBodyStatusCount {
	s.NotRunCount = &v
	return s
}

func (s *GetInstanceStatusCountResponseBodyStatusCount) SetRunningCount(v int32) *GetInstanceStatusCountResponseBodyStatusCount {
	s.RunningCount = &v
	return s
}

func (s *GetInstanceStatusCountResponseBodyStatusCount) SetSuccessCount(v int32) *GetInstanceStatusCountResponseBodyStatusCount {
	s.SuccessCount = &v
	return s
}

func (s *GetInstanceStatusCountResponseBodyStatusCount) SetTotalCount(v int32) *GetInstanceStatusCountResponseBodyStatusCount {
	s.TotalCount = &v
	return s
}

func (s *GetInstanceStatusCountResponseBodyStatusCount) SetWaitResCount(v int32) *GetInstanceStatusCountResponseBodyStatusCount {
	s.WaitResCount = &v
	return s
}

func (s *GetInstanceStatusCountResponseBodyStatusCount) SetWaitTimeCount(v int32) *GetInstanceStatusCountResponseBodyStatusCount {
	s.WaitTimeCount = &v
	return s
}

type GetInstanceStatusCountResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetInstanceStatusCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceStatusCountResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStatusCountResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceStatusCountResponse) SetHeaders(v map[string]*string) *GetInstanceStatusCountResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceStatusCountResponse) SetBody(v *GetInstanceStatusCountResponseBody) *GetInstanceStatusCountResponse {
	s.Body = v
	return s
}

type GetInstanceStatusStatisticRequest struct {
	BizDate       *string `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	DagType       *string `json:"DagType,omitempty" xml:"DagType,omitempty"`
	ProjectEnv    *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	ProjectId     *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SchedulerType *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
}

func (s GetInstanceStatusStatisticRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStatusStatisticRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceStatusStatisticRequest) SetBizDate(v string) *GetInstanceStatusStatisticRequest {
	s.BizDate = &v
	return s
}

func (s *GetInstanceStatusStatisticRequest) SetDagType(v string) *GetInstanceStatusStatisticRequest {
	s.DagType = &v
	return s
}

func (s *GetInstanceStatusStatisticRequest) SetProjectEnv(v string) *GetInstanceStatusStatisticRequest {
	s.ProjectEnv = &v
	return s
}

func (s *GetInstanceStatusStatisticRequest) SetProjectId(v int64) *GetInstanceStatusStatisticRequest {
	s.ProjectId = &v
	return s
}

func (s *GetInstanceStatusStatisticRequest) SetSchedulerType(v string) *GetInstanceStatusStatisticRequest {
	s.SchedulerType = &v
	return s
}

type GetInstanceStatusStatisticResponseBody struct {
	RequestId   *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StatusCount *GetInstanceStatusStatisticResponseBodyStatusCount `json:"StatusCount,omitempty" xml:"StatusCount,omitempty" type:"Struct"`
}

func (s GetInstanceStatusStatisticResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStatusStatisticResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceStatusStatisticResponseBody) SetRequestId(v string) *GetInstanceStatusStatisticResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceStatusStatisticResponseBody) SetStatusCount(v *GetInstanceStatusStatisticResponseBodyStatusCount) *GetInstanceStatusStatisticResponseBody {
	s.StatusCount = v
	return s
}

type GetInstanceStatusStatisticResponseBodyStatusCount struct {
	FailureCount  *int32 `json:"FailureCount,omitempty" xml:"FailureCount,omitempty"`
	NotRunCount   *int32 `json:"NotRunCount,omitempty" xml:"NotRunCount,omitempty"`
	RunningCount  *int32 `json:"RunningCount,omitempty" xml:"RunningCount,omitempty"`
	SuccessCount  *int32 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
	TotalCount    *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	WaitResCount  *int32 `json:"WaitResCount,omitempty" xml:"WaitResCount,omitempty"`
	WaitTimeCount *int32 `json:"WaitTimeCount,omitempty" xml:"WaitTimeCount,omitempty"`
}

func (s GetInstanceStatusStatisticResponseBodyStatusCount) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStatusStatisticResponseBodyStatusCount) GoString() string {
	return s.String()
}

func (s *GetInstanceStatusStatisticResponseBodyStatusCount) SetFailureCount(v int32) *GetInstanceStatusStatisticResponseBodyStatusCount {
	s.FailureCount = &v
	return s
}

func (s *GetInstanceStatusStatisticResponseBodyStatusCount) SetNotRunCount(v int32) *GetInstanceStatusStatisticResponseBodyStatusCount {
	s.NotRunCount = &v
	return s
}

func (s *GetInstanceStatusStatisticResponseBodyStatusCount) SetRunningCount(v int32) *GetInstanceStatusStatisticResponseBodyStatusCount {
	s.RunningCount = &v
	return s
}

func (s *GetInstanceStatusStatisticResponseBodyStatusCount) SetSuccessCount(v int32) *GetInstanceStatusStatisticResponseBodyStatusCount {
	s.SuccessCount = &v
	return s
}

func (s *GetInstanceStatusStatisticResponseBodyStatusCount) SetTotalCount(v int32) *GetInstanceStatusStatisticResponseBodyStatusCount {
	s.TotalCount = &v
	return s
}

func (s *GetInstanceStatusStatisticResponseBodyStatusCount) SetWaitResCount(v int32) *GetInstanceStatusStatisticResponseBodyStatusCount {
	s.WaitResCount = &v
	return s
}

func (s *GetInstanceStatusStatisticResponseBodyStatusCount) SetWaitTimeCount(v int32) *GetInstanceStatusStatisticResponseBodyStatusCount {
	s.WaitTimeCount = &v
	return s
}

type GetInstanceStatusStatisticResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetInstanceStatusStatisticResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceStatusStatisticResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStatusStatisticResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceStatusStatisticResponse) SetHeaders(v map[string]*string) *GetInstanceStatusStatisticResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceStatusStatisticResponse) SetBody(v *GetInstanceStatusStatisticResponseBody) *GetInstanceStatusStatisticResponse {
	s.Body = v
	return s
}

type GetManualDagInstancesRequest struct {
	DagId       *string `json:"DagId,omitempty" xml:"DagId,omitempty"`
	ProjectEnv  *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
}

func (s GetManualDagInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetManualDagInstancesRequest) GoString() string {
	return s.String()
}

func (s *GetManualDagInstancesRequest) SetDagId(v string) *GetManualDagInstancesRequest {
	s.DagId = &v
	return s
}

func (s *GetManualDagInstancesRequest) SetProjectEnv(v string) *GetManualDagInstancesRequest {
	s.ProjectEnv = &v
	return s
}

func (s *GetManualDagInstancesRequest) SetProjectName(v string) *GetManualDagInstancesRequest {
	s.ProjectName = &v
	return s
}

type GetManualDagInstancesResponseBody struct {
	Instances []*GetManualDagInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetManualDagInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetManualDagInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *GetManualDagInstancesResponseBody) SetInstances(v []*GetManualDagInstancesResponseBodyInstances) *GetManualDagInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *GetManualDagInstancesResponseBody) SetRequestId(v string) *GetManualDagInstancesResponseBody {
	s.RequestId = &v
	return s
}

type GetManualDagInstancesResponseBodyInstances struct {
	BeginRunningTime  *int64  `json:"BeginRunningTime,omitempty" xml:"BeginRunningTime,omitempty"`
	BeginWaitResTime  *int64  `json:"BeginWaitResTime,omitempty" xml:"BeginWaitResTime,omitempty"`
	BeginWaitTimeTime *int64  `json:"BeginWaitTimeTime,omitempty" xml:"BeginWaitTimeTime,omitempty"`
	BizDate           *int64  `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	CreateTime        *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreateUser        *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	CycTime           *int64  `json:"CycTime,omitempty" xml:"CycTime,omitempty"`
	DagId             *int64  `json:"DagId,omitempty" xml:"DagId,omitempty"`
	DagType           *string `json:"DagType,omitempty" xml:"DagType,omitempty"`
	FinishTime        *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InstanceId        *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ModifyTime        *int64  `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	NodeId            *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName          *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	ParamValues       *string `json:"ParamValues,omitempty" xml:"ParamValues,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskType          *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s GetManualDagInstancesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s GetManualDagInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *GetManualDagInstancesResponseBodyInstances) SetBeginRunningTime(v int64) *GetManualDagInstancesResponseBodyInstances {
	s.BeginRunningTime = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetBeginWaitResTime(v int64) *GetManualDagInstancesResponseBodyInstances {
	s.BeginWaitResTime = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetBeginWaitTimeTime(v int64) *GetManualDagInstancesResponseBodyInstances {
	s.BeginWaitTimeTime = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetBizDate(v int64) *GetManualDagInstancesResponseBodyInstances {
	s.BizDate = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetCreateTime(v int64) *GetManualDagInstancesResponseBodyInstances {
	s.CreateTime = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetCreateUser(v string) *GetManualDagInstancesResponseBodyInstances {
	s.CreateUser = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetCycTime(v int64) *GetManualDagInstancesResponseBodyInstances {
	s.CycTime = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetDagId(v int64) *GetManualDagInstancesResponseBodyInstances {
	s.DagId = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetDagType(v string) *GetManualDagInstancesResponseBodyInstances {
	s.DagType = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetFinishTime(v int64) *GetManualDagInstancesResponseBodyInstances {
	s.FinishTime = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetInstanceId(v int64) *GetManualDagInstancesResponseBodyInstances {
	s.InstanceId = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetModifyTime(v int64) *GetManualDagInstancesResponseBodyInstances {
	s.ModifyTime = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetNodeId(v int64) *GetManualDagInstancesResponseBodyInstances {
	s.NodeId = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetNodeName(v string) *GetManualDagInstancesResponseBodyInstances {
	s.NodeName = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetParamValues(v string) *GetManualDagInstancesResponseBodyInstances {
	s.ParamValues = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetStatus(v string) *GetManualDagInstancesResponseBodyInstances {
	s.Status = &v
	return s
}

func (s *GetManualDagInstancesResponseBodyInstances) SetTaskType(v string) *GetManualDagInstancesResponseBodyInstances {
	s.TaskType = &v
	return s
}

type GetManualDagInstancesResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetManualDagInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetManualDagInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetManualDagInstancesResponse) GoString() string {
	return s.String()
}

func (s *GetManualDagInstancesResponse) SetHeaders(v map[string]*string) *GetManualDagInstancesResponse {
	s.Headers = v
	return s
}

func (s *GetManualDagInstancesResponse) SetBody(v *GetManualDagInstancesResponseBody) *GetManualDagInstancesResponse {
	s.Body = v
	return s
}

type GetMetaCategoryRequest struct {
	PageNum          *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize         *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ParentCategoryId *int64 `json:"ParentCategoryId,omitempty" xml:"ParentCategoryId,omitempty"`
}

func (s GetMetaCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaCategoryRequest) GoString() string {
	return s.String()
}

func (s *GetMetaCategoryRequest) SetPageNum(v int32) *GetMetaCategoryRequest {
	s.PageNum = &v
	return s
}

func (s *GetMetaCategoryRequest) SetPageSize(v int32) *GetMetaCategoryRequest {
	s.PageSize = &v
	return s
}

func (s *GetMetaCategoryRequest) SetParentCategoryId(v int64) *GetMetaCategoryRequest {
	s.ParentCategoryId = &v
	return s
}

type GetMetaCategoryResponseBody struct {
	Data           *GetMetaCategoryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                          `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMetaCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaCategoryResponseBody) SetData(v *GetMetaCategoryResponseBodyData) *GetMetaCategoryResponseBody {
	s.Data = v
	return s
}

func (s *GetMetaCategoryResponseBody) SetErrorCode(v string) *GetMetaCategoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMetaCategoryResponseBody) SetErrorMessage(v string) *GetMetaCategoryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMetaCategoryResponseBody) SetHttpStatusCode(v int32) *GetMetaCategoryResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMetaCategoryResponseBody) SetRequestId(v string) *GetMetaCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMetaCategoryResponseBody) SetSuccess(v bool) *GetMetaCategoryResponseBody {
	s.Success = &v
	return s
}

type GetMetaCategoryResponseBodyData struct {
	DataEntityList []*GetMetaCategoryResponseBodyDataDataEntityList `json:"DataEntityList,omitempty" xml:"DataEntityList,omitempty" type:"Repeated"`
	PageNum        *int32                                           `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize       *int32                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount     *int64                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetMetaCategoryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMetaCategoryResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMetaCategoryResponseBodyData) SetDataEntityList(v []*GetMetaCategoryResponseBodyDataDataEntityList) *GetMetaCategoryResponseBodyData {
	s.DataEntityList = v
	return s
}

func (s *GetMetaCategoryResponseBodyData) SetPageNum(v int32) *GetMetaCategoryResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *GetMetaCategoryResponseBodyData) SetPageSize(v int32) *GetMetaCategoryResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetMetaCategoryResponseBodyData) SetTotalCount(v int64) *GetMetaCategoryResponseBodyData {
	s.TotalCount = &v
	return s
}

type GetMetaCategoryResponseBodyDataDataEntityList struct {
	CategoryId       *int64  `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	Comment          *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateTime       *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Depth            *int32  `json:"Depth,omitempty" xml:"Depth,omitempty"`
	LastOperatorId   *string `json:"LastOperatorId,omitempty" xml:"LastOperatorId,omitempty"`
	ModifiedTime     *int64  `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Name             *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId          *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ParentCategoryId *int64  `json:"ParentCategoryId,omitempty" xml:"ParentCategoryId,omitempty"`
}

func (s GetMetaCategoryResponseBodyDataDataEntityList) String() string {
	return tea.Prettify(s)
}

func (s GetMetaCategoryResponseBodyDataDataEntityList) GoString() string {
	return s.String()
}

func (s *GetMetaCategoryResponseBodyDataDataEntityList) SetCategoryId(v int64) *GetMetaCategoryResponseBodyDataDataEntityList {
	s.CategoryId = &v
	return s
}

func (s *GetMetaCategoryResponseBodyDataDataEntityList) SetComment(v string) *GetMetaCategoryResponseBodyDataDataEntityList {
	s.Comment = &v
	return s
}

func (s *GetMetaCategoryResponseBodyDataDataEntityList) SetCreateTime(v int64) *GetMetaCategoryResponseBodyDataDataEntityList {
	s.CreateTime = &v
	return s
}

func (s *GetMetaCategoryResponseBodyDataDataEntityList) SetDepth(v int32) *GetMetaCategoryResponseBodyDataDataEntityList {
	s.Depth = &v
	return s
}

func (s *GetMetaCategoryResponseBodyDataDataEntityList) SetLastOperatorId(v string) *GetMetaCategoryResponseBodyDataDataEntityList {
	s.LastOperatorId = &v
	return s
}

func (s *GetMetaCategoryResponseBodyDataDataEntityList) SetModifiedTime(v int64) *GetMetaCategoryResponseBodyDataDataEntityList {
	s.ModifiedTime = &v
	return s
}

func (s *GetMetaCategoryResponseBodyDataDataEntityList) SetName(v string) *GetMetaCategoryResponseBodyDataDataEntityList {
	s.Name = &v
	return s
}

func (s *GetMetaCategoryResponseBodyDataDataEntityList) SetOwnerId(v string) *GetMetaCategoryResponseBodyDataDataEntityList {
	s.OwnerId = &v
	return s
}

func (s *GetMetaCategoryResponseBodyDataDataEntityList) SetParentCategoryId(v int64) *GetMetaCategoryResponseBodyDataDataEntityList {
	s.ParentCategoryId = &v
	return s
}

type GetMetaCategoryResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaCategoryResponse) GoString() string {
	return s.String()
}

func (s *GetMetaCategoryResponse) SetHeaders(v map[string]*string) *GetMetaCategoryResponse {
	s.Headers = v
	return s
}

func (s *GetMetaCategoryResponse) SetBody(v *GetMetaCategoryResponseBody) *GetMetaCategoryResponse {
	s.Body = v
	return s
}

type GetMetaColumnLineageRequest struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ColumnGuid     *string `json:"ColumnGuid,omitempty" xml:"ColumnGuid,omitempty"`
	ColumnName     *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DatabaseName   *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	Direction      *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	PageNum        *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TableName      *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetMetaColumnLineageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaColumnLineageRequest) GoString() string {
	return s.String()
}

func (s *GetMetaColumnLineageRequest) SetClusterId(v string) *GetMetaColumnLineageRequest {
	s.ClusterId = &v
	return s
}

func (s *GetMetaColumnLineageRequest) SetColumnGuid(v string) *GetMetaColumnLineageRequest {
	s.ColumnGuid = &v
	return s
}

func (s *GetMetaColumnLineageRequest) SetColumnName(v string) *GetMetaColumnLineageRequest {
	s.ColumnName = &v
	return s
}

func (s *GetMetaColumnLineageRequest) SetDataSourceType(v string) *GetMetaColumnLineageRequest {
	s.DataSourceType = &v
	return s
}

func (s *GetMetaColumnLineageRequest) SetDatabaseName(v string) *GetMetaColumnLineageRequest {
	s.DatabaseName = &v
	return s
}

func (s *GetMetaColumnLineageRequest) SetDirection(v string) *GetMetaColumnLineageRequest {
	s.Direction = &v
	return s
}

func (s *GetMetaColumnLineageRequest) SetPageNum(v int32) *GetMetaColumnLineageRequest {
	s.PageNum = &v
	return s
}

func (s *GetMetaColumnLineageRequest) SetPageSize(v int32) *GetMetaColumnLineageRequest {
	s.PageSize = &v
	return s
}

func (s *GetMetaColumnLineageRequest) SetTableName(v string) *GetMetaColumnLineageRequest {
	s.TableName = &v
	return s
}

type GetMetaColumnLineageResponseBody struct {
	Data           *GetMetaColumnLineageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                               `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMetaColumnLineageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaColumnLineageResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaColumnLineageResponseBody) SetData(v *GetMetaColumnLineageResponseBodyData) *GetMetaColumnLineageResponseBody {
	s.Data = v
	return s
}

func (s *GetMetaColumnLineageResponseBody) SetErrorCode(v string) *GetMetaColumnLineageResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMetaColumnLineageResponseBody) SetErrorMessage(v string) *GetMetaColumnLineageResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMetaColumnLineageResponseBody) SetHttpStatusCode(v int32) *GetMetaColumnLineageResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMetaColumnLineageResponseBody) SetRequestId(v string) *GetMetaColumnLineageResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMetaColumnLineageResponseBody) SetSuccess(v bool) *GetMetaColumnLineageResponseBody {
	s.Success = &v
	return s
}

type GetMetaColumnLineageResponseBodyData struct {
	DataEntityList []*GetMetaColumnLineageResponseBodyDataDataEntityList `json:"DataEntityList,omitempty" xml:"DataEntityList,omitempty" type:"Repeated"`
	PageNum        *int32                                                `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize       *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount     *int64                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetMetaColumnLineageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMetaColumnLineageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMetaColumnLineageResponseBodyData) SetDataEntityList(v []*GetMetaColumnLineageResponseBodyDataDataEntityList) *GetMetaColumnLineageResponseBodyData {
	s.DataEntityList = v
	return s
}

func (s *GetMetaColumnLineageResponseBodyData) SetPageNum(v int32) *GetMetaColumnLineageResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *GetMetaColumnLineageResponseBodyData) SetPageSize(v int32) *GetMetaColumnLineageResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetMetaColumnLineageResponseBodyData) SetTotalCount(v int64) *GetMetaColumnLineageResponseBodyData {
	s.TotalCount = &v
	return s
}

type GetMetaColumnLineageResponseBodyDataDataEntityList struct {
	ClusterId    *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ColumnGuid   *string `json:"ColumnGuid,omitempty" xml:"ColumnGuid,omitempty"`
	ColumnName   *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	TableName    *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetMetaColumnLineageResponseBodyDataDataEntityList) String() string {
	return tea.Prettify(s)
}

func (s GetMetaColumnLineageResponseBodyDataDataEntityList) GoString() string {
	return s.String()
}

func (s *GetMetaColumnLineageResponseBodyDataDataEntityList) SetClusterId(v string) *GetMetaColumnLineageResponseBodyDataDataEntityList {
	s.ClusterId = &v
	return s
}

func (s *GetMetaColumnLineageResponseBodyDataDataEntityList) SetColumnGuid(v string) *GetMetaColumnLineageResponseBodyDataDataEntityList {
	s.ColumnGuid = &v
	return s
}

func (s *GetMetaColumnLineageResponseBodyDataDataEntityList) SetColumnName(v string) *GetMetaColumnLineageResponseBodyDataDataEntityList {
	s.ColumnName = &v
	return s
}

func (s *GetMetaColumnLineageResponseBodyDataDataEntityList) SetDatabaseName(v string) *GetMetaColumnLineageResponseBodyDataDataEntityList {
	s.DatabaseName = &v
	return s
}

func (s *GetMetaColumnLineageResponseBodyDataDataEntityList) SetTableName(v string) *GetMetaColumnLineageResponseBodyDataDataEntityList {
	s.TableName = &v
	return s
}

type GetMetaColumnLineageResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaColumnLineageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaColumnLineageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaColumnLineageResponse) GoString() string {
	return s.String()
}

func (s *GetMetaColumnLineageResponse) SetHeaders(v map[string]*string) *GetMetaColumnLineageResponse {
	s.Headers = v
	return s
}

func (s *GetMetaColumnLineageResponse) SetBody(v *GetMetaColumnLineageResponseBody) *GetMetaColumnLineageResponse {
	s.Body = v
	return s
}

type GetMetaDBInfoRequest struct {
	AppGuid        *string `json:"AppGuid,omitempty" xml:"AppGuid,omitempty"`
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DatabaseName   *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
}

func (s GetMetaDBInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaDBInfoRequest) GoString() string {
	return s.String()
}

func (s *GetMetaDBInfoRequest) SetAppGuid(v string) *GetMetaDBInfoRequest {
	s.AppGuid = &v
	return s
}

func (s *GetMetaDBInfoRequest) SetClusterId(v string) *GetMetaDBInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *GetMetaDBInfoRequest) SetDataSourceType(v string) *GetMetaDBInfoRequest {
	s.DataSourceType = &v
	return s
}

func (s *GetMetaDBInfoRequest) SetDatabaseName(v string) *GetMetaDBInfoRequest {
	s.DatabaseName = &v
	return s
}

type GetMetaDBInfoResponseBody struct {
	Data      *GetMetaDBInfoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMetaDBInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaDBInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaDBInfoResponseBody) SetData(v *GetMetaDBInfoResponseBodyData) *GetMetaDBInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetMetaDBInfoResponseBody) SetRequestId(v string) *GetMetaDBInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetMetaDBInfoResponseBodyData struct {
	AppGuid       *string `json:"AppGuid,omitempty" xml:"AppGuid,omitempty"`
	ClusterBizId  *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
	Comment       *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Endpoint      *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	EnvType       *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	Location      *string `json:"Location,omitempty" xml:"Location,omitempty"`
	ModifyTime    *int64  `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId       *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	OwnerName     *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	ProjectId     *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName   *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ProjectNameCn *string `json:"ProjectNameCn,omitempty" xml:"ProjectNameCn,omitempty"`
	TenantId      *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetMetaDBInfoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMetaDBInfoResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMetaDBInfoResponseBodyData) SetAppGuid(v string) *GetMetaDBInfoResponseBodyData {
	s.AppGuid = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetClusterBizId(v string) *GetMetaDBInfoResponseBodyData {
	s.ClusterBizId = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetComment(v string) *GetMetaDBInfoResponseBodyData {
	s.Comment = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetCreateTime(v int64) *GetMetaDBInfoResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetEndpoint(v string) *GetMetaDBInfoResponseBodyData {
	s.Endpoint = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetEnvType(v int32) *GetMetaDBInfoResponseBodyData {
	s.EnvType = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetLocation(v string) *GetMetaDBInfoResponseBodyData {
	s.Location = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetModifyTime(v int64) *GetMetaDBInfoResponseBodyData {
	s.ModifyTime = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetName(v string) *GetMetaDBInfoResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetOwnerId(v string) *GetMetaDBInfoResponseBodyData {
	s.OwnerId = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetOwnerName(v string) *GetMetaDBInfoResponseBodyData {
	s.OwnerName = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetProjectId(v int64) *GetMetaDBInfoResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetProjectName(v string) *GetMetaDBInfoResponseBodyData {
	s.ProjectName = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetProjectNameCn(v string) *GetMetaDBInfoResponseBodyData {
	s.ProjectNameCn = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetTenantId(v int64) *GetMetaDBInfoResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *GetMetaDBInfoResponseBodyData) SetType(v string) *GetMetaDBInfoResponseBodyData {
	s.Type = &v
	return s
}

type GetMetaDBInfoResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaDBInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaDBInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaDBInfoResponse) GoString() string {
	return s.String()
}

func (s *GetMetaDBInfoResponse) SetHeaders(v map[string]*string) *GetMetaDBInfoResponse {
	s.Headers = v
	return s
}

func (s *GetMetaDBInfoResponse) SetBody(v *GetMetaDBInfoResponseBody) *GetMetaDBInfoResponse {
	s.Body = v
	return s
}

type GetMetaDBTableListRequest struct {
	AppGuid        *string `json:"AppGuid,omitempty" xml:"AppGuid,omitempty"`
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DatabaseName   *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetMetaDBTableListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaDBTableListRequest) GoString() string {
	return s.String()
}

func (s *GetMetaDBTableListRequest) SetAppGuid(v string) *GetMetaDBTableListRequest {
	s.AppGuid = &v
	return s
}

func (s *GetMetaDBTableListRequest) SetClusterId(v string) *GetMetaDBTableListRequest {
	s.ClusterId = &v
	return s
}

func (s *GetMetaDBTableListRequest) SetDataSourceType(v string) *GetMetaDBTableListRequest {
	s.DataSourceType = &v
	return s
}

func (s *GetMetaDBTableListRequest) SetDatabaseName(v string) *GetMetaDBTableListRequest {
	s.DatabaseName = &v
	return s
}

func (s *GetMetaDBTableListRequest) SetPageNumber(v int32) *GetMetaDBTableListRequest {
	s.PageNumber = &v
	return s
}

func (s *GetMetaDBTableListRequest) SetPageSize(v int32) *GetMetaDBTableListRequest {
	s.PageSize = &v
	return s
}

type GetMetaDBTableListResponseBody struct {
	Data      *GetMetaDBTableListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMetaDBTableListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaDBTableListResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaDBTableListResponseBody) SetData(v *GetMetaDBTableListResponseBodyData) *GetMetaDBTableListResponseBody {
	s.Data = v
	return s
}

func (s *GetMetaDBTableListResponseBody) SetRequestId(v string) *GetMetaDBTableListResponseBody {
	s.RequestId = &v
	return s
}

type GetMetaDBTableListResponseBodyData struct {
	PageNumber      *int32                                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32                                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TableEntityList []*GetMetaDBTableListResponseBodyDataTableEntityList `json:"TableEntityList,omitempty" xml:"TableEntityList,omitempty" type:"Repeated"`
	TotalCount      *int64                                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetMetaDBTableListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMetaDBTableListResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMetaDBTableListResponseBodyData) SetPageNumber(v int32) *GetMetaDBTableListResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *GetMetaDBTableListResponseBodyData) SetPageSize(v int32) *GetMetaDBTableListResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetMetaDBTableListResponseBodyData) SetTableEntityList(v []*GetMetaDBTableListResponseBodyDataTableEntityList) *GetMetaDBTableListResponseBodyData {
	s.TableEntityList = v
	return s
}

func (s *GetMetaDBTableListResponseBodyData) SetTotalCount(v int64) *GetMetaDBTableListResponseBodyData {
	s.TotalCount = &v
	return s
}

type GetMetaDBTableListResponseBodyDataTableEntityList struct {
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	TableGuid    *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TableName    *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetMetaDBTableListResponseBodyDataTableEntityList) String() string {
	return tea.Prettify(s)
}

func (s GetMetaDBTableListResponseBodyDataTableEntityList) GoString() string {
	return s.String()
}

func (s *GetMetaDBTableListResponseBodyDataTableEntityList) SetDatabaseName(v string) *GetMetaDBTableListResponseBodyDataTableEntityList {
	s.DatabaseName = &v
	return s
}

func (s *GetMetaDBTableListResponseBodyDataTableEntityList) SetTableGuid(v string) *GetMetaDBTableListResponseBodyDataTableEntityList {
	s.TableGuid = &v
	return s
}

func (s *GetMetaDBTableListResponseBodyDataTableEntityList) SetTableName(v string) *GetMetaDBTableListResponseBodyDataTableEntityList {
	s.TableName = &v
	return s
}

type GetMetaDBTableListResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaDBTableListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaDBTableListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaDBTableListResponse) GoString() string {
	return s.String()
}

func (s *GetMetaDBTableListResponse) SetHeaders(v map[string]*string) *GetMetaDBTableListResponse {
	s.Headers = v
	return s
}

func (s *GetMetaDBTableListResponse) SetBody(v *GetMetaDBTableListResponseBody) *GetMetaDBTableListResponse {
	s.Body = v
	return s
}

type GetMetaTableBasicInfoRequest struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DatabaseName   *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	Extension      *bool   `json:"Extension,omitempty" xml:"Extension,omitempty"`
	TableGuid      *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TableName      *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetMetaTableBasicInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableBasicInfoRequest) GoString() string {
	return s.String()
}

func (s *GetMetaTableBasicInfoRequest) SetClusterId(v string) *GetMetaTableBasicInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *GetMetaTableBasicInfoRequest) SetDataSourceType(v string) *GetMetaTableBasicInfoRequest {
	s.DataSourceType = &v
	return s
}

func (s *GetMetaTableBasicInfoRequest) SetDatabaseName(v string) *GetMetaTableBasicInfoRequest {
	s.DatabaseName = &v
	return s
}

func (s *GetMetaTableBasicInfoRequest) SetExtension(v bool) *GetMetaTableBasicInfoRequest {
	s.Extension = &v
	return s
}

func (s *GetMetaTableBasicInfoRequest) SetTableGuid(v string) *GetMetaTableBasicInfoRequest {
	s.TableGuid = &v
	return s
}

func (s *GetMetaTableBasicInfoRequest) SetTableName(v string) *GetMetaTableBasicInfoRequest {
	s.TableName = &v
	return s
}

type GetMetaTableBasicInfoResponseBody struct {
	Data           *GetMetaTableBasicInfoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMetaTableBasicInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableBasicInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaTableBasicInfoResponseBody) SetData(v *GetMetaTableBasicInfoResponseBodyData) *GetMetaTableBasicInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetMetaTableBasicInfoResponseBody) SetErrorCode(v string) *GetMetaTableBasicInfoResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBody) SetErrorMessage(v string) *GetMetaTableBasicInfoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBody) SetHttpStatusCode(v int32) *GetMetaTableBasicInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBody) SetRequestId(v string) *GetMetaTableBasicInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBody) SetSuccess(v bool) *GetMetaTableBasicInfoResponseBody {
	s.Success = &v
	return s
}

type GetMetaTableBasicInfoResponseBodyData struct {
	Caption          *string `json:"Caption,omitempty" xml:"Caption,omitempty"`
	ClusterId        *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ColumnCount      *int32  `json:"ColumnCount,omitempty" xml:"ColumnCount,omitempty"`
	Comment          *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateTime       *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataSize         *int64  `json:"DataSize,omitempty" xml:"DataSize,omitempty"`
	DatabaseName     *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	EnvType          *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	FavoriteCount    *int64  `json:"FavoriteCount,omitempty" xml:"FavoriteCount,omitempty"`
	IsPartitionTable *bool   `json:"IsPartitionTable,omitempty" xml:"IsPartitionTable,omitempty"`
	IsView           *bool   `json:"IsView,omitempty" xml:"IsView,omitempty"`
	IsVisible        *int32  `json:"IsVisible,omitempty" xml:"IsVisible,omitempty"`
	LastAccessTime   *int64  `json:"LastAccessTime,omitempty" xml:"LastAccessTime,omitempty"`
	LastDdlTime      *int64  `json:"LastDdlTime,omitempty" xml:"LastDdlTime,omitempty"`
	LastModifyTime   *int64  `json:"LastModifyTime,omitempty" xml:"LastModifyTime,omitempty"`
	LifeCycle        *int32  `json:"LifeCycle,omitempty" xml:"LifeCycle,omitempty"`
	Location         *string `json:"Location,omitempty" xml:"Location,omitempty"`
	OwnerId          *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PartitionKeys    *string `json:"PartitionKeys,omitempty" xml:"PartitionKeys,omitempty"`
	ProjectId        *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName      *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ReadCount        *int64  `json:"ReadCount,omitempty" xml:"ReadCount,omitempty"`
	TableGuid        *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TableName        *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	TenantId         *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	ViewCount        *int64  `json:"ViewCount,omitempty" xml:"ViewCount,omitempty"`
}

func (s GetMetaTableBasicInfoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableBasicInfoResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetCaption(v string) *GetMetaTableBasicInfoResponseBodyData {
	s.Caption = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetClusterId(v string) *GetMetaTableBasicInfoResponseBodyData {
	s.ClusterId = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetColumnCount(v int32) *GetMetaTableBasicInfoResponseBodyData {
	s.ColumnCount = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetComment(v string) *GetMetaTableBasicInfoResponseBodyData {
	s.Comment = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetCreateTime(v int64) *GetMetaTableBasicInfoResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetDataSize(v int64) *GetMetaTableBasicInfoResponseBodyData {
	s.DataSize = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetDatabaseName(v string) *GetMetaTableBasicInfoResponseBodyData {
	s.DatabaseName = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetEnvType(v int32) *GetMetaTableBasicInfoResponseBodyData {
	s.EnvType = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetFavoriteCount(v int64) *GetMetaTableBasicInfoResponseBodyData {
	s.FavoriteCount = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetIsPartitionTable(v bool) *GetMetaTableBasicInfoResponseBodyData {
	s.IsPartitionTable = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetIsView(v bool) *GetMetaTableBasicInfoResponseBodyData {
	s.IsView = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetIsVisible(v int32) *GetMetaTableBasicInfoResponseBodyData {
	s.IsVisible = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetLastAccessTime(v int64) *GetMetaTableBasicInfoResponseBodyData {
	s.LastAccessTime = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetLastDdlTime(v int64) *GetMetaTableBasicInfoResponseBodyData {
	s.LastDdlTime = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetLastModifyTime(v int64) *GetMetaTableBasicInfoResponseBodyData {
	s.LastModifyTime = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetLifeCycle(v int32) *GetMetaTableBasicInfoResponseBodyData {
	s.LifeCycle = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetLocation(v string) *GetMetaTableBasicInfoResponseBodyData {
	s.Location = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetOwnerId(v string) *GetMetaTableBasicInfoResponseBodyData {
	s.OwnerId = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetPartitionKeys(v string) *GetMetaTableBasicInfoResponseBodyData {
	s.PartitionKeys = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetProjectId(v int64) *GetMetaTableBasicInfoResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetProjectName(v string) *GetMetaTableBasicInfoResponseBodyData {
	s.ProjectName = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetReadCount(v int64) *GetMetaTableBasicInfoResponseBodyData {
	s.ReadCount = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetTableGuid(v string) *GetMetaTableBasicInfoResponseBodyData {
	s.TableGuid = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetTableName(v string) *GetMetaTableBasicInfoResponseBodyData {
	s.TableName = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetTenantId(v int64) *GetMetaTableBasicInfoResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *GetMetaTableBasicInfoResponseBodyData) SetViewCount(v int64) *GetMetaTableBasicInfoResponseBodyData {
	s.ViewCount = &v
	return s
}

type GetMetaTableBasicInfoResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaTableBasicInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaTableBasicInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableBasicInfoResponse) GoString() string {
	return s.String()
}

func (s *GetMetaTableBasicInfoResponse) SetHeaders(v map[string]*string) *GetMetaTableBasicInfoResponse {
	s.Headers = v
	return s
}

func (s *GetMetaTableBasicInfoResponse) SetBody(v *GetMetaTableBasicInfoResponseBody) *GetMetaTableBasicInfoResponse {
	s.Body = v
	return s
}

type GetMetaTableChangeLogRequest struct {
	ChangeType *string `json:"ChangeType,omitempty" xml:"ChangeType,omitempty"`
	EndDate    *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	ObjectType *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartDate  *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	TableGuid  *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s GetMetaTableChangeLogRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableChangeLogRequest) GoString() string {
	return s.String()
}

func (s *GetMetaTableChangeLogRequest) SetChangeType(v string) *GetMetaTableChangeLogRequest {
	s.ChangeType = &v
	return s
}

func (s *GetMetaTableChangeLogRequest) SetEndDate(v string) *GetMetaTableChangeLogRequest {
	s.EndDate = &v
	return s
}

func (s *GetMetaTableChangeLogRequest) SetObjectType(v string) *GetMetaTableChangeLogRequest {
	s.ObjectType = &v
	return s
}

func (s *GetMetaTableChangeLogRequest) SetPageNumber(v int32) *GetMetaTableChangeLogRequest {
	s.PageNumber = &v
	return s
}

func (s *GetMetaTableChangeLogRequest) SetPageSize(v int32) *GetMetaTableChangeLogRequest {
	s.PageSize = &v
	return s
}

func (s *GetMetaTableChangeLogRequest) SetStartDate(v string) *GetMetaTableChangeLogRequest {
	s.StartDate = &v
	return s
}

func (s *GetMetaTableChangeLogRequest) SetTableGuid(v string) *GetMetaTableChangeLogRequest {
	s.TableGuid = &v
	return s
}

type GetMetaTableChangeLogResponseBody struct {
	Data           *GetMetaTableChangeLogResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMetaTableChangeLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableChangeLogResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaTableChangeLogResponseBody) SetData(v *GetMetaTableChangeLogResponseBodyData) *GetMetaTableChangeLogResponseBody {
	s.Data = v
	return s
}

func (s *GetMetaTableChangeLogResponseBody) SetErrorCode(v string) *GetMetaTableChangeLogResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMetaTableChangeLogResponseBody) SetErrorMessage(v string) *GetMetaTableChangeLogResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMetaTableChangeLogResponseBody) SetHttpStatusCode(v int32) *GetMetaTableChangeLogResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMetaTableChangeLogResponseBody) SetRequestId(v string) *GetMetaTableChangeLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMetaTableChangeLogResponseBody) SetSuccess(v bool) *GetMetaTableChangeLogResponseBody {
	s.Success = &v
	return s
}

type GetMetaTableChangeLogResponseBodyData struct {
	DataEntityList []*GetMetaTableChangeLogResponseBodyDataDataEntityList `json:"DataEntityList,omitempty" xml:"DataEntityList,omitempty" type:"Repeated"`
	PageNumber     *int32                                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount     *int64                                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetMetaTableChangeLogResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableChangeLogResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMetaTableChangeLogResponseBodyData) SetDataEntityList(v []*GetMetaTableChangeLogResponseBodyDataDataEntityList) *GetMetaTableChangeLogResponseBodyData {
	s.DataEntityList = v
	return s
}

func (s *GetMetaTableChangeLogResponseBodyData) SetPageNumber(v int32) *GetMetaTableChangeLogResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *GetMetaTableChangeLogResponseBodyData) SetPageSize(v int32) *GetMetaTableChangeLogResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetMetaTableChangeLogResponseBodyData) SetTotalCount(v int64) *GetMetaTableChangeLogResponseBodyData {
	s.TotalCount = &v
	return s
}

type GetMetaTableChangeLogResponseBodyDataDataEntityList struct {
	ChangeContent *string `json:"ChangeContent,omitempty" xml:"ChangeContent,omitempty"`
	ChangeType    *string `json:"ChangeType,omitempty" xml:"ChangeType,omitempty"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ModifiedTime  *int64  `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	ObjectType    *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	Operator      *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
}

func (s GetMetaTableChangeLogResponseBodyDataDataEntityList) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableChangeLogResponseBodyDataDataEntityList) GoString() string {
	return s.String()
}

func (s *GetMetaTableChangeLogResponseBodyDataDataEntityList) SetChangeContent(v string) *GetMetaTableChangeLogResponseBodyDataDataEntityList {
	s.ChangeContent = &v
	return s
}

func (s *GetMetaTableChangeLogResponseBodyDataDataEntityList) SetChangeType(v string) *GetMetaTableChangeLogResponseBodyDataDataEntityList {
	s.ChangeType = &v
	return s
}

func (s *GetMetaTableChangeLogResponseBodyDataDataEntityList) SetCreateTime(v int64) *GetMetaTableChangeLogResponseBodyDataDataEntityList {
	s.CreateTime = &v
	return s
}

func (s *GetMetaTableChangeLogResponseBodyDataDataEntityList) SetModifiedTime(v int64) *GetMetaTableChangeLogResponseBodyDataDataEntityList {
	s.ModifiedTime = &v
	return s
}

func (s *GetMetaTableChangeLogResponseBodyDataDataEntityList) SetObjectType(v string) *GetMetaTableChangeLogResponseBodyDataDataEntityList {
	s.ObjectType = &v
	return s
}

func (s *GetMetaTableChangeLogResponseBodyDataDataEntityList) SetOperator(v string) *GetMetaTableChangeLogResponseBodyDataDataEntityList {
	s.Operator = &v
	return s
}

type GetMetaTableChangeLogResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaTableChangeLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaTableChangeLogResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableChangeLogResponse) GoString() string {
	return s.String()
}

func (s *GetMetaTableChangeLogResponse) SetHeaders(v map[string]*string) *GetMetaTableChangeLogResponse {
	s.Headers = v
	return s
}

func (s *GetMetaTableChangeLogResponse) SetBody(v *GetMetaTableChangeLogResponseBody) *GetMetaTableChangeLogResponse {
	s.Body = v
	return s
}

type GetMetaTableColumnRequest struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DatabaseName   *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	PageNum        *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TableGuid      *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TableName      *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetMetaTableColumnRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableColumnRequest) GoString() string {
	return s.String()
}

func (s *GetMetaTableColumnRequest) SetClusterId(v string) *GetMetaTableColumnRequest {
	s.ClusterId = &v
	return s
}

func (s *GetMetaTableColumnRequest) SetDataSourceType(v string) *GetMetaTableColumnRequest {
	s.DataSourceType = &v
	return s
}

func (s *GetMetaTableColumnRequest) SetDatabaseName(v string) *GetMetaTableColumnRequest {
	s.DatabaseName = &v
	return s
}

func (s *GetMetaTableColumnRequest) SetPageNum(v int32) *GetMetaTableColumnRequest {
	s.PageNum = &v
	return s
}

func (s *GetMetaTableColumnRequest) SetPageSize(v int32) *GetMetaTableColumnRequest {
	s.PageSize = &v
	return s
}

func (s *GetMetaTableColumnRequest) SetTableGuid(v string) *GetMetaTableColumnRequest {
	s.TableGuid = &v
	return s
}

func (s *GetMetaTableColumnRequest) SetTableName(v string) *GetMetaTableColumnRequest {
	s.TableName = &v
	return s
}

type GetMetaTableColumnResponseBody struct {
	Data           *GetMetaTableColumnResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                             `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMetaTableColumnResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableColumnResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaTableColumnResponseBody) SetData(v *GetMetaTableColumnResponseBodyData) *GetMetaTableColumnResponseBody {
	s.Data = v
	return s
}

func (s *GetMetaTableColumnResponseBody) SetErrorCode(v string) *GetMetaTableColumnResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMetaTableColumnResponseBody) SetErrorMessage(v string) *GetMetaTableColumnResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMetaTableColumnResponseBody) SetHttpStatusCode(v int32) *GetMetaTableColumnResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMetaTableColumnResponseBody) SetRequestId(v string) *GetMetaTableColumnResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMetaTableColumnResponseBody) SetSuccess(v bool) *GetMetaTableColumnResponseBody {
	s.Success = &v
	return s
}

type GetMetaTableColumnResponseBodyData struct {
	ColumnList []*GetMetaTableColumnResponseBodyDataColumnList `json:"ColumnList,omitempty" xml:"ColumnList,omitempty" type:"Repeated"`
	PageNum    *int32                                          `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int64                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetMetaTableColumnResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableColumnResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMetaTableColumnResponseBodyData) SetColumnList(v []*GetMetaTableColumnResponseBodyDataColumnList) *GetMetaTableColumnResponseBodyData {
	s.ColumnList = v
	return s
}

func (s *GetMetaTableColumnResponseBodyData) SetPageNum(v int32) *GetMetaTableColumnResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *GetMetaTableColumnResponseBodyData) SetPageSize(v int32) *GetMetaTableColumnResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetMetaTableColumnResponseBodyData) SetTotalCount(v int64) *GetMetaTableColumnResponseBodyData {
	s.TotalCount = &v
	return s
}

type GetMetaTableColumnResponseBodyDataColumnList struct {
	Caption           *string `json:"Caption,omitempty" xml:"Caption,omitempty"`
	ColumnGuid        *string `json:"ColumnGuid,omitempty" xml:"ColumnGuid,omitempty"`
	ColumnName        *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ColumnType        *string `json:"ColumnType,omitempty" xml:"ColumnType,omitempty"`
	Comment           *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	IsForeignKey      *bool   `json:"IsForeignKey,omitempty" xml:"IsForeignKey,omitempty"`
	IsPartitionColumn *bool   `json:"IsPartitionColumn,omitempty" xml:"IsPartitionColumn,omitempty"`
	IsPrimaryKey      *bool   `json:"IsPrimaryKey,omitempty" xml:"IsPrimaryKey,omitempty"`
	Position          *int32  `json:"Position,omitempty" xml:"Position,omitempty"`
	RelationCount     *int64  `json:"RelationCount,omitempty" xml:"RelationCount,omitempty"`
}

func (s GetMetaTableColumnResponseBodyDataColumnList) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableColumnResponseBodyDataColumnList) GoString() string {
	return s.String()
}

func (s *GetMetaTableColumnResponseBodyDataColumnList) SetCaption(v string) *GetMetaTableColumnResponseBodyDataColumnList {
	s.Caption = &v
	return s
}

func (s *GetMetaTableColumnResponseBodyDataColumnList) SetColumnGuid(v string) *GetMetaTableColumnResponseBodyDataColumnList {
	s.ColumnGuid = &v
	return s
}

func (s *GetMetaTableColumnResponseBodyDataColumnList) SetColumnName(v string) *GetMetaTableColumnResponseBodyDataColumnList {
	s.ColumnName = &v
	return s
}

func (s *GetMetaTableColumnResponseBodyDataColumnList) SetColumnType(v string) *GetMetaTableColumnResponseBodyDataColumnList {
	s.ColumnType = &v
	return s
}

func (s *GetMetaTableColumnResponseBodyDataColumnList) SetComment(v string) *GetMetaTableColumnResponseBodyDataColumnList {
	s.Comment = &v
	return s
}

func (s *GetMetaTableColumnResponseBodyDataColumnList) SetIsForeignKey(v bool) *GetMetaTableColumnResponseBodyDataColumnList {
	s.IsForeignKey = &v
	return s
}

func (s *GetMetaTableColumnResponseBodyDataColumnList) SetIsPartitionColumn(v bool) *GetMetaTableColumnResponseBodyDataColumnList {
	s.IsPartitionColumn = &v
	return s
}

func (s *GetMetaTableColumnResponseBodyDataColumnList) SetIsPrimaryKey(v bool) *GetMetaTableColumnResponseBodyDataColumnList {
	s.IsPrimaryKey = &v
	return s
}

func (s *GetMetaTableColumnResponseBodyDataColumnList) SetPosition(v int32) *GetMetaTableColumnResponseBodyDataColumnList {
	s.Position = &v
	return s
}

func (s *GetMetaTableColumnResponseBodyDataColumnList) SetRelationCount(v int64) *GetMetaTableColumnResponseBodyDataColumnList {
	s.RelationCount = &v
	return s
}

type GetMetaTableColumnResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaTableColumnResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaTableColumnResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableColumnResponse) GoString() string {
	return s.String()
}

func (s *GetMetaTableColumnResponse) SetHeaders(v map[string]*string) *GetMetaTableColumnResponse {
	s.Headers = v
	return s
}

func (s *GetMetaTableColumnResponse) SetBody(v *GetMetaTableColumnResponseBody) *GetMetaTableColumnResponse {
	s.Body = v
	return s
}

type GetMetaTableFullInfoRequest struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DatabaseName   *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	PageNum        *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TableGuid      *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TableName      *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetMetaTableFullInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableFullInfoRequest) GoString() string {
	return s.String()
}

func (s *GetMetaTableFullInfoRequest) SetClusterId(v string) *GetMetaTableFullInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *GetMetaTableFullInfoRequest) SetDataSourceType(v string) *GetMetaTableFullInfoRequest {
	s.DataSourceType = &v
	return s
}

func (s *GetMetaTableFullInfoRequest) SetDatabaseName(v string) *GetMetaTableFullInfoRequest {
	s.DatabaseName = &v
	return s
}

func (s *GetMetaTableFullInfoRequest) SetPageNum(v int32) *GetMetaTableFullInfoRequest {
	s.PageNum = &v
	return s
}

func (s *GetMetaTableFullInfoRequest) SetPageSize(v int32) *GetMetaTableFullInfoRequest {
	s.PageSize = &v
	return s
}

func (s *GetMetaTableFullInfoRequest) SetTableGuid(v string) *GetMetaTableFullInfoRequest {
	s.TableGuid = &v
	return s
}

func (s *GetMetaTableFullInfoRequest) SetTableName(v string) *GetMetaTableFullInfoRequest {
	s.TableName = &v
	return s
}

type GetMetaTableFullInfoResponseBody struct {
	Data           *GetMetaTableFullInfoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                               `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMetaTableFullInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableFullInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaTableFullInfoResponseBody) SetData(v *GetMetaTableFullInfoResponseBodyData) *GetMetaTableFullInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetMetaTableFullInfoResponseBody) SetErrorCode(v string) *GetMetaTableFullInfoResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBody) SetErrorMessage(v string) *GetMetaTableFullInfoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBody) SetHttpStatusCode(v int32) *GetMetaTableFullInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBody) SetRequestId(v string) *GetMetaTableFullInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBody) SetSuccess(v bool) *GetMetaTableFullInfoResponseBody {
	s.Success = &v
	return s
}

type GetMetaTableFullInfoResponseBodyData struct {
	ClusterId        *string                                           `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ColumnList       []*GetMetaTableFullInfoResponseBodyDataColumnList `json:"ColumnList,omitempty" xml:"ColumnList,omitempty" type:"Repeated"`
	Comment          *string                                           `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateTime       *int64                                            `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataSize         *int64                                            `json:"DataSize,omitempty" xml:"DataSize,omitempty"`
	DatabaseName     *string                                           `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	EnvType          *int32                                            `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	IsVisible        *int32                                            `json:"IsVisible,omitempty" xml:"IsVisible,omitempty"`
	LastAccessTime   *int64                                            `json:"LastAccessTime,omitempty" xml:"LastAccessTime,omitempty"`
	LastDdlTime      *int64                                            `json:"LastDdlTime,omitempty" xml:"LastDdlTime,omitempty"`
	LastModifyTime   *int64                                            `json:"LastModifyTime,omitempty" xml:"LastModifyTime,omitempty"`
	LifeCycle        *int32                                            `json:"LifeCycle,omitempty" xml:"LifeCycle,omitempty"`
	Location         *string                                           `json:"Location,omitempty" xml:"Location,omitempty"`
	OwnerId          *string                                           `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PartitionKeys    *string                                           `json:"PartitionKeys,omitempty" xml:"PartitionKeys,omitempty"`
	ProjectId        *int64                                            `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName      *string                                           `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	TableGuid        *string                                           `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TableName        *string                                           `json:"TableName,omitempty" xml:"TableName,omitempty"`
	TenantId         *int64                                            `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	TotalColumnCount *int64                                            `json:"TotalColumnCount,omitempty" xml:"TotalColumnCount,omitempty"`
}

func (s GetMetaTableFullInfoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableFullInfoResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMetaTableFullInfoResponseBodyData) SetClusterId(v string) *GetMetaTableFullInfoResponseBodyData {
	s.ClusterId = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetColumnList(v []*GetMetaTableFullInfoResponseBodyDataColumnList) *GetMetaTableFullInfoResponseBodyData {
	s.ColumnList = v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetComment(v string) *GetMetaTableFullInfoResponseBodyData {
	s.Comment = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetCreateTime(v int64) *GetMetaTableFullInfoResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetDataSize(v int64) *GetMetaTableFullInfoResponseBodyData {
	s.DataSize = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetDatabaseName(v string) *GetMetaTableFullInfoResponseBodyData {
	s.DatabaseName = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetEnvType(v int32) *GetMetaTableFullInfoResponseBodyData {
	s.EnvType = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetIsVisible(v int32) *GetMetaTableFullInfoResponseBodyData {
	s.IsVisible = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetLastAccessTime(v int64) *GetMetaTableFullInfoResponseBodyData {
	s.LastAccessTime = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetLastDdlTime(v int64) *GetMetaTableFullInfoResponseBodyData {
	s.LastDdlTime = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetLastModifyTime(v int64) *GetMetaTableFullInfoResponseBodyData {
	s.LastModifyTime = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetLifeCycle(v int32) *GetMetaTableFullInfoResponseBodyData {
	s.LifeCycle = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetLocation(v string) *GetMetaTableFullInfoResponseBodyData {
	s.Location = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetOwnerId(v string) *GetMetaTableFullInfoResponseBodyData {
	s.OwnerId = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetPartitionKeys(v string) *GetMetaTableFullInfoResponseBodyData {
	s.PartitionKeys = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetProjectId(v int64) *GetMetaTableFullInfoResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetProjectName(v string) *GetMetaTableFullInfoResponseBodyData {
	s.ProjectName = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetTableGuid(v string) *GetMetaTableFullInfoResponseBodyData {
	s.TableGuid = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetTableName(v string) *GetMetaTableFullInfoResponseBodyData {
	s.TableName = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetTenantId(v int64) *GetMetaTableFullInfoResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyData) SetTotalColumnCount(v int64) *GetMetaTableFullInfoResponseBodyData {
	s.TotalColumnCount = &v
	return s
}

type GetMetaTableFullInfoResponseBodyDataColumnList struct {
	Caption           *string `json:"Caption,omitempty" xml:"Caption,omitempty"`
	ColumnGuid        *string `json:"ColumnGuid,omitempty" xml:"ColumnGuid,omitempty"`
	ColumnName        *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ColumnType        *string `json:"ColumnType,omitempty" xml:"ColumnType,omitempty"`
	Comment           *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	IsForeignKey      *bool   `json:"IsForeignKey,omitempty" xml:"IsForeignKey,omitempty"`
	IsPartitionColumn *bool   `json:"IsPartitionColumn,omitempty" xml:"IsPartitionColumn,omitempty"`
	IsPrimaryKey      *bool   `json:"IsPrimaryKey,omitempty" xml:"IsPrimaryKey,omitempty"`
	Position          *int32  `json:"Position,omitempty" xml:"Position,omitempty"`
}

func (s GetMetaTableFullInfoResponseBodyDataColumnList) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableFullInfoResponseBodyDataColumnList) GoString() string {
	return s.String()
}

func (s *GetMetaTableFullInfoResponseBodyDataColumnList) SetCaption(v string) *GetMetaTableFullInfoResponseBodyDataColumnList {
	s.Caption = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyDataColumnList) SetColumnGuid(v string) *GetMetaTableFullInfoResponseBodyDataColumnList {
	s.ColumnGuid = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyDataColumnList) SetColumnName(v string) *GetMetaTableFullInfoResponseBodyDataColumnList {
	s.ColumnName = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyDataColumnList) SetColumnType(v string) *GetMetaTableFullInfoResponseBodyDataColumnList {
	s.ColumnType = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyDataColumnList) SetComment(v string) *GetMetaTableFullInfoResponseBodyDataColumnList {
	s.Comment = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyDataColumnList) SetIsForeignKey(v bool) *GetMetaTableFullInfoResponseBodyDataColumnList {
	s.IsForeignKey = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyDataColumnList) SetIsPartitionColumn(v bool) *GetMetaTableFullInfoResponseBodyDataColumnList {
	s.IsPartitionColumn = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyDataColumnList) SetIsPrimaryKey(v bool) *GetMetaTableFullInfoResponseBodyDataColumnList {
	s.IsPrimaryKey = &v
	return s
}

func (s *GetMetaTableFullInfoResponseBodyDataColumnList) SetPosition(v int32) *GetMetaTableFullInfoResponseBodyDataColumnList {
	s.Position = &v
	return s
}

type GetMetaTableFullInfoResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaTableFullInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaTableFullInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableFullInfoResponse) GoString() string {
	return s.String()
}

func (s *GetMetaTableFullInfoResponse) SetHeaders(v map[string]*string) *GetMetaTableFullInfoResponse {
	s.Headers = v
	return s
}

func (s *GetMetaTableFullInfoResponse) SetBody(v *GetMetaTableFullInfoResponseBody) *GetMetaTableFullInfoResponse {
	s.Body = v
	return s
}

type GetMetaTableIntroWikiRequest struct {
	TableGuid   *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	WikiVersion *int64  `json:"WikiVersion,omitempty" xml:"WikiVersion,omitempty"`
}

func (s GetMetaTableIntroWikiRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableIntroWikiRequest) GoString() string {
	return s.String()
}

func (s *GetMetaTableIntroWikiRequest) SetTableGuid(v string) *GetMetaTableIntroWikiRequest {
	s.TableGuid = &v
	return s
}

func (s *GetMetaTableIntroWikiRequest) SetWikiVersion(v int64) *GetMetaTableIntroWikiRequest {
	s.WikiVersion = &v
	return s
}

type GetMetaTableIntroWikiResponseBody struct {
	Data           *GetMetaTableIntroWikiResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMetaTableIntroWikiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableIntroWikiResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaTableIntroWikiResponseBody) SetData(v *GetMetaTableIntroWikiResponseBodyData) *GetMetaTableIntroWikiResponseBody {
	s.Data = v
	return s
}

func (s *GetMetaTableIntroWikiResponseBody) SetErrorCode(v string) *GetMetaTableIntroWikiResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMetaTableIntroWikiResponseBody) SetErrorMessage(v string) *GetMetaTableIntroWikiResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMetaTableIntroWikiResponseBody) SetHttpStatusCode(v int32) *GetMetaTableIntroWikiResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMetaTableIntroWikiResponseBody) SetRequestId(v string) *GetMetaTableIntroWikiResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMetaTableIntroWikiResponseBody) SetSuccess(v bool) *GetMetaTableIntroWikiResponseBody {
	s.Success = &v
	return s
}

type GetMetaTableIntroWikiResponseBodyData struct {
	Content      *string `json:"Content,omitempty" xml:"Content,omitempty"`
	CreateTime   *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator      *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	CreatorName  *string `json:"CreatorName,omitempty" xml:"CreatorName,omitempty"`
	ModifiedTime *int64  `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Version      *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetMetaTableIntroWikiResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableIntroWikiResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMetaTableIntroWikiResponseBodyData) SetContent(v string) *GetMetaTableIntroWikiResponseBodyData {
	s.Content = &v
	return s
}

func (s *GetMetaTableIntroWikiResponseBodyData) SetCreateTime(v int64) *GetMetaTableIntroWikiResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetMetaTableIntroWikiResponseBodyData) SetCreator(v string) *GetMetaTableIntroWikiResponseBodyData {
	s.Creator = &v
	return s
}

func (s *GetMetaTableIntroWikiResponseBodyData) SetCreatorName(v string) *GetMetaTableIntroWikiResponseBodyData {
	s.CreatorName = &v
	return s
}

func (s *GetMetaTableIntroWikiResponseBodyData) SetModifiedTime(v int64) *GetMetaTableIntroWikiResponseBodyData {
	s.ModifiedTime = &v
	return s
}

func (s *GetMetaTableIntroWikiResponseBodyData) SetVersion(v int64) *GetMetaTableIntroWikiResponseBodyData {
	s.Version = &v
	return s
}

type GetMetaTableIntroWikiResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaTableIntroWikiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaTableIntroWikiResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableIntroWikiResponse) GoString() string {
	return s.String()
}

func (s *GetMetaTableIntroWikiResponse) SetHeaders(v map[string]*string) *GetMetaTableIntroWikiResponse {
	s.Headers = v
	return s
}

func (s *GetMetaTableIntroWikiResponse) SetBody(v *GetMetaTableIntroWikiResponseBody) *GetMetaTableIntroWikiResponse {
	s.Body = v
	return s
}

type GetMetaTableLineageRequest struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DatabaseName   *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	Direction      *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	NextPrimaryKey *string `json:"NextPrimaryKey,omitempty" xml:"NextPrimaryKey,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TableGuid      *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TableName      *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetMetaTableLineageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableLineageRequest) GoString() string {
	return s.String()
}

func (s *GetMetaTableLineageRequest) SetClusterId(v string) *GetMetaTableLineageRequest {
	s.ClusterId = &v
	return s
}

func (s *GetMetaTableLineageRequest) SetDataSourceType(v string) *GetMetaTableLineageRequest {
	s.DataSourceType = &v
	return s
}

func (s *GetMetaTableLineageRequest) SetDatabaseName(v string) *GetMetaTableLineageRequest {
	s.DatabaseName = &v
	return s
}

func (s *GetMetaTableLineageRequest) SetDirection(v string) *GetMetaTableLineageRequest {
	s.Direction = &v
	return s
}

func (s *GetMetaTableLineageRequest) SetNextPrimaryKey(v string) *GetMetaTableLineageRequest {
	s.NextPrimaryKey = &v
	return s
}

func (s *GetMetaTableLineageRequest) SetPageSize(v int32) *GetMetaTableLineageRequest {
	s.PageSize = &v
	return s
}

func (s *GetMetaTableLineageRequest) SetTableGuid(v string) *GetMetaTableLineageRequest {
	s.TableGuid = &v
	return s
}

func (s *GetMetaTableLineageRequest) SetTableName(v string) *GetMetaTableLineageRequest {
	s.TableName = &v
	return s
}

type GetMetaTableLineageResponseBody struct {
	Data           *GetMetaTableLineageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                              `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMetaTableLineageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableLineageResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaTableLineageResponseBody) SetData(v *GetMetaTableLineageResponseBodyData) *GetMetaTableLineageResponseBody {
	s.Data = v
	return s
}

func (s *GetMetaTableLineageResponseBody) SetErrorCode(v string) *GetMetaTableLineageResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMetaTableLineageResponseBody) SetErrorMessage(v string) *GetMetaTableLineageResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMetaTableLineageResponseBody) SetHttpStatusCode(v int32) *GetMetaTableLineageResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMetaTableLineageResponseBody) SetRequestId(v string) *GetMetaTableLineageResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMetaTableLineageResponseBody) SetSuccess(v bool) *GetMetaTableLineageResponseBody {
	s.Success = &v
	return s
}

type GetMetaTableLineageResponseBodyData struct {
	DataEntityList []*GetMetaTableLineageResponseBodyDataDataEntityList `json:"DataEntityList,omitempty" xml:"DataEntityList,omitempty" type:"Repeated"`
	HasNext        *bool                                                `json:"HasNext,omitempty" xml:"HasNext,omitempty"`
	NextPrimaryKey *string                                              `json:"NextPrimaryKey,omitempty" xml:"NextPrimaryKey,omitempty"`
}

func (s GetMetaTableLineageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableLineageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMetaTableLineageResponseBodyData) SetDataEntityList(v []*GetMetaTableLineageResponseBodyDataDataEntityList) *GetMetaTableLineageResponseBodyData {
	s.DataEntityList = v
	return s
}

func (s *GetMetaTableLineageResponseBodyData) SetHasNext(v bool) *GetMetaTableLineageResponseBodyData {
	s.HasNext = &v
	return s
}

func (s *GetMetaTableLineageResponseBodyData) SetNextPrimaryKey(v string) *GetMetaTableLineageResponseBodyData {
	s.NextPrimaryKey = &v
	return s
}

type GetMetaTableLineageResponseBodyDataDataEntityList struct {
	CreateTimestamp *int64  `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	TableGuid       *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TableName       *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetMetaTableLineageResponseBodyDataDataEntityList) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableLineageResponseBodyDataDataEntityList) GoString() string {
	return s.String()
}

func (s *GetMetaTableLineageResponseBodyDataDataEntityList) SetCreateTimestamp(v int64) *GetMetaTableLineageResponseBodyDataDataEntityList {
	s.CreateTimestamp = &v
	return s
}

func (s *GetMetaTableLineageResponseBodyDataDataEntityList) SetTableGuid(v string) *GetMetaTableLineageResponseBodyDataDataEntityList {
	s.TableGuid = &v
	return s
}

func (s *GetMetaTableLineageResponseBodyDataDataEntityList) SetTableName(v string) *GetMetaTableLineageResponseBodyDataDataEntityList {
	s.TableName = &v
	return s
}

type GetMetaTableLineageResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaTableLineageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaTableLineageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableLineageResponse) GoString() string {
	return s.String()
}

func (s *GetMetaTableLineageResponse) SetHeaders(v map[string]*string) *GetMetaTableLineageResponse {
	s.Headers = v
	return s
}

func (s *GetMetaTableLineageResponse) SetBody(v *GetMetaTableLineageResponseBody) *GetMetaTableLineageResponse {
	s.Body = v
	return s
}

type GetMetaTableListByCategoryRequest struct {
	CategoryId *int64 `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetMetaTableListByCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableListByCategoryRequest) GoString() string {
	return s.String()
}

func (s *GetMetaTableListByCategoryRequest) SetCategoryId(v int64) *GetMetaTableListByCategoryRequest {
	s.CategoryId = &v
	return s
}

func (s *GetMetaTableListByCategoryRequest) SetPageNumber(v int32) *GetMetaTableListByCategoryRequest {
	s.PageNumber = &v
	return s
}

func (s *GetMetaTableListByCategoryRequest) SetPageSize(v int32) *GetMetaTableListByCategoryRequest {
	s.PageSize = &v
	return s
}

type GetMetaTableListByCategoryResponseBody struct {
	Data           *GetMetaTableListByCategoryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                                     `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMetaTableListByCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableListByCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaTableListByCategoryResponseBody) SetData(v *GetMetaTableListByCategoryResponseBodyData) *GetMetaTableListByCategoryResponseBody {
	s.Data = v
	return s
}

func (s *GetMetaTableListByCategoryResponseBody) SetErrorCode(v string) *GetMetaTableListByCategoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMetaTableListByCategoryResponseBody) SetErrorMessage(v string) *GetMetaTableListByCategoryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMetaTableListByCategoryResponseBody) SetHttpStatusCode(v int32) *GetMetaTableListByCategoryResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMetaTableListByCategoryResponseBody) SetRequestId(v string) *GetMetaTableListByCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMetaTableListByCategoryResponseBody) SetSuccess(v bool) *GetMetaTableListByCategoryResponseBody {
	s.Success = &v
	return s
}

type GetMetaTableListByCategoryResponseBodyData struct {
	PageNumber    *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TableGuidList []*string `json:"TableGuidList,omitempty" xml:"TableGuidList,omitempty" type:"Repeated"`
	TotalCount    *int64    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetMetaTableListByCategoryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableListByCategoryResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMetaTableListByCategoryResponseBodyData) SetPageNumber(v int32) *GetMetaTableListByCategoryResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *GetMetaTableListByCategoryResponseBodyData) SetPageSize(v int32) *GetMetaTableListByCategoryResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetMetaTableListByCategoryResponseBodyData) SetTableGuidList(v []*string) *GetMetaTableListByCategoryResponseBodyData {
	s.TableGuidList = v
	return s
}

func (s *GetMetaTableListByCategoryResponseBodyData) SetTotalCount(v int64) *GetMetaTableListByCategoryResponseBodyData {
	s.TotalCount = &v
	return s
}

type GetMetaTableListByCategoryResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaTableListByCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaTableListByCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableListByCategoryResponse) GoString() string {
	return s.String()
}

func (s *GetMetaTableListByCategoryResponse) SetHeaders(v map[string]*string) *GetMetaTableListByCategoryResponse {
	s.Headers = v
	return s
}

func (s *GetMetaTableListByCategoryResponse) SetBody(v *GetMetaTableListByCategoryResponseBody) *GetMetaTableListByCategoryResponse {
	s.Body = v
	return s
}

type GetMetaTableOutputRequest struct {
	EndDate    *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartDate  *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	TableGuid  *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s GetMetaTableOutputRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableOutputRequest) GoString() string {
	return s.String()
}

func (s *GetMetaTableOutputRequest) SetEndDate(v string) *GetMetaTableOutputRequest {
	s.EndDate = &v
	return s
}

func (s *GetMetaTableOutputRequest) SetPageNumber(v int32) *GetMetaTableOutputRequest {
	s.PageNumber = &v
	return s
}

func (s *GetMetaTableOutputRequest) SetPageSize(v int32) *GetMetaTableOutputRequest {
	s.PageSize = &v
	return s
}

func (s *GetMetaTableOutputRequest) SetStartDate(v string) *GetMetaTableOutputRequest {
	s.StartDate = &v
	return s
}

func (s *GetMetaTableOutputRequest) SetTableGuid(v string) *GetMetaTableOutputRequest {
	s.TableGuid = &v
	return s
}

type GetMetaTableOutputResponseBody struct {
	Data           *GetMetaTableOutputResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                             `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMetaTableOutputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableOutputResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaTableOutputResponseBody) SetData(v *GetMetaTableOutputResponseBodyData) *GetMetaTableOutputResponseBody {
	s.Data = v
	return s
}

func (s *GetMetaTableOutputResponseBody) SetErrorCode(v string) *GetMetaTableOutputResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMetaTableOutputResponseBody) SetErrorMessage(v string) *GetMetaTableOutputResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMetaTableOutputResponseBody) SetHttpStatusCode(v int32) *GetMetaTableOutputResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMetaTableOutputResponseBody) SetRequestId(v string) *GetMetaTableOutputResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMetaTableOutputResponseBody) SetSuccess(v bool) *GetMetaTableOutputResponseBody {
	s.Success = &v
	return s
}

type GetMetaTableOutputResponseBodyData struct {
	DataEntityList []*GetMetaTableOutputResponseBodyDataDataEntityList `json:"DataEntityList,omitempty" xml:"DataEntityList,omitempty" type:"Repeated"`
	PageNumber     *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount     *int64                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetMetaTableOutputResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableOutputResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMetaTableOutputResponseBodyData) SetDataEntityList(v []*GetMetaTableOutputResponseBodyDataDataEntityList) *GetMetaTableOutputResponseBodyData {
	s.DataEntityList = v
	return s
}

func (s *GetMetaTableOutputResponseBodyData) SetPageNumber(v int32) *GetMetaTableOutputResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *GetMetaTableOutputResponseBodyData) SetPageSize(v int32) *GetMetaTableOutputResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetMetaTableOutputResponseBodyData) SetTotalCount(v int64) *GetMetaTableOutputResponseBodyData {
	s.TotalCount = &v
	return s
}

type GetMetaTableOutputResponseBodyDataDataEntityList struct {
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TableGuid      *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TaskId         *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskInstanceId *int64  `json:"TaskInstanceId,omitempty" xml:"TaskInstanceId,omitempty"`
	WaitTime       *string `json:"WaitTime,omitempty" xml:"WaitTime,omitempty"`
}

func (s GetMetaTableOutputResponseBodyDataDataEntityList) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableOutputResponseBodyDataDataEntityList) GoString() string {
	return s.String()
}

func (s *GetMetaTableOutputResponseBodyDataDataEntityList) SetEndTime(v string) *GetMetaTableOutputResponseBodyDataDataEntityList {
	s.EndTime = &v
	return s
}

func (s *GetMetaTableOutputResponseBodyDataDataEntityList) SetProjectId(v int64) *GetMetaTableOutputResponseBodyDataDataEntityList {
	s.ProjectId = &v
	return s
}

func (s *GetMetaTableOutputResponseBodyDataDataEntityList) SetStartTime(v string) *GetMetaTableOutputResponseBodyDataDataEntityList {
	s.StartTime = &v
	return s
}

func (s *GetMetaTableOutputResponseBodyDataDataEntityList) SetTableGuid(v string) *GetMetaTableOutputResponseBodyDataDataEntityList {
	s.TableGuid = &v
	return s
}

func (s *GetMetaTableOutputResponseBodyDataDataEntityList) SetTaskId(v string) *GetMetaTableOutputResponseBodyDataDataEntityList {
	s.TaskId = &v
	return s
}

func (s *GetMetaTableOutputResponseBodyDataDataEntityList) SetTaskInstanceId(v int64) *GetMetaTableOutputResponseBodyDataDataEntityList {
	s.TaskInstanceId = &v
	return s
}

func (s *GetMetaTableOutputResponseBodyDataDataEntityList) SetWaitTime(v string) *GetMetaTableOutputResponseBodyDataDataEntityList {
	s.WaitTime = &v
	return s
}

type GetMetaTableOutputResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaTableOutputResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaTableOutputResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableOutputResponse) GoString() string {
	return s.String()
}

func (s *GetMetaTableOutputResponse) SetHeaders(v map[string]*string) *GetMetaTableOutputResponse {
	s.Headers = v
	return s
}

func (s *GetMetaTableOutputResponse) SetBody(v *GetMetaTableOutputResponseBody) *GetMetaTableOutputResponse {
	s.Body = v
	return s
}

type GetMetaTablePartitionRequest struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DatabaseName   *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TableGuid      *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TableName      *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetMetaTablePartitionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTablePartitionRequest) GoString() string {
	return s.String()
}

func (s *GetMetaTablePartitionRequest) SetClusterId(v string) *GetMetaTablePartitionRequest {
	s.ClusterId = &v
	return s
}

func (s *GetMetaTablePartitionRequest) SetDataSourceType(v string) *GetMetaTablePartitionRequest {
	s.DataSourceType = &v
	return s
}

func (s *GetMetaTablePartitionRequest) SetDatabaseName(v string) *GetMetaTablePartitionRequest {
	s.DatabaseName = &v
	return s
}

func (s *GetMetaTablePartitionRequest) SetPageNumber(v int32) *GetMetaTablePartitionRequest {
	s.PageNumber = &v
	return s
}

func (s *GetMetaTablePartitionRequest) SetPageSize(v int32) *GetMetaTablePartitionRequest {
	s.PageSize = &v
	return s
}

func (s *GetMetaTablePartitionRequest) SetTableGuid(v string) *GetMetaTablePartitionRequest {
	s.TableGuid = &v
	return s
}

func (s *GetMetaTablePartitionRequest) SetTableName(v string) *GetMetaTablePartitionRequest {
	s.TableName = &v
	return s
}

type GetMetaTablePartitionResponseBody struct {
	Data           *GetMetaTablePartitionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMetaTablePartitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTablePartitionResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaTablePartitionResponseBody) SetData(v *GetMetaTablePartitionResponseBodyData) *GetMetaTablePartitionResponseBody {
	s.Data = v
	return s
}

func (s *GetMetaTablePartitionResponseBody) SetErrorCode(v string) *GetMetaTablePartitionResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMetaTablePartitionResponseBody) SetErrorMessage(v string) *GetMetaTablePartitionResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMetaTablePartitionResponseBody) SetHttpStatusCode(v int32) *GetMetaTablePartitionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMetaTablePartitionResponseBody) SetRequestId(v string) *GetMetaTablePartitionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMetaTablePartitionResponseBody) SetSuccess(v bool) *GetMetaTablePartitionResponseBody {
	s.Success = &v
	return s
}

type GetMetaTablePartitionResponseBodyData struct {
	DataEntityList []*GetMetaTablePartitionResponseBodyDataDataEntityList `json:"DataEntityList,omitempty" xml:"DataEntityList,omitempty" type:"Repeated"`
	PageNumber     *int32                                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount     *int64                                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetMetaTablePartitionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTablePartitionResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMetaTablePartitionResponseBodyData) SetDataEntityList(v []*GetMetaTablePartitionResponseBodyDataDataEntityList) *GetMetaTablePartitionResponseBodyData {
	s.DataEntityList = v
	return s
}

func (s *GetMetaTablePartitionResponseBodyData) SetPageNumber(v int32) *GetMetaTablePartitionResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *GetMetaTablePartitionResponseBodyData) SetPageSize(v int32) *GetMetaTablePartitionResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetMetaTablePartitionResponseBodyData) SetTotalCount(v int64) *GetMetaTablePartitionResponseBodyData {
	s.TotalCount = &v
	return s
}

type GetMetaTablePartitionResponseBodyDataDataEntityList struct {
	Comment           *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateTime        *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataSize          *int64  `json:"DataSize,omitempty" xml:"DataSize,omitempty"`
	ModifiedTime      *int64  `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	PartitionGuid     *string `json:"PartitionGuid,omitempty" xml:"PartitionGuid,omitempty"`
	PartitionLocation *string `json:"PartitionLocation,omitempty" xml:"PartitionLocation,omitempty"`
	PartitionName     *string `json:"PartitionName,omitempty" xml:"PartitionName,omitempty"`
	PartitionPath     *string `json:"PartitionPath,omitempty" xml:"PartitionPath,omitempty"`
	PartitionType     *string `json:"PartitionType,omitempty" xml:"PartitionType,omitempty"`
	RecordCount       *int64  `json:"RecordCount,omitempty" xml:"RecordCount,omitempty"`
	TableGuid         *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s GetMetaTablePartitionResponseBodyDataDataEntityList) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTablePartitionResponseBodyDataDataEntityList) GoString() string {
	return s.String()
}

func (s *GetMetaTablePartitionResponseBodyDataDataEntityList) SetComment(v string) *GetMetaTablePartitionResponseBodyDataDataEntityList {
	s.Comment = &v
	return s
}

func (s *GetMetaTablePartitionResponseBodyDataDataEntityList) SetCreateTime(v int64) *GetMetaTablePartitionResponseBodyDataDataEntityList {
	s.CreateTime = &v
	return s
}

func (s *GetMetaTablePartitionResponseBodyDataDataEntityList) SetDataSize(v int64) *GetMetaTablePartitionResponseBodyDataDataEntityList {
	s.DataSize = &v
	return s
}

func (s *GetMetaTablePartitionResponseBodyDataDataEntityList) SetModifiedTime(v int64) *GetMetaTablePartitionResponseBodyDataDataEntityList {
	s.ModifiedTime = &v
	return s
}

func (s *GetMetaTablePartitionResponseBodyDataDataEntityList) SetPartitionGuid(v string) *GetMetaTablePartitionResponseBodyDataDataEntityList {
	s.PartitionGuid = &v
	return s
}

func (s *GetMetaTablePartitionResponseBodyDataDataEntityList) SetPartitionLocation(v string) *GetMetaTablePartitionResponseBodyDataDataEntityList {
	s.PartitionLocation = &v
	return s
}

func (s *GetMetaTablePartitionResponseBodyDataDataEntityList) SetPartitionName(v string) *GetMetaTablePartitionResponseBodyDataDataEntityList {
	s.PartitionName = &v
	return s
}

func (s *GetMetaTablePartitionResponseBodyDataDataEntityList) SetPartitionPath(v string) *GetMetaTablePartitionResponseBodyDataDataEntityList {
	s.PartitionPath = &v
	return s
}

func (s *GetMetaTablePartitionResponseBodyDataDataEntityList) SetPartitionType(v string) *GetMetaTablePartitionResponseBodyDataDataEntityList {
	s.PartitionType = &v
	return s
}

func (s *GetMetaTablePartitionResponseBodyDataDataEntityList) SetRecordCount(v int64) *GetMetaTablePartitionResponseBodyDataDataEntityList {
	s.RecordCount = &v
	return s
}

func (s *GetMetaTablePartitionResponseBodyDataDataEntityList) SetTableGuid(v string) *GetMetaTablePartitionResponseBodyDataDataEntityList {
	s.TableGuid = &v
	return s
}

type GetMetaTablePartitionResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaTablePartitionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaTablePartitionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTablePartitionResponse) GoString() string {
	return s.String()
}

func (s *GetMetaTablePartitionResponse) SetHeaders(v map[string]*string) *GetMetaTablePartitionResponse {
	s.Headers = v
	return s
}

func (s *GetMetaTablePartitionResponse) SetBody(v *GetMetaTablePartitionResponseBody) *GetMetaTablePartitionResponse {
	s.Body = v
	return s
}

type GetMetaTableThemeLevelRequest struct {
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	TableGuid      *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s GetMetaTableThemeLevelRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableThemeLevelRequest) GoString() string {
	return s.String()
}

func (s *GetMetaTableThemeLevelRequest) SetDataSourceType(v string) *GetMetaTableThemeLevelRequest {
	s.DataSourceType = &v
	return s
}

func (s *GetMetaTableThemeLevelRequest) SetTableGuid(v string) *GetMetaTableThemeLevelRequest {
	s.TableGuid = &v
	return s
}

type GetMetaTableThemeLevelResponseBody struct {
	Entity         *GetMetaTableThemeLevelResponseBodyEntity `json:"Entity,omitempty" xml:"Entity,omitempty" type:"Struct"`
	ErrorCode      *string                                   `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMetaTableThemeLevelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableThemeLevelResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaTableThemeLevelResponseBody) SetEntity(v *GetMetaTableThemeLevelResponseBodyEntity) *GetMetaTableThemeLevelResponseBody {
	s.Entity = v
	return s
}

func (s *GetMetaTableThemeLevelResponseBody) SetErrorCode(v string) *GetMetaTableThemeLevelResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMetaTableThemeLevelResponseBody) SetErrorMessage(v string) *GetMetaTableThemeLevelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMetaTableThemeLevelResponseBody) SetHttpStatusCode(v int32) *GetMetaTableThemeLevelResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMetaTableThemeLevelResponseBody) SetRequestId(v string) *GetMetaTableThemeLevelResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMetaTableThemeLevelResponseBody) SetSuccess(v bool) *GetMetaTableThemeLevelResponseBody {
	s.Success = &v
	return s
}

type GetMetaTableThemeLevelResponseBodyEntity struct {
	Level []*GetMetaTableThemeLevelResponseBodyEntityLevel `json:"Level,omitempty" xml:"Level,omitempty" type:"Repeated"`
	Theme []*GetMetaTableThemeLevelResponseBodyEntityTheme `json:"Theme,omitempty" xml:"Theme,omitempty" type:"Repeated"`
}

func (s GetMetaTableThemeLevelResponseBodyEntity) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableThemeLevelResponseBodyEntity) GoString() string {
	return s.String()
}

func (s *GetMetaTableThemeLevelResponseBodyEntity) SetLevel(v []*GetMetaTableThemeLevelResponseBodyEntityLevel) *GetMetaTableThemeLevelResponseBodyEntity {
	s.Level = v
	return s
}

func (s *GetMetaTableThemeLevelResponseBodyEntity) SetTheme(v []*GetMetaTableThemeLevelResponseBodyEntityTheme) *GetMetaTableThemeLevelResponseBodyEntity {
	s.Theme = v
	return s
}

type GetMetaTableThemeLevelResponseBodyEntityLevel struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	LevelId     *int64  `json:"LevelId,omitempty" xml:"LevelId,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type        *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetMetaTableThemeLevelResponseBodyEntityLevel) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableThemeLevelResponseBodyEntityLevel) GoString() string {
	return s.String()
}

func (s *GetMetaTableThemeLevelResponseBodyEntityLevel) SetDescription(v string) *GetMetaTableThemeLevelResponseBodyEntityLevel {
	s.Description = &v
	return s
}

func (s *GetMetaTableThemeLevelResponseBodyEntityLevel) SetLevelId(v int64) *GetMetaTableThemeLevelResponseBodyEntityLevel {
	s.LevelId = &v
	return s
}

func (s *GetMetaTableThemeLevelResponseBodyEntityLevel) SetName(v string) *GetMetaTableThemeLevelResponseBodyEntityLevel {
	s.Name = &v
	return s
}

func (s *GetMetaTableThemeLevelResponseBodyEntityLevel) SetType(v int32) *GetMetaTableThemeLevelResponseBodyEntityLevel {
	s.Type = &v
	return s
}

type GetMetaTableThemeLevelResponseBodyEntityTheme struct {
	Level    *int32  `json:"Level,omitempty" xml:"Level,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ParentId *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ThemeId  *int64  `json:"ThemeId,omitempty" xml:"ThemeId,omitempty"`
}

func (s GetMetaTableThemeLevelResponseBodyEntityTheme) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableThemeLevelResponseBodyEntityTheme) GoString() string {
	return s.String()
}

func (s *GetMetaTableThemeLevelResponseBodyEntityTheme) SetLevel(v int32) *GetMetaTableThemeLevelResponseBodyEntityTheme {
	s.Level = &v
	return s
}

func (s *GetMetaTableThemeLevelResponseBodyEntityTheme) SetName(v string) *GetMetaTableThemeLevelResponseBodyEntityTheme {
	s.Name = &v
	return s
}

func (s *GetMetaTableThemeLevelResponseBodyEntityTheme) SetParentId(v int64) *GetMetaTableThemeLevelResponseBodyEntityTheme {
	s.ParentId = &v
	return s
}

func (s *GetMetaTableThemeLevelResponseBodyEntityTheme) SetThemeId(v int64) *GetMetaTableThemeLevelResponseBodyEntityTheme {
	s.ThemeId = &v
	return s
}

type GetMetaTableThemeLevelResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMetaTableThemeLevelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMetaTableThemeLevelResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaTableThemeLevelResponse) GoString() string {
	return s.String()
}

func (s *GetMetaTableThemeLevelResponse) SetHeaders(v map[string]*string) *GetMetaTableThemeLevelResponse {
	s.Headers = v
	return s
}

func (s *GetMetaTableThemeLevelResponse) SetBody(v *GetMetaTableThemeLevelResponseBody) *GetMetaTableThemeLevelResponse {
	s.Body = v
	return s
}

type GetMigrationProcessRequest struct {
	MigrationId *int64 `json:"MigrationId,omitempty" xml:"MigrationId,omitempty"`
	ProjectId   *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetMigrationProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMigrationProcessRequest) GoString() string {
	return s.String()
}

func (s *GetMigrationProcessRequest) SetMigrationId(v int64) *GetMigrationProcessRequest {
	s.MigrationId = &v
	return s
}

func (s *GetMigrationProcessRequest) SetProjectId(v int64) *GetMigrationProcessRequest {
	s.ProjectId = &v
	return s
}

type GetMigrationProcessResponseBody struct {
	Data           []*GetMigrationProcessResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorCode      *string                                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMigrationProcessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMigrationProcessResponseBody) GoString() string {
	return s.String()
}

func (s *GetMigrationProcessResponseBody) SetData(v []*GetMigrationProcessResponseBodyData) *GetMigrationProcessResponseBody {
	s.Data = v
	return s
}

func (s *GetMigrationProcessResponseBody) SetErrorCode(v string) *GetMigrationProcessResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMigrationProcessResponseBody) SetErrorMessage(v string) *GetMigrationProcessResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMigrationProcessResponseBody) SetHttpStatusCode(v int32) *GetMigrationProcessResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMigrationProcessResponseBody) SetRequestId(v string) *GetMigrationProcessResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMigrationProcessResponseBody) SetSuccess(v bool) *GetMigrationProcessResponseBody {
	s.Success = &v
	return s
}

type GetMigrationProcessResponseBodyData struct {
	TaskName   *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskStatus *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
}

func (s GetMigrationProcessResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMigrationProcessResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMigrationProcessResponseBodyData) SetTaskName(v string) *GetMigrationProcessResponseBodyData {
	s.TaskName = &v
	return s
}

func (s *GetMigrationProcessResponseBodyData) SetTaskStatus(v string) *GetMigrationProcessResponseBodyData {
	s.TaskStatus = &v
	return s
}

type GetMigrationProcessResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMigrationProcessResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMigrationProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMigrationProcessResponse) GoString() string {
	return s.String()
}

func (s *GetMigrationProcessResponse) SetHeaders(v map[string]*string) *GetMigrationProcessResponse {
	s.Headers = v
	return s
}

func (s *GetMigrationProcessResponse) SetBody(v *GetMigrationProcessResponseBody) *GetMigrationProcessResponse {
	s.Body = v
	return s
}

type GetMigrationSummaryRequest struct {
	MigrationId *int64 `json:"MigrationId,omitempty" xml:"MigrationId,omitempty"`
	ProjectId   *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetMigrationSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMigrationSummaryRequest) GoString() string {
	return s.String()
}

func (s *GetMigrationSummaryRequest) SetMigrationId(v int64) *GetMigrationSummaryRequest {
	s.MigrationId = &v
	return s
}

func (s *GetMigrationSummaryRequest) SetProjectId(v int64) *GetMigrationSummaryRequest {
	s.ProjectId = &v
	return s
}

type GetMigrationSummaryResponseBody struct {
	Data      *GetMigrationSummaryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMigrationSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMigrationSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *GetMigrationSummaryResponseBody) SetData(v *GetMigrationSummaryResponseBodyData) *GetMigrationSummaryResponseBody {
	s.Data = v
	return s
}

func (s *GetMigrationSummaryResponseBody) SetRequestId(v string) *GetMigrationSummaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMigrationSummaryResponseBody) SetSuccess(v bool) *GetMigrationSummaryResponseBody {
	s.Success = &v
	return s
}

type GetMigrationSummaryResponseBodyData struct {
	CreateUser  *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	GmtCreate   *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	MigrationId *int64  `json:"MigrationId,omitempty" xml:"MigrationId,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OpUser      *string `json:"OpUser,omitempty" xml:"OpUser,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetMigrationSummaryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMigrationSummaryResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMigrationSummaryResponseBodyData) SetCreateUser(v string) *GetMigrationSummaryResponseBodyData {
	s.CreateUser = &v
	return s
}

func (s *GetMigrationSummaryResponseBodyData) SetDownloadUrl(v string) *GetMigrationSummaryResponseBodyData {
	s.DownloadUrl = &v
	return s
}

func (s *GetMigrationSummaryResponseBodyData) SetGmtCreate(v int64) *GetMigrationSummaryResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *GetMigrationSummaryResponseBodyData) SetGmtModified(v int64) *GetMigrationSummaryResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *GetMigrationSummaryResponseBodyData) SetMigrationId(v int64) *GetMigrationSummaryResponseBodyData {
	s.MigrationId = &v
	return s
}

func (s *GetMigrationSummaryResponseBodyData) SetName(v string) *GetMigrationSummaryResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetMigrationSummaryResponseBodyData) SetOpUser(v string) *GetMigrationSummaryResponseBodyData {
	s.OpUser = &v
	return s
}

func (s *GetMigrationSummaryResponseBodyData) SetProjectId(v int64) *GetMigrationSummaryResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetMigrationSummaryResponseBodyData) SetStatus(v string) *GetMigrationSummaryResponseBodyData {
	s.Status = &v
	return s
}

type GetMigrationSummaryResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMigrationSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMigrationSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMigrationSummaryResponse) GoString() string {
	return s.String()
}

func (s *GetMigrationSummaryResponse) SetHeaders(v map[string]*string) *GetMigrationSummaryResponse {
	s.Headers = v
	return s
}

func (s *GetMigrationSummaryResponse) SetBody(v *GetMigrationSummaryResponseBody) *GetMigrationSummaryResponse {
	s.Body = v
	return s
}

type GetNodeRequest struct {
	NodeId     *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s GetNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodeRequest) GoString() string {
	return s.String()
}

func (s *GetNodeRequest) SetNodeId(v int64) *GetNodeRequest {
	s.NodeId = &v
	return s
}

func (s *GetNodeRequest) SetProjectEnv(v string) *GetNodeRequest {
	s.ProjectEnv = &v
	return s
}

type GetNodeResponseBody struct {
	Data           *GetNodeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNodeResponseBody) GoString() string {
	return s.String()
}

func (s *GetNodeResponseBody) SetData(v *GetNodeResponseBodyData) *GetNodeResponseBody {
	s.Data = v
	return s
}

func (s *GetNodeResponseBody) SetErrorCode(v string) *GetNodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetNodeResponseBody) SetErrorMessage(v string) *GetNodeResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetNodeResponseBody) SetHttpStatusCode(v int32) *GetNodeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetNodeResponseBody) SetRequestId(v string) *GetNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetNodeResponseBody) SetSuccess(v bool) *GetNodeResponseBody {
	s.Success = &v
	return s
}

type GetNodeResponseBodyData struct {
	BaselineId     *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	BusinessId     *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	Connection     *string `json:"Connection,omitempty" xml:"Connection,omitempty"`
	CronExpress    *string `json:"CronExpress,omitempty" xml:"CronExpress,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DqcDescription *string `json:"DqcDescription,omitempty" xml:"DqcDescription,omitempty"`
	DqcType        *int32  `json:"DqcType,omitempty" xml:"DqcType,omitempty"`
	NodeId         *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName       *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ParamValues    *string `json:"ParamValues,omitempty" xml:"ParamValues,omitempty"`
	Priority       *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ProgramType    *string `json:"ProgramType,omitempty" xml:"ProgramType,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RelatedFlowId  *int64  `json:"RelatedFlowId,omitempty" xml:"RelatedFlowId,omitempty"`
	RepeatInterval *int64  `json:"RepeatInterval,omitempty" xml:"RepeatInterval,omitempty"`
	Repeatability  *string `json:"Repeatability,omitempty" xml:"Repeatability,omitempty"`
	ResGroupName   *string `json:"ResGroupName,omitempty" xml:"ResGroupName,omitempty"`
	SchedulerType  *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
}

func (s GetNodeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetNodeResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetNodeResponseBodyData) SetBaselineId(v int64) *GetNodeResponseBodyData {
	s.BaselineId = &v
	return s
}

func (s *GetNodeResponseBodyData) SetBusinessId(v int64) *GetNodeResponseBodyData {
	s.BusinessId = &v
	return s
}

func (s *GetNodeResponseBodyData) SetConnection(v string) *GetNodeResponseBodyData {
	s.Connection = &v
	return s
}

func (s *GetNodeResponseBodyData) SetCronExpress(v string) *GetNodeResponseBodyData {
	s.CronExpress = &v
	return s
}

func (s *GetNodeResponseBodyData) SetDescription(v string) *GetNodeResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetNodeResponseBodyData) SetDqcDescription(v string) *GetNodeResponseBodyData {
	s.DqcDescription = &v
	return s
}

func (s *GetNodeResponseBodyData) SetDqcType(v int32) *GetNodeResponseBodyData {
	s.DqcType = &v
	return s
}

func (s *GetNodeResponseBodyData) SetNodeId(v int64) *GetNodeResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *GetNodeResponseBodyData) SetNodeName(v string) *GetNodeResponseBodyData {
	s.NodeName = &v
	return s
}

func (s *GetNodeResponseBodyData) SetOwnerId(v string) *GetNodeResponseBodyData {
	s.OwnerId = &v
	return s
}

func (s *GetNodeResponseBodyData) SetParamValues(v string) *GetNodeResponseBodyData {
	s.ParamValues = &v
	return s
}

func (s *GetNodeResponseBodyData) SetPriority(v int32) *GetNodeResponseBodyData {
	s.Priority = &v
	return s
}

func (s *GetNodeResponseBodyData) SetProgramType(v string) *GetNodeResponseBodyData {
	s.ProgramType = &v
	return s
}

func (s *GetNodeResponseBodyData) SetProjectId(v int64) *GetNodeResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetNodeResponseBodyData) SetRelatedFlowId(v int64) *GetNodeResponseBodyData {
	s.RelatedFlowId = &v
	return s
}

func (s *GetNodeResponseBodyData) SetRepeatInterval(v int64) *GetNodeResponseBodyData {
	s.RepeatInterval = &v
	return s
}

func (s *GetNodeResponseBodyData) SetRepeatability(v string) *GetNodeResponseBodyData {
	s.Repeatability = &v
	return s
}

func (s *GetNodeResponseBodyData) SetResGroupName(v string) *GetNodeResponseBodyData {
	s.ResGroupName = &v
	return s
}

func (s *GetNodeResponseBodyData) SetSchedulerType(v string) *GetNodeResponseBodyData {
	s.SchedulerType = &v
	return s
}

type GetNodeResponse struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetNodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNodeResponse) GoString() string {
	return s.String()
}

func (s *GetNodeResponse) SetHeaders(v map[string]*string) *GetNodeResponse {
	s.Headers = v
	return s
}

func (s *GetNodeResponse) SetBody(v *GetNodeResponseBody) *GetNodeResponse {
	s.Body = v
	return s
}

type GetNodeChildrenRequest struct {
	NodeId     *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s GetNodeChildrenRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodeChildrenRequest) GoString() string {
	return s.String()
}

func (s *GetNodeChildrenRequest) SetNodeId(v int64) *GetNodeChildrenRequest {
	s.NodeId = &v
	return s
}

func (s *GetNodeChildrenRequest) SetProjectEnv(v string) *GetNodeChildrenRequest {
	s.ProjectEnv = &v
	return s
}

type GetNodeChildrenResponseBody struct {
	Data           *GetNodeChildrenResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                          `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetNodeChildrenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNodeChildrenResponseBody) GoString() string {
	return s.String()
}

func (s *GetNodeChildrenResponseBody) SetData(v *GetNodeChildrenResponseBodyData) *GetNodeChildrenResponseBody {
	s.Data = v
	return s
}

func (s *GetNodeChildrenResponseBody) SetErrorCode(v string) *GetNodeChildrenResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetNodeChildrenResponseBody) SetErrorMessage(v string) *GetNodeChildrenResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetNodeChildrenResponseBody) SetHttpStatusCode(v int32) *GetNodeChildrenResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetNodeChildrenResponseBody) SetRequestId(v string) *GetNodeChildrenResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetNodeChildrenResponseBody) SetSuccess(v bool) *GetNodeChildrenResponseBody {
	s.Success = &v
	return s
}

type GetNodeChildrenResponseBodyData struct {
	Nodes []*GetNodeChildrenResponseBodyDataNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
}

func (s GetNodeChildrenResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetNodeChildrenResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetNodeChildrenResponseBodyData) SetNodes(v []*GetNodeChildrenResponseBodyDataNodes) *GetNodeChildrenResponseBodyData {
	s.Nodes = v
	return s
}

type GetNodeChildrenResponseBodyDataNodes struct {
	BaselineId    *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	CronExpress   *string `json:"CronExpress,omitempty" xml:"CronExpress,omitempty"`
	NodeId        *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName      *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	OwnerId       *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Priority      *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ProgramType   *string `json:"ProgramType,omitempty" xml:"ProgramType,omitempty"`
	ProjectId     *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Repeatability *bool   `json:"Repeatability,omitempty" xml:"Repeatability,omitempty"`
	SchedulerType *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
}

func (s GetNodeChildrenResponseBodyDataNodes) String() string {
	return tea.Prettify(s)
}

func (s GetNodeChildrenResponseBodyDataNodes) GoString() string {
	return s.String()
}

func (s *GetNodeChildrenResponseBodyDataNodes) SetBaselineId(v int64) *GetNodeChildrenResponseBodyDataNodes {
	s.BaselineId = &v
	return s
}

func (s *GetNodeChildrenResponseBodyDataNodes) SetCronExpress(v string) *GetNodeChildrenResponseBodyDataNodes {
	s.CronExpress = &v
	return s
}

func (s *GetNodeChildrenResponseBodyDataNodes) SetNodeId(v int64) *GetNodeChildrenResponseBodyDataNodes {
	s.NodeId = &v
	return s
}

func (s *GetNodeChildrenResponseBodyDataNodes) SetNodeName(v string) *GetNodeChildrenResponseBodyDataNodes {
	s.NodeName = &v
	return s
}

func (s *GetNodeChildrenResponseBodyDataNodes) SetOwnerId(v string) *GetNodeChildrenResponseBodyDataNodes {
	s.OwnerId = &v
	return s
}

func (s *GetNodeChildrenResponseBodyDataNodes) SetPriority(v int32) *GetNodeChildrenResponseBodyDataNodes {
	s.Priority = &v
	return s
}

func (s *GetNodeChildrenResponseBodyDataNodes) SetProgramType(v string) *GetNodeChildrenResponseBodyDataNodes {
	s.ProgramType = &v
	return s
}

func (s *GetNodeChildrenResponseBodyDataNodes) SetProjectId(v int64) *GetNodeChildrenResponseBodyDataNodes {
	s.ProjectId = &v
	return s
}

func (s *GetNodeChildrenResponseBodyDataNodes) SetRepeatability(v bool) *GetNodeChildrenResponseBodyDataNodes {
	s.Repeatability = &v
	return s
}

func (s *GetNodeChildrenResponseBodyDataNodes) SetSchedulerType(v string) *GetNodeChildrenResponseBodyDataNodes {
	s.SchedulerType = &v
	return s
}

type GetNodeChildrenResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetNodeChildrenResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetNodeChildrenResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNodeChildrenResponse) GoString() string {
	return s.String()
}

func (s *GetNodeChildrenResponse) SetHeaders(v map[string]*string) *GetNodeChildrenResponse {
	s.Headers = v
	return s
}

func (s *GetNodeChildrenResponse) SetBody(v *GetNodeChildrenResponseBody) *GetNodeChildrenResponse {
	s.Body = v
	return s
}

type GetNodeCodeRequest struct {
	NodeId     *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s GetNodeCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodeCodeRequest) GoString() string {
	return s.String()
}

func (s *GetNodeCodeRequest) SetNodeId(v int64) *GetNodeCodeRequest {
	s.NodeId = &v
	return s
}

func (s *GetNodeCodeRequest) SetProjectEnv(v string) *GetNodeCodeRequest {
	s.ProjectEnv = &v
	return s
}

type GetNodeCodeResponseBody struct {
	Data           *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetNodeCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNodeCodeResponseBody) GoString() string {
	return s.String()
}

func (s *GetNodeCodeResponseBody) SetData(v string) *GetNodeCodeResponseBody {
	s.Data = &v
	return s
}

func (s *GetNodeCodeResponseBody) SetErrorCode(v string) *GetNodeCodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetNodeCodeResponseBody) SetErrorMessage(v string) *GetNodeCodeResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetNodeCodeResponseBody) SetHttpStatusCode(v int32) *GetNodeCodeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetNodeCodeResponseBody) SetRequestId(v string) *GetNodeCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetNodeCodeResponseBody) SetSuccess(v bool) *GetNodeCodeResponseBody {
	s.Success = &v
	return s
}

type GetNodeCodeResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetNodeCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetNodeCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNodeCodeResponse) GoString() string {
	return s.String()
}

func (s *GetNodeCodeResponse) SetHeaders(v map[string]*string) *GetNodeCodeResponse {
	s.Headers = v
	return s
}

func (s *GetNodeCodeResponse) SetBody(v *GetNodeCodeResponseBody) *GetNodeCodeResponse {
	s.Body = v
	return s
}

type GetNodeOnBaselineRequest struct {
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
}

func (s GetNodeOnBaselineRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodeOnBaselineRequest) GoString() string {
	return s.String()
}

func (s *GetNodeOnBaselineRequest) SetBaselineId(v int64) *GetNodeOnBaselineRequest {
	s.BaselineId = &v
	return s
}

type GetNodeOnBaselineResponseBody struct {
	Data           []*GetNodeOnBaselineResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorCode      *string                              `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *string                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetNodeOnBaselineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNodeOnBaselineResponseBody) GoString() string {
	return s.String()
}

func (s *GetNodeOnBaselineResponseBody) SetData(v []*GetNodeOnBaselineResponseBodyData) *GetNodeOnBaselineResponseBody {
	s.Data = v
	return s
}

func (s *GetNodeOnBaselineResponseBody) SetErrorCode(v string) *GetNodeOnBaselineResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetNodeOnBaselineResponseBody) SetErrorMessage(v string) *GetNodeOnBaselineResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetNodeOnBaselineResponseBody) SetHttpStatusCode(v int32) *GetNodeOnBaselineResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetNodeOnBaselineResponseBody) SetRequestId(v string) *GetNodeOnBaselineResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetNodeOnBaselineResponseBody) SetSuccess(v string) *GetNodeOnBaselineResponseBody {
	s.Success = &v
	return s
}

type GetNodeOnBaselineResponseBodyData struct {
	NodeId    *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName  *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner     *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetNodeOnBaselineResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetNodeOnBaselineResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetNodeOnBaselineResponseBodyData) SetNodeId(v int64) *GetNodeOnBaselineResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *GetNodeOnBaselineResponseBodyData) SetNodeName(v string) *GetNodeOnBaselineResponseBodyData {
	s.NodeName = &v
	return s
}

func (s *GetNodeOnBaselineResponseBodyData) SetOwner(v string) *GetNodeOnBaselineResponseBodyData {
	s.Owner = &v
	return s
}

func (s *GetNodeOnBaselineResponseBodyData) SetProjectId(v int64) *GetNodeOnBaselineResponseBodyData {
	s.ProjectId = &v
	return s
}

type GetNodeOnBaselineResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetNodeOnBaselineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetNodeOnBaselineResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNodeOnBaselineResponse) GoString() string {
	return s.String()
}

func (s *GetNodeOnBaselineResponse) SetHeaders(v map[string]*string) *GetNodeOnBaselineResponse {
	s.Headers = v
	return s
}

func (s *GetNodeOnBaselineResponse) SetBody(v *GetNodeOnBaselineResponseBody) *GetNodeOnBaselineResponse {
	s.Body = v
	return s
}

type GetNodeParentsRequest struct {
	NodeId     *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s GetNodeParentsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodeParentsRequest) GoString() string {
	return s.String()
}

func (s *GetNodeParentsRequest) SetNodeId(v int64) *GetNodeParentsRequest {
	s.NodeId = &v
	return s
}

func (s *GetNodeParentsRequest) SetProjectEnv(v string) *GetNodeParentsRequest {
	s.ProjectEnv = &v
	return s
}

type GetNodeParentsResponseBody struct {
	Data           *GetNodeParentsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                         `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetNodeParentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNodeParentsResponseBody) GoString() string {
	return s.String()
}

func (s *GetNodeParentsResponseBody) SetData(v *GetNodeParentsResponseBodyData) *GetNodeParentsResponseBody {
	s.Data = v
	return s
}

func (s *GetNodeParentsResponseBody) SetErrorCode(v string) *GetNodeParentsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetNodeParentsResponseBody) SetErrorMessage(v string) *GetNodeParentsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetNodeParentsResponseBody) SetHttpStatusCode(v int32) *GetNodeParentsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetNodeParentsResponseBody) SetRequestId(v string) *GetNodeParentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetNodeParentsResponseBody) SetSuccess(v bool) *GetNodeParentsResponseBody {
	s.Success = &v
	return s
}

type GetNodeParentsResponseBodyData struct {
	Nodes []*GetNodeParentsResponseBodyDataNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
}

func (s GetNodeParentsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetNodeParentsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetNodeParentsResponseBodyData) SetNodes(v []*GetNodeParentsResponseBodyDataNodes) *GetNodeParentsResponseBodyData {
	s.Nodes = v
	return s
}

type GetNodeParentsResponseBodyDataNodes struct {
	BaselineId    *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	CronExpress   *string `json:"CronExpress,omitempty" xml:"CronExpress,omitempty"`
	NodeId        *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName      *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	OwnerId       *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Priority      *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ProgramType   *string `json:"ProgramType,omitempty" xml:"ProgramType,omitempty"`
	ProjectId     *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Repeatability *bool   `json:"Repeatability,omitempty" xml:"Repeatability,omitempty"`
	SchedulerType *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
}

func (s GetNodeParentsResponseBodyDataNodes) String() string {
	return tea.Prettify(s)
}

func (s GetNodeParentsResponseBodyDataNodes) GoString() string {
	return s.String()
}

func (s *GetNodeParentsResponseBodyDataNodes) SetBaselineId(v int64) *GetNodeParentsResponseBodyDataNodes {
	s.BaselineId = &v
	return s
}

func (s *GetNodeParentsResponseBodyDataNodes) SetCronExpress(v string) *GetNodeParentsResponseBodyDataNodes {
	s.CronExpress = &v
	return s
}

func (s *GetNodeParentsResponseBodyDataNodes) SetNodeId(v int64) *GetNodeParentsResponseBodyDataNodes {
	s.NodeId = &v
	return s
}

func (s *GetNodeParentsResponseBodyDataNodes) SetNodeName(v string) *GetNodeParentsResponseBodyDataNodes {
	s.NodeName = &v
	return s
}

func (s *GetNodeParentsResponseBodyDataNodes) SetOwnerId(v string) *GetNodeParentsResponseBodyDataNodes {
	s.OwnerId = &v
	return s
}

func (s *GetNodeParentsResponseBodyDataNodes) SetPriority(v int32) *GetNodeParentsResponseBodyDataNodes {
	s.Priority = &v
	return s
}

func (s *GetNodeParentsResponseBodyDataNodes) SetProgramType(v string) *GetNodeParentsResponseBodyDataNodes {
	s.ProgramType = &v
	return s
}

func (s *GetNodeParentsResponseBodyDataNodes) SetProjectId(v int64) *GetNodeParentsResponseBodyDataNodes {
	s.ProjectId = &v
	return s
}

func (s *GetNodeParentsResponseBodyDataNodes) SetRepeatability(v bool) *GetNodeParentsResponseBodyDataNodes {
	s.Repeatability = &v
	return s
}

func (s *GetNodeParentsResponseBodyDataNodes) SetSchedulerType(v string) *GetNodeParentsResponseBodyDataNodes {
	s.SchedulerType = &v
	return s
}

type GetNodeParentsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetNodeParentsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetNodeParentsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNodeParentsResponse) GoString() string {
	return s.String()
}

func (s *GetNodeParentsResponse) SetHeaders(v map[string]*string) *GetNodeParentsResponse {
	s.Headers = v
	return s
}

func (s *GetNodeParentsResponse) SetBody(v *GetNodeParentsResponseBody) *GetNodeParentsResponse {
	s.Body = v
	return s
}

type GetNodeTypeListInfoRequest struct {
	Keyword           *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	Locale            *string `json:"Locale,omitempty" xml:"Locale,omitempty"`
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s GetNodeTypeListInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodeTypeListInfoRequest) GoString() string {
	return s.String()
}

func (s *GetNodeTypeListInfoRequest) SetKeyword(v string) *GetNodeTypeListInfoRequest {
	s.Keyword = &v
	return s
}

func (s *GetNodeTypeListInfoRequest) SetLocale(v string) *GetNodeTypeListInfoRequest {
	s.Locale = &v
	return s
}

func (s *GetNodeTypeListInfoRequest) SetPageNumber(v int32) *GetNodeTypeListInfoRequest {
	s.PageNumber = &v
	return s
}

func (s *GetNodeTypeListInfoRequest) SetPageSize(v int32) *GetNodeTypeListInfoRequest {
	s.PageSize = &v
	return s
}

func (s *GetNodeTypeListInfoRequest) SetProjectId(v int64) *GetNodeTypeListInfoRequest {
	s.ProjectId = &v
	return s
}

func (s *GetNodeTypeListInfoRequest) SetProjectIdentifier(v string) *GetNodeTypeListInfoRequest {
	s.ProjectIdentifier = &v
	return s
}

type GetNodeTypeListInfoResponseBody struct {
	NodeTypeInfoList *GetNodeTypeListInfoResponseBodyNodeTypeInfoList `json:"NodeTypeInfoList,omitempty" xml:"NodeTypeInfoList,omitempty" type:"Struct"`
	RequestId        *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetNodeTypeListInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNodeTypeListInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetNodeTypeListInfoResponseBody) SetNodeTypeInfoList(v *GetNodeTypeListInfoResponseBodyNodeTypeInfoList) *GetNodeTypeListInfoResponseBody {
	s.NodeTypeInfoList = v
	return s
}

func (s *GetNodeTypeListInfoResponseBody) SetRequestId(v string) *GetNodeTypeListInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetNodeTypeListInfoResponseBodyNodeTypeInfoList struct {
	NodeTypeInfo []*GetNodeTypeListInfoResponseBodyNodeTypeInfoListNodeTypeInfo `json:"NodeTypeInfo,omitempty" xml:"NodeTypeInfo,omitempty" type:"Repeated"`
	PageNumber   *int32                                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32                                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount   *int32                                                         `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetNodeTypeListInfoResponseBodyNodeTypeInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetNodeTypeListInfoResponseBodyNodeTypeInfoList) GoString() string {
	return s.String()
}

func (s *GetNodeTypeListInfoResponseBodyNodeTypeInfoList) SetNodeTypeInfo(v []*GetNodeTypeListInfoResponseBodyNodeTypeInfoListNodeTypeInfo) *GetNodeTypeListInfoResponseBodyNodeTypeInfoList {
	s.NodeTypeInfo = v
	return s
}

func (s *GetNodeTypeListInfoResponseBodyNodeTypeInfoList) SetPageNumber(v int32) *GetNodeTypeListInfoResponseBodyNodeTypeInfoList {
	s.PageNumber = &v
	return s
}

func (s *GetNodeTypeListInfoResponseBodyNodeTypeInfoList) SetPageSize(v int32) *GetNodeTypeListInfoResponseBodyNodeTypeInfoList {
	s.PageSize = &v
	return s
}

func (s *GetNodeTypeListInfoResponseBodyNodeTypeInfoList) SetTotalCount(v int32) *GetNodeTypeListInfoResponseBodyNodeTypeInfoList {
	s.TotalCount = &v
	return s
}

type GetNodeTypeListInfoResponseBodyNodeTypeInfoListNodeTypeInfo struct {
	NodeType     *int32  `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	NodeTypeName *string `json:"NodeTypeName,omitempty" xml:"NodeTypeName,omitempty"`
}

func (s GetNodeTypeListInfoResponseBodyNodeTypeInfoListNodeTypeInfo) String() string {
	return tea.Prettify(s)
}

func (s GetNodeTypeListInfoResponseBodyNodeTypeInfoListNodeTypeInfo) GoString() string {
	return s.String()
}

func (s *GetNodeTypeListInfoResponseBodyNodeTypeInfoListNodeTypeInfo) SetNodeType(v int32) *GetNodeTypeListInfoResponseBodyNodeTypeInfoListNodeTypeInfo {
	s.NodeType = &v
	return s
}

func (s *GetNodeTypeListInfoResponseBodyNodeTypeInfoListNodeTypeInfo) SetNodeTypeName(v string) *GetNodeTypeListInfoResponseBodyNodeTypeInfoListNodeTypeInfo {
	s.NodeTypeName = &v
	return s
}

type GetNodeTypeListInfoResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetNodeTypeListInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetNodeTypeListInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNodeTypeListInfoResponse) GoString() string {
	return s.String()
}

func (s *GetNodeTypeListInfoResponse) SetHeaders(v map[string]*string) *GetNodeTypeListInfoResponse {
	s.Headers = v
	return s
}

func (s *GetNodeTypeListInfoResponse) SetBody(v *GetNodeTypeListInfoResponseBody) *GetNodeTypeListInfoResponse {
	s.Body = v
	return s
}

type GetOpRiskDataRequest struct {
	Date     *string `json:"Date,omitempty" xml:"Date,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNo   *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RiskType *string `json:"RiskType,omitempty" xml:"RiskType,omitempty"`
}

func (s GetOpRiskDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOpRiskDataRequest) GoString() string {
	return s.String()
}

func (s *GetOpRiskDataRequest) SetDate(v string) *GetOpRiskDataRequest {
	s.Date = &v
	return s
}

func (s *GetOpRiskDataRequest) SetName(v string) *GetOpRiskDataRequest {
	s.Name = &v
	return s
}

func (s *GetOpRiskDataRequest) SetPageNo(v int32) *GetOpRiskDataRequest {
	s.PageNo = &v
	return s
}

func (s *GetOpRiskDataRequest) SetPageSize(v int32) *GetOpRiskDataRequest {
	s.PageSize = &v
	return s
}

func (s *GetOpRiskDataRequest) SetRiskType(v string) *GetOpRiskDataRequest {
	s.RiskType = &v
	return s
}

type GetOpRiskDataResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RiskData  *string `json:"RiskData,omitempty" xml:"RiskData,omitempty"`
}

func (s GetOpRiskDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetOpRiskDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetOpRiskDataResponseBody) SetRequestId(v string) *GetOpRiskDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetOpRiskDataResponseBody) SetRiskData(v string) *GetOpRiskDataResponseBody {
	s.RiskData = &v
	return s
}

type GetOpRiskDataResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetOpRiskDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetOpRiskDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOpRiskDataResponse) GoString() string {
	return s.String()
}

func (s *GetOpRiskDataResponse) SetHeaders(v map[string]*string) *GetOpRiskDataResponse {
	s.Headers = v
	return s
}

func (s *GetOpRiskDataResponse) SetBody(v *GetOpRiskDataResponseBody) *GetOpRiskDataResponse {
	s.Body = v
	return s
}

type GetOpSensitiveDataRequest struct {
	Date     *string `json:"Date,omitempty" xml:"Date,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OpType   *string `json:"OpType,omitempty" xml:"OpType,omitempty"`
	PageNo   *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetOpSensitiveDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOpSensitiveDataRequest) GoString() string {
	return s.String()
}

func (s *GetOpSensitiveDataRequest) SetDate(v string) *GetOpSensitiveDataRequest {
	s.Date = &v
	return s
}

func (s *GetOpSensitiveDataRequest) SetName(v string) *GetOpSensitiveDataRequest {
	s.Name = &v
	return s
}

func (s *GetOpSensitiveDataRequest) SetOpType(v string) *GetOpSensitiveDataRequest {
	s.OpType = &v
	return s
}

func (s *GetOpSensitiveDataRequest) SetPageNo(v int32) *GetOpSensitiveDataRequest {
	s.PageNo = &v
	return s
}

func (s *GetOpSensitiveDataRequest) SetPageSize(v int32) *GetOpSensitiveDataRequest {
	s.PageSize = &v
	return s
}

type GetOpSensitiveDataResponseBody struct {
	OpSensitiveData *string `json:"OpSensitiveData,omitempty" xml:"OpSensitiveData,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetOpSensitiveDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetOpSensitiveDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetOpSensitiveDataResponseBody) SetOpSensitiveData(v string) *GetOpSensitiveDataResponseBody {
	s.OpSensitiveData = &v
	return s
}

func (s *GetOpSensitiveDataResponseBody) SetRequestId(v string) *GetOpSensitiveDataResponseBody {
	s.RequestId = &v
	return s
}

type GetOpSensitiveDataResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetOpSensitiveDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetOpSensitiveDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOpSensitiveDataResponse) GoString() string {
	return s.String()
}

func (s *GetOpSensitiveDataResponse) SetHeaders(v map[string]*string) *GetOpSensitiveDataResponse {
	s.Headers = v
	return s
}

func (s *GetOpSensitiveDataResponse) SetBody(v *GetOpSensitiveDataResponseBody) *GetOpSensitiveDataResponse {
	s.Body = v
	return s
}

type GetPermissionApplyOrderDetailRequest struct {
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
}

func (s GetPermissionApplyOrderDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPermissionApplyOrderDetailRequest) GoString() string {
	return s.String()
}

func (s *GetPermissionApplyOrderDetailRequest) SetFlowId(v string) *GetPermissionApplyOrderDetailRequest {
	s.FlowId = &v
	return s
}

type GetPermissionApplyOrderDetailResponseBody struct {
	ApplyOrderDetail *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail `json:"ApplyOrderDetail,omitempty" xml:"ApplyOrderDetail,omitempty" type:"Struct"`
	RequestId        *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPermissionApplyOrderDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPermissionApplyOrderDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetPermissionApplyOrderDetailResponseBody) SetApplyOrderDetail(v *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail) *GetPermissionApplyOrderDetailResponseBody {
	s.ApplyOrderDetail = v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBody) SetRequestId(v string) *GetPermissionApplyOrderDetailResponseBody {
	s.RequestId = &v
	return s
}

type GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail struct {
	ApplyBaseId        *string                                                                        `json:"ApplyBaseId,omitempty" xml:"ApplyBaseId,omitempty"`
	ApplyTimestamp     *int64                                                                         `json:"ApplyTimestamp,omitempty" xml:"ApplyTimestamp,omitempty"`
	ApproveAccountList []*GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveAccountList `json:"ApproveAccountList,omitempty" xml:"ApproveAccountList,omitempty" type:"Repeated"`
	ApproveContent     *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContent       `json:"ApproveContent,omitempty" xml:"ApproveContent,omitempty" type:"Struct"`
	FlowId             *string                                                                        `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	FlowStatus         *int32                                                                         `json:"FlowStatus,omitempty" xml:"FlowStatus,omitempty"`
	GranteeObjectList  []*GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailGranteeObjectList  `json:"GranteeObjectList,omitempty" xml:"GranteeObjectList,omitempty" type:"Repeated"`
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail) String() string {
	return tea.Prettify(s)
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail) GoString() string {
	return s.String()
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail) SetApplyBaseId(v string) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail {
	s.ApplyBaseId = &v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail) SetApplyTimestamp(v int64) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail {
	s.ApplyTimestamp = &v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail) SetApproveAccountList(v []*GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveAccountList) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail {
	s.ApproveAccountList = v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail) SetApproveContent(v *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContent) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail {
	s.ApproveContent = v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail) SetFlowId(v string) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail {
	s.FlowId = &v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail) SetFlowStatus(v int32) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail {
	s.FlowStatus = &v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail) SetGranteeObjectList(v []*GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailGranteeObjectList) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetail {
	s.GranteeObjectList = v
	return s
}

type GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveAccountList struct {
	BaseId *string `json:"BaseId,omitempty" xml:"BaseId,omitempty"`
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveAccountList) String() string {
	return tea.Prettify(s)
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveAccountList) GoString() string {
	return s.String()
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveAccountList) SetBaseId(v string) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveAccountList {
	s.BaseId = &v
	return s
}

type GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContent struct {
	ApplyReason *string                                                                             `json:"ApplyReason,omitempty" xml:"ApplyReason,omitempty"`
	Deadline    *int64                                                                              `json:"Deadline,omitempty" xml:"Deadline,omitempty"`
	OrderType   *int32                                                                              `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	ProjectMeta *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMeta `json:"ProjectMeta,omitempty" xml:"ProjectMeta,omitempty" type:"Struct"`
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContent) String() string {
	return tea.Prettify(s)
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContent) GoString() string {
	return s.String()
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContent) SetApplyReason(v string) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContent {
	s.ApplyReason = &v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContent) SetDeadline(v int64) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContent {
	s.Deadline = &v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContent) SetOrderType(v int32) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContent {
	s.OrderType = &v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContent) SetProjectMeta(v *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMeta) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContent {
	s.ProjectMeta = v
	return s
}

type GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMeta struct {
	MaxComputeProjectName *string                                                                                             `json:"MaxComputeProjectName,omitempty" xml:"MaxComputeProjectName,omitempty"`
	ObjectMetaList        []*GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaList `json:"ObjectMetaList,omitempty" xml:"ObjectMetaList,omitempty" type:"Repeated"`
	WorkspaceId           *int32                                                                                              `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMeta) String() string {
	return tea.Prettify(s)
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMeta) GoString() string {
	return s.String()
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMeta) SetMaxComputeProjectName(v string) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMeta {
	s.MaxComputeProjectName = &v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMeta) SetObjectMetaList(v []*GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaList) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMeta {
	s.ObjectMetaList = v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMeta) SetWorkspaceId(v int32) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMeta {
	s.WorkspaceId = &v
	return s
}

type GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaList struct {
	ColumnMetaList []*GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaListColumnMetaList `json:"ColumnMetaList,omitempty" xml:"ColumnMetaList,omitempty" type:"Repeated"`
	ObjectName     *string                                                                                                           `json:"ObjectName,omitempty" xml:"ObjectName,omitempty"`
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaList) String() string {
	return tea.Prettify(s)
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaList) GoString() string {
	return s.String()
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaList) SetColumnMetaList(v []*GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaListColumnMetaList) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaList {
	s.ColumnMetaList = v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaList) SetObjectName(v string) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaList {
	s.ObjectName = &v
	return s
}

type GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaListColumnMetaList struct {
	ColumnComment *string `json:"ColumnComment,omitempty" xml:"ColumnComment,omitempty"`
	ColumnName    *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaListColumnMetaList) String() string {
	return tea.Prettify(s)
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaListColumnMetaList) GoString() string {
	return s.String()
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaListColumnMetaList) SetColumnComment(v string) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaListColumnMetaList {
	s.ColumnComment = &v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaListColumnMetaList) SetColumnName(v string) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailApproveContentProjectMetaObjectMetaListColumnMetaList {
	s.ColumnName = &v
	return s
}

type GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailGranteeObjectList struct {
	GranteeId      *string `json:"GranteeId,omitempty" xml:"GranteeId,omitempty"`
	GranteeName    *string `json:"GranteeName,omitempty" xml:"GranteeName,omitempty"`
	GranteeType    *int32  `json:"GranteeType,omitempty" xml:"GranteeType,omitempty"`
	GranteeTypeSub *int32  `json:"GranteeTypeSub,omitempty" xml:"GranteeTypeSub,omitempty"`
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailGranteeObjectList) String() string {
	return tea.Prettify(s)
}

func (s GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailGranteeObjectList) GoString() string {
	return s.String()
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailGranteeObjectList) SetGranteeId(v string) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailGranteeObjectList {
	s.GranteeId = &v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailGranteeObjectList) SetGranteeName(v string) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailGranteeObjectList {
	s.GranteeName = &v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailGranteeObjectList) SetGranteeType(v int32) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailGranteeObjectList {
	s.GranteeType = &v
	return s
}

func (s *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailGranteeObjectList) SetGranteeTypeSub(v int32) *GetPermissionApplyOrderDetailResponseBodyApplyOrderDetailGranteeObjectList {
	s.GranteeTypeSub = &v
	return s
}

type GetPermissionApplyOrderDetailResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetPermissionApplyOrderDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPermissionApplyOrderDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPermissionApplyOrderDetailResponse) GoString() string {
	return s.String()
}

func (s *GetPermissionApplyOrderDetailResponse) SetHeaders(v map[string]*string) *GetPermissionApplyOrderDetailResponse {
	s.Headers = v
	return s
}

func (s *GetPermissionApplyOrderDetailResponse) SetBody(v *GetPermissionApplyOrderDetailResponseBody) *GetPermissionApplyOrderDetailResponse {
	s.Body = v
	return s
}

type GetProjectRequest struct {
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s GetProjectRequest) GoString() string {
	return s.String()
}

func (s *GetProjectRequest) SetProjectId(v int64) *GetProjectRequest {
	s.ProjectId = &v
	return s
}

type GetProjectResponseBody struct {
	Data           *GetProjectResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProjectResponseBody) GoString() string {
	return s.String()
}

func (s *GetProjectResponseBody) SetData(v *GetProjectResponseBodyData) *GetProjectResponseBody {
	s.Data = v
	return s
}

func (s *GetProjectResponseBody) SetHttpStatusCode(v int32) *GetProjectResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetProjectResponseBody) SetRequestId(v string) *GetProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetProjectResponseBody) SetSuccess(v bool) *GetProjectResponseBody {
	s.Success = &v
	return s
}

type GetProjectResponseBodyData struct {
	Appkey                           *string   `json:"Appkey,omitempty" xml:"Appkey,omitempty"`
	BaseProject                      *bool     `json:"BaseProject,omitempty" xml:"BaseProject,omitempty"`
	DefaultDiResourceGroupIdentifier *string   `json:"DefaultDiResourceGroupIdentifier,omitempty" xml:"DefaultDiResourceGroupIdentifier,omitempty"`
	Destination                      *int32    `json:"Destination,omitempty" xml:"Destination,omitempty"`
	DevStorageQuota                  *string   `json:"DevStorageQuota,omitempty" xml:"DevStorageQuota,omitempty"`
	DevelopmentType                  *int32    `json:"DevelopmentType,omitempty" xml:"DevelopmentType,omitempty"`
	DisableDevelopment               *bool     `json:"DisableDevelopment,omitempty" xml:"DisableDevelopment,omitempty"`
	EnvTypes                         []*string `json:"EnvTypes,omitempty" xml:"EnvTypes,omitempty" type:"Repeated"`
	GmtCreate                        *string   `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified                      *string   `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	IsAllowDownload                  *int32    `json:"IsAllowDownload,omitempty" xml:"IsAllowDownload,omitempty"`
	IsDefault                        *int32    `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	MaxFlowNode                      *int32    `json:"MaxFlowNode,omitempty" xml:"MaxFlowNode,omitempty"`
	ProdStorageQuota                 *string   `json:"ProdStorageQuota,omitempty" xml:"ProdStorageQuota,omitempty"`
	ProjectDescription               *string   `json:"ProjectDescription,omitempty" xml:"ProjectDescription,omitempty"`
	ProjectId                        *int32    `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier                *string   `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	ProjectMode                      *int32    `json:"ProjectMode,omitempty" xml:"ProjectMode,omitempty"`
	ProjectName                      *string   `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ProjectOwnerBaseId               *string   `json:"ProjectOwnerBaseId,omitempty" xml:"ProjectOwnerBaseId,omitempty"`
	ProtectedMode                    *int32    `json:"ProtectedMode,omitempty" xml:"ProtectedMode,omitempty"`
	ResidentArea                     *string   `json:"ResidentArea,omitempty" xml:"ResidentArea,omitempty"`
	SchedulerMaxRetryTimes           *int32    `json:"SchedulerMaxRetryTimes,omitempty" xml:"SchedulerMaxRetryTimes,omitempty"`
	SchedulerRetryInterval           *int32    `json:"SchedulerRetryInterval,omitempty" xml:"SchedulerRetryInterval,omitempty"`
	Status                           *int32    `json:"Status,omitempty" xml:"Status,omitempty"`
	TablePrivacyMode                 *int32    `json:"TablePrivacyMode,omitempty" xml:"TablePrivacyMode,omitempty"`
	TenantId                         *int64    `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	UseProxyOdpsAccount              *bool     `json:"UseProxyOdpsAccount,omitempty" xml:"UseProxyOdpsAccount,omitempty"`
}

func (s GetProjectResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetProjectResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetProjectResponseBodyData) SetAppkey(v string) *GetProjectResponseBodyData {
	s.Appkey = &v
	return s
}

func (s *GetProjectResponseBodyData) SetBaseProject(v bool) *GetProjectResponseBodyData {
	s.BaseProject = &v
	return s
}

func (s *GetProjectResponseBodyData) SetDefaultDiResourceGroupIdentifier(v string) *GetProjectResponseBodyData {
	s.DefaultDiResourceGroupIdentifier = &v
	return s
}

func (s *GetProjectResponseBodyData) SetDestination(v int32) *GetProjectResponseBodyData {
	s.Destination = &v
	return s
}

func (s *GetProjectResponseBodyData) SetDevStorageQuota(v string) *GetProjectResponseBodyData {
	s.DevStorageQuota = &v
	return s
}

func (s *GetProjectResponseBodyData) SetDevelopmentType(v int32) *GetProjectResponseBodyData {
	s.DevelopmentType = &v
	return s
}

func (s *GetProjectResponseBodyData) SetDisableDevelopment(v bool) *GetProjectResponseBodyData {
	s.DisableDevelopment = &v
	return s
}

func (s *GetProjectResponseBodyData) SetEnvTypes(v []*string) *GetProjectResponseBodyData {
	s.EnvTypes = v
	return s
}

func (s *GetProjectResponseBodyData) SetGmtCreate(v string) *GetProjectResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *GetProjectResponseBodyData) SetGmtModified(v string) *GetProjectResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *GetProjectResponseBodyData) SetIsAllowDownload(v int32) *GetProjectResponseBodyData {
	s.IsAllowDownload = &v
	return s
}

func (s *GetProjectResponseBodyData) SetIsDefault(v int32) *GetProjectResponseBodyData {
	s.IsDefault = &v
	return s
}

func (s *GetProjectResponseBodyData) SetMaxFlowNode(v int32) *GetProjectResponseBodyData {
	s.MaxFlowNode = &v
	return s
}

func (s *GetProjectResponseBodyData) SetProdStorageQuota(v string) *GetProjectResponseBodyData {
	s.ProdStorageQuota = &v
	return s
}

func (s *GetProjectResponseBodyData) SetProjectDescription(v string) *GetProjectResponseBodyData {
	s.ProjectDescription = &v
	return s
}

func (s *GetProjectResponseBodyData) SetProjectId(v int32) *GetProjectResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetProjectResponseBodyData) SetProjectIdentifier(v string) *GetProjectResponseBodyData {
	s.ProjectIdentifier = &v
	return s
}

func (s *GetProjectResponseBodyData) SetProjectMode(v int32) *GetProjectResponseBodyData {
	s.ProjectMode = &v
	return s
}

func (s *GetProjectResponseBodyData) SetProjectName(v string) *GetProjectResponseBodyData {
	s.ProjectName = &v
	return s
}

func (s *GetProjectResponseBodyData) SetProjectOwnerBaseId(v string) *GetProjectResponseBodyData {
	s.ProjectOwnerBaseId = &v
	return s
}

func (s *GetProjectResponseBodyData) SetProtectedMode(v int32) *GetProjectResponseBodyData {
	s.ProtectedMode = &v
	return s
}

func (s *GetProjectResponseBodyData) SetResidentArea(v string) *GetProjectResponseBodyData {
	s.ResidentArea = &v
	return s
}

func (s *GetProjectResponseBodyData) SetSchedulerMaxRetryTimes(v int32) *GetProjectResponseBodyData {
	s.SchedulerMaxRetryTimes = &v
	return s
}

func (s *GetProjectResponseBodyData) SetSchedulerRetryInterval(v int32) *GetProjectResponseBodyData {
	s.SchedulerRetryInterval = &v
	return s
}

func (s *GetProjectResponseBodyData) SetStatus(v int32) *GetProjectResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetProjectResponseBodyData) SetTablePrivacyMode(v int32) *GetProjectResponseBodyData {
	s.TablePrivacyMode = &v
	return s
}

func (s *GetProjectResponseBodyData) SetTenantId(v int64) *GetProjectResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *GetProjectResponseBodyData) SetUseProxyOdpsAccount(v bool) *GetProjectResponseBodyData {
	s.UseProxyOdpsAccount = &v
	return s
}

type GetProjectResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetProjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProjectResponse) GoString() string {
	return s.String()
}

func (s *GetProjectResponse) SetHeaders(v map[string]*string) *GetProjectResponse {
	s.Headers = v
	return s
}

func (s *GetProjectResponse) SetBody(v *GetProjectResponseBody) *GetProjectResponse {
	s.Body = v
	return s
}

type GetProjectDetailRequest struct {
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetProjectDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetProjectDetailRequest) GoString() string {
	return s.String()
}

func (s *GetProjectDetailRequest) SetProjectId(v int64) *GetProjectDetailRequest {
	s.ProjectId = &v
	return s
}

type GetProjectDetailResponseBody struct {
	Data           *GetProjectDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                            `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetProjectDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProjectDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetProjectDetailResponseBody) SetData(v *GetProjectDetailResponseBodyData) *GetProjectDetailResponseBody {
	s.Data = v
	return s
}

func (s *GetProjectDetailResponseBody) SetHttpStatusCode(v int32) *GetProjectDetailResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetProjectDetailResponseBody) SetRequestId(v string) *GetProjectDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetProjectDetailResponseBody) SetSuccess(v bool) *GetProjectDetailResponseBody {
	s.Success = &v
	return s
}

type GetProjectDetailResponseBodyData struct {
	DefaultDiResourceGroupIdentifier *string   `json:"DefaultDiResourceGroupIdentifier,omitempty" xml:"DefaultDiResourceGroupIdentifier,omitempty"`
	DevelopmentType                  *int32    `json:"DevelopmentType,omitempty" xml:"DevelopmentType,omitempty"`
	EnvTypes                         []*string `json:"EnvTypes,omitempty" xml:"EnvTypes,omitempty" type:"Repeated"`
	GmtCreate                        *string   `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified                      *string   `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	IsAllowDownload                  *int32    `json:"IsAllowDownload,omitempty" xml:"IsAllowDownload,omitempty"`
	ProjectDescription               *string   `json:"ProjectDescription,omitempty" xml:"ProjectDescription,omitempty"`
	ProjectId                        *int32    `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier                *string   `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	ProjectMode                      *int32    `json:"ProjectMode,omitempty" xml:"ProjectMode,omitempty"`
	ProjectName                      *string   `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ProjectOwnerBaseId               *string   `json:"ProjectOwnerBaseId,omitempty" xml:"ProjectOwnerBaseId,omitempty"`
	ProtectedMode                    *int32    `json:"ProtectedMode,omitempty" xml:"ProtectedMode,omitempty"`
	ResidentArea                     *string   `json:"ResidentArea,omitempty" xml:"ResidentArea,omitempty"`
	SchedulerMaxRetryTimes           *int32    `json:"SchedulerMaxRetryTimes,omitempty" xml:"SchedulerMaxRetryTimes,omitempty"`
	SchedulerRetryInterval           *int32    `json:"SchedulerRetryInterval,omitempty" xml:"SchedulerRetryInterval,omitempty"`
	Status                           *int32    `json:"Status,omitempty" xml:"Status,omitempty"`
	TenantId                         *int64    `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s GetProjectDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetProjectDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetProjectDetailResponseBodyData) SetDefaultDiResourceGroupIdentifier(v string) *GetProjectDetailResponseBodyData {
	s.DefaultDiResourceGroupIdentifier = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetDevelopmentType(v int32) *GetProjectDetailResponseBodyData {
	s.DevelopmentType = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetEnvTypes(v []*string) *GetProjectDetailResponseBodyData {
	s.EnvTypes = v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetGmtCreate(v string) *GetProjectDetailResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetGmtModified(v string) *GetProjectDetailResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetIsAllowDownload(v int32) *GetProjectDetailResponseBodyData {
	s.IsAllowDownload = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetProjectDescription(v string) *GetProjectDetailResponseBodyData {
	s.ProjectDescription = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetProjectId(v int32) *GetProjectDetailResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetProjectIdentifier(v string) *GetProjectDetailResponseBodyData {
	s.ProjectIdentifier = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetProjectMode(v int32) *GetProjectDetailResponseBodyData {
	s.ProjectMode = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetProjectName(v string) *GetProjectDetailResponseBodyData {
	s.ProjectName = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetProjectOwnerBaseId(v string) *GetProjectDetailResponseBodyData {
	s.ProjectOwnerBaseId = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetProtectedMode(v int32) *GetProjectDetailResponseBodyData {
	s.ProtectedMode = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetResidentArea(v string) *GetProjectDetailResponseBodyData {
	s.ResidentArea = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetSchedulerMaxRetryTimes(v int32) *GetProjectDetailResponseBodyData {
	s.SchedulerMaxRetryTimes = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetSchedulerRetryInterval(v int32) *GetProjectDetailResponseBodyData {
	s.SchedulerRetryInterval = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetStatus(v int32) *GetProjectDetailResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetProjectDetailResponseBodyData) SetTenantId(v int64) *GetProjectDetailResponseBodyData {
	s.TenantId = &v
	return s
}

type GetProjectDetailResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetProjectDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetProjectDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProjectDetailResponse) GoString() string {
	return s.String()
}

func (s *GetProjectDetailResponse) SetHeaders(v map[string]*string) *GetProjectDetailResponse {
	s.Headers = v
	return s
}

func (s *GetProjectDetailResponse) SetBody(v *GetProjectDetailResponseBody) *GetProjectDetailResponse {
	s.Body = v
	return s
}

type GetQualityEntityRequest struct {
	EnvType         *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	MatchExpression *string `json:"MatchExpression,omitempty" xml:"MatchExpression,omitempty"`
	ProjectName     *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	TableName       *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetQualityEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQualityEntityRequest) GoString() string {
	return s.String()
}

func (s *GetQualityEntityRequest) SetEnvType(v string) *GetQualityEntityRequest {
	s.EnvType = &v
	return s
}

func (s *GetQualityEntityRequest) SetMatchExpression(v string) *GetQualityEntityRequest {
	s.MatchExpression = &v
	return s
}

func (s *GetQualityEntityRequest) SetProjectName(v string) *GetQualityEntityRequest {
	s.ProjectName = &v
	return s
}

func (s *GetQualityEntityRequest) SetTableName(v string) *GetQualityEntityRequest {
	s.TableName = &v
	return s
}

type GetQualityEntityResponseBody struct {
	Data           []*GetQualityEntityResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorCode      *string                             `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQualityEntityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQualityEntityResponseBody) GoString() string {
	return s.String()
}

func (s *GetQualityEntityResponseBody) SetData(v []*GetQualityEntityResponseBodyData) *GetQualityEntityResponseBody {
	s.Data = v
	return s
}

func (s *GetQualityEntityResponseBody) SetErrorCode(v string) *GetQualityEntityResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetQualityEntityResponseBody) SetErrorMessage(v string) *GetQualityEntityResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetQualityEntityResponseBody) SetHttpStatusCode(v int32) *GetQualityEntityResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetQualityEntityResponseBody) SetRequestId(v string) *GetQualityEntityResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQualityEntityResponseBody) SetSuccess(v bool) *GetQualityEntityResponseBody {
	s.Success = &v
	return s
}

type GetQualityEntityResponseBodyData struct {
	CreateTime        *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	EntityLevel       *int32  `json:"EntityLevel,omitempty" xml:"EntityLevel,omitempty"`
	EnvType           *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	Followers         *string `json:"Followers,omitempty" xml:"Followers,omitempty"`
	HasRelativeNode   *bool   `json:"HasRelativeNode,omitempty" xml:"HasRelativeNode,omitempty"`
	Id                *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	MatchExpression   *string `json:"MatchExpression,omitempty" xml:"MatchExpression,omitempty"`
	ModifyTime        *int64  `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	ModifyUser        *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	OnDuty            *string `json:"OnDuty,omitempty" xml:"OnDuty,omitempty"`
	OnDutyAccountName *string `json:"OnDutyAccountName,omitempty" xml:"OnDutyAccountName,omitempty"`
	ProjectName       *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	RelativeNode      *string `json:"RelativeNode,omitempty" xml:"RelativeNode,omitempty"`
	Sql               *int32  `json:"Sql,omitempty" xml:"Sql,omitempty"`
	TableName         *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	Task              *int32  `json:"Task,omitempty" xml:"Task,omitempty"`
}

func (s GetQualityEntityResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQualityEntityResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQualityEntityResponseBodyData) SetCreateTime(v int64) *GetQualityEntityResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetEntityLevel(v int32) *GetQualityEntityResponseBodyData {
	s.EntityLevel = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetEnvType(v string) *GetQualityEntityResponseBodyData {
	s.EnvType = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetFollowers(v string) *GetQualityEntityResponseBodyData {
	s.Followers = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetHasRelativeNode(v bool) *GetQualityEntityResponseBodyData {
	s.HasRelativeNode = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetId(v int64) *GetQualityEntityResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetMatchExpression(v string) *GetQualityEntityResponseBodyData {
	s.MatchExpression = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetModifyTime(v int64) *GetQualityEntityResponseBodyData {
	s.ModifyTime = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetModifyUser(v string) *GetQualityEntityResponseBodyData {
	s.ModifyUser = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetOnDuty(v string) *GetQualityEntityResponseBodyData {
	s.OnDuty = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetOnDutyAccountName(v string) *GetQualityEntityResponseBodyData {
	s.OnDutyAccountName = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetProjectName(v string) *GetQualityEntityResponseBodyData {
	s.ProjectName = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetRelativeNode(v string) *GetQualityEntityResponseBodyData {
	s.RelativeNode = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetSql(v int32) *GetQualityEntityResponseBodyData {
	s.Sql = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetTableName(v string) *GetQualityEntityResponseBodyData {
	s.TableName = &v
	return s
}

func (s *GetQualityEntityResponseBodyData) SetTask(v int32) *GetQualityEntityResponseBodyData {
	s.Task = &v
	return s
}

type GetQualityEntityResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetQualityEntityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQualityEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQualityEntityResponse) GoString() string {
	return s.String()
}

func (s *GetQualityEntityResponse) SetHeaders(v map[string]*string) *GetQualityEntityResponse {
	s.Headers = v
	return s
}

func (s *GetQualityEntityResponse) SetBody(v *GetQualityEntityResponseBody) *GetQualityEntityResponse {
	s.Body = v
	return s
}

type GetQualityFollowerRequest struct {
	EntityId    *int64  `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
}

func (s GetQualityFollowerRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQualityFollowerRequest) GoString() string {
	return s.String()
}

func (s *GetQualityFollowerRequest) SetEntityId(v int64) *GetQualityFollowerRequest {
	s.EntityId = &v
	return s
}

func (s *GetQualityFollowerRequest) SetProjectName(v string) *GetQualityFollowerRequest {
	s.ProjectName = &v
	return s
}

type GetQualityFollowerResponseBody struct {
	Data           []*GetQualityFollowerResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorCode      *string                               `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQualityFollowerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQualityFollowerResponseBody) GoString() string {
	return s.String()
}

func (s *GetQualityFollowerResponseBody) SetData(v []*GetQualityFollowerResponseBodyData) *GetQualityFollowerResponseBody {
	s.Data = v
	return s
}

func (s *GetQualityFollowerResponseBody) SetErrorCode(v string) *GetQualityFollowerResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetQualityFollowerResponseBody) SetErrorMessage(v string) *GetQualityFollowerResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetQualityFollowerResponseBody) SetHttpStatusCode(v int32) *GetQualityFollowerResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetQualityFollowerResponseBody) SetRequestId(v string) *GetQualityFollowerResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQualityFollowerResponseBody) SetSuccess(v bool) *GetQualityFollowerResponseBody {
	s.Success = &v
	return s
}

type GetQualityFollowerResponseBodyData struct {
	AlarmMode           *int32  `json:"AlarmMode,omitempty" xml:"AlarmMode,omitempty"`
	EntityId            *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	Follower            *string `json:"Follower,omitempty" xml:"Follower,omitempty"`
	FollowerAccountName *string `json:"FollowerAccountName,omitempty" xml:"FollowerAccountName,omitempty"`
	Id                  *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	ProjectName         *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	TableName           *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetQualityFollowerResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQualityFollowerResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQualityFollowerResponseBodyData) SetAlarmMode(v int32) *GetQualityFollowerResponseBodyData {
	s.AlarmMode = &v
	return s
}

func (s *GetQualityFollowerResponseBodyData) SetEntityId(v string) *GetQualityFollowerResponseBodyData {
	s.EntityId = &v
	return s
}

func (s *GetQualityFollowerResponseBodyData) SetFollower(v string) *GetQualityFollowerResponseBodyData {
	s.Follower = &v
	return s
}

func (s *GetQualityFollowerResponseBodyData) SetFollowerAccountName(v string) *GetQualityFollowerResponseBodyData {
	s.FollowerAccountName = &v
	return s
}

func (s *GetQualityFollowerResponseBodyData) SetId(v int64) *GetQualityFollowerResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetQualityFollowerResponseBodyData) SetProjectName(v string) *GetQualityFollowerResponseBodyData {
	s.ProjectName = &v
	return s
}

func (s *GetQualityFollowerResponseBodyData) SetTableName(v string) *GetQualityFollowerResponseBodyData {
	s.TableName = &v
	return s
}

type GetQualityFollowerResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetQualityFollowerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQualityFollowerResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQualityFollowerResponse) GoString() string {
	return s.String()
}

func (s *GetQualityFollowerResponse) SetHeaders(v map[string]*string) *GetQualityFollowerResponse {
	s.Headers = v
	return s
}

func (s *GetQualityFollowerResponse) SetBody(v *GetQualityFollowerResponseBody) *GetQualityFollowerResponse {
	s.Body = v
	return s
}

type GetQualityRuleRequest struct {
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	RuleId      *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s GetQualityRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQualityRuleRequest) GoString() string {
	return s.String()
}

func (s *GetQualityRuleRequest) SetProjectName(v string) *GetQualityRuleRequest {
	s.ProjectName = &v
	return s
}

func (s *GetQualityRuleRequest) SetRuleId(v int64) *GetQualityRuleRequest {
	s.RuleId = &v
	return s
}

type GetQualityRuleResponseBody struct {
	Data           *GetQualityRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                         `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQualityRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQualityRuleResponseBody) GoString() string {
	return s.String()
}

func (s *GetQualityRuleResponseBody) SetData(v *GetQualityRuleResponseBodyData) *GetQualityRuleResponseBody {
	s.Data = v
	return s
}

func (s *GetQualityRuleResponseBody) SetErrorCode(v string) *GetQualityRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetQualityRuleResponseBody) SetErrorMessage(v string) *GetQualityRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetQualityRuleResponseBody) SetHttpStatusCode(v int32) *GetQualityRuleResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetQualityRuleResponseBody) SetRequestId(v string) *GetQualityRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQualityRuleResponseBody) SetSuccess(v bool) *GetQualityRuleResponseBody {
	s.Success = &v
	return s
}

type GetQualityRuleResponseBodyData struct {
	BlockType         *int32  `json:"BlockType,omitempty" xml:"BlockType,omitempty"`
	Checker           *int32  `json:"Checker,omitempty" xml:"Checker,omitempty"`
	CheckerName       *string `json:"CheckerName,omitempty" xml:"CheckerName,omitempty"`
	Comment           *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CriticalThreshold *string `json:"CriticalThreshold,omitempty" xml:"CriticalThreshold,omitempty"`
	EntityId          *int64  `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	ExpectValue       *string `json:"ExpectValue,omitempty" xml:"ExpectValue,omitempty"`
	FixCheck          *bool   `json:"FixCheck,omitempty" xml:"FixCheck,omitempty"`
	Id                *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	MethodId          *int32  `json:"MethodId,omitempty" xml:"MethodId,omitempty"`
	MethodName        *string `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	OnDuty            *string `json:"OnDuty,omitempty" xml:"OnDuty,omitempty"`
	OnDutyAccountName *string `json:"OnDutyAccountName,omitempty" xml:"OnDutyAccountName,omitempty"`
	Operator          *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	PredictType       *int32  `json:"PredictType,omitempty" xml:"PredictType,omitempty"`
	Property          *string `json:"Property,omitempty" xml:"Property,omitempty"`
	RuleName          *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleType          *int32  `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	TemplateId        *int32  `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName      *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	Trend             *string `json:"Trend,omitempty" xml:"Trend,omitempty"`
	WarningThreshold  *string `json:"WarningThreshold,omitempty" xml:"WarningThreshold,omitempty"`
	WhereCondition    *string `json:"WhereCondition,omitempty" xml:"WhereCondition,omitempty"`
}

func (s GetQualityRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQualityRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQualityRuleResponseBodyData) SetBlockType(v int32) *GetQualityRuleResponseBodyData {
	s.BlockType = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetChecker(v int32) *GetQualityRuleResponseBodyData {
	s.Checker = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetCheckerName(v string) *GetQualityRuleResponseBodyData {
	s.CheckerName = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetComment(v string) *GetQualityRuleResponseBodyData {
	s.Comment = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetCriticalThreshold(v string) *GetQualityRuleResponseBodyData {
	s.CriticalThreshold = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetEntityId(v int64) *GetQualityRuleResponseBodyData {
	s.EntityId = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetExpectValue(v string) *GetQualityRuleResponseBodyData {
	s.ExpectValue = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetFixCheck(v bool) *GetQualityRuleResponseBodyData {
	s.FixCheck = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetId(v int64) *GetQualityRuleResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetMethodId(v int32) *GetQualityRuleResponseBodyData {
	s.MethodId = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetMethodName(v string) *GetQualityRuleResponseBodyData {
	s.MethodName = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetOnDuty(v string) *GetQualityRuleResponseBodyData {
	s.OnDuty = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetOnDutyAccountName(v string) *GetQualityRuleResponseBodyData {
	s.OnDutyAccountName = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetOperator(v string) *GetQualityRuleResponseBodyData {
	s.Operator = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetPredictType(v int32) *GetQualityRuleResponseBodyData {
	s.PredictType = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetProperty(v string) *GetQualityRuleResponseBodyData {
	s.Property = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetRuleName(v string) *GetQualityRuleResponseBodyData {
	s.RuleName = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetRuleType(v int32) *GetQualityRuleResponseBodyData {
	s.RuleType = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetTemplateId(v int32) *GetQualityRuleResponseBodyData {
	s.TemplateId = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetTemplateName(v string) *GetQualityRuleResponseBodyData {
	s.TemplateName = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetTrend(v string) *GetQualityRuleResponseBodyData {
	s.Trend = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetWarningThreshold(v string) *GetQualityRuleResponseBodyData {
	s.WarningThreshold = &v
	return s
}

func (s *GetQualityRuleResponseBodyData) SetWhereCondition(v string) *GetQualityRuleResponseBodyData {
	s.WhereCondition = &v
	return s
}

type GetQualityRuleResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetQualityRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQualityRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQualityRuleResponse) GoString() string {
	return s.String()
}

func (s *GetQualityRuleResponse) SetHeaders(v map[string]*string) *GetQualityRuleResponse {
	s.Headers = v
	return s
}

func (s *GetQualityRuleResponse) SetBody(v *GetQualityRuleResponseBody) *GetQualityRuleResponse {
	s.Body = v
	return s
}

type GetRemindRequest struct {
	RemindId *int64 `json:"RemindId,omitempty" xml:"RemindId,omitempty"`
}

func (s GetRemindRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRemindRequest) GoString() string {
	return s.String()
}

func (s *GetRemindRequest) SetRemindId(v int64) *GetRemindRequest {
	s.RemindId = &v
	return s
}

type GetRemindResponseBody struct {
	Data           *GetRemindResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                     `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRemindResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRemindResponseBody) GoString() string {
	return s.String()
}

func (s *GetRemindResponseBody) SetData(v *GetRemindResponseBodyData) *GetRemindResponseBody {
	s.Data = v
	return s
}

func (s *GetRemindResponseBody) SetErrorCode(v string) *GetRemindResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetRemindResponseBody) SetErrorMessage(v string) *GetRemindResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetRemindResponseBody) SetHttpStatusCode(v int32) *GetRemindResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetRemindResponseBody) SetRequestId(v string) *GetRemindResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRemindResponseBody) SetSuccess(v bool) *GetRemindResponseBody {
	s.Success = &v
	return s
}

type GetRemindResponseBodyData struct {
	AlertInterval *int32                                   `json:"AlertInterval,omitempty" xml:"AlertInterval,omitempty"`
	AlertMethods  []*string                                `json:"AlertMethods,omitempty" xml:"AlertMethods,omitempty" type:"Repeated"`
	AlertTargets  []*string                                `json:"AlertTargets,omitempty" xml:"AlertTargets,omitempty" type:"Repeated"`
	AlertUnit     *string                                  `json:"AlertUnit,omitempty" xml:"AlertUnit,omitempty"`
	Baselines     []*GetRemindResponseBodyDataBaselines    `json:"Baselines,omitempty" xml:"Baselines,omitempty" type:"Repeated"`
	BizProcesses  []*GetRemindResponseBodyDataBizProcesses `json:"BizProcesses,omitempty" xml:"BizProcesses,omitempty" type:"Repeated"`
	Detail        *string                                  `json:"Detail,omitempty" xml:"Detail,omitempty"`
	DndEnd        *string                                  `json:"DndEnd,omitempty" xml:"DndEnd,omitempty"`
	DndStart      *string                                  `json:"DndStart,omitempty" xml:"DndStart,omitempty"`
	Founder       *string                                  `json:"Founder,omitempty" xml:"Founder,omitempty"`
	MaxAlertTimes *int32                                   `json:"MaxAlertTimes,omitempty" xml:"MaxAlertTimes,omitempty"`
	Nodes         []*GetRemindResponseBodyDataNodes        `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
	Projects      []*GetRemindResponseBodyDataProjects     `json:"Projects,omitempty" xml:"Projects,omitempty" type:"Repeated"`
	RemindId      *int64                                   `json:"RemindId,omitempty" xml:"RemindId,omitempty"`
	RemindName    *string                                  `json:"RemindName,omitempty" xml:"RemindName,omitempty"`
	RemindType    *string                                  `json:"RemindType,omitempty" xml:"RemindType,omitempty"`
	RemindUnit    *string                                  `json:"RemindUnit,omitempty" xml:"RemindUnit,omitempty"`
	Robots        []*GetRemindResponseBodyDataRobots       `json:"Robots,omitempty" xml:"Robots,omitempty" type:"Repeated"`
	Useflag       *bool                                    `json:"Useflag,omitempty" xml:"Useflag,omitempty"`
}

func (s GetRemindResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRemindResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRemindResponseBodyData) SetAlertInterval(v int32) *GetRemindResponseBodyData {
	s.AlertInterval = &v
	return s
}

func (s *GetRemindResponseBodyData) SetAlertMethods(v []*string) *GetRemindResponseBodyData {
	s.AlertMethods = v
	return s
}

func (s *GetRemindResponseBodyData) SetAlertTargets(v []*string) *GetRemindResponseBodyData {
	s.AlertTargets = v
	return s
}

func (s *GetRemindResponseBodyData) SetAlertUnit(v string) *GetRemindResponseBodyData {
	s.AlertUnit = &v
	return s
}

func (s *GetRemindResponseBodyData) SetBaselines(v []*GetRemindResponseBodyDataBaselines) *GetRemindResponseBodyData {
	s.Baselines = v
	return s
}

func (s *GetRemindResponseBodyData) SetBizProcesses(v []*GetRemindResponseBodyDataBizProcesses) *GetRemindResponseBodyData {
	s.BizProcesses = v
	return s
}

func (s *GetRemindResponseBodyData) SetDetail(v string) *GetRemindResponseBodyData {
	s.Detail = &v
	return s
}

func (s *GetRemindResponseBodyData) SetDndEnd(v string) *GetRemindResponseBodyData {
	s.DndEnd = &v
	return s
}

func (s *GetRemindResponseBodyData) SetDndStart(v string) *GetRemindResponseBodyData {
	s.DndStart = &v
	return s
}

func (s *GetRemindResponseBodyData) SetFounder(v string) *GetRemindResponseBodyData {
	s.Founder = &v
	return s
}

func (s *GetRemindResponseBodyData) SetMaxAlertTimes(v int32) *GetRemindResponseBodyData {
	s.MaxAlertTimes = &v
	return s
}

func (s *GetRemindResponseBodyData) SetNodes(v []*GetRemindResponseBodyDataNodes) *GetRemindResponseBodyData {
	s.Nodes = v
	return s
}

func (s *GetRemindResponseBodyData) SetProjects(v []*GetRemindResponseBodyDataProjects) *GetRemindResponseBodyData {
	s.Projects = v
	return s
}

func (s *GetRemindResponseBodyData) SetRemindId(v int64) *GetRemindResponseBodyData {
	s.RemindId = &v
	return s
}

func (s *GetRemindResponseBodyData) SetRemindName(v string) *GetRemindResponseBodyData {
	s.RemindName = &v
	return s
}

func (s *GetRemindResponseBodyData) SetRemindType(v string) *GetRemindResponseBodyData {
	s.RemindType = &v
	return s
}

func (s *GetRemindResponseBodyData) SetRemindUnit(v string) *GetRemindResponseBodyData {
	s.RemindUnit = &v
	return s
}

func (s *GetRemindResponseBodyData) SetRobots(v []*GetRemindResponseBodyDataRobots) *GetRemindResponseBodyData {
	s.Robots = v
	return s
}

func (s *GetRemindResponseBodyData) SetUseflag(v bool) *GetRemindResponseBodyData {
	s.Useflag = &v
	return s
}

type GetRemindResponseBodyDataBaselines struct {
	BaselineId   *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	BaselineName *string `json:"BaselineName,omitempty" xml:"BaselineName,omitempty"`
}

func (s GetRemindResponseBodyDataBaselines) String() string {
	return tea.Prettify(s)
}

func (s GetRemindResponseBodyDataBaselines) GoString() string {
	return s.String()
}

func (s *GetRemindResponseBodyDataBaselines) SetBaselineId(v int64) *GetRemindResponseBodyDataBaselines {
	s.BaselineId = &v
	return s
}

func (s *GetRemindResponseBodyDataBaselines) SetBaselineName(v string) *GetRemindResponseBodyDataBaselines {
	s.BaselineName = &v
	return s
}

type GetRemindResponseBodyDataBizProcesses struct {
	BizId          *int64  `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizProcessName *string `json:"BizProcessName,omitempty" xml:"BizProcessName,omitempty"`
}

func (s GetRemindResponseBodyDataBizProcesses) String() string {
	return tea.Prettify(s)
}

func (s GetRemindResponseBodyDataBizProcesses) GoString() string {
	return s.String()
}

func (s *GetRemindResponseBodyDataBizProcesses) SetBizId(v int64) *GetRemindResponseBodyDataBizProcesses {
	s.BizId = &v
	return s
}

func (s *GetRemindResponseBodyDataBizProcesses) SetBizProcessName(v string) *GetRemindResponseBodyDataBizProcesses {
	s.BizProcessName = &v
	return s
}

type GetRemindResponseBodyDataNodes struct {
	NodeId    *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName  *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner     *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetRemindResponseBodyDataNodes) String() string {
	return tea.Prettify(s)
}

func (s GetRemindResponseBodyDataNodes) GoString() string {
	return s.String()
}

func (s *GetRemindResponseBodyDataNodes) SetNodeId(v int64) *GetRemindResponseBodyDataNodes {
	s.NodeId = &v
	return s
}

func (s *GetRemindResponseBodyDataNodes) SetNodeName(v string) *GetRemindResponseBodyDataNodes {
	s.NodeName = &v
	return s
}

func (s *GetRemindResponseBodyDataNodes) SetOwner(v string) *GetRemindResponseBodyDataNodes {
	s.Owner = &v
	return s
}

func (s *GetRemindResponseBodyDataNodes) SetProjectId(v int64) *GetRemindResponseBodyDataNodes {
	s.ProjectId = &v
	return s
}

type GetRemindResponseBodyDataProjects struct {
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetRemindResponseBodyDataProjects) String() string {
	return tea.Prettify(s)
}

func (s GetRemindResponseBodyDataProjects) GoString() string {
	return s.String()
}

func (s *GetRemindResponseBodyDataProjects) SetProjectId(v int64) *GetRemindResponseBodyDataProjects {
	s.ProjectId = &v
	return s
}

type GetRemindResponseBodyDataRobots struct {
	AtAll  *bool   `json:"AtAll,omitempty" xml:"AtAll,omitempty"`
	WebUrl *string `json:"WebUrl,omitempty" xml:"WebUrl,omitempty"`
}

func (s GetRemindResponseBodyDataRobots) String() string {
	return tea.Prettify(s)
}

func (s GetRemindResponseBodyDataRobots) GoString() string {
	return s.String()
}

func (s *GetRemindResponseBodyDataRobots) SetAtAll(v bool) *GetRemindResponseBodyDataRobots {
	s.AtAll = &v
	return s
}

func (s *GetRemindResponseBodyDataRobots) SetWebUrl(v string) *GetRemindResponseBodyDataRobots {
	s.WebUrl = &v
	return s
}

type GetRemindResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetRemindResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetRemindResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRemindResponse) GoString() string {
	return s.String()
}

func (s *GetRemindResponse) SetHeaders(v map[string]*string) *GetRemindResponse {
	s.Headers = v
	return s
}

func (s *GetRemindResponse) SetBody(v *GetRemindResponseBody) *GetRemindResponse {
	s.Body = v
	return s
}

type GetSensitiveDataRequest struct {
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNo   *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetSensitiveDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSensitiveDataRequest) GoString() string {
	return s.String()
}

func (s *GetSensitiveDataRequest) SetName(v string) *GetSensitiveDataRequest {
	s.Name = &v
	return s
}

func (s *GetSensitiveDataRequest) SetPageNo(v int32) *GetSensitiveDataRequest {
	s.PageNo = &v
	return s
}

func (s *GetSensitiveDataRequest) SetPageSize(v int32) *GetSensitiveDataRequest {
	s.PageSize = &v
	return s
}

type GetSensitiveDataResponseBody struct {
	RequestId     *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SensitiveData map[string]interface{} `json:"SensitiveData,omitempty" xml:"SensitiveData,omitempty"`
}

func (s GetSensitiveDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSensitiveDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetSensitiveDataResponseBody) SetRequestId(v string) *GetSensitiveDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSensitiveDataResponseBody) SetSensitiveData(v map[string]interface{}) *GetSensitiveDataResponseBody {
	s.SensitiveData = v
	return s
}

type GetSensitiveDataResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetSensitiveDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSensitiveDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSensitiveDataResponse) GoString() string {
	return s.String()
}

func (s *GetSensitiveDataResponse) SetHeaders(v map[string]*string) *GetSensitiveDataResponse {
	s.Headers = v
	return s
}

func (s *GetSensitiveDataResponse) SetBody(v *GetSensitiveDataResponseBody) *GetSensitiveDataResponse {
	s.Body = v
	return s
}

type GetSuccessInstanceTrendRequest struct {
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetSuccessInstanceTrendRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSuccessInstanceTrendRequest) GoString() string {
	return s.String()
}

func (s *GetSuccessInstanceTrendRequest) SetProjectId(v int64) *GetSuccessInstanceTrendRequest {
	s.ProjectId = &v
	return s
}

type GetSuccessInstanceTrendResponseBody struct {
	InstanceStatusTrend *GetSuccessInstanceTrendResponseBodyInstanceStatusTrend `json:"InstanceStatusTrend,omitempty" xml:"InstanceStatusTrend,omitempty" type:"Struct"`
	RequestId           *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetSuccessInstanceTrendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSuccessInstanceTrendResponseBody) GoString() string {
	return s.String()
}

func (s *GetSuccessInstanceTrendResponseBody) SetInstanceStatusTrend(v *GetSuccessInstanceTrendResponseBodyInstanceStatusTrend) *GetSuccessInstanceTrendResponseBody {
	s.InstanceStatusTrend = v
	return s
}

func (s *GetSuccessInstanceTrendResponseBody) SetRequestId(v string) *GetSuccessInstanceTrendResponseBody {
	s.RequestId = &v
	return s
}

type GetSuccessInstanceTrendResponseBodyInstanceStatusTrend struct {
	AvgTrend       []*GetSuccessInstanceTrendResponseBodyInstanceStatusTrendAvgTrend       `json:"AvgTrend,omitempty" xml:"AvgTrend,omitempty" type:"Repeated"`
	TodayTrend     []*GetSuccessInstanceTrendResponseBodyInstanceStatusTrendTodayTrend     `json:"TodayTrend,omitempty" xml:"TodayTrend,omitempty" type:"Repeated"`
	YesterdayTrend []*GetSuccessInstanceTrendResponseBodyInstanceStatusTrendYesterdayTrend `json:"YesterdayTrend,omitempty" xml:"YesterdayTrend,omitempty" type:"Repeated"`
}

func (s GetSuccessInstanceTrendResponseBodyInstanceStatusTrend) String() string {
	return tea.Prettify(s)
}

func (s GetSuccessInstanceTrendResponseBodyInstanceStatusTrend) GoString() string {
	return s.String()
}

func (s *GetSuccessInstanceTrendResponseBodyInstanceStatusTrend) SetAvgTrend(v []*GetSuccessInstanceTrendResponseBodyInstanceStatusTrendAvgTrend) *GetSuccessInstanceTrendResponseBodyInstanceStatusTrend {
	s.AvgTrend = v
	return s
}

func (s *GetSuccessInstanceTrendResponseBodyInstanceStatusTrend) SetTodayTrend(v []*GetSuccessInstanceTrendResponseBodyInstanceStatusTrendTodayTrend) *GetSuccessInstanceTrendResponseBodyInstanceStatusTrend {
	s.TodayTrend = v
	return s
}

func (s *GetSuccessInstanceTrendResponseBodyInstanceStatusTrend) SetYesterdayTrend(v []*GetSuccessInstanceTrendResponseBodyInstanceStatusTrendYesterdayTrend) *GetSuccessInstanceTrendResponseBodyInstanceStatusTrend {
	s.YesterdayTrend = v
	return s
}

type GetSuccessInstanceTrendResponseBodyInstanceStatusTrendAvgTrend struct {
	Count     *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	TimePoint *string `json:"TimePoint,omitempty" xml:"TimePoint,omitempty"`
}

func (s GetSuccessInstanceTrendResponseBodyInstanceStatusTrendAvgTrend) String() string {
	return tea.Prettify(s)
}

func (s GetSuccessInstanceTrendResponseBodyInstanceStatusTrendAvgTrend) GoString() string {
	return s.String()
}

func (s *GetSuccessInstanceTrendResponseBodyInstanceStatusTrendAvgTrend) SetCount(v int32) *GetSuccessInstanceTrendResponseBodyInstanceStatusTrendAvgTrend {
	s.Count = &v
	return s
}

func (s *GetSuccessInstanceTrendResponseBodyInstanceStatusTrendAvgTrend) SetTimePoint(v string) *GetSuccessInstanceTrendResponseBodyInstanceStatusTrendAvgTrend {
	s.TimePoint = &v
	return s
}

type GetSuccessInstanceTrendResponseBodyInstanceStatusTrendTodayTrend struct {
	Count     *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	TimePoint *string `json:"TimePoint,omitempty" xml:"TimePoint,omitempty"`
}

func (s GetSuccessInstanceTrendResponseBodyInstanceStatusTrendTodayTrend) String() string {
	return tea.Prettify(s)
}

func (s GetSuccessInstanceTrendResponseBodyInstanceStatusTrendTodayTrend) GoString() string {
	return s.String()
}

func (s *GetSuccessInstanceTrendResponseBodyInstanceStatusTrendTodayTrend) SetCount(v int32) *GetSuccessInstanceTrendResponseBodyInstanceStatusTrendTodayTrend {
	s.Count = &v
	return s
}

func (s *GetSuccessInstanceTrendResponseBodyInstanceStatusTrendTodayTrend) SetTimePoint(v string) *GetSuccessInstanceTrendResponseBodyInstanceStatusTrendTodayTrend {
	s.TimePoint = &v
	return s
}

type GetSuccessInstanceTrendResponseBodyInstanceStatusTrendYesterdayTrend struct {
	Count     *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	TimePoint *string `json:"TimePoint,omitempty" xml:"TimePoint,omitempty"`
}

func (s GetSuccessInstanceTrendResponseBodyInstanceStatusTrendYesterdayTrend) String() string {
	return tea.Prettify(s)
}

func (s GetSuccessInstanceTrendResponseBodyInstanceStatusTrendYesterdayTrend) GoString() string {
	return s.String()
}

func (s *GetSuccessInstanceTrendResponseBodyInstanceStatusTrendYesterdayTrend) SetCount(v int32) *GetSuccessInstanceTrendResponseBodyInstanceStatusTrendYesterdayTrend {
	s.Count = &v
	return s
}

func (s *GetSuccessInstanceTrendResponseBodyInstanceStatusTrendYesterdayTrend) SetTimePoint(v string) *GetSuccessInstanceTrendResponseBodyInstanceStatusTrendYesterdayTrend {
	s.TimePoint = &v
	return s
}

type GetSuccessInstanceTrendResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetSuccessInstanceTrendResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSuccessInstanceTrendResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSuccessInstanceTrendResponse) GoString() string {
	return s.String()
}

func (s *GetSuccessInstanceTrendResponse) SetHeaders(v map[string]*string) *GetSuccessInstanceTrendResponse {
	s.Headers = v
	return s
}

func (s *GetSuccessInstanceTrendResponse) SetBody(v *GetSuccessInstanceTrendResponseBody) *GetSuccessInstanceTrendResponse {
	s.Body = v
	return s
}

type GetTopicRequest struct {
	TopicId *int64 `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
}

func (s GetTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTopicRequest) GoString() string {
	return s.String()
}

func (s *GetTopicRequest) SetTopicId(v int64) *GetTopicRequest {
	s.TopicId = &v
	return s
}

type GetTopicResponseBody struct {
	Data           *GetTopicResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                   `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetTopicResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTopicResponseBody) GoString() string {
	return s.String()
}

func (s *GetTopicResponseBody) SetData(v *GetTopicResponseBodyData) *GetTopicResponseBody {
	s.Data = v
	return s
}

func (s *GetTopicResponseBody) SetErrorCode(v string) *GetTopicResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetTopicResponseBody) SetErrorMessage(v string) *GetTopicResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetTopicResponseBody) SetHttpStatusCode(v int32) *GetTopicResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetTopicResponseBody) SetRequestId(v string) *GetTopicResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTopicResponseBody) SetSuccess(v bool) *GetTopicResponseBody {
	s.Success = &v
	return s
}

type GetTopicResponseBodyData struct {
	AddTime           *int64  `json:"AddTime,omitempty" xml:"AddTime,omitempty"`
	AlertTime         *int64  `json:"AlertTime,omitempty" xml:"AlertTime,omitempty"`
	Assigner          *string `json:"Assigner,omitempty" xml:"Assigner,omitempty"`
	BaselineBuffer    *int64  `json:"BaselineBuffer,omitempty" xml:"BaselineBuffer,omitempty"`
	BaselineId        *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	BaselineInGroupId *int32  `json:"BaselineInGroupId,omitempty" xml:"BaselineInGroupId,omitempty"`
	BaselineName      *string `json:"BaselineName,omitempty" xml:"BaselineName,omitempty"`
	BaselineStatus    *string `json:"BaselineStatus,omitempty" xml:"BaselineStatus,omitempty"`
	Buffer            *int64  `json:"Buffer,omitempty" xml:"Buffer,omitempty"`
	DealTime          *int64  `json:"DealTime,omitempty" xml:"DealTime,omitempty"`
	DealUser          *string `json:"DealUser,omitempty" xml:"DealUser,omitempty"`
	FixTime           *int64  `json:"FixTime,omitempty" xml:"FixTime,omitempty"`
	HappenTime        *int64  `json:"HappenTime,omitempty" xml:"HappenTime,omitempty"`
	InstanceId        *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NextAlertTime     *int64  `json:"NextAlertTime,omitempty" xml:"NextAlertTime,omitempty"`
	NodeId            *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName          *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner             *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TopicId           *int64  `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
	TopicName         *string `json:"TopicName,omitempty" xml:"TopicName,omitempty"`
	TopicStatus       *string `json:"TopicStatus,omitempty" xml:"TopicStatus,omitempty"`
	TopicType         *string `json:"TopicType,omitempty" xml:"TopicType,omitempty"`
}

func (s GetTopicResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetTopicResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetTopicResponseBodyData) SetAddTime(v int64) *GetTopicResponseBodyData {
	s.AddTime = &v
	return s
}

func (s *GetTopicResponseBodyData) SetAlertTime(v int64) *GetTopicResponseBodyData {
	s.AlertTime = &v
	return s
}

func (s *GetTopicResponseBodyData) SetAssigner(v string) *GetTopicResponseBodyData {
	s.Assigner = &v
	return s
}

func (s *GetTopicResponseBodyData) SetBaselineBuffer(v int64) *GetTopicResponseBodyData {
	s.BaselineBuffer = &v
	return s
}

func (s *GetTopicResponseBodyData) SetBaselineId(v int64) *GetTopicResponseBodyData {
	s.BaselineId = &v
	return s
}

func (s *GetTopicResponseBodyData) SetBaselineInGroupId(v int32) *GetTopicResponseBodyData {
	s.BaselineInGroupId = &v
	return s
}

func (s *GetTopicResponseBodyData) SetBaselineName(v string) *GetTopicResponseBodyData {
	s.BaselineName = &v
	return s
}

func (s *GetTopicResponseBodyData) SetBaselineStatus(v string) *GetTopicResponseBodyData {
	s.BaselineStatus = &v
	return s
}

func (s *GetTopicResponseBodyData) SetBuffer(v int64) *GetTopicResponseBodyData {
	s.Buffer = &v
	return s
}

func (s *GetTopicResponseBodyData) SetDealTime(v int64) *GetTopicResponseBodyData {
	s.DealTime = &v
	return s
}

func (s *GetTopicResponseBodyData) SetDealUser(v string) *GetTopicResponseBodyData {
	s.DealUser = &v
	return s
}

func (s *GetTopicResponseBodyData) SetFixTime(v int64) *GetTopicResponseBodyData {
	s.FixTime = &v
	return s
}

func (s *GetTopicResponseBodyData) SetHappenTime(v int64) *GetTopicResponseBodyData {
	s.HappenTime = &v
	return s
}

func (s *GetTopicResponseBodyData) SetInstanceId(v int64) *GetTopicResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetTopicResponseBodyData) SetNextAlertTime(v int64) *GetTopicResponseBodyData {
	s.NextAlertTime = &v
	return s
}

func (s *GetTopicResponseBodyData) SetNodeId(v int64) *GetTopicResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *GetTopicResponseBodyData) SetNodeName(v string) *GetTopicResponseBodyData {
	s.NodeName = &v
	return s
}

func (s *GetTopicResponseBodyData) SetOwner(v string) *GetTopicResponseBodyData {
	s.Owner = &v
	return s
}

func (s *GetTopicResponseBodyData) SetProjectId(v int64) *GetTopicResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetTopicResponseBodyData) SetTopicId(v int64) *GetTopicResponseBodyData {
	s.TopicId = &v
	return s
}

func (s *GetTopicResponseBodyData) SetTopicName(v string) *GetTopicResponseBodyData {
	s.TopicName = &v
	return s
}

func (s *GetTopicResponseBodyData) SetTopicStatus(v string) *GetTopicResponseBodyData {
	s.TopicStatus = &v
	return s
}

func (s *GetTopicResponseBodyData) SetTopicType(v string) *GetTopicResponseBodyData {
	s.TopicType = &v
	return s
}

type GetTopicResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetTopicResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTopicResponse) GoString() string {
	return s.String()
}

func (s *GetTopicResponse) SetHeaders(v map[string]*string) *GetTopicResponse {
	s.Headers = v
	return s
}

func (s *GetTopicResponse) SetBody(v *GetTopicResponseBody) *GetTopicResponse {
	s.Body = v
	return s
}

type GetTopicInfluenceRequest struct {
	TopicId *int64 `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
}

func (s GetTopicInfluenceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTopicInfluenceRequest) GoString() string {
	return s.String()
}

func (s *GetTopicInfluenceRequest) SetTopicId(v int64) *GetTopicInfluenceRequest {
	s.TopicId = &v
	return s
}

type GetTopicInfluenceResponseBody struct {
	Data           *GetTopicInfluenceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                            `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetTopicInfluenceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTopicInfluenceResponseBody) GoString() string {
	return s.String()
}

func (s *GetTopicInfluenceResponseBody) SetData(v *GetTopicInfluenceResponseBodyData) *GetTopicInfluenceResponseBody {
	s.Data = v
	return s
}

func (s *GetTopicInfluenceResponseBody) SetErrorCode(v string) *GetTopicInfluenceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetTopicInfluenceResponseBody) SetErrorMessage(v string) *GetTopicInfluenceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetTopicInfluenceResponseBody) SetHttpStatusCode(v int32) *GetTopicInfluenceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetTopicInfluenceResponseBody) SetRequestId(v string) *GetTopicInfluenceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTopicInfluenceResponseBody) SetSuccess(v bool) *GetTopicInfluenceResponseBody {
	s.Success = &v
	return s
}

type GetTopicInfluenceResponseBodyData struct {
	Influences []*GetTopicInfluenceResponseBodyDataInfluences `json:"Influences,omitempty" xml:"Influences,omitempty" type:"Repeated"`
	TopicId    *int64                                         `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
}

func (s GetTopicInfluenceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetTopicInfluenceResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetTopicInfluenceResponseBodyData) SetInfluences(v []*GetTopicInfluenceResponseBodyDataInfluences) *GetTopicInfluenceResponseBodyData {
	s.Influences = v
	return s
}

func (s *GetTopicInfluenceResponseBodyData) SetTopicId(v int64) *GetTopicInfluenceResponseBodyData {
	s.TopicId = &v
	return s
}

type GetTopicInfluenceResponseBodyDataInfluences struct {
	BaselineId   *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	BaselineName *string `json:"BaselineName,omitempty" xml:"BaselineName,omitempty"`
	Bizdate      *int64  `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	Buffer       *int64  `json:"Buffer,omitempty" xml:"Buffer,omitempty"`
	InGroupId    *int32  `json:"InGroupId,omitempty" xml:"InGroupId,omitempty"`
	Owner        *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Priority     *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ProjectId    *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetTopicInfluenceResponseBodyDataInfluences) String() string {
	return tea.Prettify(s)
}

func (s GetTopicInfluenceResponseBodyDataInfluences) GoString() string {
	return s.String()
}

func (s *GetTopicInfluenceResponseBodyDataInfluences) SetBaselineId(v int64) *GetTopicInfluenceResponseBodyDataInfluences {
	s.BaselineId = &v
	return s
}

func (s *GetTopicInfluenceResponseBodyDataInfluences) SetBaselineName(v string) *GetTopicInfluenceResponseBodyDataInfluences {
	s.BaselineName = &v
	return s
}

func (s *GetTopicInfluenceResponseBodyDataInfluences) SetBizdate(v int64) *GetTopicInfluenceResponseBodyDataInfluences {
	s.Bizdate = &v
	return s
}

func (s *GetTopicInfluenceResponseBodyDataInfluences) SetBuffer(v int64) *GetTopicInfluenceResponseBodyDataInfluences {
	s.Buffer = &v
	return s
}

func (s *GetTopicInfluenceResponseBodyDataInfluences) SetInGroupId(v int32) *GetTopicInfluenceResponseBodyDataInfluences {
	s.InGroupId = &v
	return s
}

func (s *GetTopicInfluenceResponseBodyDataInfluences) SetOwner(v string) *GetTopicInfluenceResponseBodyDataInfluences {
	s.Owner = &v
	return s
}

func (s *GetTopicInfluenceResponseBodyDataInfluences) SetPriority(v int32) *GetTopicInfluenceResponseBodyDataInfluences {
	s.Priority = &v
	return s
}

func (s *GetTopicInfluenceResponseBodyDataInfluences) SetProjectId(v int64) *GetTopicInfluenceResponseBodyDataInfluences {
	s.ProjectId = &v
	return s
}

func (s *GetTopicInfluenceResponseBodyDataInfluences) SetStatus(v string) *GetTopicInfluenceResponseBodyDataInfluences {
	s.Status = &v
	return s
}

type GetTopicInfluenceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetTopicInfluenceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetTopicInfluenceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTopicInfluenceResponse) GoString() string {
	return s.String()
}

func (s *GetTopicInfluenceResponse) SetHeaders(v map[string]*string) *GetTopicInfluenceResponse {
	s.Headers = v
	return s
}

func (s *GetTopicInfluenceResponse) SetBody(v *GetTopicInfluenceResponseBody) *GetTopicInfluenceResponse {
	s.Body = v
	return s
}

type ImportDataSourcesRequest struct {
	DataSources *string `json:"DataSources,omitempty" xml:"DataSources,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ImportDataSourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportDataSourcesRequest) GoString() string {
	return s.String()
}

func (s *ImportDataSourcesRequest) SetDataSources(v string) *ImportDataSourcesRequest {
	s.DataSources = &v
	return s
}

func (s *ImportDataSourcesRequest) SetProjectId(v int64) *ImportDataSourcesRequest {
	s.ProjectId = &v
	return s
}

type ImportDataSourcesResponseBody struct {
	Data      *ImportDataSourcesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ImportDataSourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportDataSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ImportDataSourcesResponseBody) SetData(v *ImportDataSourcesResponseBodyData) *ImportDataSourcesResponseBody {
	s.Data = v
	return s
}

func (s *ImportDataSourcesResponseBody) SetRequestId(v string) *ImportDataSourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportDataSourcesResponseBody) SetSuccess(v bool) *ImportDataSourcesResponseBody {
	s.Success = &v
	return s
}

type ImportDataSourcesResponseBodyData struct {
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Status  *bool   `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ImportDataSourcesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ImportDataSourcesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ImportDataSourcesResponseBodyData) SetMessage(v string) *ImportDataSourcesResponseBodyData {
	s.Message = &v
	return s
}

func (s *ImportDataSourcesResponseBodyData) SetStatus(v bool) *ImportDataSourcesResponseBodyData {
	s.Status = &v
	return s
}

type ImportDataSourcesResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ImportDataSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ImportDataSourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportDataSourcesResponse) GoString() string {
	return s.String()
}

func (s *ImportDataSourcesResponse) SetHeaders(v map[string]*string) *ImportDataSourcesResponse {
	s.Headers = v
	return s
}

func (s *ImportDataSourcesResponse) SetBody(v *ImportDataSourcesResponseBody) *ImportDataSourcesResponse {
	s.Body = v
	return s
}

type ListAlertMessagesRequest struct {
	AlertMethods   *string `json:"AlertMethods,omitempty" xml:"AlertMethods,omitempty"`
	AlertRuleTypes *string `json:"AlertRuleTypes,omitempty" xml:"AlertRuleTypes,omitempty"`
	AlertUser      *string `json:"AlertUser,omitempty" xml:"AlertUser,omitempty"`
	BeginTime      *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RemindId       *int64  `json:"RemindId,omitempty" xml:"RemindId,omitempty"`
}

func (s ListAlertMessagesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAlertMessagesRequest) GoString() string {
	return s.String()
}

func (s *ListAlertMessagesRequest) SetAlertMethods(v string) *ListAlertMessagesRequest {
	s.AlertMethods = &v
	return s
}

func (s *ListAlertMessagesRequest) SetAlertRuleTypes(v string) *ListAlertMessagesRequest {
	s.AlertRuleTypes = &v
	return s
}

func (s *ListAlertMessagesRequest) SetAlertUser(v string) *ListAlertMessagesRequest {
	s.AlertUser = &v
	return s
}

func (s *ListAlertMessagesRequest) SetBeginTime(v string) *ListAlertMessagesRequest {
	s.BeginTime = &v
	return s
}

func (s *ListAlertMessagesRequest) SetEndTime(v string) *ListAlertMessagesRequest {
	s.EndTime = &v
	return s
}

func (s *ListAlertMessagesRequest) SetPageNumber(v int32) *ListAlertMessagesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAlertMessagesRequest) SetPageSize(v int32) *ListAlertMessagesRequest {
	s.PageSize = &v
	return s
}

func (s *ListAlertMessagesRequest) SetRemindId(v int64) *ListAlertMessagesRequest {
	s.RemindId = &v
	return s
}

type ListAlertMessagesResponseBody struct {
	Data           *ListAlertMessagesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                            `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAlertMessagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAlertMessagesResponseBody) GoString() string {
	return s.String()
}

func (s *ListAlertMessagesResponseBody) SetData(v *ListAlertMessagesResponseBodyData) *ListAlertMessagesResponseBody {
	s.Data = v
	return s
}

func (s *ListAlertMessagesResponseBody) SetErrorCode(v string) *ListAlertMessagesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListAlertMessagesResponseBody) SetErrorMessage(v string) *ListAlertMessagesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListAlertMessagesResponseBody) SetHttpStatusCode(v int32) *ListAlertMessagesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAlertMessagesResponseBody) SetRequestId(v string) *ListAlertMessagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAlertMessagesResponseBody) SetSuccess(v bool) *ListAlertMessagesResponseBody {
	s.Success = &v
	return s
}

type ListAlertMessagesResponseBodyData struct {
	AlertMessages []*ListAlertMessagesResponseBodyDataAlertMessages `json:"AlertMessages,omitempty" xml:"AlertMessages,omitempty" type:"Repeated"`
	PageNumber    *string                                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *string                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount    *string                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAlertMessagesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAlertMessagesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAlertMessagesResponseBodyData) SetAlertMessages(v []*ListAlertMessagesResponseBodyDataAlertMessages) *ListAlertMessagesResponseBodyData {
	s.AlertMessages = v
	return s
}

func (s *ListAlertMessagesResponseBodyData) SetPageNumber(v string) *ListAlertMessagesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListAlertMessagesResponseBodyData) SetPageSize(v string) *ListAlertMessagesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListAlertMessagesResponseBodyData) SetTotalCount(v string) *ListAlertMessagesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListAlertMessagesResponseBodyDataAlertMessages struct {
	AlertId            *int64                                                     `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	AlertMessageStatus *string                                                    `json:"AlertMessageStatus,omitempty" xml:"AlertMessageStatus,omitempty"`
	AlertMethod        *string                                                    `json:"AlertMethod,omitempty" xml:"AlertMethod,omitempty"`
	AlertTime          *int64                                                     `json:"AlertTime,omitempty" xml:"AlertTime,omitempty"`
	AlertUser          *string                                                    `json:"AlertUser,omitempty" xml:"AlertUser,omitempty"`
	Content            *string                                                    `json:"Content,omitempty" xml:"Content,omitempty"`
	Instances          []*ListAlertMessagesResponseBodyDataAlertMessagesInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	Nodes              []*ListAlertMessagesResponseBodyDataAlertMessagesNodes     `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
	RemindId           *int64                                                     `json:"RemindId,omitempty" xml:"RemindId,omitempty"`
	RemindName         *string                                                    `json:"RemindName,omitempty" xml:"RemindName,omitempty"`
	SlaAlert           *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert    `json:"SlaAlert,omitempty" xml:"SlaAlert,omitempty" type:"Struct"`
	Source             *string                                                    `json:"Source,omitempty" xml:"Source,omitempty"`
	Topics             []*ListAlertMessagesResponseBodyDataAlertMessagesTopics    `json:"Topics,omitempty" xml:"Topics,omitempty" type:"Repeated"`
}

func (s ListAlertMessagesResponseBodyDataAlertMessages) String() string {
	return tea.Prettify(s)
}

func (s ListAlertMessagesResponseBodyDataAlertMessages) GoString() string {
	return s.String()
}

func (s *ListAlertMessagesResponseBodyDataAlertMessages) SetAlertId(v int64) *ListAlertMessagesResponseBodyDataAlertMessages {
	s.AlertId = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessages) SetAlertMessageStatus(v string) *ListAlertMessagesResponseBodyDataAlertMessages {
	s.AlertMessageStatus = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessages) SetAlertMethod(v string) *ListAlertMessagesResponseBodyDataAlertMessages {
	s.AlertMethod = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessages) SetAlertTime(v int64) *ListAlertMessagesResponseBodyDataAlertMessages {
	s.AlertTime = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessages) SetAlertUser(v string) *ListAlertMessagesResponseBodyDataAlertMessages {
	s.AlertUser = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessages) SetContent(v string) *ListAlertMessagesResponseBodyDataAlertMessages {
	s.Content = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessages) SetInstances(v []*ListAlertMessagesResponseBodyDataAlertMessagesInstances) *ListAlertMessagesResponseBodyDataAlertMessages {
	s.Instances = v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessages) SetNodes(v []*ListAlertMessagesResponseBodyDataAlertMessagesNodes) *ListAlertMessagesResponseBodyDataAlertMessages {
	s.Nodes = v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessages) SetRemindId(v int64) *ListAlertMessagesResponseBodyDataAlertMessages {
	s.RemindId = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessages) SetRemindName(v string) *ListAlertMessagesResponseBodyDataAlertMessages {
	s.RemindName = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessages) SetSlaAlert(v *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert) *ListAlertMessagesResponseBodyDataAlertMessages {
	s.SlaAlert = v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessages) SetSource(v string) *ListAlertMessagesResponseBodyDataAlertMessages {
	s.Source = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessages) SetTopics(v []*ListAlertMessagesResponseBodyDataAlertMessagesTopics) *ListAlertMessagesResponseBodyDataAlertMessages {
	s.Topics = v
	return s
}

type ListAlertMessagesResponseBodyDataAlertMessagesInstances struct {
	InstanceId *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NodeId     *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName   *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	ProjectId  *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListAlertMessagesResponseBodyDataAlertMessagesInstances) String() string {
	return tea.Prettify(s)
}

func (s ListAlertMessagesResponseBodyDataAlertMessagesInstances) GoString() string {
	return s.String()
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesInstances) SetInstanceId(v int64) *ListAlertMessagesResponseBodyDataAlertMessagesInstances {
	s.InstanceId = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesInstances) SetNodeId(v int64) *ListAlertMessagesResponseBodyDataAlertMessagesInstances {
	s.NodeId = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesInstances) SetNodeName(v string) *ListAlertMessagesResponseBodyDataAlertMessagesInstances {
	s.NodeName = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesInstances) SetProjectId(v int64) *ListAlertMessagesResponseBodyDataAlertMessagesInstances {
	s.ProjectId = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesInstances) SetStatus(v string) *ListAlertMessagesResponseBodyDataAlertMessagesInstances {
	s.Status = &v
	return s
}

type ListAlertMessagesResponseBodyDataAlertMessagesNodes struct {
	NodeId    *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName  *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner     *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListAlertMessagesResponseBodyDataAlertMessagesNodes) String() string {
	return tea.Prettify(s)
}

func (s ListAlertMessagesResponseBodyDataAlertMessagesNodes) GoString() string {
	return s.String()
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesNodes) SetNodeId(v int64) *ListAlertMessagesResponseBodyDataAlertMessagesNodes {
	s.NodeId = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesNodes) SetNodeName(v string) *ListAlertMessagesResponseBodyDataAlertMessagesNodes {
	s.NodeName = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesNodes) SetOwner(v string) *ListAlertMessagesResponseBodyDataAlertMessagesNodes {
	s.Owner = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesNodes) SetProjectId(v int64) *ListAlertMessagesResponseBodyDataAlertMessagesNodes {
	s.ProjectId = &v
	return s
}

type ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert struct {
	BaselineId    *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	BaselineName  *string `json:"BaselineName,omitempty" xml:"BaselineName,omitempty"`
	BaselineOwner *string `json:"BaselineOwner,omitempty" xml:"BaselineOwner,omitempty"`
	Bizdate       *int64  `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	InGroupId     *int32  `json:"InGroupId,omitempty" xml:"InGroupId,omitempty"`
	ProjectId     *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert) String() string {
	return tea.Prettify(s)
}

func (s ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert) GoString() string {
	return s.String()
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert) SetBaselineId(v int64) *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert {
	s.BaselineId = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert) SetBaselineName(v string) *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert {
	s.BaselineName = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert) SetBaselineOwner(v string) *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert {
	s.BaselineOwner = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert) SetBizdate(v int64) *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert {
	s.Bizdate = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert) SetInGroupId(v int32) *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert {
	s.InGroupId = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert) SetProjectId(v int64) *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert {
	s.ProjectId = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert) SetStatus(v string) *ListAlertMessagesResponseBodyDataAlertMessagesSlaAlert {
	s.Status = &v
	return s
}

type ListAlertMessagesResponseBodyDataAlertMessagesTopics struct {
	InstanceId  *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NodeId      *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	TopicId     *int64  `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
	TopicName   *string `json:"TopicName,omitempty" xml:"TopicName,omitempty"`
	TopicOwner  *string `json:"TopicOwner,omitempty" xml:"TopicOwner,omitempty"`
	TopicStatus *string `json:"TopicStatus,omitempty" xml:"TopicStatus,omitempty"`
}

func (s ListAlertMessagesResponseBodyDataAlertMessagesTopics) String() string {
	return tea.Prettify(s)
}

func (s ListAlertMessagesResponseBodyDataAlertMessagesTopics) GoString() string {
	return s.String()
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesTopics) SetInstanceId(v int64) *ListAlertMessagesResponseBodyDataAlertMessagesTopics {
	s.InstanceId = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesTopics) SetNodeId(v int64) *ListAlertMessagesResponseBodyDataAlertMessagesTopics {
	s.NodeId = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesTopics) SetTopicId(v int64) *ListAlertMessagesResponseBodyDataAlertMessagesTopics {
	s.TopicId = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesTopics) SetTopicName(v string) *ListAlertMessagesResponseBodyDataAlertMessagesTopics {
	s.TopicName = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesTopics) SetTopicOwner(v string) *ListAlertMessagesResponseBodyDataAlertMessagesTopics {
	s.TopicOwner = &v
	return s
}

func (s *ListAlertMessagesResponseBodyDataAlertMessagesTopics) SetTopicStatus(v string) *ListAlertMessagesResponseBodyDataAlertMessagesTopics {
	s.TopicStatus = &v
	return s
}

type ListAlertMessagesResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListAlertMessagesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAlertMessagesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAlertMessagesResponse) GoString() string {
	return s.String()
}

func (s *ListAlertMessagesResponse) SetHeaders(v map[string]*string) *ListAlertMessagesResponse {
	s.Headers = v
	return s
}

func (s *ListAlertMessagesResponse) SetBody(v *ListAlertMessagesResponseBody) *ListAlertMessagesResponse {
	s.Body = v
	return s
}

type ListBaselineConfigsRequest struct {
	BaselineTypes *string `json:"BaselineTypes,omitempty" xml:"BaselineTypes,omitempty"`
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Priority      *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ProjectId     *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SearchText    *string `json:"SearchText,omitempty" xml:"SearchText,omitempty"`
	Useflag       *bool   `json:"Useflag,omitempty" xml:"Useflag,omitempty"`
}

func (s ListBaselineConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBaselineConfigsRequest) GoString() string {
	return s.String()
}

func (s *ListBaselineConfigsRequest) SetBaselineTypes(v string) *ListBaselineConfigsRequest {
	s.BaselineTypes = &v
	return s
}

func (s *ListBaselineConfigsRequest) SetOwner(v string) *ListBaselineConfigsRequest {
	s.Owner = &v
	return s
}

func (s *ListBaselineConfigsRequest) SetPageNumber(v int32) *ListBaselineConfigsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListBaselineConfigsRequest) SetPageSize(v int32) *ListBaselineConfigsRequest {
	s.PageSize = &v
	return s
}

func (s *ListBaselineConfigsRequest) SetPriority(v string) *ListBaselineConfigsRequest {
	s.Priority = &v
	return s
}

func (s *ListBaselineConfigsRequest) SetProjectId(v int64) *ListBaselineConfigsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListBaselineConfigsRequest) SetSearchText(v string) *ListBaselineConfigsRequest {
	s.SearchText = &v
	return s
}

func (s *ListBaselineConfigsRequest) SetUseflag(v bool) *ListBaselineConfigsRequest {
	s.Useflag = &v
	return s
}

type ListBaselineConfigsResponseBody struct {
	Data           *ListBaselineConfigsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                              `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListBaselineConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBaselineConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *ListBaselineConfigsResponseBody) SetData(v *ListBaselineConfigsResponseBodyData) *ListBaselineConfigsResponseBody {
	s.Data = v
	return s
}

func (s *ListBaselineConfigsResponseBody) SetErrorCode(v string) *ListBaselineConfigsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListBaselineConfigsResponseBody) SetErrorMessage(v string) *ListBaselineConfigsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListBaselineConfigsResponseBody) SetHttpStatusCode(v int32) *ListBaselineConfigsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListBaselineConfigsResponseBody) SetRequestId(v string) *ListBaselineConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListBaselineConfigsResponseBody) SetSuccess(v bool) *ListBaselineConfigsResponseBody {
	s.Success = &v
	return s
}

type ListBaselineConfigsResponseBodyData struct {
	Baselines  []*ListBaselineConfigsResponseBodyDataBaselines `json:"Baselines,omitempty" xml:"Baselines,omitempty" type:"Repeated"`
	PageNumber *int32                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListBaselineConfigsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListBaselineConfigsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListBaselineConfigsResponseBodyData) SetBaselines(v []*ListBaselineConfigsResponseBodyDataBaselines) *ListBaselineConfigsResponseBodyData {
	s.Baselines = v
	return s
}

func (s *ListBaselineConfigsResponseBodyData) SetPageNumber(v int32) *ListBaselineConfigsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyData) SetPageSize(v int32) *ListBaselineConfigsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyData) SetTotalCount(v int32) *ListBaselineConfigsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListBaselineConfigsResponseBodyDataBaselines struct {
	BaselineId    *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	BaselineName  *string `json:"BaselineName,omitempty" xml:"BaselineName,omitempty"`
	BaselineType  *string `json:"BaselineType,omitempty" xml:"BaselineType,omitempty"`
	ExpHour       *int32  `json:"ExpHour,omitempty" xml:"ExpHour,omitempty"`
	ExpMinu       *int32  `json:"ExpMinu,omitempty" xml:"ExpMinu,omitempty"`
	HourExpDetail *string `json:"HourExpDetail,omitempty" xml:"HourExpDetail,omitempty"`
	HourSlaDetail *string `json:"HourSlaDetail,omitempty" xml:"HourSlaDetail,omitempty"`
	IsDefault     *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Priority      *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ProjectId     *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SlaHour       *int32  `json:"SlaHour,omitempty" xml:"SlaHour,omitempty"`
	SlaMinu       *int32  `json:"SlaMinu,omitempty" xml:"SlaMinu,omitempty"`
	UseFlag       *bool   `json:"UseFlag,omitempty" xml:"UseFlag,omitempty"`
}

func (s ListBaselineConfigsResponseBodyDataBaselines) String() string {
	return tea.Prettify(s)
}

func (s ListBaselineConfigsResponseBodyDataBaselines) GoString() string {
	return s.String()
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetBaselineId(v int64) *ListBaselineConfigsResponseBodyDataBaselines {
	s.BaselineId = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetBaselineName(v string) *ListBaselineConfigsResponseBodyDataBaselines {
	s.BaselineName = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetBaselineType(v string) *ListBaselineConfigsResponseBodyDataBaselines {
	s.BaselineType = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetExpHour(v int32) *ListBaselineConfigsResponseBodyDataBaselines {
	s.ExpHour = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetExpMinu(v int32) *ListBaselineConfigsResponseBodyDataBaselines {
	s.ExpMinu = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetHourExpDetail(v string) *ListBaselineConfigsResponseBodyDataBaselines {
	s.HourExpDetail = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetHourSlaDetail(v string) *ListBaselineConfigsResponseBodyDataBaselines {
	s.HourSlaDetail = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetIsDefault(v bool) *ListBaselineConfigsResponseBodyDataBaselines {
	s.IsDefault = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetOwner(v string) *ListBaselineConfigsResponseBodyDataBaselines {
	s.Owner = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetPriority(v int32) *ListBaselineConfigsResponseBodyDataBaselines {
	s.Priority = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetProjectId(v int64) *ListBaselineConfigsResponseBodyDataBaselines {
	s.ProjectId = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetSlaHour(v int32) *ListBaselineConfigsResponseBodyDataBaselines {
	s.SlaHour = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetSlaMinu(v int32) *ListBaselineConfigsResponseBodyDataBaselines {
	s.SlaMinu = &v
	return s
}

func (s *ListBaselineConfigsResponseBodyDataBaselines) SetUseFlag(v bool) *ListBaselineConfigsResponseBodyDataBaselines {
	s.UseFlag = &v
	return s
}

type ListBaselineConfigsResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListBaselineConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListBaselineConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBaselineConfigsResponse) GoString() string {
	return s.String()
}

func (s *ListBaselineConfigsResponse) SetHeaders(v map[string]*string) *ListBaselineConfigsResponse {
	s.Headers = v
	return s
}

func (s *ListBaselineConfigsResponse) SetBody(v *ListBaselineConfigsResponseBody) *ListBaselineConfigsResponse {
	s.Body = v
	return s
}

type ListBaselineStatusesRequest struct {
	BaselineTypes *string `json:"BaselineTypes,omitempty" xml:"BaselineTypes,omitempty"`
	Bizdate       *string `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	FinishStatus  *string `json:"FinishStatus,omitempty" xml:"FinishStatus,omitempty"`
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Priority      *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	SearchText    *string `json:"SearchText,omitempty" xml:"SearchText,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TopicId       *int64  `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
}

func (s ListBaselineStatusesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBaselineStatusesRequest) GoString() string {
	return s.String()
}

func (s *ListBaselineStatusesRequest) SetBaselineTypes(v string) *ListBaselineStatusesRequest {
	s.BaselineTypes = &v
	return s
}

func (s *ListBaselineStatusesRequest) SetBizdate(v string) *ListBaselineStatusesRequest {
	s.Bizdate = &v
	return s
}

func (s *ListBaselineStatusesRequest) SetFinishStatus(v string) *ListBaselineStatusesRequest {
	s.FinishStatus = &v
	return s
}

func (s *ListBaselineStatusesRequest) SetOwner(v string) *ListBaselineStatusesRequest {
	s.Owner = &v
	return s
}

func (s *ListBaselineStatusesRequest) SetPageNumber(v int32) *ListBaselineStatusesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListBaselineStatusesRequest) SetPageSize(v int32) *ListBaselineStatusesRequest {
	s.PageSize = &v
	return s
}

func (s *ListBaselineStatusesRequest) SetPriority(v string) *ListBaselineStatusesRequest {
	s.Priority = &v
	return s
}

func (s *ListBaselineStatusesRequest) SetSearchText(v string) *ListBaselineStatusesRequest {
	s.SearchText = &v
	return s
}

func (s *ListBaselineStatusesRequest) SetStatus(v string) *ListBaselineStatusesRequest {
	s.Status = &v
	return s
}

func (s *ListBaselineStatusesRequest) SetTopicId(v int64) *ListBaselineStatusesRequest {
	s.TopicId = &v
	return s
}

type ListBaselineStatusesResponseBody struct {
	Data           *ListBaselineStatusesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                               `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListBaselineStatusesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBaselineStatusesResponseBody) GoString() string {
	return s.String()
}

func (s *ListBaselineStatusesResponseBody) SetData(v *ListBaselineStatusesResponseBodyData) *ListBaselineStatusesResponseBody {
	s.Data = v
	return s
}

func (s *ListBaselineStatusesResponseBody) SetErrorCode(v string) *ListBaselineStatusesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListBaselineStatusesResponseBody) SetErrorMessage(v string) *ListBaselineStatusesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListBaselineStatusesResponseBody) SetHttpStatusCode(v int32) *ListBaselineStatusesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListBaselineStatusesResponseBody) SetRequestId(v string) *ListBaselineStatusesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListBaselineStatusesResponseBody) SetSuccess(v bool) *ListBaselineStatusesResponseBody {
	s.Success = &v
	return s
}

type ListBaselineStatusesResponseBodyData struct {
	BaselineStatuses []*ListBaselineStatusesResponseBodyDataBaselineStatuses `json:"BaselineStatuses,omitempty" xml:"BaselineStatuses,omitempty" type:"Repeated"`
	PageNumber       *int32                                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int32                                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount       *int32                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListBaselineStatusesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListBaselineStatusesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListBaselineStatusesResponseBodyData) SetBaselineStatuses(v []*ListBaselineStatusesResponseBodyDataBaselineStatuses) *ListBaselineStatusesResponseBodyData {
	s.BaselineStatuses = v
	return s
}

func (s *ListBaselineStatusesResponseBodyData) SetPageNumber(v int32) *ListBaselineStatusesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyData) SetPageSize(v int32) *ListBaselineStatusesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyData) SetTotalCount(v int32) *ListBaselineStatusesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListBaselineStatusesResponseBodyDataBaselineStatuses struct {
	BaselineId   *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	BaselineName *string `json:"BaselineName,omitempty" xml:"BaselineName,omitempty"`
	Bizdate      *int64  `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	Buffer       *int64  `json:"Buffer,omitempty" xml:"Buffer,omitempty"`
	EndCast      *int64  `json:"EndCast,omitempty" xml:"EndCast,omitempty"`
	ExpTime      *int64  `json:"ExpTime,omitempty" xml:"ExpTime,omitempty"`
	FinishStatus *string `json:"FinishStatus,omitempty" xml:"FinishStatus,omitempty"`
	FinishTime   *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InGroupId    *int32  `json:"InGroupId,omitempty" xml:"InGroupId,omitempty"`
	Owner        *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Priority     *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ProjectId    *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SlaTime      *int64  `json:"SlaTime,omitempty" xml:"SlaTime,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListBaselineStatusesResponseBodyDataBaselineStatuses) String() string {
	return tea.Prettify(s)
}

func (s ListBaselineStatusesResponseBodyDataBaselineStatuses) GoString() string {
	return s.String()
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetBaselineId(v int64) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.BaselineId = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetBaselineName(v string) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.BaselineName = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetBizdate(v int64) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.Bizdate = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetBuffer(v int64) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.Buffer = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetEndCast(v int64) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.EndCast = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetExpTime(v int64) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.ExpTime = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetFinishStatus(v string) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.FinishStatus = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetFinishTime(v int64) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.FinishTime = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetInGroupId(v int32) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.InGroupId = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetOwner(v string) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.Owner = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetPriority(v int32) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.Priority = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetProjectId(v int64) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.ProjectId = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetSlaTime(v int64) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.SlaTime = &v
	return s
}

func (s *ListBaselineStatusesResponseBodyDataBaselineStatuses) SetStatus(v string) *ListBaselineStatusesResponseBodyDataBaselineStatuses {
	s.Status = &v
	return s
}

type ListBaselineStatusesResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListBaselineStatusesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListBaselineStatusesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBaselineStatusesResponse) GoString() string {
	return s.String()
}

func (s *ListBaselineStatusesResponse) SetHeaders(v map[string]*string) *ListBaselineStatusesResponse {
	s.Headers = v
	return s
}

func (s *ListBaselineStatusesResponse) SetBody(v *ListBaselineStatusesResponseBody) *ListBaselineStatusesResponse {
	s.Body = v
	return s
}

type ListBusinessRequest struct {
	Keyword           *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s ListBusinessRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBusinessRequest) GoString() string {
	return s.String()
}

func (s *ListBusinessRequest) SetKeyword(v string) *ListBusinessRequest {
	s.Keyword = &v
	return s
}

func (s *ListBusinessRequest) SetPageNumber(v int32) *ListBusinessRequest {
	s.PageNumber = &v
	return s
}

func (s *ListBusinessRequest) SetPageSize(v int32) *ListBusinessRequest {
	s.PageSize = &v
	return s
}

func (s *ListBusinessRequest) SetProjectId(v int64) *ListBusinessRequest {
	s.ProjectId = &v
	return s
}

func (s *ListBusinessRequest) SetProjectIdentifier(v string) *ListBusinessRequest {
	s.ProjectIdentifier = &v
	return s
}

type ListBusinessResponseBody struct {
	Data           *ListBusinessResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                       `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                        `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListBusinessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBusinessResponseBody) GoString() string {
	return s.String()
}

func (s *ListBusinessResponseBody) SetData(v *ListBusinessResponseBodyData) *ListBusinessResponseBody {
	s.Data = v
	return s
}

func (s *ListBusinessResponseBody) SetErrorCode(v string) *ListBusinessResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListBusinessResponseBody) SetErrorMessage(v string) *ListBusinessResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListBusinessResponseBody) SetHttpStatusCode(v int32) *ListBusinessResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListBusinessResponseBody) SetRequestId(v string) *ListBusinessResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListBusinessResponseBody) SetSuccess(v bool) *ListBusinessResponseBody {
	s.Success = &v
	return s
}

type ListBusinessResponseBodyData struct {
	Business   []*ListBusinessResponseBodyDataBusiness `json:"Business,omitempty" xml:"Business,omitempty" type:"Repeated"`
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListBusinessResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListBusinessResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListBusinessResponseBodyData) SetBusiness(v []*ListBusinessResponseBodyDataBusiness) *ListBusinessResponseBodyData {
	s.Business = v
	return s
}

func (s *ListBusinessResponseBodyData) SetPageNumber(v int32) *ListBusinessResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListBusinessResponseBodyData) SetPageSize(v int32) *ListBusinessResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListBusinessResponseBodyData) SetTotalCount(v int32) *ListBusinessResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListBusinessResponseBodyDataBusiness struct {
	BusinessId   *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	BusinessName *string `json:"BusinessName,omitempty" xml:"BusinessName,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Owner        *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId    *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	UseType      *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s ListBusinessResponseBodyDataBusiness) String() string {
	return tea.Prettify(s)
}

func (s ListBusinessResponseBodyDataBusiness) GoString() string {
	return s.String()
}

func (s *ListBusinessResponseBodyDataBusiness) SetBusinessId(v int64) *ListBusinessResponseBodyDataBusiness {
	s.BusinessId = &v
	return s
}

func (s *ListBusinessResponseBodyDataBusiness) SetBusinessName(v string) *ListBusinessResponseBodyDataBusiness {
	s.BusinessName = &v
	return s
}

func (s *ListBusinessResponseBodyDataBusiness) SetDescription(v string) *ListBusinessResponseBodyDataBusiness {
	s.Description = &v
	return s
}

func (s *ListBusinessResponseBodyDataBusiness) SetOwner(v string) *ListBusinessResponseBodyDataBusiness {
	s.Owner = &v
	return s
}

func (s *ListBusinessResponseBodyDataBusiness) SetProjectId(v int64) *ListBusinessResponseBodyDataBusiness {
	s.ProjectId = &v
	return s
}

func (s *ListBusinessResponseBodyDataBusiness) SetUseType(v string) *ListBusinessResponseBodyDataBusiness {
	s.UseType = &v
	return s
}

type ListBusinessResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListBusinessResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListBusinessResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBusinessResponse) GoString() string {
	return s.String()
}

func (s *ListBusinessResponse) SetHeaders(v map[string]*string) *ListBusinessResponse {
	s.Headers = v
	return s
}

func (s *ListBusinessResponse) SetBody(v *ListBusinessResponseBody) *ListBusinessResponse {
	s.Body = v
	return s
}

type ListCalcEnginesRequest struct {
	CalcEngineType *string `json:"CalcEngineType,omitempty" xml:"CalcEngineType,omitempty"`
	EnvType        *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListCalcEnginesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCalcEnginesRequest) GoString() string {
	return s.String()
}

func (s *ListCalcEnginesRequest) SetCalcEngineType(v string) *ListCalcEnginesRequest {
	s.CalcEngineType = &v
	return s
}

func (s *ListCalcEnginesRequest) SetEnvType(v string) *ListCalcEnginesRequest {
	s.EnvType = &v
	return s
}

func (s *ListCalcEnginesRequest) SetName(v string) *ListCalcEnginesRequest {
	s.Name = &v
	return s
}

func (s *ListCalcEnginesRequest) SetPageNumber(v int32) *ListCalcEnginesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCalcEnginesRequest) SetPageSize(v int32) *ListCalcEnginesRequest {
	s.PageSize = &v
	return s
}

func (s *ListCalcEnginesRequest) SetProjectId(v int64) *ListCalcEnginesRequest {
	s.ProjectId = &v
	return s
}

type ListCalcEnginesResponseBody struct {
	Data           *ListCalcEnginesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListCalcEnginesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCalcEnginesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCalcEnginesResponseBody) SetData(v *ListCalcEnginesResponseBodyData) *ListCalcEnginesResponseBody {
	s.Data = v
	return s
}

func (s *ListCalcEnginesResponseBody) SetHttpStatusCode(v int32) *ListCalcEnginesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCalcEnginesResponseBody) SetRequestId(v string) *ListCalcEnginesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCalcEnginesResponseBody) SetSuccess(v bool) *ListCalcEnginesResponseBody {
	s.Success = &v
	return s
}

type ListCalcEnginesResponseBodyData struct {
	CalcEngines []*ListCalcEnginesResponseBodyDataCalcEngines `json:"CalcEngines,omitempty" xml:"CalcEngines,omitempty" type:"Repeated"`
	PageNumber  *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCalcEnginesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCalcEnginesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCalcEnginesResponseBodyData) SetCalcEngines(v []*ListCalcEnginesResponseBodyDataCalcEngines) *ListCalcEnginesResponseBodyData {
	s.CalcEngines = v
	return s
}

func (s *ListCalcEnginesResponseBodyData) SetPageNumber(v int32) *ListCalcEnginesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListCalcEnginesResponseBodyData) SetPageSize(v int32) *ListCalcEnginesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListCalcEnginesResponseBodyData) SetTotalCount(v int32) *ListCalcEnginesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListCalcEnginesResponseBodyDataCalcEngines struct {
	BindingProjectId   *int32                 `json:"BindingProjectId,omitempty" xml:"BindingProjectId,omitempty"`
	BindingProjectName *string                `json:"BindingProjectName,omitempty" xml:"BindingProjectName,omitempty"`
	CalcEngineType     *string                `json:"CalcEngineType,omitempty" xml:"CalcEngineType,omitempty"`
	DwRegion           *string                `json:"DwRegion,omitempty" xml:"DwRegion,omitempty"`
	EngineId           *int32                 `json:"EngineId,omitempty" xml:"EngineId,omitempty"`
	EngineInfo         map[string]interface{} `json:"EngineInfo,omitempty" xml:"EngineInfo,omitempty"`
	EnvType            *string                `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	GmtCreate          *string                `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	IsDefault          *bool                  `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	Name               *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	Region             *string                `json:"Region,omitempty" xml:"Region,omitempty"`
	TaskAuthType       *string                `json:"TaskAuthType,omitempty" xml:"TaskAuthType,omitempty"`
	TenantId           *int64                 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListCalcEnginesResponseBodyDataCalcEngines) String() string {
	return tea.Prettify(s)
}

func (s ListCalcEnginesResponseBodyDataCalcEngines) GoString() string {
	return s.String()
}

func (s *ListCalcEnginesResponseBodyDataCalcEngines) SetBindingProjectId(v int32) *ListCalcEnginesResponseBodyDataCalcEngines {
	s.BindingProjectId = &v
	return s
}

func (s *ListCalcEnginesResponseBodyDataCalcEngines) SetBindingProjectName(v string) *ListCalcEnginesResponseBodyDataCalcEngines {
	s.BindingProjectName = &v
	return s
}

func (s *ListCalcEnginesResponseBodyDataCalcEngines) SetCalcEngineType(v string) *ListCalcEnginesResponseBodyDataCalcEngines {
	s.CalcEngineType = &v
	return s
}

func (s *ListCalcEnginesResponseBodyDataCalcEngines) SetDwRegion(v string) *ListCalcEnginesResponseBodyDataCalcEngines {
	s.DwRegion = &v
	return s
}

func (s *ListCalcEnginesResponseBodyDataCalcEngines) SetEngineId(v int32) *ListCalcEnginesResponseBodyDataCalcEngines {
	s.EngineId = &v
	return s
}

func (s *ListCalcEnginesResponseBodyDataCalcEngines) SetEngineInfo(v map[string]interface{}) *ListCalcEnginesResponseBodyDataCalcEngines {
	s.EngineInfo = v
	return s
}

func (s *ListCalcEnginesResponseBodyDataCalcEngines) SetEnvType(v string) *ListCalcEnginesResponseBodyDataCalcEngines {
	s.EnvType = &v
	return s
}

func (s *ListCalcEnginesResponseBodyDataCalcEngines) SetGmtCreate(v string) *ListCalcEnginesResponseBodyDataCalcEngines {
	s.GmtCreate = &v
	return s
}

func (s *ListCalcEnginesResponseBodyDataCalcEngines) SetIsDefault(v bool) *ListCalcEnginesResponseBodyDataCalcEngines {
	s.IsDefault = &v
	return s
}

func (s *ListCalcEnginesResponseBodyDataCalcEngines) SetName(v string) *ListCalcEnginesResponseBodyDataCalcEngines {
	s.Name = &v
	return s
}

func (s *ListCalcEnginesResponseBodyDataCalcEngines) SetRegion(v string) *ListCalcEnginesResponseBodyDataCalcEngines {
	s.Region = &v
	return s
}

func (s *ListCalcEnginesResponseBodyDataCalcEngines) SetTaskAuthType(v string) *ListCalcEnginesResponseBodyDataCalcEngines {
	s.TaskAuthType = &v
	return s
}

func (s *ListCalcEnginesResponseBodyDataCalcEngines) SetTenantId(v int64) *ListCalcEnginesResponseBodyDataCalcEngines {
	s.TenantId = &v
	return s
}

type ListCalcEnginesResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListCalcEnginesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCalcEnginesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCalcEnginesResponse) GoString() string {
	return s.String()
}

func (s *ListCalcEnginesResponse) SetHeaders(v map[string]*string) *ListCalcEnginesResponse {
	s.Headers = v
	return s
}

func (s *ListCalcEnginesResponse) SetBody(v *ListCalcEnginesResponseBody) *ListCalcEnginesResponse {
	s.Body = v
	return s
}

type ListConnectionsRequest struct {
	ConnectionType *string `json:"ConnectionType,omitempty" xml:"ConnectionType,omitempty"`
	EnvType        *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	SubType        *string `json:"SubType,omitempty" xml:"SubType,omitempty"`
}

func (s ListConnectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListConnectionsRequest) GoString() string {
	return s.String()
}

func (s *ListConnectionsRequest) SetConnectionType(v string) *ListConnectionsRequest {
	s.ConnectionType = &v
	return s
}

func (s *ListConnectionsRequest) SetEnvType(v int32) *ListConnectionsRequest {
	s.EnvType = &v
	return s
}

func (s *ListConnectionsRequest) SetName(v string) *ListConnectionsRequest {
	s.Name = &v
	return s
}

func (s *ListConnectionsRequest) SetPageNumber(v int32) *ListConnectionsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListConnectionsRequest) SetPageSize(v int32) *ListConnectionsRequest {
	s.PageSize = &v
	return s
}

func (s *ListConnectionsRequest) SetProjectId(v int64) *ListConnectionsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListConnectionsRequest) SetStatus(v string) *ListConnectionsRequest {
	s.Status = &v
	return s
}

func (s *ListConnectionsRequest) SetSubType(v string) *ListConnectionsRequest {
	s.SubType = &v
	return s
}

type ListConnectionsResponseBody struct {
	Data           *ListConnectionsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListConnectionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListConnectionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListConnectionsResponseBody) SetData(v *ListConnectionsResponseBodyData) *ListConnectionsResponseBody {
	s.Data = v
	return s
}

func (s *ListConnectionsResponseBody) SetHttpStatusCode(v int32) *ListConnectionsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListConnectionsResponseBody) SetRequestId(v string) *ListConnectionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListConnectionsResponseBody) SetSuccess(v bool) *ListConnectionsResponseBody {
	s.Success = &v
	return s
}

type ListConnectionsResponseBodyData struct {
	Connections []*ListConnectionsResponseBodyDataConnections `json:"Connections,omitempty" xml:"Connections,omitempty" type:"Repeated"`
	PageNumber  *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListConnectionsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListConnectionsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListConnectionsResponseBodyData) SetConnections(v []*ListConnectionsResponseBodyDataConnections) *ListConnectionsResponseBodyData {
	s.Connections = v
	return s
}

func (s *ListConnectionsResponseBodyData) SetPageNumber(v int32) *ListConnectionsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListConnectionsResponseBodyData) SetPageSize(v int32) *ListConnectionsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListConnectionsResponseBodyData) SetTotalCount(v int32) *ListConnectionsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListConnectionsResponseBodyDataConnections struct {
	BindingCalcEngineId *int32  `json:"BindingCalcEngineId,omitempty" xml:"BindingCalcEngineId,omitempty"`
	ConnectStatus       *int32  `json:"ConnectStatus,omitempty" xml:"ConnectStatus,omitempty"`
	ConnectionType      *string `json:"ConnectionType,omitempty" xml:"ConnectionType,omitempty"`
	Content             *string `json:"Content,omitempty" xml:"Content,omitempty"`
	DefaultEngine       *bool   `json:"DefaultEngine,omitempty" xml:"DefaultEngine,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnvType             *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	GmtCreate           *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified         *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id                  *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name                *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Operator            *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	ProjectId           *int32  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Sequence            *int32  `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
	Shared              *bool   `json:"Shared,omitempty" xml:"Shared,omitempty"`
	Status              *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	SubType             *string `json:"SubType,omitempty" xml:"SubType,omitempty"`
	TenantId            *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListConnectionsResponseBodyDataConnections) String() string {
	return tea.Prettify(s)
}

func (s ListConnectionsResponseBodyDataConnections) GoString() string {
	return s.String()
}

func (s *ListConnectionsResponseBodyDataConnections) SetBindingCalcEngineId(v int32) *ListConnectionsResponseBodyDataConnections {
	s.BindingCalcEngineId = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetConnectStatus(v int32) *ListConnectionsResponseBodyDataConnections {
	s.ConnectStatus = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetConnectionType(v string) *ListConnectionsResponseBodyDataConnections {
	s.ConnectionType = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetContent(v string) *ListConnectionsResponseBodyDataConnections {
	s.Content = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetDefaultEngine(v bool) *ListConnectionsResponseBodyDataConnections {
	s.DefaultEngine = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetDescription(v string) *ListConnectionsResponseBodyDataConnections {
	s.Description = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetEnvType(v int32) *ListConnectionsResponseBodyDataConnections {
	s.EnvType = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetGmtCreate(v string) *ListConnectionsResponseBodyDataConnections {
	s.GmtCreate = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetGmtModified(v string) *ListConnectionsResponseBodyDataConnections {
	s.GmtModified = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetId(v int32) *ListConnectionsResponseBodyDataConnections {
	s.Id = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetName(v string) *ListConnectionsResponseBodyDataConnections {
	s.Name = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetOperator(v string) *ListConnectionsResponseBodyDataConnections {
	s.Operator = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetProjectId(v int32) *ListConnectionsResponseBodyDataConnections {
	s.ProjectId = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetSequence(v int32) *ListConnectionsResponseBodyDataConnections {
	s.Sequence = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetShared(v bool) *ListConnectionsResponseBodyDataConnections {
	s.Shared = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetStatus(v int32) *ListConnectionsResponseBodyDataConnections {
	s.Status = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetSubType(v string) *ListConnectionsResponseBodyDataConnections {
	s.SubType = &v
	return s
}

func (s *ListConnectionsResponseBodyDataConnections) SetTenantId(v int64) *ListConnectionsResponseBodyDataConnections {
	s.TenantId = &v
	return s
}

type ListConnectionsResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListConnectionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListConnectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListConnectionsResponse) GoString() string {
	return s.String()
}

func (s *ListConnectionsResponse) SetHeaders(v map[string]*string) *ListConnectionsResponse {
	s.Headers = v
	return s
}

func (s *ListConnectionsResponse) SetBody(v *ListConnectionsResponseBody) *ListConnectionsResponse {
	s.Body = v
	return s
}

type ListDIProjectConfigRequest struct {
	DestinationType *string `json:"DestinationType,omitempty" xml:"DestinationType,omitempty"`
	ProjectId       *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SourceType      *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s ListDIProjectConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDIProjectConfigRequest) GoString() string {
	return s.String()
}

func (s *ListDIProjectConfigRequest) SetDestinationType(v string) *ListDIProjectConfigRequest {
	s.DestinationType = &v
	return s
}

func (s *ListDIProjectConfigRequest) SetProjectId(v int64) *ListDIProjectConfigRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDIProjectConfigRequest) SetSourceType(v string) *ListDIProjectConfigRequest {
	s.SourceType = &v
	return s
}

type ListDIProjectConfigResponseBody struct {
	Data      *ListDIProjectConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListDIProjectConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDIProjectConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ListDIProjectConfigResponseBody) SetData(v *ListDIProjectConfigResponseBodyData) *ListDIProjectConfigResponseBody {
	s.Data = v
	return s
}

func (s *ListDIProjectConfigResponseBody) SetRequestId(v string) *ListDIProjectConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDIProjectConfigResponseBody) SetSuccess(v bool) *ListDIProjectConfigResponseBody {
	s.Success = &v
	return s
}

type ListDIProjectConfigResponseBodyData struct {
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
}

func (s ListDIProjectConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDIProjectConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDIProjectConfigResponseBodyData) SetConfig(v string) *ListDIProjectConfigResponseBodyData {
	s.Config = &v
	return s
}

type ListDIProjectConfigResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDIProjectConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDIProjectConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDIProjectConfigResponse) GoString() string {
	return s.String()
}

func (s *ListDIProjectConfigResponse) SetHeaders(v map[string]*string) *ListDIProjectConfigResponse {
	s.Headers = v
	return s
}

func (s *ListDIProjectConfigResponse) SetBody(v *ListDIProjectConfigResponseBody) *ListDIProjectConfigResponse {
	s.Body = v
	return s
}

type ListDagsRequest struct {
	OpSeq      *int64  `json:"OpSeq,omitempty" xml:"OpSeq,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s ListDagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDagsRequest) GoString() string {
	return s.String()
}

func (s *ListDagsRequest) SetOpSeq(v int64) *ListDagsRequest {
	s.OpSeq = &v
	return s
}

func (s *ListDagsRequest) SetProjectEnv(v string) *ListDagsRequest {
	s.ProjectEnv = &v
	return s
}

type ListDagsResponseBody struct {
	Data           *ListDagsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                   `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListDagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDagsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDagsResponseBody) SetData(v *ListDagsResponseBodyData) *ListDagsResponseBody {
	s.Data = v
	return s
}

func (s *ListDagsResponseBody) SetErrorCode(v string) *ListDagsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListDagsResponseBody) SetErrorMessage(v string) *ListDagsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListDagsResponseBody) SetHttpStatusCode(v int32) *ListDagsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDagsResponseBody) SetRequestId(v string) *ListDagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDagsResponseBody) SetSuccess(v bool) *ListDagsResponseBody {
	s.Success = &v
	return s
}

type ListDagsResponseBodyData struct {
	Dags []*ListDagsResponseBodyDataDags `json:"Dags,omitempty" xml:"Dags,omitempty" type:"Repeated"`
}

func (s ListDagsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDagsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDagsResponseBodyData) SetDags(v []*ListDagsResponseBodyDataDags) *ListDagsResponseBodyData {
	s.Dags = v
	return s
}

type ListDagsResponseBodyDataDags struct {
	Bizdate    *int64  `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	CreateTime *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	DagId      *int64  `json:"DagId,omitempty" xml:"DagId,omitempty"`
	FinishTime *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Gmtdate    *int64  `json:"Gmtdate,omitempty" xml:"Gmtdate,omitempty"`
	ModifyTime *int64  `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OpSeq      *int64  `json:"OpSeq,omitempty" xml:"OpSeq,omitempty"`
	ProjectId  *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	StartTime  *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDagsResponseBodyDataDags) String() string {
	return tea.Prettify(s)
}

func (s ListDagsResponseBodyDataDags) GoString() string {
	return s.String()
}

func (s *ListDagsResponseBodyDataDags) SetBizdate(v int64) *ListDagsResponseBodyDataDags {
	s.Bizdate = &v
	return s
}

func (s *ListDagsResponseBodyDataDags) SetCreateTime(v int64) *ListDagsResponseBodyDataDags {
	s.CreateTime = &v
	return s
}

func (s *ListDagsResponseBodyDataDags) SetCreateUser(v string) *ListDagsResponseBodyDataDags {
	s.CreateUser = &v
	return s
}

func (s *ListDagsResponseBodyDataDags) SetDagId(v int64) *ListDagsResponseBodyDataDags {
	s.DagId = &v
	return s
}

func (s *ListDagsResponseBodyDataDags) SetFinishTime(v int64) *ListDagsResponseBodyDataDags {
	s.FinishTime = &v
	return s
}

func (s *ListDagsResponseBodyDataDags) SetGmtdate(v int64) *ListDagsResponseBodyDataDags {
	s.Gmtdate = &v
	return s
}

func (s *ListDagsResponseBodyDataDags) SetModifyTime(v int64) *ListDagsResponseBodyDataDags {
	s.ModifyTime = &v
	return s
}

func (s *ListDagsResponseBodyDataDags) SetName(v string) *ListDagsResponseBodyDataDags {
	s.Name = &v
	return s
}

func (s *ListDagsResponseBodyDataDags) SetOpSeq(v int64) *ListDagsResponseBodyDataDags {
	s.OpSeq = &v
	return s
}

func (s *ListDagsResponseBodyDataDags) SetProjectId(v int64) *ListDagsResponseBodyDataDags {
	s.ProjectId = &v
	return s
}

func (s *ListDagsResponseBodyDataDags) SetStartTime(v int64) *ListDagsResponseBodyDataDags {
	s.StartTime = &v
	return s
}

func (s *ListDagsResponseBodyDataDags) SetStatus(v string) *ListDagsResponseBodyDataDags {
	s.Status = &v
	return s
}

func (s *ListDagsResponseBodyDataDags) SetType(v string) *ListDagsResponseBodyDataDags {
	s.Type = &v
	return s
}

type ListDagsResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDagsResponse) GoString() string {
	return s.String()
}

func (s *ListDagsResponse) SetHeaders(v map[string]*string) *ListDagsResponse {
	s.Headers = v
	return s
}

func (s *ListDagsResponse) SetBody(v *ListDagsResponseBody) *ListDagsResponse {
	s.Body = v
	return s
}

type ListDataServiceApiAuthoritiesRequest struct {
	ApiNameKeyword *string `json:"ApiNameKeyword,omitempty" xml:"ApiNameKeyword,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId       *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListDataServiceApiAuthoritiesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApiAuthoritiesRequest) GoString() string {
	return s.String()
}

func (s *ListDataServiceApiAuthoritiesRequest) SetApiNameKeyword(v string) *ListDataServiceApiAuthoritiesRequest {
	s.ApiNameKeyword = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesRequest) SetPageNumber(v int32) *ListDataServiceApiAuthoritiesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesRequest) SetPageSize(v int32) *ListDataServiceApiAuthoritiesRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesRequest) SetProjectId(v int64) *ListDataServiceApiAuthoritiesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesRequest) SetTenantId(v int64) *ListDataServiceApiAuthoritiesRequest {
	s.TenantId = &v
	return s
}

type ListDataServiceApiAuthoritiesResponseBody struct {
	Data           *ListDataServiceApiAuthoritiesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                                        `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                         `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListDataServiceApiAuthoritiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApiAuthoritiesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataServiceApiAuthoritiesResponseBody) SetData(v *ListDataServiceApiAuthoritiesResponseBodyData) *ListDataServiceApiAuthoritiesResponseBody {
	s.Data = v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBody) SetErrorCode(v string) *ListDataServiceApiAuthoritiesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBody) SetErrorMessage(v string) *ListDataServiceApiAuthoritiesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBody) SetHttpStatusCode(v int32) *ListDataServiceApiAuthoritiesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBody) SetRequestId(v string) *ListDataServiceApiAuthoritiesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBody) SetSuccess(v bool) *ListDataServiceApiAuthoritiesResponseBody {
	s.Success = &v
	return s
}

type ListDataServiceApiAuthoritiesResponseBodyData struct {
	ApiAuthorizationList []*ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList `json:"ApiAuthorizationList,omitempty" xml:"ApiAuthorizationList,omitempty" type:"Repeated"`
	PageNumber           *int32                                                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount           *int32                                                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataServiceApiAuthoritiesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApiAuthoritiesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDataServiceApiAuthoritiesResponseBodyData) SetApiAuthorizationList(v []*ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) *ListDataServiceApiAuthoritiesResponseBodyData {
	s.ApiAuthorizationList = v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyData) SetPageNumber(v int32) *ListDataServiceApiAuthoritiesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyData) SetPageSize(v int32) *ListDataServiceApiAuthoritiesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyData) SetTotalCount(v int32) *ListDataServiceApiAuthoritiesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList struct {
	ApiId                *int64                                                                                   `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName              *string                                                                                  `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiPath              *string                                                                                  `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	ApiStatus            *int32                                                                                   `json:"ApiStatus,omitempty" xml:"ApiStatus,omitempty"`
	AuthorizationRecords []*ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationListAuthorizationRecords `json:"AuthorizationRecords,omitempty" xml:"AuthorizationRecords,omitempty" type:"Repeated"`
	CreatedTime          *string                                                                                  `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	CreatorId            *string                                                                                  `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	GroupId              *string                                                                                  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModifiedTime         *string                                                                                  `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	ProjectId            *int64                                                                                   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId             *int64                                                                                   `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) GoString() string {
	return s.String()
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) SetApiId(v int64) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList {
	s.ApiId = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) SetApiName(v string) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList {
	s.ApiName = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) SetApiPath(v string) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList {
	s.ApiPath = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) SetApiStatus(v int32) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList {
	s.ApiStatus = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) SetAuthorizationRecords(v []*ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationListAuthorizationRecords) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList {
	s.AuthorizationRecords = v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) SetCreatedTime(v string) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList {
	s.CreatedTime = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) SetCreatorId(v string) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList {
	s.CreatorId = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) SetGroupId(v string) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList {
	s.GroupId = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) SetModifiedTime(v string) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList {
	s.ModifiedTime = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) SetProjectId(v int64) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList {
	s.ProjectId = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList) SetTenantId(v int64) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationList {
	s.TenantId = &v
	return s
}

type ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationListAuthorizationRecords struct {
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	CreatorId   *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	EndTime     *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationListAuthorizationRecords) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationListAuthorizationRecords) GoString() string {
	return s.String()
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationListAuthorizationRecords) SetCreatedTime(v string) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationListAuthorizationRecords {
	s.CreatedTime = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationListAuthorizationRecords) SetCreatorId(v string) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationListAuthorizationRecords {
	s.CreatorId = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationListAuthorizationRecords) SetEndTime(v string) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationListAuthorizationRecords {
	s.EndTime = &v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationListAuthorizationRecords) SetProjectId(v int64) *ListDataServiceApiAuthoritiesResponseBodyDataApiAuthorizationListAuthorizationRecords {
	s.ProjectId = &v
	return s
}

type ListDataServiceApiAuthoritiesResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDataServiceApiAuthoritiesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDataServiceApiAuthoritiesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApiAuthoritiesResponse) GoString() string {
	return s.String()
}

func (s *ListDataServiceApiAuthoritiesResponse) SetHeaders(v map[string]*string) *ListDataServiceApiAuthoritiesResponse {
	s.Headers = v
	return s
}

func (s *ListDataServiceApiAuthoritiesResponse) SetBody(v *ListDataServiceApiAuthoritiesResponseBody) *ListDataServiceApiAuthoritiesResponse {
	s.Body = v
	return s
}

type ListDataServiceApisRequest struct {
	ApiNameKeyword *string `json:"ApiNameKeyword,omitempty" xml:"ApiNameKeyword,omitempty"`
	ApiPathKeyword *string `json:"ApiPathKeyword,omitempty" xml:"ApiPathKeyword,omitempty"`
	CreatorId      *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId       *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListDataServiceApisRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisRequest) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisRequest) SetApiNameKeyword(v string) *ListDataServiceApisRequest {
	s.ApiNameKeyword = &v
	return s
}

func (s *ListDataServiceApisRequest) SetApiPathKeyword(v string) *ListDataServiceApisRequest {
	s.ApiPathKeyword = &v
	return s
}

func (s *ListDataServiceApisRequest) SetCreatorId(v string) *ListDataServiceApisRequest {
	s.CreatorId = &v
	return s
}

func (s *ListDataServiceApisRequest) SetPageNumber(v int32) *ListDataServiceApisRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataServiceApisRequest) SetPageSize(v int32) *ListDataServiceApisRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataServiceApisRequest) SetProjectId(v int64) *ListDataServiceApisRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataServiceApisRequest) SetTenantId(v int64) *ListDataServiceApisRequest {
	s.TenantId = &v
	return s
}

type ListDataServiceApisResponseBody struct {
	Data           *ListDataServiceApisResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                              `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListDataServiceApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBody) SetData(v *ListDataServiceApisResponseBodyData) *ListDataServiceApisResponseBody {
	s.Data = v
	return s
}

func (s *ListDataServiceApisResponseBody) SetErrorCode(v string) *ListDataServiceApisResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListDataServiceApisResponseBody) SetErrorMessage(v string) *ListDataServiceApisResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListDataServiceApisResponseBody) SetHttpStatusCode(v int32) *ListDataServiceApisResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDataServiceApisResponseBody) SetRequestId(v string) *ListDataServiceApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDataServiceApisResponseBody) SetSuccess(v bool) *ListDataServiceApisResponseBody {
	s.Success = &v
	return s
}

type ListDataServiceApisResponseBodyData struct {
	Apis       []*ListDataServiceApisResponseBodyDataApis `json:"Apis,omitempty" xml:"Apis,omitempty" type:"Repeated"`
	PageNumber *int32                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataServiceApisResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBodyData) SetApis(v []*ListDataServiceApisResponseBodyDataApis) *ListDataServiceApisResponseBodyData {
	s.Apis = v
	return s
}

func (s *ListDataServiceApisResponseBodyData) SetPageNumber(v int32) *ListDataServiceApisResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListDataServiceApisResponseBodyData) SetPageSize(v int32) *ListDataServiceApisResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListDataServiceApisResponseBodyData) SetTotalCount(v int32) *ListDataServiceApisResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListDataServiceApisResponseBodyDataApis struct {
	ApiId               *int64                                                      `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiMode             *int32                                                      `json:"ApiMode,omitempty" xml:"ApiMode,omitempty"`
	ApiName             *string                                                     `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiPath             *string                                                     `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	CreatedTime         *string                                                     `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	CreatorId           *string                                                     `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	Description         *string                                                     `json:"Description,omitempty" xml:"Description,omitempty"`
	FolderId            *int64                                                      `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	GroupId             *string                                                     `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModifiedTime        *string                                                     `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	OperatorId          *string                                                     `json:"OperatorId,omitempty" xml:"OperatorId,omitempty"`
	ProjectId           *int64                                                      `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Protocols           []*int32                                                    `json:"Protocols,omitempty" xml:"Protocols,omitempty" type:"Repeated"`
	RegistrationDetails *ListDataServiceApisResponseBodyDataApisRegistrationDetails `json:"RegistrationDetails,omitempty" xml:"RegistrationDetails,omitempty" type:"Struct"`
	RequestMethod       *int32                                                      `json:"RequestMethod,omitempty" xml:"RequestMethod,omitempty"`
	ResponseContentType *int32                                                      `json:"ResponseContentType,omitempty" xml:"ResponseContentType,omitempty"`
	ScriptDetails       *ListDataServiceApisResponseBodyDataApisScriptDetails       `json:"ScriptDetails,omitempty" xml:"ScriptDetails,omitempty" type:"Struct"`
	Status              *int32                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	TenantId            *int64                                                      `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Timeout             *int32                                                      `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	VisibleRange        *int32                                                      `json:"VisibleRange,omitempty" xml:"VisibleRange,omitempty"`
	WizardDetails       *ListDataServiceApisResponseBodyDataApisWizardDetails       `json:"WizardDetails,omitempty" xml:"WizardDetails,omitempty" type:"Struct"`
}

func (s ListDataServiceApisResponseBodyDataApis) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBodyDataApis) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBodyDataApis) SetApiId(v int64) *ListDataServiceApisResponseBodyDataApis {
	s.ApiId = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetApiMode(v int32) *ListDataServiceApisResponseBodyDataApis {
	s.ApiMode = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetApiName(v string) *ListDataServiceApisResponseBodyDataApis {
	s.ApiName = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetApiPath(v string) *ListDataServiceApisResponseBodyDataApis {
	s.ApiPath = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetCreatedTime(v string) *ListDataServiceApisResponseBodyDataApis {
	s.CreatedTime = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetCreatorId(v string) *ListDataServiceApisResponseBodyDataApis {
	s.CreatorId = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetDescription(v string) *ListDataServiceApisResponseBodyDataApis {
	s.Description = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetFolderId(v int64) *ListDataServiceApisResponseBodyDataApis {
	s.FolderId = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetGroupId(v string) *ListDataServiceApisResponseBodyDataApis {
	s.GroupId = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetModifiedTime(v string) *ListDataServiceApisResponseBodyDataApis {
	s.ModifiedTime = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetOperatorId(v string) *ListDataServiceApisResponseBodyDataApis {
	s.OperatorId = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetProjectId(v int64) *ListDataServiceApisResponseBodyDataApis {
	s.ProjectId = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetProtocols(v []*int32) *ListDataServiceApisResponseBodyDataApis {
	s.Protocols = v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetRegistrationDetails(v *ListDataServiceApisResponseBodyDataApisRegistrationDetails) *ListDataServiceApisResponseBodyDataApis {
	s.RegistrationDetails = v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetRequestMethod(v int32) *ListDataServiceApisResponseBodyDataApis {
	s.RequestMethod = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetResponseContentType(v int32) *ListDataServiceApisResponseBodyDataApis {
	s.ResponseContentType = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetScriptDetails(v *ListDataServiceApisResponseBodyDataApisScriptDetails) *ListDataServiceApisResponseBodyDataApis {
	s.ScriptDetails = v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetStatus(v int32) *ListDataServiceApisResponseBodyDataApis {
	s.Status = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetTenantId(v int64) *ListDataServiceApisResponseBodyDataApis {
	s.TenantId = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetTimeout(v int32) *ListDataServiceApisResponseBodyDataApis {
	s.Timeout = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetVisibleRange(v int32) *ListDataServiceApisResponseBodyDataApis {
	s.VisibleRange = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApis) SetWizardDetails(v *ListDataServiceApisResponseBodyDataApisWizardDetails) *ListDataServiceApisResponseBodyDataApis {
	s.WizardDetails = v
	return s
}

type ListDataServiceApisResponseBodyDataApisRegistrationDetails struct {
	FailedResultSample            *string                                                                                    `json:"FailedResultSample,omitempty" xml:"FailedResultSample,omitempty"`
	RegistrationErrorCodes        []*ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes        `json:"RegistrationErrorCodes,omitempty" xml:"RegistrationErrorCodes,omitempty" type:"Repeated"`
	RegistrationRequestParameters []*ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters `json:"RegistrationRequestParameters,omitempty" xml:"RegistrationRequestParameters,omitempty" type:"Repeated"`
	ServiceContentType            *int32                                                                                     `json:"ServiceContentType,omitempty" xml:"ServiceContentType,omitempty"`
	ServiceHost                   *string                                                                                    `json:"ServiceHost,omitempty" xml:"ServiceHost,omitempty"`
	ServicePath                   *string                                                                                    `json:"ServicePath,omitempty" xml:"ServicePath,omitempty"`
	ServiceRequestBodyDescription *string                                                                                    `json:"ServiceRequestBodyDescription,omitempty" xml:"ServiceRequestBodyDescription,omitempty"`
	SuccessfulResultSample        *string                                                                                    `json:"SuccessfulResultSample,omitempty" xml:"SuccessfulResultSample,omitempty"`
}

func (s ListDataServiceApisResponseBodyDataApisRegistrationDetails) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBodyDataApisRegistrationDetails) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetails) SetFailedResultSample(v string) *ListDataServiceApisResponseBodyDataApisRegistrationDetails {
	s.FailedResultSample = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetails) SetRegistrationErrorCodes(v []*ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes) *ListDataServiceApisResponseBodyDataApisRegistrationDetails {
	s.RegistrationErrorCodes = v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetails) SetRegistrationRequestParameters(v []*ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) *ListDataServiceApisResponseBodyDataApisRegistrationDetails {
	s.RegistrationRequestParameters = v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetails) SetServiceContentType(v int32) *ListDataServiceApisResponseBodyDataApisRegistrationDetails {
	s.ServiceContentType = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetails) SetServiceHost(v string) *ListDataServiceApisResponseBodyDataApisRegistrationDetails {
	s.ServiceHost = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetails) SetServicePath(v string) *ListDataServiceApisResponseBodyDataApisRegistrationDetails {
	s.ServicePath = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetails) SetServiceRequestBodyDescription(v string) *ListDataServiceApisResponseBodyDataApisRegistrationDetails {
	s.ServiceRequestBodyDescription = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetails) SetSuccessfulResultSample(v string) *ListDataServiceApisResponseBodyDataApisRegistrationDetails {
	s.SuccessfulResultSample = &v
	return s
}

type ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes struct {
	ErrorCode     *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage  *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorSolution *string `json:"ErrorSolution,omitempty" xml:"ErrorSolution,omitempty"`
}

func (s ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes) SetErrorCode(v string) *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes {
	s.ErrorCode = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes) SetErrorMessage(v string) *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes {
	s.ErrorMessage = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes) SetErrorSolution(v string) *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes {
	s.ErrorSolution = &v
	return s
}

type ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters struct {
	ColumnName           *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	DefaultValue         *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	IsRequiredParameter  *bool   `json:"IsRequiredParameter,omitempty" xml:"IsRequiredParameter,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterOperator    *int32  `json:"ParameterOperator,omitempty" xml:"ParameterOperator,omitempty"`
	ParameterPosition    *int32  `json:"ParameterPosition,omitempty" xml:"ParameterPosition,omitempty"`
}

func (s ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetColumnName(v string) *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.ColumnName = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetDefaultValue(v string) *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.DefaultValue = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetExampleValue(v string) *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.ExampleValue = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetIsRequiredParameter(v bool) *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.IsRequiredParameter = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetParameterDataType(v int32) *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.ParameterDataType = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetParameterDescription(v string) *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.ParameterDescription = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetParameterName(v string) *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.ParameterName = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetParameterOperator(v int32) *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.ParameterOperator = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetParameterPosition(v int32) *ListDataServiceApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.ParameterPosition = &v
	return s
}

type ListDataServiceApisResponseBodyDataApisScriptDetails struct {
	IsPagedResponse          *bool                                                                           `json:"IsPagedResponse,omitempty" xml:"IsPagedResponse,omitempty"`
	Script                   *string                                                                         `json:"Script,omitempty" xml:"Script,omitempty"`
	ScriptConnection         *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptConnection           `json:"ScriptConnection,omitempty" xml:"ScriptConnection,omitempty" type:"Struct"`
	ScriptRequestParameters  []*ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters  `json:"ScriptRequestParameters,omitempty" xml:"ScriptRequestParameters,omitempty" type:"Repeated"`
	ScriptResponseParameters []*ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters `json:"ScriptResponseParameters,omitempty" xml:"ScriptResponseParameters,omitempty" type:"Repeated"`
}

func (s ListDataServiceApisResponseBodyDataApisScriptDetails) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBodyDataApisScriptDetails) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetails) SetIsPagedResponse(v bool) *ListDataServiceApisResponseBodyDataApisScriptDetails {
	s.IsPagedResponse = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetails) SetScript(v string) *ListDataServiceApisResponseBodyDataApisScriptDetails {
	s.Script = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetails) SetScriptConnection(v *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptConnection) *ListDataServiceApisResponseBodyDataApisScriptDetails {
	s.ScriptConnection = v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetails) SetScriptRequestParameters(v []*ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters) *ListDataServiceApisResponseBodyDataApisScriptDetails {
	s.ScriptRequestParameters = v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetails) SetScriptResponseParameters(v []*ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters) *ListDataServiceApisResponseBodyDataApisScriptDetails {
	s.ScriptResponseParameters = v
	return s
}

type ListDataServiceApisResponseBodyDataApisScriptDetailsScriptConnection struct {
	ConnectionId *int64  `json:"ConnectionId,omitempty" xml:"ConnectionId,omitempty"`
	TableName    *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s ListDataServiceApisResponseBodyDataApisScriptDetailsScriptConnection) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBodyDataApisScriptDetailsScriptConnection) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptConnection) SetConnectionId(v int64) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptConnection {
	s.ConnectionId = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptConnection) SetTableName(v string) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptConnection {
	s.TableName = &v
	return s
}

type ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters struct {
	ColumnName           *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	DefaultValue         *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	IsRequiredParameter  *bool   `json:"IsRequiredParameter,omitempty" xml:"IsRequiredParameter,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterOperator    *int32  `json:"ParameterOperator,omitempty" xml:"ParameterOperator,omitempty"`
	ParameterPosition    *int32  `json:"ParameterPosition,omitempty" xml:"ParameterPosition,omitempty"`
}

func (s ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetColumnName(v string) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.ColumnName = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetDefaultValue(v string) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.DefaultValue = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetExampleValue(v string) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.ExampleValue = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetIsRequiredParameter(v bool) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.IsRequiredParameter = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetParameterDataType(v int32) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.ParameterDataType = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetParameterDescription(v string) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.ParameterDescription = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetParameterName(v string) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.ParameterName = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetParameterOperator(v int32) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.ParameterOperator = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetParameterPosition(v int32) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.ParameterPosition = &v
	return s
}

type ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters struct {
	ColumnName           *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
}

func (s ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters) SetColumnName(v string) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters {
	s.ColumnName = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters) SetExampleValue(v string) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters {
	s.ExampleValue = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters) SetParameterDataType(v int32) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters {
	s.ParameterDataType = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters) SetParameterDescription(v string) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters {
	s.ParameterDescription = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters) SetParameterName(v string) *ListDataServiceApisResponseBodyDataApisScriptDetailsScriptResponseParameters {
	s.ParameterName = &v
	return s
}

type ListDataServiceApisResponseBodyDataApisWizardDetails struct {
	IsPagedResponse          *bool                                                                           `json:"IsPagedResponse,omitempty" xml:"IsPagedResponse,omitempty"`
	WizardConnection         *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardConnection           `json:"WizardConnection,omitempty" xml:"WizardConnection,omitempty" type:"Struct"`
	WizardRequestParameters  []*ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters  `json:"WizardRequestParameters,omitempty" xml:"WizardRequestParameters,omitempty" type:"Repeated"`
	WizardResponseParameters []*ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters `json:"WizardResponseParameters,omitempty" xml:"WizardResponseParameters,omitempty" type:"Repeated"`
}

func (s ListDataServiceApisResponseBodyDataApisWizardDetails) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBodyDataApisWizardDetails) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetails) SetIsPagedResponse(v bool) *ListDataServiceApisResponseBodyDataApisWizardDetails {
	s.IsPagedResponse = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetails) SetWizardConnection(v *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardConnection) *ListDataServiceApisResponseBodyDataApisWizardDetails {
	s.WizardConnection = v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetails) SetWizardRequestParameters(v []*ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters) *ListDataServiceApisResponseBodyDataApisWizardDetails {
	s.WizardRequestParameters = v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetails) SetWizardResponseParameters(v []*ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters) *ListDataServiceApisResponseBodyDataApisWizardDetails {
	s.WizardResponseParameters = v
	return s
}

type ListDataServiceApisResponseBodyDataApisWizardDetailsWizardConnection struct {
	ConnectionId *int64  `json:"ConnectionId,omitempty" xml:"ConnectionId,omitempty"`
	TableName    *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s ListDataServiceApisResponseBodyDataApisWizardDetailsWizardConnection) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBodyDataApisWizardDetailsWizardConnection) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardConnection) SetConnectionId(v int64) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardConnection {
	s.ConnectionId = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardConnection) SetTableName(v string) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardConnection {
	s.TableName = &v
	return s
}

type ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters struct {
	ColumnName           *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	DefaultValue         *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	IsRequiredParameter  *bool   `json:"IsRequiredParameter,omitempty" xml:"IsRequiredParameter,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterOperator    *int32  `json:"ParameterOperator,omitempty" xml:"ParameterOperator,omitempty"`
	ParameterPosition    *int32  `json:"ParameterPosition,omitempty" xml:"ParameterPosition,omitempty"`
}

func (s ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetColumnName(v string) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.ColumnName = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetDefaultValue(v string) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.DefaultValue = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetExampleValue(v string) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.ExampleValue = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetIsRequiredParameter(v bool) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.IsRequiredParameter = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetParameterDataType(v int32) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.ParameterDataType = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetParameterDescription(v string) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.ParameterDescription = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetParameterName(v string) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.ParameterName = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetParameterOperator(v int32) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.ParameterOperator = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetParameterPosition(v int32) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.ParameterPosition = &v
	return s
}

type ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters struct {
	ColumnName           *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
}

func (s ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters) SetColumnName(v string) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters {
	s.ColumnName = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters) SetExampleValue(v string) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters {
	s.ExampleValue = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters) SetParameterDataType(v int32) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters {
	s.ParameterDataType = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters) SetParameterDescription(v string) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters {
	s.ParameterDescription = &v
	return s
}

func (s *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters) SetParameterName(v string) *ListDataServiceApisResponseBodyDataApisWizardDetailsWizardResponseParameters {
	s.ParameterName = &v
	return s
}

type ListDataServiceApisResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDataServiceApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDataServiceApisResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApisResponse) GoString() string {
	return s.String()
}

func (s *ListDataServiceApisResponse) SetHeaders(v map[string]*string) *ListDataServiceApisResponse {
	s.Headers = v
	return s
}

func (s *ListDataServiceApisResponse) SetBody(v *ListDataServiceApisResponseBody) *ListDataServiceApisResponse {
	s.Body = v
	return s
}

type ListDataServiceApplicationsRequest struct {
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectIdList *string `json:"ProjectIdList,omitempty" xml:"ProjectIdList,omitempty"`
	TenantId      *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListDataServiceApplicationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApplicationsRequest) GoString() string {
	return s.String()
}

func (s *ListDataServiceApplicationsRequest) SetPageNumber(v int32) *ListDataServiceApplicationsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataServiceApplicationsRequest) SetPageSize(v int32) *ListDataServiceApplicationsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataServiceApplicationsRequest) SetProjectIdList(v string) *ListDataServiceApplicationsRequest {
	s.ProjectIdList = &v
	return s
}

func (s *ListDataServiceApplicationsRequest) SetTenantId(v int64) *ListDataServiceApplicationsRequest {
	s.TenantId = &v
	return s
}

type ListDataServiceApplicationsResponseBody struct {
	Data           *ListDataServiceApplicationsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                       `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListDataServiceApplicationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApplicationsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataServiceApplicationsResponseBody) SetData(v *ListDataServiceApplicationsResponseBodyData) *ListDataServiceApplicationsResponseBody {
	s.Data = v
	return s
}

func (s *ListDataServiceApplicationsResponseBody) SetErrorCode(v string) *ListDataServiceApplicationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListDataServiceApplicationsResponseBody) SetErrorMessage(v string) *ListDataServiceApplicationsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListDataServiceApplicationsResponseBody) SetHttpStatusCode(v int32) *ListDataServiceApplicationsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDataServiceApplicationsResponseBody) SetRequestId(v string) *ListDataServiceApplicationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDataServiceApplicationsResponseBody) SetSuccess(v bool) *ListDataServiceApplicationsResponseBody {
	s.Success = &v
	return s
}

type ListDataServiceApplicationsResponseBodyData struct {
	Applications []*ListDataServiceApplicationsResponseBodyDataApplications `json:"Applications,omitempty" xml:"Applications,omitempty" type:"Repeated"`
	PageNumber   *int32                                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32                                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount   *int32                                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataServiceApplicationsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApplicationsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDataServiceApplicationsResponseBodyData) SetApplications(v []*ListDataServiceApplicationsResponseBodyDataApplications) *ListDataServiceApplicationsResponseBodyData {
	s.Applications = v
	return s
}

func (s *ListDataServiceApplicationsResponseBodyData) SetPageNumber(v int32) *ListDataServiceApplicationsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListDataServiceApplicationsResponseBodyData) SetPageSize(v int32) *ListDataServiceApplicationsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListDataServiceApplicationsResponseBodyData) SetTotalCount(v int32) *ListDataServiceApplicationsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListDataServiceApplicationsResponseBodyDataApplications struct {
	ApplicationId   *int64  `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	ApplicationName *string `json:"ApplicationName,omitempty" xml:"ApplicationName,omitempty"`
	ProjectId       *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListDataServiceApplicationsResponseBodyDataApplications) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApplicationsResponseBodyDataApplications) GoString() string {
	return s.String()
}

func (s *ListDataServiceApplicationsResponseBodyDataApplications) SetApplicationId(v int64) *ListDataServiceApplicationsResponseBodyDataApplications {
	s.ApplicationId = &v
	return s
}

func (s *ListDataServiceApplicationsResponseBodyDataApplications) SetApplicationName(v string) *ListDataServiceApplicationsResponseBodyDataApplications {
	s.ApplicationName = &v
	return s
}

func (s *ListDataServiceApplicationsResponseBodyDataApplications) SetProjectId(v int64) *ListDataServiceApplicationsResponseBodyDataApplications {
	s.ProjectId = &v
	return s
}

type ListDataServiceApplicationsResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDataServiceApplicationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDataServiceApplicationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceApplicationsResponse) GoString() string {
	return s.String()
}

func (s *ListDataServiceApplicationsResponse) SetHeaders(v map[string]*string) *ListDataServiceApplicationsResponse {
	s.Headers = v
	return s
}

func (s *ListDataServiceApplicationsResponse) SetBody(v *ListDataServiceApplicationsResponseBody) *ListDataServiceApplicationsResponse {
	s.Body = v
	return s
}

type ListDataServiceAuthorizedApisRequest struct {
	ApiNameKeyword *string `json:"ApiNameKeyword,omitempty" xml:"ApiNameKeyword,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId       *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListDataServiceAuthorizedApisRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceAuthorizedApisRequest) GoString() string {
	return s.String()
}

func (s *ListDataServiceAuthorizedApisRequest) SetApiNameKeyword(v string) *ListDataServiceAuthorizedApisRequest {
	s.ApiNameKeyword = &v
	return s
}

func (s *ListDataServiceAuthorizedApisRequest) SetPageNumber(v int32) *ListDataServiceAuthorizedApisRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataServiceAuthorizedApisRequest) SetPageSize(v int32) *ListDataServiceAuthorizedApisRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataServiceAuthorizedApisRequest) SetProjectId(v int64) *ListDataServiceAuthorizedApisRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataServiceAuthorizedApisRequest) SetTenantId(v int64) *ListDataServiceAuthorizedApisRequest {
	s.TenantId = &v
	return s
}

type ListDataServiceAuthorizedApisResponseBody struct {
	Data           *ListDataServiceAuthorizedApisResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                                        `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                         `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListDataServiceAuthorizedApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceAuthorizedApisResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataServiceAuthorizedApisResponseBody) SetData(v *ListDataServiceAuthorizedApisResponseBodyData) *ListDataServiceAuthorizedApisResponseBody {
	s.Data = v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBody) SetErrorCode(v string) *ListDataServiceAuthorizedApisResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBody) SetErrorMessage(v string) *ListDataServiceAuthorizedApisResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBody) SetHttpStatusCode(v int32) *ListDataServiceAuthorizedApisResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBody) SetRequestId(v string) *ListDataServiceAuthorizedApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBody) SetSuccess(v bool) *ListDataServiceAuthorizedApisResponseBody {
	s.Success = &v
	return s
}

type ListDataServiceAuthorizedApisResponseBodyData struct {
	ApiAuthorizedList []*ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList `json:"ApiAuthorizedList,omitempty" xml:"ApiAuthorizedList,omitempty" type:"Repeated"`
	PageNumber        *int32                                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32                                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount        *int32                                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataServiceAuthorizedApisResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceAuthorizedApisResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDataServiceAuthorizedApisResponseBodyData) SetApiAuthorizedList(v []*ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) *ListDataServiceAuthorizedApisResponseBodyData {
	s.ApiAuthorizedList = v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyData) SetPageNumber(v int32) *ListDataServiceAuthorizedApisResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyData) SetPageSize(v int32) *ListDataServiceAuthorizedApisResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyData) SetTotalCount(v int32) *ListDataServiceAuthorizedApisResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList struct {
	ApiId            *int64  `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName          *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiPath          *string `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	ApiStatus        *int32  `json:"ApiStatus,omitempty" xml:"ApiStatus,omitempty"`
	CreatedTime      *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	CreatorId        *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	GrantCreatedTime *string `json:"GrantCreatedTime,omitempty" xml:"GrantCreatedTime,omitempty"`
	GrantEndTime     *string `json:"GrantEndTime,omitempty" xml:"GrantEndTime,omitempty"`
	GrantOperatorId  *string `json:"GrantOperatorId,omitempty" xml:"GrantOperatorId,omitempty"`
	GroupId          *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModifiedTime     *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	ProjectId        *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId         *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) GoString() string {
	return s.String()
}

func (s *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) SetApiId(v int64) *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList {
	s.ApiId = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) SetApiName(v string) *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList {
	s.ApiName = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) SetApiPath(v string) *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList {
	s.ApiPath = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) SetApiStatus(v int32) *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList {
	s.ApiStatus = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) SetCreatedTime(v string) *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList {
	s.CreatedTime = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) SetCreatorId(v string) *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList {
	s.CreatorId = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) SetGrantCreatedTime(v string) *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList {
	s.GrantCreatedTime = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) SetGrantEndTime(v string) *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList {
	s.GrantEndTime = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) SetGrantOperatorId(v string) *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList {
	s.GrantOperatorId = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) SetGroupId(v string) *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList {
	s.GroupId = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) SetModifiedTime(v string) *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList {
	s.ModifiedTime = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) SetProjectId(v int64) *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList {
	s.ProjectId = &v
	return s
}

func (s *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList) SetTenantId(v int64) *ListDataServiceAuthorizedApisResponseBodyDataApiAuthorizedList {
	s.TenantId = &v
	return s
}

type ListDataServiceAuthorizedApisResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDataServiceAuthorizedApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDataServiceAuthorizedApisResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceAuthorizedApisResponse) GoString() string {
	return s.String()
}

func (s *ListDataServiceAuthorizedApisResponse) SetHeaders(v map[string]*string) *ListDataServiceAuthorizedApisResponse {
	s.Headers = v
	return s
}

func (s *ListDataServiceAuthorizedApisResponse) SetBody(v *ListDataServiceAuthorizedApisResponseBody) *ListDataServiceAuthorizedApisResponse {
	s.Body = v
	return s
}

type ListDataServiceFoldersRequest struct {
	FolderNameKeyword *string `json:"FolderNameKeyword,omitempty" xml:"FolderNameKeyword,omitempty"`
	GroupId           *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId          *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListDataServiceFoldersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceFoldersRequest) GoString() string {
	return s.String()
}

func (s *ListDataServiceFoldersRequest) SetFolderNameKeyword(v string) *ListDataServiceFoldersRequest {
	s.FolderNameKeyword = &v
	return s
}

func (s *ListDataServiceFoldersRequest) SetGroupId(v string) *ListDataServiceFoldersRequest {
	s.GroupId = &v
	return s
}

func (s *ListDataServiceFoldersRequest) SetPageNumber(v int32) *ListDataServiceFoldersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataServiceFoldersRequest) SetPageSize(v int32) *ListDataServiceFoldersRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataServiceFoldersRequest) SetProjectId(v int64) *ListDataServiceFoldersRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataServiceFoldersRequest) SetTenantId(v int64) *ListDataServiceFoldersRequest {
	s.TenantId = &v
	return s
}

type ListDataServiceFoldersResponseBody struct {
	FolderPagingResult *ListDataServiceFoldersResponseBodyFolderPagingResult `json:"FolderPagingResult,omitempty" xml:"FolderPagingResult,omitempty" type:"Struct"`
	RequestId          *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDataServiceFoldersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceFoldersResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataServiceFoldersResponseBody) SetFolderPagingResult(v *ListDataServiceFoldersResponseBodyFolderPagingResult) *ListDataServiceFoldersResponseBody {
	s.FolderPagingResult = v
	return s
}

func (s *ListDataServiceFoldersResponseBody) SetRequestId(v string) *ListDataServiceFoldersResponseBody {
	s.RequestId = &v
	return s
}

type ListDataServiceFoldersResponseBodyFolderPagingResult struct {
	Folders    []*ListDataServiceFoldersResponseBodyFolderPagingResultFolders `json:"Folders,omitempty" xml:"Folders,omitempty" type:"Repeated"`
	PageNumber *int32                                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                         `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataServiceFoldersResponseBodyFolderPagingResult) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceFoldersResponseBodyFolderPagingResult) GoString() string {
	return s.String()
}

func (s *ListDataServiceFoldersResponseBodyFolderPagingResult) SetFolders(v []*ListDataServiceFoldersResponseBodyFolderPagingResultFolders) *ListDataServiceFoldersResponseBodyFolderPagingResult {
	s.Folders = v
	return s
}

func (s *ListDataServiceFoldersResponseBodyFolderPagingResult) SetPageNumber(v int32) *ListDataServiceFoldersResponseBodyFolderPagingResult {
	s.PageNumber = &v
	return s
}

func (s *ListDataServiceFoldersResponseBodyFolderPagingResult) SetPageSize(v int32) *ListDataServiceFoldersResponseBodyFolderPagingResult {
	s.PageSize = &v
	return s
}

func (s *ListDataServiceFoldersResponseBodyFolderPagingResult) SetTotalCount(v int32) *ListDataServiceFoldersResponseBodyFolderPagingResult {
	s.TotalCount = &v
	return s
}

type ListDataServiceFoldersResponseBodyFolderPagingResultFolders struct {
	CreatedTime  *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	FolderId     *int64  `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	FolderName   *string `json:"FolderName,omitempty" xml:"FolderName,omitempty"`
	GroupId      *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	ParentId     *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ProjectId    *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId     *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListDataServiceFoldersResponseBodyFolderPagingResultFolders) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceFoldersResponseBodyFolderPagingResultFolders) GoString() string {
	return s.String()
}

func (s *ListDataServiceFoldersResponseBodyFolderPagingResultFolders) SetCreatedTime(v string) *ListDataServiceFoldersResponseBodyFolderPagingResultFolders {
	s.CreatedTime = &v
	return s
}

func (s *ListDataServiceFoldersResponseBodyFolderPagingResultFolders) SetFolderId(v int64) *ListDataServiceFoldersResponseBodyFolderPagingResultFolders {
	s.FolderId = &v
	return s
}

func (s *ListDataServiceFoldersResponseBodyFolderPagingResultFolders) SetFolderName(v string) *ListDataServiceFoldersResponseBodyFolderPagingResultFolders {
	s.FolderName = &v
	return s
}

func (s *ListDataServiceFoldersResponseBodyFolderPagingResultFolders) SetGroupId(v string) *ListDataServiceFoldersResponseBodyFolderPagingResultFolders {
	s.GroupId = &v
	return s
}

func (s *ListDataServiceFoldersResponseBodyFolderPagingResultFolders) SetModifiedTime(v string) *ListDataServiceFoldersResponseBodyFolderPagingResultFolders {
	s.ModifiedTime = &v
	return s
}

func (s *ListDataServiceFoldersResponseBodyFolderPagingResultFolders) SetParentId(v int64) *ListDataServiceFoldersResponseBodyFolderPagingResultFolders {
	s.ParentId = &v
	return s
}

func (s *ListDataServiceFoldersResponseBodyFolderPagingResultFolders) SetProjectId(v int64) *ListDataServiceFoldersResponseBodyFolderPagingResultFolders {
	s.ProjectId = &v
	return s
}

func (s *ListDataServiceFoldersResponseBodyFolderPagingResultFolders) SetTenantId(v int64) *ListDataServiceFoldersResponseBodyFolderPagingResultFolders {
	s.TenantId = &v
	return s
}

type ListDataServiceFoldersResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDataServiceFoldersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDataServiceFoldersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceFoldersResponse) GoString() string {
	return s.String()
}

func (s *ListDataServiceFoldersResponse) SetHeaders(v map[string]*string) *ListDataServiceFoldersResponse {
	s.Headers = v
	return s
}

func (s *ListDataServiceFoldersResponse) SetBody(v *ListDataServiceFoldersResponseBody) *ListDataServiceFoldersResponse {
	s.Body = v
	return s
}

type ListDataServiceGroupsRequest struct {
	GroupNameKeyword *string `json:"GroupNameKeyword,omitempty" xml:"GroupNameKeyword,omitempty"`
	PageNumber       *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId        *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId         *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListDataServiceGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListDataServiceGroupsRequest) SetGroupNameKeyword(v string) *ListDataServiceGroupsRequest {
	s.GroupNameKeyword = &v
	return s
}

func (s *ListDataServiceGroupsRequest) SetPageNumber(v int32) *ListDataServiceGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataServiceGroupsRequest) SetPageSize(v int32) *ListDataServiceGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataServiceGroupsRequest) SetProjectId(v int64) *ListDataServiceGroupsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataServiceGroupsRequest) SetTenantId(v int64) *ListDataServiceGroupsRequest {
	s.TenantId = &v
	return s
}

type ListDataServiceGroupsResponseBody struct {
	GroupPagingResult *ListDataServiceGroupsResponseBodyGroupPagingResult `json:"GroupPagingResult,omitempty" xml:"GroupPagingResult,omitempty" type:"Struct"`
	RequestId         *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDataServiceGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataServiceGroupsResponseBody) SetGroupPagingResult(v *ListDataServiceGroupsResponseBodyGroupPagingResult) *ListDataServiceGroupsResponseBody {
	s.GroupPagingResult = v
	return s
}

func (s *ListDataServiceGroupsResponseBody) SetRequestId(v string) *ListDataServiceGroupsResponseBody {
	s.RequestId = &v
	return s
}

type ListDataServiceGroupsResponseBodyGroupPagingResult struct {
	Groups     []*ListDataServiceGroupsResponseBodyGroupPagingResultGroups `json:"Groups,omitempty" xml:"Groups,omitempty" type:"Repeated"`
	PageNumber *int32                                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataServiceGroupsResponseBodyGroupPagingResult) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceGroupsResponseBodyGroupPagingResult) GoString() string {
	return s.String()
}

func (s *ListDataServiceGroupsResponseBodyGroupPagingResult) SetGroups(v []*ListDataServiceGroupsResponseBodyGroupPagingResultGroups) *ListDataServiceGroupsResponseBodyGroupPagingResult {
	s.Groups = v
	return s
}

func (s *ListDataServiceGroupsResponseBodyGroupPagingResult) SetPageNumber(v int32) *ListDataServiceGroupsResponseBodyGroupPagingResult {
	s.PageNumber = &v
	return s
}

func (s *ListDataServiceGroupsResponseBodyGroupPagingResult) SetPageSize(v int32) *ListDataServiceGroupsResponseBodyGroupPagingResult {
	s.PageSize = &v
	return s
}

func (s *ListDataServiceGroupsResponseBodyGroupPagingResult) SetTotalCount(v int32) *ListDataServiceGroupsResponseBodyGroupPagingResult {
	s.TotalCount = &v
	return s
}

type ListDataServiceGroupsResponseBodyGroupPagingResultGroups struct {
	ApiGatewayGroupId *string `json:"ApiGatewayGroupId,omitempty" xml:"ApiGatewayGroupId,omitempty"`
	CreatedTime       *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	CreatorId         *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId           *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName         *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	ModifiedTime      *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId          *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListDataServiceGroupsResponseBodyGroupPagingResultGroups) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceGroupsResponseBodyGroupPagingResultGroups) GoString() string {
	return s.String()
}

func (s *ListDataServiceGroupsResponseBodyGroupPagingResultGroups) SetApiGatewayGroupId(v string) *ListDataServiceGroupsResponseBodyGroupPagingResultGroups {
	s.ApiGatewayGroupId = &v
	return s
}

func (s *ListDataServiceGroupsResponseBodyGroupPagingResultGroups) SetCreatedTime(v string) *ListDataServiceGroupsResponseBodyGroupPagingResultGroups {
	s.CreatedTime = &v
	return s
}

func (s *ListDataServiceGroupsResponseBodyGroupPagingResultGroups) SetCreatorId(v string) *ListDataServiceGroupsResponseBodyGroupPagingResultGroups {
	s.CreatorId = &v
	return s
}

func (s *ListDataServiceGroupsResponseBodyGroupPagingResultGroups) SetDescription(v string) *ListDataServiceGroupsResponseBodyGroupPagingResultGroups {
	s.Description = &v
	return s
}

func (s *ListDataServiceGroupsResponseBodyGroupPagingResultGroups) SetGroupId(v string) *ListDataServiceGroupsResponseBodyGroupPagingResultGroups {
	s.GroupId = &v
	return s
}

func (s *ListDataServiceGroupsResponseBodyGroupPagingResultGroups) SetGroupName(v string) *ListDataServiceGroupsResponseBodyGroupPagingResultGroups {
	s.GroupName = &v
	return s
}

func (s *ListDataServiceGroupsResponseBodyGroupPagingResultGroups) SetModifiedTime(v string) *ListDataServiceGroupsResponseBodyGroupPagingResultGroups {
	s.ModifiedTime = &v
	return s
}

func (s *ListDataServiceGroupsResponseBodyGroupPagingResultGroups) SetProjectId(v int64) *ListDataServiceGroupsResponseBodyGroupPagingResultGroups {
	s.ProjectId = &v
	return s
}

func (s *ListDataServiceGroupsResponseBodyGroupPagingResultGroups) SetTenantId(v int64) *ListDataServiceGroupsResponseBodyGroupPagingResultGroups {
	s.TenantId = &v
	return s
}

type ListDataServiceGroupsResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDataServiceGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDataServiceGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataServiceGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListDataServiceGroupsResponse) SetHeaders(v map[string]*string) *ListDataServiceGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListDataServiceGroupsResponse) SetBody(v *ListDataServiceGroupsResponseBody) *ListDataServiceGroupsResponse {
	s.Body = v
	return s
}

type ListDataServicePublishedApisRequest struct {
	ApiNameKeyword *string `json:"ApiNameKeyword,omitempty" xml:"ApiNameKeyword,omitempty"`
	ApiPathKeyword *string `json:"ApiPathKeyword,omitempty" xml:"ApiPathKeyword,omitempty"`
	CreatorId      *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId       *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListDataServicePublishedApisRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisRequest) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisRequest) SetApiNameKeyword(v string) *ListDataServicePublishedApisRequest {
	s.ApiNameKeyword = &v
	return s
}

func (s *ListDataServicePublishedApisRequest) SetApiPathKeyword(v string) *ListDataServicePublishedApisRequest {
	s.ApiPathKeyword = &v
	return s
}

func (s *ListDataServicePublishedApisRequest) SetCreatorId(v string) *ListDataServicePublishedApisRequest {
	s.CreatorId = &v
	return s
}

func (s *ListDataServicePublishedApisRequest) SetPageNumber(v int32) *ListDataServicePublishedApisRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataServicePublishedApisRequest) SetPageSize(v int32) *ListDataServicePublishedApisRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataServicePublishedApisRequest) SetProjectId(v int64) *ListDataServicePublishedApisRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataServicePublishedApisRequest) SetTenantId(v int64) *ListDataServicePublishedApisRequest {
	s.TenantId = &v
	return s
}

type ListDataServicePublishedApisResponseBody struct {
	Data           *ListDataServicePublishedApisResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                                       `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                        `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListDataServicePublishedApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBody) SetData(v *ListDataServicePublishedApisResponseBodyData) *ListDataServicePublishedApisResponseBody {
	s.Data = v
	return s
}

func (s *ListDataServicePublishedApisResponseBody) SetErrorCode(v string) *ListDataServicePublishedApisResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBody) SetErrorMessage(v string) *ListDataServicePublishedApisResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBody) SetHttpStatusCode(v int32) *ListDataServicePublishedApisResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBody) SetRequestId(v string) *ListDataServicePublishedApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBody) SetSuccess(v bool) *ListDataServicePublishedApisResponseBody {
	s.Success = &v
	return s
}

type ListDataServicePublishedApisResponseBodyData struct {
	Apis       []*ListDataServicePublishedApisResponseBodyDataApis `json:"Apis,omitempty" xml:"Apis,omitempty" type:"Repeated"`
	PageNumber *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataServicePublishedApisResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyData) SetApis(v []*ListDataServicePublishedApisResponseBodyDataApis) *ListDataServicePublishedApisResponseBodyData {
	s.Apis = v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyData) SetPageNumber(v int32) *ListDataServicePublishedApisResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyData) SetPageSize(v int32) *ListDataServicePublishedApisResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyData) SetTotalCount(v int32) *ListDataServicePublishedApisResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApis struct {
	ApiId               *int64                                                               `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiMode             *int32                                                               `json:"ApiMode,omitempty" xml:"ApiMode,omitempty"`
	ApiName             *string                                                              `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiPath             *string                                                              `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	CreatedTime         *string                                                              `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	CreatorId           *string                                                              `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	Description         *string                                                              `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId             *string                                                              `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModifiedTime        *string                                                              `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	OperatorId          *string                                                              `json:"OperatorId,omitempty" xml:"OperatorId,omitempty"`
	ProjectId           *int64                                                               `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Protocols           []*int32                                                             `json:"Protocols,omitempty" xml:"Protocols,omitempty" type:"Repeated"`
	RegistrationDetails *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails `json:"RegistrationDetails,omitempty" xml:"RegistrationDetails,omitempty" type:"Struct"`
	RequestMethod       *int32                                                               `json:"RequestMethod,omitempty" xml:"RequestMethod,omitempty"`
	ResponseContentType *int32                                                               `json:"ResponseContentType,omitempty" xml:"ResponseContentType,omitempty"`
	ScriptDetails       *ListDataServicePublishedApisResponseBodyDataApisScriptDetails       `json:"ScriptDetails,omitempty" xml:"ScriptDetails,omitempty" type:"Struct"`
	Status              *int32                                                               `json:"Status,omitempty" xml:"Status,omitempty"`
	TenantId            *int64                                                               `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Timeout             *int32                                                               `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	VisibleRange        *int32                                                               `json:"VisibleRange,omitempty" xml:"VisibleRange,omitempty"`
	WizardDetails       *ListDataServicePublishedApisResponseBodyDataApisWizardDetails       `json:"WizardDetails,omitempty" xml:"WizardDetails,omitempty" type:"Struct"`
}

func (s ListDataServicePublishedApisResponseBodyDataApis) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApis) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetApiId(v int64) *ListDataServicePublishedApisResponseBodyDataApis {
	s.ApiId = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetApiMode(v int32) *ListDataServicePublishedApisResponseBodyDataApis {
	s.ApiMode = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetApiName(v string) *ListDataServicePublishedApisResponseBodyDataApis {
	s.ApiName = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetApiPath(v string) *ListDataServicePublishedApisResponseBodyDataApis {
	s.ApiPath = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetCreatedTime(v string) *ListDataServicePublishedApisResponseBodyDataApis {
	s.CreatedTime = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetCreatorId(v string) *ListDataServicePublishedApisResponseBodyDataApis {
	s.CreatorId = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetDescription(v string) *ListDataServicePublishedApisResponseBodyDataApis {
	s.Description = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetGroupId(v string) *ListDataServicePublishedApisResponseBodyDataApis {
	s.GroupId = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetModifiedTime(v string) *ListDataServicePublishedApisResponseBodyDataApis {
	s.ModifiedTime = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetOperatorId(v string) *ListDataServicePublishedApisResponseBodyDataApis {
	s.OperatorId = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetProjectId(v int64) *ListDataServicePublishedApisResponseBodyDataApis {
	s.ProjectId = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetProtocols(v []*int32) *ListDataServicePublishedApisResponseBodyDataApis {
	s.Protocols = v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetRegistrationDetails(v *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails) *ListDataServicePublishedApisResponseBodyDataApis {
	s.RegistrationDetails = v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetRequestMethod(v int32) *ListDataServicePublishedApisResponseBodyDataApis {
	s.RequestMethod = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetResponseContentType(v int32) *ListDataServicePublishedApisResponseBodyDataApis {
	s.ResponseContentType = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetScriptDetails(v *ListDataServicePublishedApisResponseBodyDataApisScriptDetails) *ListDataServicePublishedApisResponseBodyDataApis {
	s.ScriptDetails = v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetStatus(v int32) *ListDataServicePublishedApisResponseBodyDataApis {
	s.Status = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetTenantId(v int64) *ListDataServicePublishedApisResponseBodyDataApis {
	s.TenantId = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetTimeout(v int32) *ListDataServicePublishedApisResponseBodyDataApis {
	s.Timeout = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetVisibleRange(v int32) *ListDataServicePublishedApisResponseBodyDataApis {
	s.VisibleRange = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApis) SetWizardDetails(v *ListDataServicePublishedApisResponseBodyDataApisWizardDetails) *ListDataServicePublishedApisResponseBodyDataApis {
	s.WizardDetails = v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails struct {
	FailedResultSample            *string                                                                                             `json:"FailedResultSample,omitempty" xml:"FailedResultSample,omitempty"`
	RegistrationErrorCodes        []*ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes        `json:"RegistrationErrorCodes,omitempty" xml:"RegistrationErrorCodes,omitempty" type:"Repeated"`
	RegistrationRequestParameters []*ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters `json:"RegistrationRequestParameters,omitempty" xml:"RegistrationRequestParameters,omitempty" type:"Repeated"`
	ServiceContentType            *int32                                                                                              `json:"ServiceContentType,omitempty" xml:"ServiceContentType,omitempty"`
	ServiceHost                   *string                                                                                             `json:"ServiceHost,omitempty" xml:"ServiceHost,omitempty"`
	ServicePath                   *string                                                                                             `json:"ServicePath,omitempty" xml:"ServicePath,omitempty"`
	ServiceRequestBodyDescription *string                                                                                             `json:"ServiceRequestBodyDescription,omitempty" xml:"ServiceRequestBodyDescription,omitempty"`
	SuccessfulResultSample        *string                                                                                             `json:"SuccessfulResultSample,omitempty" xml:"SuccessfulResultSample,omitempty"`
}

func (s ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails) SetFailedResultSample(v string) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails {
	s.FailedResultSample = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails) SetRegistrationErrorCodes(v []*ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails {
	s.RegistrationErrorCodes = v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails) SetRegistrationRequestParameters(v []*ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails {
	s.RegistrationRequestParameters = v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails) SetServiceContentType(v int32) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails {
	s.ServiceContentType = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails) SetServiceHost(v string) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails {
	s.ServiceHost = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails) SetServicePath(v string) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails {
	s.ServicePath = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails) SetServiceRequestBodyDescription(v string) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails {
	s.ServiceRequestBodyDescription = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails) SetSuccessfulResultSample(v string) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetails {
	s.SuccessfulResultSample = &v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes struct {
	ErrorCode     *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage  *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorSolution *string `json:"ErrorSolution,omitempty" xml:"ErrorSolution,omitempty"`
}

func (s ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes) SetErrorCode(v string) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes {
	s.ErrorCode = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes) SetErrorMessage(v string) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes {
	s.ErrorMessage = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes) SetErrorSolution(v string) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationErrorCodes {
	s.ErrorSolution = &v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters struct {
	DefaultValue         *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	IsRequiredParameter  *bool   `json:"IsRequiredParameter,omitempty" xml:"IsRequiredParameter,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterOperator    *int32  `json:"ParameterOperator,omitempty" xml:"ParameterOperator,omitempty"`
	ParameterPosition    *int32  `json:"ParameterPosition,omitempty" xml:"ParameterPosition,omitempty"`
}

func (s ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetDefaultValue(v string) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.DefaultValue = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetExampleValue(v string) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.ExampleValue = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetIsRequiredParameter(v bool) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.IsRequiredParameter = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetParameterDataType(v int32) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.ParameterDataType = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetParameterDescription(v string) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.ParameterDescription = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetParameterName(v string) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.ParameterName = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetParameterOperator(v int32) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.ParameterOperator = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters) SetParameterPosition(v int32) *ListDataServicePublishedApisResponseBodyDataApisRegistrationDetailsRegistrationRequestParameters {
	s.ParameterPosition = &v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApisScriptDetails struct {
	FailedResultSample       *string                                                                                  `json:"FailedResultSample,omitempty" xml:"FailedResultSample,omitempty"`
	IsPagedResponse          *bool                                                                                    `json:"IsPagedResponse,omitempty" xml:"IsPagedResponse,omitempty"`
	Script                   *string                                                                                  `json:"Script,omitempty" xml:"Script,omitempty"`
	ScriptConnection         *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptConnection           `json:"ScriptConnection,omitempty" xml:"ScriptConnection,omitempty" type:"Struct"`
	ScriptErrorCodes         []*ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptErrorCodes         `json:"ScriptErrorCodes,omitempty" xml:"ScriptErrorCodes,omitempty" type:"Repeated"`
	ScriptRequestParameters  []*ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters  `json:"ScriptRequestParameters,omitempty" xml:"ScriptRequestParameters,omitempty" type:"Repeated"`
	ScriptResponseParameters []*ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptResponseParameters `json:"ScriptResponseParameters,omitempty" xml:"ScriptResponseParameters,omitempty" type:"Repeated"`
	SuccessfulResultSample   *string                                                                                  `json:"SuccessfulResultSample,omitempty" xml:"SuccessfulResultSample,omitempty"`
}

func (s ListDataServicePublishedApisResponseBodyDataApisScriptDetails) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApisScriptDetails) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetails) SetFailedResultSample(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetails {
	s.FailedResultSample = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetails) SetIsPagedResponse(v bool) *ListDataServicePublishedApisResponseBodyDataApisScriptDetails {
	s.IsPagedResponse = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetails) SetScript(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetails {
	s.Script = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetails) SetScriptConnection(v *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptConnection) *ListDataServicePublishedApisResponseBodyDataApisScriptDetails {
	s.ScriptConnection = v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetails) SetScriptErrorCodes(v []*ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptErrorCodes) *ListDataServicePublishedApisResponseBodyDataApisScriptDetails {
	s.ScriptErrorCodes = v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetails) SetScriptRequestParameters(v []*ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters) *ListDataServicePublishedApisResponseBodyDataApisScriptDetails {
	s.ScriptRequestParameters = v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetails) SetScriptResponseParameters(v []*ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptResponseParameters) *ListDataServicePublishedApisResponseBodyDataApisScriptDetails {
	s.ScriptResponseParameters = v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetails) SetSuccessfulResultSample(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetails {
	s.SuccessfulResultSample = &v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptConnection struct {
	ConnectionId *int64  `json:"ConnectionId,omitempty" xml:"ConnectionId,omitempty"`
	TableName    *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptConnection) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptConnection) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptConnection) SetConnectionId(v int64) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptConnection {
	s.ConnectionId = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptConnection) SetTableName(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptConnection {
	s.TableName = &v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptErrorCodes struct {
	ErrorCode     *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage  *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorSolution *string `json:"ErrorSolution,omitempty" xml:"ErrorSolution,omitempty"`
}

func (s ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptErrorCodes) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptErrorCodes) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptErrorCodes) SetErrorCode(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptErrorCodes {
	s.ErrorCode = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptErrorCodes) SetErrorMessage(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptErrorCodes {
	s.ErrorMessage = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptErrorCodes) SetErrorSolution(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptErrorCodes {
	s.ErrorSolution = &v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters struct {
	DefaultValue         *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	IsRequiredParameter  *bool   `json:"IsRequiredParameter,omitempty" xml:"IsRequiredParameter,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterOperator    *int32  `json:"ParameterOperator,omitempty" xml:"ParameterOperator,omitempty"`
	ParameterPosition    *int32  `json:"ParameterPosition,omitempty" xml:"ParameterPosition,omitempty"`
}

func (s ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetDefaultValue(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.DefaultValue = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetExampleValue(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.ExampleValue = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetIsRequiredParameter(v bool) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.IsRequiredParameter = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetParameterDataType(v int32) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.ParameterDataType = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetParameterDescription(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.ParameterDescription = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetParameterName(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.ParameterName = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetParameterOperator(v int32) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.ParameterOperator = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters) SetParameterPosition(v int32) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptRequestParameters {
	s.ParameterPosition = &v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptResponseParameters struct {
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
}

func (s ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptResponseParameters) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptResponseParameters) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptResponseParameters) SetExampleValue(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptResponseParameters {
	s.ExampleValue = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptResponseParameters) SetParameterDataType(v int32) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptResponseParameters {
	s.ParameterDataType = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptResponseParameters) SetParameterDescription(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptResponseParameters {
	s.ParameterDescription = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptResponseParameters) SetParameterName(v string) *ListDataServicePublishedApisResponseBodyDataApisScriptDetailsScriptResponseParameters {
	s.ParameterName = &v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApisWizardDetails struct {
	FailedResultSample       *string                                                                                  `json:"FailedResultSample,omitempty" xml:"FailedResultSample,omitempty"`
	IsPagedResponse          *bool                                                                                    `json:"IsPagedResponse,omitempty" xml:"IsPagedResponse,omitempty"`
	SuccessfulResultSample   *string                                                                                  `json:"SuccessfulResultSample,omitempty" xml:"SuccessfulResultSample,omitempty"`
	WizardConnection         *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardConnection           `json:"WizardConnection,omitempty" xml:"WizardConnection,omitempty" type:"Struct"`
	WizardErrorCodes         []*ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardErrorCodes         `json:"WizardErrorCodes,omitempty" xml:"WizardErrorCodes,omitempty" type:"Repeated"`
	WizardRequestParameters  []*ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters  `json:"WizardRequestParameters,omitempty" xml:"WizardRequestParameters,omitempty" type:"Repeated"`
	WizardResponseParameters []*ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardResponseParameters `json:"WizardResponseParameters,omitempty" xml:"WizardResponseParameters,omitempty" type:"Repeated"`
}

func (s ListDataServicePublishedApisResponseBodyDataApisWizardDetails) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApisWizardDetails) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetails) SetFailedResultSample(v string) *ListDataServicePublishedApisResponseBodyDataApisWizardDetails {
	s.FailedResultSample = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetails) SetIsPagedResponse(v bool) *ListDataServicePublishedApisResponseBodyDataApisWizardDetails {
	s.IsPagedResponse = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetails) SetSuccessfulResultSample(v string) *ListDataServicePublishedApisResponseBodyDataApisWizardDetails {
	s.SuccessfulResultSample = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetails) SetWizardConnection(v *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardConnection) *ListDataServicePublishedApisResponseBodyDataApisWizardDetails {
	s.WizardConnection = v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetails) SetWizardErrorCodes(v []*ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardErrorCodes) *ListDataServicePublishedApisResponseBodyDataApisWizardDetails {
	s.WizardErrorCodes = v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetails) SetWizardRequestParameters(v []*ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters) *ListDataServicePublishedApisResponseBodyDataApisWizardDetails {
	s.WizardRequestParameters = v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetails) SetWizardResponseParameters(v []*ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardResponseParameters) *ListDataServicePublishedApisResponseBodyDataApisWizardDetails {
	s.WizardResponseParameters = v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardConnection struct {
	ConnectionId *int64  `json:"ConnectionId,omitempty" xml:"ConnectionId,omitempty"`
	TableName    *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardConnection) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardConnection) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardConnection) SetConnectionId(v int64) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardConnection {
	s.ConnectionId = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardConnection) SetTableName(v string) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardConnection {
	s.TableName = &v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardErrorCodes struct {
	ErrorCode     *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage  *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorSolution *string `json:"ErrorSolution,omitempty" xml:"ErrorSolution,omitempty"`
}

func (s ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardErrorCodes) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardErrorCodes) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardErrorCodes) SetErrorCode(v string) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardErrorCodes {
	s.ErrorCode = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardErrorCodes) SetErrorMessage(v string) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardErrorCodes {
	s.ErrorMessage = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardErrorCodes) SetErrorSolution(v string) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardErrorCodes {
	s.ErrorSolution = &v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters struct {
	DefaultValue         *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	IsRequiredParameter  *bool   `json:"IsRequiredParameter,omitempty" xml:"IsRequiredParameter,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterOperator    *int32  `json:"ParameterOperator,omitempty" xml:"ParameterOperator,omitempty"`
	ParameterPosition    *int32  `json:"ParameterPosition,omitempty" xml:"ParameterPosition,omitempty"`
}

func (s ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetDefaultValue(v string) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.DefaultValue = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetExampleValue(v string) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.ExampleValue = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetIsRequiredParameter(v bool) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.IsRequiredParameter = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetParameterDataType(v int32) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.ParameterDataType = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetParameterDescription(v string) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.ParameterDescription = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetParameterName(v string) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.ParameterName = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetParameterOperator(v int32) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.ParameterOperator = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters) SetParameterPosition(v int32) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardRequestParameters {
	s.ParameterPosition = &v
	return s
}

type ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardResponseParameters struct {
	ExampleValue         *string `json:"ExampleValue,omitempty" xml:"ExampleValue,omitempty"`
	ParameterDataType    *int32  `json:"ParameterDataType,omitempty" xml:"ParameterDataType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
}

func (s ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardResponseParameters) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardResponseParameters) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardResponseParameters) SetExampleValue(v string) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardResponseParameters {
	s.ExampleValue = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardResponseParameters) SetParameterDataType(v int32) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardResponseParameters {
	s.ParameterDataType = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardResponseParameters) SetParameterDescription(v string) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardResponseParameters {
	s.ParameterDescription = &v
	return s
}

func (s *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardResponseParameters) SetParameterName(v string) *ListDataServicePublishedApisResponseBodyDataApisWizardDetailsWizardResponseParameters {
	s.ParameterName = &v
	return s
}

type ListDataServicePublishedApisResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDataServicePublishedApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDataServicePublishedApisResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataServicePublishedApisResponse) GoString() string {
	return s.String()
}

func (s *ListDataServicePublishedApisResponse) SetHeaders(v map[string]*string) *ListDataServicePublishedApisResponse {
	s.Headers = v
	return s
}

func (s *ListDataServicePublishedApisResponse) SetBody(v *ListDataServicePublishedApisResponseBody) *ListDataServicePublishedApisResponse {
	s.Body = v
	return s
}

type ListDataSourcesRequest struct {
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	EnvType        *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	SubType        *string `json:"SubType,omitempty" xml:"SubType,omitempty"`
}

func (s ListDataSourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourcesRequest) GoString() string {
	return s.String()
}

func (s *ListDataSourcesRequest) SetDataSourceType(v string) *ListDataSourcesRequest {
	s.DataSourceType = &v
	return s
}

func (s *ListDataSourcesRequest) SetEnvType(v int32) *ListDataSourcesRequest {
	s.EnvType = &v
	return s
}

func (s *ListDataSourcesRequest) SetName(v string) *ListDataSourcesRequest {
	s.Name = &v
	return s
}

func (s *ListDataSourcesRequest) SetPageNumber(v int32) *ListDataSourcesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataSourcesRequest) SetPageSize(v int32) *ListDataSourcesRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataSourcesRequest) SetProjectId(v int64) *ListDataSourcesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataSourcesRequest) SetStatus(v string) *ListDataSourcesRequest {
	s.Status = &v
	return s
}

func (s *ListDataSourcesRequest) SetSubType(v string) *ListDataSourcesRequest {
	s.SubType = &v
	return s
}

type ListDataSourcesResponseBody struct {
	Data           *ListDataSourcesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListDataSourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataSourcesResponseBody) SetData(v *ListDataSourcesResponseBodyData) *ListDataSourcesResponseBody {
	s.Data = v
	return s
}

func (s *ListDataSourcesResponseBody) SetHttpStatusCode(v int32) *ListDataSourcesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDataSourcesResponseBody) SetRequestId(v string) *ListDataSourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDataSourcesResponseBody) SetSuccess(v bool) *ListDataSourcesResponseBody {
	s.Success = &v
	return s
}

type ListDataSourcesResponseBodyData struct {
	DataSources []*ListDataSourcesResponseBodyDataDataSources `json:"DataSources,omitempty" xml:"DataSources,omitempty" type:"Repeated"`
	PageNumber  *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataSourcesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourcesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDataSourcesResponseBodyData) SetDataSources(v []*ListDataSourcesResponseBodyDataDataSources) *ListDataSourcesResponseBodyData {
	s.DataSources = v
	return s
}

func (s *ListDataSourcesResponseBodyData) SetPageNumber(v int32) *ListDataSourcesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListDataSourcesResponseBodyData) SetPageSize(v int32) *ListDataSourcesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListDataSourcesResponseBodyData) SetTotalCount(v int32) *ListDataSourcesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListDataSourcesResponseBodyDataDataSources struct {
	BindingCalcEngineId *int32  `json:"BindingCalcEngineId,omitempty" xml:"BindingCalcEngineId,omitempty"`
	ConnectStatus       *int32  `json:"ConnectStatus,omitempty" xml:"ConnectStatus,omitempty"`
	Content             *string `json:"Content,omitempty" xml:"Content,omitempty"`
	DataSourceType      *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	DefaultEngine       *bool   `json:"DefaultEngine,omitempty" xml:"DefaultEngine,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnvType             *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	GmtCreate           *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified         *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id                  *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name                *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Operator            *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	ProjectId           *int32  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Sequence            *int32  `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
	Shared              *bool   `json:"Shared,omitempty" xml:"Shared,omitempty"`
	Status              *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	SubType             *string `json:"SubType,omitempty" xml:"SubType,omitempty"`
	TenantId            *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListDataSourcesResponseBodyDataDataSources) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourcesResponseBodyDataDataSources) GoString() string {
	return s.String()
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetBindingCalcEngineId(v int32) *ListDataSourcesResponseBodyDataDataSources {
	s.BindingCalcEngineId = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetConnectStatus(v int32) *ListDataSourcesResponseBodyDataDataSources {
	s.ConnectStatus = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetContent(v string) *ListDataSourcesResponseBodyDataDataSources {
	s.Content = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetDataSourceType(v string) *ListDataSourcesResponseBodyDataDataSources {
	s.DataSourceType = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetDefaultEngine(v bool) *ListDataSourcesResponseBodyDataDataSources {
	s.DefaultEngine = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetDescription(v string) *ListDataSourcesResponseBodyDataDataSources {
	s.Description = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetEnvType(v int32) *ListDataSourcesResponseBodyDataDataSources {
	s.EnvType = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetGmtCreate(v string) *ListDataSourcesResponseBodyDataDataSources {
	s.GmtCreate = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetGmtModified(v string) *ListDataSourcesResponseBodyDataDataSources {
	s.GmtModified = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetId(v int32) *ListDataSourcesResponseBodyDataDataSources {
	s.Id = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetName(v string) *ListDataSourcesResponseBodyDataDataSources {
	s.Name = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetOperator(v string) *ListDataSourcesResponseBodyDataDataSources {
	s.Operator = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetProjectId(v int32) *ListDataSourcesResponseBodyDataDataSources {
	s.ProjectId = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetSequence(v int32) *ListDataSourcesResponseBodyDataDataSources {
	s.Sequence = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetShared(v bool) *ListDataSourcesResponseBodyDataDataSources {
	s.Shared = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetStatus(v int32) *ListDataSourcesResponseBodyDataDataSources {
	s.Status = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetSubType(v string) *ListDataSourcesResponseBodyDataDataSources {
	s.SubType = &v
	return s
}

func (s *ListDataSourcesResponseBodyDataDataSources) SetTenantId(v int64) *ListDataSourcesResponseBodyDataDataSources {
	s.TenantId = &v
	return s
}

type ListDataSourcesResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDataSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDataSourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourcesResponse) GoString() string {
	return s.String()
}

func (s *ListDataSourcesResponse) SetHeaders(v map[string]*string) *ListDataSourcesResponse {
	s.Headers = v
	return s
}

func (s *ListDataSourcesResponse) SetBody(v *ListDataSourcesResponseBody) *ListDataSourcesResponse {
	s.Body = v
	return s
}

type ListDeploymentsRequest struct {
	Creator           *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	EndCreateTime     *int64  `json:"EndCreateTime,omitempty" xml:"EndCreateTime,omitempty"`
	EndExecuteTime    *int64  `json:"EndExecuteTime,omitempty" xml:"EndExecuteTime,omitempty"`
	Executor          *string `json:"Executor,omitempty" xml:"Executor,omitempty"`
	Keyword           *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	Status            *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDeploymentsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentsRequest) GoString() string {
	return s.String()
}

func (s *ListDeploymentsRequest) SetCreator(v string) *ListDeploymentsRequest {
	s.Creator = &v
	return s
}

func (s *ListDeploymentsRequest) SetEndCreateTime(v int64) *ListDeploymentsRequest {
	s.EndCreateTime = &v
	return s
}

func (s *ListDeploymentsRequest) SetEndExecuteTime(v int64) *ListDeploymentsRequest {
	s.EndExecuteTime = &v
	return s
}

func (s *ListDeploymentsRequest) SetExecutor(v string) *ListDeploymentsRequest {
	s.Executor = &v
	return s
}

func (s *ListDeploymentsRequest) SetKeyword(v string) *ListDeploymentsRequest {
	s.Keyword = &v
	return s
}

func (s *ListDeploymentsRequest) SetPageNumber(v int32) *ListDeploymentsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDeploymentsRequest) SetPageSize(v int32) *ListDeploymentsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDeploymentsRequest) SetProjectId(v int64) *ListDeploymentsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDeploymentsRequest) SetProjectIdentifier(v string) *ListDeploymentsRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *ListDeploymentsRequest) SetStatus(v int32) *ListDeploymentsRequest {
	s.Status = &v
	return s
}

type ListDeploymentsResponseBody struct {
	Data *ListDeploymentsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDeploymentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDeploymentsResponseBody) SetData(v *ListDeploymentsResponseBodyData) *ListDeploymentsResponseBody {
	s.Data = v
	return s
}

func (s *ListDeploymentsResponseBody) SetRequestId(v string) *ListDeploymentsResponseBody {
	s.RequestId = &v
	return s
}

type ListDeploymentsResponseBodyData struct {
	Deployments []*ListDeploymentsResponseBodyDataDeployments `json:"Deployments,omitempty" xml:"Deployments,omitempty" type:"Repeated"`
	PageNumber  *int64                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int64                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount  *int64                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDeploymentsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDeploymentsResponseBodyData) SetDeployments(v []*ListDeploymentsResponseBodyDataDeployments) *ListDeploymentsResponseBodyData {
	s.Deployments = v
	return s
}

func (s *ListDeploymentsResponseBodyData) SetPageNumber(v int64) *ListDeploymentsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListDeploymentsResponseBodyData) SetPageSize(v int64) *ListDeploymentsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListDeploymentsResponseBodyData) SetTotalCount(v int64) *ListDeploymentsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListDeploymentsResponseBodyDataDeployments struct {
	CreateTime   *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator      *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ExecuteTime  *int64  `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	Executor     *string `json:"Executor,omitempty" xml:"Executor,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDeploymentsResponseBodyDataDeployments) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentsResponseBodyDataDeployments) GoString() string {
	return s.String()
}

func (s *ListDeploymentsResponseBodyDataDeployments) SetCreateTime(v int64) *ListDeploymentsResponseBodyDataDeployments {
	s.CreateTime = &v
	return s
}

func (s *ListDeploymentsResponseBodyDataDeployments) SetCreator(v string) *ListDeploymentsResponseBodyDataDeployments {
	s.Creator = &v
	return s
}

func (s *ListDeploymentsResponseBodyDataDeployments) SetErrorMessage(v string) *ListDeploymentsResponseBodyDataDeployments {
	s.ErrorMessage = &v
	return s
}

func (s *ListDeploymentsResponseBodyDataDeployments) SetExecuteTime(v int64) *ListDeploymentsResponseBodyDataDeployments {
	s.ExecuteTime = &v
	return s
}

func (s *ListDeploymentsResponseBodyDataDeployments) SetExecutor(v string) *ListDeploymentsResponseBodyDataDeployments {
	s.Executor = &v
	return s
}

func (s *ListDeploymentsResponseBodyDataDeployments) SetId(v int64) *ListDeploymentsResponseBodyDataDeployments {
	s.Id = &v
	return s
}

func (s *ListDeploymentsResponseBodyDataDeployments) SetName(v string) *ListDeploymentsResponseBodyDataDeployments {
	s.Name = &v
	return s
}

func (s *ListDeploymentsResponseBodyDataDeployments) SetStatus(v int32) *ListDeploymentsResponseBodyDataDeployments {
	s.Status = &v
	return s
}

type ListDeploymentsResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDeploymentsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDeploymentsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentsResponse) GoString() string {
	return s.String()
}

func (s *ListDeploymentsResponse) SetHeaders(v map[string]*string) *ListDeploymentsResponse {
	s.Headers = v
	return s
}

func (s *ListDeploymentsResponse) SetBody(v *ListDeploymentsResponseBody) *ListDeploymentsResponse {
	s.Body = v
	return s
}

type ListFileTypeRequest struct {
	Keyword           *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	Locale            *string `json:"Locale,omitempty" xml:"Locale,omitempty"`
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s ListFileTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFileTypeRequest) GoString() string {
	return s.String()
}

func (s *ListFileTypeRequest) SetKeyword(v string) *ListFileTypeRequest {
	s.Keyword = &v
	return s
}

func (s *ListFileTypeRequest) SetLocale(v string) *ListFileTypeRequest {
	s.Locale = &v
	return s
}

func (s *ListFileTypeRequest) SetPageNumber(v int32) *ListFileTypeRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFileTypeRequest) SetPageSize(v int32) *ListFileTypeRequest {
	s.PageSize = &v
	return s
}

func (s *ListFileTypeRequest) SetProjectId(v int64) *ListFileTypeRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFileTypeRequest) SetProjectIdentifier(v string) *ListFileTypeRequest {
	s.ProjectIdentifier = &v
	return s
}

type ListFileTypeResponseBody struct {
	NodeTypeInfoList *ListFileTypeResponseBodyNodeTypeInfoList `json:"NodeTypeInfoList,omitempty" xml:"NodeTypeInfoList,omitempty" type:"Struct"`
	RequestId        *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListFileTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFileTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ListFileTypeResponseBody) SetNodeTypeInfoList(v *ListFileTypeResponseBodyNodeTypeInfoList) *ListFileTypeResponseBody {
	s.NodeTypeInfoList = v
	return s
}

func (s *ListFileTypeResponseBody) SetRequestId(v string) *ListFileTypeResponseBody {
	s.RequestId = &v
	return s
}

type ListFileTypeResponseBodyNodeTypeInfoList struct {
	NodeTypeInfo []*ListFileTypeResponseBodyNodeTypeInfoListNodeTypeInfo `json:"NodeTypeInfo,omitempty" xml:"NodeTypeInfo,omitempty" type:"Repeated"`
	PageNumber   *int32                                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32                                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount   *int32                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFileTypeResponseBodyNodeTypeInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListFileTypeResponseBodyNodeTypeInfoList) GoString() string {
	return s.String()
}

func (s *ListFileTypeResponseBodyNodeTypeInfoList) SetNodeTypeInfo(v []*ListFileTypeResponseBodyNodeTypeInfoListNodeTypeInfo) *ListFileTypeResponseBodyNodeTypeInfoList {
	s.NodeTypeInfo = v
	return s
}

func (s *ListFileTypeResponseBodyNodeTypeInfoList) SetPageNumber(v int32) *ListFileTypeResponseBodyNodeTypeInfoList {
	s.PageNumber = &v
	return s
}

func (s *ListFileTypeResponseBodyNodeTypeInfoList) SetPageSize(v int32) *ListFileTypeResponseBodyNodeTypeInfoList {
	s.PageSize = &v
	return s
}

func (s *ListFileTypeResponseBodyNodeTypeInfoList) SetTotalCount(v int32) *ListFileTypeResponseBodyNodeTypeInfoList {
	s.TotalCount = &v
	return s
}

type ListFileTypeResponseBodyNodeTypeInfoListNodeTypeInfo struct {
	NodeType     *int32  `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	NodeTypeName *string `json:"NodeTypeName,omitempty" xml:"NodeTypeName,omitempty"`
}

func (s ListFileTypeResponseBodyNodeTypeInfoListNodeTypeInfo) String() string {
	return tea.Prettify(s)
}

func (s ListFileTypeResponseBodyNodeTypeInfoListNodeTypeInfo) GoString() string {
	return s.String()
}

func (s *ListFileTypeResponseBodyNodeTypeInfoListNodeTypeInfo) SetNodeType(v int32) *ListFileTypeResponseBodyNodeTypeInfoListNodeTypeInfo {
	s.NodeType = &v
	return s
}

func (s *ListFileTypeResponseBodyNodeTypeInfoListNodeTypeInfo) SetNodeTypeName(v string) *ListFileTypeResponseBodyNodeTypeInfoListNodeTypeInfo {
	s.NodeTypeName = &v
	return s
}

type ListFileTypeResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFileTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFileTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFileTypeResponse) GoString() string {
	return s.String()
}

func (s *ListFileTypeResponse) SetHeaders(v map[string]*string) *ListFileTypeResponse {
	s.Headers = v
	return s
}

func (s *ListFileTypeResponse) SetBody(v *ListFileTypeResponseBody) *ListFileTypeResponse {
	s.Body = v
	return s
}

type ListFileVersionsRequest struct {
	FileId            *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s ListFileVersionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFileVersionsRequest) GoString() string {
	return s.String()
}

func (s *ListFileVersionsRequest) SetFileId(v int64) *ListFileVersionsRequest {
	s.FileId = &v
	return s
}

func (s *ListFileVersionsRequest) SetPageNumber(v int32) *ListFileVersionsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFileVersionsRequest) SetPageSize(v int32) *ListFileVersionsRequest {
	s.PageSize = &v
	return s
}

func (s *ListFileVersionsRequest) SetProjectId(v int64) *ListFileVersionsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFileVersionsRequest) SetProjectIdentifier(v string) *ListFileVersionsRequest {
	s.ProjectIdentifier = &v
	return s
}

type ListFileVersionsResponseBody struct {
	Data           *ListFileVersionsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                           `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                            `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListFileVersionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFileVersionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListFileVersionsResponseBody) SetData(v *ListFileVersionsResponseBodyData) *ListFileVersionsResponseBody {
	s.Data = v
	return s
}

func (s *ListFileVersionsResponseBody) SetErrorCode(v string) *ListFileVersionsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListFileVersionsResponseBody) SetErrorMessage(v string) *ListFileVersionsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListFileVersionsResponseBody) SetHttpStatusCode(v int32) *ListFileVersionsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListFileVersionsResponseBody) SetRequestId(v string) *ListFileVersionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFileVersionsResponseBody) SetSuccess(v bool) *ListFileVersionsResponseBody {
	s.Success = &v
	return s
}

type ListFileVersionsResponseBodyData struct {
	FileVersions []*ListFileVersionsResponseBodyDataFileVersions `json:"FileVersions,omitempty" xml:"FileVersions,omitempty" type:"Repeated"`
	PageNumber   *int32                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount   *int32                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFileVersionsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListFileVersionsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListFileVersionsResponseBodyData) SetFileVersions(v []*ListFileVersionsResponseBodyDataFileVersions) *ListFileVersionsResponseBodyData {
	s.FileVersions = v
	return s
}

func (s *ListFileVersionsResponseBodyData) SetPageNumber(v int32) *ListFileVersionsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListFileVersionsResponseBodyData) SetPageSize(v int32) *ListFileVersionsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListFileVersionsResponseBodyData) SetTotalCount(v int32) *ListFileVersionsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListFileVersionsResponseBodyDataFileVersions struct {
	ChangeType          *string `json:"ChangeType,omitempty" xml:"ChangeType,omitempty"`
	Comment             *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CommitTime          *int64  `json:"CommitTime,omitempty" xml:"CommitTime,omitempty"`
	CommitUser          *string `json:"CommitUser,omitempty" xml:"CommitUser,omitempty"`
	FileContent         *string `json:"FileContent,omitempty" xml:"FileContent,omitempty"`
	FileName            *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FilePropertyContent *string `json:"FilePropertyContent,omitempty" xml:"FilePropertyContent,omitempty"`
	FileVersion         *int32  `json:"FileVersion,omitempty" xml:"FileVersion,omitempty"`
	IsCurrentProd       *bool   `json:"IsCurrentProd,omitempty" xml:"IsCurrentProd,omitempty"`
	NodeContent         *string `json:"NodeContent,omitempty" xml:"NodeContent,omitempty"`
	NodeId              *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	Status              *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UseType             *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s ListFileVersionsResponseBodyDataFileVersions) String() string {
	return tea.Prettify(s)
}

func (s ListFileVersionsResponseBodyDataFileVersions) GoString() string {
	return s.String()
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetChangeType(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.ChangeType = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetComment(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.Comment = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetCommitTime(v int64) *ListFileVersionsResponseBodyDataFileVersions {
	s.CommitTime = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetCommitUser(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.CommitUser = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetFileContent(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.FileContent = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetFileName(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.FileName = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetFilePropertyContent(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.FilePropertyContent = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetFileVersion(v int32) *ListFileVersionsResponseBodyDataFileVersions {
	s.FileVersion = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetIsCurrentProd(v bool) *ListFileVersionsResponseBodyDataFileVersions {
	s.IsCurrentProd = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetNodeContent(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.NodeContent = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetNodeId(v int64) *ListFileVersionsResponseBodyDataFileVersions {
	s.NodeId = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetStatus(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.Status = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetUseType(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.UseType = &v
	return s
}

type ListFileVersionsResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFileVersionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFileVersionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFileVersionsResponse) GoString() string {
	return s.String()
}

func (s *ListFileVersionsResponse) SetHeaders(v map[string]*string) *ListFileVersionsResponse {
	s.Headers = v
	return s
}

func (s *ListFileVersionsResponse) SetBody(v *ListFileVersionsResponseBody) *ListFileVersionsResponse {
	s.Body = v
	return s
}

type ListFilesRequest struct {
	FileFolderPath    *string `json:"FileFolderPath,omitempty" xml:"FileFolderPath,omitempty"`
	FileTypes         *string `json:"FileTypes,omitempty" xml:"FileTypes,omitempty"`
	Keyword           *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	NodeId            *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	Owner             *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	UseType           *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s ListFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFilesRequest) GoString() string {
	return s.String()
}

func (s *ListFilesRequest) SetFileFolderPath(v string) *ListFilesRequest {
	s.FileFolderPath = &v
	return s
}

func (s *ListFilesRequest) SetFileTypes(v string) *ListFilesRequest {
	s.FileTypes = &v
	return s
}

func (s *ListFilesRequest) SetKeyword(v string) *ListFilesRequest {
	s.Keyword = &v
	return s
}

func (s *ListFilesRequest) SetNodeId(v int64) *ListFilesRequest {
	s.NodeId = &v
	return s
}

func (s *ListFilesRequest) SetOwner(v string) *ListFilesRequest {
	s.Owner = &v
	return s
}

func (s *ListFilesRequest) SetPageNumber(v int32) *ListFilesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFilesRequest) SetPageSize(v int32) *ListFilesRequest {
	s.PageSize = &v
	return s
}

func (s *ListFilesRequest) SetProjectId(v int64) *ListFilesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFilesRequest) SetProjectIdentifier(v string) *ListFilesRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *ListFilesRequest) SetUseType(v string) *ListFilesRequest {
	s.UseType = &v
	return s
}

type ListFilesResponseBody struct {
	Data           *ListFilesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                     `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListFilesResponseBody) SetData(v *ListFilesResponseBodyData) *ListFilesResponseBody {
	s.Data = v
	return s
}

func (s *ListFilesResponseBody) SetErrorCode(v string) *ListFilesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListFilesResponseBody) SetErrorMessage(v string) *ListFilesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListFilesResponseBody) SetHttpStatusCode(v int32) *ListFilesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListFilesResponseBody) SetRequestId(v string) *ListFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFilesResponseBody) SetSuccess(v bool) *ListFilesResponseBody {
	s.Success = &v
	return s
}

type ListFilesResponseBodyData struct {
	Files      []*ListFilesResponseBodyDataFiles `json:"Files,omitempty" xml:"Files,omitempty" type:"Repeated"`
	PageNumber *int32                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFilesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListFilesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListFilesResponseBodyData) SetFiles(v []*ListFilesResponseBodyDataFiles) *ListFilesResponseBodyData {
	s.Files = v
	return s
}

func (s *ListFilesResponseBodyData) SetPageNumber(v int32) *ListFilesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListFilesResponseBodyData) SetPageSize(v int32) *ListFilesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListFilesResponseBodyData) SetTotalCount(v int32) *ListFilesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListFilesResponseBodyDataFiles struct {
	AutoParsing     *bool   `json:"AutoParsing,omitempty" xml:"AutoParsing,omitempty"`
	BizId           *int64  `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BusinessId      *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	CommitStatus    *int32  `json:"CommitStatus,omitempty" xml:"CommitStatus,omitempty"`
	ConnectionName  *string `json:"ConnectionName,omitempty" xml:"ConnectionName,omitempty"`
	Content         *string `json:"Content,omitempty" xml:"Content,omitempty"`
	CreateTime      *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreateUser      *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	CurrentVersion  *int32  `json:"CurrentVersion,omitempty" xml:"CurrentVersion,omitempty"`
	FileDescription *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	FileFolderId    *string `json:"FileFolderId,omitempty" xml:"FileFolderId,omitempty"`
	FileId          *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	FileName        *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FileType        *int32  `json:"FileType,omitempty" xml:"FileType,omitempty"`
	IsMaxCompute    *bool   `json:"IsMaxCompute,omitempty" xml:"IsMaxCompute,omitempty"`
	LastEditTime    *int64  `json:"LastEditTime,omitempty" xml:"LastEditTime,omitempty"`
	LastEditUser    *string `json:"LastEditUser,omitempty" xml:"LastEditUser,omitempty"`
	NodeId          *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	Owner           *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ParentId        *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	UseType         *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s ListFilesResponseBodyDataFiles) String() string {
	return tea.Prettify(s)
}

func (s ListFilesResponseBodyDataFiles) GoString() string {
	return s.String()
}

func (s *ListFilesResponseBodyDataFiles) SetAutoParsing(v bool) *ListFilesResponseBodyDataFiles {
	s.AutoParsing = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetBizId(v int64) *ListFilesResponseBodyDataFiles {
	s.BizId = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetBusinessId(v int64) *ListFilesResponseBodyDataFiles {
	s.BusinessId = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetCommitStatus(v int32) *ListFilesResponseBodyDataFiles {
	s.CommitStatus = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetConnectionName(v string) *ListFilesResponseBodyDataFiles {
	s.ConnectionName = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetContent(v string) *ListFilesResponseBodyDataFiles {
	s.Content = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetCreateTime(v int64) *ListFilesResponseBodyDataFiles {
	s.CreateTime = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetCreateUser(v string) *ListFilesResponseBodyDataFiles {
	s.CreateUser = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetCurrentVersion(v int32) *ListFilesResponseBodyDataFiles {
	s.CurrentVersion = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetFileDescription(v string) *ListFilesResponseBodyDataFiles {
	s.FileDescription = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetFileFolderId(v string) *ListFilesResponseBodyDataFiles {
	s.FileFolderId = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetFileId(v int64) *ListFilesResponseBodyDataFiles {
	s.FileId = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetFileName(v string) *ListFilesResponseBodyDataFiles {
	s.FileName = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetFileType(v int32) *ListFilesResponseBodyDataFiles {
	s.FileType = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetIsMaxCompute(v bool) *ListFilesResponseBodyDataFiles {
	s.IsMaxCompute = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetLastEditTime(v int64) *ListFilesResponseBodyDataFiles {
	s.LastEditTime = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetLastEditUser(v string) *ListFilesResponseBodyDataFiles {
	s.LastEditUser = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetNodeId(v int64) *ListFilesResponseBodyDataFiles {
	s.NodeId = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetOwner(v string) *ListFilesResponseBodyDataFiles {
	s.Owner = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetParentId(v int64) *ListFilesResponseBodyDataFiles {
	s.ParentId = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetUseType(v string) *ListFilesResponseBodyDataFiles {
	s.UseType = &v
	return s
}

type ListFilesResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFilesResponse) GoString() string {
	return s.String()
}

func (s *ListFilesResponse) SetHeaders(v map[string]*string) *ListFilesResponse {
	s.Headers = v
	return s
}

func (s *ListFilesResponse) SetBody(v *ListFilesResponseBody) *ListFilesResponse {
	s.Body = v
	return s
}

type ListFoldersRequest struct {
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ParentFolderPath  *string `json:"ParentFolderPath,omitempty" xml:"ParentFolderPath,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s ListFoldersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFoldersRequest) GoString() string {
	return s.String()
}

func (s *ListFoldersRequest) SetPageNumber(v int32) *ListFoldersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFoldersRequest) SetPageSize(v int32) *ListFoldersRequest {
	s.PageSize = &v
	return s
}

func (s *ListFoldersRequest) SetParentFolderPath(v string) *ListFoldersRequest {
	s.ParentFolderPath = &v
	return s
}

func (s *ListFoldersRequest) SetProjectId(v int64) *ListFoldersRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFoldersRequest) SetProjectIdentifier(v string) *ListFoldersRequest {
	s.ProjectIdentifier = &v
	return s
}

type ListFoldersResponseBody struct {
	Data           *ListFoldersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                       `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListFoldersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFoldersResponseBody) GoString() string {
	return s.String()
}

func (s *ListFoldersResponseBody) SetData(v *ListFoldersResponseBodyData) *ListFoldersResponseBody {
	s.Data = v
	return s
}

func (s *ListFoldersResponseBody) SetErrorCode(v string) *ListFoldersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListFoldersResponseBody) SetErrorMessage(v string) *ListFoldersResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListFoldersResponseBody) SetHttpStatusCode(v int32) *ListFoldersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListFoldersResponseBody) SetRequestId(v string) *ListFoldersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFoldersResponseBody) SetSuccess(v bool) *ListFoldersResponseBody {
	s.Success = &v
	return s
}

type ListFoldersResponseBodyData struct {
	Folders    []*ListFoldersResponseBodyDataFolders `json:"Folders,omitempty" xml:"Folders,omitempty" type:"Repeated"`
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFoldersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListFoldersResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListFoldersResponseBodyData) SetFolders(v []*ListFoldersResponseBodyDataFolders) *ListFoldersResponseBodyData {
	s.Folders = v
	return s
}

func (s *ListFoldersResponseBodyData) SetPageNumber(v int32) *ListFoldersResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListFoldersResponseBodyData) SetPageSize(v int32) *ListFoldersResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListFoldersResponseBodyData) SetTotalCount(v int32) *ListFoldersResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListFoldersResponseBodyDataFolders struct {
	FolderId   *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	FolderPath *string `json:"FolderPath,omitempty" xml:"FolderPath,omitempty"`
}

func (s ListFoldersResponseBodyDataFolders) String() string {
	return tea.Prettify(s)
}

func (s ListFoldersResponseBodyDataFolders) GoString() string {
	return s.String()
}

func (s *ListFoldersResponseBodyDataFolders) SetFolderId(v string) *ListFoldersResponseBodyDataFolders {
	s.FolderId = &v
	return s
}

func (s *ListFoldersResponseBodyDataFolders) SetFolderPath(v string) *ListFoldersResponseBodyDataFolders {
	s.FolderPath = &v
	return s
}

type ListFoldersResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFoldersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFoldersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFoldersResponse) GoString() string {
	return s.String()
}

func (s *ListFoldersResponse) SetHeaders(v map[string]*string) *ListFoldersResponse {
	s.Headers = v
	return s
}

func (s *ListFoldersResponse) SetBody(v *ListFoldersResponseBody) *ListFoldersResponse {
	s.Body = v
	return s
}

type ListInstanceAmountRequest struct {
	BeginDate *string `json:"BeginDate,omitempty" xml:"BeginDate,omitempty"`
	EndDate   *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListInstanceAmountRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInstanceAmountRequest) GoString() string {
	return s.String()
}

func (s *ListInstanceAmountRequest) SetBeginDate(v string) *ListInstanceAmountRequest {
	s.BeginDate = &v
	return s
}

func (s *ListInstanceAmountRequest) SetEndDate(v string) *ListInstanceAmountRequest {
	s.EndDate = &v
	return s
}

func (s *ListInstanceAmountRequest) SetProjectId(v int64) *ListInstanceAmountRequest {
	s.ProjectId = &v
	return s
}

type ListInstanceAmountResponseBody struct {
	InstanceCounts []*ListInstanceAmountResponseBodyInstanceCounts `json:"InstanceCounts,omitempty" xml:"InstanceCounts,omitempty" type:"Repeated"`
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListInstanceAmountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInstanceAmountResponseBody) GoString() string {
	return s.String()
}

func (s *ListInstanceAmountResponseBody) SetInstanceCounts(v []*ListInstanceAmountResponseBodyInstanceCounts) *ListInstanceAmountResponseBody {
	s.InstanceCounts = v
	return s
}

func (s *ListInstanceAmountResponseBody) SetRequestId(v string) *ListInstanceAmountResponseBody {
	s.RequestId = &v
	return s
}

type ListInstanceAmountResponseBodyInstanceCounts struct {
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	Date  *int64 `json:"Date,omitempty" xml:"Date,omitempty"`
}

func (s ListInstanceAmountResponseBodyInstanceCounts) String() string {
	return tea.Prettify(s)
}

func (s ListInstanceAmountResponseBodyInstanceCounts) GoString() string {
	return s.String()
}

func (s *ListInstanceAmountResponseBodyInstanceCounts) SetCount(v int32) *ListInstanceAmountResponseBodyInstanceCounts {
	s.Count = &v
	return s
}

func (s *ListInstanceAmountResponseBodyInstanceCounts) SetDate(v int64) *ListInstanceAmountResponseBodyInstanceCounts {
	s.Date = &v
	return s
}

type ListInstanceAmountResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListInstanceAmountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListInstanceAmountResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInstanceAmountResponse) GoString() string {
	return s.String()
}

func (s *ListInstanceAmountResponse) SetHeaders(v map[string]*string) *ListInstanceAmountResponse {
	s.Headers = v
	return s
}

func (s *ListInstanceAmountResponse) SetBody(v *ListInstanceAmountResponseBody) *ListInstanceAmountResponse {
	s.Body = v
	return s
}

type ListInstancesRequest struct {
	BeginBizdate *string `json:"BeginBizdate,omitempty" xml:"BeginBizdate,omitempty"`
	BizName      *string `json:"BizName,omitempty" xml:"BizName,omitempty"`
	Bizdate      *string `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	DagId        *int64  `json:"DagId,omitempty" xml:"DagId,omitempty"`
	EndBizdate   *string `json:"EndBizdate,omitempty" xml:"EndBizdate,omitempty"`
	NodeId       *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName     *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner        *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProgramType  *string `json:"ProgramType,omitempty" xml:"ProgramType,omitempty"`
	ProjectEnv   *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	ProjectId    *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListInstancesRequest) SetBeginBizdate(v string) *ListInstancesRequest {
	s.BeginBizdate = &v
	return s
}

func (s *ListInstancesRequest) SetBizName(v string) *ListInstancesRequest {
	s.BizName = &v
	return s
}

func (s *ListInstancesRequest) SetBizdate(v string) *ListInstancesRequest {
	s.Bizdate = &v
	return s
}

func (s *ListInstancesRequest) SetDagId(v int64) *ListInstancesRequest {
	s.DagId = &v
	return s
}

func (s *ListInstancesRequest) SetEndBizdate(v string) *ListInstancesRequest {
	s.EndBizdate = &v
	return s
}

func (s *ListInstancesRequest) SetNodeId(v int64) *ListInstancesRequest {
	s.NodeId = &v
	return s
}

func (s *ListInstancesRequest) SetNodeName(v string) *ListInstancesRequest {
	s.NodeName = &v
	return s
}

func (s *ListInstancesRequest) SetOwner(v string) *ListInstancesRequest {
	s.Owner = &v
	return s
}

func (s *ListInstancesRequest) SetPageNumber(v int32) *ListInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListInstancesRequest) SetPageSize(v int32) *ListInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *ListInstancesRequest) SetProgramType(v string) *ListInstancesRequest {
	s.ProgramType = &v
	return s
}

func (s *ListInstancesRequest) SetProjectEnv(v string) *ListInstancesRequest {
	s.ProjectEnv = &v
	return s
}

func (s *ListInstancesRequest) SetProjectId(v int64) *ListInstancesRequest {
	s.ProjectId = &v
	return s
}

type ListInstancesResponseBody struct {
	Data           *ListInstancesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                        `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                         `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBody) SetData(v *ListInstancesResponseBodyData) *ListInstancesResponseBody {
	s.Data = v
	return s
}

func (s *ListInstancesResponseBody) SetErrorCode(v string) *ListInstancesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListInstancesResponseBody) SetErrorMessage(v string) *ListInstancesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListInstancesResponseBody) SetHttpStatusCode(v int32) *ListInstancesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListInstancesResponseBody) SetRequestId(v string) *ListInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInstancesResponseBody) SetSuccess(v bool) *ListInstancesResponseBody {
	s.Success = &v
	return s
}

type ListInstancesResponseBodyData struct {
	Instances  []*ListInstancesResponseBodyDataInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	PageNumber *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListInstancesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyData) SetInstances(v []*ListInstancesResponseBodyDataInstances) *ListInstancesResponseBodyData {
	s.Instances = v
	return s
}

func (s *ListInstancesResponseBodyData) SetPageNumber(v int32) *ListInstancesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListInstancesResponseBodyData) SetPageSize(v int32) *ListInstancesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListInstancesResponseBodyData) SetTotalCount(v int32) *ListInstancesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListInstancesResponseBodyDataInstances struct {
	BaselineId        *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	BeginRunningTime  *int64  `json:"BeginRunningTime,omitempty" xml:"BeginRunningTime,omitempty"`
	BeginWaitResTime  *int64  `json:"BeginWaitResTime,omitempty" xml:"BeginWaitResTime,omitempty"`
	BeginWaitTimeTime *int64  `json:"BeginWaitTimeTime,omitempty" xml:"BeginWaitTimeTime,omitempty"`
	Bizdate           *int64  `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	BusinessId        *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	Connection        *string `json:"Connection,omitempty" xml:"Connection,omitempty"`
	CreateTime        *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreateUser        *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	CycTime           *int64  `json:"CycTime,omitempty" xml:"CycTime,omitempty"`
	DagId             *int64  `json:"DagId,omitempty" xml:"DagId,omitempty"`
	DagType           *string `json:"DagType,omitempty" xml:"DagType,omitempty"`
	DqcDescription    *string `json:"DqcDescription,omitempty" xml:"DqcDescription,omitempty"`
	DqcType           *int32  `json:"DqcType,omitempty" xml:"DqcType,omitempty"`
	ErrorMessage      *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	FinishTime        *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InstanceId        *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ModifyTime        *int64  `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	NodeId            *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName          *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	ParamValues       *string `json:"ParamValues,omitempty" xml:"ParamValues,omitempty"`
	Priority          *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	RelatedFlowId     *int64  `json:"RelatedFlowId,omitempty" xml:"RelatedFlowId,omitempty"`
	RepeatInterval    *int64  `json:"RepeatInterval,omitempty" xml:"RepeatInterval,omitempty"`
	Repeatability     *bool   `json:"Repeatability,omitempty" xml:"Repeatability,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskRerunTime     *int32  `json:"TaskRerunTime,omitempty" xml:"TaskRerunTime,omitempty"`
	TaskType          *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s ListInstancesResponseBodyDataInstances) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBodyDataInstances) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyDataInstances) SetBaselineId(v int64) *ListInstancesResponseBodyDataInstances {
	s.BaselineId = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetBeginRunningTime(v int64) *ListInstancesResponseBodyDataInstances {
	s.BeginRunningTime = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetBeginWaitResTime(v int64) *ListInstancesResponseBodyDataInstances {
	s.BeginWaitResTime = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetBeginWaitTimeTime(v int64) *ListInstancesResponseBodyDataInstances {
	s.BeginWaitTimeTime = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetBizdate(v int64) *ListInstancesResponseBodyDataInstances {
	s.Bizdate = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetBusinessId(v int64) *ListInstancesResponseBodyDataInstances {
	s.BusinessId = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetConnection(v string) *ListInstancesResponseBodyDataInstances {
	s.Connection = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetCreateTime(v int64) *ListInstancesResponseBodyDataInstances {
	s.CreateTime = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetCreateUser(v string) *ListInstancesResponseBodyDataInstances {
	s.CreateUser = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetCycTime(v int64) *ListInstancesResponseBodyDataInstances {
	s.CycTime = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetDagId(v int64) *ListInstancesResponseBodyDataInstances {
	s.DagId = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetDagType(v string) *ListInstancesResponseBodyDataInstances {
	s.DagType = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetDqcDescription(v string) *ListInstancesResponseBodyDataInstances {
	s.DqcDescription = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetDqcType(v int32) *ListInstancesResponseBodyDataInstances {
	s.DqcType = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetErrorMessage(v string) *ListInstancesResponseBodyDataInstances {
	s.ErrorMessage = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetFinishTime(v int64) *ListInstancesResponseBodyDataInstances {
	s.FinishTime = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetInstanceId(v int64) *ListInstancesResponseBodyDataInstances {
	s.InstanceId = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetModifyTime(v int64) *ListInstancesResponseBodyDataInstances {
	s.ModifyTime = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetNodeId(v int64) *ListInstancesResponseBodyDataInstances {
	s.NodeId = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetNodeName(v string) *ListInstancesResponseBodyDataInstances {
	s.NodeName = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetParamValues(v string) *ListInstancesResponseBodyDataInstances {
	s.ParamValues = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetPriority(v int32) *ListInstancesResponseBodyDataInstances {
	s.Priority = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetRelatedFlowId(v int64) *ListInstancesResponseBodyDataInstances {
	s.RelatedFlowId = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetRepeatInterval(v int64) *ListInstancesResponseBodyDataInstances {
	s.RepeatInterval = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetRepeatability(v bool) *ListInstancesResponseBodyDataInstances {
	s.Repeatability = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetStatus(v string) *ListInstancesResponseBodyDataInstances {
	s.Status = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetTaskRerunTime(v int32) *ListInstancesResponseBodyDataInstances {
	s.TaskRerunTime = &v
	return s
}

func (s *ListInstancesResponseBodyDataInstances) SetTaskType(v string) *ListInstancesResponseBodyDataInstances {
	s.TaskType = &v
	return s
}

type ListInstancesResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListInstancesResponse) SetHeaders(v map[string]*string) *ListInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListInstancesResponse) SetBody(v *ListInstancesResponseBody) *ListInstancesResponse {
	s.Body = v
	return s
}

type ListManualDagInstancesRequest struct {
	DagId       *string `json:"DagId,omitempty" xml:"DagId,omitempty"`
	ProjectEnv  *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
}

func (s ListManualDagInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListManualDagInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListManualDagInstancesRequest) SetDagId(v string) *ListManualDagInstancesRequest {
	s.DagId = &v
	return s
}

func (s *ListManualDagInstancesRequest) SetProjectEnv(v string) *ListManualDagInstancesRequest {
	s.ProjectEnv = &v
	return s
}

func (s *ListManualDagInstancesRequest) SetProjectName(v string) *ListManualDagInstancesRequest {
	s.ProjectName = &v
	return s
}

type ListManualDagInstancesResponseBody struct {
	Instances []*ListManualDagInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListManualDagInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListManualDagInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListManualDagInstancesResponseBody) SetInstances(v []*ListManualDagInstancesResponseBodyInstances) *ListManualDagInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *ListManualDagInstancesResponseBody) SetRequestId(v string) *ListManualDagInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ListManualDagInstancesResponseBodyInstances struct {
	BeginRunningTime  *int64  `json:"BeginRunningTime,omitempty" xml:"BeginRunningTime,omitempty"`
	BeginWaitResTime  *int64  `json:"BeginWaitResTime,omitempty" xml:"BeginWaitResTime,omitempty"`
	BeginWaitTimeTime *int64  `json:"BeginWaitTimeTime,omitempty" xml:"BeginWaitTimeTime,omitempty"`
	BizDate           *int64  `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	CreateTime        *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreateUser        *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	CycTime           *int64  `json:"CycTime,omitempty" xml:"CycTime,omitempty"`
	DagId             *int64  `json:"DagId,omitempty" xml:"DagId,omitempty"`
	DagType           *string `json:"DagType,omitempty" xml:"DagType,omitempty"`
	FinishTime        *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InstanceId        *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ModifyTime        *int64  `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	NodeId            *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName          *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	ParamValues       *string `json:"ParamValues,omitempty" xml:"ParamValues,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskType          *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s ListManualDagInstancesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s ListManualDagInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *ListManualDagInstancesResponseBodyInstances) SetBeginRunningTime(v int64) *ListManualDagInstancesResponseBodyInstances {
	s.BeginRunningTime = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetBeginWaitResTime(v int64) *ListManualDagInstancesResponseBodyInstances {
	s.BeginWaitResTime = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetBeginWaitTimeTime(v int64) *ListManualDagInstancesResponseBodyInstances {
	s.BeginWaitTimeTime = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetBizDate(v int64) *ListManualDagInstancesResponseBodyInstances {
	s.BizDate = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetCreateTime(v int64) *ListManualDagInstancesResponseBodyInstances {
	s.CreateTime = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetCreateUser(v string) *ListManualDagInstancesResponseBodyInstances {
	s.CreateUser = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetCycTime(v int64) *ListManualDagInstancesResponseBodyInstances {
	s.CycTime = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetDagId(v int64) *ListManualDagInstancesResponseBodyInstances {
	s.DagId = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetDagType(v string) *ListManualDagInstancesResponseBodyInstances {
	s.DagType = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetFinishTime(v int64) *ListManualDagInstancesResponseBodyInstances {
	s.FinishTime = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetInstanceId(v int64) *ListManualDagInstancesResponseBodyInstances {
	s.InstanceId = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetModifyTime(v int64) *ListManualDagInstancesResponseBodyInstances {
	s.ModifyTime = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetNodeId(v int64) *ListManualDagInstancesResponseBodyInstances {
	s.NodeId = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetNodeName(v string) *ListManualDagInstancesResponseBodyInstances {
	s.NodeName = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetParamValues(v string) *ListManualDagInstancesResponseBodyInstances {
	s.ParamValues = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetStatus(v string) *ListManualDagInstancesResponseBodyInstances {
	s.Status = &v
	return s
}

func (s *ListManualDagInstancesResponseBodyInstances) SetTaskType(v string) *ListManualDagInstancesResponseBodyInstances {
	s.TaskType = &v
	return s
}

type ListManualDagInstancesResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListManualDagInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListManualDagInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListManualDagInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListManualDagInstancesResponse) SetHeaders(v map[string]*string) *ListManualDagInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListManualDagInstancesResponse) SetBody(v *ListManualDagInstancesResponseBody) *ListManualDagInstancesResponse {
	s.Body = v
	return s
}

type ListMetaDBRequest struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	PageNum        *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListMetaDBRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMetaDBRequest) GoString() string {
	return s.String()
}

func (s *ListMetaDBRequest) SetClusterId(v string) *ListMetaDBRequest {
	s.ClusterId = &v
	return s
}

func (s *ListMetaDBRequest) SetDataSourceType(v string) *ListMetaDBRequest {
	s.DataSourceType = &v
	return s
}

func (s *ListMetaDBRequest) SetPageNum(v int32) *ListMetaDBRequest {
	s.PageNum = &v
	return s
}

func (s *ListMetaDBRequest) SetPageSize(v int32) *ListMetaDBRequest {
	s.PageSize = &v
	return s
}

func (s *ListMetaDBRequest) SetProjectId(v int64) *ListMetaDBRequest {
	s.ProjectId = &v
	return s
}

type ListMetaDBResponseBody struct {
	DatabaseInfo *ListMetaDBResponseBodyDatabaseInfo `json:"DatabaseInfo,omitempty" xml:"DatabaseInfo,omitempty" type:"Struct"`
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMetaDBResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMetaDBResponseBody) GoString() string {
	return s.String()
}

func (s *ListMetaDBResponseBody) SetDatabaseInfo(v *ListMetaDBResponseBodyDatabaseInfo) *ListMetaDBResponseBody {
	s.DatabaseInfo = v
	return s
}

func (s *ListMetaDBResponseBody) SetRequestId(v string) *ListMetaDBResponseBody {
	s.RequestId = &v
	return s
}

type ListMetaDBResponseBodyDatabaseInfo struct {
	DbList     []*ListMetaDBResponseBodyDatabaseInfoDbList `json:"DbList,omitempty" xml:"DbList,omitempty" type:"Repeated"`
	TotalCount *int64                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMetaDBResponseBodyDatabaseInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMetaDBResponseBodyDatabaseInfo) GoString() string {
	return s.String()
}

func (s *ListMetaDBResponseBodyDatabaseInfo) SetDbList(v []*ListMetaDBResponseBodyDatabaseInfoDbList) *ListMetaDBResponseBodyDatabaseInfo {
	s.DbList = v
	return s
}

func (s *ListMetaDBResponseBodyDatabaseInfo) SetTotalCount(v int64) *ListMetaDBResponseBodyDatabaseInfo {
	s.TotalCount = &v
	return s
}

type ListMetaDBResponseBodyDatabaseInfoDbList struct {
	CreateTimeStamp   *int64  `json:"CreateTimeStamp,omitempty" xml:"CreateTimeStamp,omitempty"`
	Location          *string `json:"Location,omitempty" xml:"Location,omitempty"`
	ModifiedTimeStamp *int64  `json:"ModifiedTimeStamp,omitempty" xml:"ModifiedTimeStamp,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId           *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Type              *string `json:"Type,omitempty" xml:"Type,omitempty"`
	UUID              *string `json:"UUID,omitempty" xml:"UUID,omitempty"`
}

func (s ListMetaDBResponseBodyDatabaseInfoDbList) String() string {
	return tea.Prettify(s)
}

func (s ListMetaDBResponseBodyDatabaseInfoDbList) GoString() string {
	return s.String()
}

func (s *ListMetaDBResponseBodyDatabaseInfoDbList) SetCreateTimeStamp(v int64) *ListMetaDBResponseBodyDatabaseInfoDbList {
	s.CreateTimeStamp = &v
	return s
}

func (s *ListMetaDBResponseBodyDatabaseInfoDbList) SetLocation(v string) *ListMetaDBResponseBodyDatabaseInfoDbList {
	s.Location = &v
	return s
}

func (s *ListMetaDBResponseBodyDatabaseInfoDbList) SetModifiedTimeStamp(v int64) *ListMetaDBResponseBodyDatabaseInfoDbList {
	s.ModifiedTimeStamp = &v
	return s
}

func (s *ListMetaDBResponseBodyDatabaseInfoDbList) SetName(v string) *ListMetaDBResponseBodyDatabaseInfoDbList {
	s.Name = &v
	return s
}

func (s *ListMetaDBResponseBodyDatabaseInfoDbList) SetOwnerId(v string) *ListMetaDBResponseBodyDatabaseInfoDbList {
	s.OwnerId = &v
	return s
}

func (s *ListMetaDBResponseBodyDatabaseInfoDbList) SetType(v string) *ListMetaDBResponseBodyDatabaseInfoDbList {
	s.Type = &v
	return s
}

func (s *ListMetaDBResponseBodyDatabaseInfoDbList) SetUUID(v string) *ListMetaDBResponseBodyDatabaseInfoDbList {
	s.UUID = &v
	return s
}

type ListMetaDBResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListMetaDBResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMetaDBResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMetaDBResponse) GoString() string {
	return s.String()
}

func (s *ListMetaDBResponse) SetHeaders(v map[string]*string) *ListMetaDBResponse {
	s.Headers = v
	return s
}

func (s *ListMetaDBResponse) SetBody(v *ListMetaDBResponseBody) *ListMetaDBResponse {
	s.Body = v
	return s
}

type ListNodeIORequest struct {
	IoType     *string `json:"IoType,omitempty" xml:"IoType,omitempty"`
	NodeId     *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s ListNodeIORequest) String() string {
	return tea.Prettify(s)
}

func (s ListNodeIORequest) GoString() string {
	return s.String()
}

func (s *ListNodeIORequest) SetIoType(v string) *ListNodeIORequest {
	s.IoType = &v
	return s
}

func (s *ListNodeIORequest) SetNodeId(v int64) *ListNodeIORequest {
	s.NodeId = &v
	return s
}

func (s *ListNodeIORequest) SetProjectEnv(v string) *ListNodeIORequest {
	s.ProjectEnv = &v
	return s
}

type ListNodeIOResponseBody struct {
	Data           []*ListNodeIOResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorCode      *string                       `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                        `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListNodeIOResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNodeIOResponseBody) GoString() string {
	return s.String()
}

func (s *ListNodeIOResponseBody) SetData(v []*ListNodeIOResponseBodyData) *ListNodeIOResponseBody {
	s.Data = v
	return s
}

func (s *ListNodeIOResponseBody) SetErrorCode(v string) *ListNodeIOResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListNodeIOResponseBody) SetErrorMessage(v string) *ListNodeIOResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListNodeIOResponseBody) SetHttpStatusCode(v int32) *ListNodeIOResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListNodeIOResponseBody) SetRequestId(v string) *ListNodeIOResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNodeIOResponseBody) SetSuccess(v bool) *ListNodeIOResponseBody {
	s.Success = &v
	return s
}

type ListNodeIOResponseBodyData struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	NodeId    *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s ListNodeIOResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListNodeIOResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListNodeIOResponseBodyData) SetData(v string) *ListNodeIOResponseBodyData {
	s.Data = &v
	return s
}

func (s *ListNodeIOResponseBodyData) SetNodeId(v int64) *ListNodeIOResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *ListNodeIOResponseBodyData) SetTableName(v string) *ListNodeIOResponseBodyData {
	s.TableName = &v
	return s
}

type ListNodeIOResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListNodeIOResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListNodeIOResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNodeIOResponse) GoString() string {
	return s.String()
}

func (s *ListNodeIOResponse) SetHeaders(v map[string]*string) *ListNodeIOResponse {
	s.Headers = v
	return s
}

func (s *ListNodeIOResponse) SetBody(v *ListNodeIOResponseBody) *ListNodeIOResponse {
	s.Body = v
	return s
}

type ListNodeInputOrOutputRequest struct {
	IoType     *string `json:"IoType,omitempty" xml:"IoType,omitempty"`
	NodeId     *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s ListNodeInputOrOutputRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNodeInputOrOutputRequest) GoString() string {
	return s.String()
}

func (s *ListNodeInputOrOutputRequest) SetIoType(v string) *ListNodeInputOrOutputRequest {
	s.IoType = &v
	return s
}

func (s *ListNodeInputOrOutputRequest) SetNodeId(v int64) *ListNodeInputOrOutputRequest {
	s.NodeId = &v
	return s
}

func (s *ListNodeInputOrOutputRequest) SetProjectEnv(v string) *ListNodeInputOrOutputRequest {
	s.ProjectEnv = &v
	return s
}

type ListNodeInputOrOutputResponseBody struct {
	Data           []*ListNodeInputOrOutputResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorCode      *string                                  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListNodeInputOrOutputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNodeInputOrOutputResponseBody) GoString() string {
	return s.String()
}

func (s *ListNodeInputOrOutputResponseBody) SetData(v []*ListNodeInputOrOutputResponseBodyData) *ListNodeInputOrOutputResponseBody {
	s.Data = v
	return s
}

func (s *ListNodeInputOrOutputResponseBody) SetErrorCode(v string) *ListNodeInputOrOutputResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListNodeInputOrOutputResponseBody) SetErrorMessage(v string) *ListNodeInputOrOutputResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListNodeInputOrOutputResponseBody) SetHttpStatusCode(v int32) *ListNodeInputOrOutputResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListNodeInputOrOutputResponseBody) SetRequestId(v string) *ListNodeInputOrOutputResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNodeInputOrOutputResponseBody) SetSuccess(v bool) *ListNodeInputOrOutputResponseBody {
	s.Success = &v
	return s
}

type ListNodeInputOrOutputResponseBodyData struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	NodeId    *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s ListNodeInputOrOutputResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListNodeInputOrOutputResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListNodeInputOrOutputResponseBodyData) SetData(v string) *ListNodeInputOrOutputResponseBodyData {
	s.Data = &v
	return s
}

func (s *ListNodeInputOrOutputResponseBodyData) SetNodeId(v int64) *ListNodeInputOrOutputResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *ListNodeInputOrOutputResponseBodyData) SetTableName(v string) *ListNodeInputOrOutputResponseBodyData {
	s.TableName = &v
	return s
}

type ListNodeInputOrOutputResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListNodeInputOrOutputResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListNodeInputOrOutputResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNodeInputOrOutputResponse) GoString() string {
	return s.String()
}

func (s *ListNodeInputOrOutputResponse) SetHeaders(v map[string]*string) *ListNodeInputOrOutputResponse {
	s.Headers = v
	return s
}

func (s *ListNodeInputOrOutputResponse) SetBody(v *ListNodeInputOrOutputResponseBody) *ListNodeInputOrOutputResponse {
	s.Body = v
	return s
}

type ListNodesRequest struct {
	BizName     *string `json:"BizName,omitempty" xml:"BizName,omitempty"`
	NodeName    *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner       *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PageNumber  *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProgramType *string `json:"ProgramType,omitempty" xml:"ProgramType,omitempty"`
	ProjectEnv  *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListNodesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNodesRequest) GoString() string {
	return s.String()
}

func (s *ListNodesRequest) SetBizName(v string) *ListNodesRequest {
	s.BizName = &v
	return s
}

func (s *ListNodesRequest) SetNodeName(v string) *ListNodesRequest {
	s.NodeName = &v
	return s
}

func (s *ListNodesRequest) SetOwner(v string) *ListNodesRequest {
	s.Owner = &v
	return s
}

func (s *ListNodesRequest) SetPageNumber(v int32) *ListNodesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListNodesRequest) SetPageSize(v int32) *ListNodesRequest {
	s.PageSize = &v
	return s
}

func (s *ListNodesRequest) SetProgramType(v string) *ListNodesRequest {
	s.ProgramType = &v
	return s
}

func (s *ListNodesRequest) SetProjectEnv(v string) *ListNodesRequest {
	s.ProjectEnv = &v
	return s
}

func (s *ListNodesRequest) SetProjectId(v int64) *ListNodesRequest {
	s.ProjectId = &v
	return s
}

type ListNodesResponseBody struct {
	Data           *ListNodesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                     `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListNodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBody) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBody) SetData(v *ListNodesResponseBodyData) *ListNodesResponseBody {
	s.Data = v
	return s
}

func (s *ListNodesResponseBody) SetErrorCode(v string) *ListNodesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListNodesResponseBody) SetErrorMessage(v string) *ListNodesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListNodesResponseBody) SetHttpStatusCode(v int32) *ListNodesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListNodesResponseBody) SetRequestId(v string) *ListNodesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNodesResponseBody) SetSuccess(v bool) *ListNodesResponseBody {
	s.Success = &v
	return s
}

type ListNodesResponseBodyData struct {
	Nodes      []*ListNodesResponseBodyDataNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
	PageNumber *int32                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListNodesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyData) SetNodes(v []*ListNodesResponseBodyDataNodes) *ListNodesResponseBodyData {
	s.Nodes = v
	return s
}

func (s *ListNodesResponseBodyData) SetPageNumber(v int32) *ListNodesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListNodesResponseBodyData) SetPageSize(v int32) *ListNodesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListNodesResponseBodyData) SetTotalCount(v int32) *ListNodesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListNodesResponseBodyDataNodes struct {
	BaselineId     *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	BusinessId     *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	Connection     *string `json:"Connection,omitempty" xml:"Connection,omitempty"`
	CronExpress    *string `json:"CronExpress,omitempty" xml:"CronExpress,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DqcDescription *string `json:"DqcDescription,omitempty" xml:"DqcDescription,omitempty"`
	DqcType        *int32  `json:"DqcType,omitempty" xml:"DqcType,omitempty"`
	NodeId         *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName       *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ParamValues    *string `json:"ParamValues,omitempty" xml:"ParamValues,omitempty"`
	Priority       *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ProgramType    *string `json:"ProgramType,omitempty" xml:"ProgramType,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RelatedFlowId  *int64  `json:"RelatedFlowId,omitempty" xml:"RelatedFlowId,omitempty"`
	RepeatInterval *int64  `json:"RepeatInterval,omitempty" xml:"RepeatInterval,omitempty"`
	Repeatability  *bool   `json:"Repeatability,omitempty" xml:"Repeatability,omitempty"`
	ResGroupName   *string `json:"ResGroupName,omitempty" xml:"ResGroupName,omitempty"`
	SchedulerType  *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
}

func (s ListNodesResponseBodyDataNodes) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyDataNodes) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyDataNodes) SetBaselineId(v int64) *ListNodesResponseBodyDataNodes {
	s.BaselineId = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetBusinessId(v int64) *ListNodesResponseBodyDataNodes {
	s.BusinessId = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetConnection(v string) *ListNodesResponseBodyDataNodes {
	s.Connection = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetCronExpress(v string) *ListNodesResponseBodyDataNodes {
	s.CronExpress = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetDescription(v string) *ListNodesResponseBodyDataNodes {
	s.Description = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetDqcDescription(v string) *ListNodesResponseBodyDataNodes {
	s.DqcDescription = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetDqcType(v int32) *ListNodesResponseBodyDataNodes {
	s.DqcType = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetNodeId(v int64) *ListNodesResponseBodyDataNodes {
	s.NodeId = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetNodeName(v string) *ListNodesResponseBodyDataNodes {
	s.NodeName = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetOwnerId(v string) *ListNodesResponseBodyDataNodes {
	s.OwnerId = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetParamValues(v string) *ListNodesResponseBodyDataNodes {
	s.ParamValues = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetPriority(v int32) *ListNodesResponseBodyDataNodes {
	s.Priority = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetProgramType(v string) *ListNodesResponseBodyDataNodes {
	s.ProgramType = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetProjectId(v int64) *ListNodesResponseBodyDataNodes {
	s.ProjectId = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetRelatedFlowId(v int64) *ListNodesResponseBodyDataNodes {
	s.RelatedFlowId = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetRepeatInterval(v int64) *ListNodesResponseBodyDataNodes {
	s.RepeatInterval = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetRepeatability(v bool) *ListNodesResponseBodyDataNodes {
	s.Repeatability = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetResGroupName(v string) *ListNodesResponseBodyDataNodes {
	s.ResGroupName = &v
	return s
}

func (s *ListNodesResponseBodyDataNodes) SetSchedulerType(v string) *ListNodesResponseBodyDataNodes {
	s.SchedulerType = &v
	return s
}

type ListNodesResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListNodesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListNodesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponse) GoString() string {
	return s.String()
}

func (s *ListNodesResponse) SetHeaders(v map[string]*string) *ListNodesResponse {
	s.Headers = v
	return s
}

func (s *ListNodesResponse) SetBody(v *ListNodesResponseBody) *ListNodesResponse {
	s.Body = v
	return s
}

type ListNodesByBaselineRequest struct {
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
}

func (s ListNodesByBaselineRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNodesByBaselineRequest) GoString() string {
	return s.String()
}

func (s *ListNodesByBaselineRequest) SetBaselineId(v int64) *ListNodesByBaselineRequest {
	s.BaselineId = &v
	return s
}

type ListNodesByBaselineResponseBody struct {
	Data           []*ListNodesByBaselineResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorCode      *string                                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *string                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListNodesByBaselineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNodesByBaselineResponseBody) GoString() string {
	return s.String()
}

func (s *ListNodesByBaselineResponseBody) SetData(v []*ListNodesByBaselineResponseBodyData) *ListNodesByBaselineResponseBody {
	s.Data = v
	return s
}

func (s *ListNodesByBaselineResponseBody) SetErrorCode(v string) *ListNodesByBaselineResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListNodesByBaselineResponseBody) SetErrorMessage(v string) *ListNodesByBaselineResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListNodesByBaselineResponseBody) SetHttpStatusCode(v int32) *ListNodesByBaselineResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListNodesByBaselineResponseBody) SetRequestId(v string) *ListNodesByBaselineResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNodesByBaselineResponseBody) SetSuccess(v string) *ListNodesByBaselineResponseBody {
	s.Success = &v
	return s
}

type ListNodesByBaselineResponseBodyData struct {
	NodeId    *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName  *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner     *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListNodesByBaselineResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListNodesByBaselineResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListNodesByBaselineResponseBodyData) SetNodeId(v int64) *ListNodesByBaselineResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *ListNodesByBaselineResponseBodyData) SetNodeName(v string) *ListNodesByBaselineResponseBodyData {
	s.NodeName = &v
	return s
}

func (s *ListNodesByBaselineResponseBodyData) SetOwner(v string) *ListNodesByBaselineResponseBodyData {
	s.Owner = &v
	return s
}

func (s *ListNodesByBaselineResponseBodyData) SetProjectId(v int64) *ListNodesByBaselineResponseBodyData {
	s.ProjectId = &v
	return s
}

type ListNodesByBaselineResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListNodesByBaselineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListNodesByBaselineResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNodesByBaselineResponse) GoString() string {
	return s.String()
}

func (s *ListNodesByBaselineResponse) SetHeaders(v map[string]*string) *ListNodesByBaselineResponse {
	s.Headers = v
	return s
}

func (s *ListNodesByBaselineResponse) SetBody(v *ListNodesByBaselineResponseBody) *ListNodesByBaselineResponse {
	s.Body = v
	return s
}

type ListNodesByOutputRequest struct {
	Outputs    *string `json:"Outputs,omitempty" xml:"Outputs,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s ListNodesByOutputRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNodesByOutputRequest) GoString() string {
	return s.String()
}

func (s *ListNodesByOutputRequest) SetOutputs(v string) *ListNodesByOutputRequest {
	s.Outputs = &v
	return s
}

func (s *ListNodesByOutputRequest) SetProjectEnv(v string) *ListNodesByOutputRequest {
	s.ProjectEnv = &v
	return s
}

type ListNodesByOutputResponseBody struct {
	Data           []*ListNodesByOutputResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorCode      *string                              `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListNodesByOutputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNodesByOutputResponseBody) GoString() string {
	return s.String()
}

func (s *ListNodesByOutputResponseBody) SetData(v []*ListNodesByOutputResponseBodyData) *ListNodesByOutputResponseBody {
	s.Data = v
	return s
}

func (s *ListNodesByOutputResponseBody) SetErrorCode(v string) *ListNodesByOutputResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListNodesByOutputResponseBody) SetErrorMessage(v string) *ListNodesByOutputResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListNodesByOutputResponseBody) SetHttpStatusCode(v int32) *ListNodesByOutputResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListNodesByOutputResponseBody) SetRequestId(v string) *ListNodesByOutputResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNodesByOutputResponseBody) SetSuccess(v bool) *ListNodesByOutputResponseBody {
	s.Success = &v
	return s
}

type ListNodesByOutputResponseBodyData struct {
	NodeList []*ListNodesByOutputResponseBodyDataNodeList `json:"NodeList,omitempty" xml:"NodeList,omitempty" type:"Repeated"`
	Output   *string                                      `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s ListNodesByOutputResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListNodesByOutputResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListNodesByOutputResponseBodyData) SetNodeList(v []*ListNodesByOutputResponseBodyDataNodeList) *ListNodesByOutputResponseBodyData {
	s.NodeList = v
	return s
}

func (s *ListNodesByOutputResponseBodyData) SetOutput(v string) *ListNodesByOutputResponseBodyData {
	s.Output = &v
	return s
}

type ListNodesByOutputResponseBodyDataNodeList struct {
	BaselineId     *int64  `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	Connection     *string `json:"Connection,omitempty" xml:"Connection,omitempty"`
	CronExpress    *string `json:"CronExpress,omitempty" xml:"CronExpress,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DqcDescription *string `json:"DqcDescription,omitempty" xml:"DqcDescription,omitempty"`
	DqcType        *int32  `json:"DqcType,omitempty" xml:"DqcType,omitempty"`
	FileType       *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	NodeId         *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName       *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ParamValues    *string `json:"ParamValues,omitempty" xml:"ParamValues,omitempty"`
	Priority       *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ProgramType    *string `json:"ProgramType,omitempty" xml:"ProgramType,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RelatedFlowId  *int64  `json:"RelatedFlowId,omitempty" xml:"RelatedFlowId,omitempty"`
	RepeatInterval *int32  `json:"RepeatInterval,omitempty" xml:"RepeatInterval,omitempty"`
	Repeatability  *bool   `json:"Repeatability,omitempty" xml:"Repeatability,omitempty"`
	ResGroupName   *string `json:"ResGroupName,omitempty" xml:"ResGroupName,omitempty"`
	SchedulerType  *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
}

func (s ListNodesByOutputResponseBodyDataNodeList) String() string {
	return tea.Prettify(s)
}

func (s ListNodesByOutputResponseBodyDataNodeList) GoString() string {
	return s.String()
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetBaselineId(v int64) *ListNodesByOutputResponseBodyDataNodeList {
	s.BaselineId = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetConnection(v string) *ListNodesByOutputResponseBodyDataNodeList {
	s.Connection = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetCronExpress(v string) *ListNodesByOutputResponseBodyDataNodeList {
	s.CronExpress = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetDescription(v string) *ListNodesByOutputResponseBodyDataNodeList {
	s.Description = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetDqcDescription(v string) *ListNodesByOutputResponseBodyDataNodeList {
	s.DqcDescription = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetDqcType(v int32) *ListNodesByOutputResponseBodyDataNodeList {
	s.DqcType = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetFileType(v string) *ListNodesByOutputResponseBodyDataNodeList {
	s.FileType = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetNodeId(v int64) *ListNodesByOutputResponseBodyDataNodeList {
	s.NodeId = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetNodeName(v string) *ListNodesByOutputResponseBodyDataNodeList {
	s.NodeName = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetOwnerId(v string) *ListNodesByOutputResponseBodyDataNodeList {
	s.OwnerId = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetParamValues(v string) *ListNodesByOutputResponseBodyDataNodeList {
	s.ParamValues = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetPriority(v int32) *ListNodesByOutputResponseBodyDataNodeList {
	s.Priority = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetProgramType(v string) *ListNodesByOutputResponseBodyDataNodeList {
	s.ProgramType = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetProjectId(v int64) *ListNodesByOutputResponseBodyDataNodeList {
	s.ProjectId = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetRelatedFlowId(v int64) *ListNodesByOutputResponseBodyDataNodeList {
	s.RelatedFlowId = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetRepeatInterval(v int32) *ListNodesByOutputResponseBodyDataNodeList {
	s.RepeatInterval = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetRepeatability(v bool) *ListNodesByOutputResponseBodyDataNodeList {
	s.Repeatability = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetResGroupName(v string) *ListNodesByOutputResponseBodyDataNodeList {
	s.ResGroupName = &v
	return s
}

func (s *ListNodesByOutputResponseBodyDataNodeList) SetSchedulerType(v string) *ListNodesByOutputResponseBodyDataNodeList {
	s.SchedulerType = &v
	return s
}

type ListNodesByOutputResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListNodesByOutputResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListNodesByOutputResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNodesByOutputResponse) GoString() string {
	return s.String()
}

func (s *ListNodesByOutputResponse) SetHeaders(v map[string]*string) *ListNodesByOutputResponse {
	s.Headers = v
	return s
}

func (s *ListNodesByOutputResponse) SetBody(v *ListNodesByOutputResponseBody) *ListNodesByOutputResponse {
	s.Body = v
	return s
}

type ListPermissionApplyOrdersRequest struct {
	EndTime               *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EngineType            *string `json:"EngineType,omitempty" xml:"EngineType,omitempty"`
	FlowStatus            *int32  `json:"FlowStatus,omitempty" xml:"FlowStatus,omitempty"`
	MaxComputeProjectName *string `json:"MaxComputeProjectName,omitempty" xml:"MaxComputeProjectName,omitempty"`
	OrderType             *int32  `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	PageNum               *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize              *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QueryType             *int32  `json:"QueryType,omitempty" xml:"QueryType,omitempty"`
	StartTime             *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TableName             *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	WorkspaceId           *int32  `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListPermissionApplyOrdersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPermissionApplyOrdersRequest) GoString() string {
	return s.String()
}

func (s *ListPermissionApplyOrdersRequest) SetEndTime(v int64) *ListPermissionApplyOrdersRequest {
	s.EndTime = &v
	return s
}

func (s *ListPermissionApplyOrdersRequest) SetEngineType(v string) *ListPermissionApplyOrdersRequest {
	s.EngineType = &v
	return s
}

func (s *ListPermissionApplyOrdersRequest) SetFlowStatus(v int32) *ListPermissionApplyOrdersRequest {
	s.FlowStatus = &v
	return s
}

func (s *ListPermissionApplyOrdersRequest) SetMaxComputeProjectName(v string) *ListPermissionApplyOrdersRequest {
	s.MaxComputeProjectName = &v
	return s
}

func (s *ListPermissionApplyOrdersRequest) SetOrderType(v int32) *ListPermissionApplyOrdersRequest {
	s.OrderType = &v
	return s
}

func (s *ListPermissionApplyOrdersRequest) SetPageNum(v int32) *ListPermissionApplyOrdersRequest {
	s.PageNum = &v
	return s
}

func (s *ListPermissionApplyOrdersRequest) SetPageSize(v int32) *ListPermissionApplyOrdersRequest {
	s.PageSize = &v
	return s
}

func (s *ListPermissionApplyOrdersRequest) SetQueryType(v int32) *ListPermissionApplyOrdersRequest {
	s.QueryType = &v
	return s
}

func (s *ListPermissionApplyOrdersRequest) SetStartTime(v int64) *ListPermissionApplyOrdersRequest {
	s.StartTime = &v
	return s
}

func (s *ListPermissionApplyOrdersRequest) SetTableName(v string) *ListPermissionApplyOrdersRequest {
	s.TableName = &v
	return s
}

func (s *ListPermissionApplyOrdersRequest) SetWorkspaceId(v int32) *ListPermissionApplyOrdersRequest {
	s.WorkspaceId = &v
	return s
}

type ListPermissionApplyOrdersResponseBody struct {
	ApplyOrders *ListPermissionApplyOrdersResponseBodyApplyOrders `json:"ApplyOrders,omitempty" xml:"ApplyOrders,omitempty" type:"Struct"`
	RequestId   *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPermissionApplyOrdersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPermissionApplyOrdersResponseBody) GoString() string {
	return s.String()
}

func (s *ListPermissionApplyOrdersResponseBody) SetApplyOrders(v *ListPermissionApplyOrdersResponseBodyApplyOrders) *ListPermissionApplyOrdersResponseBody {
	s.ApplyOrders = v
	return s
}

func (s *ListPermissionApplyOrdersResponseBody) SetRequestId(v string) *ListPermissionApplyOrdersResponseBody {
	s.RequestId = &v
	return s
}

type ListPermissionApplyOrdersResponseBodyApplyOrders struct {
	ApplyOrder []*ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder `json:"ApplyOrder,omitempty" xml:"ApplyOrder,omitempty" type:"Repeated"`
	PageNumber *int32                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPermissionApplyOrdersResponseBodyApplyOrders) String() string {
	return tea.Prettify(s)
}

func (s ListPermissionApplyOrdersResponseBodyApplyOrders) GoString() string {
	return s.String()
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrders) SetApplyOrder(v []*ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder) *ListPermissionApplyOrdersResponseBodyApplyOrders {
	s.ApplyOrder = v
	return s
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrders) SetPageNumber(v int32) *ListPermissionApplyOrdersResponseBodyApplyOrders {
	s.PageNumber = &v
	return s
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrders) SetPageSize(v int32) *ListPermissionApplyOrdersResponseBodyApplyOrders {
	s.PageSize = &v
	return s
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrders) SetTotalCount(v int32) *ListPermissionApplyOrdersResponseBodyApplyOrders {
	s.TotalCount = &v
	return s
}

type ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder struct {
	ApplyBaseId    *string                                                                   `json:"ApplyBaseId,omitempty" xml:"ApplyBaseId,omitempty"`
	ApplyTimestamp *int64                                                                    `json:"ApplyTimestamp,omitempty" xml:"ApplyTimestamp,omitempty"`
	ApproveContent *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContent `json:"ApproveContent,omitempty" xml:"ApproveContent,omitempty" type:"Struct"`
	FlowId         *string                                                                   `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	FlowStatus     *int32                                                                    `json:"FlowStatus,omitempty" xml:"FlowStatus,omitempty"`
}

func (s ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder) String() string {
	return tea.Prettify(s)
}

func (s ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder) GoString() string {
	return s.String()
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder) SetApplyBaseId(v string) *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder {
	s.ApplyBaseId = &v
	return s
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder) SetApplyTimestamp(v int64) *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder {
	s.ApplyTimestamp = &v
	return s
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder) SetApproveContent(v *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContent) *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder {
	s.ApproveContent = v
	return s
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder) SetFlowId(v string) *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder {
	s.FlowId = &v
	return s
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder) SetFlowStatus(v int32) *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrder {
	s.FlowStatus = &v
	return s
}

type ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContent struct {
	ApplyReason *string                                                                              `json:"ApplyReason,omitempty" xml:"ApplyReason,omitempty"`
	OrderType   *int32                                                                               `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	ProjectMeta *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMeta `json:"ProjectMeta,omitempty" xml:"ProjectMeta,omitempty" type:"Struct"`
}

func (s ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContent) String() string {
	return tea.Prettify(s)
}

func (s ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContent) GoString() string {
	return s.String()
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContent) SetApplyReason(v string) *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContent {
	s.ApplyReason = &v
	return s
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContent) SetOrderType(v int32) *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContent {
	s.OrderType = &v
	return s
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContent) SetProjectMeta(v *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMeta) *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContent {
	s.ProjectMeta = v
	return s
}

type ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMeta struct {
	ObjectMetaList []*ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMetaObjectMetaList `json:"ObjectMetaList,omitempty" xml:"ObjectMetaList,omitempty" type:"Repeated"`
	WorkspaceName  *string                                                                                              `json:"WorkspaceName,omitempty" xml:"WorkspaceName,omitempty"`
}

func (s ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMeta) String() string {
	return tea.Prettify(s)
}

func (s ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMeta) GoString() string {
	return s.String()
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMeta) SetObjectMetaList(v []*ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMetaObjectMetaList) *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMeta {
	s.ObjectMetaList = v
	return s
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMeta) SetWorkspaceName(v string) *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMeta {
	s.WorkspaceName = &v
	return s
}

type ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMetaObjectMetaList struct {
	Actions    []*string `json:"Actions,omitempty" xml:"Actions,omitempty" type:"Repeated"`
	ObjectName *string   `json:"ObjectName,omitempty" xml:"ObjectName,omitempty"`
}

func (s ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMetaObjectMetaList) String() string {
	return tea.Prettify(s)
}

func (s ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMetaObjectMetaList) GoString() string {
	return s.String()
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMetaObjectMetaList) SetActions(v []*string) *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMetaObjectMetaList {
	s.Actions = v
	return s
}

func (s *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMetaObjectMetaList) SetObjectName(v string) *ListPermissionApplyOrdersResponseBodyApplyOrdersApplyOrderApproveContentProjectMetaObjectMetaList {
	s.ObjectName = &v
	return s
}

type ListPermissionApplyOrdersResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListPermissionApplyOrdersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPermissionApplyOrdersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPermissionApplyOrdersResponse) GoString() string {
	return s.String()
}

func (s *ListPermissionApplyOrdersResponse) SetHeaders(v map[string]*string) *ListPermissionApplyOrdersResponse {
	s.Headers = v
	return s
}

func (s *ListPermissionApplyOrdersResponse) SetBody(v *ListPermissionApplyOrdersResponseBody) *ListPermissionApplyOrdersResponse {
	s.Body = v
	return s
}

type ListProgramTypeCountRequest struct {
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	ProjectId  *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListProgramTypeCountRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProgramTypeCountRequest) GoString() string {
	return s.String()
}

func (s *ListProgramTypeCountRequest) SetProjectEnv(v string) *ListProgramTypeCountRequest {
	s.ProjectEnv = &v
	return s
}

func (s *ListProgramTypeCountRequest) SetProjectId(v int64) *ListProgramTypeCountRequest {
	s.ProjectId = &v
	return s
}

type ListProgramTypeCountResponseBody struct {
	ProgramTypeAndCounts []*ListProgramTypeCountResponseBodyProgramTypeAndCounts `json:"ProgramTypeAndCounts,omitempty" xml:"ProgramTypeAndCounts,omitempty" type:"Repeated"`
	RequestId            *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListProgramTypeCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProgramTypeCountResponseBody) GoString() string {
	return s.String()
}

func (s *ListProgramTypeCountResponseBody) SetProgramTypeAndCounts(v []*ListProgramTypeCountResponseBodyProgramTypeAndCounts) *ListProgramTypeCountResponseBody {
	s.ProgramTypeAndCounts = v
	return s
}

func (s *ListProgramTypeCountResponseBody) SetRequestId(v string) *ListProgramTypeCountResponseBody {
	s.RequestId = &v
	return s
}

type ListProgramTypeCountResponseBodyProgramTypeAndCounts struct {
	Count       *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	ProgramType *string `json:"ProgramType,omitempty" xml:"ProgramType,omitempty"`
}

func (s ListProgramTypeCountResponseBodyProgramTypeAndCounts) String() string {
	return tea.Prettify(s)
}

func (s ListProgramTypeCountResponseBodyProgramTypeAndCounts) GoString() string {
	return s.String()
}

func (s *ListProgramTypeCountResponseBodyProgramTypeAndCounts) SetCount(v int32) *ListProgramTypeCountResponseBodyProgramTypeAndCounts {
	s.Count = &v
	return s
}

func (s *ListProgramTypeCountResponseBodyProgramTypeAndCounts) SetProgramType(v string) *ListProgramTypeCountResponseBodyProgramTypeAndCounts {
	s.ProgramType = &v
	return s
}

type ListProgramTypeCountResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListProgramTypeCountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListProgramTypeCountResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProgramTypeCountResponse) GoString() string {
	return s.String()
}

func (s *ListProgramTypeCountResponse) SetHeaders(v map[string]*string) *ListProgramTypeCountResponse {
	s.Headers = v
	return s
}

func (s *ListProgramTypeCountResponse) SetBody(v *ListProgramTypeCountResponseBody) *ListProgramTypeCountResponse {
	s.Body = v
	return s
}

type ListProjectIdsRequest struct {
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListProjectIdsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectIdsRequest) GoString() string {
	return s.String()
}

func (s *ListProjectIdsRequest) SetUserId(v string) *ListProjectIdsRequest {
	s.UserId = &v
	return s
}

type ListProjectIdsResponseBody struct {
	ProjectIds []*int64 `json:"ProjectIds,omitempty" xml:"ProjectIds,omitempty" type:"Repeated"`
	RequestId  *string  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListProjectIdsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectIdsResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectIdsResponseBody) SetProjectIds(v []*int64) *ListProjectIdsResponseBody {
	s.ProjectIds = v
	return s
}

func (s *ListProjectIdsResponseBody) SetRequestId(v string) *ListProjectIdsResponseBody {
	s.RequestId = &v
	return s
}

type ListProjectIdsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListProjectIdsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListProjectIdsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectIdsResponse) GoString() string {
	return s.String()
}

func (s *ListProjectIdsResponse) SetHeaders(v map[string]*string) *ListProjectIdsResponse {
	s.Headers = v
	return s
}

func (s *ListProjectIdsResponse) SetBody(v *ListProjectIdsResponseBody) *ListProjectIdsResponse {
	s.Body = v
	return s
}

type ListProjectMembersRequest struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId  *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListProjectMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersRequest) GoString() string {
	return s.String()
}

func (s *ListProjectMembersRequest) SetPageNumber(v int32) *ListProjectMembersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListProjectMembersRequest) SetPageSize(v int32) *ListProjectMembersRequest {
	s.PageSize = &v
	return s
}

func (s *ListProjectMembersRequest) SetProjectId(v int64) *ListProjectMembersRequest {
	s.ProjectId = &v
	return s
}

type ListProjectMembersResponseBody struct {
	Data      *ListProjectMembersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListProjectMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponseBody) SetData(v *ListProjectMembersResponseBodyData) *ListProjectMembersResponseBody {
	s.Data = v
	return s
}

func (s *ListProjectMembersResponseBody) SetRequestId(v string) *ListProjectMembersResponseBody {
	s.RequestId = &v
	return s
}

type ListProjectMembersResponseBodyData struct {
	PageNumber        *int32                                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectMemberList []*ListProjectMembersResponseBodyDataProjectMemberList `json:"ProjectMemberList,omitempty" xml:"ProjectMemberList,omitempty" type:"Repeated"`
	TotalCount        *int32                                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListProjectMembersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponseBodyData) SetPageNumber(v int32) *ListProjectMembersResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListProjectMembersResponseBodyData) SetPageSize(v int32) *ListProjectMembersResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListProjectMembersResponseBodyData) SetProjectMemberList(v []*ListProjectMembersResponseBodyDataProjectMemberList) *ListProjectMembersResponseBodyData {
	s.ProjectMemberList = v
	return s
}

func (s *ListProjectMembersResponseBodyData) SetTotalCount(v int32) *ListProjectMembersResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListProjectMembersResponseBodyDataProjectMemberList struct {
	Nick              *string                                                               `json:"Nick,omitempty" xml:"Nick,omitempty"`
	ProjectMemberId   *string                                                               `json:"ProjectMemberId,omitempty" xml:"ProjectMemberId,omitempty"`
	ProjectMemberName *string                                                               `json:"ProjectMemberName,omitempty" xml:"ProjectMemberName,omitempty"`
	ProjectMemberType *string                                                               `json:"ProjectMemberType,omitempty" xml:"ProjectMemberType,omitempty"`
	ProjectRoleList   []*ListProjectMembersResponseBodyDataProjectMemberListProjectRoleList `json:"ProjectRoleList,omitempty" xml:"ProjectRoleList,omitempty" type:"Repeated"`
	Status            *string                                                               `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListProjectMembersResponseBodyDataProjectMemberList) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponseBodyDataProjectMemberList) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponseBodyDataProjectMemberList) SetNick(v string) *ListProjectMembersResponseBodyDataProjectMemberList {
	s.Nick = &v
	return s
}

func (s *ListProjectMembersResponseBodyDataProjectMemberList) SetProjectMemberId(v string) *ListProjectMembersResponseBodyDataProjectMemberList {
	s.ProjectMemberId = &v
	return s
}

func (s *ListProjectMembersResponseBodyDataProjectMemberList) SetProjectMemberName(v string) *ListProjectMembersResponseBodyDataProjectMemberList {
	s.ProjectMemberName = &v
	return s
}

func (s *ListProjectMembersResponseBodyDataProjectMemberList) SetProjectMemberType(v string) *ListProjectMembersResponseBodyDataProjectMemberList {
	s.ProjectMemberType = &v
	return s
}

func (s *ListProjectMembersResponseBodyDataProjectMemberList) SetProjectRoleList(v []*ListProjectMembersResponseBodyDataProjectMemberListProjectRoleList) *ListProjectMembersResponseBodyDataProjectMemberList {
	s.ProjectRoleList = v
	return s
}

func (s *ListProjectMembersResponseBodyDataProjectMemberList) SetStatus(v string) *ListProjectMembersResponseBodyDataProjectMemberList {
	s.Status = &v
	return s
}

type ListProjectMembersResponseBodyDataProjectMemberListProjectRoleList struct {
	ProjectRoleCode *string `json:"ProjectRoleCode,omitempty" xml:"ProjectRoleCode,omitempty"`
	ProjectRoleId   *int32  `json:"ProjectRoleId,omitempty" xml:"ProjectRoleId,omitempty"`
	ProjectRoleName *string `json:"ProjectRoleName,omitempty" xml:"ProjectRoleName,omitempty"`
	ProjectRoleType *string `json:"ProjectRoleType,omitempty" xml:"ProjectRoleType,omitempty"`
}

func (s ListProjectMembersResponseBodyDataProjectMemberListProjectRoleList) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponseBodyDataProjectMemberListProjectRoleList) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponseBodyDataProjectMemberListProjectRoleList) SetProjectRoleCode(v string) *ListProjectMembersResponseBodyDataProjectMemberListProjectRoleList {
	s.ProjectRoleCode = &v
	return s
}

func (s *ListProjectMembersResponseBodyDataProjectMemberListProjectRoleList) SetProjectRoleId(v int32) *ListProjectMembersResponseBodyDataProjectMemberListProjectRoleList {
	s.ProjectRoleId = &v
	return s
}

func (s *ListProjectMembersResponseBodyDataProjectMemberListProjectRoleList) SetProjectRoleName(v string) *ListProjectMembersResponseBodyDataProjectMemberListProjectRoleList {
	s.ProjectRoleName = &v
	return s
}

func (s *ListProjectMembersResponseBodyDataProjectMemberListProjectRoleList) SetProjectRoleType(v string) *ListProjectMembersResponseBodyDataProjectMemberListProjectRoleList {
	s.ProjectRoleType = &v
	return s
}

type ListProjectMembersResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListProjectMembersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListProjectMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponse) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponse) SetHeaders(v map[string]*string) *ListProjectMembersResponse {
	s.Headers = v
	return s
}

func (s *ListProjectMembersResponse) SetBody(v *ListProjectMembersResponseBody) *ListProjectMembersResponse {
	s.Body = v
	return s
}

type ListProjectRolesRequest struct {
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListProjectRolesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectRolesRequest) GoString() string {
	return s.String()
}

func (s *ListProjectRolesRequest) SetProjectId(v int64) *ListProjectRolesRequest {
	s.ProjectId = &v
	return s
}

type ListProjectRolesResponseBody struct {
	ProjectRoleList []*ListProjectRolesResponseBodyProjectRoleList `json:"ProjectRoleList,omitempty" xml:"ProjectRoleList,omitempty" type:"Repeated"`
	RequestId       *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListProjectRolesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectRolesResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectRolesResponseBody) SetProjectRoleList(v []*ListProjectRolesResponseBodyProjectRoleList) *ListProjectRolesResponseBody {
	s.ProjectRoleList = v
	return s
}

func (s *ListProjectRolesResponseBody) SetRequestId(v string) *ListProjectRolesResponseBody {
	s.RequestId = &v
	return s
}

type ListProjectRolesResponseBodyProjectRoleList struct {
	ProjectRoleCode *string `json:"ProjectRoleCode,omitempty" xml:"ProjectRoleCode,omitempty"`
	ProjectRoleId   *int32  `json:"ProjectRoleId,omitempty" xml:"ProjectRoleId,omitempty"`
	ProjectRoleName *string `json:"ProjectRoleName,omitempty" xml:"ProjectRoleName,omitempty"`
	ProjectRoleType *string `json:"ProjectRoleType,omitempty" xml:"ProjectRoleType,omitempty"`
}

func (s ListProjectRolesResponseBodyProjectRoleList) String() string {
	return tea.Prettify(s)
}

func (s ListProjectRolesResponseBodyProjectRoleList) GoString() string {
	return s.String()
}

func (s *ListProjectRolesResponseBodyProjectRoleList) SetProjectRoleCode(v string) *ListProjectRolesResponseBodyProjectRoleList {
	s.ProjectRoleCode = &v
	return s
}

func (s *ListProjectRolesResponseBodyProjectRoleList) SetProjectRoleId(v int32) *ListProjectRolesResponseBodyProjectRoleList {
	s.ProjectRoleId = &v
	return s
}

func (s *ListProjectRolesResponseBodyProjectRoleList) SetProjectRoleName(v string) *ListProjectRolesResponseBodyProjectRoleList {
	s.ProjectRoleName = &v
	return s
}

func (s *ListProjectRolesResponseBodyProjectRoleList) SetProjectRoleType(v string) *ListProjectRolesResponseBodyProjectRoleList {
	s.ProjectRoleType = &v
	return s
}

type ListProjectRolesResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListProjectRolesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListProjectRolesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectRolesResponse) GoString() string {
	return s.String()
}

func (s *ListProjectRolesResponse) SetHeaders(v map[string]*string) *ListProjectRolesResponse {
	s.Headers = v
	return s
}

func (s *ListProjectRolesResponse) SetBody(v *ListProjectRolesResponseBody) *ListProjectRolesResponse {
	s.Body = v
	return s
}

type ListProjectsRequest struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListProjectsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsRequest) GoString() string {
	return s.String()
}

func (s *ListProjectsRequest) SetPageNumber(v int32) *ListProjectsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListProjectsRequest) SetPageSize(v int32) *ListProjectsRequest {
	s.PageSize = &v
	return s
}

type ListProjectsResponseBody struct {
	PageResult *ListProjectsResponseBodyPageResult `json:"PageResult,omitempty" xml:"PageResult,omitempty" type:"Struct"`
	RequestId  *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListProjectsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBody) SetPageResult(v *ListProjectsResponseBodyPageResult) *ListProjectsResponseBody {
	s.PageResult = v
	return s
}

func (s *ListProjectsResponseBody) SetRequestId(v string) *ListProjectsResponseBody {
	s.RequestId = &v
	return s
}

type ListProjectsResponseBodyPageResult struct {
	PageNumber  *int32                                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectList []*ListProjectsResponseBodyPageResultProjectList `json:"ProjectList,omitempty" xml:"ProjectList,omitempty" type:"Repeated"`
	TotalCount  *int32                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListProjectsResponseBodyPageResult) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyPageResult) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyPageResult) SetPageNumber(v int32) *ListProjectsResponseBodyPageResult {
	s.PageNumber = &v
	return s
}

func (s *ListProjectsResponseBodyPageResult) SetPageSize(v int32) *ListProjectsResponseBodyPageResult {
	s.PageSize = &v
	return s
}

func (s *ListProjectsResponseBodyPageResult) SetProjectList(v []*ListProjectsResponseBodyPageResultProjectList) *ListProjectsResponseBodyPageResult {
	s.ProjectList = v
	return s
}

func (s *ListProjectsResponseBodyPageResult) SetTotalCount(v int32) *ListProjectsResponseBodyPageResult {
	s.TotalCount = &v
	return s
}

type ListProjectsResponseBodyPageResultProjectList struct {
	ProjectDescription *string `json:"ProjectDescription,omitempty" xml:"ProjectDescription,omitempty"`
	ProjectId          *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier  *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	ProjectName        *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ProjectOwnerBaseId *string `json:"ProjectOwnerBaseId,omitempty" xml:"ProjectOwnerBaseId,omitempty"`
	ProjectStatus      *int32  `json:"ProjectStatus,omitempty" xml:"ProjectStatus,omitempty"`
	ProjectStatusCode  *string `json:"ProjectStatusCode,omitempty" xml:"ProjectStatusCode,omitempty"`
}

func (s ListProjectsResponseBodyPageResultProjectList) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyPageResultProjectList) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyPageResultProjectList) SetProjectDescription(v string) *ListProjectsResponseBodyPageResultProjectList {
	s.ProjectDescription = &v
	return s
}

func (s *ListProjectsResponseBodyPageResultProjectList) SetProjectId(v int64) *ListProjectsResponseBodyPageResultProjectList {
	s.ProjectId = &v
	return s
}

func (s *ListProjectsResponseBodyPageResultProjectList) SetProjectIdentifier(v string) *ListProjectsResponseBodyPageResultProjectList {
	s.ProjectIdentifier = &v
	return s
}

func (s *ListProjectsResponseBodyPageResultProjectList) SetProjectName(v string) *ListProjectsResponseBodyPageResultProjectList {
	s.ProjectName = &v
	return s
}

func (s *ListProjectsResponseBodyPageResultProjectList) SetProjectOwnerBaseId(v string) *ListProjectsResponseBodyPageResultProjectList {
	s.ProjectOwnerBaseId = &v
	return s
}

func (s *ListProjectsResponseBodyPageResultProjectList) SetProjectStatus(v int32) *ListProjectsResponseBodyPageResultProjectList {
	s.ProjectStatus = &v
	return s
}

func (s *ListProjectsResponseBodyPageResultProjectList) SetProjectStatusCode(v string) *ListProjectsResponseBodyPageResultProjectList {
	s.ProjectStatusCode = &v
	return s
}

type ListProjectsResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListProjectsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListProjectsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponse) GoString() string {
	return s.String()
}

func (s *ListProjectsResponse) SetHeaders(v map[string]*string) *ListProjectsResponse {
	s.Headers = v
	return s
}

func (s *ListProjectsResponse) SetBody(v *ListProjectsResponseBody) *ListProjectsResponse {
	s.Body = v
	return s
}

type ListQualityResultsByEntityRequest struct {
	EndDate     *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	EntityId    *int32  `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	PageNumber  *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	StartDate   *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
}

func (s ListQualityResultsByEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByEntityRequest) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByEntityRequest) SetEndDate(v string) *ListQualityResultsByEntityRequest {
	s.EndDate = &v
	return s
}

func (s *ListQualityResultsByEntityRequest) SetEntityId(v int32) *ListQualityResultsByEntityRequest {
	s.EntityId = &v
	return s
}

func (s *ListQualityResultsByEntityRequest) SetPageNumber(v int32) *ListQualityResultsByEntityRequest {
	s.PageNumber = &v
	return s
}

func (s *ListQualityResultsByEntityRequest) SetPageSize(v int32) *ListQualityResultsByEntityRequest {
	s.PageSize = &v
	return s
}

func (s *ListQualityResultsByEntityRequest) SetProjectName(v string) *ListQualityResultsByEntityRequest {
	s.ProjectName = &v
	return s
}

func (s *ListQualityResultsByEntityRequest) SetStartDate(v string) *ListQualityResultsByEntityRequest {
	s.StartDate = &v
	return s
}

type ListQualityResultsByEntityResponseBody struct {
	Data           *ListQualityResultsByEntityResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                                     `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListQualityResultsByEntityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByEntityResponseBody) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByEntityResponseBody) SetData(v *ListQualityResultsByEntityResponseBodyData) *ListQualityResultsByEntityResponseBody {
	s.Data = v
	return s
}

func (s *ListQualityResultsByEntityResponseBody) SetErrorCode(v string) *ListQualityResultsByEntityResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBody) SetErrorMessage(v string) *ListQualityResultsByEntityResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBody) SetHttpStatusCode(v int32) *ListQualityResultsByEntityResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBody) SetRequestId(v string) *ListQualityResultsByEntityResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBody) SetSuccess(v bool) *ListQualityResultsByEntityResponseBody {
	s.Success = &v
	return s
}

type ListQualityResultsByEntityResponseBodyData struct {
	PageNumber *int32                                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RuleChecks []*ListQualityResultsByEntityResponseBodyDataRuleChecks `json:"RuleChecks,omitempty" xml:"RuleChecks,omitempty" type:"Repeated"`
	TotalCount *int64                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListQualityResultsByEntityResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByEntityResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByEntityResponseBodyData) SetPageNumber(v int32) *ListQualityResultsByEntityResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyData) SetPageSize(v int32) *ListQualityResultsByEntityResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyData) SetRuleChecks(v []*ListQualityResultsByEntityResponseBodyDataRuleChecks) *ListQualityResultsByEntityResponseBodyData {
	s.RuleChecks = v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyData) SetTotalCount(v int64) *ListQualityResultsByEntityResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListQualityResultsByEntityResponseBodyDataRuleChecks struct {
	ActualExpression  *string                                                               `json:"ActualExpression,omitempty" xml:"ActualExpression,omitempty"`
	BeginTime         *int64                                                                `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	BizDate           *int64                                                                `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	BlockType         *int32                                                                `json:"BlockType,omitempty" xml:"BlockType,omitempty"`
	CheckResult       *int32                                                                `json:"CheckResult,omitempty" xml:"CheckResult,omitempty"`
	CheckResultStatus *int32                                                                `json:"CheckResultStatus,omitempty" xml:"CheckResultStatus,omitempty"`
	CheckerId         *int32                                                                `json:"CheckerId,omitempty" xml:"CheckerId,omitempty"`
	CheckerName       *string                                                               `json:"CheckerName,omitempty" xml:"CheckerName,omitempty"`
	CheckerType       *int32                                                                `json:"CheckerType,omitempty" xml:"CheckerType,omitempty"`
	Comment           *string                                                               `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CriticalThreshold *float32                                                              `json:"CriticalThreshold,omitempty" xml:"CriticalThreshold,omitempty"`
	DateType          *string                                                               `json:"DateType,omitempty" xml:"DateType,omitempty"`
	DiscreteCheck     *bool                                                                 `json:"DiscreteCheck,omitempty" xml:"DiscreteCheck,omitempty"`
	EndTime           *int64                                                                `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EntityId          *int32                                                                `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	ExpectValue       *float32                                                              `json:"ExpectValue,omitempty" xml:"ExpectValue,omitempty"`
	ExternalId        *string                                                               `json:"ExternalId,omitempty" xml:"ExternalId,omitempty"`
	ExternalType      *string                                                               `json:"ExternalType,omitempty" xml:"ExternalType,omitempty"`
	FixedCheck        *bool                                                                 `json:"FixedCheck,omitempty" xml:"FixedCheck,omitempty"`
	Id                *int32                                                                `json:"Id,omitempty" xml:"Id,omitempty"`
	IsPrediction      *bool                                                                 `json:"IsPrediction,omitempty" xml:"IsPrediction,omitempty"`
	LowerValue        *float32                                                              `json:"LowerValue,omitempty" xml:"LowerValue,omitempty"`
	MatchExpression   *string                                                               `json:"MatchExpression,omitempty" xml:"MatchExpression,omitempty"`
	MethodName        *string                                                               `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	Op                *string                                                               `json:"Op,omitempty" xml:"Op,omitempty"`
	ProjectName       *string                                                               `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	Property          *string                                                               `json:"Property,omitempty" xml:"Property,omitempty"`
	ReferenceValue    []*ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue `json:"ReferenceValue,omitempty" xml:"ReferenceValue,omitempty" type:"Repeated"`
	ResultString      *string                                                               `json:"ResultString,omitempty" xml:"ResultString,omitempty"`
	RuleId            *int32                                                                `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	RuleName          *string                                                               `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	SampleValue       []*ListQualityResultsByEntityResponseBodyDataRuleChecksSampleValue    `json:"SampleValue,omitempty" xml:"SampleValue,omitempty" type:"Repeated"`
	TableName         *string                                                               `json:"TableName,omitempty" xml:"TableName,omitempty"`
	TaskId            *string                                                               `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TemplateId        *int32                                                                `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName      *string                                                               `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TimeCost          *string                                                               `json:"TimeCost,omitempty" xml:"TimeCost,omitempty"`
	Trend             *string                                                               `json:"Trend,omitempty" xml:"Trend,omitempty"`
	UpperValue        *float32                                                              `json:"UpperValue,omitempty" xml:"UpperValue,omitempty"`
	WarningThreshold  *float32                                                              `json:"WarningThreshold,omitempty" xml:"WarningThreshold,omitempty"`
	WhereCondition    *string                                                               `json:"WhereCondition,omitempty" xml:"WhereCondition,omitempty"`
}

func (s ListQualityResultsByEntityResponseBodyDataRuleChecks) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByEntityResponseBodyDataRuleChecks) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetActualExpression(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.ActualExpression = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetBeginTime(v int64) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.BeginTime = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetBizDate(v int64) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.BizDate = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetBlockType(v int32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.BlockType = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetCheckResult(v int32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.CheckResult = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetCheckResultStatus(v int32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.CheckResultStatus = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetCheckerId(v int32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.CheckerId = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetCheckerName(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.CheckerName = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetCheckerType(v int32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.CheckerType = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetComment(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.Comment = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetCriticalThreshold(v float32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.CriticalThreshold = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetDateType(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.DateType = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetDiscreteCheck(v bool) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.DiscreteCheck = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetEndTime(v int64) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.EndTime = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetEntityId(v int32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.EntityId = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetExpectValue(v float32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.ExpectValue = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetExternalId(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.ExternalId = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetExternalType(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.ExternalType = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetFixedCheck(v bool) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.FixedCheck = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetId(v int32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.Id = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetIsPrediction(v bool) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.IsPrediction = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetLowerValue(v float32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.LowerValue = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetMatchExpression(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.MatchExpression = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetMethodName(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.MethodName = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetOp(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.Op = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetProjectName(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.ProjectName = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetProperty(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.Property = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetReferenceValue(v []*ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.ReferenceValue = v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetResultString(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.ResultString = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetRuleId(v int32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.RuleId = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetRuleName(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.RuleName = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetSampleValue(v []*ListQualityResultsByEntityResponseBodyDataRuleChecksSampleValue) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.SampleValue = v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetTableName(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.TableName = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetTaskId(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.TaskId = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetTemplateId(v int32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.TemplateId = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetTemplateName(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.TemplateName = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetTimeCost(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.TimeCost = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetTrend(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.Trend = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetUpperValue(v float32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.UpperValue = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetWarningThreshold(v float32) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.WarningThreshold = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecks) SetWhereCondition(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecks {
	s.WhereCondition = &v
	return s
}

type ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue struct {
	BizDate           *string  `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	DiscreteProperty  *string  `json:"DiscreteProperty,omitempty" xml:"DiscreteProperty,omitempty"`
	SingleCheckResult *int32   `json:"SingleCheckResult,omitempty" xml:"SingleCheckResult,omitempty"`
	Threshold         *float32 `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Value             *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue) SetBizDate(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue {
	s.BizDate = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue) SetDiscreteProperty(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue {
	s.DiscreteProperty = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue) SetSingleCheckResult(v int32) *ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue {
	s.SingleCheckResult = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue) SetThreshold(v float32) *ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue {
	s.Threshold = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue) SetValue(v float32) *ListQualityResultsByEntityResponseBodyDataRuleChecksReferenceValue {
	s.Value = &v
	return s
}

type ListQualityResultsByEntityResponseBodyDataRuleChecksSampleValue struct {
	BizDate          *string  `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	DiscreteProperty *string  `json:"DiscreteProperty,omitempty" xml:"DiscreteProperty,omitempty"`
	Value            *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListQualityResultsByEntityResponseBodyDataRuleChecksSampleValue) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByEntityResponseBodyDataRuleChecksSampleValue) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecksSampleValue) SetBizDate(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecksSampleValue {
	s.BizDate = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecksSampleValue) SetDiscreteProperty(v string) *ListQualityResultsByEntityResponseBodyDataRuleChecksSampleValue {
	s.DiscreteProperty = &v
	return s
}

func (s *ListQualityResultsByEntityResponseBodyDataRuleChecksSampleValue) SetValue(v float32) *ListQualityResultsByEntityResponseBodyDataRuleChecksSampleValue {
	s.Value = &v
	return s
}

type ListQualityResultsByEntityResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListQualityResultsByEntityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListQualityResultsByEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByEntityResponse) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByEntityResponse) SetHeaders(v map[string]*string) *ListQualityResultsByEntityResponse {
	s.Headers = v
	return s
}

func (s *ListQualityResultsByEntityResponse) SetBody(v *ListQualityResultsByEntityResponseBody) *ListQualityResultsByEntityResponse {
	s.Body = v
	return s
}

type ListQualityResultsByRuleRequest struct {
	EndDate     *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	PageNumber  *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	RuleId      *int32  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	StartDate   *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
}

func (s ListQualityResultsByRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByRuleRequest) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByRuleRequest) SetEndDate(v string) *ListQualityResultsByRuleRequest {
	s.EndDate = &v
	return s
}

func (s *ListQualityResultsByRuleRequest) SetPageNumber(v int32) *ListQualityResultsByRuleRequest {
	s.PageNumber = &v
	return s
}

func (s *ListQualityResultsByRuleRequest) SetPageSize(v int32) *ListQualityResultsByRuleRequest {
	s.PageSize = &v
	return s
}

func (s *ListQualityResultsByRuleRequest) SetProjectName(v string) *ListQualityResultsByRuleRequest {
	s.ProjectName = &v
	return s
}

func (s *ListQualityResultsByRuleRequest) SetRuleId(v int32) *ListQualityResultsByRuleRequest {
	s.RuleId = &v
	return s
}

func (s *ListQualityResultsByRuleRequest) SetStartDate(v string) *ListQualityResultsByRuleRequest {
	s.StartDate = &v
	return s
}

type ListQualityResultsByRuleResponseBody struct {
	Data           *ListQualityResultsByRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                                   `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListQualityResultsByRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByRuleResponseBody) SetData(v *ListQualityResultsByRuleResponseBodyData) *ListQualityResultsByRuleResponseBody {
	s.Data = v
	return s
}

func (s *ListQualityResultsByRuleResponseBody) SetErrorCode(v string) *ListQualityResultsByRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBody) SetErrorMessage(v string) *ListQualityResultsByRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBody) SetHttpStatusCode(v int32) *ListQualityResultsByRuleResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBody) SetRequestId(v string) *ListQualityResultsByRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBody) SetSuccess(v bool) *ListQualityResultsByRuleResponseBody {
	s.Success = &v
	return s
}

type ListQualityResultsByRuleResponseBodyData struct {
	PageNumber *int32                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RuleChecks []*ListQualityResultsByRuleResponseBodyDataRuleChecks `json:"RuleChecks,omitempty" xml:"RuleChecks,omitempty" type:"Repeated"`
	TotalCount *int64                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListQualityResultsByRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByRuleResponseBodyData) SetPageNumber(v int32) *ListQualityResultsByRuleResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyData) SetPageSize(v int32) *ListQualityResultsByRuleResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyData) SetRuleChecks(v []*ListQualityResultsByRuleResponseBodyDataRuleChecks) *ListQualityResultsByRuleResponseBodyData {
	s.RuleChecks = v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyData) SetTotalCount(v int64) *ListQualityResultsByRuleResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListQualityResultsByRuleResponseBodyDataRuleChecks struct {
	ActualExpression  *string                                                             `json:"ActualExpression,omitempty" xml:"ActualExpression,omitempty"`
	BeginTime         *int64                                                              `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	BizDate           *int64                                                              `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	BlockType         *int32                                                              `json:"BlockType,omitempty" xml:"BlockType,omitempty"`
	CheckResult       *int32                                                              `json:"CheckResult,omitempty" xml:"CheckResult,omitempty"`
	CheckResultStatus *int32                                                              `json:"CheckResultStatus,omitempty" xml:"CheckResultStatus,omitempty"`
	CheckerId         *int32                                                              `json:"CheckerId,omitempty" xml:"CheckerId,omitempty"`
	CheckerName       *string                                                             `json:"CheckerName,omitempty" xml:"CheckerName,omitempty"`
	CheckerType       *int32                                                              `json:"CheckerType,omitempty" xml:"CheckerType,omitempty"`
	Comment           *string                                                             `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CriticalThreshold *float32                                                            `json:"CriticalThreshold,omitempty" xml:"CriticalThreshold,omitempty"`
	DateType          *string                                                             `json:"DateType,omitempty" xml:"DateType,omitempty"`
	DiscreteCheck     *bool                                                               `json:"DiscreteCheck,omitempty" xml:"DiscreteCheck,omitempty"`
	EndTime           *int64                                                              `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EntityId          *int32                                                              `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	ExpectValue       *float32                                                            `json:"ExpectValue,omitempty" xml:"ExpectValue,omitempty"`
	ExternalId        *string                                                             `json:"ExternalId,omitempty" xml:"ExternalId,omitempty"`
	ExternalType      *string                                                             `json:"ExternalType,omitempty" xml:"ExternalType,omitempty"`
	FixedCheck        *bool                                                               `json:"FixedCheck,omitempty" xml:"FixedCheck,omitempty"`
	Id                *int32                                                              `json:"Id,omitempty" xml:"Id,omitempty"`
	IsPrediction      *bool                                                               `json:"IsPrediction,omitempty" xml:"IsPrediction,omitempty"`
	LowerValue        *float32                                                            `json:"LowerValue,omitempty" xml:"LowerValue,omitempty"`
	MatchExpression   *string                                                             `json:"MatchExpression,omitempty" xml:"MatchExpression,omitempty"`
	MethodName        *string                                                             `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	Op                *string                                                             `json:"Op,omitempty" xml:"Op,omitempty"`
	ProjectName       *string                                                             `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	Property          *string                                                             `json:"Property,omitempty" xml:"Property,omitempty"`
	ReferenceValue    []*ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue `json:"ReferenceValue,omitempty" xml:"ReferenceValue,omitempty" type:"Repeated"`
	ResultString      *string                                                             `json:"ResultString,omitempty" xml:"ResultString,omitempty"`
	RuleId            *int32                                                              `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	RuleName          *string                                                             `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	SampleValue       []*ListQualityResultsByRuleResponseBodyDataRuleChecksSampleValue    `json:"SampleValue,omitempty" xml:"SampleValue,omitempty" type:"Repeated"`
	TableName         *string                                                             `json:"TableName,omitempty" xml:"TableName,omitempty"`
	TaskId            *string                                                             `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TemplateId        *int32                                                              `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName      *string                                                             `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TimeCost          *string                                                             `json:"TimeCost,omitempty" xml:"TimeCost,omitempty"`
	Trend             *string                                                             `json:"Trend,omitempty" xml:"Trend,omitempty"`
	UpperValue        *float32                                                            `json:"UpperValue,omitempty" xml:"UpperValue,omitempty"`
	WarningThreshold  *float32                                                            `json:"WarningThreshold,omitempty" xml:"WarningThreshold,omitempty"`
	WhereCondition    *string                                                             `json:"WhereCondition,omitempty" xml:"WhereCondition,omitempty"`
}

func (s ListQualityResultsByRuleResponseBodyDataRuleChecks) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByRuleResponseBodyDataRuleChecks) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetActualExpression(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.ActualExpression = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetBeginTime(v int64) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.BeginTime = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetBizDate(v int64) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.BizDate = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetBlockType(v int32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.BlockType = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetCheckResult(v int32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.CheckResult = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetCheckResultStatus(v int32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.CheckResultStatus = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetCheckerId(v int32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.CheckerId = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetCheckerName(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.CheckerName = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetCheckerType(v int32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.CheckerType = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetComment(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.Comment = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetCriticalThreshold(v float32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.CriticalThreshold = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetDateType(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.DateType = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetDiscreteCheck(v bool) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.DiscreteCheck = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetEndTime(v int64) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.EndTime = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetEntityId(v int32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.EntityId = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetExpectValue(v float32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.ExpectValue = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetExternalId(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.ExternalId = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetExternalType(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.ExternalType = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetFixedCheck(v bool) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.FixedCheck = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetId(v int32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.Id = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetIsPrediction(v bool) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.IsPrediction = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetLowerValue(v float32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.LowerValue = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetMatchExpression(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.MatchExpression = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetMethodName(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.MethodName = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetOp(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.Op = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetProjectName(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.ProjectName = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetProperty(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.Property = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetReferenceValue(v []*ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.ReferenceValue = v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetResultString(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.ResultString = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetRuleId(v int32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.RuleId = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetRuleName(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.RuleName = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetSampleValue(v []*ListQualityResultsByRuleResponseBodyDataRuleChecksSampleValue) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.SampleValue = v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetTableName(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.TableName = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetTaskId(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.TaskId = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetTemplateId(v int32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.TemplateId = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetTemplateName(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.TemplateName = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetTimeCost(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.TimeCost = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetTrend(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.Trend = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetUpperValue(v float32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.UpperValue = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetWarningThreshold(v float32) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.WarningThreshold = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecks) SetWhereCondition(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecks {
	s.WhereCondition = &v
	return s
}

type ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue struct {
	BizDate           *string  `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	DiscreteProperty  *string  `json:"DiscreteProperty,omitempty" xml:"DiscreteProperty,omitempty"`
	SingleCheckResult *int32   `json:"SingleCheckResult,omitempty" xml:"SingleCheckResult,omitempty"`
	Threshold         *float32 `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Value             *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue) SetBizDate(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue {
	s.BizDate = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue) SetDiscreteProperty(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue {
	s.DiscreteProperty = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue) SetSingleCheckResult(v int32) *ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue {
	s.SingleCheckResult = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue) SetThreshold(v float32) *ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue {
	s.Threshold = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue) SetValue(v float32) *ListQualityResultsByRuleResponseBodyDataRuleChecksReferenceValue {
	s.Value = &v
	return s
}

type ListQualityResultsByRuleResponseBodyDataRuleChecksSampleValue struct {
	BizDate          *string  `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	DiscreteProperty *string  `json:"DiscreteProperty,omitempty" xml:"DiscreteProperty,omitempty"`
	Value            *float32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListQualityResultsByRuleResponseBodyDataRuleChecksSampleValue) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByRuleResponseBodyDataRuleChecksSampleValue) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecksSampleValue) SetBizDate(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecksSampleValue {
	s.BizDate = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecksSampleValue) SetDiscreteProperty(v string) *ListQualityResultsByRuleResponseBodyDataRuleChecksSampleValue {
	s.DiscreteProperty = &v
	return s
}

func (s *ListQualityResultsByRuleResponseBodyDataRuleChecksSampleValue) SetValue(v float32) *ListQualityResultsByRuleResponseBodyDataRuleChecksSampleValue {
	s.Value = &v
	return s
}

type ListQualityResultsByRuleResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListQualityResultsByRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListQualityResultsByRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ListQualityResultsByRuleResponse) GoString() string {
	return s.String()
}

func (s *ListQualityResultsByRuleResponse) SetHeaders(v map[string]*string) *ListQualityResultsByRuleResponse {
	s.Headers = v
	return s
}

func (s *ListQualityResultsByRuleResponse) SetBody(v *ListQualityResultsByRuleResponseBody) *ListQualityResultsByRuleResponse {
	s.Body = v
	return s
}

type ListQualityRulesRequest struct {
	EntityId    *int64  `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	PageNumber  *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
}

func (s ListQualityRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListQualityRulesRequest) GoString() string {
	return s.String()
}

func (s *ListQualityRulesRequest) SetEntityId(v int64) *ListQualityRulesRequest {
	s.EntityId = &v
	return s
}

func (s *ListQualityRulesRequest) SetPageNumber(v int32) *ListQualityRulesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListQualityRulesRequest) SetPageSize(v int32) *ListQualityRulesRequest {
	s.PageSize = &v
	return s
}

func (s *ListQualityRulesRequest) SetProjectName(v string) *ListQualityRulesRequest {
	s.ProjectName = &v
	return s
}

type ListQualityRulesResponseBody struct {
	Data           *ListQualityRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                           `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                            `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListQualityRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListQualityRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListQualityRulesResponseBody) SetData(v *ListQualityRulesResponseBodyData) *ListQualityRulesResponseBody {
	s.Data = v
	return s
}

func (s *ListQualityRulesResponseBody) SetErrorCode(v string) *ListQualityRulesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListQualityRulesResponseBody) SetErrorMessage(v string) *ListQualityRulesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListQualityRulesResponseBody) SetHttpStatusCode(v int32) *ListQualityRulesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListQualityRulesResponseBody) SetRequestId(v string) *ListQualityRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListQualityRulesResponseBody) SetSuccess(v bool) *ListQualityRulesResponseBody {
	s.Success = &v
	return s
}

type ListQualityRulesResponseBodyData struct {
	PageNumber *int32                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Rules      []*ListQualityRulesResponseBodyDataRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
	TotalCount *int64                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListQualityRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListQualityRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListQualityRulesResponseBodyData) SetPageNumber(v int32) *ListQualityRulesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListQualityRulesResponseBodyData) SetPageSize(v int32) *ListQualityRulesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListQualityRulesResponseBodyData) SetRules(v []*ListQualityRulesResponseBodyDataRules) *ListQualityRulesResponseBodyData {
	s.Rules = v
	return s
}

func (s *ListQualityRulesResponseBodyData) SetTotalCount(v int64) *ListQualityRulesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListQualityRulesResponseBodyDataRules struct {
	BlockType                *int32  `json:"BlockType,omitempty" xml:"BlockType,omitempty"`
	CheckerId                *int32  `json:"CheckerId,omitempty" xml:"CheckerId,omitempty"`
	Comment                  *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CriticalThreshold        *string `json:"CriticalThreshold,omitempty" xml:"CriticalThreshold,omitempty"`
	EntityId                 *int32  `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	ExpectValue              *string `json:"ExpectValue,omitempty" xml:"ExpectValue,omitempty"`
	FixCheck                 *bool   `json:"FixCheck,omitempty" xml:"FixCheck,omitempty"`
	HistoryCriticalThreshold *string `json:"HistoryCriticalThreshold,omitempty" xml:"HistoryCriticalThreshold,omitempty"`
	HistoryWarningThreshold  *string `json:"HistoryWarningThreshold,omitempty" xml:"HistoryWarningThreshold,omitempty"`
	Id                       *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	MatchExpression          *string `json:"MatchExpression,omitempty" xml:"MatchExpression,omitempty"`
	MethodId                 *int32  `json:"MethodId,omitempty" xml:"MethodId,omitempty"`
	MethodName               *string `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	OnDuty                   *string `json:"OnDuty,omitempty" xml:"OnDuty,omitempty"`
	OnDutyAccountName        *string `json:"OnDutyAccountName,omitempty" xml:"OnDutyAccountName,omitempty"`
	ProjectName              *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	Property                 *string `json:"Property,omitempty" xml:"Property,omitempty"`
	PropertyKey              *string `json:"PropertyKey,omitempty" xml:"PropertyKey,omitempty"`
	RuleCheckerRelationId    *int32  `json:"RuleCheckerRelationId,omitempty" xml:"RuleCheckerRelationId,omitempty"`
	// 规则名称
	RuleName         *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleType         *int32  `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	TableName        *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	TemplateId       *int32  `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName     *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	Trend            *string `json:"Trend,omitempty" xml:"Trend,omitempty"`
	WarningThreshold *string `json:"WarningThreshold,omitempty" xml:"WarningThreshold,omitempty"`
}

func (s ListQualityRulesResponseBodyDataRules) String() string {
	return tea.Prettify(s)
}

func (s ListQualityRulesResponseBodyDataRules) GoString() string {
	return s.String()
}

func (s *ListQualityRulesResponseBodyDataRules) SetBlockType(v int32) *ListQualityRulesResponseBodyDataRules {
	s.BlockType = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetCheckerId(v int32) *ListQualityRulesResponseBodyDataRules {
	s.CheckerId = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetComment(v string) *ListQualityRulesResponseBodyDataRules {
	s.Comment = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetCriticalThreshold(v string) *ListQualityRulesResponseBodyDataRules {
	s.CriticalThreshold = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetEntityId(v int32) *ListQualityRulesResponseBodyDataRules {
	s.EntityId = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetExpectValue(v string) *ListQualityRulesResponseBodyDataRules {
	s.ExpectValue = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetFixCheck(v bool) *ListQualityRulesResponseBodyDataRules {
	s.FixCheck = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetHistoryCriticalThreshold(v string) *ListQualityRulesResponseBodyDataRules {
	s.HistoryCriticalThreshold = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetHistoryWarningThreshold(v string) *ListQualityRulesResponseBodyDataRules {
	s.HistoryWarningThreshold = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetId(v int32) *ListQualityRulesResponseBodyDataRules {
	s.Id = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetMatchExpression(v string) *ListQualityRulesResponseBodyDataRules {
	s.MatchExpression = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetMethodId(v int32) *ListQualityRulesResponseBodyDataRules {
	s.MethodId = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetMethodName(v string) *ListQualityRulesResponseBodyDataRules {
	s.MethodName = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetOnDuty(v string) *ListQualityRulesResponseBodyDataRules {
	s.OnDuty = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetOnDutyAccountName(v string) *ListQualityRulesResponseBodyDataRules {
	s.OnDutyAccountName = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetProjectName(v string) *ListQualityRulesResponseBodyDataRules {
	s.ProjectName = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetProperty(v string) *ListQualityRulesResponseBodyDataRules {
	s.Property = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetPropertyKey(v string) *ListQualityRulesResponseBodyDataRules {
	s.PropertyKey = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetRuleCheckerRelationId(v int32) *ListQualityRulesResponseBodyDataRules {
	s.RuleCheckerRelationId = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetRuleName(v string) *ListQualityRulesResponseBodyDataRules {
	s.RuleName = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetRuleType(v int32) *ListQualityRulesResponseBodyDataRules {
	s.RuleType = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetTableName(v string) *ListQualityRulesResponseBodyDataRules {
	s.TableName = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetTemplateId(v int32) *ListQualityRulesResponseBodyDataRules {
	s.TemplateId = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetTemplateName(v string) *ListQualityRulesResponseBodyDataRules {
	s.TemplateName = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetTrend(v string) *ListQualityRulesResponseBodyDataRules {
	s.Trend = &v
	return s
}

func (s *ListQualityRulesResponseBodyDataRules) SetWarningThreshold(v string) *ListQualityRulesResponseBodyDataRules {
	s.WarningThreshold = &v
	return s
}

type ListQualityRulesResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListQualityRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListQualityRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListQualityRulesResponse) GoString() string {
	return s.String()
}

func (s *ListQualityRulesResponse) SetHeaders(v map[string]*string) *ListQualityRulesResponse {
	s.Headers = v
	return s
}

func (s *ListQualityRulesResponse) SetBody(v *ListQualityRulesResponseBody) *ListQualityRulesResponse {
	s.Body = v
	return s
}

type ListRefDISyncTasksRequest struct {
	DatasourceName *string `json:"DatasourceName,omitempty" xml:"DatasourceName,omitempty"`
	PageNumber     *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RefType        *string `json:"RefType,omitempty" xml:"RefType,omitempty"`
	TaskType       *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s ListRefDISyncTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRefDISyncTasksRequest) GoString() string {
	return s.String()
}

func (s *ListRefDISyncTasksRequest) SetDatasourceName(v string) *ListRefDISyncTasksRequest {
	s.DatasourceName = &v
	return s
}

func (s *ListRefDISyncTasksRequest) SetPageNumber(v int64) *ListRefDISyncTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRefDISyncTasksRequest) SetPageSize(v int64) *ListRefDISyncTasksRequest {
	s.PageSize = &v
	return s
}

func (s *ListRefDISyncTasksRequest) SetProjectId(v int64) *ListRefDISyncTasksRequest {
	s.ProjectId = &v
	return s
}

func (s *ListRefDISyncTasksRequest) SetRefType(v string) *ListRefDISyncTasksRequest {
	s.RefType = &v
	return s
}

func (s *ListRefDISyncTasksRequest) SetTaskType(v string) *ListRefDISyncTasksRequest {
	s.TaskType = &v
	return s
}

type ListRefDISyncTasksResponseBody struct {
	Data      *ListRefDISyncTasksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListRefDISyncTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRefDISyncTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListRefDISyncTasksResponseBody) SetData(v *ListRefDISyncTasksResponseBodyData) *ListRefDISyncTasksResponseBody {
	s.Data = v
	return s
}

func (s *ListRefDISyncTasksResponseBody) SetRequestId(v string) *ListRefDISyncTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRefDISyncTasksResponseBody) SetSuccess(v bool) *ListRefDISyncTasksResponseBody {
	s.Success = &v
	return s
}

type ListRefDISyncTasksResponseBodyData struct {
	DISyncTasks []*ListRefDISyncTasksResponseBodyDataDISyncTasks `json:"DISyncTasks,omitempty" xml:"DISyncTasks,omitempty" type:"Repeated"`
}

func (s ListRefDISyncTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListRefDISyncTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListRefDISyncTasksResponseBodyData) SetDISyncTasks(v []*ListRefDISyncTasksResponseBodyDataDISyncTasks) *ListRefDISyncTasksResponseBodyData {
	s.DISyncTasks = v
	return s
}

type ListRefDISyncTasksResponseBodyDataDISyncTasks struct {
	DiDestinationDatasource *string `json:"DiDestinationDatasource,omitempty" xml:"DiDestinationDatasource,omitempty"`
	DiSourceDatasource      *string `json:"DiSourceDatasource,omitempty" xml:"DiSourceDatasource,omitempty"`
	NodeId                  *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName                *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	TaskType                *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s ListRefDISyncTasksResponseBodyDataDISyncTasks) String() string {
	return tea.Prettify(s)
}

func (s ListRefDISyncTasksResponseBodyDataDISyncTasks) GoString() string {
	return s.String()
}

func (s *ListRefDISyncTasksResponseBodyDataDISyncTasks) SetDiDestinationDatasource(v string) *ListRefDISyncTasksResponseBodyDataDISyncTasks {
	s.DiDestinationDatasource = &v
	return s
}

func (s *ListRefDISyncTasksResponseBodyDataDISyncTasks) SetDiSourceDatasource(v string) *ListRefDISyncTasksResponseBodyDataDISyncTasks {
	s.DiSourceDatasource = &v
	return s
}

func (s *ListRefDISyncTasksResponseBodyDataDISyncTasks) SetNodeId(v int64) *ListRefDISyncTasksResponseBodyDataDISyncTasks {
	s.NodeId = &v
	return s
}

func (s *ListRefDISyncTasksResponseBodyDataDISyncTasks) SetNodeName(v string) *ListRefDISyncTasksResponseBodyDataDISyncTasks {
	s.NodeName = &v
	return s
}

func (s *ListRefDISyncTasksResponseBodyDataDISyncTasks) SetTaskType(v string) *ListRefDISyncTasksResponseBodyDataDISyncTasks {
	s.TaskType = &v
	return s
}

type ListRefDISyncTasksResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListRefDISyncTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRefDISyncTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRefDISyncTasksResponse) GoString() string {
	return s.String()
}

func (s *ListRefDISyncTasksResponse) SetHeaders(v map[string]*string) *ListRefDISyncTasksResponse {
	s.Headers = v
	return s
}

func (s *ListRefDISyncTasksResponse) SetBody(v *ListRefDISyncTasksResponseBody) *ListRefDISyncTasksResponse {
	s.Body = v
	return s
}

type ListRemindsRequest struct {
	AlertTarget *string `json:"AlertTarget,omitempty" xml:"AlertTarget,omitempty"`
	Founder     *string `json:"Founder,omitempty" xml:"Founder,omitempty"`
	NodeId      *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	PageNumber  *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RemindTypes *string `json:"RemindTypes,omitempty" xml:"RemindTypes,omitempty"`
	SearchText  *string `json:"SearchText,omitempty" xml:"SearchText,omitempty"`
}

func (s ListRemindsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRemindsRequest) GoString() string {
	return s.String()
}

func (s *ListRemindsRequest) SetAlertTarget(v string) *ListRemindsRequest {
	s.AlertTarget = &v
	return s
}

func (s *ListRemindsRequest) SetFounder(v string) *ListRemindsRequest {
	s.Founder = &v
	return s
}

func (s *ListRemindsRequest) SetNodeId(v int64) *ListRemindsRequest {
	s.NodeId = &v
	return s
}

func (s *ListRemindsRequest) SetPageNumber(v int32) *ListRemindsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRemindsRequest) SetPageSize(v int32) *ListRemindsRequest {
	s.PageSize = &v
	return s
}

func (s *ListRemindsRequest) SetRemindTypes(v string) *ListRemindsRequest {
	s.RemindTypes = &v
	return s
}

func (s *ListRemindsRequest) SetSearchText(v string) *ListRemindsRequest {
	s.SearchText = &v
	return s
}

type ListRemindsResponseBody struct {
	Data           *ListRemindsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                       `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListRemindsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRemindsResponseBody) GoString() string {
	return s.String()
}

func (s *ListRemindsResponseBody) SetData(v *ListRemindsResponseBodyData) *ListRemindsResponseBody {
	s.Data = v
	return s
}

func (s *ListRemindsResponseBody) SetErrorCode(v string) *ListRemindsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListRemindsResponseBody) SetErrorMessage(v string) *ListRemindsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListRemindsResponseBody) SetHttpStatusCode(v int32) *ListRemindsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListRemindsResponseBody) SetRequestId(v string) *ListRemindsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRemindsResponseBody) SetSuccess(v bool) *ListRemindsResponseBody {
	s.Success = &v
	return s
}

type ListRemindsResponseBodyData struct {
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Reminds    []*ListRemindsResponseBodyDataReminds `json:"Reminds,omitempty" xml:"Reminds,omitempty" type:"Repeated"`
	TotalCount *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRemindsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListRemindsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListRemindsResponseBodyData) SetPageNumber(v int32) *ListRemindsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListRemindsResponseBodyData) SetPageSize(v int32) *ListRemindsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListRemindsResponseBodyData) SetReminds(v []*ListRemindsResponseBodyDataReminds) *ListRemindsResponseBodyData {
	s.Reminds = v
	return s
}

func (s *ListRemindsResponseBodyData) SetTotalCount(v int32) *ListRemindsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListRemindsResponseBodyDataReminds struct {
	AlertMethods  []*string `json:"AlertMethods,omitempty" xml:"AlertMethods,omitempty" type:"Repeated"`
	AlertTargets  []*string `json:"AlertTargets,omitempty" xml:"AlertTargets,omitempty" type:"Repeated"`
	AlertUnit     *string   `json:"AlertUnit,omitempty" xml:"AlertUnit,omitempty"`
	BaselineIds   []*int64  `json:"BaselineIds,omitempty" xml:"BaselineIds,omitempty" type:"Repeated"`
	BizProcessIds []*int64  `json:"BizProcessIds,omitempty" xml:"BizProcessIds,omitempty" type:"Repeated"`
	DndEnd        *string   `json:"DndEnd,omitempty" xml:"DndEnd,omitempty"`
	DndStart      *string   `json:"DndStart,omitempty" xml:"DndStart,omitempty"`
	Founder       *string   `json:"Founder,omitempty" xml:"Founder,omitempty"`
	NodeIds       []*int64  `json:"NodeIds,omitempty" xml:"NodeIds,omitempty" type:"Repeated"`
	ProjectIds    []*int64  `json:"ProjectIds,omitempty" xml:"ProjectIds,omitempty" type:"Repeated"`
	RemindId      *int64    `json:"RemindId,omitempty" xml:"RemindId,omitempty"`
	RemindName    *string   `json:"RemindName,omitempty" xml:"RemindName,omitempty"`
	RemindType    *string   `json:"RemindType,omitempty" xml:"RemindType,omitempty"`
	RemindUnit    *string   `json:"RemindUnit,omitempty" xml:"RemindUnit,omitempty"`
	Useflag       *bool     `json:"Useflag,omitempty" xml:"Useflag,omitempty"`
}

func (s ListRemindsResponseBodyDataReminds) String() string {
	return tea.Prettify(s)
}

func (s ListRemindsResponseBodyDataReminds) GoString() string {
	return s.String()
}

func (s *ListRemindsResponseBodyDataReminds) SetAlertMethods(v []*string) *ListRemindsResponseBodyDataReminds {
	s.AlertMethods = v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetAlertTargets(v []*string) *ListRemindsResponseBodyDataReminds {
	s.AlertTargets = v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetAlertUnit(v string) *ListRemindsResponseBodyDataReminds {
	s.AlertUnit = &v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetBaselineIds(v []*int64) *ListRemindsResponseBodyDataReminds {
	s.BaselineIds = v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetBizProcessIds(v []*int64) *ListRemindsResponseBodyDataReminds {
	s.BizProcessIds = v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetDndEnd(v string) *ListRemindsResponseBodyDataReminds {
	s.DndEnd = &v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetDndStart(v string) *ListRemindsResponseBodyDataReminds {
	s.DndStart = &v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetFounder(v string) *ListRemindsResponseBodyDataReminds {
	s.Founder = &v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetNodeIds(v []*int64) *ListRemindsResponseBodyDataReminds {
	s.NodeIds = v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetProjectIds(v []*int64) *ListRemindsResponseBodyDataReminds {
	s.ProjectIds = v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetRemindId(v int64) *ListRemindsResponseBodyDataReminds {
	s.RemindId = &v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetRemindName(v string) *ListRemindsResponseBodyDataReminds {
	s.RemindName = &v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetRemindType(v string) *ListRemindsResponseBodyDataReminds {
	s.RemindType = &v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetRemindUnit(v string) *ListRemindsResponseBodyDataReminds {
	s.RemindUnit = &v
	return s
}

func (s *ListRemindsResponseBodyDataReminds) SetUseflag(v bool) *ListRemindsResponseBodyDataReminds {
	s.Useflag = &v
	return s
}

type ListRemindsResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListRemindsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRemindsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRemindsResponse) GoString() string {
	return s.String()
}

func (s *ListRemindsResponse) SetHeaders(v map[string]*string) *ListRemindsResponse {
	s.Headers = v
	return s
}

func (s *ListRemindsResponse) SetBody(v *ListRemindsResponseBody) *ListRemindsResponse {
	s.Body = v
	return s
}

type ListResourceGroupsRequest struct {
	BizExtKey         *string `json:"BizExtKey,omitempty" xml:"BizExtKey,omitempty"`
	Keyword           *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	ResourceGroupType *int32  `json:"ResourceGroupType,omitempty" xml:"ResourceGroupType,omitempty"`
}

func (s ListResourceGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListResourceGroupsRequest) SetBizExtKey(v string) *ListResourceGroupsRequest {
	s.BizExtKey = &v
	return s
}

func (s *ListResourceGroupsRequest) SetKeyword(v string) *ListResourceGroupsRequest {
	s.Keyword = &v
	return s
}

func (s *ListResourceGroupsRequest) SetResourceGroupType(v int32) *ListResourceGroupsRequest {
	s.ResourceGroupType = &v
	return s
}

type ListResourceGroupsResponseBody struct {
	Data           []*ListResourceGroupsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	HttpStatusCode *int32                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListResourceGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListResourceGroupsResponseBody) SetData(v []*ListResourceGroupsResponseBodyData) *ListResourceGroupsResponseBody {
	s.Data = v
	return s
}

func (s *ListResourceGroupsResponseBody) SetHttpStatusCode(v int32) *ListResourceGroupsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListResourceGroupsResponseBody) SetRequestId(v string) *ListResourceGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListResourceGroupsResponseBody) SetSuccess(v bool) *ListResourceGroupsResponseBody {
	s.Success = &v
	return s
}

type ListResourceGroupsResponseBodyData struct {
	BizExtKey         *string                `json:"BizExtKey,omitempty" xml:"BizExtKey,omitempty"`
	Cluster           *string                `json:"Cluster,omitempty" xml:"Cluster,omitempty"`
	CreateTime        *string                `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	EnableKp          *bool                  `json:"EnableKp,omitempty" xml:"EnableKp,omitempty"`
	Id                *int64                 `json:"Id,omitempty" xml:"Id,omitempty"`
	Identifier        *string                `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	IsDefault         *bool                  `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	Mode              *string                `json:"Mode,omitempty" xml:"Mode,omitempty"`
	Name              *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	ResourceGroupType *string                `json:"ResourceGroupType,omitempty" xml:"ResourceGroupType,omitempty"`
	Sequence          *int32                 `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
	Specs             map[string]interface{} `json:"Specs,omitempty" xml:"Specs,omitempty"`
	Status            *int32                 `json:"Status,omitempty" xml:"Status,omitempty"`
	TenantId          *int64                 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	UpdateTime        *string                `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s ListResourceGroupsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListResourceGroupsResponseBodyData) SetBizExtKey(v string) *ListResourceGroupsResponseBodyData {
	s.BizExtKey = &v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetCluster(v string) *ListResourceGroupsResponseBodyData {
	s.Cluster = &v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetCreateTime(v string) *ListResourceGroupsResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetEnableKp(v bool) *ListResourceGroupsResponseBodyData {
	s.EnableKp = &v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetId(v int64) *ListResourceGroupsResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetIdentifier(v string) *ListResourceGroupsResponseBodyData {
	s.Identifier = &v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetIsDefault(v bool) *ListResourceGroupsResponseBodyData {
	s.IsDefault = &v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetMode(v string) *ListResourceGroupsResponseBodyData {
	s.Mode = &v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetName(v string) *ListResourceGroupsResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetResourceGroupType(v string) *ListResourceGroupsResponseBodyData {
	s.ResourceGroupType = &v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetSequence(v int32) *ListResourceGroupsResponseBodyData {
	s.Sequence = &v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetSpecs(v map[string]interface{}) *ListResourceGroupsResponseBodyData {
	s.Specs = v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetStatus(v int32) *ListResourceGroupsResponseBodyData {
	s.Status = &v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetTenantId(v int64) *ListResourceGroupsResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *ListResourceGroupsResponseBodyData) SetUpdateTime(v string) *ListResourceGroupsResponseBodyData {
	s.UpdateTime = &v
	return s
}

type ListResourceGroupsResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListResourceGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListResourceGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListResourceGroupsResponse) SetHeaders(v map[string]*string) *ListResourceGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListResourceGroupsResponse) SetBody(v *ListResourceGroupsResponseBody) *ListResourceGroupsResponse {
	s.Body = v
	return s
}

type ListSuccessInstanceAmountRequest struct {
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListSuccessInstanceAmountRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSuccessInstanceAmountRequest) GoString() string {
	return s.String()
}

func (s *ListSuccessInstanceAmountRequest) SetProjectId(v int64) *ListSuccessInstanceAmountRequest {
	s.ProjectId = &v
	return s
}

type ListSuccessInstanceAmountResponseBody struct {
	InstanceStatusTrend *ListSuccessInstanceAmountResponseBodyInstanceStatusTrend `json:"InstanceStatusTrend,omitempty" xml:"InstanceStatusTrend,omitempty" type:"Struct"`
	RequestId           *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListSuccessInstanceAmountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSuccessInstanceAmountResponseBody) GoString() string {
	return s.String()
}

func (s *ListSuccessInstanceAmountResponseBody) SetInstanceStatusTrend(v *ListSuccessInstanceAmountResponseBodyInstanceStatusTrend) *ListSuccessInstanceAmountResponseBody {
	s.InstanceStatusTrend = v
	return s
}

func (s *ListSuccessInstanceAmountResponseBody) SetRequestId(v string) *ListSuccessInstanceAmountResponseBody {
	s.RequestId = &v
	return s
}

type ListSuccessInstanceAmountResponseBodyInstanceStatusTrend struct {
	AvgTrend       []*ListSuccessInstanceAmountResponseBodyInstanceStatusTrendAvgTrend       `json:"AvgTrend,omitempty" xml:"AvgTrend,omitempty" type:"Repeated"`
	TodayTrend     []*ListSuccessInstanceAmountResponseBodyInstanceStatusTrendTodayTrend     `json:"TodayTrend,omitempty" xml:"TodayTrend,omitempty" type:"Repeated"`
	YesterdayTrend []*ListSuccessInstanceAmountResponseBodyInstanceStatusTrendYesterdayTrend `json:"YesterdayTrend,omitempty" xml:"YesterdayTrend,omitempty" type:"Repeated"`
}

func (s ListSuccessInstanceAmountResponseBodyInstanceStatusTrend) String() string {
	return tea.Prettify(s)
}

func (s ListSuccessInstanceAmountResponseBodyInstanceStatusTrend) GoString() string {
	return s.String()
}

func (s *ListSuccessInstanceAmountResponseBodyInstanceStatusTrend) SetAvgTrend(v []*ListSuccessInstanceAmountResponseBodyInstanceStatusTrendAvgTrend) *ListSuccessInstanceAmountResponseBodyInstanceStatusTrend {
	s.AvgTrend = v
	return s
}

func (s *ListSuccessInstanceAmountResponseBodyInstanceStatusTrend) SetTodayTrend(v []*ListSuccessInstanceAmountResponseBodyInstanceStatusTrendTodayTrend) *ListSuccessInstanceAmountResponseBodyInstanceStatusTrend {
	s.TodayTrend = v
	return s
}

func (s *ListSuccessInstanceAmountResponseBodyInstanceStatusTrend) SetYesterdayTrend(v []*ListSuccessInstanceAmountResponseBodyInstanceStatusTrendYesterdayTrend) *ListSuccessInstanceAmountResponseBodyInstanceStatusTrend {
	s.YesterdayTrend = v
	return s
}

type ListSuccessInstanceAmountResponseBodyInstanceStatusTrendAvgTrend struct {
	Count     *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	TimePoint *string `json:"TimePoint,omitempty" xml:"TimePoint,omitempty"`
}

func (s ListSuccessInstanceAmountResponseBodyInstanceStatusTrendAvgTrend) String() string {
	return tea.Prettify(s)
}

func (s ListSuccessInstanceAmountResponseBodyInstanceStatusTrendAvgTrend) GoString() string {
	return s.String()
}

func (s *ListSuccessInstanceAmountResponseBodyInstanceStatusTrendAvgTrend) SetCount(v int32) *ListSuccessInstanceAmountResponseBodyInstanceStatusTrendAvgTrend {
	s.Count = &v
	return s
}

func (s *ListSuccessInstanceAmountResponseBodyInstanceStatusTrendAvgTrend) SetTimePoint(v string) *ListSuccessInstanceAmountResponseBodyInstanceStatusTrendAvgTrend {
	s.TimePoint = &v
	return s
}

type ListSuccessInstanceAmountResponseBodyInstanceStatusTrendTodayTrend struct {
	Count     *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	TimePoint *string `json:"TimePoint,omitempty" xml:"TimePoint,omitempty"`
}

func (s ListSuccessInstanceAmountResponseBodyInstanceStatusTrendTodayTrend) String() string {
	return tea.Prettify(s)
}

func (s ListSuccessInstanceAmountResponseBodyInstanceStatusTrendTodayTrend) GoString() string {
	return s.String()
}

func (s *ListSuccessInstanceAmountResponseBodyInstanceStatusTrendTodayTrend) SetCount(v int32) *ListSuccessInstanceAmountResponseBodyInstanceStatusTrendTodayTrend {
	s.Count = &v
	return s
}

func (s *ListSuccessInstanceAmountResponseBodyInstanceStatusTrendTodayTrend) SetTimePoint(v string) *ListSuccessInstanceAmountResponseBodyInstanceStatusTrendTodayTrend {
	s.TimePoint = &v
	return s
}

type ListSuccessInstanceAmountResponseBodyInstanceStatusTrendYesterdayTrend struct {
	Count     *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	TimePoint *string `json:"TimePoint,omitempty" xml:"TimePoint,omitempty"`
}

func (s ListSuccessInstanceAmountResponseBodyInstanceStatusTrendYesterdayTrend) String() string {
	return tea.Prettify(s)
}

func (s ListSuccessInstanceAmountResponseBodyInstanceStatusTrendYesterdayTrend) GoString() string {
	return s.String()
}

func (s *ListSuccessInstanceAmountResponseBodyInstanceStatusTrendYesterdayTrend) SetCount(v int32) *ListSuccessInstanceAmountResponseBodyInstanceStatusTrendYesterdayTrend {
	s.Count = &v
	return s
}

func (s *ListSuccessInstanceAmountResponseBodyInstanceStatusTrendYesterdayTrend) SetTimePoint(v string) *ListSuccessInstanceAmountResponseBodyInstanceStatusTrendYesterdayTrend {
	s.TimePoint = &v
	return s
}

type ListSuccessInstanceAmountResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListSuccessInstanceAmountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSuccessInstanceAmountResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSuccessInstanceAmountResponse) GoString() string {
	return s.String()
}

func (s *ListSuccessInstanceAmountResponse) SetHeaders(v map[string]*string) *ListSuccessInstanceAmountResponse {
	s.Headers = v
	return s
}

func (s *ListSuccessInstanceAmountResponse) SetBody(v *ListSuccessInstanceAmountResponseBody) *ListSuccessInstanceAmountResponse {
	s.Body = v
	return s
}

type ListTableLevelRequest struct {
	LevelType *int32 `json:"LevelType,omitempty" xml:"LevelType,omitempty"`
	PageNum   *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize  *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListTableLevelRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTableLevelRequest) GoString() string {
	return s.String()
}

func (s *ListTableLevelRequest) SetLevelType(v int32) *ListTableLevelRequest {
	s.LevelType = &v
	return s
}

func (s *ListTableLevelRequest) SetPageNum(v int32) *ListTableLevelRequest {
	s.PageNum = &v
	return s
}

func (s *ListTableLevelRequest) SetPageSize(v int32) *ListTableLevelRequest {
	s.PageSize = &v
	return s
}

func (s *ListTableLevelRequest) SetProjectId(v int64) *ListTableLevelRequest {
	s.ProjectId = &v
	return s
}

type ListTableLevelResponseBody struct {
	ErrorCode      *string                                   `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
	TableLevelInfo *ListTableLevelResponseBodyTableLevelInfo `json:"TableLevelInfo,omitempty" xml:"TableLevelInfo,omitempty" type:"Struct"`
}

func (s ListTableLevelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTableLevelResponseBody) GoString() string {
	return s.String()
}

func (s *ListTableLevelResponseBody) SetErrorCode(v string) *ListTableLevelResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListTableLevelResponseBody) SetErrorMessage(v string) *ListTableLevelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListTableLevelResponseBody) SetHttpStatusCode(v int32) *ListTableLevelResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTableLevelResponseBody) SetRequestId(v string) *ListTableLevelResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTableLevelResponseBody) SetSuccess(v bool) *ListTableLevelResponseBody {
	s.Success = &v
	return s
}

func (s *ListTableLevelResponseBody) SetTableLevelInfo(v *ListTableLevelResponseBodyTableLevelInfo) *ListTableLevelResponseBody {
	s.TableLevelInfo = v
	return s
}

type ListTableLevelResponseBodyTableLevelInfo struct {
	LevelList  []*ListTableLevelResponseBodyTableLevelInfoLevelList `json:"LevelList,omitempty" xml:"LevelList,omitempty" type:"Repeated"`
	TotalCount *int64                                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTableLevelResponseBodyTableLevelInfo) String() string {
	return tea.Prettify(s)
}

func (s ListTableLevelResponseBodyTableLevelInfo) GoString() string {
	return s.String()
}

func (s *ListTableLevelResponseBodyTableLevelInfo) SetLevelList(v []*ListTableLevelResponseBodyTableLevelInfoLevelList) *ListTableLevelResponseBodyTableLevelInfo {
	s.LevelList = v
	return s
}

func (s *ListTableLevelResponseBodyTableLevelInfo) SetTotalCount(v int64) *ListTableLevelResponseBodyTableLevelInfo {
	s.TotalCount = &v
	return s
}

type ListTableLevelResponseBodyTableLevelInfoLevelList struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	LevelId     *int64  `json:"LevelId,omitempty" xml:"LevelId,omitempty"`
	LevelType   *int32  `json:"LevelType,omitempty" xml:"LevelType,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListTableLevelResponseBodyTableLevelInfoLevelList) String() string {
	return tea.Prettify(s)
}

func (s ListTableLevelResponseBodyTableLevelInfoLevelList) GoString() string {
	return s.String()
}

func (s *ListTableLevelResponseBodyTableLevelInfoLevelList) SetDescription(v string) *ListTableLevelResponseBodyTableLevelInfoLevelList {
	s.Description = &v
	return s
}

func (s *ListTableLevelResponseBodyTableLevelInfoLevelList) SetLevelId(v int64) *ListTableLevelResponseBodyTableLevelInfoLevelList {
	s.LevelId = &v
	return s
}

func (s *ListTableLevelResponseBodyTableLevelInfoLevelList) SetLevelType(v int32) *ListTableLevelResponseBodyTableLevelInfoLevelList {
	s.LevelType = &v
	return s
}

func (s *ListTableLevelResponseBodyTableLevelInfoLevelList) SetName(v string) *ListTableLevelResponseBodyTableLevelInfoLevelList {
	s.Name = &v
	return s
}

func (s *ListTableLevelResponseBodyTableLevelInfoLevelList) SetProjectId(v int64) *ListTableLevelResponseBodyTableLevelInfoLevelList {
	s.ProjectId = &v
	return s
}

type ListTableLevelResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListTableLevelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTableLevelResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTableLevelResponse) GoString() string {
	return s.String()
}

func (s *ListTableLevelResponse) SetHeaders(v map[string]*string) *ListTableLevelResponse {
	s.Headers = v
	return s
}

func (s *ListTableLevelResponse) SetBody(v *ListTableLevelResponseBody) *ListTableLevelResponse {
	s.Body = v
	return s
}

type ListTableThemeRequest struct {
	PageNum   *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize  *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ParentId  *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListTableThemeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTableThemeRequest) GoString() string {
	return s.String()
}

func (s *ListTableThemeRequest) SetPageNum(v int32) *ListTableThemeRequest {
	s.PageNum = &v
	return s
}

func (s *ListTableThemeRequest) SetPageSize(v int32) *ListTableThemeRequest {
	s.PageSize = &v
	return s
}

func (s *ListTableThemeRequest) SetParentId(v int64) *ListTableThemeRequest {
	s.ParentId = &v
	return s
}

func (s *ListTableThemeRequest) SetProjectId(v int64) *ListTableThemeRequest {
	s.ProjectId = &v
	return s
}

type ListTableThemeResponseBody struct {
	Data           *ListTableThemeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                         `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListTableThemeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTableThemeResponseBody) GoString() string {
	return s.String()
}

func (s *ListTableThemeResponseBody) SetData(v *ListTableThemeResponseBodyData) *ListTableThemeResponseBody {
	s.Data = v
	return s
}

func (s *ListTableThemeResponseBody) SetErrorCode(v string) *ListTableThemeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListTableThemeResponseBody) SetErrorMessage(v string) *ListTableThemeResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListTableThemeResponseBody) SetHttpStatusCode(v int32) *ListTableThemeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTableThemeResponseBody) SetRequestId(v string) *ListTableThemeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTableThemeResponseBody) SetSuccess(v bool) *ListTableThemeResponseBody {
	s.Success = &v
	return s
}

type ListTableThemeResponseBodyData struct {
	ThemeList  []*ListTableThemeResponseBodyDataThemeList `json:"ThemeList,omitempty" xml:"ThemeList,omitempty" type:"Repeated"`
	TotalCount *int64                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTableThemeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListTableThemeResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListTableThemeResponseBodyData) SetThemeList(v []*ListTableThemeResponseBodyDataThemeList) *ListTableThemeResponseBodyData {
	s.ThemeList = v
	return s
}

func (s *ListTableThemeResponseBodyData) SetTotalCount(v int64) *ListTableThemeResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListTableThemeResponseBodyDataThemeList struct {
	CreateTimeStamp *int64  `json:"CreateTimeStamp,omitempty" xml:"CreateTimeStamp,omitempty"`
	Creator         *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Level           *int32  `json:"Level,omitempty" xml:"Level,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ParentId        *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ProjectId       *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ThemeId         *int64  `json:"ThemeId,omitempty" xml:"ThemeId,omitempty"`
}

func (s ListTableThemeResponseBodyDataThemeList) String() string {
	return tea.Prettify(s)
}

func (s ListTableThemeResponseBodyDataThemeList) GoString() string {
	return s.String()
}

func (s *ListTableThemeResponseBodyDataThemeList) SetCreateTimeStamp(v int64) *ListTableThemeResponseBodyDataThemeList {
	s.CreateTimeStamp = &v
	return s
}

func (s *ListTableThemeResponseBodyDataThemeList) SetCreator(v string) *ListTableThemeResponseBodyDataThemeList {
	s.Creator = &v
	return s
}

func (s *ListTableThemeResponseBodyDataThemeList) SetLevel(v int32) *ListTableThemeResponseBodyDataThemeList {
	s.Level = &v
	return s
}

func (s *ListTableThemeResponseBodyDataThemeList) SetName(v string) *ListTableThemeResponseBodyDataThemeList {
	s.Name = &v
	return s
}

func (s *ListTableThemeResponseBodyDataThemeList) SetParentId(v int64) *ListTableThemeResponseBodyDataThemeList {
	s.ParentId = &v
	return s
}

func (s *ListTableThemeResponseBodyDataThemeList) SetProjectId(v int64) *ListTableThemeResponseBodyDataThemeList {
	s.ProjectId = &v
	return s
}

func (s *ListTableThemeResponseBodyDataThemeList) SetThemeId(v int64) *ListTableThemeResponseBodyDataThemeList {
	s.ThemeId = &v
	return s
}

type ListTableThemeResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListTableThemeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTableThemeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTableThemeResponse) GoString() string {
	return s.String()
}

func (s *ListTableThemeResponse) SetHeaders(v map[string]*string) *ListTableThemeResponse {
	s.Headers = v
	return s
}

func (s *ListTableThemeResponse) SetBody(v *ListTableThemeResponseBody) *ListTableThemeResponse {
	s.Body = v
	return s
}

type ListTopicsRequest struct {
	BeginTime     *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId    *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NodeId        *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TopicStatuses *string `json:"TopicStatuses,omitempty" xml:"TopicStatuses,omitempty"`
	TopicTypes    *string `json:"TopicTypes,omitempty" xml:"TopicTypes,omitempty"`
}

func (s ListTopicsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTopicsRequest) GoString() string {
	return s.String()
}

func (s *ListTopicsRequest) SetBeginTime(v string) *ListTopicsRequest {
	s.BeginTime = &v
	return s
}

func (s *ListTopicsRequest) SetEndTime(v string) *ListTopicsRequest {
	s.EndTime = &v
	return s
}

func (s *ListTopicsRequest) SetInstanceId(v int64) *ListTopicsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListTopicsRequest) SetNodeId(v int64) *ListTopicsRequest {
	s.NodeId = &v
	return s
}

func (s *ListTopicsRequest) SetOwner(v string) *ListTopicsRequest {
	s.Owner = &v
	return s
}

func (s *ListTopicsRequest) SetPageNumber(v int32) *ListTopicsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTopicsRequest) SetPageSize(v int32) *ListTopicsRequest {
	s.PageSize = &v
	return s
}

func (s *ListTopicsRequest) SetTopicStatuses(v string) *ListTopicsRequest {
	s.TopicStatuses = &v
	return s
}

func (s *ListTopicsRequest) SetTopicTypes(v string) *ListTopicsRequest {
	s.TopicTypes = &v
	return s
}

type ListTopicsResponseBody struct {
	Data           *ListTopicsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                     `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListTopicsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTopicsResponseBody) GoString() string {
	return s.String()
}

func (s *ListTopicsResponseBody) SetData(v *ListTopicsResponseBodyData) *ListTopicsResponseBody {
	s.Data = v
	return s
}

func (s *ListTopicsResponseBody) SetErrorCode(v string) *ListTopicsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListTopicsResponseBody) SetErrorMessage(v string) *ListTopicsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListTopicsResponseBody) SetHttpStatusCode(v int32) *ListTopicsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTopicsResponseBody) SetRequestId(v string) *ListTopicsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTopicsResponseBody) SetSuccess(v bool) *ListTopicsResponseBody {
	s.Success = &v
	return s
}

type ListTopicsResponseBodyData struct {
	PageNumber *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Topics     []*ListTopicsResponseBodyDataTopics `json:"Topics,omitempty" xml:"Topics,omitempty" type:"Repeated"`
	TotalCount *int32                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTopicsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListTopicsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListTopicsResponseBodyData) SetPageNumber(v int32) *ListTopicsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListTopicsResponseBodyData) SetPageSize(v int32) *ListTopicsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListTopicsResponseBodyData) SetTopics(v []*ListTopicsResponseBodyDataTopics) *ListTopicsResponseBodyData {
	s.Topics = v
	return s
}

func (s *ListTopicsResponseBodyData) SetTotalCount(v int32) *ListTopicsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListTopicsResponseBodyDataTopics struct {
	AddTime     *int64  `json:"AddTime,omitempty" xml:"AddTime,omitempty"`
	FixTime     *int64  `json:"FixTime,omitempty" xml:"FixTime,omitempty"`
	HappenTime  *int64  `json:"HappenTime,omitempty" xml:"HappenTime,omitempty"`
	InstanceId  *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NodeId      *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName    *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	NodeOwner   *string `json:"NodeOwner,omitempty" xml:"NodeOwner,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TopicId     *int64  `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
	TopicName   *string `json:"TopicName,omitempty" xml:"TopicName,omitempty"`
	TopicStatus *string `json:"TopicStatus,omitempty" xml:"TopicStatus,omitempty"`
	TopicType   *string `json:"TopicType,omitempty" xml:"TopicType,omitempty"`
}

func (s ListTopicsResponseBodyDataTopics) String() string {
	return tea.Prettify(s)
}

func (s ListTopicsResponseBodyDataTopics) GoString() string {
	return s.String()
}

func (s *ListTopicsResponseBodyDataTopics) SetAddTime(v int64) *ListTopicsResponseBodyDataTopics {
	s.AddTime = &v
	return s
}

func (s *ListTopicsResponseBodyDataTopics) SetFixTime(v int64) *ListTopicsResponseBodyDataTopics {
	s.FixTime = &v
	return s
}

func (s *ListTopicsResponseBodyDataTopics) SetHappenTime(v int64) *ListTopicsResponseBodyDataTopics {
	s.HappenTime = &v
	return s
}

func (s *ListTopicsResponseBodyDataTopics) SetInstanceId(v int64) *ListTopicsResponseBodyDataTopics {
	s.InstanceId = &v
	return s
}

func (s *ListTopicsResponseBodyDataTopics) SetNodeId(v int64) *ListTopicsResponseBodyDataTopics {
	s.NodeId = &v
	return s
}

func (s *ListTopicsResponseBodyDataTopics) SetNodeName(v string) *ListTopicsResponseBodyDataTopics {
	s.NodeName = &v
	return s
}

func (s *ListTopicsResponseBodyDataTopics) SetNodeOwner(v string) *ListTopicsResponseBodyDataTopics {
	s.NodeOwner = &v
	return s
}

func (s *ListTopicsResponseBodyDataTopics) SetProjectId(v int64) *ListTopicsResponseBodyDataTopics {
	s.ProjectId = &v
	return s
}

func (s *ListTopicsResponseBodyDataTopics) SetTopicId(v int64) *ListTopicsResponseBodyDataTopics {
	s.TopicId = &v
	return s
}

func (s *ListTopicsResponseBodyDataTopics) SetTopicName(v string) *ListTopicsResponseBodyDataTopics {
	s.TopicName = &v
	return s
}

func (s *ListTopicsResponseBodyDataTopics) SetTopicStatus(v string) *ListTopicsResponseBodyDataTopics {
	s.TopicStatus = &v
	return s
}

func (s *ListTopicsResponseBodyDataTopics) SetTopicType(v string) *ListTopicsResponseBodyDataTopics {
	s.TopicType = &v
	return s
}

type ListTopicsResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListTopicsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTopicsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTopicsResponse) GoString() string {
	return s.String()
}

func (s *ListTopicsResponse) SetHeaders(v map[string]*string) *ListTopicsResponse {
	s.Headers = v
	return s
}

func (s *ListTopicsResponse) SetBody(v *ListTopicsResponseBody) *ListTopicsResponse {
	s.Body = v
	return s
}

type PublishDataServiceApiRequest struct {
	ApiId     *int64 `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TenantId  *int64 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s PublishDataServiceApiRequest) String() string {
	return tea.Prettify(s)
}

func (s PublishDataServiceApiRequest) GoString() string {
	return s.String()
}

func (s *PublishDataServiceApiRequest) SetApiId(v int64) *PublishDataServiceApiRequest {
	s.ApiId = &v
	return s
}

func (s *PublishDataServiceApiRequest) SetProjectId(v int64) *PublishDataServiceApiRequest {
	s.ProjectId = &v
	return s
}

func (s *PublishDataServiceApiRequest) SetTenantId(v int64) *PublishDataServiceApiRequest {
	s.TenantId = &v
	return s
}

type PublishDataServiceApiResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PublishDataServiceApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PublishDataServiceApiResponseBody) GoString() string {
	return s.String()
}

func (s *PublishDataServiceApiResponseBody) SetData(v bool) *PublishDataServiceApiResponseBody {
	s.Data = &v
	return s
}

func (s *PublishDataServiceApiResponseBody) SetErrorCode(v string) *PublishDataServiceApiResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *PublishDataServiceApiResponseBody) SetErrorMessage(v string) *PublishDataServiceApiResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *PublishDataServiceApiResponseBody) SetHttpStatusCode(v int32) *PublishDataServiceApiResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *PublishDataServiceApiResponseBody) SetRequestId(v string) *PublishDataServiceApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *PublishDataServiceApiResponseBody) SetSuccess(v bool) *PublishDataServiceApiResponseBody {
	s.Success = &v
	return s
}

type PublishDataServiceApiResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *PublishDataServiceApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PublishDataServiceApiResponse) String() string {
	return tea.Prettify(s)
}

func (s PublishDataServiceApiResponse) GoString() string {
	return s.String()
}

func (s *PublishDataServiceApiResponse) SetHeaders(v map[string]*string) *PublishDataServiceApiResponse {
	s.Headers = v
	return s
}

func (s *PublishDataServiceApiResponse) SetBody(v *PublishDataServiceApiResponseBody) *PublishDataServiceApiResponse {
	s.Body = v
	return s
}

type QueryDISyncTaskConfigProcessResultRequest struct {
	AsyncProcessId *int64  `json:"AsyncProcessId,omitempty" xml:"AsyncProcessId,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TaskType       *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s QueryDISyncTaskConfigProcessResultRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDISyncTaskConfigProcessResultRequest) GoString() string {
	return s.String()
}

func (s *QueryDISyncTaskConfigProcessResultRequest) SetAsyncProcessId(v int64) *QueryDISyncTaskConfigProcessResultRequest {
	s.AsyncProcessId = &v
	return s
}

func (s *QueryDISyncTaskConfigProcessResultRequest) SetProjectId(v int64) *QueryDISyncTaskConfigProcessResultRequest {
	s.ProjectId = &v
	return s
}

func (s *QueryDISyncTaskConfigProcessResultRequest) SetTaskType(v string) *QueryDISyncTaskConfigProcessResultRequest {
	s.TaskType = &v
	return s
}

type QueryDISyncTaskConfigProcessResultResponseBody struct {
	Data      *QueryDISyncTaskConfigProcessResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryDISyncTaskConfigProcessResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDISyncTaskConfigProcessResultResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDISyncTaskConfigProcessResultResponseBody) SetData(v *QueryDISyncTaskConfigProcessResultResponseBodyData) *QueryDISyncTaskConfigProcessResultResponseBody {
	s.Data = v
	return s
}

func (s *QueryDISyncTaskConfigProcessResultResponseBody) SetRequestId(v string) *QueryDISyncTaskConfigProcessResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDISyncTaskConfigProcessResultResponseBody) SetSuccess(v bool) *QueryDISyncTaskConfigProcessResultResponseBody {
	s.Success = &v
	return s
}

type QueryDISyncTaskConfigProcessResultResponseBodyData struct {
	Message     *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskContent *string `json:"TaskContent,omitempty" xml:"TaskContent,omitempty"`
}

func (s QueryDISyncTaskConfigProcessResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDISyncTaskConfigProcessResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDISyncTaskConfigProcessResultResponseBodyData) SetMessage(v string) *QueryDISyncTaskConfigProcessResultResponseBodyData {
	s.Message = &v
	return s
}

func (s *QueryDISyncTaskConfigProcessResultResponseBodyData) SetStatus(v string) *QueryDISyncTaskConfigProcessResultResponseBodyData {
	s.Status = &v
	return s
}

func (s *QueryDISyncTaskConfigProcessResultResponseBodyData) SetTaskContent(v string) *QueryDISyncTaskConfigProcessResultResponseBodyData {
	s.TaskContent = &v
	return s
}

type QueryDISyncTaskConfigProcessResultResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDISyncTaskConfigProcessResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDISyncTaskConfigProcessResultResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDISyncTaskConfigProcessResultResponse) GoString() string {
	return s.String()
}

func (s *QueryDISyncTaskConfigProcessResultResponse) SetHeaders(v map[string]*string) *QueryDISyncTaskConfigProcessResultResponse {
	s.Headers = v
	return s
}

func (s *QueryDISyncTaskConfigProcessResultResponse) SetBody(v *QueryDISyncTaskConfigProcessResultResponseBody) *QueryDISyncTaskConfigProcessResultResponse {
	s.Body = v
	return s
}

type QueryPublicModelEngineRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Text      *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryPublicModelEngineRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPublicModelEngineRequest) GoString() string {
	return s.String()
}

func (s *QueryPublicModelEngineRequest) SetProjectId(v string) *QueryPublicModelEngineRequest {
	s.ProjectId = &v
	return s
}

func (s *QueryPublicModelEngineRequest) SetText(v string) *QueryPublicModelEngineRequest {
	s.Text = &v
	return s
}

type QueryPublicModelEngineResponseBody struct {
	RequestId   *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ReturnValue []map[string]interface{} `json:"ReturnValue,omitempty" xml:"ReturnValue,omitempty" type:"Repeated"`
}

func (s QueryPublicModelEngineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPublicModelEngineResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPublicModelEngineResponseBody) SetRequestId(v string) *QueryPublicModelEngineResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPublicModelEngineResponseBody) SetReturnValue(v []map[string]interface{}) *QueryPublicModelEngineResponseBody {
	s.ReturnValue = v
	return s
}

type QueryPublicModelEngineResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryPublicModelEngineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryPublicModelEngineResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPublicModelEngineResponse) GoString() string {
	return s.String()
}

func (s *QueryPublicModelEngineResponse) SetHeaders(v map[string]*string) *QueryPublicModelEngineResponse {
	s.Headers = v
	return s
}

func (s *QueryPublicModelEngineResponse) SetBody(v *QueryPublicModelEngineResponseBody) *QueryPublicModelEngineResponse {
	s.Body = v
	return s
}

type RemoveProjectMemberFromRoleRequest struct {
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RoleCode  *string `json:"RoleCode,omitempty" xml:"RoleCode,omitempty"`
	UserId    *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s RemoveProjectMemberFromRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveProjectMemberFromRoleRequest) GoString() string {
	return s.String()
}

func (s *RemoveProjectMemberFromRoleRequest) SetProjectId(v int64) *RemoveProjectMemberFromRoleRequest {
	s.ProjectId = &v
	return s
}

func (s *RemoveProjectMemberFromRoleRequest) SetRoleCode(v string) *RemoveProjectMemberFromRoleRequest {
	s.RoleCode = &v
	return s
}

func (s *RemoveProjectMemberFromRoleRequest) SetUserId(v string) *RemoveProjectMemberFromRoleRequest {
	s.UserId = &v
	return s
}

type RemoveProjectMemberFromRoleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveProjectMemberFromRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveProjectMemberFromRoleResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveProjectMemberFromRoleResponseBody) SetRequestId(v string) *RemoveProjectMemberFromRoleResponseBody {
	s.RequestId = &v
	return s
}

type RemoveProjectMemberFromRoleResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RemoveProjectMemberFromRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveProjectMemberFromRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveProjectMemberFromRoleResponse) GoString() string {
	return s.String()
}

func (s *RemoveProjectMemberFromRoleResponse) SetHeaders(v map[string]*string) *RemoveProjectMemberFromRoleResponse {
	s.Headers = v
	return s
}

func (s *RemoveProjectMemberFromRoleResponse) SetBody(v *RemoveProjectMemberFromRoleResponseBody) *RemoveProjectMemberFromRoleResponse {
	s.Body = v
	return s
}

type RestartInstanceRequest struct {
	InstanceId *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s RestartInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartInstanceRequest) GoString() string {
	return s.String()
}

func (s *RestartInstanceRequest) SetInstanceId(v int64) *RestartInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RestartInstanceRequest) SetProjectEnv(v string) *RestartInstanceRequest {
	s.ProjectEnv = &v
	return s
}

type RestartInstanceResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RestartInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestartInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RestartInstanceResponseBody) SetData(v bool) *RestartInstanceResponseBody {
	s.Data = &v
	return s
}

func (s *RestartInstanceResponseBody) SetErrorCode(v string) *RestartInstanceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RestartInstanceResponseBody) SetErrorMessage(v string) *RestartInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *RestartInstanceResponseBody) SetHttpStatusCode(v int32) *RestartInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RestartInstanceResponseBody) SetRequestId(v string) *RestartInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RestartInstanceResponseBody) SetSuccess(v bool) *RestartInstanceResponseBody {
	s.Success = &v
	return s
}

type RestartInstanceResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RestartInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RestartInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartInstanceResponse) GoString() string {
	return s.String()
}

func (s *RestartInstanceResponse) SetHeaders(v map[string]*string) *RestartInstanceResponse {
	s.Headers = v
	return s
}

func (s *RestartInstanceResponse) SetBody(v *RestartInstanceResponseBody) *RestartInstanceResponse {
	s.Body = v
	return s
}

type ResumeInstanceRequest struct {
	InstanceId *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s ResumeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeInstanceRequest) GoString() string {
	return s.String()
}

func (s *ResumeInstanceRequest) SetInstanceId(v int64) *ResumeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *ResumeInstanceRequest) SetProjectEnv(v string) *ResumeInstanceRequest {
	s.ProjectEnv = &v
	return s
}

type ResumeInstanceResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ResumeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeInstanceResponseBody) SetData(v bool) *ResumeInstanceResponseBody {
	s.Data = &v
	return s
}

func (s *ResumeInstanceResponseBody) SetErrorCode(v string) *ResumeInstanceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ResumeInstanceResponseBody) SetErrorMessage(v string) *ResumeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ResumeInstanceResponseBody) SetHttpStatusCode(v int32) *ResumeInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ResumeInstanceResponseBody) SetRequestId(v string) *ResumeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResumeInstanceResponseBody) SetSuccess(v bool) *ResumeInstanceResponseBody {
	s.Success = &v
	return s
}

type ResumeInstanceResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ResumeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResumeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeInstanceResponse) GoString() string {
	return s.String()
}

func (s *ResumeInstanceResponse) SetHeaders(v map[string]*string) *ResumeInstanceResponse {
	s.Headers = v
	return s
}

func (s *ResumeInstanceResponse) SetBody(v *ResumeInstanceResponseBody) *ResumeInstanceResponse {
	s.Body = v
	return s
}

type RevokeColumnPermissionRequest struct {
	Columns               *string `json:"Columns,omitempty" xml:"Columns,omitempty"`
	MaxComputeProjectName *string `json:"MaxComputeProjectName,omitempty" xml:"MaxComputeProjectName,omitempty"`
	RevokeUserId          *string `json:"RevokeUserId,omitempty" xml:"RevokeUserId,omitempty"`
	RevokeUserName        *string `json:"RevokeUserName,omitempty" xml:"RevokeUserName,omitempty"`
	TableName             *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	WorkspaceId           *int64  `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RevokeColumnPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeColumnPermissionRequest) GoString() string {
	return s.String()
}

func (s *RevokeColumnPermissionRequest) SetColumns(v string) *RevokeColumnPermissionRequest {
	s.Columns = &v
	return s
}

func (s *RevokeColumnPermissionRequest) SetMaxComputeProjectName(v string) *RevokeColumnPermissionRequest {
	s.MaxComputeProjectName = &v
	return s
}

func (s *RevokeColumnPermissionRequest) SetRevokeUserId(v string) *RevokeColumnPermissionRequest {
	s.RevokeUserId = &v
	return s
}

func (s *RevokeColumnPermissionRequest) SetRevokeUserName(v string) *RevokeColumnPermissionRequest {
	s.RevokeUserName = &v
	return s
}

func (s *RevokeColumnPermissionRequest) SetTableName(v string) *RevokeColumnPermissionRequest {
	s.TableName = &v
	return s
}

func (s *RevokeColumnPermissionRequest) SetWorkspaceId(v int64) *RevokeColumnPermissionRequest {
	s.WorkspaceId = &v
	return s
}

type RevokeColumnPermissionResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RevokeSuccess *bool   `json:"RevokeSuccess,omitempty" xml:"RevokeSuccess,omitempty"`
}

func (s RevokeColumnPermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeColumnPermissionResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeColumnPermissionResponseBody) SetRequestId(v string) *RevokeColumnPermissionResponseBody {
	s.RequestId = &v
	return s
}

func (s *RevokeColumnPermissionResponseBody) SetRevokeSuccess(v bool) *RevokeColumnPermissionResponseBody {
	s.RevokeSuccess = &v
	return s
}

type RevokeColumnPermissionResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RevokeColumnPermissionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RevokeColumnPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeColumnPermissionResponse) GoString() string {
	return s.String()
}

func (s *RevokeColumnPermissionResponse) SetHeaders(v map[string]*string) *RevokeColumnPermissionResponse {
	s.Headers = v
	return s
}

func (s *RevokeColumnPermissionResponse) SetBody(v *RevokeColumnPermissionResponseBody) *RevokeColumnPermissionResponse {
	s.Body = v
	return s
}

type RevokeTablePermissionRequest struct {
	Actions               *string `json:"Actions,omitempty" xml:"Actions,omitempty"`
	MaxComputeProjectName *string `json:"MaxComputeProjectName,omitempty" xml:"MaxComputeProjectName,omitempty"`
	RevokeUserId          *string `json:"RevokeUserId,omitempty" xml:"RevokeUserId,omitempty"`
	RevokeUserName        *string `json:"RevokeUserName,omitempty" xml:"RevokeUserName,omitempty"`
	TableName             *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	WorkspaceId           *int64  `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RevokeTablePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeTablePermissionRequest) GoString() string {
	return s.String()
}

func (s *RevokeTablePermissionRequest) SetActions(v string) *RevokeTablePermissionRequest {
	s.Actions = &v
	return s
}

func (s *RevokeTablePermissionRequest) SetMaxComputeProjectName(v string) *RevokeTablePermissionRequest {
	s.MaxComputeProjectName = &v
	return s
}

func (s *RevokeTablePermissionRequest) SetRevokeUserId(v string) *RevokeTablePermissionRequest {
	s.RevokeUserId = &v
	return s
}

func (s *RevokeTablePermissionRequest) SetRevokeUserName(v string) *RevokeTablePermissionRequest {
	s.RevokeUserName = &v
	return s
}

func (s *RevokeTablePermissionRequest) SetTableName(v string) *RevokeTablePermissionRequest {
	s.TableName = &v
	return s
}

func (s *RevokeTablePermissionRequest) SetWorkspaceId(v int64) *RevokeTablePermissionRequest {
	s.WorkspaceId = &v
	return s
}

type RevokeTablePermissionResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RevokeSuccess *bool   `json:"RevokeSuccess,omitempty" xml:"RevokeSuccess,omitempty"`
}

func (s RevokeTablePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeTablePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeTablePermissionResponseBody) SetRequestId(v string) *RevokeTablePermissionResponseBody {
	s.RequestId = &v
	return s
}

func (s *RevokeTablePermissionResponseBody) SetRevokeSuccess(v bool) *RevokeTablePermissionResponseBody {
	s.RevokeSuccess = &v
	return s
}

type RevokeTablePermissionResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RevokeTablePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RevokeTablePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeTablePermissionResponse) GoString() string {
	return s.String()
}

func (s *RevokeTablePermissionResponse) SetHeaders(v map[string]*string) *RevokeTablePermissionResponse {
	s.Headers = v
	return s
}

func (s *RevokeTablePermissionResponse) SetBody(v *RevokeTablePermissionResponseBody) *RevokeTablePermissionResponse {
	s.Body = v
	return s
}

type RunCycleDagNodesRequest struct {
	BizBeginTime   *string `json:"BizBeginTime,omitempty" xml:"BizBeginTime,omitempty"`
	BizEndTime     *string `json:"BizEndTime,omitempty" xml:"BizEndTime,omitempty"`
	EndBizDate     *string `json:"EndBizDate,omitempty" xml:"EndBizDate,omitempty"`
	ExcludeNodeIds *string `json:"ExcludeNodeIds,omitempty" xml:"ExcludeNodeIds,omitempty"`
	IncludeNodeIds *string `json:"IncludeNodeIds,omitempty" xml:"IncludeNodeIds,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NodeParams     *string `json:"NodeParams,omitempty" xml:"NodeParams,omitempty"`
	Parallelism    *bool   `json:"Parallelism,omitempty" xml:"Parallelism,omitempty"`
	ProjectEnv     *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	RootNodeId     *int64  `json:"RootNodeId,omitempty" xml:"RootNodeId,omitempty"`
	StartBizDate   *string `json:"StartBizDate,omitempty" xml:"StartBizDate,omitempty"`
}

func (s RunCycleDagNodesRequest) String() string {
	return tea.Prettify(s)
}

func (s RunCycleDagNodesRequest) GoString() string {
	return s.String()
}

func (s *RunCycleDagNodesRequest) SetBizBeginTime(v string) *RunCycleDagNodesRequest {
	s.BizBeginTime = &v
	return s
}

func (s *RunCycleDagNodesRequest) SetBizEndTime(v string) *RunCycleDagNodesRequest {
	s.BizEndTime = &v
	return s
}

func (s *RunCycleDagNodesRequest) SetEndBizDate(v string) *RunCycleDagNodesRequest {
	s.EndBizDate = &v
	return s
}

func (s *RunCycleDagNodesRequest) SetExcludeNodeIds(v string) *RunCycleDagNodesRequest {
	s.ExcludeNodeIds = &v
	return s
}

func (s *RunCycleDagNodesRequest) SetIncludeNodeIds(v string) *RunCycleDagNodesRequest {
	s.IncludeNodeIds = &v
	return s
}

func (s *RunCycleDagNodesRequest) SetName(v string) *RunCycleDagNodesRequest {
	s.Name = &v
	return s
}

func (s *RunCycleDagNodesRequest) SetNodeParams(v string) *RunCycleDagNodesRequest {
	s.NodeParams = &v
	return s
}

func (s *RunCycleDagNodesRequest) SetParallelism(v bool) *RunCycleDagNodesRequest {
	s.Parallelism = &v
	return s
}

func (s *RunCycleDagNodesRequest) SetProjectEnv(v string) *RunCycleDagNodesRequest {
	s.ProjectEnv = &v
	return s
}

func (s *RunCycleDagNodesRequest) SetRootNodeId(v int64) *RunCycleDagNodesRequest {
	s.RootNodeId = &v
	return s
}

func (s *RunCycleDagNodesRequest) SetStartBizDate(v string) *RunCycleDagNodesRequest {
	s.StartBizDate = &v
	return s
}

type RunCycleDagNodesResponseBody struct {
	Data           []*int64 `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	ErrorCode      *string  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RunCycleDagNodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunCycleDagNodesResponseBody) GoString() string {
	return s.String()
}

func (s *RunCycleDagNodesResponseBody) SetData(v []*int64) *RunCycleDagNodesResponseBody {
	s.Data = v
	return s
}

func (s *RunCycleDagNodesResponseBody) SetErrorCode(v string) *RunCycleDagNodesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RunCycleDagNodesResponseBody) SetErrorMessage(v string) *RunCycleDagNodesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *RunCycleDagNodesResponseBody) SetHttpStatusCode(v int32) *RunCycleDagNodesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RunCycleDagNodesResponseBody) SetRequestId(v string) *RunCycleDagNodesResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunCycleDagNodesResponseBody) SetSuccess(v bool) *RunCycleDagNodesResponseBody {
	s.Success = &v
	return s
}

type RunCycleDagNodesResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RunCycleDagNodesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RunCycleDagNodesResponse) String() string {
	return tea.Prettify(s)
}

func (s RunCycleDagNodesResponse) GoString() string {
	return s.String()
}

func (s *RunCycleDagNodesResponse) SetHeaders(v map[string]*string) *RunCycleDagNodesResponse {
	s.Headers = v
	return s
}

func (s *RunCycleDagNodesResponse) SetBody(v *RunCycleDagNodesResponseBody) *RunCycleDagNodesResponse {
	s.Body = v
	return s
}

type RunManualDagNodesRequest struct {
	BizDate        *string `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	DagParameters  *string `json:"DagParameters,omitempty" xml:"DagParameters,omitempty"`
	ExcludeNodeIds *string `json:"ExcludeNodeIds,omitempty" xml:"ExcludeNodeIds,omitempty"`
	FlowName       *string `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	IncludeNodeIds *string `json:"IncludeNodeIds,omitempty" xml:"IncludeNodeIds,omitempty"`
	NodeParameters *string `json:"NodeParameters,omitempty" xml:"NodeParameters,omitempty"`
	ProjectEnv     *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName    *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
}

func (s RunManualDagNodesRequest) String() string {
	return tea.Prettify(s)
}

func (s RunManualDagNodesRequest) GoString() string {
	return s.String()
}

func (s *RunManualDagNodesRequest) SetBizDate(v string) *RunManualDagNodesRequest {
	s.BizDate = &v
	return s
}

func (s *RunManualDagNodesRequest) SetDagParameters(v string) *RunManualDagNodesRequest {
	s.DagParameters = &v
	return s
}

func (s *RunManualDagNodesRequest) SetExcludeNodeIds(v string) *RunManualDagNodesRequest {
	s.ExcludeNodeIds = &v
	return s
}

func (s *RunManualDagNodesRequest) SetFlowName(v string) *RunManualDagNodesRequest {
	s.FlowName = &v
	return s
}

func (s *RunManualDagNodesRequest) SetIncludeNodeIds(v string) *RunManualDagNodesRequest {
	s.IncludeNodeIds = &v
	return s
}

func (s *RunManualDagNodesRequest) SetNodeParameters(v string) *RunManualDagNodesRequest {
	s.NodeParameters = &v
	return s
}

func (s *RunManualDagNodesRequest) SetProjectEnv(v string) *RunManualDagNodesRequest {
	s.ProjectEnv = &v
	return s
}

func (s *RunManualDagNodesRequest) SetProjectId(v int64) *RunManualDagNodesRequest {
	s.ProjectId = &v
	return s
}

func (s *RunManualDagNodesRequest) SetProjectName(v string) *RunManualDagNodesRequest {
	s.ProjectName = &v
	return s
}

type RunManualDagNodesResponseBody struct {
	DagId     *int64  `json:"DagId,omitempty" xml:"DagId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunManualDagNodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunManualDagNodesResponseBody) GoString() string {
	return s.String()
}

func (s *RunManualDagNodesResponseBody) SetDagId(v int64) *RunManualDagNodesResponseBody {
	s.DagId = &v
	return s
}

func (s *RunManualDagNodesResponseBody) SetRequestId(v string) *RunManualDagNodesResponseBody {
	s.RequestId = &v
	return s
}

type RunManualDagNodesResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RunManualDagNodesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RunManualDagNodesResponse) String() string {
	return tea.Prettify(s)
}

func (s RunManualDagNodesResponse) GoString() string {
	return s.String()
}

func (s *RunManualDagNodesResponse) SetHeaders(v map[string]*string) *RunManualDagNodesResponse {
	s.Headers = v
	return s
}

func (s *RunManualDagNodesResponse) SetBody(v *RunManualDagNodesResponseBody) *RunManualDagNodesResponse {
	s.Body = v
	return s
}

type RunSmokeTestRequest struct {
	Bizdate    *string `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NodeId     *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeParams *string `json:"NodeParams,omitempty" xml:"NodeParams,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s RunSmokeTestRequest) String() string {
	return tea.Prettify(s)
}

func (s RunSmokeTestRequest) GoString() string {
	return s.String()
}

func (s *RunSmokeTestRequest) SetBizdate(v string) *RunSmokeTestRequest {
	s.Bizdate = &v
	return s
}

func (s *RunSmokeTestRequest) SetName(v string) *RunSmokeTestRequest {
	s.Name = &v
	return s
}

func (s *RunSmokeTestRequest) SetNodeId(v int64) *RunSmokeTestRequest {
	s.NodeId = &v
	return s
}

func (s *RunSmokeTestRequest) SetNodeParams(v string) *RunSmokeTestRequest {
	s.NodeParams = &v
	return s
}

func (s *RunSmokeTestRequest) SetProjectEnv(v string) *RunSmokeTestRequest {
	s.ProjectEnv = &v
	return s
}

type RunSmokeTestResponseBody struct {
	Data           *int64  `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RunSmokeTestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunSmokeTestResponseBody) GoString() string {
	return s.String()
}

func (s *RunSmokeTestResponseBody) SetData(v int64) *RunSmokeTestResponseBody {
	s.Data = &v
	return s
}

func (s *RunSmokeTestResponseBody) SetErrorCode(v string) *RunSmokeTestResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RunSmokeTestResponseBody) SetErrorMessage(v string) *RunSmokeTestResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *RunSmokeTestResponseBody) SetHttpStatusCode(v int32) *RunSmokeTestResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RunSmokeTestResponseBody) SetRequestId(v string) *RunSmokeTestResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunSmokeTestResponseBody) SetSuccess(v bool) *RunSmokeTestResponseBody {
	s.Success = &v
	return s
}

type RunSmokeTestResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RunSmokeTestResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RunSmokeTestResponse) String() string {
	return tea.Prettify(s)
}

func (s RunSmokeTestResponse) GoString() string {
	return s.String()
}

func (s *RunSmokeTestResponse) SetHeaders(v map[string]*string) *RunSmokeTestResponse {
	s.Headers = v
	return s
}

func (s *RunSmokeTestResponse) SetBody(v *RunSmokeTestResponseBody) *RunSmokeTestResponse {
	s.Body = v
	return s
}

type RunTriggerNodeRequest struct {
	AppId     *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BizDate   *int64 `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	CycleTime *int64 `json:"CycleTime,omitempty" xml:"CycleTime,omitempty"`
	NodeId    *int64 `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s RunTriggerNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s RunTriggerNodeRequest) GoString() string {
	return s.String()
}

func (s *RunTriggerNodeRequest) SetAppId(v int64) *RunTriggerNodeRequest {
	s.AppId = &v
	return s
}

func (s *RunTriggerNodeRequest) SetBizDate(v int64) *RunTriggerNodeRequest {
	s.BizDate = &v
	return s
}

func (s *RunTriggerNodeRequest) SetCycleTime(v int64) *RunTriggerNodeRequest {
	s.CycleTime = &v
	return s
}

func (s *RunTriggerNodeRequest) SetNodeId(v int64) *RunTriggerNodeRequest {
	s.NodeId = &v
	return s
}

type RunTriggerNodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RunTriggerNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunTriggerNodeResponseBody) GoString() string {
	return s.String()
}

func (s *RunTriggerNodeResponseBody) SetRequestId(v string) *RunTriggerNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunTriggerNodeResponseBody) SetSuccess(v bool) *RunTriggerNodeResponseBody {
	s.Success = &v
	return s
}

type RunTriggerNodeResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RunTriggerNodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RunTriggerNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s RunTriggerNodeResponse) GoString() string {
	return s.String()
}

func (s *RunTriggerNodeResponse) SetHeaders(v map[string]*string) *RunTriggerNodeResponse {
	s.Headers = v
	return s
}

func (s *RunTriggerNodeResponse) SetBody(v *RunTriggerNodeResponseBody) *RunTriggerNodeResponse {
	s.Body = v
	return s
}

type ScanSensitiveDataRequest struct {
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ScanSensitiveDataRequest) String() string {
	return tea.Prettify(s)
}

func (s ScanSensitiveDataRequest) GoString() string {
	return s.String()
}

func (s *ScanSensitiveDataRequest) SetData(v string) *ScanSensitiveDataRequest {
	s.Data = &v
	return s
}

type ScanSensitiveDataResponseBody struct {
	RequestId  *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Sensitives map[string]interface{} `json:"Sensitives,omitempty" xml:"Sensitives,omitempty"`
}

func (s ScanSensitiveDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ScanSensitiveDataResponseBody) GoString() string {
	return s.String()
}

func (s *ScanSensitiveDataResponseBody) SetRequestId(v string) *ScanSensitiveDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *ScanSensitiveDataResponseBody) SetSensitives(v map[string]interface{}) *ScanSensitiveDataResponseBody {
	s.Sensitives = v
	return s
}

type ScanSensitiveDataResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ScanSensitiveDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ScanSensitiveDataResponse) String() string {
	return tea.Prettify(s)
}

func (s ScanSensitiveDataResponse) GoString() string {
	return s.String()
}

func (s *ScanSensitiveDataResponse) SetHeaders(v map[string]*string) *ScanSensitiveDataResponse {
	s.Headers = v
	return s
}

func (s *ScanSensitiveDataResponse) SetBody(v *ScanSensitiveDataResponseBody) *ScanSensitiveDataResponse {
	s.Body = v
	return s
}

type SearchMetaTablesRequest struct {
	AppGuid        *string `json:"AppGuid,omitempty" xml:"AppGuid,omitempty"`
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DataSourceType *string `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	EntityType     *int32  `json:"EntityType,omitempty" xml:"EntityType,omitempty"`
	Keyword        *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s SearchMetaTablesRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMetaTablesRequest) GoString() string {
	return s.String()
}

func (s *SearchMetaTablesRequest) SetAppGuid(v string) *SearchMetaTablesRequest {
	s.AppGuid = &v
	return s
}

func (s *SearchMetaTablesRequest) SetClusterId(v string) *SearchMetaTablesRequest {
	s.ClusterId = &v
	return s
}

func (s *SearchMetaTablesRequest) SetDataSourceType(v string) *SearchMetaTablesRequest {
	s.DataSourceType = &v
	return s
}

func (s *SearchMetaTablesRequest) SetEntityType(v int32) *SearchMetaTablesRequest {
	s.EntityType = &v
	return s
}

func (s *SearchMetaTablesRequest) SetKeyword(v string) *SearchMetaTablesRequest {
	s.Keyword = &v
	return s
}

func (s *SearchMetaTablesRequest) SetPageNumber(v int32) *SearchMetaTablesRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchMetaTablesRequest) SetPageSize(v int32) *SearchMetaTablesRequest {
	s.PageSize = &v
	return s
}

type SearchMetaTablesResponseBody struct {
	Data           *SearchMetaTablesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                           `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                            `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SearchMetaTablesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMetaTablesResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMetaTablesResponseBody) SetData(v *SearchMetaTablesResponseBodyData) *SearchMetaTablesResponseBody {
	s.Data = v
	return s
}

func (s *SearchMetaTablesResponseBody) SetErrorCode(v string) *SearchMetaTablesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SearchMetaTablesResponseBody) SetErrorMessage(v string) *SearchMetaTablesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SearchMetaTablesResponseBody) SetHttpStatusCode(v int32) *SearchMetaTablesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SearchMetaTablesResponseBody) SetRequestId(v string) *SearchMetaTablesResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMetaTablesResponseBody) SetSuccess(v bool) *SearchMetaTablesResponseBody {
	s.Success = &v
	return s
}

type SearchMetaTablesResponseBodyData struct {
	DataEntityList []*SearchMetaTablesResponseBodyDataDataEntityList `json:"DataEntityList,omitempty" xml:"DataEntityList,omitempty" type:"Repeated"`
	PageNumber     *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount     *int64                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchMetaTablesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SearchMetaTablesResponseBodyData) GoString() string {
	return s.String()
}

func (s *SearchMetaTablesResponseBodyData) SetDataEntityList(v []*SearchMetaTablesResponseBodyDataDataEntityList) *SearchMetaTablesResponseBodyData {
	s.DataEntityList = v
	return s
}

func (s *SearchMetaTablesResponseBodyData) SetPageNumber(v int32) *SearchMetaTablesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *SearchMetaTablesResponseBodyData) SetPageSize(v int32) *SearchMetaTablesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *SearchMetaTablesResponseBodyData) SetTotalCount(v int64) *SearchMetaTablesResponseBodyData {
	s.TotalCount = &v
	return s
}

type SearchMetaTablesResponseBodyDataDataEntityList struct {
	ClusterId    *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	EntityType   *int32  `json:"EntityType,omitempty" xml:"EntityType,omitempty"`
	EnvType      *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	OwnerId      *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProjectId    *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName  *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	TableGuid    *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TableName    *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	TenantId     *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s SearchMetaTablesResponseBodyDataDataEntityList) String() string {
	return tea.Prettify(s)
}

func (s SearchMetaTablesResponseBodyDataDataEntityList) GoString() string {
	return s.String()
}

func (s *SearchMetaTablesResponseBodyDataDataEntityList) SetClusterId(v string) *SearchMetaTablesResponseBodyDataDataEntityList {
	s.ClusterId = &v
	return s
}

func (s *SearchMetaTablesResponseBodyDataDataEntityList) SetDatabaseName(v string) *SearchMetaTablesResponseBodyDataDataEntityList {
	s.DatabaseName = &v
	return s
}

func (s *SearchMetaTablesResponseBodyDataDataEntityList) SetEntityType(v int32) *SearchMetaTablesResponseBodyDataDataEntityList {
	s.EntityType = &v
	return s
}

func (s *SearchMetaTablesResponseBodyDataDataEntityList) SetEnvType(v int32) *SearchMetaTablesResponseBodyDataDataEntityList {
	s.EnvType = &v
	return s
}

func (s *SearchMetaTablesResponseBodyDataDataEntityList) SetOwnerId(v string) *SearchMetaTablesResponseBodyDataDataEntityList {
	s.OwnerId = &v
	return s
}

func (s *SearchMetaTablesResponseBodyDataDataEntityList) SetProjectId(v int64) *SearchMetaTablesResponseBodyDataDataEntityList {
	s.ProjectId = &v
	return s
}

func (s *SearchMetaTablesResponseBodyDataDataEntityList) SetProjectName(v string) *SearchMetaTablesResponseBodyDataDataEntityList {
	s.ProjectName = &v
	return s
}

func (s *SearchMetaTablesResponseBodyDataDataEntityList) SetTableGuid(v string) *SearchMetaTablesResponseBodyDataDataEntityList {
	s.TableGuid = &v
	return s
}

func (s *SearchMetaTablesResponseBodyDataDataEntityList) SetTableName(v string) *SearchMetaTablesResponseBodyDataDataEntityList {
	s.TableName = &v
	return s
}

func (s *SearchMetaTablesResponseBodyDataDataEntityList) SetTenantId(v int64) *SearchMetaTablesResponseBodyDataDataEntityList {
	s.TenantId = &v
	return s
}

type SearchMetaTablesResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SearchMetaTablesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchMetaTablesResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMetaTablesResponse) GoString() string {
	return s.String()
}

func (s *SearchMetaTablesResponse) SetHeaders(v map[string]*string) *SearchMetaTablesResponse {
	s.Headers = v
	return s
}

func (s *SearchMetaTablesResponse) SetBody(v *SearchMetaTablesResponseBody) *SearchMetaTablesResponse {
	s.Body = v
	return s
}

type SearchNodesByOutputRequest struct {
	Outputs    *string `json:"Outputs,omitempty" xml:"Outputs,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s SearchNodesByOutputRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchNodesByOutputRequest) GoString() string {
	return s.String()
}

func (s *SearchNodesByOutputRequest) SetOutputs(v string) *SearchNodesByOutputRequest {
	s.Outputs = &v
	return s
}

func (s *SearchNodesByOutputRequest) SetProjectEnv(v string) *SearchNodesByOutputRequest {
	s.ProjectEnv = &v
	return s
}

type SearchNodesByOutputResponseBody struct {
	Data           map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32                 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SearchNodesByOutputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchNodesByOutputResponseBody) GoString() string {
	return s.String()
}

func (s *SearchNodesByOutputResponseBody) SetData(v map[string]interface{}) *SearchNodesByOutputResponseBody {
	s.Data = v
	return s
}

func (s *SearchNodesByOutputResponseBody) SetErrorCode(v string) *SearchNodesByOutputResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SearchNodesByOutputResponseBody) SetErrorMessage(v string) *SearchNodesByOutputResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SearchNodesByOutputResponseBody) SetHttpStatusCode(v int32) *SearchNodesByOutputResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SearchNodesByOutputResponseBody) SetRequestId(v string) *SearchNodesByOutputResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchNodesByOutputResponseBody) SetSuccess(v bool) *SearchNodesByOutputResponseBody {
	s.Success = &v
	return s
}

type SearchNodesByOutputResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SearchNodesByOutputResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchNodesByOutputResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchNodesByOutputResponse) GoString() string {
	return s.String()
}

func (s *SearchNodesByOutputResponse) SetHeaders(v map[string]*string) *SearchNodesByOutputResponse {
	s.Headers = v
	return s
}

func (s *SearchNodesByOutputResponse) SetBody(v *SearchNodesByOutputResponseBody) *SearchNodesByOutputResponse {
	s.Body = v
	return s
}

type SetDataSourceShareRequest struct {
	DatasourceName     *string `json:"DatasourceName,omitempty" xml:"DatasourceName,omitempty"`
	EnvType            *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	ProjectId          *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectPermissions *string `json:"ProjectPermissions,omitempty" xml:"ProjectPermissions,omitempty"`
	UserPermissions    *string `json:"UserPermissions,omitempty" xml:"UserPermissions,omitempty"`
}

func (s SetDataSourceShareRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDataSourceShareRequest) GoString() string {
	return s.String()
}

func (s *SetDataSourceShareRequest) SetDatasourceName(v string) *SetDataSourceShareRequest {
	s.DatasourceName = &v
	return s
}

func (s *SetDataSourceShareRequest) SetEnvType(v string) *SetDataSourceShareRequest {
	s.EnvType = &v
	return s
}

func (s *SetDataSourceShareRequest) SetProjectId(v int64) *SetDataSourceShareRequest {
	s.ProjectId = &v
	return s
}

func (s *SetDataSourceShareRequest) SetProjectPermissions(v string) *SetDataSourceShareRequest {
	s.ProjectPermissions = &v
	return s
}

func (s *SetDataSourceShareRequest) SetUserPermissions(v string) *SetDataSourceShareRequest {
	s.UserPermissions = &v
	return s
}

type SetDataSourceShareResponseBody struct {
	Data      *SetDataSourceShareResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetDataSourceShareResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDataSourceShareResponseBody) GoString() string {
	return s.String()
}

func (s *SetDataSourceShareResponseBody) SetData(v *SetDataSourceShareResponseBodyData) *SetDataSourceShareResponseBody {
	s.Data = v
	return s
}

func (s *SetDataSourceShareResponseBody) SetRequestId(v string) *SetDataSourceShareResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDataSourceShareResponseBody) SetSuccess(v bool) *SetDataSourceShareResponseBody {
	s.Success = &v
	return s
}

type SetDataSourceShareResponseBodyData struct {
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Status  *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s SetDataSourceShareResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SetDataSourceShareResponseBodyData) GoString() string {
	return s.String()
}

func (s *SetDataSourceShareResponseBodyData) SetMessage(v string) *SetDataSourceShareResponseBodyData {
	s.Message = &v
	return s
}

func (s *SetDataSourceShareResponseBodyData) SetStatus(v string) *SetDataSourceShareResponseBodyData {
	s.Status = &v
	return s
}

type SetDataSourceShareResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetDataSourceShareResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetDataSourceShareResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDataSourceShareResponse) GoString() string {
	return s.String()
}

func (s *SetDataSourceShareResponse) SetHeaders(v map[string]*string) *SetDataSourceShareResponse {
	s.Headers = v
	return s
}

func (s *SetDataSourceShareResponse) SetBody(v *SetDataSourceShareResponseBody) *SetDataSourceShareResponse {
	s.Body = v
	return s
}

type SetSuccessInstanceRequest struct {
	InstanceId *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s SetSuccessInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s SetSuccessInstanceRequest) GoString() string {
	return s.String()
}

func (s *SetSuccessInstanceRequest) SetInstanceId(v int64) *SetSuccessInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *SetSuccessInstanceRequest) SetProjectEnv(v string) *SetSuccessInstanceRequest {
	s.ProjectEnv = &v
	return s
}

type SetSuccessInstanceResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetSuccessInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetSuccessInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *SetSuccessInstanceResponseBody) SetData(v bool) *SetSuccessInstanceResponseBody {
	s.Data = &v
	return s
}

func (s *SetSuccessInstanceResponseBody) SetErrorCode(v string) *SetSuccessInstanceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SetSuccessInstanceResponseBody) SetErrorMessage(v string) *SetSuccessInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SetSuccessInstanceResponseBody) SetHttpStatusCode(v int32) *SetSuccessInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SetSuccessInstanceResponseBody) SetRequestId(v string) *SetSuccessInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetSuccessInstanceResponseBody) SetSuccess(v bool) *SetSuccessInstanceResponseBody {
	s.Success = &v
	return s
}

type SetSuccessInstanceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetSuccessInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetSuccessInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s SetSuccessInstanceResponse) GoString() string {
	return s.String()
}

func (s *SetSuccessInstanceResponse) SetHeaders(v map[string]*string) *SetSuccessInstanceResponse {
	s.Headers = v
	return s
}

func (s *SetSuccessInstanceResponse) SetBody(v *SetSuccessInstanceResponseBody) *SetSuccessInstanceResponse {
	s.Body = v
	return s
}

type StartDISyncInstanceRequest struct {
	FileId     *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	ProjectId  *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	StartParam *string `json:"StartParam,omitempty" xml:"StartParam,omitempty"`
	TaskType   *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s StartDISyncInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDISyncInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartDISyncInstanceRequest) SetFileId(v int64) *StartDISyncInstanceRequest {
	s.FileId = &v
	return s
}

func (s *StartDISyncInstanceRequest) SetProjectId(v int64) *StartDISyncInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *StartDISyncInstanceRequest) SetStartParam(v string) *StartDISyncInstanceRequest {
	s.StartParam = &v
	return s
}

func (s *StartDISyncInstanceRequest) SetTaskType(v string) *StartDISyncInstanceRequest {
	s.TaskType = &v
	return s
}

type StartDISyncInstanceResponseBody struct {
	Data      *StartDISyncInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StartDISyncInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartDISyncInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartDISyncInstanceResponseBody) SetData(v *StartDISyncInstanceResponseBodyData) *StartDISyncInstanceResponseBody {
	s.Data = v
	return s
}

func (s *StartDISyncInstanceResponseBody) SetRequestId(v string) *StartDISyncInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartDISyncInstanceResponseBody) SetSuccess(v bool) *StartDISyncInstanceResponseBody {
	s.Success = &v
	return s
}

type StartDISyncInstanceResponseBodyData struct {
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Status  *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s StartDISyncInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s StartDISyncInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *StartDISyncInstanceResponseBodyData) SetMessage(v string) *StartDISyncInstanceResponseBodyData {
	s.Message = &v
	return s
}

func (s *StartDISyncInstanceResponseBodyData) SetStatus(v string) *StartDISyncInstanceResponseBodyData {
	s.Status = &v
	return s
}

type StartDISyncInstanceResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartDISyncInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartDISyncInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDISyncInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartDISyncInstanceResponse) SetHeaders(v map[string]*string) *StartDISyncInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartDISyncInstanceResponse) SetBody(v *StartDISyncInstanceResponseBody) *StartDISyncInstanceResponse {
	s.Body = v
	return s
}

type StartMigrationRequest struct {
	MigrationId *int64 `json:"MigrationId,omitempty" xml:"MigrationId,omitempty"`
	ProjectId   *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s StartMigrationRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMigrationRequest) GoString() string {
	return s.String()
}

func (s *StartMigrationRequest) SetMigrationId(v int64) *StartMigrationRequest {
	s.MigrationId = &v
	return s
}

func (s *StartMigrationRequest) SetProjectId(v int64) *StartMigrationRequest {
	s.ProjectId = &v
	return s
}

type StartMigrationResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StartMigrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartMigrationResponseBody) GoString() string {
	return s.String()
}

func (s *StartMigrationResponseBody) SetData(v bool) *StartMigrationResponseBody {
	s.Data = &v
	return s
}

func (s *StartMigrationResponseBody) SetErrorCode(v string) *StartMigrationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *StartMigrationResponseBody) SetErrorMessage(v string) *StartMigrationResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *StartMigrationResponseBody) SetHttpStatusCode(v int32) *StartMigrationResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StartMigrationResponseBody) SetRequestId(v string) *StartMigrationResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartMigrationResponseBody) SetSuccess(v bool) *StartMigrationResponseBody {
	s.Success = &v
	return s
}

type StartMigrationResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartMigrationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartMigrationResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMigrationResponse) GoString() string {
	return s.String()
}

func (s *StartMigrationResponse) SetHeaders(v map[string]*string) *StartMigrationResponse {
	s.Headers = v
	return s
}

func (s *StartMigrationResponse) SetBody(v *StartMigrationResponseBody) *StartMigrationResponse {
	s.Body = v
	return s
}

type StopDISyncInstanceRequest struct {
	FileId    *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TaskType  *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s StopDISyncInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopDISyncInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopDISyncInstanceRequest) SetFileId(v int64) *StopDISyncInstanceRequest {
	s.FileId = &v
	return s
}

func (s *StopDISyncInstanceRequest) SetProjectId(v int64) *StopDISyncInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *StopDISyncInstanceRequest) SetTaskType(v string) *StopDISyncInstanceRequest {
	s.TaskType = &v
	return s
}

type StopDISyncInstanceResponseBody struct {
	Data      *StopDISyncInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StopDISyncInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopDISyncInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StopDISyncInstanceResponseBody) SetData(v *StopDISyncInstanceResponseBodyData) *StopDISyncInstanceResponseBody {
	s.Data = v
	return s
}

func (s *StopDISyncInstanceResponseBody) SetRequestId(v string) *StopDISyncInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopDISyncInstanceResponseBody) SetSuccess(v bool) *StopDISyncInstanceResponseBody {
	s.Success = &v
	return s
}

type StopDISyncInstanceResponseBodyData struct {
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Status  *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s StopDISyncInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s StopDISyncInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *StopDISyncInstanceResponseBodyData) SetMessage(v string) *StopDISyncInstanceResponseBodyData {
	s.Message = &v
	return s
}

func (s *StopDISyncInstanceResponseBodyData) SetStatus(v string) *StopDISyncInstanceResponseBodyData {
	s.Status = &v
	return s
}

type StopDISyncInstanceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopDISyncInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopDISyncInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopDISyncInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopDISyncInstanceResponse) SetHeaders(v map[string]*string) *StopDISyncInstanceResponse {
	s.Headers = v
	return s
}

func (s *StopDISyncInstanceResponse) SetBody(v *StopDISyncInstanceResponseBody) *StopDISyncInstanceResponse {
	s.Body = v
	return s
}

type StopInstanceRequest struct {
	InstanceId *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s StopInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopInstanceRequest) SetInstanceId(v int64) *StopInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *StopInstanceRequest) SetProjectEnv(v string) *StopInstanceRequest {
	s.ProjectEnv = &v
	return s
}

type StopInstanceResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StopInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StopInstanceResponseBody) SetData(v bool) *StopInstanceResponseBody {
	s.Data = &v
	return s
}

func (s *StopInstanceResponseBody) SetErrorCode(v string) *StopInstanceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *StopInstanceResponseBody) SetErrorMessage(v string) *StopInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *StopInstanceResponseBody) SetHttpStatusCode(v int32) *StopInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StopInstanceResponseBody) SetRequestId(v string) *StopInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopInstanceResponseBody) SetSuccess(v bool) *StopInstanceResponseBody {
	s.Success = &v
	return s
}

type StopInstanceResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopInstanceResponse) SetHeaders(v map[string]*string) *StopInstanceResponse {
	s.Headers = v
	return s
}

func (s *StopInstanceResponse) SetBody(v *StopInstanceResponseBody) *StopInstanceResponse {
	s.Body = v
	return s
}

type SubmitFileRequest struct {
	Comment           *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	FileId            *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s SubmitFileRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitFileRequest) GoString() string {
	return s.String()
}

func (s *SubmitFileRequest) SetComment(v string) *SubmitFileRequest {
	s.Comment = &v
	return s
}

func (s *SubmitFileRequest) SetFileId(v int64) *SubmitFileRequest {
	s.FileId = &v
	return s
}

func (s *SubmitFileRequest) SetProjectId(v int64) *SubmitFileRequest {
	s.ProjectId = &v
	return s
}

func (s *SubmitFileRequest) SetProjectIdentifier(v string) *SubmitFileRequest {
	s.ProjectIdentifier = &v
	return s
}

type SubmitFileResponseBody struct {
	Data           *int64  `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitFileResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitFileResponseBody) SetData(v int64) *SubmitFileResponseBody {
	s.Data = &v
	return s
}

func (s *SubmitFileResponseBody) SetErrorCode(v string) *SubmitFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SubmitFileResponseBody) SetErrorMessage(v string) *SubmitFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitFileResponseBody) SetHttpStatusCode(v int32) *SubmitFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SubmitFileResponseBody) SetRequestId(v string) *SubmitFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitFileResponseBody) SetSuccess(v bool) *SubmitFileResponseBody {
	s.Success = &v
	return s
}

type SubmitFileResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitFileResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitFileResponse) GoString() string {
	return s.String()
}

func (s *SubmitFileResponse) SetHeaders(v map[string]*string) *SubmitFileResponse {
	s.Headers = v
	return s
}

func (s *SubmitFileResponse) SetBody(v *SubmitFileResponseBody) *SubmitFileResponse {
	s.Body = v
	return s
}

type SuspendInstanceRequest struct {
	InstanceId *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s SuspendInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendInstanceRequest) GoString() string {
	return s.String()
}

func (s *SuspendInstanceRequest) SetInstanceId(v int64) *SuspendInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *SuspendInstanceRequest) SetProjectEnv(v string) *SuspendInstanceRequest {
	s.ProjectEnv = &v
	return s
}

type SuspendInstanceResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SuspendInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SuspendInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *SuspendInstanceResponseBody) SetData(v bool) *SuspendInstanceResponseBody {
	s.Data = &v
	return s
}

func (s *SuspendInstanceResponseBody) SetErrorCode(v string) *SuspendInstanceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SuspendInstanceResponseBody) SetErrorMessage(v string) *SuspendInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SuspendInstanceResponseBody) SetHttpStatusCode(v int32) *SuspendInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SuspendInstanceResponseBody) SetRequestId(v string) *SuspendInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *SuspendInstanceResponseBody) SetSuccess(v bool) *SuspendInstanceResponseBody {
	s.Success = &v
	return s
}

type SuspendInstanceResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SuspendInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SuspendInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s SuspendInstanceResponse) GoString() string {
	return s.String()
}

func (s *SuspendInstanceResponse) SetHeaders(v map[string]*string) *SuspendInstanceResponse {
	s.Headers = v
	return s
}

func (s *SuspendInstanceResponse) SetBody(v *SuspendInstanceResponseBody) *SuspendInstanceResponse {
	s.Body = v
	return s
}

type TerminateDISyncInstanceRequest struct {
	FileId    *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TaskType  *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s TerminateDISyncInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s TerminateDISyncInstanceRequest) GoString() string {
	return s.String()
}

func (s *TerminateDISyncInstanceRequest) SetFileId(v int64) *TerminateDISyncInstanceRequest {
	s.FileId = &v
	return s
}

func (s *TerminateDISyncInstanceRequest) SetProjectId(v int64) *TerminateDISyncInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *TerminateDISyncInstanceRequest) SetTaskType(v string) *TerminateDISyncInstanceRequest {
	s.TaskType = &v
	return s
}

type TerminateDISyncInstanceResponseBody struct {
	Data      *TerminateDISyncInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s TerminateDISyncInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TerminateDISyncInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *TerminateDISyncInstanceResponseBody) SetData(v *TerminateDISyncInstanceResponseBodyData) *TerminateDISyncInstanceResponseBody {
	s.Data = v
	return s
}

func (s *TerminateDISyncInstanceResponseBody) SetRequestId(v string) *TerminateDISyncInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *TerminateDISyncInstanceResponseBody) SetSuccess(v bool) *TerminateDISyncInstanceResponseBody {
	s.Success = &v
	return s
}

type TerminateDISyncInstanceResponseBodyData struct {
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Status  *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s TerminateDISyncInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s TerminateDISyncInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *TerminateDISyncInstanceResponseBodyData) SetMessage(v string) *TerminateDISyncInstanceResponseBodyData {
	s.Message = &v
	return s
}

func (s *TerminateDISyncInstanceResponseBodyData) SetStatus(v string) *TerminateDISyncInstanceResponseBodyData {
	s.Status = &v
	return s
}

type TerminateDISyncInstanceResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TerminateDISyncInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TerminateDISyncInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s TerminateDISyncInstanceResponse) GoString() string {
	return s.String()
}

func (s *TerminateDISyncInstanceResponse) SetHeaders(v map[string]*string) *TerminateDISyncInstanceResponse {
	s.Headers = v
	return s
}

func (s *TerminateDISyncInstanceResponse) SetBody(v *TerminateDISyncInstanceResponseBody) *TerminateDISyncInstanceResponse {
	s.Body = v
	return s
}

type TestNetworkConnectionRequest struct {
	DatasourceName *string `json:"DatasourceName,omitempty" xml:"DatasourceName,omitempty"`
	EnvType        *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	ProjectId      *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ResourceGroup  *string `json:"ResourceGroup,omitempty" xml:"ResourceGroup,omitempty"`
}

func (s TestNetworkConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s TestNetworkConnectionRequest) GoString() string {
	return s.String()
}

func (s *TestNetworkConnectionRequest) SetDatasourceName(v string) *TestNetworkConnectionRequest {
	s.DatasourceName = &v
	return s
}

func (s *TestNetworkConnectionRequest) SetEnvType(v string) *TestNetworkConnectionRequest {
	s.EnvType = &v
	return s
}

func (s *TestNetworkConnectionRequest) SetProjectId(v int64) *TestNetworkConnectionRequest {
	s.ProjectId = &v
	return s
}

func (s *TestNetworkConnectionRequest) SetResourceGroup(v string) *TestNetworkConnectionRequest {
	s.ResourceGroup = &v
	return s
}

type TestNetworkConnectionResponseBody struct {
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
	TaskList  *TestNetworkConnectionResponseBodyTaskList `json:"TaskList,omitempty" xml:"TaskList,omitempty" type:"Struct"`
}

func (s TestNetworkConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TestNetworkConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *TestNetworkConnectionResponseBody) SetRequestId(v string) *TestNetworkConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *TestNetworkConnectionResponseBody) SetSuccess(v bool) *TestNetworkConnectionResponseBody {
	s.Success = &v
	return s
}

func (s *TestNetworkConnectionResponseBody) SetTaskList(v *TestNetworkConnectionResponseBodyTaskList) *TestNetworkConnectionResponseBody {
	s.TaskList = v
	return s
}

type TestNetworkConnectionResponseBodyTaskList struct {
	ConnectMessage *string `json:"ConnectMessage,omitempty" xml:"ConnectMessage,omitempty"`
	ConnectStatus  *bool   `json:"ConnectStatus,omitempty" xml:"ConnectStatus,omitempty"`
}

func (s TestNetworkConnectionResponseBodyTaskList) String() string {
	return tea.Prettify(s)
}

func (s TestNetworkConnectionResponseBodyTaskList) GoString() string {
	return s.String()
}

func (s *TestNetworkConnectionResponseBodyTaskList) SetConnectMessage(v string) *TestNetworkConnectionResponseBodyTaskList {
	s.ConnectMessage = &v
	return s
}

func (s *TestNetworkConnectionResponseBodyTaskList) SetConnectStatus(v bool) *TestNetworkConnectionResponseBodyTaskList {
	s.ConnectStatus = &v
	return s
}

type TestNetworkConnectionResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TestNetworkConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TestNetworkConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s TestNetworkConnectionResponse) GoString() string {
	return s.String()
}

func (s *TestNetworkConnectionResponse) SetHeaders(v map[string]*string) *TestNetworkConnectionResponse {
	s.Headers = v
	return s
}

func (s *TestNetworkConnectionResponse) SetBody(v *TestNetworkConnectionResponseBody) *TestNetworkConnectionResponse {
	s.Body = v
	return s
}

type TopTenElapsedTimeInstanceRequest struct {
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s TopTenElapsedTimeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s TopTenElapsedTimeInstanceRequest) GoString() string {
	return s.String()
}

func (s *TopTenElapsedTimeInstanceRequest) SetProjectId(v int64) *TopTenElapsedTimeInstanceRequest {
	s.ProjectId = &v
	return s
}

type TopTenElapsedTimeInstanceResponseBody struct {
	InstanceConsumeTimeRank *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRank `json:"InstanceConsumeTimeRank,omitempty" xml:"InstanceConsumeTimeRank,omitempty" type:"Struct"`
	RequestId               *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TopTenElapsedTimeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TopTenElapsedTimeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *TopTenElapsedTimeInstanceResponseBody) SetInstanceConsumeTimeRank(v *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRank) *TopTenElapsedTimeInstanceResponseBody {
	s.InstanceConsumeTimeRank = v
	return s
}

func (s *TopTenElapsedTimeInstanceResponseBody) SetRequestId(v string) *TopTenElapsedTimeInstanceResponseBody {
	s.RequestId = &v
	return s
}

type TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRank struct {
	ConsumeTimeRank []*TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank `json:"ConsumeTimeRank,omitempty" xml:"ConsumeTimeRank,omitempty" type:"Repeated"`
	UpdateTime      *int64                                                                         `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRank) String() string {
	return tea.Prettify(s)
}

func (s TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRank) GoString() string {
	return s.String()
}

func (s *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRank) SetConsumeTimeRank(v []*TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank) *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRank {
	s.ConsumeTimeRank = v
	return s
}

func (s *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRank) SetUpdateTime(v int64) *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRank {
	s.UpdateTime = &v
	return s
}

type TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank struct {
	BusinessDate *int64  `json:"BusinessDate,omitempty" xml:"BusinessDate,omitempty"`
	Consumed     *int64  `json:"Consumed,omitempty" xml:"Consumed,omitempty"`
	InstanceId   *int64  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NodeId       *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName     *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner        *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProgramType  *int32  `json:"ProgramType,omitempty" xml:"ProgramType,omitempty"`
}

func (s TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank) String() string {
	return tea.Prettify(s)
}

func (s TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank) GoString() string {
	return s.String()
}

func (s *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetBusinessDate(v int64) *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.BusinessDate = &v
	return s
}

func (s *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetConsumed(v int64) *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.Consumed = &v
	return s
}

func (s *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetInstanceId(v int64) *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.InstanceId = &v
	return s
}

func (s *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetNodeId(v int64) *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.NodeId = &v
	return s
}

func (s *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetNodeName(v string) *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.NodeName = &v
	return s
}

func (s *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetOwner(v string) *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.Owner = &v
	return s
}

func (s *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank) SetProgramType(v int32) *TopTenElapsedTimeInstanceResponseBodyInstanceConsumeTimeRankConsumeTimeRank {
	s.ProgramType = &v
	return s
}

type TopTenElapsedTimeInstanceResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TopTenElapsedTimeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TopTenElapsedTimeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s TopTenElapsedTimeInstanceResponse) GoString() string {
	return s.String()
}

func (s *TopTenElapsedTimeInstanceResponse) SetHeaders(v map[string]*string) *TopTenElapsedTimeInstanceResponse {
	s.Headers = v
	return s
}

func (s *TopTenElapsedTimeInstanceResponse) SetBody(v *TopTenElapsedTimeInstanceResponseBody) *TopTenElapsedTimeInstanceResponse {
	s.Body = v
	return s
}

type TopTenErrorTimesInstanceRequest struct {
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s TopTenErrorTimesInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s TopTenErrorTimesInstanceRequest) GoString() string {
	return s.String()
}

func (s *TopTenErrorTimesInstanceRequest) SetProjectId(v int64) *TopTenErrorTimesInstanceRequest {
	s.ProjectId = &v
	return s
}

type TopTenErrorTimesInstanceResponseBody struct {
	InstanceErrorRank *TopTenErrorTimesInstanceResponseBodyInstanceErrorRank `json:"InstanceErrorRank,omitempty" xml:"InstanceErrorRank,omitempty" type:"Struct"`
	RequestId         *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TopTenErrorTimesInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TopTenErrorTimesInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *TopTenErrorTimesInstanceResponseBody) SetInstanceErrorRank(v *TopTenErrorTimesInstanceResponseBodyInstanceErrorRank) *TopTenErrorTimesInstanceResponseBody {
	s.InstanceErrorRank = v
	return s
}

func (s *TopTenErrorTimesInstanceResponseBody) SetRequestId(v string) *TopTenErrorTimesInstanceResponseBody {
	s.RequestId = &v
	return s
}

type TopTenErrorTimesInstanceResponseBodyInstanceErrorRank struct {
	ErrorRank  []*TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank `json:"ErrorRank,omitempty" xml:"ErrorRank,omitempty" type:"Repeated"`
	UpdateTime *int64                                                            `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s TopTenErrorTimesInstanceResponseBodyInstanceErrorRank) String() string {
	return tea.Prettify(s)
}

func (s TopTenErrorTimesInstanceResponseBodyInstanceErrorRank) GoString() string {
	return s.String()
}

func (s *TopTenErrorTimesInstanceResponseBodyInstanceErrorRank) SetErrorRank(v []*TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank) *TopTenErrorTimesInstanceResponseBodyInstanceErrorRank {
	s.ErrorRank = v
	return s
}

func (s *TopTenErrorTimesInstanceResponseBodyInstanceErrorRank) SetUpdateTime(v int64) *TopTenErrorTimesInstanceResponseBodyInstanceErrorRank {
	s.UpdateTime = &v
	return s
}

type TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank struct {
	Count       *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	NodeId      *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName    *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Owner       *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProgramType *int32  `json:"ProgramType,omitempty" xml:"ProgramType,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank) String() string {
	return tea.Prettify(s)
}

func (s TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank) GoString() string {
	return s.String()
}

func (s *TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank) SetCount(v int32) *TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank {
	s.Count = &v
	return s
}

func (s *TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank) SetNodeId(v int64) *TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank {
	s.NodeId = &v
	return s
}

func (s *TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank) SetNodeName(v string) *TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank {
	s.NodeName = &v
	return s
}

func (s *TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank) SetOwner(v string) *TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank {
	s.Owner = &v
	return s
}

func (s *TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank) SetProgramType(v int32) *TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank {
	s.ProgramType = &v
	return s
}

func (s *TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank) SetProjectId(v int64) *TopTenErrorTimesInstanceResponseBodyInstanceErrorRankErrorRank {
	s.ProjectId = &v
	return s
}

type TopTenErrorTimesInstanceResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TopTenErrorTimesInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TopTenErrorTimesInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s TopTenErrorTimesInstanceResponse) GoString() string {
	return s.String()
}

func (s *TopTenErrorTimesInstanceResponse) SetHeaders(v map[string]*string) *TopTenErrorTimesInstanceResponse {
	s.Headers = v
	return s
}

func (s *TopTenErrorTimesInstanceResponse) SetBody(v *TopTenErrorTimesInstanceResponseBody) *TopTenErrorTimesInstanceResponse {
	s.Body = v
	return s
}

type UpdateBusinessRequest struct {
	BusinessId        *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	BusinessName      *string `json:"BusinessName,omitempty" xml:"BusinessName,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Owner             *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s UpdateBusinessRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessRequest) GoString() string {
	return s.String()
}

func (s *UpdateBusinessRequest) SetBusinessId(v int64) *UpdateBusinessRequest {
	s.BusinessId = &v
	return s
}

func (s *UpdateBusinessRequest) SetBusinessName(v string) *UpdateBusinessRequest {
	s.BusinessName = &v
	return s
}

func (s *UpdateBusinessRequest) SetDescription(v string) *UpdateBusinessRequest {
	s.Description = &v
	return s
}

func (s *UpdateBusinessRequest) SetOwner(v string) *UpdateBusinessRequest {
	s.Owner = &v
	return s
}

func (s *UpdateBusinessRequest) SetProjectId(v int64) *UpdateBusinessRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateBusinessRequest) SetProjectIdentifier(v string) *UpdateBusinessRequest {
	s.ProjectIdentifier = &v
	return s
}

type UpdateBusinessResponseBody struct {
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateBusinessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateBusinessResponseBody) SetErrorCode(v string) *UpdateBusinessResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateBusinessResponseBody) SetErrorMessage(v string) *UpdateBusinessResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateBusinessResponseBody) SetHttpStatusCode(v int32) *UpdateBusinessResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateBusinessResponseBody) SetRequestId(v string) *UpdateBusinessResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateBusinessResponseBody) SetSuccess(v bool) *UpdateBusinessResponseBody {
	s.Success = &v
	return s
}

type UpdateBusinessResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateBusinessResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateBusinessResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessResponse) GoString() string {
	return s.String()
}

func (s *UpdateBusinessResponse) SetHeaders(v map[string]*string) *UpdateBusinessResponse {
	s.Headers = v
	return s
}

func (s *UpdateBusinessResponse) SetBody(v *UpdateBusinessResponseBody) *UpdateBusinessResponse {
	s.Body = v
	return s
}

type UpdateConnectionRequest struct {
	ConnectionId *int64  `json:"ConnectionId,omitempty" xml:"ConnectionId,omitempty"`
	Content      *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnvType      *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConnectionRequest) GoString() string {
	return s.String()
}

func (s *UpdateConnectionRequest) SetConnectionId(v int64) *UpdateConnectionRequest {
	s.ConnectionId = &v
	return s
}

func (s *UpdateConnectionRequest) SetContent(v string) *UpdateConnectionRequest {
	s.Content = &v
	return s
}

func (s *UpdateConnectionRequest) SetDescription(v string) *UpdateConnectionRequest {
	s.Description = &v
	return s
}

func (s *UpdateConnectionRequest) SetEnvType(v int32) *UpdateConnectionRequest {
	s.EnvType = &v
	return s
}

func (s *UpdateConnectionRequest) SetStatus(v string) *UpdateConnectionRequest {
	s.Status = &v
	return s
}

type UpdateConnectionResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateConnectionResponseBody) SetData(v bool) *UpdateConnectionResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateConnectionResponseBody) SetHttpStatusCode(v string) *UpdateConnectionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateConnectionResponseBody) SetRequestId(v string) *UpdateConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateConnectionResponseBody) SetSuccess(v bool) *UpdateConnectionResponseBody {
	s.Success = &v
	return s
}

type UpdateConnectionResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConnectionResponse) GoString() string {
	return s.String()
}

func (s *UpdateConnectionResponse) SetHeaders(v map[string]*string) *UpdateConnectionResponse {
	s.Headers = v
	return s
}

func (s *UpdateConnectionResponse) SetBody(v *UpdateConnectionResponseBody) *UpdateConnectionResponse {
	s.Body = v
	return s
}

type UpdateDIProjectConfigRequest struct {
	DestinationType *string `json:"DestinationType,omitempty" xml:"DestinationType,omitempty"`
	ProjectConfig   *string `json:"ProjectConfig,omitempty" xml:"ProjectConfig,omitempty"`
	ProjectId       *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SourceType      *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s UpdateDIProjectConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIProjectConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateDIProjectConfigRequest) SetDestinationType(v string) *UpdateDIProjectConfigRequest {
	s.DestinationType = &v
	return s
}

func (s *UpdateDIProjectConfigRequest) SetProjectConfig(v string) *UpdateDIProjectConfigRequest {
	s.ProjectConfig = &v
	return s
}

func (s *UpdateDIProjectConfigRequest) SetProjectId(v int64) *UpdateDIProjectConfigRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateDIProjectConfigRequest) SetSourceType(v string) *UpdateDIProjectConfigRequest {
	s.SourceType = &v
	return s
}

type UpdateDIProjectConfigResponseBody struct {
	Data      *UpdateDIProjectConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDIProjectConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIProjectConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDIProjectConfigResponseBody) SetData(v *UpdateDIProjectConfigResponseBodyData) *UpdateDIProjectConfigResponseBody {
	s.Data = v
	return s
}

func (s *UpdateDIProjectConfigResponseBody) SetRequestId(v string) *UpdateDIProjectConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDIProjectConfigResponseBody) SetSuccess(v bool) *UpdateDIProjectConfigResponseBody {
	s.Success = &v
	return s
}

type UpdateDIProjectConfigResponseBodyData struct {
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateDIProjectConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIProjectConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateDIProjectConfigResponseBodyData) SetStatus(v string) *UpdateDIProjectConfigResponseBodyData {
	s.Status = &v
	return s
}

type UpdateDIProjectConfigResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateDIProjectConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateDIProjectConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIProjectConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateDIProjectConfigResponse) SetHeaders(v map[string]*string) *UpdateDIProjectConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateDIProjectConfigResponse) SetBody(v *UpdateDIProjectConfigResponseBody) *UpdateDIProjectConfigResponse {
	s.Body = v
	return s
}

type UpdateDISyncTaskRequest struct {
	FileId      *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TaskContent *string `json:"TaskContent,omitempty" xml:"TaskContent,omitempty"`
	TaskParam   *string `json:"TaskParam,omitempty" xml:"TaskParam,omitempty"`
	TaskType    *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s UpdateDISyncTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDISyncTaskRequest) GoString() string {
	return s.String()
}

func (s *UpdateDISyncTaskRequest) SetFileId(v int64) *UpdateDISyncTaskRequest {
	s.FileId = &v
	return s
}

func (s *UpdateDISyncTaskRequest) SetProjectId(v int64) *UpdateDISyncTaskRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateDISyncTaskRequest) SetTaskContent(v string) *UpdateDISyncTaskRequest {
	s.TaskContent = &v
	return s
}

func (s *UpdateDISyncTaskRequest) SetTaskParam(v string) *UpdateDISyncTaskRequest {
	s.TaskParam = &v
	return s
}

func (s *UpdateDISyncTaskRequest) SetTaskType(v string) *UpdateDISyncTaskRequest {
	s.TaskType = &v
	return s
}

type UpdateDISyncTaskResponseBody struct {
	Data      *UpdateDISyncTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDISyncTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDISyncTaskResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDISyncTaskResponseBody) SetData(v *UpdateDISyncTaskResponseBodyData) *UpdateDISyncTaskResponseBody {
	s.Data = v
	return s
}

func (s *UpdateDISyncTaskResponseBody) SetRequestId(v string) *UpdateDISyncTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDISyncTaskResponseBody) SetSuccess(v bool) *UpdateDISyncTaskResponseBody {
	s.Success = &v
	return s
}

type UpdateDISyncTaskResponseBodyData struct {
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Status  *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateDISyncTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateDISyncTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateDISyncTaskResponseBodyData) SetMessage(v string) *UpdateDISyncTaskResponseBodyData {
	s.Message = &v
	return s
}

func (s *UpdateDISyncTaskResponseBodyData) SetStatus(v string) *UpdateDISyncTaskResponseBodyData {
	s.Status = &v
	return s
}

type UpdateDISyncTaskResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateDISyncTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateDISyncTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDISyncTaskResponse) GoString() string {
	return s.String()
}

func (s *UpdateDISyncTaskResponse) SetHeaders(v map[string]*string) *UpdateDISyncTaskResponse {
	s.Headers = v
	return s
}

func (s *UpdateDISyncTaskResponse) SetBody(v *UpdateDISyncTaskResponseBody) *UpdateDISyncTaskResponse {
	s.Body = v
	return s
}

type UpdateDataServiceApiRequest struct {
	ApiDescription      *string `json:"ApiDescription,omitempty" xml:"ApiDescription,omitempty"`
	ApiId               *int64  `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiPath             *string `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	ProjectId           *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Protocols           *string `json:"Protocols,omitempty" xml:"Protocols,omitempty"`
	RegistrationDetails *string `json:"RegistrationDetails,omitempty" xml:"RegistrationDetails,omitempty"`
	RequestMethod       *int32  `json:"RequestMethod,omitempty" xml:"RequestMethod,omitempty"`
	ResponseContentType *int32  `json:"ResponseContentType,omitempty" xml:"ResponseContentType,omitempty"`
	ScriptDetails       *string `json:"ScriptDetails,omitempty" xml:"ScriptDetails,omitempty"`
	TenantId            *int64  `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Timeout             *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	VisibleRange        *int32  `json:"VisibleRange,omitempty" xml:"VisibleRange,omitempty"`
	WizardDetails       *string `json:"WizardDetails,omitempty" xml:"WizardDetails,omitempty"`
}

func (s UpdateDataServiceApiRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataServiceApiRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataServiceApiRequest) SetApiDescription(v string) *UpdateDataServiceApiRequest {
	s.ApiDescription = &v
	return s
}

func (s *UpdateDataServiceApiRequest) SetApiId(v int64) *UpdateDataServiceApiRequest {
	s.ApiId = &v
	return s
}

func (s *UpdateDataServiceApiRequest) SetApiPath(v string) *UpdateDataServiceApiRequest {
	s.ApiPath = &v
	return s
}

func (s *UpdateDataServiceApiRequest) SetProjectId(v int64) *UpdateDataServiceApiRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateDataServiceApiRequest) SetProtocols(v string) *UpdateDataServiceApiRequest {
	s.Protocols = &v
	return s
}

func (s *UpdateDataServiceApiRequest) SetRegistrationDetails(v string) *UpdateDataServiceApiRequest {
	s.RegistrationDetails = &v
	return s
}

func (s *UpdateDataServiceApiRequest) SetRequestMethod(v int32) *UpdateDataServiceApiRequest {
	s.RequestMethod = &v
	return s
}

func (s *UpdateDataServiceApiRequest) SetResponseContentType(v int32) *UpdateDataServiceApiRequest {
	s.ResponseContentType = &v
	return s
}

func (s *UpdateDataServiceApiRequest) SetScriptDetails(v string) *UpdateDataServiceApiRequest {
	s.ScriptDetails = &v
	return s
}

func (s *UpdateDataServiceApiRequest) SetTenantId(v int64) *UpdateDataServiceApiRequest {
	s.TenantId = &v
	return s
}

func (s *UpdateDataServiceApiRequest) SetTimeout(v int32) *UpdateDataServiceApiRequest {
	s.Timeout = &v
	return s
}

func (s *UpdateDataServiceApiRequest) SetVisibleRange(v int32) *UpdateDataServiceApiRequest {
	s.VisibleRange = &v
	return s
}

func (s *UpdateDataServiceApiRequest) SetWizardDetails(v string) *UpdateDataServiceApiRequest {
	s.WizardDetails = &v
	return s
}

type UpdateDataServiceApiResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDataServiceApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataServiceApiResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDataServiceApiResponseBody) SetData(v bool) *UpdateDataServiceApiResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateDataServiceApiResponseBody) SetErrorCode(v string) *UpdateDataServiceApiResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateDataServiceApiResponseBody) SetErrorMessage(v string) *UpdateDataServiceApiResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateDataServiceApiResponseBody) SetHttpStatusCode(v int32) *UpdateDataServiceApiResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateDataServiceApiResponseBody) SetRequestId(v string) *UpdateDataServiceApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDataServiceApiResponseBody) SetSuccess(v bool) *UpdateDataServiceApiResponseBody {
	s.Success = &v
	return s
}

type UpdateDataServiceApiResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateDataServiceApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateDataServiceApiResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataServiceApiResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataServiceApiResponse) SetHeaders(v map[string]*string) *UpdateDataServiceApiResponse {
	s.Headers = v
	return s
}

func (s *UpdateDataServiceApiResponse) SetBody(v *UpdateDataServiceApiResponseBody) *UpdateDataServiceApiResponse {
	s.Body = v
	return s
}

type UpdateDataSourceRequest struct {
	Content      *string `json:"Content,omitempty" xml:"Content,omitempty"`
	DataSourceId *int64  `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnvType      *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceRequest) SetContent(v string) *UpdateDataSourceRequest {
	s.Content = &v
	return s
}

func (s *UpdateDataSourceRequest) SetDataSourceId(v int64) *UpdateDataSourceRequest {
	s.DataSourceId = &v
	return s
}

func (s *UpdateDataSourceRequest) SetDescription(v string) *UpdateDataSourceRequest {
	s.Description = &v
	return s
}

func (s *UpdateDataSourceRequest) SetEnvType(v int32) *UpdateDataSourceRequest {
	s.EnvType = &v
	return s
}

func (s *UpdateDataSourceRequest) SetStatus(v string) *UpdateDataSourceRequest {
	s.Status = &v
	return s
}

type UpdateDataSourceResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceResponseBody) SetData(v bool) *UpdateDataSourceResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateDataSourceResponseBody) SetHttpStatusCode(v string) *UpdateDataSourceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateDataSourceResponseBody) SetRequestId(v string) *UpdateDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDataSourceResponseBody) SetSuccess(v bool) *UpdateDataSourceResponseBody {
	s.Success = &v
	return s
}

type UpdateDataSourceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceResponse) SetHeaders(v map[string]*string) *UpdateDataSourceResponse {
	s.Headers = v
	return s
}

func (s *UpdateDataSourceResponse) SetBody(v *UpdateDataSourceResponseBody) *UpdateDataSourceResponse {
	s.Body = v
	return s
}

type UpdateFileRequest struct {
	AdvancedSettings        *string `json:"AdvancedSettings,omitempty" xml:"AdvancedSettings,omitempty"`
	AutoParsing             *bool   `json:"AutoParsing,omitempty" xml:"AutoParsing,omitempty"`
	AutoRerunIntervalMillis *int32  `json:"AutoRerunIntervalMillis,omitempty" xml:"AutoRerunIntervalMillis,omitempty"`
	AutoRerunTimes          *int32  `json:"AutoRerunTimes,omitempty" xml:"AutoRerunTimes,omitempty"`
	ConnectionName          *string `json:"ConnectionName,omitempty" xml:"ConnectionName,omitempty"`
	Content                 *string `json:"Content,omitempty" xml:"Content,omitempty"`
	CronExpress             *string `json:"CronExpress,omitempty" xml:"CronExpress,omitempty"`
	CycleType               *string `json:"CycleType,omitempty" xml:"CycleType,omitempty"`
	DependentNodeIdList     *string `json:"DependentNodeIdList,omitempty" xml:"DependentNodeIdList,omitempty"`
	DependentType           *string `json:"DependentType,omitempty" xml:"DependentType,omitempty"`
	EndEffectDate           *int64  `json:"EndEffectDate,omitempty" xml:"EndEffectDate,omitempty"`
	FileDescription         *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	FileFolderPath          *string `json:"FileFolderPath,omitempty" xml:"FileFolderPath,omitempty"`
	FileId                  *int64  `json:"FileId,omitempty" xml:"FileId,omitempty"`
	FileName                *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	InputList               *string `json:"InputList,omitempty" xml:"InputList,omitempty"`
	OutputList              *string `json:"OutputList,omitempty" xml:"OutputList,omitempty"`
	Owner                   *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ParaValue               *string `json:"ParaValue,omitempty" xml:"ParaValue,omitempty"`
	ProjectId               *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier       *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	RerunMode               *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	ResourceGroupIdentifier *string `json:"ResourceGroupIdentifier,omitempty" xml:"ResourceGroupIdentifier,omitempty"`
	SchedulerType           *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
	StartEffectDate         *int64  `json:"StartEffectDate,omitempty" xml:"StartEffectDate,omitempty"`
	StartImmediately        *bool   `json:"StartImmediately,omitempty" xml:"StartImmediately,omitempty"`
	Stop                    *bool   `json:"Stop,omitempty" xml:"Stop,omitempty"`
}

func (s UpdateFileRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFileRequest) GoString() string {
	return s.String()
}

func (s *UpdateFileRequest) SetAdvancedSettings(v string) *UpdateFileRequest {
	s.AdvancedSettings = &v
	return s
}

func (s *UpdateFileRequest) SetAutoParsing(v bool) *UpdateFileRequest {
	s.AutoParsing = &v
	return s
}

func (s *UpdateFileRequest) SetAutoRerunIntervalMillis(v int32) *UpdateFileRequest {
	s.AutoRerunIntervalMillis = &v
	return s
}

func (s *UpdateFileRequest) SetAutoRerunTimes(v int32) *UpdateFileRequest {
	s.AutoRerunTimes = &v
	return s
}

func (s *UpdateFileRequest) SetConnectionName(v string) *UpdateFileRequest {
	s.ConnectionName = &v
	return s
}

func (s *UpdateFileRequest) SetContent(v string) *UpdateFileRequest {
	s.Content = &v
	return s
}

func (s *UpdateFileRequest) SetCronExpress(v string) *UpdateFileRequest {
	s.CronExpress = &v
	return s
}

func (s *UpdateFileRequest) SetCycleType(v string) *UpdateFileRequest {
	s.CycleType = &v
	return s
}

func (s *UpdateFileRequest) SetDependentNodeIdList(v string) *UpdateFileRequest {
	s.DependentNodeIdList = &v
	return s
}

func (s *UpdateFileRequest) SetDependentType(v string) *UpdateFileRequest {
	s.DependentType = &v
	return s
}

func (s *UpdateFileRequest) SetEndEffectDate(v int64) *UpdateFileRequest {
	s.EndEffectDate = &v
	return s
}

func (s *UpdateFileRequest) SetFileDescription(v string) *UpdateFileRequest {
	s.FileDescription = &v
	return s
}

func (s *UpdateFileRequest) SetFileFolderPath(v string) *UpdateFileRequest {
	s.FileFolderPath = &v
	return s
}

func (s *UpdateFileRequest) SetFileId(v int64) *UpdateFileRequest {
	s.FileId = &v
	return s
}

func (s *UpdateFileRequest) SetFileName(v string) *UpdateFileRequest {
	s.FileName = &v
	return s
}

func (s *UpdateFileRequest) SetInputList(v string) *UpdateFileRequest {
	s.InputList = &v
	return s
}

func (s *UpdateFileRequest) SetOutputList(v string) *UpdateFileRequest {
	s.OutputList = &v
	return s
}

func (s *UpdateFileRequest) SetOwner(v string) *UpdateFileRequest {
	s.Owner = &v
	return s
}

func (s *UpdateFileRequest) SetParaValue(v string) *UpdateFileRequest {
	s.ParaValue = &v
	return s
}

func (s *UpdateFileRequest) SetProjectId(v int64) *UpdateFileRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateFileRequest) SetProjectIdentifier(v string) *UpdateFileRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *UpdateFileRequest) SetRerunMode(v string) *UpdateFileRequest {
	s.RerunMode = &v
	return s
}

func (s *UpdateFileRequest) SetResourceGroupIdentifier(v string) *UpdateFileRequest {
	s.ResourceGroupIdentifier = &v
	return s
}

func (s *UpdateFileRequest) SetSchedulerType(v string) *UpdateFileRequest {
	s.SchedulerType = &v
	return s
}

func (s *UpdateFileRequest) SetStartEffectDate(v int64) *UpdateFileRequest {
	s.StartEffectDate = &v
	return s
}

func (s *UpdateFileRequest) SetStartImmediately(v bool) *UpdateFileRequest {
	s.StartImmediately = &v
	return s
}

func (s *UpdateFileRequest) SetStop(v bool) *UpdateFileRequest {
	s.Stop = &v
	return s
}

type UpdateFileResponseBody struct {
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateFileResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateFileResponseBody) SetErrorCode(v string) *UpdateFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateFileResponseBody) SetErrorMessage(v string) *UpdateFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateFileResponseBody) SetHttpStatusCode(v int32) *UpdateFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateFileResponseBody) SetRequestId(v string) *UpdateFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateFileResponseBody) SetSuccess(v bool) *UpdateFileResponseBody {
	s.Success = &v
	return s
}

type UpdateFileResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateFileResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFileResponse) GoString() string {
	return s.String()
}

func (s *UpdateFileResponse) SetHeaders(v map[string]*string) *UpdateFileResponse {
	s.Headers = v
	return s
}

func (s *UpdateFileResponse) SetBody(v *UpdateFileResponseBody) *UpdateFileResponse {
	s.Body = v
	return s
}

type UpdateFolderRequest struct {
	FolderId          *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	FolderName        *string `json:"FolderName,omitempty" xml:"FolderName,omitempty"`
	ProjectId         *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s UpdateFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFolderRequest) GoString() string {
	return s.String()
}

func (s *UpdateFolderRequest) SetFolderId(v string) *UpdateFolderRequest {
	s.FolderId = &v
	return s
}

func (s *UpdateFolderRequest) SetFolderName(v string) *UpdateFolderRequest {
	s.FolderName = &v
	return s
}

func (s *UpdateFolderRequest) SetProjectId(v int64) *UpdateFolderRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateFolderRequest) SetProjectIdentifier(v string) *UpdateFolderRequest {
	s.ProjectIdentifier = &v
	return s
}

type UpdateFolderResponseBody struct {
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateFolderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateFolderResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateFolderResponseBody) SetErrorCode(v string) *UpdateFolderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateFolderResponseBody) SetErrorMessage(v string) *UpdateFolderResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateFolderResponseBody) SetHttpStatusCode(v int32) *UpdateFolderResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateFolderResponseBody) SetRequestId(v string) *UpdateFolderResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateFolderResponseBody) SetSuccess(v bool) *UpdateFolderResponseBody {
	s.Success = &v
	return s
}

type UpdateFolderResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateFolderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFolderResponse) GoString() string {
	return s.String()
}

func (s *UpdateFolderResponse) SetHeaders(v map[string]*string) *UpdateFolderResponse {
	s.Headers = v
	return s
}

func (s *UpdateFolderResponse) SetBody(v *UpdateFolderResponseBody) *UpdateFolderResponse {
	s.Body = v
	return s
}

type UpdateIDEEventResultRequest struct {
	CheckResult    *string `json:"CheckResult,omitempty" xml:"CheckResult,omitempty"`
	CheckResultTip *string `json:"CheckResultTip,omitempty" xml:"CheckResultTip,omitempty"`
	ExtensionCode  *string `json:"ExtensionCode,omitempty" xml:"ExtensionCode,omitempty"`
	// 消息UUID
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s UpdateIDEEventResultRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIDEEventResultRequest) GoString() string {
	return s.String()
}

func (s *UpdateIDEEventResultRequest) SetCheckResult(v string) *UpdateIDEEventResultRequest {
	s.CheckResult = &v
	return s
}

func (s *UpdateIDEEventResultRequest) SetCheckResultTip(v string) *UpdateIDEEventResultRequest {
	s.CheckResultTip = &v
	return s
}

func (s *UpdateIDEEventResultRequest) SetExtensionCode(v string) *UpdateIDEEventResultRequest {
	s.ExtensionCode = &v
	return s
}

func (s *UpdateIDEEventResultRequest) SetMessageId(v string) *UpdateIDEEventResultRequest {
	s.MessageId = &v
	return s
}

type UpdateIDEEventResultResponseBody struct {
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateIDEEventResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateIDEEventResultResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateIDEEventResultResponseBody) SetRequestId(v string) *UpdateIDEEventResultResponseBody {
	s.RequestId = &v
	return s
}

type UpdateIDEEventResultResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateIDEEventResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateIDEEventResultResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIDEEventResultResponse) GoString() string {
	return s.String()
}

func (s *UpdateIDEEventResultResponse) SetHeaders(v map[string]*string) *UpdateIDEEventResultResponse {
	s.Headers = v
	return s
}

func (s *UpdateIDEEventResultResponse) SetBody(v *UpdateIDEEventResultResponseBody) *UpdateIDEEventResultResponse {
	s.Body = v
	return s
}

type UpdateMetaCategoryRequest struct {
	CategoryId *int64  `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	Comment    *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateMetaCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaCategoryRequest) GoString() string {
	return s.String()
}

func (s *UpdateMetaCategoryRequest) SetCategoryId(v int64) *UpdateMetaCategoryRequest {
	s.CategoryId = &v
	return s
}

func (s *UpdateMetaCategoryRequest) SetComment(v string) *UpdateMetaCategoryRequest {
	s.Comment = &v
	return s
}

func (s *UpdateMetaCategoryRequest) SetName(v string) *UpdateMetaCategoryRequest {
	s.Name = &v
	return s
}

type UpdateMetaCategoryResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateMetaCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMetaCategoryResponseBody) SetData(v bool) *UpdateMetaCategoryResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateMetaCategoryResponseBody) SetErrorCode(v string) *UpdateMetaCategoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateMetaCategoryResponseBody) SetErrorMessage(v string) *UpdateMetaCategoryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateMetaCategoryResponseBody) SetHttpStatusCode(v int32) *UpdateMetaCategoryResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateMetaCategoryResponseBody) SetRequestId(v string) *UpdateMetaCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMetaCategoryResponseBody) SetSuccess(v bool) *UpdateMetaCategoryResponseBody {
	s.Success = &v
	return s
}

type UpdateMetaCategoryResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMetaCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMetaCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaCategoryResponse) GoString() string {
	return s.String()
}

func (s *UpdateMetaCategoryResponse) SetHeaders(v map[string]*string) *UpdateMetaCategoryResponse {
	s.Headers = v
	return s
}

func (s *UpdateMetaCategoryResponse) SetBody(v *UpdateMetaCategoryResponseBody) *UpdateMetaCategoryResponse {
	s.Body = v
	return s
}

type UpdateMetaTableRequest struct {
	AddedLabels   *string `json:"AddedLabels,omitempty" xml:"AddedLabels,omitempty"`
	Caption       *string `json:"Caption,omitempty" xml:"Caption,omitempty"`
	CategoryId    *int64  `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	EnvType       *int32  `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	NewOwnerId    *string `json:"NewOwnerId,omitempty" xml:"NewOwnerId,omitempty"`
	ProjectId     *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RemovedLabels *string `json:"RemovedLabels,omitempty" xml:"RemovedLabels,omitempty"`
	TableGuid     *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	TableName     *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	Visibility    *int32  `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s UpdateMetaTableRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaTableRequest) GoString() string {
	return s.String()
}

func (s *UpdateMetaTableRequest) SetAddedLabels(v string) *UpdateMetaTableRequest {
	s.AddedLabels = &v
	return s
}

func (s *UpdateMetaTableRequest) SetCaption(v string) *UpdateMetaTableRequest {
	s.Caption = &v
	return s
}

func (s *UpdateMetaTableRequest) SetCategoryId(v int64) *UpdateMetaTableRequest {
	s.CategoryId = &v
	return s
}

func (s *UpdateMetaTableRequest) SetEnvType(v int32) *UpdateMetaTableRequest {
	s.EnvType = &v
	return s
}

func (s *UpdateMetaTableRequest) SetNewOwnerId(v string) *UpdateMetaTableRequest {
	s.NewOwnerId = &v
	return s
}

func (s *UpdateMetaTableRequest) SetProjectId(v int64) *UpdateMetaTableRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateMetaTableRequest) SetRemovedLabels(v string) *UpdateMetaTableRequest {
	s.RemovedLabels = &v
	return s
}

func (s *UpdateMetaTableRequest) SetTableGuid(v string) *UpdateMetaTableRequest {
	s.TableGuid = &v
	return s
}

func (s *UpdateMetaTableRequest) SetTableName(v string) *UpdateMetaTableRequest {
	s.TableName = &v
	return s
}

func (s *UpdateMetaTableRequest) SetVisibility(v int32) *UpdateMetaTableRequest {
	s.Visibility = &v
	return s
}

type UpdateMetaTableResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UpdateResult *bool   `json:"UpdateResult,omitempty" xml:"UpdateResult,omitempty"`
}

func (s UpdateMetaTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaTableResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMetaTableResponseBody) SetRequestId(v string) *UpdateMetaTableResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMetaTableResponseBody) SetUpdateResult(v bool) *UpdateMetaTableResponseBody {
	s.UpdateResult = &v
	return s
}

type UpdateMetaTableResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMetaTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMetaTableResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaTableResponse) GoString() string {
	return s.String()
}

func (s *UpdateMetaTableResponse) SetHeaders(v map[string]*string) *UpdateMetaTableResponse {
	s.Headers = v
	return s
}

func (s *UpdateMetaTableResponse) SetBody(v *UpdateMetaTableResponseBody) *UpdateMetaTableResponse {
	s.Body = v
	return s
}

type UpdateMetaTableIntroWikiRequest struct {
	Content   *string `json:"Content,omitempty" xml:"Content,omitempty"`
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s UpdateMetaTableIntroWikiRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaTableIntroWikiRequest) GoString() string {
	return s.String()
}

func (s *UpdateMetaTableIntroWikiRequest) SetContent(v string) *UpdateMetaTableIntroWikiRequest {
	s.Content = &v
	return s
}

func (s *UpdateMetaTableIntroWikiRequest) SetTableGuid(v string) *UpdateMetaTableIntroWikiRequest {
	s.TableGuid = &v
	return s
}

type UpdateMetaTableIntroWikiResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UpdateResult *bool   `json:"UpdateResult,omitempty" xml:"UpdateResult,omitempty"`
}

func (s UpdateMetaTableIntroWikiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaTableIntroWikiResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMetaTableIntroWikiResponseBody) SetRequestId(v string) *UpdateMetaTableIntroWikiResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMetaTableIntroWikiResponseBody) SetUpdateResult(v bool) *UpdateMetaTableIntroWikiResponseBody {
	s.UpdateResult = &v
	return s
}

type UpdateMetaTableIntroWikiResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMetaTableIntroWikiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMetaTableIntroWikiResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaTableIntroWikiResponse) GoString() string {
	return s.String()
}

func (s *UpdateMetaTableIntroWikiResponse) SetHeaders(v map[string]*string) *UpdateMetaTableIntroWikiResponse {
	s.Headers = v
	return s
}

func (s *UpdateMetaTableIntroWikiResponse) SetBody(v *UpdateMetaTableIntroWikiResponseBody) *UpdateMetaTableIntroWikiResponse {
	s.Body = v
	return s
}

type UpdateNodeOwnerRequest struct {
	NodeId     *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	UserId     *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s UpdateNodeOwnerRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateNodeOwnerRequest) GoString() string {
	return s.String()
}

func (s *UpdateNodeOwnerRequest) SetNodeId(v int64) *UpdateNodeOwnerRequest {
	s.NodeId = &v
	return s
}

func (s *UpdateNodeOwnerRequest) SetProjectEnv(v string) *UpdateNodeOwnerRequest {
	s.ProjectEnv = &v
	return s
}

func (s *UpdateNodeOwnerRequest) SetUserId(v string) *UpdateNodeOwnerRequest {
	s.UserId = &v
	return s
}

type UpdateNodeOwnerResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateNodeOwnerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateNodeOwnerResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateNodeOwnerResponseBody) SetRequestId(v string) *UpdateNodeOwnerResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateNodeOwnerResponseBody) SetSuccess(v bool) *UpdateNodeOwnerResponseBody {
	s.Success = &v
	return s
}

type UpdateNodeOwnerResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateNodeOwnerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateNodeOwnerResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateNodeOwnerResponse) GoString() string {
	return s.String()
}

func (s *UpdateNodeOwnerResponse) SetHeaders(v map[string]*string) *UpdateNodeOwnerResponse {
	s.Headers = v
	return s
}

func (s *UpdateNodeOwnerResponse) SetBody(v *UpdateNodeOwnerResponseBody) *UpdateNodeOwnerResponse {
	s.Body = v
	return s
}

type UpdateNodeRunModeRequest struct {
	NodeId        *int64  `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	ProjectEnv    *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	SchedulerType *int32  `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
}

func (s UpdateNodeRunModeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateNodeRunModeRequest) GoString() string {
	return s.String()
}

func (s *UpdateNodeRunModeRequest) SetNodeId(v int64) *UpdateNodeRunModeRequest {
	s.NodeId = &v
	return s
}

func (s *UpdateNodeRunModeRequest) SetProjectEnv(v string) *UpdateNodeRunModeRequest {
	s.ProjectEnv = &v
	return s
}

func (s *UpdateNodeRunModeRequest) SetSchedulerType(v int32) *UpdateNodeRunModeRequest {
	s.SchedulerType = &v
	return s
}

type UpdateNodeRunModeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateNodeRunModeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateNodeRunModeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateNodeRunModeResponseBody) SetRequestId(v string) *UpdateNodeRunModeResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateNodeRunModeResponseBody) SetSuccess(v bool) *UpdateNodeRunModeResponseBody {
	s.Success = &v
	return s
}

type UpdateNodeRunModeResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateNodeRunModeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateNodeRunModeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateNodeRunModeResponse) GoString() string {
	return s.String()
}

func (s *UpdateNodeRunModeResponse) SetHeaders(v map[string]*string) *UpdateNodeRunModeResponse {
	s.Headers = v
	return s
}

func (s *UpdateNodeRunModeResponse) SetBody(v *UpdateNodeRunModeResponseBody) *UpdateNodeRunModeResponse {
	s.Body = v
	return s
}

type UpdateQualityFollowerRequest struct {
	AlarmMode   *int32  `json:"AlarmMode,omitempty" xml:"AlarmMode,omitempty"`
	Follower    *string `json:"Follower,omitempty" xml:"Follower,omitempty"`
	FollowerId  *int64  `json:"FollowerId,omitempty" xml:"FollowerId,omitempty"`
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
}

func (s UpdateQualityFollowerRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateQualityFollowerRequest) GoString() string {
	return s.String()
}

func (s *UpdateQualityFollowerRequest) SetAlarmMode(v int32) *UpdateQualityFollowerRequest {
	s.AlarmMode = &v
	return s
}

func (s *UpdateQualityFollowerRequest) SetFollower(v string) *UpdateQualityFollowerRequest {
	s.Follower = &v
	return s
}

func (s *UpdateQualityFollowerRequest) SetFollowerId(v int64) *UpdateQualityFollowerRequest {
	s.FollowerId = &v
	return s
}

func (s *UpdateQualityFollowerRequest) SetProjectName(v string) *UpdateQualityFollowerRequest {
	s.ProjectName = &v
	return s
}

type UpdateQualityFollowerResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateQualityFollowerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateQualityFollowerResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateQualityFollowerResponseBody) SetData(v bool) *UpdateQualityFollowerResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateQualityFollowerResponseBody) SetErrorCode(v string) *UpdateQualityFollowerResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateQualityFollowerResponseBody) SetErrorMessage(v string) *UpdateQualityFollowerResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateQualityFollowerResponseBody) SetHttpStatusCode(v int32) *UpdateQualityFollowerResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateQualityFollowerResponseBody) SetRequestId(v string) *UpdateQualityFollowerResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateQualityFollowerResponseBody) SetSuccess(v bool) *UpdateQualityFollowerResponseBody {
	s.Success = &v
	return s
}

type UpdateQualityFollowerResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateQualityFollowerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateQualityFollowerResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateQualityFollowerResponse) GoString() string {
	return s.String()
}

func (s *UpdateQualityFollowerResponse) SetHeaders(v map[string]*string) *UpdateQualityFollowerResponse {
	s.Headers = v
	return s
}

func (s *UpdateQualityFollowerResponse) SetBody(v *UpdateQualityFollowerResponseBody) *UpdateQualityFollowerResponse {
	s.Body = v
	return s
}

type UpdateQualityRuleRequest struct {
	BlockType         *int32  `json:"BlockType,omitempty" xml:"BlockType,omitempty"`
	Checker           *int32  `json:"Checker,omitempty" xml:"Checker,omitempty"`
	Comment           *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CriticalThreshold *string `json:"CriticalThreshold,omitempty" xml:"CriticalThreshold,omitempty"`
	EntityId          *int64  `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	ExpectValue       *string `json:"ExpectValue,omitempty" xml:"ExpectValue,omitempty"`
	Id                *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	MethodName        *string `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	OpenSwitch        *bool   `json:"OpenSwitch,omitempty" xml:"OpenSwitch,omitempty"`
	Operator          *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	PredictType       *int32  `json:"PredictType,omitempty" xml:"PredictType,omitempty"`
	ProjectName       *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	Property          *string `json:"Property,omitempty" xml:"Property,omitempty"`
	PropertyType      *string `json:"PropertyType,omitempty" xml:"PropertyType,omitempty"`
	RuleName          *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleType          *int32  `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	TemplateId        *int32  `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Trend             *string `json:"Trend,omitempty" xml:"Trend,omitempty"`
	WarningThreshold  *string `json:"WarningThreshold,omitempty" xml:"WarningThreshold,omitempty"`
	WhereCondition    *string `json:"WhereCondition,omitempty" xml:"WhereCondition,omitempty"`
}

func (s UpdateQualityRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateQualityRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateQualityRuleRequest) SetBlockType(v int32) *UpdateQualityRuleRequest {
	s.BlockType = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetChecker(v int32) *UpdateQualityRuleRequest {
	s.Checker = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetComment(v string) *UpdateQualityRuleRequest {
	s.Comment = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetCriticalThreshold(v string) *UpdateQualityRuleRequest {
	s.CriticalThreshold = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetEntityId(v int64) *UpdateQualityRuleRequest {
	s.EntityId = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetExpectValue(v string) *UpdateQualityRuleRequest {
	s.ExpectValue = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetId(v int64) *UpdateQualityRuleRequest {
	s.Id = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetMethodName(v string) *UpdateQualityRuleRequest {
	s.MethodName = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetOpenSwitch(v bool) *UpdateQualityRuleRequest {
	s.OpenSwitch = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetOperator(v string) *UpdateQualityRuleRequest {
	s.Operator = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetPredictType(v int32) *UpdateQualityRuleRequest {
	s.PredictType = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetProjectName(v string) *UpdateQualityRuleRequest {
	s.ProjectName = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetProperty(v string) *UpdateQualityRuleRequest {
	s.Property = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetPropertyType(v string) *UpdateQualityRuleRequest {
	s.PropertyType = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetRuleName(v string) *UpdateQualityRuleRequest {
	s.RuleName = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetRuleType(v int32) *UpdateQualityRuleRequest {
	s.RuleType = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetTemplateId(v int32) *UpdateQualityRuleRequest {
	s.TemplateId = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetTrend(v string) *UpdateQualityRuleRequest {
	s.Trend = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetWarningThreshold(v string) *UpdateQualityRuleRequest {
	s.WarningThreshold = &v
	return s
}

func (s *UpdateQualityRuleRequest) SetWhereCondition(v string) *UpdateQualityRuleRequest {
	s.WhereCondition = &v
	return s
}

type UpdateQualityRuleResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateQualityRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateQualityRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateQualityRuleResponseBody) SetData(v bool) *UpdateQualityRuleResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateQualityRuleResponseBody) SetErrorCode(v string) *UpdateQualityRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateQualityRuleResponseBody) SetErrorMessage(v string) *UpdateQualityRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateQualityRuleResponseBody) SetHttpStatusCode(v int32) *UpdateQualityRuleResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateQualityRuleResponseBody) SetRequestId(v string) *UpdateQualityRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateQualityRuleResponseBody) SetSuccess(v bool) *UpdateQualityRuleResponseBody {
	s.Success = &v
	return s
}

type UpdateQualityRuleResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateQualityRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateQualityRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateQualityRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateQualityRuleResponse) SetHeaders(v map[string]*string) *UpdateQualityRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateQualityRuleResponse) SetBody(v *UpdateQualityRuleResponseBody) *UpdateQualityRuleResponse {
	s.Body = v
	return s
}

type UpdateRemindRequest struct {
	AlertInterval *int32  `json:"AlertInterval,omitempty" xml:"AlertInterval,omitempty"`
	AlertMethods  *string `json:"AlertMethods,omitempty" xml:"AlertMethods,omitempty"`
	AlertTargets  *string `json:"AlertTargets,omitempty" xml:"AlertTargets,omitempty"`
	AlertUnit     *string `json:"AlertUnit,omitempty" xml:"AlertUnit,omitempty"`
	BaselineIds   *string `json:"BaselineIds,omitempty" xml:"BaselineIds,omitempty"`
	BizProcessIds *string `json:"BizProcessIds,omitempty" xml:"BizProcessIds,omitempty"`
	Detail        *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
	DndEnd        *string `json:"DndEnd,omitempty" xml:"DndEnd,omitempty"`
	MaxAlertTimes *int32  `json:"MaxAlertTimes,omitempty" xml:"MaxAlertTimes,omitempty"`
	NodeIds       *string `json:"NodeIds,omitempty" xml:"NodeIds,omitempty"`
	ProjectId     *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RemindId      *int64  `json:"RemindId,omitempty" xml:"RemindId,omitempty"`
	RemindName    *string `json:"RemindName,omitempty" xml:"RemindName,omitempty"`
	RemindType    *string `json:"RemindType,omitempty" xml:"RemindType,omitempty"`
	RemindUnit    *string `json:"RemindUnit,omitempty" xml:"RemindUnit,omitempty"`
	RobotUrls     *string `json:"RobotUrls,omitempty" xml:"RobotUrls,omitempty"`
	UseFlag       *bool   `json:"UseFlag,omitempty" xml:"UseFlag,omitempty"`
}

func (s UpdateRemindRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRemindRequest) GoString() string {
	return s.String()
}

func (s *UpdateRemindRequest) SetAlertInterval(v int32) *UpdateRemindRequest {
	s.AlertInterval = &v
	return s
}

func (s *UpdateRemindRequest) SetAlertMethods(v string) *UpdateRemindRequest {
	s.AlertMethods = &v
	return s
}

func (s *UpdateRemindRequest) SetAlertTargets(v string) *UpdateRemindRequest {
	s.AlertTargets = &v
	return s
}

func (s *UpdateRemindRequest) SetAlertUnit(v string) *UpdateRemindRequest {
	s.AlertUnit = &v
	return s
}

func (s *UpdateRemindRequest) SetBaselineIds(v string) *UpdateRemindRequest {
	s.BaselineIds = &v
	return s
}

func (s *UpdateRemindRequest) SetBizProcessIds(v string) *UpdateRemindRequest {
	s.BizProcessIds = &v
	return s
}

func (s *UpdateRemindRequest) SetDetail(v string) *UpdateRemindRequest {
	s.Detail = &v
	return s
}

func (s *UpdateRemindRequest) SetDndEnd(v string) *UpdateRemindRequest {
	s.DndEnd = &v
	return s
}

func (s *UpdateRemindRequest) SetMaxAlertTimes(v int32) *UpdateRemindRequest {
	s.MaxAlertTimes = &v
	return s
}

func (s *UpdateRemindRequest) SetNodeIds(v string) *UpdateRemindRequest {
	s.NodeIds = &v
	return s
}

func (s *UpdateRemindRequest) SetProjectId(v int64) *UpdateRemindRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateRemindRequest) SetRemindId(v int64) *UpdateRemindRequest {
	s.RemindId = &v
	return s
}

func (s *UpdateRemindRequest) SetRemindName(v string) *UpdateRemindRequest {
	s.RemindName = &v
	return s
}

func (s *UpdateRemindRequest) SetRemindType(v string) *UpdateRemindRequest {
	s.RemindType = &v
	return s
}

func (s *UpdateRemindRequest) SetRemindUnit(v string) *UpdateRemindRequest {
	s.RemindUnit = &v
	return s
}

func (s *UpdateRemindRequest) SetRobotUrls(v string) *UpdateRemindRequest {
	s.RobotUrls = &v
	return s
}

func (s *UpdateRemindRequest) SetUseFlag(v bool) *UpdateRemindRequest {
	s.UseFlag = &v
	return s
}

type UpdateRemindResponseBody struct {
	Data           *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateRemindResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRemindResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRemindResponseBody) SetData(v bool) *UpdateRemindResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateRemindResponseBody) SetErrorCode(v string) *UpdateRemindResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateRemindResponseBody) SetErrorMessage(v string) *UpdateRemindResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateRemindResponseBody) SetHttpStatusCode(v int32) *UpdateRemindResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateRemindResponseBody) SetRequestId(v string) *UpdateRemindResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateRemindResponseBody) SetSuccess(v bool) *UpdateRemindResponseBody {
	s.Success = &v
	return s
}

type UpdateRemindResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateRemindResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateRemindResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRemindResponse) GoString() string {
	return s.String()
}

func (s *UpdateRemindResponse) SetHeaders(v map[string]*string) *UpdateRemindResponse {
	s.Headers = v
	return s
}

func (s *UpdateRemindResponse) SetBody(v *UpdateRemindResponseBody) *UpdateRemindResponse {
	s.Body = v
	return s
}

type UpdateTableRequest struct {
	AppGuid           *string                      `json:"AppGuid,omitempty" xml:"AppGuid,omitempty"`
	CategoryId        *int64                       `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	Columns           []*UpdateTableRequestColumns `json:"Columns,omitempty" xml:"Columns,omitempty" type:"Repeated"`
	Comment           *string                      `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateIfNotExists *bool                        `json:"CreateIfNotExists,omitempty" xml:"CreateIfNotExists,omitempty"`
	Endpoint          *string                      `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	EnvType           *int32                       `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	ExternalTableType *string                      `json:"ExternalTableType,omitempty" xml:"ExternalTableType,omitempty"`
	HasPart           *int32                       `json:"HasPart,omitempty" xml:"HasPart,omitempty"`
	IsView            *int32                       `json:"IsView,omitempty" xml:"IsView,omitempty"`
	LifeCycle         *int32                       `json:"LifeCycle,omitempty" xml:"LifeCycle,omitempty"`
	Location          *string                      `json:"Location,omitempty" xml:"Location,omitempty"`
	LogicalLevelId    *int64                       `json:"LogicalLevelId,omitempty" xml:"LogicalLevelId,omitempty"`
	OwnerId           *string                      `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PhysicsLevelId    *int64                       `json:"PhysicsLevelId,omitempty" xml:"PhysicsLevelId,omitempty"`
	ProjectId         *int64                       `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	TableName         *string                      `json:"TableName,omitempty" xml:"TableName,omitempty"`
	Themes            []*UpdateTableRequestThemes  `json:"Themes,omitempty" xml:"Themes,omitempty" type:"Repeated"`
	Visibility        *int32                       `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s UpdateTableRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableRequest) GoString() string {
	return s.String()
}

func (s *UpdateTableRequest) SetAppGuid(v string) *UpdateTableRequest {
	s.AppGuid = &v
	return s
}

func (s *UpdateTableRequest) SetCategoryId(v int64) *UpdateTableRequest {
	s.CategoryId = &v
	return s
}

func (s *UpdateTableRequest) SetColumns(v []*UpdateTableRequestColumns) *UpdateTableRequest {
	s.Columns = v
	return s
}

func (s *UpdateTableRequest) SetComment(v string) *UpdateTableRequest {
	s.Comment = &v
	return s
}

func (s *UpdateTableRequest) SetCreateIfNotExists(v bool) *UpdateTableRequest {
	s.CreateIfNotExists = &v
	return s
}

func (s *UpdateTableRequest) SetEndpoint(v string) *UpdateTableRequest {
	s.Endpoint = &v
	return s
}

func (s *UpdateTableRequest) SetEnvType(v int32) *UpdateTableRequest {
	s.EnvType = &v
	return s
}

func (s *UpdateTableRequest) SetExternalTableType(v string) *UpdateTableRequest {
	s.ExternalTableType = &v
	return s
}

func (s *UpdateTableRequest) SetHasPart(v int32) *UpdateTableRequest {
	s.HasPart = &v
	return s
}

func (s *UpdateTableRequest) SetIsView(v int32) *UpdateTableRequest {
	s.IsView = &v
	return s
}

func (s *UpdateTableRequest) SetLifeCycle(v int32) *UpdateTableRequest {
	s.LifeCycle = &v
	return s
}

func (s *UpdateTableRequest) SetLocation(v string) *UpdateTableRequest {
	s.Location = &v
	return s
}

func (s *UpdateTableRequest) SetLogicalLevelId(v int64) *UpdateTableRequest {
	s.LogicalLevelId = &v
	return s
}

func (s *UpdateTableRequest) SetOwnerId(v string) *UpdateTableRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateTableRequest) SetPhysicsLevelId(v int64) *UpdateTableRequest {
	s.PhysicsLevelId = &v
	return s
}

func (s *UpdateTableRequest) SetProjectId(v int64) *UpdateTableRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateTableRequest) SetTableName(v string) *UpdateTableRequest {
	s.TableName = &v
	return s
}

func (s *UpdateTableRequest) SetThemes(v []*UpdateTableRequestThemes) *UpdateTableRequest {
	s.Themes = v
	return s
}

func (s *UpdateTableRequest) SetVisibility(v int32) *UpdateTableRequest {
	s.Visibility = &v
	return s
}

type UpdateTableRequestColumns struct {
	ColumnName     *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ColumnNameCn   *string `json:"ColumnNameCn,omitempty" xml:"ColumnNameCn,omitempty"`
	ColumnType     *string `json:"ColumnType,omitempty" xml:"ColumnType,omitempty"`
	Comment        *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	IsPartitionCol *bool   `json:"IsPartitionCol,omitempty" xml:"IsPartitionCol,omitempty"`
	Length         *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	SeqNumber      *int32  `json:"SeqNumber,omitempty" xml:"SeqNumber,omitempty"`
}

func (s UpdateTableRequestColumns) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableRequestColumns) GoString() string {
	return s.String()
}

func (s *UpdateTableRequestColumns) SetColumnName(v string) *UpdateTableRequestColumns {
	s.ColumnName = &v
	return s
}

func (s *UpdateTableRequestColumns) SetColumnNameCn(v string) *UpdateTableRequestColumns {
	s.ColumnNameCn = &v
	return s
}

func (s *UpdateTableRequestColumns) SetColumnType(v string) *UpdateTableRequestColumns {
	s.ColumnType = &v
	return s
}

func (s *UpdateTableRequestColumns) SetComment(v string) *UpdateTableRequestColumns {
	s.Comment = &v
	return s
}

func (s *UpdateTableRequestColumns) SetIsPartitionCol(v bool) *UpdateTableRequestColumns {
	s.IsPartitionCol = &v
	return s
}

func (s *UpdateTableRequestColumns) SetLength(v int32) *UpdateTableRequestColumns {
	s.Length = &v
	return s
}

func (s *UpdateTableRequestColumns) SetSeqNumber(v int32) *UpdateTableRequestColumns {
	s.SeqNumber = &v
	return s
}

type UpdateTableRequestThemes struct {
	ThemeId    *int64 `json:"ThemeId,omitempty" xml:"ThemeId,omitempty"`
	ThemeLevel *int32 `json:"ThemeLevel,omitempty" xml:"ThemeLevel,omitempty"`
}

func (s UpdateTableRequestThemes) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableRequestThemes) GoString() string {
	return s.String()
}

func (s *UpdateTableRequestThemes) SetThemeId(v int64) *UpdateTableRequestThemes {
	s.ThemeId = &v
	return s
}

func (s *UpdateTableRequestThemes) SetThemeLevel(v int32) *UpdateTableRequestThemes {
	s.ThemeLevel = &v
	return s
}

type UpdateTableResponseBody struct {
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskInfo  *UpdateTableResponseBodyTaskInfo `json:"TaskInfo,omitempty" xml:"TaskInfo,omitempty" type:"Struct"`
}

func (s UpdateTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTableResponseBody) SetRequestId(v string) *UpdateTableResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTableResponseBody) SetTaskInfo(v *UpdateTableResponseBodyTaskInfo) *UpdateTableResponseBody {
	s.TaskInfo = v
	return s
}

type UpdateTableResponseBodyTaskInfo struct {
	Content    *string `json:"Content,omitempty" xml:"Content,omitempty"`
	NextTaskId *string `json:"NextTaskId,omitempty" xml:"NextTaskId,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s UpdateTableResponseBodyTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableResponseBodyTaskInfo) GoString() string {
	return s.String()
}

func (s *UpdateTableResponseBodyTaskInfo) SetContent(v string) *UpdateTableResponseBodyTaskInfo {
	s.Content = &v
	return s
}

func (s *UpdateTableResponseBodyTaskInfo) SetNextTaskId(v string) *UpdateTableResponseBodyTaskInfo {
	s.NextTaskId = &v
	return s
}

func (s *UpdateTableResponseBodyTaskInfo) SetStatus(v string) *UpdateTableResponseBodyTaskInfo {
	s.Status = &v
	return s
}

func (s *UpdateTableResponseBodyTaskInfo) SetTaskId(v string) *UpdateTableResponseBodyTaskInfo {
	s.TaskId = &v
	return s
}

type UpdateTableResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateTableResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableResponse) GoString() string {
	return s.String()
}

func (s *UpdateTableResponse) SetHeaders(v map[string]*string) *UpdateTableResponse {
	s.Headers = v
	return s
}

func (s *UpdateTableResponse) SetBody(v *UpdateTableResponseBody) *UpdateTableResponse {
	s.Body = v
	return s
}

type UpdateTableAddColumnRequest struct {
	Column    []*UpdateTableAddColumnRequestColumn `json:"Column,omitempty" xml:"Column,omitempty" type:"Repeated"`
	TableGuid *string                              `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s UpdateTableAddColumnRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableAddColumnRequest) GoString() string {
	return s.String()
}

func (s *UpdateTableAddColumnRequest) SetColumn(v []*UpdateTableAddColumnRequestColumn) *UpdateTableAddColumnRequest {
	s.Column = v
	return s
}

func (s *UpdateTableAddColumnRequest) SetTableGuid(v string) *UpdateTableAddColumnRequest {
	s.TableGuid = &v
	return s
}

type UpdateTableAddColumnRequestColumn struct {
	ColumnName   *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	ColumnNameCn *string `json:"ColumnNameCn,omitempty" xml:"ColumnNameCn,omitempty"`
	ColumnType   *string `json:"ColumnType,omitempty" xml:"ColumnType,omitempty"`
	Comment      *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
}

func (s UpdateTableAddColumnRequestColumn) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableAddColumnRequestColumn) GoString() string {
	return s.String()
}

func (s *UpdateTableAddColumnRequestColumn) SetColumnName(v string) *UpdateTableAddColumnRequestColumn {
	s.ColumnName = &v
	return s
}

func (s *UpdateTableAddColumnRequestColumn) SetColumnNameCn(v string) *UpdateTableAddColumnRequestColumn {
	s.ColumnNameCn = &v
	return s
}

func (s *UpdateTableAddColumnRequestColumn) SetColumnType(v string) *UpdateTableAddColumnRequestColumn {
	s.ColumnType = &v
	return s
}

func (s *UpdateTableAddColumnRequestColumn) SetComment(v string) *UpdateTableAddColumnRequestColumn {
	s.Comment = &v
	return s
}

type UpdateTableAddColumnResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskInfo  *UpdateTableAddColumnResponseBodyTaskInfo `json:"TaskInfo,omitempty" xml:"TaskInfo,omitempty" type:"Struct"`
}

func (s UpdateTableAddColumnResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableAddColumnResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTableAddColumnResponseBody) SetRequestId(v string) *UpdateTableAddColumnResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTableAddColumnResponseBody) SetTaskInfo(v *UpdateTableAddColumnResponseBodyTaskInfo) *UpdateTableAddColumnResponseBody {
	s.TaskInfo = v
	return s
}

type UpdateTableAddColumnResponseBodyTaskInfo struct {
	Content    *string `json:"Content,omitempty" xml:"Content,omitempty"`
	NextTaskId *string `json:"NextTaskId,omitempty" xml:"NextTaskId,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s UpdateTableAddColumnResponseBodyTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableAddColumnResponseBodyTaskInfo) GoString() string {
	return s.String()
}

func (s *UpdateTableAddColumnResponseBodyTaskInfo) SetContent(v string) *UpdateTableAddColumnResponseBodyTaskInfo {
	s.Content = &v
	return s
}

func (s *UpdateTableAddColumnResponseBodyTaskInfo) SetNextTaskId(v string) *UpdateTableAddColumnResponseBodyTaskInfo {
	s.NextTaskId = &v
	return s
}

func (s *UpdateTableAddColumnResponseBodyTaskInfo) SetStatus(v string) *UpdateTableAddColumnResponseBodyTaskInfo {
	s.Status = &v
	return s
}

func (s *UpdateTableAddColumnResponseBodyTaskInfo) SetTaskId(v string) *UpdateTableAddColumnResponseBodyTaskInfo {
	s.TaskId = &v
	return s
}

type UpdateTableAddColumnResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateTableAddColumnResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateTableAddColumnResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableAddColumnResponse) GoString() string {
	return s.String()
}

func (s *UpdateTableAddColumnResponse) SetHeaders(v map[string]*string) *UpdateTableAddColumnResponse {
	s.Headers = v
	return s
}

func (s *UpdateTableAddColumnResponse) SetBody(v *UpdateTableAddColumnResponseBody) *UpdateTableAddColumnResponse {
	s.Body = v
	return s
}

type UpdateTableLevelRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	LevelId     *int64  `json:"LevelId,omitempty" xml:"LevelId,omitempty"`
	LevelType   *int32  `json:"LevelType,omitempty" xml:"LevelType,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProjectId   *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s UpdateTableLevelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableLevelRequest) GoString() string {
	return s.String()
}

func (s *UpdateTableLevelRequest) SetDescription(v string) *UpdateTableLevelRequest {
	s.Description = &v
	return s
}

func (s *UpdateTableLevelRequest) SetLevelId(v int64) *UpdateTableLevelRequest {
	s.LevelId = &v
	return s
}

func (s *UpdateTableLevelRequest) SetLevelType(v int32) *UpdateTableLevelRequest {
	s.LevelType = &v
	return s
}

func (s *UpdateTableLevelRequest) SetName(v string) *UpdateTableLevelRequest {
	s.Name = &v
	return s
}

func (s *UpdateTableLevelRequest) SetProjectId(v int64) *UpdateTableLevelRequest {
	s.ProjectId = &v
	return s
}

type UpdateTableLevelResponseBody struct {
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	UpdateResult   *bool   `json:"UpdateResult,omitempty" xml:"UpdateResult,omitempty"`
}

func (s UpdateTableLevelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableLevelResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTableLevelResponseBody) SetErrorCode(v string) *UpdateTableLevelResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateTableLevelResponseBody) SetErrorMessage(v string) *UpdateTableLevelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateTableLevelResponseBody) SetHttpStatusCode(v int32) *UpdateTableLevelResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateTableLevelResponseBody) SetRequestId(v string) *UpdateTableLevelResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTableLevelResponseBody) SetSuccess(v bool) *UpdateTableLevelResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateTableLevelResponseBody) SetUpdateResult(v bool) *UpdateTableLevelResponseBody {
	s.UpdateResult = &v
	return s
}

type UpdateTableLevelResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateTableLevelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateTableLevelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableLevelResponse) GoString() string {
	return s.String()
}

func (s *UpdateTableLevelResponse) SetHeaders(v map[string]*string) *UpdateTableLevelResponse {
	s.Headers = v
	return s
}

func (s *UpdateTableLevelResponse) SetBody(v *UpdateTableLevelResponseBody) *UpdateTableLevelResponse {
	s.Body = v
	return s
}

type UpdateTableModelInfoRequest struct {
	FirstLevelThemeId  *int64  `json:"FirstLevelThemeId,omitempty" xml:"FirstLevelThemeId,omitempty"`
	LevelId            *int64  `json:"LevelId,omitempty" xml:"LevelId,omitempty"`
	LevelType          *int32  `json:"LevelType,omitempty" xml:"LevelType,omitempty"`
	SecondLevelThemeId *int64  `json:"SecondLevelThemeId,omitempty" xml:"SecondLevelThemeId,omitempty"`
	TableGuid          *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s UpdateTableModelInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableModelInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateTableModelInfoRequest) SetFirstLevelThemeId(v int64) *UpdateTableModelInfoRequest {
	s.FirstLevelThemeId = &v
	return s
}

func (s *UpdateTableModelInfoRequest) SetLevelId(v int64) *UpdateTableModelInfoRequest {
	s.LevelId = &v
	return s
}

func (s *UpdateTableModelInfoRequest) SetLevelType(v int32) *UpdateTableModelInfoRequest {
	s.LevelType = &v
	return s
}

func (s *UpdateTableModelInfoRequest) SetSecondLevelThemeId(v int64) *UpdateTableModelInfoRequest {
	s.SecondLevelThemeId = &v
	return s
}

func (s *UpdateTableModelInfoRequest) SetTableGuid(v string) *UpdateTableModelInfoRequest {
	s.TableGuid = &v
	return s
}

type UpdateTableModelInfoResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UpdateResult *bool   `json:"UpdateResult,omitempty" xml:"UpdateResult,omitempty"`
}

func (s UpdateTableModelInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableModelInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTableModelInfoResponseBody) SetRequestId(v string) *UpdateTableModelInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTableModelInfoResponseBody) SetUpdateResult(v bool) *UpdateTableModelInfoResponseBody {
	s.UpdateResult = &v
	return s
}

type UpdateTableModelInfoResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateTableModelInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateTableModelInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableModelInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateTableModelInfoResponse) SetHeaders(v map[string]*string) *UpdateTableModelInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateTableModelInfoResponse) SetBody(v *UpdateTableModelInfoResponseBody) *UpdateTableModelInfoResponse {
	s.Body = v
	return s
}

type UpdateTableThemeRequest struct {
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProjectId *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ThemeId   *int64  `json:"ThemeId,omitempty" xml:"ThemeId,omitempty"`
}

func (s UpdateTableThemeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableThemeRequest) GoString() string {
	return s.String()
}

func (s *UpdateTableThemeRequest) SetName(v string) *UpdateTableThemeRequest {
	s.Name = &v
	return s
}

func (s *UpdateTableThemeRequest) SetProjectId(v int64) *UpdateTableThemeRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateTableThemeRequest) SetThemeId(v int64) *UpdateTableThemeRequest {
	s.ThemeId = &v
	return s
}

type UpdateTableThemeResponseBody struct {
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	UpdateResult   *bool   `json:"UpdateResult,omitempty" xml:"UpdateResult,omitempty"`
}

func (s UpdateTableThemeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableThemeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTableThemeResponseBody) SetErrorCode(v string) *UpdateTableThemeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateTableThemeResponseBody) SetErrorMessage(v string) *UpdateTableThemeResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateTableThemeResponseBody) SetHttpStatusCode(v int32) *UpdateTableThemeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateTableThemeResponseBody) SetRequestId(v string) *UpdateTableThemeResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTableThemeResponseBody) SetSuccess(v bool) *UpdateTableThemeResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateTableThemeResponseBody) SetUpdateResult(v bool) *UpdateTableThemeResponseBody {
	s.UpdateResult = &v
	return s
}

type UpdateTableThemeResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateTableThemeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateTableThemeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableThemeResponse) GoString() string {
	return s.String()
}

func (s *UpdateTableThemeResponse) SetHeaders(v map[string]*string) *UpdateTableThemeResponse {
	s.Headers = v
	return s
}

func (s *UpdateTableThemeResponse) SetBody(v *UpdateTableThemeResponseBody) *UpdateTableThemeResponse {
	s.Body = v
	return s
}

type UpdateUdfFileRequest struct {
	ClassName            *string `json:"ClassName,omitempty" xml:"ClassName,omitempty"`
	CmdDescription       *string `json:"CmdDescription,omitempty" xml:"CmdDescription,omitempty"`
	Example              *string `json:"Example,omitempty" xml:"Example,omitempty"`
	FileFolderPath       *string `json:"FileFolderPath,omitempty" xml:"FileFolderPath,omitempty"`
	FileId               *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	FunctionType         *string `json:"FunctionType,omitempty" xml:"FunctionType,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ProjectId            *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectIdentifier    *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	Resources            *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	ReturnValue          *string `json:"ReturnValue,omitempty" xml:"ReturnValue,omitempty"`
	UdfDescription       *string `json:"UdfDescription,omitempty" xml:"UdfDescription,omitempty"`
}

func (s UpdateUdfFileRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUdfFileRequest) GoString() string {
	return s.String()
}

func (s *UpdateUdfFileRequest) SetClassName(v string) *UpdateUdfFileRequest {
	s.ClassName = &v
	return s
}

func (s *UpdateUdfFileRequest) SetCmdDescription(v string) *UpdateUdfFileRequest {
	s.CmdDescription = &v
	return s
}

func (s *UpdateUdfFileRequest) SetExample(v string) *UpdateUdfFileRequest {
	s.Example = &v
	return s
}

func (s *UpdateUdfFileRequest) SetFileFolderPath(v string) *UpdateUdfFileRequest {
	s.FileFolderPath = &v
	return s
}

func (s *UpdateUdfFileRequest) SetFileId(v string) *UpdateUdfFileRequest {
	s.FileId = &v
	return s
}

func (s *UpdateUdfFileRequest) SetFunctionType(v string) *UpdateUdfFileRequest {
	s.FunctionType = &v
	return s
}

func (s *UpdateUdfFileRequest) SetParameterDescription(v string) *UpdateUdfFileRequest {
	s.ParameterDescription = &v
	return s
}

func (s *UpdateUdfFileRequest) SetProjectId(v int64) *UpdateUdfFileRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateUdfFileRequest) SetProjectIdentifier(v string) *UpdateUdfFileRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *UpdateUdfFileRequest) SetResources(v string) *UpdateUdfFileRequest {
	s.Resources = &v
	return s
}

func (s *UpdateUdfFileRequest) SetReturnValue(v string) *UpdateUdfFileRequest {
	s.ReturnValue = &v
	return s
}

func (s *UpdateUdfFileRequest) SetUdfDescription(v string) *UpdateUdfFileRequest {
	s.UdfDescription = &v
	return s
}

type UpdateUdfFileResponseBody struct {
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateUdfFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateUdfFileResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateUdfFileResponseBody) SetErrorCode(v string) *UpdateUdfFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateUdfFileResponseBody) SetErrorMessage(v string) *UpdateUdfFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateUdfFileResponseBody) SetHttpStatusCode(v int32) *UpdateUdfFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateUdfFileResponseBody) SetRequestId(v string) *UpdateUdfFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateUdfFileResponseBody) SetSuccess(v bool) *UpdateUdfFileResponseBody {
	s.Success = &v
	return s
}

type UpdateUdfFileResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateUdfFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateUdfFileResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUdfFileResponse) GoString() string {
	return s.String()
}

func (s *UpdateUdfFileResponse) SetHeaders(v map[string]*string) *UpdateUdfFileResponse {
	s.Headers = v
	return s
}

func (s *UpdateUdfFileResponse) SetBody(v *UpdateUdfFileResponseBody) *UpdateUdfFileResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-1":        tea.String("dataworks.ap-northeast-1.aliyuncs.com"),
		"ap-south-1":            tea.String("dataworks.ap-south-1.aliyuncs.com"),
		"ap-southeast-1":        tea.String("dataworks.ap-southeast-1.aliyuncs.com"),
		"ap-southeast-2":        tea.String("dataworks.ap-southeast-2.aliyuncs.com"),
		"ap-southeast-3":        tea.String("dataworks.ap-southeast-3.aliyuncs.com"),
		"ap-southeast-5":        tea.String("dataworks.ap-southeast-5.aliyuncs.com"),
		"cn-beijing":            tea.String("dataworks.cn-beijing.aliyuncs.com"),
		"cn-chengdu":            tea.String("dataworks.cn-chengdu.aliyuncs.com"),
		"cn-hangzhou":           tea.String("dataworks.cn-hangzhou.aliyuncs.com"),
		"cn-hongkong":           tea.String("dataworks.cn-hongkong.aliyuncs.com"),
		"cn-huhehaote":          tea.String("dataworks.aliyuncs.com"),
		"cn-qingdao":            tea.String("dataworks.aliyuncs.com"),
		"cn-shanghai":           tea.String("dataworks.cn-shanghai.aliyuncs.com"),
		"cn-shenzhen":           tea.String("dataworks.cn-shenzhen.aliyuncs.com"),
		"cn-zhangjiakou":        tea.String("dataworks.aliyuncs.com"),
		"eu-central-1":          tea.String("dataworks.eu-central-1.aliyuncs.com"),
		"eu-west-1":             tea.String("dataworks.eu-west-1.aliyuncs.com"),
		"me-east-1":             tea.String("dataworks.me-east-1.aliyuncs.com"),
		"us-east-1":             tea.String("dataworks.us-east-1.aliyuncs.com"),
		"us-west-1":             tea.String("dataworks.us-west-1.aliyuncs.com"),
		"cn-hangzhou-finance":   tea.String("dataworks.aliyuncs.com"),
		"cn-shenzhen-finance-1": tea.String("dataworks.aliyuncs.com"),
		"cn-shanghai-finance-1": tea.String("dataworks.aliyuncs.com"),
		"cn-north-2-gov-1":      tea.String("dataworks.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("dataworks-public"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AbolishDataServiceApiWithOptions(request *AbolishDataServiceApiRequest, runtime *util.RuntimeOptions) (_result *AbolishDataServiceApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		body["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AbolishDataServiceApi"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AbolishDataServiceApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AbolishDataServiceApi(request *AbolishDataServiceApiRequest) (_result *AbolishDataServiceApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AbolishDataServiceApiResponse{}
	_body, _err := client.AbolishDataServiceApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddProjectMemberToRoleWithOptions(request *AddProjectMemberToRoleRequest, runtime *util.RuntimeOptions) (_result *AddProjectMemberToRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleCode)) {
		query["RoleCode"] = request.RoleCode
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddProjectMemberToRole"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddProjectMemberToRoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddProjectMemberToRole(request *AddProjectMemberToRoleRequest) (_result *AddProjectMemberToRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddProjectMemberToRoleResponse{}
	_body, _err := client.AddProjectMemberToRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddToMetaCategoryWithOptions(request *AddToMetaCategoryRequest, runtime *util.RuntimeOptions) (_result *AddToMetaCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		query["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		query["TableGuid"] = request.TableGuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddToMetaCategory"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddToMetaCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddToMetaCategory(request *AddToMetaCategoryRequest) (_result *AddToMetaCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddToMetaCategoryResponse{}
	_body, _err := client.AddToMetaCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApprovePermissionApplyOrderWithOptions(request *ApprovePermissionApplyOrderRequest, runtime *util.RuntimeOptions) (_result *ApprovePermissionApplyOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApproveAction)) {
		query["ApproveAction"] = request.ApproveAction
	}

	if !tea.BoolValue(util.IsUnset(request.ApproveComment)) {
		query["ApproveComment"] = request.ApproveComment
	}

	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApprovePermissionApplyOrder"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApprovePermissionApplyOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApprovePermissionApplyOrder(request *ApprovePermissionApplyOrderRequest) (_result *ApprovePermissionApplyOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApprovePermissionApplyOrderResponse{}
	_body, _err := client.ApprovePermissionApplyOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckFileDeploymentWithOptions(request *CheckFileDeploymentRequest, runtime *util.RuntimeOptions) (_result *CheckFileDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckDetailUrl)) {
		body["CheckDetailUrl"] = request.CheckDetailUrl
	}

	if !tea.BoolValue(util.IsUnset(request.CheckerInstanceId)) {
		body["CheckerInstanceId"] = request.CheckerInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckFileDeployment"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckFileDeploymentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckFileDeployment(request *CheckFileDeploymentRequest) (_result *CheckFileDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckFileDeploymentResponse{}
	_body, _err := client.CheckFileDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckMetaPartitionWithOptions(request *CheckMetaPartitionRequest, runtime *util.RuntimeOptions) (_result *CheckMetaPartitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.Partition)) {
		query["Partition"] = request.Partition
	}

	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		query["TableGuid"] = request.TableGuid
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckMetaPartition"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckMetaPartitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckMetaPartition(request *CheckMetaPartitionRequest) (_result *CheckMetaPartitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckMetaPartitionResponse{}
	_body, _err := client.CheckMetaPartitionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckMetaTableWithOptions(request *CheckMetaTableRequest, runtime *util.RuntimeOptions) (_result *CheckMetaTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		query["TableGuid"] = request.TableGuid
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckMetaTable"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckMetaTableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckMetaTable(request *CheckMetaTableRequest) (_result *CheckMetaTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckMetaTableResponse{}
	_body, _err := client.CheckMetaTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBusinessWithOptions(request *CreateBusinessRequest, runtime *util.RuntimeOptions) (_result *CreateBusinessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessName)) {
		body["BusinessName"] = request.BusinessName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.UseType)) {
		body["UseType"] = request.UseType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBusiness"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBusinessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBusiness(request *CreateBusinessRequest) (_result *CreateBusinessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBusinessResponse{}
	_body, _err := client.CreateBusinessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateConnectionWithOptions(request *CreateConnectionRequest, runtime *util.RuntimeOptions) (_result *CreateConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConnectionType)) {
		query["ConnectionType"] = request.ConnectionType
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SubType)) {
		query["SubType"] = request.SubType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateConnection"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateConnectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateConnection(request *CreateConnectionRequest) (_result *CreateConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateConnectionResponse{}
	_body, _err := client.CreateConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDISyncTaskWithOptions(request *CreateDISyncTaskRequest, runtime *util.RuntimeOptions) (_result *CreateDISyncTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskContent)) {
		query["TaskContent"] = request.TaskContent
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskParam)) {
		query["TaskParam"] = request.TaskParam
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDISyncTask"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDISyncTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDISyncTask(request *CreateDISyncTaskRequest) (_result *CreateDISyncTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDISyncTaskResponse{}
	_body, _err := client.CreateDISyncTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDagComplementWithOptions(request *CreateDagComplementRequest, runtime *util.RuntimeOptions) (_result *CreateDagComplementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizBeginTime)) {
		body["BizBeginTime"] = request.BizBeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.BizEndTime)) {
		body["BizEndTime"] = request.BizEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndBizDate)) {
		body["EndBizDate"] = request.EndBizDate
	}

	if !tea.BoolValue(util.IsUnset(request.ExcludeNodeIds)) {
		body["ExcludeNodeIds"] = request.ExcludeNodeIds
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeNodeIds)) {
		body["IncludeNodeIds"] = request.IncludeNodeIds
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NodeParams)) {
		body["NodeParams"] = request.NodeParams
	}

	if !tea.BoolValue(util.IsUnset(request.Parallelism)) {
		body["Parallelism"] = request.Parallelism
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.RootNodeId)) {
		body["RootNodeId"] = request.RootNodeId
	}

	if !tea.BoolValue(util.IsUnset(request.StartBizDate)) {
		body["StartBizDate"] = request.StartBizDate
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDagComplement"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDagComplementResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDagComplement(request *CreateDagComplementRequest) (_result *CreateDagComplementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDagComplementResponse{}
	_body, _err := client.CreateDagComplementWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDagTestWithOptions(request *CreateDagTestRequest, runtime *util.RuntimeOptions) (_result *CreateDagTestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizdate)) {
		body["Bizdate"] = request.Bizdate
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeParams)) {
		body["NodeParams"] = request.NodeParams
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDagTest"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDagTestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDagTest(request *CreateDagTestRequest) (_result *CreateDagTestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDagTestResponse{}
	_body, _err := client.CreateDagTestWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDataServiceApiWithOptions(request *CreateDataServiceApiRequest, runtime *util.RuntimeOptions) (_result *CreateDataServiceApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiDescription)) {
		body["ApiDescription"] = request.ApiDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ApiMode)) {
		body["ApiMode"] = request.ApiMode
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		body["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.ApiPath)) {
		body["ApiPath"] = request.ApiPath
	}

	if !tea.BoolValue(util.IsUnset(request.FolderId)) {
		body["FolderId"] = request.FolderId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Protocols)) {
		body["Protocols"] = request.Protocols
	}

	if !tea.BoolValue(util.IsUnset(request.RegistrationDetails)) {
		body["RegistrationDetails"] = request.RegistrationDetails
	}

	if !tea.BoolValue(util.IsUnset(request.RequestMethod)) {
		body["RequestMethod"] = request.RequestMethod
	}

	if !tea.BoolValue(util.IsUnset(request.ResponseContentType)) {
		body["ResponseContentType"] = request.ResponseContentType
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptDetails)) {
		body["ScriptDetails"] = request.ScriptDetails
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		body["Timeout"] = request.Timeout
	}

	if !tea.BoolValue(util.IsUnset(request.VisibleRange)) {
		body["VisibleRange"] = request.VisibleRange
	}

	if !tea.BoolValue(util.IsUnset(request.WizardDetails)) {
		body["WizardDetails"] = request.WizardDetails
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataServiceApi"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDataServiceApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDataServiceApi(request *CreateDataServiceApiRequest) (_result *CreateDataServiceApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataServiceApiResponse{}
	_body, _err := client.CreateDataServiceApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDataServiceApiAuthorityWithOptions(request *CreateDataServiceApiAuthorityRequest, runtime *util.RuntimeOptions) (_result *CreateDataServiceApiAuthorityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		body["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorizedProjectId)) {
		body["AuthorizedProjectId"] = request.AuthorizedProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataServiceApiAuthority"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDataServiceApiAuthorityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDataServiceApiAuthority(request *CreateDataServiceApiAuthorityRequest) (_result *CreateDataServiceApiAuthorityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataServiceApiAuthorityResponse{}
	_body, _err := client.CreateDataServiceApiAuthorityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDataServiceFolderWithOptions(request *CreateDataServiceFolderRequest, runtime *util.RuntimeOptions) (_result *CreateDataServiceFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FolderName)) {
		body["FolderName"] = request.FolderName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		body["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataServiceFolder"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDataServiceFolderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDataServiceFolder(request *CreateDataServiceFolderRequest) (_result *CreateDataServiceFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataServiceFolderResponse{}
	_body, _err := client.CreateDataServiceFolderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDataServiceGroupWithOptions(request *CreateDataServiceGroupRequest, runtime *util.RuntimeOptions) (_result *CreateDataServiceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiGatewayGroupId)) {
		body["ApiGatewayGroupId"] = request.ApiGatewayGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		body["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataServiceGroup"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDataServiceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDataServiceGroup(request *CreateDataServiceGroupRequest) (_result *CreateDataServiceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataServiceGroupResponse{}
	_body, _err := client.CreateDataServiceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDataSourceWithOptions(request *CreateDataSourceRequest, runtime *util.RuntimeOptions) (_result *CreateDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SubType)) {
		query["SubType"] = request.SubType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataSource"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDataSource(request *CreateDataSourceRequest) (_result *CreateDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataSourceResponse{}
	_body, _err := client.CreateDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateExportMigrationWithOptions(request *CreateExportMigrationRequest, runtime *util.RuntimeOptions) (_result *CreateExportMigrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ExportMode)) {
		body["ExportMode"] = request.ExportMode
	}

	if !tea.BoolValue(util.IsUnset(request.ExportObjectStatus)) {
		body["ExportObjectStatus"] = request.ExportObjectStatus
	}

	if !tea.BoolValue(util.IsUnset(request.IncrementalSince)) {
		body["IncrementalSince"] = request.IncrementalSince
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateExportMigration"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateExportMigrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateExportMigration(request *CreateExportMigrationRequest) (_result *CreateExportMigrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateExportMigrationResponse{}
	_body, _err := client.CreateExportMigrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFileWithOptions(request *CreateFileRequest, runtime *util.RuntimeOptions) (_result *CreateFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdvancedSettings)) {
		body["AdvancedSettings"] = request.AdvancedSettings
	}

	if !tea.BoolValue(util.IsUnset(request.AutoParsing)) {
		body["AutoParsing"] = request.AutoParsing
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRerunIntervalMillis)) {
		body["AutoRerunIntervalMillis"] = request.AutoRerunIntervalMillis
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRerunTimes)) {
		body["AutoRerunTimes"] = request.AutoRerunTimes
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectionName)) {
		body["ConnectionName"] = request.ConnectionName
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.CronExpress)) {
		body["CronExpress"] = request.CronExpress
	}

	if !tea.BoolValue(util.IsUnset(request.CycleType)) {
		body["CycleType"] = request.CycleType
	}

	if !tea.BoolValue(util.IsUnset(request.DependentNodeIdList)) {
		body["DependentNodeIdList"] = request.DependentNodeIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DependentType)) {
		body["DependentType"] = request.DependentType
	}

	if !tea.BoolValue(util.IsUnset(request.EndEffectDate)) {
		body["EndEffectDate"] = request.EndEffectDate
	}

	if !tea.BoolValue(util.IsUnset(request.FileDescription)) {
		body["FileDescription"] = request.FileDescription
	}

	if !tea.BoolValue(util.IsUnset(request.FileFolderPath)) {
		body["FileFolderPath"] = request.FileFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		body["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FileType)) {
		body["FileType"] = request.FileType
	}

	if !tea.BoolValue(util.IsUnset(request.InputList)) {
		body["InputList"] = request.InputList
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.ParaValue)) {
		body["ParaValue"] = request.ParaValue
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.RerunMode)) {
		body["RerunMode"] = request.RerunMode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		body["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupIdentifier)) {
		body["ResourceGroupIdentifier"] = request.ResourceGroupIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.SchedulerType)) {
		body["SchedulerType"] = request.SchedulerType
	}

	if !tea.BoolValue(util.IsUnset(request.StartEffectDate)) {
		body["StartEffectDate"] = request.StartEffectDate
	}

	if !tea.BoolValue(util.IsUnset(request.StartImmediately)) {
		body["StartImmediately"] = request.StartImmediately
	}

	if !tea.BoolValue(util.IsUnset(request.Stop)) {
		body["Stop"] = request.Stop
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFile"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFile(request *CreateFileRequest) (_result *CreateFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFileResponse{}
	_body, _err := client.CreateFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFolderWithOptions(request *CreateFolderRequest, runtime *util.RuntimeOptions) (_result *CreateFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FolderPath)) {
		body["FolderPath"] = request.FolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFolder"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFolderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFolder(request *CreateFolderRequest) (_result *CreateFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFolderResponse{}
	_body, _err := client.CreateFolderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateImportMigrationWithOptions(request *CreateImportMigrationRequest, runtime *util.RuntimeOptions) (_result *CreateImportMigrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalculateEngineMap)) {
		body["CalculateEngineMap"] = request.CalculateEngineMap
	}

	if !tea.BoolValue(util.IsUnset(request.CommitRule)) {
		body["CommitRule"] = request.CommitRule
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PackageFile)) {
		body["PackageFile"] = request.PackageFile
	}

	if !tea.BoolValue(util.IsUnset(request.PackageType)) {
		body["PackageType"] = request.PackageType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupMap)) {
		body["ResourceGroupMap"] = request.ResourceGroupMap
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceMap)) {
		body["WorkspaceMap"] = request.WorkspaceMap
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateImportMigration"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateImportMigrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateImportMigration(request *CreateImportMigrationRequest) (_result *CreateImportMigrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateImportMigrationResponse{}
	_body, _err := client.CreateImportMigrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateImportMigrationAdvance(request *CreateImportMigrationAdvanceRequest, runtime *util.RuntimeOptions) (_result *CreateImportMigrationResponse, _err error) {
	// Step 0: init client
	accessKeyId, _err := client.Credential.GetAccessKeyId()
	if _err != nil {
		return _result, _err
	}

	accessKeySecret, _err := client.Credential.GetAccessKeySecret()
	if _err != nil {
		return _result, _err
	}

	securityToken, _err := client.Credential.GetSecurityToken()
	if _err != nil {
		return _result, _err
	}

	credentialType := client.Credential.GetType()
	openPlatformEndpoint := client.OpenPlatformEndpoint
	if tea.BoolValue(util.IsUnset(openPlatformEndpoint)) {
		openPlatformEndpoint = tea.String("openplatform.aliyuncs.com")
	}

	if tea.BoolValue(util.IsUnset(credentialType)) {
		credentialType = tea.String("access_key")
	}

	authConfig := &rpc.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		SecurityToken:   securityToken,
		Type:            credentialType,
		Endpoint:        openPlatformEndpoint,
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	authClient, _err := openplatform.NewClient(authConfig)
	if _err != nil {
		return _result, _err
	}

	authRequest := &openplatform.AuthorizeFileUploadRequest{
		Product:  tea.String("dataworks-public"),
		RegionId: client.RegionId,
	}
	authResponse := &openplatform.AuthorizeFileUploadResponse{}
	ossConfig := &oss.Config{
		AccessKeySecret: accessKeySecret,
		Type:            tea.String("access_key"),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	var ossClient *oss.Client
	fileObj := &fileform.FileField{}
	ossHeader := &oss.PostObjectRequestHeader{}
	uploadRequest := &oss.PostObjectRequest{}
	ossRuntime := &ossutil.RuntimeOptions{}
	openapiutil.Convert(runtime, ossRuntime)
	createImportMigrationReq := &CreateImportMigrationRequest{}
	openapiutil.Convert(request, createImportMigrationReq)
	if !tea.BoolValue(util.IsUnset(request.PackageFileObject)) {
		authResponse, _err = authClient.AuthorizeFileUploadWithOptions(authRequest, runtime)
		if _err != nil {
			return _result, _err
		}

		ossConfig.AccessKeyId = authResponse.AccessKeyId
		ossConfig.Endpoint = openapiutil.GetEndpoint(authResponse.Endpoint, authResponse.UseAccelerate, client.EndpointType)
		ossClient, _err = oss.NewClient(ossConfig)
		if _err != nil {
			return _result, _err
		}

		fileObj = &fileform.FileField{
			Filename:    authResponse.ObjectKey,
			Content:     request.PackageFileObject,
			ContentType: tea.String(""),
		}
		ossHeader = &oss.PostObjectRequestHeader{
			AccessKeyId:         authResponse.AccessKeyId,
			Policy:              authResponse.EncodedPolicy,
			Signature:           authResponse.Signature,
			Key:                 authResponse.ObjectKey,
			File:                fileObj,
			SuccessActionStatus: tea.String("201"),
		}
		uploadRequest = &oss.PostObjectRequest{
			BucketName: authResponse.Bucket,
			Header:     ossHeader,
		}
		_, _err = ossClient.PostObject(uploadRequest, ossRuntime)
		if _err != nil {
			return _result, _err
		}
		createImportMigrationReq.PackageFile = tea.String("http://" + tea.StringValue(authResponse.Bucket) + "." + tea.StringValue(authResponse.Endpoint) + "/" + tea.StringValue(authResponse.ObjectKey))
	}

	createImportMigrationResp, _err := client.CreateImportMigrationWithOptions(createImportMigrationReq, runtime)
	if _err != nil {
		return _result, _err
	}

	_result = createImportMigrationResp
	return _result, _err
}

func (client *Client) CreateManualDagWithOptions(request *CreateManualDagRequest, runtime *util.RuntimeOptions) (_result *CreateManualDagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizDate)) {
		body["BizDate"] = request.BizDate
	}

	if !tea.BoolValue(util.IsUnset(request.DagParameters)) {
		body["DagParameters"] = request.DagParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ExcludeNodeIds)) {
		body["ExcludeNodeIds"] = request.ExcludeNodeIds
	}

	if !tea.BoolValue(util.IsUnset(request.FlowName)) {
		body["FlowName"] = request.FlowName
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeNodeIds)) {
		body["IncludeNodeIds"] = request.IncludeNodeIds
	}

	if !tea.BoolValue(util.IsUnset(request.NodeParameters)) {
		body["NodeParameters"] = request.NodeParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateManualDag"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateManualDagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateManualDag(request *CreateManualDagRequest) (_result *CreateManualDagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateManualDagResponse{}
	_body, _err := client.CreateManualDagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMetaCategoryWithOptions(request *CreateMetaCategoryRequest, runtime *util.RuntimeOptions) (_result *CreateMetaCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		body["ParentId"] = request.ParentId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMetaCategory"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMetaCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMetaCategory(request *CreateMetaCategoryRequest) (_result *CreateMetaCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMetaCategoryResponse{}
	_body, _err := client.CreateMetaCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreatePermissionApplyOrderWithOptions(request *CreatePermissionApplyOrderRequest, runtime *util.RuntimeOptions) (_result *CreatePermissionApplyOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyObject)) {
		query["ApplyObject"] = request.ApplyObject
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyReason)) {
		query["ApplyReason"] = request.ApplyReason
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyUserIds)) {
		query["ApplyUserIds"] = request.ApplyUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.Deadline)) {
		query["Deadline"] = request.Deadline
	}

	if !tea.BoolValue(util.IsUnset(request.EngineType)) {
		query["EngineType"] = request.EngineType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxComputeProjectName)) {
		query["MaxComputeProjectName"] = request.MaxComputeProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePermissionApplyOrder"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePermissionApplyOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreatePermissionApplyOrder(request *CreatePermissionApplyOrderRequest) (_result *CreatePermissionApplyOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePermissionApplyOrderResponse{}
	_body, _err := client.CreatePermissionApplyOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateProjectMemberWithOptions(request *CreateProjectMemberRequest, runtime *util.RuntimeOptions) (_result *CreateProjectMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleCode)) {
		query["RoleCode"] = request.RoleCode
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateProjectMember"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateProjectMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateProjectMember(request *CreateProjectMemberRequest) (_result *CreateProjectMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProjectMemberResponse{}
	_body, _err := client.CreateProjectMemberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateQualityEntityWithOptions(request *CreateQualityEntityRequest, runtime *util.RuntimeOptions) (_result *CreateQualityEntityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityLevel)) {
		body["EntityLevel"] = request.EntityLevel
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.MatchExpression)) {
		body["MatchExpression"] = request.MatchExpression
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		body["TableName"] = request.TableName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateQualityEntity"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateQualityEntityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateQualityEntity(request *CreateQualityEntityRequest) (_result *CreateQualityEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateQualityEntityResponse{}
	_body, _err := client.CreateQualityEntityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateQualityFollowerWithOptions(request *CreateQualityFollowerRequest, runtime *util.RuntimeOptions) (_result *CreateQualityFollowerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmMode)) {
		body["AlarmMode"] = request.AlarmMode
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		body["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.Follower)) {
		body["Follower"] = request.Follower
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateQualityFollower"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateQualityFollowerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateQualityFollower(request *CreateQualityFollowerRequest) (_result *CreateQualityFollowerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateQualityFollowerResponse{}
	_body, _err := client.CreateQualityFollowerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateQualityRelativeNodeWithOptions(request *CreateQualityRelativeNodeRequest, runtime *util.RuntimeOptions) (_result *CreateQualityRelativeNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.MatchExpression)) {
		body["MatchExpression"] = request.MatchExpression
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		body["TableName"] = request.TableName
	}

	if !tea.BoolValue(util.IsUnset(request.TargetNodeProjectId)) {
		body["TargetNodeProjectId"] = request.TargetNodeProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetNodeProjectName)) {
		body["TargetNodeProjectName"] = request.TargetNodeProjectName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateQualityRelativeNode"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateQualityRelativeNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateQualityRelativeNode(request *CreateQualityRelativeNodeRequest) (_result *CreateQualityRelativeNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateQualityRelativeNodeResponse{}
	_body, _err := client.CreateQualityRelativeNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateQualityRuleWithOptions(request *CreateQualityRuleRequest, runtime *util.RuntimeOptions) (_result *CreateQualityRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BlockType)) {
		body["BlockType"] = request.BlockType
	}

	if !tea.BoolValue(util.IsUnset(request.Checker)) {
		body["Checker"] = request.Checker
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.CriticalThreshold)) {
		body["CriticalThreshold"] = request.CriticalThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		body["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.ExpectValue)) {
		body["ExpectValue"] = request.ExpectValue
	}

	if !tea.BoolValue(util.IsUnset(request.MethodName)) {
		body["MethodName"] = request.MethodName
	}

	if !tea.BoolValue(util.IsUnset(request.Operator)) {
		body["Operator"] = request.Operator
	}

	if !tea.BoolValue(util.IsUnset(request.PredictType)) {
		body["PredictType"] = request.PredictType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.Property)) {
		body["Property"] = request.Property
	}

	if !tea.BoolValue(util.IsUnset(request.PropertyType)) {
		body["PropertyType"] = request.PropertyType
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		body["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleType)) {
		body["RuleType"] = request.RuleType
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Trend)) {
		body["Trend"] = request.Trend
	}

	if !tea.BoolValue(util.IsUnset(request.WarningThreshold)) {
		body["WarningThreshold"] = request.WarningThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.WhereCondition)) {
		body["WhereCondition"] = request.WhereCondition
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateQualityRule"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateQualityRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateQualityRule(request *CreateQualityRuleRequest) (_result *CreateQualityRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateQualityRuleResponse{}
	_body, _err := client.CreateQualityRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRemindWithOptions(request *CreateRemindRequest, runtime *util.RuntimeOptions) (_result *CreateRemindResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertInterval)) {
		body["AlertInterval"] = request.AlertInterval
	}

	if !tea.BoolValue(util.IsUnset(request.AlertMethods)) {
		body["AlertMethods"] = request.AlertMethods
	}

	if !tea.BoolValue(util.IsUnset(request.AlertTargets)) {
		body["AlertTargets"] = request.AlertTargets
	}

	if !tea.BoolValue(util.IsUnset(request.AlertUnit)) {
		body["AlertUnit"] = request.AlertUnit
	}

	if !tea.BoolValue(util.IsUnset(request.BaselineIds)) {
		body["BaselineIds"] = request.BaselineIds
	}

	if !tea.BoolValue(util.IsUnset(request.BizProcessIds)) {
		body["BizProcessIds"] = request.BizProcessIds
	}

	if !tea.BoolValue(util.IsUnset(request.Detail)) {
		body["Detail"] = request.Detail
	}

	if !tea.BoolValue(util.IsUnset(request.DndEnd)) {
		body["DndEnd"] = request.DndEnd
	}

	if !tea.BoolValue(util.IsUnset(request.MaxAlertTimes)) {
		body["MaxAlertTimes"] = request.MaxAlertTimes
	}

	if !tea.BoolValue(util.IsUnset(request.NodeIds)) {
		body["NodeIds"] = request.NodeIds
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RemindName)) {
		body["RemindName"] = request.RemindName
	}

	if !tea.BoolValue(util.IsUnset(request.RemindType)) {
		body["RemindType"] = request.RemindType
	}

	if !tea.BoolValue(util.IsUnset(request.RemindUnit)) {
		body["RemindUnit"] = request.RemindUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RobotUrls)) {
		body["RobotUrls"] = request.RobotUrls
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRemind"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRemindResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRemind(request *CreateRemindRequest) (_result *CreateRemindResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRemindResponse{}
	_body, _err := client.CreateRemindWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTableWithOptions(request *CreateTableRequest, runtime *util.RuntimeOptions) (_result *CreateTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppGuid)) {
		query["AppGuid"] = request.AppGuid
	}

	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		query["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalTableType)) {
		query["ExternalTableType"] = request.ExternalTableType
	}

	if !tea.BoolValue(util.IsUnset(request.HasPart)) {
		query["HasPart"] = request.HasPart
	}

	if !tea.BoolValue(util.IsUnset(request.IsView)) {
		query["IsView"] = request.IsView
	}

	if !tea.BoolValue(util.IsUnset(request.LifeCycle)) {
		query["LifeCycle"] = request.LifeCycle
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		query["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalLevelId)) {
		query["LogicalLevelId"] = request.LogicalLevelId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PhysicsLevelId)) {
		query["PhysicsLevelId"] = request.PhysicsLevelId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		query["Visibility"] = request.Visibility
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Columns)) {
		body["Columns"] = request.Columns
	}

	if !tea.BoolValue(util.IsUnset(request.Endpoint)) {
		body["Endpoint"] = request.Endpoint
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.Themes)) {
		body["Themes"] = request.Themes
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTable"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTable(request *CreateTableRequest) (_result *CreateTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTableResponse{}
	_body, _err := client.CreateTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTableLevelWithOptions(request *CreateTableLevelRequest, runtime *util.RuntimeOptions) (_result *CreateTableLevelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.LevelType)) {
		query["LevelType"] = request.LevelType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTableLevel"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTableLevelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTableLevel(request *CreateTableLevelRequest) (_result *CreateTableLevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTableLevelResponse{}
	_body, _err := client.CreateTableLevelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTableThemeWithOptions(request *CreateTableThemeRequest, runtime *util.RuntimeOptions) (_result *CreateTableThemeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTableTheme"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTableThemeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTableTheme(request *CreateTableThemeRequest) (_result *CreateTableThemeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTableThemeResponse{}
	_body, _err := client.CreateTableThemeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateUdfFileWithOptions(request *CreateUdfFileRequest, runtime *util.RuntimeOptions) (_result *CreateUdfFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClassName)) {
		body["ClassName"] = request.ClassName
	}

	if !tea.BoolValue(util.IsUnset(request.CmdDescription)) {
		body["CmdDescription"] = request.CmdDescription
	}

	if !tea.BoolValue(util.IsUnset(request.Example)) {
		body["Example"] = request.Example
	}

	if !tea.BoolValue(util.IsUnset(request.FileFolderPath)) {
		body["FileFolderPath"] = request.FileFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		body["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionType)) {
		body["FunctionType"] = request.FunctionType
	}

	if !tea.BoolValue(util.IsUnset(request.ParameterDescription)) {
		body["ParameterDescription"] = request.ParameterDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.Resources)) {
		body["Resources"] = request.Resources
	}

	if !tea.BoolValue(util.IsUnset(request.ReturnValue)) {
		body["ReturnValue"] = request.ReturnValue
	}

	if !tea.BoolValue(util.IsUnset(request.UdfDescription)) {
		body["UdfDescription"] = request.UdfDescription
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUdfFile"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUdfFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateUdfFile(request *CreateUdfFileRequest) (_result *CreateUdfFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUdfFileResponse{}
	_body, _err := client.CreateUdfFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBusinessWithOptions(request *DeleteBusinessRequest, runtime *util.RuntimeOptions) (_result *DeleteBusinessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessId)) {
		body["BusinessId"] = request.BusinessId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBusiness"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteBusinessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBusiness(request *DeleteBusinessRequest) (_result *DeleteBusinessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBusinessResponse{}
	_body, _err := client.DeleteBusinessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteConnectionWithOptions(request *DeleteConnectionRequest, runtime *util.RuntimeOptions) (_result *DeleteConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConnectionId)) {
		query["ConnectionId"] = request.ConnectionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteConnection"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteConnectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteConnection(request *DeleteConnectionRequest) (_result *DeleteConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteConnectionResponse{}
	_body, _err := client.DeleteConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDISyncTaskWithOptions(request *DeleteDISyncTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteDISyncTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDISyncTask"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDISyncTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDISyncTask(request *DeleteDISyncTaskRequest) (_result *DeleteDISyncTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDISyncTaskResponse{}
	_body, _err := client.DeleteDISyncTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDataServiceApiWithOptions(request *DeleteDataServiceApiRequest, runtime *util.RuntimeOptions) (_result *DeleteDataServiceApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		body["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataServiceApi"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataServiceApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDataServiceApi(request *DeleteDataServiceApiRequest) (_result *DeleteDataServiceApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataServiceApiResponse{}
	_body, _err := client.DeleteDataServiceApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDataServiceApiAuthorityWithOptions(request *DeleteDataServiceApiAuthorityRequest, runtime *util.RuntimeOptions) (_result *DeleteDataServiceApiAuthorityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		body["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorizedProjectId)) {
		body["AuthorizedProjectId"] = request.AuthorizedProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataServiceApiAuthority"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataServiceApiAuthorityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDataServiceApiAuthority(request *DeleteDataServiceApiAuthorityRequest) (_result *DeleteDataServiceApiAuthorityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataServiceApiAuthorityResponse{}
	_body, _err := client.DeleteDataServiceApiAuthorityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDataSourceWithOptions(request *DeleteDataSourceRequest, runtime *util.RuntimeOptions) (_result *DeleteDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataSource"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDataSource(request *DeleteDataSourceRequest) (_result *DeleteDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataSourceResponse{}
	_body, _err := client.DeleteDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFileWithOptions(request *DeleteFileRequest, runtime *util.RuntimeOptions) (_result *DeleteFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFile"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFile(request *DeleteFileRequest) (_result *DeleteFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFileResponse{}
	_body, _err := client.DeleteFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFolderWithOptions(request *DeleteFolderRequest, runtime *util.RuntimeOptions) (_result *DeleteFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FolderId)) {
		body["FolderId"] = request.FolderId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFolder"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFolderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFolder(request *DeleteFolderRequest) (_result *DeleteFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFolderResponse{}
	_body, _err := client.DeleteFolderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFromMetaCategoryWithOptions(request *DeleteFromMetaCategoryRequest, runtime *util.RuntimeOptions) (_result *DeleteFromMetaCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		query["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		query["TableGuid"] = request.TableGuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFromMetaCategory"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFromMetaCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFromMetaCategory(request *DeleteFromMetaCategoryRequest) (_result *DeleteFromMetaCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFromMetaCategoryResponse{}
	_body, _err := client.DeleteFromMetaCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMetaCategoryWithOptions(request *DeleteMetaCategoryRequest, runtime *util.RuntimeOptions) (_result *DeleteMetaCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMetaCategory"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMetaCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMetaCategory(request *DeleteMetaCategoryRequest) (_result *DeleteMetaCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMetaCategoryResponse{}
	_body, _err := client.DeleteMetaCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteProjectMemberWithOptions(request *DeleteProjectMemberRequest, runtime *util.RuntimeOptions) (_result *DeleteProjectMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteProjectMember"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteProjectMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteProjectMember(request *DeleteProjectMemberRequest) (_result *DeleteProjectMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProjectMemberResponse{}
	_body, _err := client.DeleteProjectMemberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteQualityEntityWithOptions(request *DeleteQualityEntityRequest, runtime *util.RuntimeOptions) (_result *DeleteQualityEntityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		body["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteQualityEntity"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteQualityEntityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteQualityEntity(request *DeleteQualityEntityRequest) (_result *DeleteQualityEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteQualityEntityResponse{}
	_body, _err := client.DeleteQualityEntityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteQualityFollowerWithOptions(request *DeleteQualityFollowerRequest, runtime *util.RuntimeOptions) (_result *DeleteQualityFollowerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FollowerId)) {
		body["FollowerId"] = request.FollowerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteQualityFollower"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteQualityFollowerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteQualityFollower(request *DeleteQualityFollowerRequest) (_result *DeleteQualityFollowerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteQualityFollowerResponse{}
	_body, _err := client.DeleteQualityFollowerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteQualityRelativeNodeWithOptions(request *DeleteQualityRelativeNodeRequest, runtime *util.RuntimeOptions) (_result *DeleteQualityRelativeNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.MatchExpression)) {
		body["MatchExpression"] = request.MatchExpression
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		body["TableName"] = request.TableName
	}

	if !tea.BoolValue(util.IsUnset(request.TargetNodeProjectId)) {
		body["TargetNodeProjectId"] = request.TargetNodeProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetNodeProjectName)) {
		body["TargetNodeProjectName"] = request.TargetNodeProjectName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteQualityRelativeNode"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteQualityRelativeNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteQualityRelativeNode(request *DeleteQualityRelativeNodeRequest) (_result *DeleteQualityRelativeNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteQualityRelativeNodeResponse{}
	_body, _err := client.DeleteQualityRelativeNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteQualityRuleWithOptions(request *DeleteQualityRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteQualityRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		body["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteQualityRule"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteQualityRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteQualityRule(request *DeleteQualityRuleRequest) (_result *DeleteQualityRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteQualityRuleResponse{}
	_body, _err := client.DeleteQualityRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRemindWithOptions(request *DeleteRemindRequest, runtime *util.RuntimeOptions) (_result *DeleteRemindResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RemindId)) {
		body["RemindId"] = request.RemindId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRemind"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRemindResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRemind(request *DeleteRemindRequest) (_result *DeleteRemindResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRemindResponse{}
	_body, _err := client.DeleteRemindWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTableWithOptions(request *DeleteTableRequest, runtime *util.RuntimeOptions) (_result *DeleteTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppGuid)) {
		query["AppGuid"] = request.AppGuid
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTable"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTable(request *DeleteTableRequest) (_result *DeleteTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTableResponse{}
	_body, _err := client.DeleteTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTableLevelWithOptions(request *DeleteTableLevelRequest, runtime *util.RuntimeOptions) (_result *DeleteTableLevelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LevelId)) {
		query["LevelId"] = request.LevelId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTableLevel"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTableLevelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTableLevel(request *DeleteTableLevelRequest) (_result *DeleteTableLevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTableLevelResponse{}
	_body, _err := client.DeleteTableLevelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTableThemeWithOptions(request *DeleteTableThemeRequest, runtime *util.RuntimeOptions) (_result *DeleteTableThemeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ThemeId)) {
		query["ThemeId"] = request.ThemeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTableTheme"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTableThemeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTableTheme(request *DeleteTableThemeRequest) (_result *DeleteTableThemeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTableThemeResponse{}
	_body, _err := client.DeleteTableThemeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeployDISyncTaskWithOptions(request *DeployDISyncTaskRequest, runtime *util.RuntimeOptions) (_result *DeployDISyncTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeployDISyncTask"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeployDISyncTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeployDISyncTask(request *DeployDISyncTaskRequest) (_result *DeployDISyncTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeployDISyncTaskResponse{}
	_body, _err := client.DeployDISyncTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeployFileWithOptions(request *DeployFileRequest, runtime *util.RuntimeOptions) (_result *DeployFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeployFile"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeployFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeployFile(request *DeployFileRequest) (_result *DeployFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeployFileResponse{}
	_body, _err := client.DeployFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DesensitizeDataWithOptions(request *DesensitizeDataRequest, runtime *util.RuntimeOptions) (_result *DesensitizeDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DesensitizeData"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DesensitizeDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DesensitizeData(request *DesensitizeDataRequest) (_result *DesensitizeDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DesensitizeDataResponse{}
	_body, _err := client.DesensitizeDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EstablishRelationTableToBusinessWithOptions(request *EstablishRelationTableToBusinessRequest, runtime *util.RuntimeOptions) (_result *EstablishRelationTableToBusinessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessId)) {
		body["BusinessId"] = request.BusinessId
	}

	if !tea.BoolValue(util.IsUnset(request.FolderId)) {
		body["FolderId"] = request.FolderId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		body["TableGuid"] = request.TableGuid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("EstablishRelationTableToBusiness"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EstablishRelationTableToBusinessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EstablishRelationTableToBusiness(request *EstablishRelationTableToBusinessRequest) (_result *EstablishRelationTableToBusinessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EstablishRelationTableToBusinessResponse{}
	_body, _err := client.EstablishRelationTableToBusinessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExportDataSourcesWithOptions(request *ExportDataSourcesRequest, runtime *util.RuntimeOptions) (_result *ExportDataSourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportDataSources"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportDataSourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExportDataSources(request *ExportDataSourcesRequest) (_result *ExportDataSourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportDataSourcesResponse{}
	_body, _err := client.ExportDataSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GenerateDISyncTaskConfigForCreatingWithOptions(request *GenerateDISyncTaskConfigForCreatingRequest, runtime *util.RuntimeOptions) (_result *GenerateDISyncTaskConfigForCreatingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskParam)) {
		query["TaskParam"] = request.TaskParam
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateDISyncTaskConfigForCreating"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateDISyncTaskConfigForCreatingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GenerateDISyncTaskConfigForCreating(request *GenerateDISyncTaskConfigForCreatingRequest) (_result *GenerateDISyncTaskConfigForCreatingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateDISyncTaskConfigForCreatingResponse{}
	_body, _err := client.GenerateDISyncTaskConfigForCreatingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GenerateDISyncTaskConfigForUpdatingWithOptions(request *GenerateDISyncTaskConfigForUpdatingRequest, runtime *util.RuntimeOptions) (_result *GenerateDISyncTaskConfigForUpdatingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskParam)) {
		query["TaskParam"] = request.TaskParam
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateDISyncTaskConfigForUpdating"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateDISyncTaskConfigForUpdatingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GenerateDISyncTaskConfigForUpdating(request *GenerateDISyncTaskConfigForUpdatingRequest) (_result *GenerateDISyncTaskConfigForUpdatingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateDISyncTaskConfigForUpdatingResponse{}
	_body, _err := client.GenerateDISyncTaskConfigForUpdatingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBaselineConfigWithOptions(request *GetBaselineConfigRequest, runtime *util.RuntimeOptions) (_result *GetBaselineConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaselineId)) {
		body["BaselineId"] = request.BaselineId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBaselineConfig"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBaselineConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBaselineConfig(request *GetBaselineConfigRequest) (_result *GetBaselineConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBaselineConfigResponse{}
	_body, _err := client.GetBaselineConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBaselineKeyPathWithOptions(request *GetBaselineKeyPathRequest, runtime *util.RuntimeOptions) (_result *GetBaselineKeyPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaselineId)) {
		body["BaselineId"] = request.BaselineId
	}

	if !tea.BoolValue(util.IsUnset(request.Bizdate)) {
		body["Bizdate"] = request.Bizdate
	}

	if !tea.BoolValue(util.IsUnset(request.InGroupId)) {
		body["InGroupId"] = request.InGroupId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBaselineKeyPath"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBaselineKeyPathResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBaselineKeyPath(request *GetBaselineKeyPathRequest) (_result *GetBaselineKeyPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBaselineKeyPathResponse{}
	_body, _err := client.GetBaselineKeyPathWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBaselineStatusWithOptions(request *GetBaselineStatusRequest, runtime *util.RuntimeOptions) (_result *GetBaselineStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaselineId)) {
		body["BaselineId"] = request.BaselineId
	}

	if !tea.BoolValue(util.IsUnset(request.Bizdate)) {
		body["Bizdate"] = request.Bizdate
	}

	if !tea.BoolValue(util.IsUnset(request.InGroupId)) {
		body["InGroupId"] = request.InGroupId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBaselineStatus"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBaselineStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBaselineStatus(request *GetBaselineStatusRequest) (_result *GetBaselineStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBaselineStatusResponse{}
	_body, _err := client.GetBaselineStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessWithOptions(request *GetBusinessRequest, runtime *util.RuntimeOptions) (_result *GetBusinessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessId)) {
		body["BusinessId"] = request.BusinessId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusiness"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusiness(request *GetBusinessRequest) (_result *GetBusinessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessResponse{}
	_body, _err := client.GetBusinessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDDLJobStatusWithOptions(request *GetDDLJobStatusRequest, runtime *util.RuntimeOptions) (_result *GetDDLJobStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDDLJobStatus"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDDLJobStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDDLJobStatus(request *GetDDLJobStatusRequest) (_result *GetDDLJobStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDDLJobStatusResponse{}
	_body, _err := client.GetDDLJobStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDISyncInstanceInfoWithOptions(request *GetDISyncInstanceInfoRequest, runtime *util.RuntimeOptions) (_result *GetDISyncInstanceInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDISyncInstanceInfo"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDISyncInstanceInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDISyncInstanceInfo(request *GetDISyncInstanceInfoRequest) (_result *GetDISyncInstanceInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDISyncInstanceInfoResponse{}
	_body, _err := client.GetDISyncInstanceInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDISyncTaskWithOptions(request *GetDISyncTaskRequest, runtime *util.RuntimeOptions) (_result *GetDISyncTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDISyncTask"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDISyncTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDISyncTask(request *GetDISyncTaskRequest) (_result *GetDISyncTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDISyncTaskResponse{}
	_body, _err := client.GetDISyncTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDISyncTaskMetricInfoWithOptions(request *GetDISyncTaskMetricInfoRequest, runtime *util.RuntimeOptions) (_result *GetDISyncTaskMetricInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDISyncTaskMetricInfo"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDISyncTaskMetricInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDISyncTaskMetricInfo(request *GetDISyncTaskMetricInfoRequest) (_result *GetDISyncTaskMetricInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDISyncTaskMetricInfoResponse{}
	_body, _err := client.GetDISyncTaskMetricInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDagWithOptions(request *GetDagRequest, runtime *util.RuntimeOptions) (_result *GetDagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DagId)) {
		body["DagId"] = request.DagId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDag"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDag(request *GetDagRequest) (_result *GetDagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDagResponse{}
	_body, _err := client.GetDagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDataServiceApiWithOptions(request *GetDataServiceApiRequest, runtime *util.RuntimeOptions) (_result *GetDataServiceApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		body["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataServiceApi"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataServiceApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDataServiceApi(request *GetDataServiceApiRequest) (_result *GetDataServiceApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataServiceApiResponse{}
	_body, _err := client.GetDataServiceApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDataServiceApplicationWithOptions(request *GetDataServiceApplicationRequest, runtime *util.RuntimeOptions) (_result *GetDataServiceApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplicationId)) {
		body["ApplicationId"] = request.ApplicationId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataServiceApplication"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataServiceApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDataServiceApplication(request *GetDataServiceApplicationRequest) (_result *GetDataServiceApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataServiceApplicationResponse{}
	_body, _err := client.GetDataServiceApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDataServiceFolderWithOptions(request *GetDataServiceFolderRequest, runtime *util.RuntimeOptions) (_result *GetDataServiceFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FolderId)) {
		body["FolderId"] = request.FolderId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataServiceFolder"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataServiceFolderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDataServiceFolder(request *GetDataServiceFolderRequest) (_result *GetDataServiceFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataServiceFolderResponse{}
	_body, _err := client.GetDataServiceFolderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDataServiceGroupWithOptions(request *GetDataServiceGroupRequest, runtime *util.RuntimeOptions) (_result *GetDataServiceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataServiceGroup"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataServiceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDataServiceGroup(request *GetDataServiceGroupRequest) (_result *GetDataServiceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataServiceGroupResponse{}
	_body, _err := client.GetDataServiceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDataServicePublishedApiWithOptions(request *GetDataServicePublishedApiRequest, runtime *util.RuntimeOptions) (_result *GetDataServicePublishedApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		body["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataServicePublishedApi"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataServicePublishedApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDataServicePublishedApi(request *GetDataServicePublishedApiRequest) (_result *GetDataServicePublishedApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataServicePublishedApiResponse{}
	_body, _err := client.GetDataServicePublishedApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDataSourceMetaWithOptions(request *GetDataSourceMetaRequest, runtime *util.RuntimeOptions) (_result *GetDataSourceMetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasourceName)) {
		query["DatasourceName"] = request.DatasourceName
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataSourceMeta"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataSourceMetaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDataSourceMeta(request *GetDataSourceMetaRequest) (_result *GetDataSourceMetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataSourceMetaResponse{}
	_body, _err := client.GetDataSourceMetaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDeploymentWithOptions(request *GetDeploymentRequest, runtime *util.RuntimeOptions) (_result *GetDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeploymentId)) {
		body["DeploymentId"] = request.DeploymentId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDeployment"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDeploymentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDeployment(request *GetDeploymentRequest) (_result *GetDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeploymentResponse{}
	_body, _err := client.GetDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetFileWithOptions(request *GetFileRequest, runtime *util.RuntimeOptions) (_result *GetFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFile"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetFile(request *GetFileRequest) (_result *GetFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFileResponse{}
	_body, _err := client.GetFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetFileTypeStatisticWithOptions(request *GetFileTypeStatisticRequest, runtime *util.RuntimeOptions) (_result *GetFileTypeStatisticResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFileTypeStatistic"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFileTypeStatisticResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetFileTypeStatistic(request *GetFileTypeStatisticRequest) (_result *GetFileTypeStatisticResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFileTypeStatisticResponse{}
	_body, _err := client.GetFileTypeStatisticWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetFileVersionWithOptions(request *GetFileVersionRequest, runtime *util.RuntimeOptions) (_result *GetFileVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.FileVersion)) {
		body["FileVersion"] = request.FileVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFileVersion"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFileVersionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetFileVersion(request *GetFileVersionRequest) (_result *GetFileVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFileVersionResponse{}
	_body, _err := client.GetFileVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetFolderWithOptions(request *GetFolderRequest, runtime *util.RuntimeOptions) (_result *GetFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FolderId)) {
		body["FolderId"] = request.FolderId
	}

	if !tea.BoolValue(util.IsUnset(request.FolderPath)) {
		body["FolderPath"] = request.FolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFolder"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFolderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetFolder(request *GetFolderRequest) (_result *GetFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFolderResponse{}
	_body, _err := client.GetFolderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetIDEEventDetailWithOptions(request *GetIDEEventDetailRequest, runtime *util.RuntimeOptions) (_result *GetIDEEventDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MessageId)) {
		body["MessageId"] = request.MessageId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetIDEEventDetail"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetIDEEventDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetIDEEventDetail(request *GetIDEEventDetailRequest) (_result *GetIDEEventDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetIDEEventDetailResponse{}
	_body, _err := client.GetIDEEventDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceWithOptions(request *GetInstanceRequest, runtime *util.RuntimeOptions) (_result *GetInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstance"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstance(request *GetInstanceRequest) (_result *GetInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceResponse{}
	_body, _err := client.GetInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceConsumeTimeRankWithOptions(request *GetInstanceConsumeTimeRankRequest, runtime *util.RuntimeOptions) (_result *GetInstanceConsumeTimeRankResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizdate)) {
		body["Bizdate"] = request.Bizdate
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceConsumeTimeRank"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceConsumeTimeRankResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceConsumeTimeRank(request *GetInstanceConsumeTimeRankRequest) (_result *GetInstanceConsumeTimeRankResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceConsumeTimeRankResponse{}
	_body, _err := client.GetInstanceConsumeTimeRankWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceCountTrendWithOptions(request *GetInstanceCountTrendRequest, runtime *util.RuntimeOptions) (_result *GetInstanceCountTrendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginDate)) {
		body["BeginDate"] = request.BeginDate
	}

	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		body["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceCountTrend"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceCountTrendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceCountTrend(request *GetInstanceCountTrendRequest) (_result *GetInstanceCountTrendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceCountTrendResponse{}
	_body, _err := client.GetInstanceCountTrendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceErrorRankWithOptions(request *GetInstanceErrorRankRequest, runtime *util.RuntimeOptions) (_result *GetInstanceErrorRankResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceErrorRank"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceErrorRankResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceErrorRank(request *GetInstanceErrorRankRequest) (_result *GetInstanceErrorRankResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceErrorRankResponse{}
	_body, _err := client.GetInstanceErrorRankWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceLogWithOptions(request *GetInstanceLogRequest, runtime *util.RuntimeOptions) (_result *GetInstanceLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceLog"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceLog(request *GetInstanceLogRequest) (_result *GetInstanceLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceLogResponse{}
	_body, _err := client.GetInstanceLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceStatusCountWithOptions(request *GetInstanceStatusCountRequest, runtime *util.RuntimeOptions) (_result *GetInstanceStatusCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizDate)) {
		body["BizDate"] = request.BizDate
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceStatusCount"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceStatusCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceStatusCount(request *GetInstanceStatusCountRequest) (_result *GetInstanceStatusCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceStatusCountResponse{}
	_body, _err := client.GetInstanceStatusCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceStatusStatisticWithOptions(request *GetInstanceStatusStatisticRequest, runtime *util.RuntimeOptions) (_result *GetInstanceStatusStatisticResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizDate)) {
		body["BizDate"] = request.BizDate
	}

	if !tea.BoolValue(util.IsUnset(request.DagType)) {
		body["DagType"] = request.DagType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SchedulerType)) {
		body["SchedulerType"] = request.SchedulerType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceStatusStatistic"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceStatusStatisticResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceStatusStatistic(request *GetInstanceStatusStatisticRequest) (_result *GetInstanceStatusStatisticResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceStatusStatisticResponse{}
	_body, _err := client.GetInstanceStatusStatisticWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetManualDagInstancesWithOptions(request *GetManualDagInstancesRequest, runtime *util.RuntimeOptions) (_result *GetManualDagInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DagId)) {
		body["DagId"] = request.DagId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetManualDagInstances"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetManualDagInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetManualDagInstances(request *GetManualDagInstancesRequest) (_result *GetManualDagInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetManualDagInstancesResponse{}
	_body, _err := client.GetManualDagInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaCategoryWithOptions(request *GetMetaCategoryRequest, runtime *util.RuntimeOptions) (_result *GetMetaCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentCategoryId)) {
		query["ParentCategoryId"] = request.ParentCategoryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaCategory"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaCategory(request *GetMetaCategoryRequest) (_result *GetMetaCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaCategoryResponse{}
	_body, _err := client.GetMetaCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaColumnLineageWithOptions(request *GetMetaColumnLineageRequest, runtime *util.RuntimeOptions) (_result *GetMetaColumnLineageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ColumnGuid)) {
		query["ColumnGuid"] = request.ColumnGuid
	}

	if !tea.BoolValue(util.IsUnset(request.ColumnName)) {
		query["ColumnName"] = request.ColumnName
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.Direction)) {
		query["Direction"] = request.Direction
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaColumnLineage"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaColumnLineageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaColumnLineage(request *GetMetaColumnLineageRequest) (_result *GetMetaColumnLineageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaColumnLineageResponse{}
	_body, _err := client.GetMetaColumnLineageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaDBInfoWithOptions(request *GetMetaDBInfoRequest, runtime *util.RuntimeOptions) (_result *GetMetaDBInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaDBInfo"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaDBInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaDBInfo(request *GetMetaDBInfoRequest) (_result *GetMetaDBInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaDBInfoResponse{}
	_body, _err := client.GetMetaDBInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaDBTableListWithOptions(request *GetMetaDBTableListRequest, runtime *util.RuntimeOptions) (_result *GetMetaDBTableListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppGuid)) {
		query["AppGuid"] = request.AppGuid
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaDBTableList"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaDBTableListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaDBTableList(request *GetMetaDBTableListRequest) (_result *GetMetaDBTableListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaDBTableListResponse{}
	_body, _err := client.GetMetaDBTableListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaTableBasicInfoWithOptions(request *GetMetaTableBasicInfoRequest, runtime *util.RuntimeOptions) (_result *GetMetaTableBasicInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaTableBasicInfo"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaTableBasicInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaTableBasicInfo(request *GetMetaTableBasicInfoRequest) (_result *GetMetaTableBasicInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaTableBasicInfoResponse{}
	_body, _err := client.GetMetaTableBasicInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaTableChangeLogWithOptions(request *GetMetaTableChangeLogRequest, runtime *util.RuntimeOptions) (_result *GetMetaTableChangeLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChangeType)) {
		body["ChangeType"] = request.ChangeType
	}

	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		body["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectType)) {
		body["ObjectType"] = request.ObjectType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		body["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		body["TableGuid"] = request.TableGuid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaTableChangeLog"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaTableChangeLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaTableChangeLog(request *GetMetaTableChangeLogRequest) (_result *GetMetaTableChangeLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaTableChangeLogResponse{}
	_body, _err := client.GetMetaTableChangeLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaTableColumnWithOptions(request *GetMetaTableColumnRequest, runtime *util.RuntimeOptions) (_result *GetMetaTableColumnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaTableColumn"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaTableColumnResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaTableColumn(request *GetMetaTableColumnRequest) (_result *GetMetaTableColumnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaTableColumnResponse{}
	_body, _err := client.GetMetaTableColumnWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaTableFullInfoWithOptions(request *GetMetaTableFullInfoRequest, runtime *util.RuntimeOptions) (_result *GetMetaTableFullInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaTableFullInfo"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaTableFullInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaTableFullInfo(request *GetMetaTableFullInfoRequest) (_result *GetMetaTableFullInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaTableFullInfoResponse{}
	_body, _err := client.GetMetaTableFullInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaTableIntroWikiWithOptions(request *GetMetaTableIntroWikiRequest, runtime *util.RuntimeOptions) (_result *GetMetaTableIntroWikiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		query["TableGuid"] = request.TableGuid
	}

	if !tea.BoolValue(util.IsUnset(request.WikiVersion)) {
		query["WikiVersion"] = request.WikiVersion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaTableIntroWiki"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaTableIntroWikiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaTableIntroWiki(request *GetMetaTableIntroWikiRequest) (_result *GetMetaTableIntroWikiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaTableIntroWikiResponse{}
	_body, _err := client.GetMetaTableIntroWikiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaTableLineageWithOptions(request *GetMetaTableLineageRequest, runtime *util.RuntimeOptions) (_result *GetMetaTableLineageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.Direction)) {
		query["Direction"] = request.Direction
	}

	if !tea.BoolValue(util.IsUnset(request.NextPrimaryKey)) {
		query["NextPrimaryKey"] = request.NextPrimaryKey
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		query["TableGuid"] = request.TableGuid
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaTableLineage"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaTableLineageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaTableLineage(request *GetMetaTableLineageRequest) (_result *GetMetaTableLineageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaTableLineageResponse{}
	_body, _err := client.GetMetaTableLineageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaTableListByCategoryWithOptions(request *GetMetaTableListByCategoryRequest, runtime *util.RuntimeOptions) (_result *GetMetaTableListByCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaTableListByCategory"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaTableListByCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaTableListByCategory(request *GetMetaTableListByCategoryRequest) (_result *GetMetaTableListByCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaTableListByCategoryResponse{}
	_body, _err := client.GetMetaTableListByCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaTableOutputWithOptions(request *GetMetaTableOutputRequest, runtime *util.RuntimeOptions) (_result *GetMetaTableOutputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		query["TableGuid"] = request.TableGuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaTableOutput"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaTableOutputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaTableOutput(request *GetMetaTableOutputRequest) (_result *GetMetaTableOutputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaTableOutputResponse{}
	_body, _err := client.GetMetaTableOutputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaTablePartitionWithOptions(request *GetMetaTablePartitionRequest, runtime *util.RuntimeOptions) (_result *GetMetaTablePartitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseName)) {
		query["DatabaseName"] = request.DatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		query["TableGuid"] = request.TableGuid
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaTablePartition"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaTablePartitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaTablePartition(request *GetMetaTablePartitionRequest) (_result *GetMetaTablePartitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaTablePartitionResponse{}
	_body, _err := client.GetMetaTablePartitionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetaTableThemeLevelWithOptions(request *GetMetaTableThemeLevelRequest, runtime *util.RuntimeOptions) (_result *GetMetaTableThemeLevelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaTableThemeLevel"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaTableThemeLevelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetaTableThemeLevel(request *GetMetaTableThemeLevelRequest) (_result *GetMetaTableThemeLevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaTableThemeLevelResponse{}
	_body, _err := client.GetMetaTableThemeLevelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMigrationProcessWithOptions(request *GetMigrationProcessRequest, runtime *util.RuntimeOptions) (_result *GetMigrationProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MigrationId)) {
		body["MigrationId"] = request.MigrationId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMigrationProcess"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMigrationProcessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMigrationProcess(request *GetMigrationProcessRequest) (_result *GetMigrationProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMigrationProcessResponse{}
	_body, _err := client.GetMigrationProcessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMigrationSummaryWithOptions(request *GetMigrationSummaryRequest, runtime *util.RuntimeOptions) (_result *GetMigrationSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MigrationId)) {
		body["MigrationId"] = request.MigrationId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMigrationSummary"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMigrationSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMigrationSummary(request *GetMigrationSummaryRequest) (_result *GetMigrationSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMigrationSummaryResponse{}
	_body, _err := client.GetMigrationSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetNodeWithOptions(request *GetNodeRequest, runtime *util.RuntimeOptions) (_result *GetNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNode"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetNode(request *GetNodeRequest) (_result *GetNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNodeResponse{}
	_body, _err := client.GetNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetNodeChildrenWithOptions(request *GetNodeChildrenRequest, runtime *util.RuntimeOptions) (_result *GetNodeChildrenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNodeChildren"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNodeChildrenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetNodeChildren(request *GetNodeChildrenRequest) (_result *GetNodeChildrenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNodeChildrenResponse{}
	_body, _err := client.GetNodeChildrenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetNodeCodeWithOptions(request *GetNodeCodeRequest, runtime *util.RuntimeOptions) (_result *GetNodeCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNodeCode"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNodeCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetNodeCode(request *GetNodeCodeRequest) (_result *GetNodeCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNodeCodeResponse{}
	_body, _err := client.GetNodeCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetNodeOnBaselineWithOptions(request *GetNodeOnBaselineRequest, runtime *util.RuntimeOptions) (_result *GetNodeOnBaselineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaselineId)) {
		body["BaselineId"] = request.BaselineId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNodeOnBaseline"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNodeOnBaselineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetNodeOnBaseline(request *GetNodeOnBaselineRequest) (_result *GetNodeOnBaselineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNodeOnBaselineResponse{}
	_body, _err := client.GetNodeOnBaselineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetNodeParentsWithOptions(request *GetNodeParentsRequest, runtime *util.RuntimeOptions) (_result *GetNodeParentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNodeParents"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNodeParentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetNodeParents(request *GetNodeParentsRequest) (_result *GetNodeParentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNodeParentsResponse{}
	_body, _err := client.GetNodeParentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetNodeTypeListInfoWithOptions(request *GetNodeTypeListInfoRequest, runtime *util.RuntimeOptions) (_result *GetNodeTypeListInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Locale)) {
		body["Locale"] = request.Locale
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNodeTypeListInfo"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNodeTypeListInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetNodeTypeListInfo(request *GetNodeTypeListInfoRequest) (_result *GetNodeTypeListInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNodeTypeListInfoResponse{}
	_body, _err := client.GetNodeTypeListInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetOpRiskDataWithOptions(request *GetOpRiskDataRequest, runtime *util.RuntimeOptions) (_result *GetOpRiskDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetOpRiskData"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetOpRiskDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetOpRiskData(request *GetOpRiskDataRequest) (_result *GetOpRiskDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetOpRiskDataResponse{}
	_body, _err := client.GetOpRiskDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetOpSensitiveDataWithOptions(request *GetOpSensitiveDataRequest, runtime *util.RuntimeOptions) (_result *GetOpSensitiveDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetOpSensitiveData"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetOpSensitiveDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetOpSensitiveData(request *GetOpSensitiveDataRequest) (_result *GetOpSensitiveDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetOpSensitiveDataResponse{}
	_body, _err := client.GetOpSensitiveDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPermissionApplyOrderDetailWithOptions(request *GetPermissionApplyOrderDetailRequest, runtime *util.RuntimeOptions) (_result *GetPermissionApplyOrderDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPermissionApplyOrderDetail"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPermissionApplyOrderDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPermissionApplyOrderDetail(request *GetPermissionApplyOrderDetailRequest) (_result *GetPermissionApplyOrderDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPermissionApplyOrderDetailResponse{}
	_body, _err := client.GetPermissionApplyOrderDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetProjectWithOptions(request *GetProjectRequest, runtime *util.RuntimeOptions) (_result *GetProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetProject"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetProject(request *GetProjectRequest) (_result *GetProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetProjectResponse{}
	_body, _err := client.GetProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetProjectDetailWithOptions(request *GetProjectDetailRequest, runtime *util.RuntimeOptions) (_result *GetProjectDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetProjectDetail"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProjectDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetProjectDetail(request *GetProjectDetailRequest) (_result *GetProjectDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetProjectDetailResponse{}
	_body, _err := client.GetProjectDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetQualityEntityWithOptions(request *GetQualityEntityRequest, runtime *util.RuntimeOptions) (_result *GetQualityEntityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.MatchExpression)) {
		body["MatchExpression"] = request.MatchExpression
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		body["TableName"] = request.TableName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQualityEntity"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetQualityEntityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetQualityEntity(request *GetQualityEntityRequest) (_result *GetQualityEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQualityEntityResponse{}
	_body, _err := client.GetQualityEntityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetQualityFollowerWithOptions(request *GetQualityFollowerRequest, runtime *util.RuntimeOptions) (_result *GetQualityFollowerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		body["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQualityFollower"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetQualityFollowerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetQualityFollower(request *GetQualityFollowerRequest) (_result *GetQualityFollowerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQualityFollowerResponse{}
	_body, _err := client.GetQualityFollowerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetQualityRuleWithOptions(request *GetQualityRuleRequest, runtime *util.RuntimeOptions) (_result *GetQualityRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		body["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQualityRule"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetQualityRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetQualityRule(request *GetQualityRuleRequest) (_result *GetQualityRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQualityRuleResponse{}
	_body, _err := client.GetQualityRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRemindWithOptions(request *GetRemindRequest, runtime *util.RuntimeOptions) (_result *GetRemindResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RemindId)) {
		body["RemindId"] = request.RemindId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRemind"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRemindResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRemind(request *GetRemindRequest) (_result *GetRemindResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRemindResponse{}
	_body, _err := client.GetRemindWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSensitiveDataWithOptions(request *GetSensitiveDataRequest, runtime *util.RuntimeOptions) (_result *GetSensitiveDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSensitiveData"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSensitiveDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSensitiveData(request *GetSensitiveDataRequest) (_result *GetSensitiveDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSensitiveDataResponse{}
	_body, _err := client.GetSensitiveDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSuccessInstanceTrendWithOptions(request *GetSuccessInstanceTrendRequest, runtime *util.RuntimeOptions) (_result *GetSuccessInstanceTrendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSuccessInstanceTrend"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSuccessInstanceTrendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSuccessInstanceTrend(request *GetSuccessInstanceTrendRequest) (_result *GetSuccessInstanceTrendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSuccessInstanceTrendResponse{}
	_body, _err := client.GetSuccessInstanceTrendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetTopicWithOptions(request *GetTopicRequest, runtime *util.RuntimeOptions) (_result *GetTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TopicId)) {
		body["TopicId"] = request.TopicId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTopic"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTopicResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetTopic(request *GetTopicRequest) (_result *GetTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTopicResponse{}
	_body, _err := client.GetTopicWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetTopicInfluenceWithOptions(request *GetTopicInfluenceRequest, runtime *util.RuntimeOptions) (_result *GetTopicInfluenceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TopicId)) {
		body["TopicId"] = request.TopicId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTopicInfluence"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTopicInfluenceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetTopicInfluence(request *GetTopicInfluenceRequest) (_result *GetTopicInfluenceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTopicInfluenceResponse{}
	_body, _err := client.GetTopicInfluenceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportDataSourcesWithOptions(request *ImportDataSourcesRequest, runtime *util.RuntimeOptions) (_result *ImportDataSourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSources)) {
		query["DataSources"] = request.DataSources
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportDataSources"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportDataSourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportDataSources(request *ImportDataSourcesRequest) (_result *ImportDataSourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportDataSourcesResponse{}
	_body, _err := client.ImportDataSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAlertMessagesWithOptions(request *ListAlertMessagesRequest, runtime *util.RuntimeOptions) (_result *ListAlertMessagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertMethods)) {
		body["AlertMethods"] = request.AlertMethods
	}

	if !tea.BoolValue(util.IsUnset(request.AlertRuleTypes)) {
		body["AlertRuleTypes"] = request.AlertRuleTypes
	}

	if !tea.BoolValue(util.IsUnset(request.AlertUser)) {
		body["AlertUser"] = request.AlertUser
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		body["BeginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RemindId)) {
		body["RemindId"] = request.RemindId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAlertMessages"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAlertMessagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAlertMessages(request *ListAlertMessagesRequest) (_result *ListAlertMessagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAlertMessagesResponse{}
	_body, _err := client.ListAlertMessagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListBaselineConfigsWithOptions(request *ListBaselineConfigsRequest, runtime *util.RuntimeOptions) (_result *ListBaselineConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaselineTypes)) {
		body["BaselineTypes"] = request.BaselineTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		body["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchText)) {
		body["SearchText"] = request.SearchText
	}

	if !tea.BoolValue(util.IsUnset(request.Useflag)) {
		body["Useflag"] = request.Useflag
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListBaselineConfigs"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListBaselineConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListBaselineConfigs(request *ListBaselineConfigsRequest) (_result *ListBaselineConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBaselineConfigsResponse{}
	_body, _err := client.ListBaselineConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListBaselineStatusesWithOptions(request *ListBaselineStatusesRequest, runtime *util.RuntimeOptions) (_result *ListBaselineStatusesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaselineTypes)) {
		body["BaselineTypes"] = request.BaselineTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Bizdate)) {
		body["Bizdate"] = request.Bizdate
	}

	if !tea.BoolValue(util.IsUnset(request.FinishStatus)) {
		body["FinishStatus"] = request.FinishStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		body["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.SearchText)) {
		body["SearchText"] = request.SearchText
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TopicId)) {
		body["TopicId"] = request.TopicId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListBaselineStatuses"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListBaselineStatusesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListBaselineStatuses(request *ListBaselineStatusesRequest) (_result *ListBaselineStatusesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBaselineStatusesResponse{}
	_body, _err := client.ListBaselineStatusesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListBusinessWithOptions(request *ListBusinessRequest, runtime *util.RuntimeOptions) (_result *ListBusinessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListBusiness"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListBusinessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListBusiness(request *ListBusinessRequest) (_result *ListBusinessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBusinessResponse{}
	_body, _err := client.ListBusinessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCalcEnginesWithOptions(request *ListCalcEnginesRequest, runtime *util.RuntimeOptions) (_result *ListCalcEnginesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalcEngineType)) {
		query["CalcEngineType"] = request.CalcEngineType
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCalcEngines"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCalcEnginesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCalcEngines(request *ListCalcEnginesRequest) (_result *ListCalcEnginesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCalcEnginesResponse{}
	_body, _err := client.ListCalcEnginesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListConnectionsWithOptions(request *ListConnectionsRequest, runtime *util.RuntimeOptions) (_result *ListConnectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListConnections"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListConnectionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListConnections(request *ListConnectionsRequest) (_result *ListConnectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListConnectionsResponse{}
	_body, _err := client.ListConnectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDIProjectConfigWithOptions(request *ListDIProjectConfigRequest, runtime *util.RuntimeOptions) (_result *ListDIProjectConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationType)) {
		query["DestinationType"] = request.DestinationType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDIProjectConfig"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDIProjectConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDIProjectConfig(request *ListDIProjectConfigRequest) (_result *ListDIProjectConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDIProjectConfigResponse{}
	_body, _err := client.ListDIProjectConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDagsWithOptions(request *ListDagsRequest, runtime *util.RuntimeOptions) (_result *ListDagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OpSeq)) {
		body["OpSeq"] = request.OpSeq
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDags"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDags(request *ListDagsRequest) (_result *ListDagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDagsResponse{}
	_body, _err := client.ListDagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDataServiceApiAuthoritiesWithOptions(request *ListDataServiceApiAuthoritiesRequest, runtime *util.RuntimeOptions) (_result *ListDataServiceApiAuthoritiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiNameKeyword)) {
		body["ApiNameKeyword"] = request.ApiNameKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataServiceApiAuthorities"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataServiceApiAuthoritiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDataServiceApiAuthorities(request *ListDataServiceApiAuthoritiesRequest) (_result *ListDataServiceApiAuthoritiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataServiceApiAuthoritiesResponse{}
	_body, _err := client.ListDataServiceApiAuthoritiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDataServiceApisWithOptions(request *ListDataServiceApisRequest, runtime *util.RuntimeOptions) (_result *ListDataServiceApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiNameKeyword)) {
		body["ApiNameKeyword"] = request.ApiNameKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.ApiPathKeyword)) {
		body["ApiPathKeyword"] = request.ApiPathKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.CreatorId)) {
		body["CreatorId"] = request.CreatorId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataServiceApis"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataServiceApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDataServiceApis(request *ListDataServiceApisRequest) (_result *ListDataServiceApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataServiceApisResponse{}
	_body, _err := client.ListDataServiceApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDataServiceApplicationsWithOptions(request *ListDataServiceApplicationsRequest, runtime *util.RuntimeOptions) (_result *ListDataServiceApplicationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdList)) {
		body["ProjectIdList"] = request.ProjectIdList
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataServiceApplications"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataServiceApplicationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDataServiceApplications(request *ListDataServiceApplicationsRequest) (_result *ListDataServiceApplicationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataServiceApplicationsResponse{}
	_body, _err := client.ListDataServiceApplicationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDataServiceAuthorizedApisWithOptions(request *ListDataServiceAuthorizedApisRequest, runtime *util.RuntimeOptions) (_result *ListDataServiceAuthorizedApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiNameKeyword)) {
		body["ApiNameKeyword"] = request.ApiNameKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataServiceAuthorizedApis"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataServiceAuthorizedApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDataServiceAuthorizedApis(request *ListDataServiceAuthorizedApisRequest) (_result *ListDataServiceAuthorizedApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataServiceAuthorizedApisResponse{}
	_body, _err := client.ListDataServiceAuthorizedApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDataServiceFoldersWithOptions(request *ListDataServiceFoldersRequest, runtime *util.RuntimeOptions) (_result *ListDataServiceFoldersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FolderNameKeyword)) {
		body["FolderNameKeyword"] = request.FolderNameKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataServiceFolders"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataServiceFoldersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDataServiceFolders(request *ListDataServiceFoldersRequest) (_result *ListDataServiceFoldersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataServiceFoldersResponse{}
	_body, _err := client.ListDataServiceFoldersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDataServiceGroupsWithOptions(request *ListDataServiceGroupsRequest, runtime *util.RuntimeOptions) (_result *ListDataServiceGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupNameKeyword)) {
		body["GroupNameKeyword"] = request.GroupNameKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataServiceGroups"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataServiceGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDataServiceGroups(request *ListDataServiceGroupsRequest) (_result *ListDataServiceGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataServiceGroupsResponse{}
	_body, _err := client.ListDataServiceGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDataServicePublishedApisWithOptions(request *ListDataServicePublishedApisRequest, runtime *util.RuntimeOptions) (_result *ListDataServicePublishedApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiNameKeyword)) {
		body["ApiNameKeyword"] = request.ApiNameKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.ApiPathKeyword)) {
		body["ApiPathKeyword"] = request.ApiPathKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.CreatorId)) {
		body["CreatorId"] = request.CreatorId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataServicePublishedApis"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataServicePublishedApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDataServicePublishedApis(request *ListDataServicePublishedApisRequest) (_result *ListDataServicePublishedApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataServicePublishedApisResponse{}
	_body, _err := client.ListDataServicePublishedApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDataSourcesWithOptions(request *ListDataSourcesRequest, runtime *util.RuntimeOptions) (_result *ListDataSourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataSources"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataSourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDataSources(request *ListDataSourcesRequest) (_result *ListDataSourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataSourcesResponse{}
	_body, _err := client.ListDataSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDeploymentsWithOptions(request *ListDeploymentsRequest, runtime *util.RuntimeOptions) (_result *ListDeploymentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Creator)) {
		body["Creator"] = request.Creator
	}

	if !tea.BoolValue(util.IsUnset(request.EndCreateTime)) {
		body["EndCreateTime"] = request.EndCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndExecuteTime)) {
		body["EndExecuteTime"] = request.EndExecuteTime
	}

	if !tea.BoolValue(util.IsUnset(request.Executor)) {
		body["Executor"] = request.Executor
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDeployments"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDeploymentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDeployments(request *ListDeploymentsRequest) (_result *ListDeploymentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDeploymentsResponse{}
	_body, _err := client.ListDeploymentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFileTypeWithOptions(request *ListFileTypeRequest, runtime *util.RuntimeOptions) (_result *ListFileTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Locale)) {
		body["Locale"] = request.Locale
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFileType"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFileTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFileType(request *ListFileTypeRequest) (_result *ListFileTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFileTypeResponse{}
	_body, _err := client.ListFileTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFileVersionsWithOptions(request *ListFileVersionsRequest, runtime *util.RuntimeOptions) (_result *ListFileVersionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFileVersions"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFileVersionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFileVersions(request *ListFileVersionsRequest) (_result *ListFileVersionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFileVersionsResponse{}
	_body, _err := client.ListFileVersionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFilesWithOptions(request *ListFilesRequest, runtime *util.RuntimeOptions) (_result *ListFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileFolderPath)) {
		body["FileFolderPath"] = request.FileFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.FileTypes)) {
		body["FileTypes"] = request.FileTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.UseType)) {
		body["UseType"] = request.UseType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFiles"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFiles(request *ListFilesRequest) (_result *ListFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFilesResponse{}
	_body, _err := client.ListFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFoldersWithOptions(request *ListFoldersRequest, runtime *util.RuntimeOptions) (_result *ListFoldersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentFolderPath)) {
		body["ParentFolderPath"] = request.ParentFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFolders"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFoldersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFolders(request *ListFoldersRequest) (_result *ListFoldersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFoldersResponse{}
	_body, _err := client.ListFoldersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListInstanceAmountWithOptions(request *ListInstanceAmountRequest, runtime *util.RuntimeOptions) (_result *ListInstanceAmountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginDate)) {
		body["BeginDate"] = request.BeginDate
	}

	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		body["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInstanceAmount"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInstanceAmountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListInstanceAmount(request *ListInstanceAmountRequest) (_result *ListInstanceAmountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInstanceAmountResponse{}
	_body, _err := client.ListInstanceAmountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListInstancesWithOptions(request *ListInstancesRequest, runtime *util.RuntimeOptions) (_result *ListInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginBizdate)) {
		body["BeginBizdate"] = request.BeginBizdate
	}

	if !tea.BoolValue(util.IsUnset(request.BizName)) {
		body["BizName"] = request.BizName
	}

	if !tea.BoolValue(util.IsUnset(request.Bizdate)) {
		body["Bizdate"] = request.Bizdate
	}

	if !tea.BoolValue(util.IsUnset(request.DagId)) {
		body["DagId"] = request.DagId
	}

	if !tea.BoolValue(util.IsUnset(request.EndBizdate)) {
		body["EndBizdate"] = request.EndBizdate
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeName)) {
		body["NodeName"] = request.NodeName
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramType)) {
		body["ProgramType"] = request.ProgramType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInstances"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListInstances(request *ListInstancesRequest) (_result *ListInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInstancesResponse{}
	_body, _err := client.ListInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListManualDagInstancesWithOptions(request *ListManualDagInstancesRequest, runtime *util.RuntimeOptions) (_result *ListManualDagInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DagId)) {
		body["DagId"] = request.DagId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListManualDagInstances"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListManualDagInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListManualDagInstances(request *ListManualDagInstancesRequest) (_result *ListManualDagInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListManualDagInstancesResponse{}
	_body, _err := client.ListManualDagInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMetaDBWithOptions(request *ListMetaDBRequest, runtime *util.RuntimeOptions) (_result *ListMetaDBResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMetaDB"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMetaDBResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMetaDB(request *ListMetaDBRequest) (_result *ListMetaDBResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMetaDBResponse{}
	_body, _err := client.ListMetaDBWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListNodeIOWithOptions(request *ListNodeIORequest, runtime *util.RuntimeOptions) (_result *ListNodeIOResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IoType)) {
		body["IoType"] = request.IoType
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNodeIO"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNodeIOResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListNodeIO(request *ListNodeIORequest) (_result *ListNodeIOResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNodeIOResponse{}
	_body, _err := client.ListNodeIOWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListNodeInputOrOutputWithOptions(request *ListNodeInputOrOutputRequest, runtime *util.RuntimeOptions) (_result *ListNodeInputOrOutputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IoType)) {
		body["IoType"] = request.IoType
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNodeInputOrOutput"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNodeInputOrOutputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListNodeInputOrOutput(request *ListNodeInputOrOutputRequest) (_result *ListNodeInputOrOutputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNodeInputOrOutputResponse{}
	_body, _err := client.ListNodeInputOrOutputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListNodesWithOptions(request *ListNodesRequest, runtime *util.RuntimeOptions) (_result *ListNodesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizName)) {
		body["BizName"] = request.BizName
	}

	if !tea.BoolValue(util.IsUnset(request.NodeName)) {
		body["NodeName"] = request.NodeName
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProgramType)) {
		body["ProgramType"] = request.ProgramType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNodes"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListNodes(request *ListNodesRequest) (_result *ListNodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNodesResponse{}
	_body, _err := client.ListNodesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListNodesByBaselineWithOptions(request *ListNodesByBaselineRequest, runtime *util.RuntimeOptions) (_result *ListNodesByBaselineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BaselineId)) {
		body["BaselineId"] = request.BaselineId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNodesByBaseline"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNodesByBaselineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListNodesByBaseline(request *ListNodesByBaselineRequest) (_result *ListNodesByBaselineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNodesByBaselineResponse{}
	_body, _err := client.ListNodesByBaselineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListNodesByOutputWithOptions(request *ListNodesByOutputRequest, runtime *util.RuntimeOptions) (_result *ListNodesByOutputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Outputs)) {
		body["Outputs"] = request.Outputs
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNodesByOutput"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNodesByOutputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListNodesByOutput(request *ListNodesByOutputRequest) (_result *ListNodesByOutputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNodesByOutputResponse{}
	_body, _err := client.ListNodesByOutputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPermissionApplyOrdersWithOptions(request *ListPermissionApplyOrdersRequest, runtime *util.RuntimeOptions) (_result *ListPermissionApplyOrdersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EngineType)) {
		query["EngineType"] = request.EngineType
	}

	if !tea.BoolValue(util.IsUnset(request.FlowStatus)) {
		query["FlowStatus"] = request.FlowStatus
	}

	if !tea.BoolValue(util.IsUnset(request.MaxComputeProjectName)) {
		query["MaxComputeProjectName"] = request.MaxComputeProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryType)) {
		query["QueryType"] = request.QueryType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPermissionApplyOrders"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPermissionApplyOrdersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPermissionApplyOrders(request *ListPermissionApplyOrdersRequest) (_result *ListPermissionApplyOrdersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPermissionApplyOrdersResponse{}
	_body, _err := client.ListPermissionApplyOrdersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListProgramTypeCountWithOptions(request *ListProgramTypeCountRequest, runtime *util.RuntimeOptions) (_result *ListProgramTypeCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProgramTypeCount"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProgramTypeCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListProgramTypeCount(request *ListProgramTypeCountRequest) (_result *ListProgramTypeCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProgramTypeCountResponse{}
	_body, _err := client.ListProgramTypeCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListProjectIdsWithOptions(request *ListProjectIdsRequest, runtime *util.RuntimeOptions) (_result *ListProjectIdsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjectIds"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectIdsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListProjectIds(request *ListProjectIdsRequest) (_result *ListProjectIdsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProjectIdsResponse{}
	_body, _err := client.ListProjectIdsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListProjectMembersWithOptions(request *ListProjectMembersRequest, runtime *util.RuntimeOptions) (_result *ListProjectMembersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjectMembers"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListProjectMembers(request *ListProjectMembersRequest) (_result *ListProjectMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProjectMembersResponse{}
	_body, _err := client.ListProjectMembersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListProjectRolesWithOptions(request *ListProjectRolesRequest, runtime *util.RuntimeOptions) (_result *ListProjectRolesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjectRoles"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectRolesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListProjectRoles(request *ListProjectRolesRequest) (_result *ListProjectRolesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProjectRolesResponse{}
	_body, _err := client.ListProjectRolesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListProjectsWithOptions(request *ListProjectsRequest, runtime *util.RuntimeOptions) (_result *ListProjectsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjects"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListProjects(request *ListProjectsRequest) (_result *ListProjectsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProjectsResponse{}
	_body, _err := client.ListProjectsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListQualityResultsByEntityWithOptions(request *ListQualityResultsByEntityRequest, runtime *util.RuntimeOptions) (_result *ListQualityResultsByEntityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		body["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		body["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		body["StartDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListQualityResultsByEntity"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListQualityResultsByEntityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListQualityResultsByEntity(request *ListQualityResultsByEntityRequest) (_result *ListQualityResultsByEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListQualityResultsByEntityResponse{}
	_body, _err := client.ListQualityResultsByEntityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListQualityResultsByRuleWithOptions(request *ListQualityResultsByRuleRequest, runtime *util.RuntimeOptions) (_result *ListQualityResultsByRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		body["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		body["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		body["StartDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListQualityResultsByRule"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListQualityResultsByRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListQualityResultsByRule(request *ListQualityResultsByRuleRequest) (_result *ListQualityResultsByRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListQualityResultsByRuleResponse{}
	_body, _err := client.ListQualityResultsByRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListQualityRulesWithOptions(request *ListQualityRulesRequest, runtime *util.RuntimeOptions) (_result *ListQualityRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		body["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListQualityRules"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListQualityRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListQualityRules(request *ListQualityRulesRequest) (_result *ListQualityRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListQualityRulesResponse{}
	_body, _err := client.ListQualityRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRefDISyncTasksWithOptions(request *ListRefDISyncTasksRequest, runtime *util.RuntimeOptions) (_result *ListRefDISyncTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasourceName)) {
		query["DatasourceName"] = request.DatasourceName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RefType)) {
		query["RefType"] = request.RefType
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRefDISyncTasks"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRefDISyncTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRefDISyncTasks(request *ListRefDISyncTasksRequest) (_result *ListRefDISyncTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRefDISyncTasksResponse{}
	_body, _err := client.ListRefDISyncTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRemindsWithOptions(request *ListRemindsRequest, runtime *util.RuntimeOptions) (_result *ListRemindsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertTarget)) {
		body["AlertTarget"] = request.AlertTarget
	}

	if !tea.BoolValue(util.IsUnset(request.Founder)) {
		body["Founder"] = request.Founder
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RemindTypes)) {
		body["RemindTypes"] = request.RemindTypes
	}

	if !tea.BoolValue(util.IsUnset(request.SearchText)) {
		body["SearchText"] = request.SearchText
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListReminds"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRemindsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListReminds(request *ListRemindsRequest) (_result *ListRemindsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRemindsResponse{}
	_body, _err := client.ListRemindsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListResourceGroupsWithOptions(request *ListResourceGroupsRequest, runtime *util.RuntimeOptions) (_result *ListResourceGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizExtKey)) {
		query["BizExtKey"] = request.BizExtKey
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupType)) {
		query["ResourceGroupType"] = request.ResourceGroupType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListResourceGroups"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListResourceGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListResourceGroups(request *ListResourceGroupsRequest) (_result *ListResourceGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListResourceGroupsResponse{}
	_body, _err := client.ListResourceGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSuccessInstanceAmountWithOptions(request *ListSuccessInstanceAmountRequest, runtime *util.RuntimeOptions) (_result *ListSuccessInstanceAmountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSuccessInstanceAmount"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSuccessInstanceAmountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSuccessInstanceAmount(request *ListSuccessInstanceAmountRequest) (_result *ListSuccessInstanceAmountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSuccessInstanceAmountResponse{}
	_body, _err := client.ListSuccessInstanceAmountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTableLevelWithOptions(request *ListTableLevelRequest, runtime *util.RuntimeOptions) (_result *ListTableLevelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTableLevel"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTableLevelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTableLevel(request *ListTableLevelRequest) (_result *ListTableLevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTableLevelResponse{}
	_body, _err := client.ListTableLevelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTableThemeWithOptions(request *ListTableThemeRequest, runtime *util.RuntimeOptions) (_result *ListTableThemeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTableTheme"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTableThemeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTableTheme(request *ListTableThemeRequest) (_result *ListTableThemeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTableThemeResponse{}
	_body, _err := client.ListTableThemeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTopicsWithOptions(request *ListTopicsRequest, runtime *util.RuntimeOptions) (_result *ListTopicsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		body["BeginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TopicStatuses)) {
		body["TopicStatuses"] = request.TopicStatuses
	}

	if !tea.BoolValue(util.IsUnset(request.TopicTypes)) {
		body["TopicTypes"] = request.TopicTypes
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTopics"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTopicsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTopics(request *ListTopicsRequest) (_result *ListTopicsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTopicsResponse{}
	_body, _err := client.ListTopicsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PublishDataServiceApiWithOptions(request *PublishDataServiceApiRequest, runtime *util.RuntimeOptions) (_result *PublishDataServiceApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		body["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PublishDataServiceApi"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PublishDataServiceApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PublishDataServiceApi(request *PublishDataServiceApiRequest) (_result *PublishDataServiceApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PublishDataServiceApiResponse{}
	_body, _err := client.PublishDataServiceApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDISyncTaskConfigProcessResultWithOptions(request *QueryDISyncTaskConfigProcessResultRequest, runtime *util.RuntimeOptions) (_result *QueryDISyncTaskConfigProcessResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AsyncProcessId)) {
		query["AsyncProcessId"] = request.AsyncProcessId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDISyncTaskConfigProcessResult"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDISyncTaskConfigProcessResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDISyncTaskConfigProcessResult(request *QueryDISyncTaskConfigProcessResultRequest) (_result *QueryDISyncTaskConfigProcessResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDISyncTaskConfigProcessResultResponse{}
	_body, _err := client.QueryDISyncTaskConfigProcessResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryPublicModelEngineWithOptions(request *QueryPublicModelEngineRequest, runtime *util.RuntimeOptions) (_result *QueryPublicModelEngineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Text)) {
		body["Text"] = request.Text
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPublicModelEngine"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPublicModelEngineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryPublicModelEngine(request *QueryPublicModelEngineRequest) (_result *QueryPublicModelEngineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPublicModelEngineResponse{}
	_body, _err := client.QueryPublicModelEngineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveProjectMemberFromRoleWithOptions(request *RemoveProjectMemberFromRoleRequest, runtime *util.RuntimeOptions) (_result *RemoveProjectMemberFromRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleCode)) {
		query["RoleCode"] = request.RoleCode
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveProjectMemberFromRole"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveProjectMemberFromRoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveProjectMemberFromRole(request *RemoveProjectMemberFromRoleRequest) (_result *RemoveProjectMemberFromRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveProjectMemberFromRoleResponse{}
	_body, _err := client.RemoveProjectMemberFromRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestartInstanceWithOptions(request *RestartInstanceRequest, runtime *util.RuntimeOptions) (_result *RestartInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RestartInstance"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RestartInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestartInstance(request *RestartInstanceRequest) (_result *RestartInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestartInstanceResponse{}
	_body, _err := client.RestartInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResumeInstanceWithOptions(request *ResumeInstanceRequest, runtime *util.RuntimeOptions) (_result *ResumeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ResumeInstance"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResumeInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResumeInstance(request *ResumeInstanceRequest) (_result *ResumeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeInstanceResponse{}
	_body, _err := client.ResumeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeColumnPermissionWithOptions(request *RevokeColumnPermissionRequest, runtime *util.RuntimeOptions) (_result *RevokeColumnPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Columns)) {
		query["Columns"] = request.Columns
	}

	if !tea.BoolValue(util.IsUnset(request.MaxComputeProjectName)) {
		query["MaxComputeProjectName"] = request.MaxComputeProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.RevokeUserId)) {
		query["RevokeUserId"] = request.RevokeUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RevokeUserName)) {
		query["RevokeUserName"] = request.RevokeUserName
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokeColumnPermission"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RevokeColumnPermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeColumnPermission(request *RevokeColumnPermissionRequest) (_result *RevokeColumnPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeColumnPermissionResponse{}
	_body, _err := client.RevokeColumnPermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeTablePermissionWithOptions(request *RevokeTablePermissionRequest, runtime *util.RuntimeOptions) (_result *RevokeTablePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Actions)) {
		query["Actions"] = request.Actions
	}

	if !tea.BoolValue(util.IsUnset(request.MaxComputeProjectName)) {
		query["MaxComputeProjectName"] = request.MaxComputeProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.RevokeUserId)) {
		query["RevokeUserId"] = request.RevokeUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RevokeUserName)) {
		query["RevokeUserName"] = request.RevokeUserName
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		query["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokeTablePermission"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RevokeTablePermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeTablePermission(request *RevokeTablePermissionRequest) (_result *RevokeTablePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeTablePermissionResponse{}
	_body, _err := client.RevokeTablePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunCycleDagNodesWithOptions(request *RunCycleDagNodesRequest, runtime *util.RuntimeOptions) (_result *RunCycleDagNodesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizBeginTime)) {
		body["BizBeginTime"] = request.BizBeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.BizEndTime)) {
		body["BizEndTime"] = request.BizEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndBizDate)) {
		body["EndBizDate"] = request.EndBizDate
	}

	if !tea.BoolValue(util.IsUnset(request.ExcludeNodeIds)) {
		body["ExcludeNodeIds"] = request.ExcludeNodeIds
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeNodeIds)) {
		body["IncludeNodeIds"] = request.IncludeNodeIds
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NodeParams)) {
		body["NodeParams"] = request.NodeParams
	}

	if !tea.BoolValue(util.IsUnset(request.Parallelism)) {
		body["Parallelism"] = request.Parallelism
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.RootNodeId)) {
		body["RootNodeId"] = request.RootNodeId
	}

	if !tea.BoolValue(util.IsUnset(request.StartBizDate)) {
		body["StartBizDate"] = request.StartBizDate
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunCycleDagNodes"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunCycleDagNodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunCycleDagNodes(request *RunCycleDagNodesRequest) (_result *RunCycleDagNodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunCycleDagNodesResponse{}
	_body, _err := client.RunCycleDagNodesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunManualDagNodesWithOptions(request *RunManualDagNodesRequest, runtime *util.RuntimeOptions) (_result *RunManualDagNodesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizDate)) {
		body["BizDate"] = request.BizDate
	}

	if !tea.BoolValue(util.IsUnset(request.DagParameters)) {
		body["DagParameters"] = request.DagParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ExcludeNodeIds)) {
		body["ExcludeNodeIds"] = request.ExcludeNodeIds
	}

	if !tea.BoolValue(util.IsUnset(request.FlowName)) {
		body["FlowName"] = request.FlowName
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeNodeIds)) {
		body["IncludeNodeIds"] = request.IncludeNodeIds
	}

	if !tea.BoolValue(util.IsUnset(request.NodeParameters)) {
		body["NodeParameters"] = request.NodeParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunManualDagNodes"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunManualDagNodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunManualDagNodes(request *RunManualDagNodesRequest) (_result *RunManualDagNodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunManualDagNodesResponse{}
	_body, _err := client.RunManualDagNodesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunSmokeTestWithOptions(request *RunSmokeTestRequest, runtime *util.RuntimeOptions) (_result *RunSmokeTestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizdate)) {
		body["Bizdate"] = request.Bizdate
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeParams)) {
		body["NodeParams"] = request.NodeParams
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunSmokeTest"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunSmokeTestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunSmokeTest(request *RunSmokeTestRequest) (_result *RunSmokeTestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunSmokeTestResponse{}
	_body, _err := client.RunSmokeTestWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunTriggerNodeWithOptions(request *RunTriggerNodeRequest, runtime *util.RuntimeOptions) (_result *RunTriggerNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.BizDate)) {
		body["BizDate"] = request.BizDate
	}

	if !tea.BoolValue(util.IsUnset(request.CycleTime)) {
		body["CycleTime"] = request.CycleTime
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunTriggerNode"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunTriggerNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunTriggerNode(request *RunTriggerNodeRequest) (_result *RunTriggerNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunTriggerNodeResponse{}
	_body, _err := client.RunTriggerNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ScanSensitiveDataWithOptions(request *ScanSensitiveDataRequest, runtime *util.RuntimeOptions) (_result *ScanSensitiveDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ScanSensitiveData"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ScanSensitiveDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ScanSensitiveData(request *ScanSensitiveDataRequest) (_result *ScanSensitiveDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ScanSensitiveDataResponse{}
	_body, _err := client.ScanSensitiveDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchMetaTablesWithOptions(request *SearchMetaTablesRequest, runtime *util.RuntimeOptions) (_result *SearchMetaTablesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppGuid)) {
		query["AppGuid"] = request.AppGuid
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.EntityType)) {
		query["EntityType"] = request.EntityType
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMetaTables"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMetaTablesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchMetaTables(request *SearchMetaTablesRequest) (_result *SearchMetaTablesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMetaTablesResponse{}
	_body, _err := client.SearchMetaTablesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchNodesByOutputWithOptions(request *SearchNodesByOutputRequest, runtime *util.RuntimeOptions) (_result *SearchNodesByOutputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Outputs)) {
		body["Outputs"] = request.Outputs
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchNodesByOutput"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchNodesByOutputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchNodesByOutput(request *SearchNodesByOutputRequest) (_result *SearchNodesByOutputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchNodesByOutputResponse{}
	_body, _err := client.SearchNodesByOutputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetDataSourceShareWithOptions(request *SetDataSourceShareRequest, runtime *util.RuntimeOptions) (_result *SetDataSourceShareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasourceName)) {
		query["DatasourceName"] = request.DatasourceName
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectPermissions)) {
		query["ProjectPermissions"] = request.ProjectPermissions
	}

	if !tea.BoolValue(util.IsUnset(request.UserPermissions)) {
		query["UserPermissions"] = request.UserPermissions
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDataSourceShare"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDataSourceShareResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetDataSourceShare(request *SetDataSourceShareRequest) (_result *SetDataSourceShareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDataSourceShareResponse{}
	_body, _err := client.SetDataSourceShareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetSuccessInstanceWithOptions(request *SetSuccessInstanceRequest, runtime *util.RuntimeOptions) (_result *SetSuccessInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SetSuccessInstance"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetSuccessInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetSuccessInstance(request *SetSuccessInstanceRequest) (_result *SetSuccessInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetSuccessInstanceResponse{}
	_body, _err := client.SetSuccessInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartDISyncInstanceWithOptions(request *StartDISyncInstanceRequest, runtime *util.RuntimeOptions) (_result *StartDISyncInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.StartParam)) {
		query["StartParam"] = request.StartParam
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartDISyncInstance"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartDISyncInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartDISyncInstance(request *StartDISyncInstanceRequest) (_result *StartDISyncInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartDISyncInstanceResponse{}
	_body, _err := client.StartDISyncInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartMigrationWithOptions(request *StartMigrationRequest, runtime *util.RuntimeOptions) (_result *StartMigrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MigrationId)) {
		body["MigrationId"] = request.MigrationId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartMigration"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartMigrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartMigration(request *StartMigrationRequest) (_result *StartMigrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartMigrationResponse{}
	_body, _err := client.StartMigrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopDISyncInstanceWithOptions(request *StopDISyncInstanceRequest, runtime *util.RuntimeOptions) (_result *StopDISyncInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopDISyncInstance"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopDISyncInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopDISyncInstance(request *StopDISyncInstanceRequest) (_result *StopDISyncInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopDISyncInstanceResponse{}
	_body, _err := client.StopDISyncInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopInstanceWithOptions(request *StopInstanceRequest, runtime *util.RuntimeOptions) (_result *StopInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StopInstance"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopInstance(request *StopInstanceRequest) (_result *StopInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopInstanceResponse{}
	_body, _err := client.StopInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitFileWithOptions(request *SubmitFileRequest, runtime *util.RuntimeOptions) (_result *SubmitFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitFile"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitFile(request *SubmitFileRequest) (_result *SubmitFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitFileResponse{}
	_body, _err := client.SubmitFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SuspendInstanceWithOptions(request *SuspendInstanceRequest, runtime *util.RuntimeOptions) (_result *SuspendInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SuspendInstance"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SuspendInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SuspendInstance(request *SuspendInstanceRequest) (_result *SuspendInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SuspendInstanceResponse{}
	_body, _err := client.SuspendInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TerminateDISyncInstanceWithOptions(request *TerminateDISyncInstanceRequest, runtime *util.RuntimeOptions) (_result *TerminateDISyncInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TerminateDISyncInstance"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TerminateDISyncInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TerminateDISyncInstance(request *TerminateDISyncInstanceRequest) (_result *TerminateDISyncInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TerminateDISyncInstanceResponse{}
	_body, _err := client.TerminateDISyncInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TestNetworkConnectionWithOptions(request *TestNetworkConnectionRequest, runtime *util.RuntimeOptions) (_result *TestNetworkConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasourceName)) {
		query["DatasourceName"] = request.DatasourceName
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroup)) {
		query["ResourceGroup"] = request.ResourceGroup
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TestNetworkConnection"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TestNetworkConnectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TestNetworkConnection(request *TestNetworkConnectionRequest) (_result *TestNetworkConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TestNetworkConnectionResponse{}
	_body, _err := client.TestNetworkConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TopTenElapsedTimeInstanceWithOptions(request *TopTenElapsedTimeInstanceRequest, runtime *util.RuntimeOptions) (_result *TopTenElapsedTimeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("TopTenElapsedTimeInstance"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TopTenElapsedTimeInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TopTenElapsedTimeInstance(request *TopTenElapsedTimeInstanceRequest) (_result *TopTenElapsedTimeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TopTenElapsedTimeInstanceResponse{}
	_body, _err := client.TopTenElapsedTimeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TopTenErrorTimesInstanceWithOptions(request *TopTenErrorTimesInstanceRequest, runtime *util.RuntimeOptions) (_result *TopTenErrorTimesInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("TopTenErrorTimesInstance"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TopTenErrorTimesInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TopTenErrorTimesInstance(request *TopTenErrorTimesInstanceRequest) (_result *TopTenErrorTimesInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TopTenErrorTimesInstanceResponse{}
	_body, _err := client.TopTenErrorTimesInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateBusinessWithOptions(request *UpdateBusinessRequest, runtime *util.RuntimeOptions) (_result *UpdateBusinessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessId)) {
		body["BusinessId"] = request.BusinessId
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessName)) {
		body["BusinessName"] = request.BusinessName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateBusiness"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateBusinessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateBusiness(request *UpdateBusinessRequest) (_result *UpdateBusinessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateBusinessResponse{}
	_body, _err := client.UpdateBusinessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateConnectionWithOptions(request *UpdateConnectionRequest, runtime *util.RuntimeOptions) (_result *UpdateConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConnectionId)) {
		query["ConnectionId"] = request.ConnectionId
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateConnection"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateConnectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateConnection(request *UpdateConnectionRequest) (_result *UpdateConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateConnectionResponse{}
	_body, _err := client.UpdateConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDIProjectConfigWithOptions(request *UpdateDIProjectConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateDIProjectConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationType)) {
		query["DestinationType"] = request.DestinationType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectConfig)) {
		query["ProjectConfig"] = request.ProjectConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDIProjectConfig"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDIProjectConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDIProjectConfig(request *UpdateDIProjectConfigRequest) (_result *UpdateDIProjectConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDIProjectConfigResponse{}
	_body, _err := client.UpdateDIProjectConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDISyncTaskWithOptions(request *UpdateDISyncTaskRequest, runtime *util.RuntimeOptions) (_result *UpdateDISyncTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskContent)) {
		query["TaskContent"] = request.TaskContent
	}

	if !tea.BoolValue(util.IsUnset(request.TaskParam)) {
		query["TaskParam"] = request.TaskParam
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDISyncTask"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDISyncTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDISyncTask(request *UpdateDISyncTaskRequest) (_result *UpdateDISyncTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDISyncTaskResponse{}
	_body, _err := client.UpdateDISyncTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDataServiceApiWithOptions(request *UpdateDataServiceApiRequest, runtime *util.RuntimeOptions) (_result *UpdateDataServiceApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiDescription)) {
		body["ApiDescription"] = request.ApiDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		body["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiPath)) {
		body["ApiPath"] = request.ApiPath
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Protocols)) {
		body["Protocols"] = request.Protocols
	}

	if !tea.BoolValue(util.IsUnset(request.RegistrationDetails)) {
		body["RegistrationDetails"] = request.RegistrationDetails
	}

	if !tea.BoolValue(util.IsUnset(request.RequestMethod)) {
		body["RequestMethod"] = request.RequestMethod
	}

	if !tea.BoolValue(util.IsUnset(request.ResponseContentType)) {
		body["ResponseContentType"] = request.ResponseContentType
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptDetails)) {
		body["ScriptDetails"] = request.ScriptDetails
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		body["Timeout"] = request.Timeout
	}

	if !tea.BoolValue(util.IsUnset(request.VisibleRange)) {
		body["VisibleRange"] = request.VisibleRange
	}

	if !tea.BoolValue(util.IsUnset(request.WizardDetails)) {
		body["WizardDetails"] = request.WizardDetails
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDataServiceApi"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDataServiceApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDataServiceApi(request *UpdateDataServiceApiRequest) (_result *UpdateDataServiceApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDataServiceApiResponse{}
	_body, _err := client.UpdateDataServiceApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDataSourceWithOptions(request *UpdateDataSourceRequest, runtime *util.RuntimeOptions) (_result *UpdateDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDataSource"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDataSource(request *UpdateDataSourceRequest) (_result *UpdateDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDataSourceResponse{}
	_body, _err := client.UpdateDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateFileWithOptions(request *UpdateFileRequest, runtime *util.RuntimeOptions) (_result *UpdateFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdvancedSettings)) {
		body["AdvancedSettings"] = request.AdvancedSettings
	}

	if !tea.BoolValue(util.IsUnset(request.AutoParsing)) {
		body["AutoParsing"] = request.AutoParsing
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRerunIntervalMillis)) {
		body["AutoRerunIntervalMillis"] = request.AutoRerunIntervalMillis
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRerunTimes)) {
		body["AutoRerunTimes"] = request.AutoRerunTimes
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectionName)) {
		body["ConnectionName"] = request.ConnectionName
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.CronExpress)) {
		body["CronExpress"] = request.CronExpress
	}

	if !tea.BoolValue(util.IsUnset(request.CycleType)) {
		body["CycleType"] = request.CycleType
	}

	if !tea.BoolValue(util.IsUnset(request.DependentNodeIdList)) {
		body["DependentNodeIdList"] = request.DependentNodeIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DependentType)) {
		body["DependentType"] = request.DependentType
	}

	if !tea.BoolValue(util.IsUnset(request.EndEffectDate)) {
		body["EndEffectDate"] = request.EndEffectDate
	}

	if !tea.BoolValue(util.IsUnset(request.FileDescription)) {
		body["FileDescription"] = request.FileDescription
	}

	if !tea.BoolValue(util.IsUnset(request.FileFolderPath)) {
		body["FileFolderPath"] = request.FileFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		body["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.InputList)) {
		body["InputList"] = request.InputList
	}

	if !tea.BoolValue(util.IsUnset(request.OutputList)) {
		body["OutputList"] = request.OutputList
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.ParaValue)) {
		body["ParaValue"] = request.ParaValue
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.RerunMode)) {
		body["RerunMode"] = request.RerunMode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupIdentifier)) {
		body["ResourceGroupIdentifier"] = request.ResourceGroupIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.SchedulerType)) {
		body["SchedulerType"] = request.SchedulerType
	}

	if !tea.BoolValue(util.IsUnset(request.StartEffectDate)) {
		body["StartEffectDate"] = request.StartEffectDate
	}

	if !tea.BoolValue(util.IsUnset(request.StartImmediately)) {
		body["StartImmediately"] = request.StartImmediately
	}

	if !tea.BoolValue(util.IsUnset(request.Stop)) {
		body["Stop"] = request.Stop
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateFile"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateFile(request *UpdateFileRequest) (_result *UpdateFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateFileResponse{}
	_body, _err := client.UpdateFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateFolderWithOptions(request *UpdateFolderRequest, runtime *util.RuntimeOptions) (_result *UpdateFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FolderId)) {
		body["FolderId"] = request.FolderId
	}

	if !tea.BoolValue(util.IsUnset(request.FolderName)) {
		body["FolderName"] = request.FolderName
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateFolder"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateFolderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateFolder(request *UpdateFolderRequest) (_result *UpdateFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateFolderResponse{}
	_body, _err := client.UpdateFolderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateIDEEventResultWithOptions(request *UpdateIDEEventResultRequest, runtime *util.RuntimeOptions) (_result *UpdateIDEEventResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckResult)) {
		body["CheckResult"] = request.CheckResult
	}

	if !tea.BoolValue(util.IsUnset(request.CheckResultTip)) {
		body["CheckResultTip"] = request.CheckResultTip
	}

	if !tea.BoolValue(util.IsUnset(request.ExtensionCode)) {
		body["ExtensionCode"] = request.ExtensionCode
	}

	if !tea.BoolValue(util.IsUnset(request.MessageId)) {
		body["MessageId"] = request.MessageId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateIDEEventResult"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateIDEEventResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateIDEEventResult(request *UpdateIDEEventResultRequest) (_result *UpdateIDEEventResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateIDEEventResultResponse{}
	_body, _err := client.UpdateIDEEventResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMetaCategoryWithOptions(request *UpdateMetaCategoryRequest, runtime *util.RuntimeOptions) (_result *UpdateMetaCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		body["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMetaCategory"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMetaCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMetaCategory(request *UpdateMetaCategoryRequest) (_result *UpdateMetaCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMetaCategoryResponse{}
	_body, _err := client.UpdateMetaCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMetaTableWithOptions(request *UpdateMetaTableRequest, runtime *util.RuntimeOptions) (_result *UpdateMetaTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Caption)) {
		query["Caption"] = request.Caption
	}

	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		query["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.NewOwnerId)) {
		query["NewOwnerId"] = request.NewOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		query["TableGuid"] = request.TableGuid
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		query["Visibility"] = request.Visibility
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddedLabels)) {
		body["AddedLabels"] = request.AddedLabels
	}

	if !tea.BoolValue(util.IsUnset(request.RemovedLabels)) {
		body["RemovedLabels"] = request.RemovedLabels
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMetaTable"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMetaTableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMetaTable(request *UpdateMetaTableRequest) (_result *UpdateMetaTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMetaTableResponse{}
	_body, _err := client.UpdateMetaTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMetaTableIntroWikiWithOptions(request *UpdateMetaTableIntroWikiRequest, runtime *util.RuntimeOptions) (_result *UpdateMetaTableIntroWikiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		query["TableGuid"] = request.TableGuid
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMetaTableIntroWiki"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMetaTableIntroWikiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMetaTableIntroWiki(request *UpdateMetaTableIntroWikiRequest) (_result *UpdateMetaTableIntroWikiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMetaTableIntroWikiResponse{}
	_body, _err := client.UpdateMetaTableIntroWikiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateNodeOwnerWithOptions(request *UpdateNodeOwnerRequest, runtime *util.RuntimeOptions) (_result *UpdateNodeOwnerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateNodeOwner"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateNodeOwnerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateNodeOwner(request *UpdateNodeOwnerRequest) (_result *UpdateNodeOwnerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateNodeOwnerResponse{}
	_body, _err := client.UpdateNodeOwnerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateNodeRunModeWithOptions(request *UpdateNodeRunModeRequest, runtime *util.RuntimeOptions) (_result *UpdateNodeRunModeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.SchedulerType)) {
		body["SchedulerType"] = request.SchedulerType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateNodeRunMode"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateNodeRunModeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateNodeRunMode(request *UpdateNodeRunModeRequest) (_result *UpdateNodeRunModeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateNodeRunModeResponse{}
	_body, _err := client.UpdateNodeRunModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateQualityFollowerWithOptions(request *UpdateQualityFollowerRequest, runtime *util.RuntimeOptions) (_result *UpdateQualityFollowerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmMode)) {
		body["AlarmMode"] = request.AlarmMode
	}

	if !tea.BoolValue(util.IsUnset(request.Follower)) {
		body["Follower"] = request.Follower
	}

	if !tea.BoolValue(util.IsUnset(request.FollowerId)) {
		body["FollowerId"] = request.FollowerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateQualityFollower"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateQualityFollowerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateQualityFollower(request *UpdateQualityFollowerRequest) (_result *UpdateQualityFollowerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateQualityFollowerResponse{}
	_body, _err := client.UpdateQualityFollowerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateQualityRuleWithOptions(request *UpdateQualityRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateQualityRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BlockType)) {
		body["BlockType"] = request.BlockType
	}

	if !tea.BoolValue(util.IsUnset(request.Checker)) {
		body["Checker"] = request.Checker
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.CriticalThreshold)) {
		body["CriticalThreshold"] = request.CriticalThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		body["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.ExpectValue)) {
		body["ExpectValue"] = request.ExpectValue
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.MethodName)) {
		body["MethodName"] = request.MethodName
	}

	if !tea.BoolValue(util.IsUnset(request.OpenSwitch)) {
		body["OpenSwitch"] = request.OpenSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.Operator)) {
		body["Operator"] = request.Operator
	}

	if !tea.BoolValue(util.IsUnset(request.PredictType)) {
		body["PredictType"] = request.PredictType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.Property)) {
		body["Property"] = request.Property
	}

	if !tea.BoolValue(util.IsUnset(request.PropertyType)) {
		body["PropertyType"] = request.PropertyType
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		body["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleType)) {
		body["RuleType"] = request.RuleType
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Trend)) {
		body["Trend"] = request.Trend
	}

	if !tea.BoolValue(util.IsUnset(request.WarningThreshold)) {
		body["WarningThreshold"] = request.WarningThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.WhereCondition)) {
		body["WhereCondition"] = request.WhereCondition
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateQualityRule"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateQualityRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateQualityRule(request *UpdateQualityRuleRequest) (_result *UpdateQualityRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateQualityRuleResponse{}
	_body, _err := client.UpdateQualityRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateRemindWithOptions(request *UpdateRemindRequest, runtime *util.RuntimeOptions) (_result *UpdateRemindResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertInterval)) {
		body["AlertInterval"] = request.AlertInterval
	}

	if !tea.BoolValue(util.IsUnset(request.AlertMethods)) {
		body["AlertMethods"] = request.AlertMethods
	}

	if !tea.BoolValue(util.IsUnset(request.AlertTargets)) {
		body["AlertTargets"] = request.AlertTargets
	}

	if !tea.BoolValue(util.IsUnset(request.AlertUnit)) {
		body["AlertUnit"] = request.AlertUnit
	}

	if !tea.BoolValue(util.IsUnset(request.BaselineIds)) {
		body["BaselineIds"] = request.BaselineIds
	}

	if !tea.BoolValue(util.IsUnset(request.BizProcessIds)) {
		body["BizProcessIds"] = request.BizProcessIds
	}

	if !tea.BoolValue(util.IsUnset(request.Detail)) {
		body["Detail"] = request.Detail
	}

	if !tea.BoolValue(util.IsUnset(request.DndEnd)) {
		body["DndEnd"] = request.DndEnd
	}

	if !tea.BoolValue(util.IsUnset(request.MaxAlertTimes)) {
		body["MaxAlertTimes"] = request.MaxAlertTimes
	}

	if !tea.BoolValue(util.IsUnset(request.NodeIds)) {
		body["NodeIds"] = request.NodeIds
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RemindId)) {
		body["RemindId"] = request.RemindId
	}

	if !tea.BoolValue(util.IsUnset(request.RemindName)) {
		body["RemindName"] = request.RemindName
	}

	if !tea.BoolValue(util.IsUnset(request.RemindType)) {
		body["RemindType"] = request.RemindType
	}

	if !tea.BoolValue(util.IsUnset(request.RemindUnit)) {
		body["RemindUnit"] = request.RemindUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RobotUrls)) {
		body["RobotUrls"] = request.RobotUrls
	}

	if !tea.BoolValue(util.IsUnset(request.UseFlag)) {
		body["UseFlag"] = request.UseFlag
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateRemind"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateRemindResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateRemind(request *UpdateRemindRequest) (_result *UpdateRemindResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateRemindResponse{}
	_body, _err := client.UpdateRemindWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateTableWithOptions(request *UpdateTableRequest, runtime *util.RuntimeOptions) (_result *UpdateTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppGuid)) {
		query["AppGuid"] = request.AppGuid
	}

	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		query["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.CreateIfNotExists)) {
		query["CreateIfNotExists"] = request.CreateIfNotExists
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalTableType)) {
		query["ExternalTableType"] = request.ExternalTableType
	}

	if !tea.BoolValue(util.IsUnset(request.HasPart)) {
		query["HasPart"] = request.HasPart
	}

	if !tea.BoolValue(util.IsUnset(request.IsView)) {
		query["IsView"] = request.IsView
	}

	if !tea.BoolValue(util.IsUnset(request.LifeCycle)) {
		query["LifeCycle"] = request.LifeCycle
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		query["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalLevelId)) {
		query["LogicalLevelId"] = request.LogicalLevelId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PhysicsLevelId)) {
		query["PhysicsLevelId"] = request.PhysicsLevelId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		query["Visibility"] = request.Visibility
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Columns)) {
		body["Columns"] = request.Columns
	}

	if !tea.BoolValue(util.IsUnset(request.Endpoint)) {
		body["Endpoint"] = request.Endpoint
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.Themes)) {
		body["Themes"] = request.Themes
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTable"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateTable(request *UpdateTableRequest) (_result *UpdateTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTableResponse{}
	_body, _err := client.UpdateTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateTableAddColumnWithOptions(request *UpdateTableAddColumnRequest, runtime *util.RuntimeOptions) (_result *UpdateTableAddColumnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		query["TableGuid"] = request.TableGuid
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Column)) {
		body["Column"] = request.Column
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTableAddColumn"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTableAddColumnResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateTableAddColumn(request *UpdateTableAddColumnRequest) (_result *UpdateTableAddColumnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTableAddColumnResponse{}
	_body, _err := client.UpdateTableAddColumnWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateTableLevelWithOptions(request *UpdateTableLevelRequest, runtime *util.RuntimeOptions) (_result *UpdateTableLevelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.LevelId)) {
		query["LevelId"] = request.LevelId
	}

	if !tea.BoolValue(util.IsUnset(request.LevelType)) {
		query["LevelType"] = request.LevelType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTableLevel"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTableLevelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateTableLevel(request *UpdateTableLevelRequest) (_result *UpdateTableLevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTableLevelResponse{}
	_body, _err := client.UpdateTableLevelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateTableModelInfoWithOptions(request *UpdateTableModelInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateTableModelInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FirstLevelThemeId)) {
		query["FirstLevelThemeId"] = request.FirstLevelThemeId
	}

	if !tea.BoolValue(util.IsUnset(request.LevelId)) {
		query["LevelId"] = request.LevelId
	}

	if !tea.BoolValue(util.IsUnset(request.LevelType)) {
		query["LevelType"] = request.LevelType
	}

	if !tea.BoolValue(util.IsUnset(request.SecondLevelThemeId)) {
		query["SecondLevelThemeId"] = request.SecondLevelThemeId
	}

	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		query["TableGuid"] = request.TableGuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTableModelInfo"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTableModelInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateTableModelInfo(request *UpdateTableModelInfoRequest) (_result *UpdateTableModelInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTableModelInfoResponse{}
	_body, _err := client.UpdateTableModelInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateTableThemeWithOptions(request *UpdateTableThemeRequest, runtime *util.RuntimeOptions) (_result *UpdateTableThemeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ThemeId)) {
		query["ThemeId"] = request.ThemeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTableTheme"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTableThemeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateTableTheme(request *UpdateTableThemeRequest) (_result *UpdateTableThemeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTableThemeResponse{}
	_body, _err := client.UpdateTableThemeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateUdfFileWithOptions(request *UpdateUdfFileRequest, runtime *util.RuntimeOptions) (_result *UpdateUdfFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClassName)) {
		body["ClassName"] = request.ClassName
	}

	if !tea.BoolValue(util.IsUnset(request.CmdDescription)) {
		body["CmdDescription"] = request.CmdDescription
	}

	if !tea.BoolValue(util.IsUnset(request.Example)) {
		body["Example"] = request.Example
	}

	if !tea.BoolValue(util.IsUnset(request.FileFolderPath)) {
		body["FileFolderPath"] = request.FileFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionType)) {
		body["FunctionType"] = request.FunctionType
	}

	if !tea.BoolValue(util.IsUnset(request.ParameterDescription)) {
		body["ParameterDescription"] = request.ParameterDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.Resources)) {
		body["Resources"] = request.Resources
	}

	if !tea.BoolValue(util.IsUnset(request.ReturnValue)) {
		body["ReturnValue"] = request.ReturnValue
	}

	if !tea.BoolValue(util.IsUnset(request.UdfDescription)) {
		body["UdfDescription"] = request.UdfDescription
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateUdfFile"),
		Version:     tea.String("2020-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateUdfFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateUdfFile(request *UpdateUdfFileRequest) (_result *UpdateUdfFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateUdfFileResponse{}
	_body, _err := client.UpdateUdfFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
