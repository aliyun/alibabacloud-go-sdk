// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	openplatform "github.com/alibabacloud-go/openplatform-20191219/v2/client"
	fileform "github.com/alibabacloud-go/tea-fileform/service"
	oss "github.com/alibabacloud-go/tea-oss-sdk/client"
	ossutil "github.com/alibabacloud-go/tea-oss-utils/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
	"io"
)

type Catalog struct {
	Comment            *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateTime         *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Id                 *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ModifyTime         *int64  `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ParentMetaEntityId *string `json:"ParentMetaEntityId,omitempty" xml:"ParentMetaEntityId,omitempty"`
	Type               *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s Catalog) String() string {
	return tea.Prettify(s)
}

func (s Catalog) GoString() string {
	return s.String()
}

func (s *Catalog) SetComment(v string) *Catalog {
	s.Comment = &v
	return s
}

func (s *Catalog) SetCreateTime(v int64) *Catalog {
	s.CreateTime = &v
	return s
}

func (s *Catalog) SetId(v string) *Catalog {
	s.Id = &v
	return s
}

func (s *Catalog) SetModifyTime(v int64) *Catalog {
	s.ModifyTime = &v
	return s
}

func (s *Catalog) SetName(v string) *Catalog {
	s.Name = &v
	return s
}

func (s *Catalog) SetParentMetaEntityId(v string) *Catalog {
	s.ParentMetaEntityId = &v
	return s
}

func (s *Catalog) SetType(v string) *Catalog {
	s.Type = &v
	return s
}

type Column struct {
	BusinessMetadata *ColumnBusinessMetadata `json:"BusinessMetadata,omitempty" xml:"BusinessMetadata,omitempty" type:"Struct"`
	// example:
	//
	// 字段1
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// false
	ForeignKey *bool `json:"ForeignKey,omitempty" xml:"ForeignKey,omitempty"`
	// example:
	//
	// maxcompute-column:123456::test_project:default:test_tbl:col1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// col1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// false
	PartitionKey *bool `json:"PartitionKey,omitempty" xml:"PartitionKey,omitempty"`
	// example:
	//
	// 1
	Position *int32 `json:"Position,omitempty" xml:"Position,omitempty"`
	// example:
	//
	// false
	PrimaryKey *bool `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
	// example:
	//
	// maxcompute-table:123456::test_project:default:test_tbl
	TableId *string `json:"TableId,omitempty" xml:"TableId,omitempty"`
	// example:
	//
	// bigint
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s Column) String() string {
	return tea.Prettify(s)
}

func (s Column) GoString() string {
	return s.String()
}

func (s *Column) SetBusinessMetadata(v *ColumnBusinessMetadata) *Column {
	s.BusinessMetadata = v
	return s
}

func (s *Column) SetComment(v string) *Column {
	s.Comment = &v
	return s
}

func (s *Column) SetForeignKey(v bool) *Column {
	s.ForeignKey = &v
	return s
}

func (s *Column) SetId(v string) *Column {
	s.Id = &v
	return s
}

func (s *Column) SetName(v string) *Column {
	s.Name = &v
	return s
}

func (s *Column) SetPartitionKey(v bool) *Column {
	s.PartitionKey = &v
	return s
}

func (s *Column) SetPosition(v int32) *Column {
	s.Position = &v
	return s
}

func (s *Column) SetPrimaryKey(v bool) *Column {
	s.PrimaryKey = &v
	return s
}

func (s *Column) SetTableId(v string) *Column {
	s.TableId = &v
	return s
}

func (s *Column) SetType(v string) *Column {
	s.Type = &v
	return s
}

type ColumnBusinessMetadata struct {
	// example:
	//
	// 字段1的业务描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ColumnBusinessMetadata) String() string {
	return tea.Prettify(s)
}

func (s ColumnBusinessMetadata) GoString() string {
	return s.String()
}

func (s *ColumnBusinessMetadata) SetDescription(v string) *ColumnBusinessMetadata {
	s.Description = &v
	return s
}

type CrawlerType struct {
	// example:
	//
	// Data Lake Formation
	DisplayName          *string                            `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	SupportedEntityTypes []*CrawlerTypeSupportedEntityTypes `json:"SupportedEntityTypes,omitempty" xml:"SupportedEntityTypes,omitempty" type:"Repeated"`
	// example:
	//
	// dlf
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CrawlerType) String() string {
	return tea.Prettify(s)
}

func (s CrawlerType) GoString() string {
	return s.String()
}

func (s *CrawlerType) SetDisplayName(v string) *CrawlerType {
	s.DisplayName = &v
	return s
}

func (s *CrawlerType) SetSupportedEntityTypes(v []*CrawlerTypeSupportedEntityTypes) *CrawlerType {
	s.SupportedEntityTypes = v
	return s
}

func (s *CrawlerType) SetType(v string) *CrawlerType {
	s.Type = &v
	return s
}

type CrawlerTypeSupportedEntityTypes struct {
	// example:
	//
	// 如对于maxcompute-schema类型，schema层级是否存在可选（是否开启三层模型）
	Optional *bool `json:"Optional,omitempty" xml:"Optional,omitempty"`
	// example:
	//
	// database
	ParentSubType *string `json:"ParentSubType,omitempty" xml:"ParentSubType,omitempty"`
	// example:
	//
	// table
	SubType *string `json:"SubType,omitempty" xml:"SubType,omitempty"`
	// example:
	//
	// dlf-table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CrawlerTypeSupportedEntityTypes) String() string {
	return tea.Prettify(s)
}

func (s CrawlerTypeSupportedEntityTypes) GoString() string {
	return s.String()
}

func (s *CrawlerTypeSupportedEntityTypes) SetOptional(v bool) *CrawlerTypeSupportedEntityTypes {
	s.Optional = &v
	return s
}

func (s *CrawlerTypeSupportedEntityTypes) SetParentSubType(v string) *CrawlerTypeSupportedEntityTypes {
	s.ParentSubType = &v
	return s
}

func (s *CrawlerTypeSupportedEntityTypes) SetSubType(v string) *CrawlerTypeSupportedEntityTypes {
	s.SubType = &v
	return s
}

func (s *CrawlerTypeSupportedEntityTypes) SetType(v string) *CrawlerTypeSupportedEntityTypes {
	s.Type = &v
	return s
}

type DataQualityEvaluationTask struct {
	// example:
	//
	// 201
	DataSourceId *int64 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// example:
	//
	// This is a daily run data quality evaluation plan.
	Description *string                           `json:"Description,omitempty" xml:"Description,omitempty"`
	Hooks       []*DataQualityEvaluationTaskHooks `json:"Hooks,omitempty" xml:"Hooks,omitempty" type:"Repeated"`
	// example:
	//
	// 10001
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 质量校验任务
	Name          *string                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	Notifications []*DataQualityEvaluationTaskNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// { "queue": "default", "sqlEngine": "SPARK_SQL" }
	RuntimeConf *string                          `json:"RuntimeConf,omitempty" xml:"RuntimeConf,omitempty"`
	Target      *DataQualityEvaluationTaskTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// example:
	//
	// 10
	TenantId *int64                            `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Trigger  *DataQualityEvaluationTaskTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s DataQualityEvaluationTask) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTask) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTask) SetDataSourceId(v int64) *DataQualityEvaluationTask {
	s.DataSourceId = &v
	return s
}

func (s *DataQualityEvaluationTask) SetDescription(v string) *DataQualityEvaluationTask {
	s.Description = &v
	return s
}

func (s *DataQualityEvaluationTask) SetHooks(v []*DataQualityEvaluationTaskHooks) *DataQualityEvaluationTask {
	s.Hooks = v
	return s
}

func (s *DataQualityEvaluationTask) SetId(v int64) *DataQualityEvaluationTask {
	s.Id = &v
	return s
}

func (s *DataQualityEvaluationTask) SetName(v string) *DataQualityEvaluationTask {
	s.Name = &v
	return s
}

func (s *DataQualityEvaluationTask) SetNotifications(v []*DataQualityEvaluationTaskNotifications) *DataQualityEvaluationTask {
	s.Notifications = v
	return s
}

func (s *DataQualityEvaluationTask) SetProjectId(v int64) *DataQualityEvaluationTask {
	s.ProjectId = &v
	return s
}

func (s *DataQualityEvaluationTask) SetRuntimeConf(v string) *DataQualityEvaluationTask {
	s.RuntimeConf = &v
	return s
}

func (s *DataQualityEvaluationTask) SetTarget(v *DataQualityEvaluationTaskTarget) *DataQualityEvaluationTask {
	s.Target = v
	return s
}

func (s *DataQualityEvaluationTask) SetTenantId(v int64) *DataQualityEvaluationTask {
	s.TenantId = &v
	return s
}

func (s *DataQualityEvaluationTask) SetTrigger(v *DataQualityEvaluationTaskTrigger) *DataQualityEvaluationTask {
	s.Trigger = v
	return s
}

type DataQualityEvaluationTaskHooks struct {
	// example:
	//
	// ${severity} == "High" AND ${status} == "Critical"
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// example:
	//
	// BlockTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DataQualityEvaluationTaskHooks) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskHooks) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskHooks) SetCondition(v string) *DataQualityEvaluationTaskHooks {
	s.Condition = &v
	return s
}

func (s *DataQualityEvaluationTaskHooks) SetType(v string) *DataQualityEvaluationTaskHooks {
	s.Type = &v
	return s
}

type DataQualityEvaluationTaskNotifications struct {
	// example:
	//
	// ${blockType} == "Strong"
	Condition     *string                                                `json:"Condition,omitempty" xml:"Condition,omitempty"`
	Notifications []*DataQualityEvaluationTaskNotificationsNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Repeated"`
}

func (s DataQualityEvaluationTaskNotifications) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskNotifications) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskNotifications) SetCondition(v string) *DataQualityEvaluationTaskNotifications {
	s.Condition = &v
	return s
}

func (s *DataQualityEvaluationTaskNotifications) SetNotifications(v []*DataQualityEvaluationTaskNotificationsNotifications) *DataQualityEvaluationTaskNotifications {
	s.Notifications = v
	return s
}

type DataQualityEvaluationTaskNotificationsNotifications struct {
	NotificationChannels  []*DataQualityEvaluationTaskNotificationsNotificationsNotificationChannels  `json:"NotificationChannels,omitempty" xml:"NotificationChannels,omitempty" type:"Repeated"`
	NotificationReceivers []*DataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers `json:"NotificationReceivers,omitempty" xml:"NotificationReceivers,omitempty" type:"Repeated"`
}

func (s DataQualityEvaluationTaskNotificationsNotifications) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskNotificationsNotifications) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskNotificationsNotifications) SetNotificationChannels(v []*DataQualityEvaluationTaskNotificationsNotificationsNotificationChannels) *DataQualityEvaluationTaskNotificationsNotifications {
	s.NotificationChannels = v
	return s
}

func (s *DataQualityEvaluationTaskNotificationsNotifications) SetNotificationReceivers(v []*DataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers) *DataQualityEvaluationTaskNotificationsNotifications {
	s.NotificationReceivers = v
	return s
}

type DataQualityEvaluationTaskNotificationsNotificationsNotificationChannels struct {
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
}

func (s DataQualityEvaluationTaskNotificationsNotificationsNotificationChannels) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskNotificationsNotificationsNotificationChannels) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskNotificationsNotificationsNotificationChannels) SetChannels(v []*string) *DataQualityEvaluationTaskNotificationsNotificationsNotificationChannels {
	s.Channels = v
	return s
}

type DataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers struct {
	// example:
	//
	// {"atAll":"true"}
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// AliUid
	ReceiverType   *string   `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s DataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers) SetExtension(v string) *DataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers {
	s.Extension = &v
	return s
}

func (s *DataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers) SetReceiverType(v string) *DataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *DataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers) SetReceiverValues(v []*string) *DataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers {
	s.ReceiverValues = v
	return s
}

type DataQualityEvaluationTaskTarget struct {
	// example:
	//
	// maxcompute
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// example:
	//
	// ds=$[yyyymmdd-1]
	PartitionSpec *string `json:"PartitionSpec,omitempty" xml:"PartitionSpec,omitempty"`
	// example:
	//
	// odps.unit_test.tb_unit_test
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	// example:
	//
	// Table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DataQualityEvaluationTaskTarget) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskTarget) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskTarget) SetDatabaseType(v string) *DataQualityEvaluationTaskTarget {
	s.DatabaseType = &v
	return s
}

func (s *DataQualityEvaluationTaskTarget) SetPartitionSpec(v string) *DataQualityEvaluationTaskTarget {
	s.PartitionSpec = &v
	return s
}

func (s *DataQualityEvaluationTaskTarget) SetTableGuid(v string) *DataQualityEvaluationTaskTarget {
	s.TableGuid = &v
	return s
}

func (s *DataQualityEvaluationTaskTarget) SetType(v string) *DataQualityEvaluationTaskTarget {
	s.Type = &v
	return s
}

type DataQualityEvaluationTaskTrigger struct {
	TaskIds []*int64 `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
	// example:
	//
	// ByScheduledTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DataQualityEvaluationTaskTrigger) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskTrigger) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskTrigger) SetTaskIds(v []*int64) *DataQualityEvaluationTaskTrigger {
	s.TaskIds = v
	return s
}

func (s *DataQualityEvaluationTaskTrigger) SetType(v string) *DataQualityEvaluationTaskTrigger {
	s.Type = &v
	return s
}

type DataQualityEvaluationTaskInstance struct {
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1710239005403
	FinishTime *int64 `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// example:
	//
	// 10001
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// Passed
	Status *string                                `json:"Status,omitempty" xml:"Status,omitempty"`
	Task   *DataQualityEvaluationTaskInstanceTask `json:"Task,omitempty" xml:"Task,omitempty" type:"Struct"`
}

func (s DataQualityEvaluationTaskInstance) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskInstance) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskInstance) SetCreateTime(v int64) *DataQualityEvaluationTaskInstance {
	s.CreateTime = &v
	return s
}

func (s *DataQualityEvaluationTaskInstance) SetFinishTime(v int64) *DataQualityEvaluationTaskInstance {
	s.FinishTime = &v
	return s
}

func (s *DataQualityEvaluationTaskInstance) SetId(v int64) *DataQualityEvaluationTaskInstance {
	s.Id = &v
	return s
}

func (s *DataQualityEvaluationTaskInstance) SetStatus(v string) *DataQualityEvaluationTaskInstance {
	s.Status = &v
	return s
}

func (s *DataQualityEvaluationTaskInstance) SetTask(v *DataQualityEvaluationTaskInstanceTask) *DataQualityEvaluationTaskInstance {
	s.Task = v
	return s
}

type DataQualityEvaluationTaskInstanceTask struct {
	// example:
	//
	// 201
	DataSourceId *int64                                        `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	Hooks        []*DataQualityEvaluationTaskInstanceTaskHooks `json:"Hooks,omitempty" xml:"Hooks,omitempty" type:"Repeated"`
	// example:
	//
	// 10001
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 质量校验任务
	Name          *string                                               `json:"Name,omitempty" xml:"Name,omitempty"`
	Notifications []*DataQualityEvaluationTaskInstanceTaskNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Repeated"`
	ProjectId     *int64                                                `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// { "queue": "default", "sqlEngine": "SPARK_SQL" }
	RuntimeConf *string                                       `json:"RuntimeConf,omitempty" xml:"RuntimeConf,omitempty"`
	Target      *DataQualityEvaluationTaskInstanceTaskTarget  `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	TenantId    *int64                                        `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Trigger     *DataQualityEvaluationTaskInstanceTaskTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s DataQualityEvaluationTaskInstanceTask) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskInstanceTask) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskInstanceTask) SetDataSourceId(v int64) *DataQualityEvaluationTaskInstanceTask {
	s.DataSourceId = &v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTask) SetHooks(v []*DataQualityEvaluationTaskInstanceTaskHooks) *DataQualityEvaluationTaskInstanceTask {
	s.Hooks = v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTask) SetId(v int64) *DataQualityEvaluationTaskInstanceTask {
	s.Id = &v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTask) SetName(v string) *DataQualityEvaluationTaskInstanceTask {
	s.Name = &v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTask) SetNotifications(v []*DataQualityEvaluationTaskInstanceTaskNotifications) *DataQualityEvaluationTaskInstanceTask {
	s.Notifications = v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTask) SetProjectId(v int64) *DataQualityEvaluationTaskInstanceTask {
	s.ProjectId = &v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTask) SetRuntimeConf(v string) *DataQualityEvaluationTaskInstanceTask {
	s.RuntimeConf = &v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTask) SetTarget(v *DataQualityEvaluationTaskInstanceTaskTarget) *DataQualityEvaluationTaskInstanceTask {
	s.Target = v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTask) SetTenantId(v int64) *DataQualityEvaluationTaskInstanceTask {
	s.TenantId = &v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTask) SetTrigger(v *DataQualityEvaluationTaskInstanceTaskTrigger) *DataQualityEvaluationTaskInstanceTask {
	s.Trigger = v
	return s
}

type DataQualityEvaluationTaskInstanceTaskHooks struct {
	// example:
	//
	// ${severity} == "High" AND ${status} == "Critical"
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// example:
	//
	// BlockTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DataQualityEvaluationTaskInstanceTaskHooks) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskInstanceTaskHooks) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskInstanceTaskHooks) SetCondition(v string) *DataQualityEvaluationTaskInstanceTaskHooks {
	s.Condition = &v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTaskHooks) SetType(v string) *DataQualityEvaluationTaskInstanceTaskHooks {
	s.Type = &v
	return s
}

type DataQualityEvaluationTaskInstanceTaskNotifications struct {
	// example:
	//
	// ${blockType} == "Strong"
	Condition     *string                                                            `json:"Condition,omitempty" xml:"Condition,omitempty"`
	Notifications []*DataQualityEvaluationTaskInstanceTaskNotificationsNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Repeated"`
}

func (s DataQualityEvaluationTaskInstanceTaskNotifications) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskInstanceTaskNotifications) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskInstanceTaskNotifications) SetCondition(v string) *DataQualityEvaluationTaskInstanceTaskNotifications {
	s.Condition = &v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTaskNotifications) SetNotifications(v []*DataQualityEvaluationTaskInstanceTaskNotificationsNotifications) *DataQualityEvaluationTaskInstanceTaskNotifications {
	s.Notifications = v
	return s
}

type DataQualityEvaluationTaskInstanceTaskNotificationsNotifications struct {
	NotificationChannels  []*DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels  `json:"NotificationChannels,omitempty" xml:"NotificationChannels,omitempty" type:"Repeated"`
	NotificationReceivers []*DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers `json:"NotificationReceivers,omitempty" xml:"NotificationReceivers,omitempty" type:"Repeated"`
}

func (s DataQualityEvaluationTaskInstanceTaskNotificationsNotifications) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskInstanceTaskNotificationsNotifications) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskInstanceTaskNotificationsNotifications) SetNotificationChannels(v []*DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels) *DataQualityEvaluationTaskInstanceTaskNotificationsNotifications {
	s.NotificationChannels = v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTaskNotificationsNotifications) SetNotificationReceivers(v []*DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers) *DataQualityEvaluationTaskInstanceTaskNotificationsNotifications {
	s.NotificationReceivers = v
	return s
}

type DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels struct {
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
}

func (s DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels) SetChannels(v []*string) *DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels {
	s.Channels = v
	return s
}

type DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers struct {
	// example:
	//
	// {"atAll":"true"}
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// AliUid
	ReceiverType   *string   `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers) SetExtension(v string) *DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers {
	s.Extension = &v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers) SetReceiverType(v string) *DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers) SetReceiverValues(v []*string) *DataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers {
	s.ReceiverValues = v
	return s
}

type DataQualityEvaluationTaskInstanceTaskTarget struct {
	// example:
	//
	// maxcompute
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// example:
	//
	// ds=$[yyyymmdd-1]
	PartitionSpec *string `json:"PartitionSpec,omitempty" xml:"PartitionSpec,omitempty"`
	// example:
	//
	// odps.unit_test.tb_unit_test
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	// example:
	//
	// Table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DataQualityEvaluationTaskInstanceTaskTarget) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskInstanceTaskTarget) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskInstanceTaskTarget) SetDatabaseType(v string) *DataQualityEvaluationTaskInstanceTaskTarget {
	s.DatabaseType = &v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTaskTarget) SetPartitionSpec(v string) *DataQualityEvaluationTaskInstanceTaskTarget {
	s.PartitionSpec = &v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTaskTarget) SetTableGuid(v string) *DataQualityEvaluationTaskInstanceTaskTarget {
	s.TableGuid = &v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTaskTarget) SetType(v string) *DataQualityEvaluationTaskInstanceTaskTarget {
	s.Type = &v
	return s
}

type DataQualityEvaluationTaskInstanceTaskTrigger struct {
	TaskIds []*int64 `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
	// example:
	//
	// ByScheduledTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DataQualityEvaluationTaskInstanceTaskTrigger) String() string {
	return tea.Prettify(s)
}

func (s DataQualityEvaluationTaskInstanceTaskTrigger) GoString() string {
	return s.String()
}

func (s *DataQualityEvaluationTaskInstanceTaskTrigger) SetTaskIds(v []*int64) *DataQualityEvaluationTaskInstanceTaskTrigger {
	s.TaskIds = v
	return s
}

func (s *DataQualityEvaluationTaskInstanceTaskTrigger) SetType(v string) *DataQualityEvaluationTaskInstanceTaskTrigger {
	s.Type = &v
	return s
}

type DataQualityResult struct {
	Details []*DataQualityResultDetails `json:"Details,omitempty" xml:"Details,omitempty" type:"Repeated"`
	// example:
	//
	// 10001
	Id   *int64                 `json:"Id,omitempty" xml:"Id,omitempty"`
	Rule *DataQualityResultRule `json:"Rule,omitempty" xml:"Rule,omitempty" type:"Struct"`
	// example:
	//
	// [   {     "gender": "male",     "_count": 100   }, {     "gender": "female",     "_count": 100   } ]
	Sample *string `json:"Sample,omitempty" xml:"Sample,omitempty"`
	// example:
	//
	// Passed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 20001
	TaskInstanceId *int64 `json:"TaskInstanceId,omitempty" xml:"TaskInstanceId,omitempty"`
}

func (s DataQualityResult) String() string {
	return tea.Prettify(s)
}

func (s DataQualityResult) GoString() string {
	return s.String()
}

func (s *DataQualityResult) SetDetails(v []*DataQualityResultDetails) *DataQualityResult {
	s.Details = v
	return s
}

func (s *DataQualityResult) SetId(v int64) *DataQualityResult {
	s.Id = &v
	return s
}

func (s *DataQualityResult) SetRule(v *DataQualityResultRule) *DataQualityResult {
	s.Rule = v
	return s
}

func (s *DataQualityResult) SetSample(v string) *DataQualityResult {
	s.Sample = &v
	return s
}

func (s *DataQualityResult) SetStatus(v string) *DataQualityResult {
	s.Status = &v
	return s
}

func (s *DataQualityResult) SetTaskInstanceId(v int64) *DataQualityResult {
	s.TaskInstanceId = &v
	return s
}

type DataQualityResultDetails struct {
	// example:
	//
	// 100.0
	CheckedValue *string `json:"CheckedValue,omitempty" xml:"CheckedValue,omitempty"`
	// example:
	//
	// 0.0
	ReferencedValue *string `json:"ReferencedValue,omitempty" xml:"ReferencedValue,omitempty"`
	// example:
	//
	// Passed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DataQualityResultDetails) String() string {
	return tea.Prettify(s)
}

func (s DataQualityResultDetails) GoString() string {
	return s.String()
}

func (s *DataQualityResultDetails) SetCheckedValue(v string) *DataQualityResultDetails {
	s.CheckedValue = &v
	return s
}

func (s *DataQualityResultDetails) SetReferencedValue(v string) *DataQualityResultDetails {
	s.ReferencedValue = &v
	return s
}

func (s *DataQualityResultDetails) SetStatus(v string) *DataQualityResultDetails {
	s.Status = &v
	return s
}

type DataQualityResultRule struct {
	CheckingConfig *DataQualityResultRuleCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	// example:
	//
	// this is a odps _sql task
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// true
	Enabled       *bool                                 `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	ErrorHandlers []*DataQualityResultRuleErrorHandlers `json:"ErrorHandlers,omitempty" xml:"ErrorHandlers,omitempty" type:"Repeated"`
	// example:
	//
	// 100001
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 表不能为空
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 100
	ProjectId      *int64                               `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SamplingConfig *DataQualityResultRuleSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	// example:
	//
	// High
	Severity *string                      `json:"Severity,omitempty" xml:"Severity,omitempty"`
	Target   *DataQualityResultRuleTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// example:
	//
	// SYSTEM:user_defined_sql
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	// example:
	//
	// 1
	TenantId *int64 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DataQualityResultRule) String() string {
	return tea.Prettify(s)
}

func (s DataQualityResultRule) GoString() string {
	return s.String()
}

func (s *DataQualityResultRule) SetCheckingConfig(v *DataQualityResultRuleCheckingConfig) *DataQualityResultRule {
	s.CheckingConfig = v
	return s
}

func (s *DataQualityResultRule) SetDescription(v string) *DataQualityResultRule {
	s.Description = &v
	return s
}

func (s *DataQualityResultRule) SetEnabled(v bool) *DataQualityResultRule {
	s.Enabled = &v
	return s
}

func (s *DataQualityResultRule) SetErrorHandlers(v []*DataQualityResultRuleErrorHandlers) *DataQualityResultRule {
	s.ErrorHandlers = v
	return s
}

func (s *DataQualityResultRule) SetId(v int64) *DataQualityResultRule {
	s.Id = &v
	return s
}

func (s *DataQualityResultRule) SetName(v string) *DataQualityResultRule {
	s.Name = &v
	return s
}

func (s *DataQualityResultRule) SetProjectId(v int64) *DataQualityResultRule {
	s.ProjectId = &v
	return s
}

func (s *DataQualityResultRule) SetSamplingConfig(v *DataQualityResultRuleSamplingConfig) *DataQualityResultRule {
	s.SamplingConfig = v
	return s
}

func (s *DataQualityResultRule) SetSeverity(v string) *DataQualityResultRule {
	s.Severity = &v
	return s
}

func (s *DataQualityResultRule) SetTarget(v *DataQualityResultRuleTarget) *DataQualityResultRule {
	s.Target = v
	return s
}

func (s *DataQualityResultRule) SetTemplateCode(v string) *DataQualityResultRule {
	s.TemplateCode = &v
	return s
}

func (s *DataQualityResultRule) SetTenantId(v int64) *DataQualityResultRule {
	s.TenantId = &v
	return s
}

type DataQualityResultRuleCheckingConfig struct {
	// example:
	//
	// { "bizdate": [ "-1", "-7", "-1m" ] }
	ReferencedSamplesFilter *string                                        `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	Thresholds              *DataQualityResultRuleCheckingConfigThresholds `json:"Thresholds,omitempty" xml:"Thresholds,omitempty" type:"Struct"`
	// example:
	//
	// Fixed
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DataQualityResultRuleCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s DataQualityResultRuleCheckingConfig) GoString() string {
	return s.String()
}

func (s *DataQualityResultRuleCheckingConfig) SetReferencedSamplesFilter(v string) *DataQualityResultRuleCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *DataQualityResultRuleCheckingConfig) SetThresholds(v *DataQualityResultRuleCheckingConfigThresholds) *DataQualityResultRuleCheckingConfig {
	s.Thresholds = v
	return s
}

func (s *DataQualityResultRuleCheckingConfig) SetType(v string) *DataQualityResultRuleCheckingConfig {
	s.Type = &v
	return s
}

type DataQualityResultRuleCheckingConfigThresholds struct {
	Critical *DataQualityResultRuleCheckingConfigThresholdsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	Expected *DataQualityResultRuleCheckingConfigThresholdsExpected `json:"Expected,omitempty" xml:"Expected,omitempty" type:"Struct"`
	Warned   *DataQualityResultRuleCheckingConfigThresholdsWarned   `json:"Warned,omitempty" xml:"Warned,omitempty" type:"Struct"`
}

func (s DataQualityResultRuleCheckingConfigThresholds) String() string {
	return tea.Prettify(s)
}

func (s DataQualityResultRuleCheckingConfigThresholds) GoString() string {
	return s.String()
}

func (s *DataQualityResultRuleCheckingConfigThresholds) SetCritical(v *DataQualityResultRuleCheckingConfigThresholdsCritical) *DataQualityResultRuleCheckingConfigThresholds {
	s.Critical = v
	return s
}

func (s *DataQualityResultRuleCheckingConfigThresholds) SetExpected(v *DataQualityResultRuleCheckingConfigThresholdsExpected) *DataQualityResultRuleCheckingConfigThresholds {
	s.Expected = v
	return s
}

func (s *DataQualityResultRuleCheckingConfigThresholds) SetWarned(v *DataQualityResultRuleCheckingConfigThresholdsWarned) *DataQualityResultRuleCheckingConfigThresholds {
	s.Warned = v
	return s
}

type DataQualityResultRuleCheckingConfigThresholdsCritical struct {
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DataQualityResultRuleCheckingConfigThresholdsCritical) String() string {
	return tea.Prettify(s)
}

func (s DataQualityResultRuleCheckingConfigThresholdsCritical) GoString() string {
	return s.String()
}

func (s *DataQualityResultRuleCheckingConfigThresholdsCritical) SetOperator(v string) *DataQualityResultRuleCheckingConfigThresholdsCritical {
	s.Operator = &v
	return s
}

func (s *DataQualityResultRuleCheckingConfigThresholdsCritical) SetValue(v string) *DataQualityResultRuleCheckingConfigThresholdsCritical {
	s.Value = &v
	return s
}

type DataQualityResultRuleCheckingConfigThresholdsExpected struct {
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DataQualityResultRuleCheckingConfigThresholdsExpected) String() string {
	return tea.Prettify(s)
}

func (s DataQualityResultRuleCheckingConfigThresholdsExpected) GoString() string {
	return s.String()
}

func (s *DataQualityResultRuleCheckingConfigThresholdsExpected) SetOperator(v string) *DataQualityResultRuleCheckingConfigThresholdsExpected {
	s.Operator = &v
	return s
}

func (s *DataQualityResultRuleCheckingConfigThresholdsExpected) SetValue(v string) *DataQualityResultRuleCheckingConfigThresholdsExpected {
	s.Value = &v
	return s
}

type DataQualityResultRuleCheckingConfigThresholdsWarned struct {
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DataQualityResultRuleCheckingConfigThresholdsWarned) String() string {
	return tea.Prettify(s)
}

func (s DataQualityResultRuleCheckingConfigThresholdsWarned) GoString() string {
	return s.String()
}

func (s *DataQualityResultRuleCheckingConfigThresholdsWarned) SetOperator(v string) *DataQualityResultRuleCheckingConfigThresholdsWarned {
	s.Operator = &v
	return s
}

func (s *DataQualityResultRuleCheckingConfigThresholdsWarned) SetValue(v string) *DataQualityResultRuleCheckingConfigThresholdsWarned {
	s.Value = &v
	return s
}

type DataQualityResultRuleErrorHandlers struct {
	// example:
	//
	// SELECT 	- FROM tb_api_log WHERE id IS NULL
	ErrorDataFilter *string `json:"ErrorDataFilter,omitempty" xml:"ErrorDataFilter,omitempty"`
	// example:
	//
	// SaveErrorData
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DataQualityResultRuleErrorHandlers) String() string {
	return tea.Prettify(s)
}

func (s DataQualityResultRuleErrorHandlers) GoString() string {
	return s.String()
}

func (s *DataQualityResultRuleErrorHandlers) SetErrorDataFilter(v string) *DataQualityResultRuleErrorHandlers {
	s.ErrorDataFilter = &v
	return s
}

func (s *DataQualityResultRuleErrorHandlers) SetType(v string) *DataQualityResultRuleErrorHandlers {
	s.Type = &v
	return s
}

type DataQualityResultRuleSamplingConfig struct {
	// example:
	//
	// Min
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// example:
	//
	// { "Columns": [ "id", "name" ] }
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// example:
	//
	// id IS NULL
	SamplingFilter *string `json:"SamplingFilter,omitempty" xml:"SamplingFilter,omitempty"`
	// example:
	//
	// SET odps.sql.udf.timeout=600s;
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s DataQualityResultRuleSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s DataQualityResultRuleSamplingConfig) GoString() string {
	return s.String()
}

func (s *DataQualityResultRuleSamplingConfig) SetMetric(v string) *DataQualityResultRuleSamplingConfig {
	s.Metric = &v
	return s
}

func (s *DataQualityResultRuleSamplingConfig) SetMetricParameters(v string) *DataQualityResultRuleSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *DataQualityResultRuleSamplingConfig) SetSamplingFilter(v string) *DataQualityResultRuleSamplingConfig {
	s.SamplingFilter = &v
	return s
}

func (s *DataQualityResultRuleSamplingConfig) SetSettingConfig(v string) *DataQualityResultRuleSamplingConfig {
	s.SettingConfig = &v
	return s
}

type DataQualityResultRuleTarget struct {
	// example:
	//
	// maxcompute
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// example:
	//
	// ds=$[yyyymmdd-1]
	PartitionSpec *string `json:"PartitionSpec,omitempty" xml:"PartitionSpec,omitempty"`
	// example:
	//
	// odps.unit_test.tb_unit_test
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	// example:
	//
	// Table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DataQualityResultRuleTarget) String() string {
	return tea.Prettify(s)
}

func (s DataQualityResultRuleTarget) GoString() string {
	return s.String()
}

func (s *DataQualityResultRuleTarget) SetDatabaseType(v string) *DataQualityResultRuleTarget {
	s.DatabaseType = &v
	return s
}

func (s *DataQualityResultRuleTarget) SetPartitionSpec(v string) *DataQualityResultRuleTarget {
	s.PartitionSpec = &v
	return s
}

func (s *DataQualityResultRuleTarget) SetTableGuid(v string) *DataQualityResultRuleTarget {
	s.TableGuid = &v
	return s
}

func (s *DataQualityResultRuleTarget) SetType(v string) *DataQualityResultRuleTarget {
	s.Type = &v
	return s
}

type DataQualityRule struct {
	CheckingConfig *DataQualityRuleCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	// example:
	//
	// this is a odps _sql task
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// true
	Enabled       *bool                           `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	ErrorHandlers []*DataQualityRuleErrorHandlers `json:"ErrorHandlers,omitempty" xml:"ErrorHandlers,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 表不能为空
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 100
	ProjectId      *int64                         `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SamplingConfig *DataQualityRuleSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	// example:
	//
	// High
	Severity *string                `json:"Severity,omitempty" xml:"Severity,omitempty"`
	Target   *DataQualityRuleTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// example:
	//
	// SYSTEM:user_defined_sql
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	// example:
	//
	// 1
	TenantId *int64 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s DataQualityRule) String() string {
	return tea.Prettify(s)
}

func (s DataQualityRule) GoString() string {
	return s.String()
}

func (s *DataQualityRule) SetCheckingConfig(v *DataQualityRuleCheckingConfig) *DataQualityRule {
	s.CheckingConfig = v
	return s
}

func (s *DataQualityRule) SetDescription(v string) *DataQualityRule {
	s.Description = &v
	return s
}

func (s *DataQualityRule) SetEnabled(v bool) *DataQualityRule {
	s.Enabled = &v
	return s
}

func (s *DataQualityRule) SetErrorHandlers(v []*DataQualityRuleErrorHandlers) *DataQualityRule {
	s.ErrorHandlers = v
	return s
}

func (s *DataQualityRule) SetId(v int64) *DataQualityRule {
	s.Id = &v
	return s
}

func (s *DataQualityRule) SetName(v string) *DataQualityRule {
	s.Name = &v
	return s
}

func (s *DataQualityRule) SetProjectId(v int64) *DataQualityRule {
	s.ProjectId = &v
	return s
}

func (s *DataQualityRule) SetSamplingConfig(v *DataQualityRuleSamplingConfig) *DataQualityRule {
	s.SamplingConfig = v
	return s
}

func (s *DataQualityRule) SetSeverity(v string) *DataQualityRule {
	s.Severity = &v
	return s
}

func (s *DataQualityRule) SetTarget(v *DataQualityRuleTarget) *DataQualityRule {
	s.Target = v
	return s
}

func (s *DataQualityRule) SetTemplateCode(v string) *DataQualityRule {
	s.TemplateCode = &v
	return s
}

func (s *DataQualityRule) SetTenantId(v int64) *DataQualityRule {
	s.TenantId = &v
	return s
}

type DataQualityRuleCheckingConfig struct {
	// example:
	//
	// { "bizdate": [ "-1", "-7", "-1m" ] }
	ReferencedSamplesFilter *string                                  `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	Thresholds              *DataQualityRuleCheckingConfigThresholds `json:"Thresholds,omitempty" xml:"Thresholds,omitempty" type:"Struct"`
	// example:
	//
	// Fixed
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DataQualityRuleCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s DataQualityRuleCheckingConfig) GoString() string {
	return s.String()
}

func (s *DataQualityRuleCheckingConfig) SetReferencedSamplesFilter(v string) *DataQualityRuleCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *DataQualityRuleCheckingConfig) SetThresholds(v *DataQualityRuleCheckingConfigThresholds) *DataQualityRuleCheckingConfig {
	s.Thresholds = v
	return s
}

func (s *DataQualityRuleCheckingConfig) SetType(v string) *DataQualityRuleCheckingConfig {
	s.Type = &v
	return s
}

type DataQualityRuleCheckingConfigThresholds struct {
	Critical *DataQualityRuleCheckingConfigThresholdsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	Expected *DataQualityRuleCheckingConfigThresholdsExpected `json:"Expected,omitempty" xml:"Expected,omitempty" type:"Struct"`
	Warned   *DataQualityRuleCheckingConfigThresholdsWarned   `json:"Warned,omitempty" xml:"Warned,omitempty" type:"Struct"`
}

func (s DataQualityRuleCheckingConfigThresholds) String() string {
	return tea.Prettify(s)
}

func (s DataQualityRuleCheckingConfigThresholds) GoString() string {
	return s.String()
}

func (s *DataQualityRuleCheckingConfigThresholds) SetCritical(v *DataQualityRuleCheckingConfigThresholdsCritical) *DataQualityRuleCheckingConfigThresholds {
	s.Critical = v
	return s
}

func (s *DataQualityRuleCheckingConfigThresholds) SetExpected(v *DataQualityRuleCheckingConfigThresholdsExpected) *DataQualityRuleCheckingConfigThresholds {
	s.Expected = v
	return s
}

func (s *DataQualityRuleCheckingConfigThresholds) SetWarned(v *DataQualityRuleCheckingConfigThresholdsWarned) *DataQualityRuleCheckingConfigThresholds {
	s.Warned = v
	return s
}

type DataQualityRuleCheckingConfigThresholdsCritical struct {
	// example:
	//
	// 波动率类型规则使用，通过表达式来表示波动阈值。如：波动上升大于0.01： $checkValue > 0.01  波动下降大于0.01：$checkValue < -0.01   波动率绝对值：abs($checkValue) > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DataQualityRuleCheckingConfigThresholdsCritical) String() string {
	return tea.Prettify(s)
}

func (s DataQualityRuleCheckingConfigThresholdsCritical) GoString() string {
	return s.String()
}

func (s *DataQualityRuleCheckingConfigThresholdsCritical) SetExpression(v string) *DataQualityRuleCheckingConfigThresholdsCritical {
	s.Expression = &v
	return s
}

func (s *DataQualityRuleCheckingConfigThresholdsCritical) SetOperator(v string) *DataQualityRuleCheckingConfigThresholdsCritical {
	s.Operator = &v
	return s
}

func (s *DataQualityRuleCheckingConfigThresholdsCritical) SetValue(v string) *DataQualityRuleCheckingConfigThresholdsCritical {
	s.Value = &v
	return s
}

type DataQualityRuleCheckingConfigThresholdsExpected struct {
	// example:
	//
	// 波动率类型规则使用，通过表达式来表示波动阈值。如：波动上升大于0.01： $checkValue > 0.01  波动下降大于0.01：$checkValue < -0.01   波动率绝对值：abs($checkValue) > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DataQualityRuleCheckingConfigThresholdsExpected) String() string {
	return tea.Prettify(s)
}

func (s DataQualityRuleCheckingConfigThresholdsExpected) GoString() string {
	return s.String()
}

func (s *DataQualityRuleCheckingConfigThresholdsExpected) SetExpression(v string) *DataQualityRuleCheckingConfigThresholdsExpected {
	s.Expression = &v
	return s
}

func (s *DataQualityRuleCheckingConfigThresholdsExpected) SetOperator(v string) *DataQualityRuleCheckingConfigThresholdsExpected {
	s.Operator = &v
	return s
}

func (s *DataQualityRuleCheckingConfigThresholdsExpected) SetValue(v string) *DataQualityRuleCheckingConfigThresholdsExpected {
	s.Value = &v
	return s
}

type DataQualityRuleCheckingConfigThresholdsWarned struct {
	// example:
	//
	// 波动率类型规则使用，通过表达式来表示波动阈值。如：波动上升大于0.01： $checkValue > 0.01  波动下降大于0.01：$checkValue < -0.01   波动率绝对值：abs($checkValue) > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DataQualityRuleCheckingConfigThresholdsWarned) String() string {
	return tea.Prettify(s)
}

func (s DataQualityRuleCheckingConfigThresholdsWarned) GoString() string {
	return s.String()
}

func (s *DataQualityRuleCheckingConfigThresholdsWarned) SetExpression(v string) *DataQualityRuleCheckingConfigThresholdsWarned {
	s.Expression = &v
	return s
}

func (s *DataQualityRuleCheckingConfigThresholdsWarned) SetOperator(v string) *DataQualityRuleCheckingConfigThresholdsWarned {
	s.Operator = &v
	return s
}

func (s *DataQualityRuleCheckingConfigThresholdsWarned) SetValue(v string) *DataQualityRuleCheckingConfigThresholdsWarned {
	s.Value = &v
	return s
}

type DataQualityRuleErrorHandlers struct {
	// example:
	//
	// SELECT 	- FROM tb_api_log WHERE id IS NULL
	ErrorDataFilter *string `json:"ErrorDataFilter,omitempty" xml:"ErrorDataFilter,omitempty"`
	// example:
	//
	// SaveErrorData
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DataQualityRuleErrorHandlers) String() string {
	return tea.Prettify(s)
}

func (s DataQualityRuleErrorHandlers) GoString() string {
	return s.String()
}

func (s *DataQualityRuleErrorHandlers) SetErrorDataFilter(v string) *DataQualityRuleErrorHandlers {
	s.ErrorDataFilter = &v
	return s
}

func (s *DataQualityRuleErrorHandlers) SetType(v string) *DataQualityRuleErrorHandlers {
	s.Type = &v
	return s
}

type DataQualityRuleSamplingConfig struct {
	// example:
	//
	// Min
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// example:
	//
	// { "Columns": [ "id", "name" ] }
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// example:
	//
	// id IS NULL
	SamplingFilter *string `json:"SamplingFilter,omitempty" xml:"SamplingFilter,omitempty"`
	// example:
	//
	// SET odps.sql.udf.timeout=600s;
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s DataQualityRuleSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s DataQualityRuleSamplingConfig) GoString() string {
	return s.String()
}

func (s *DataQualityRuleSamplingConfig) SetMetric(v string) *DataQualityRuleSamplingConfig {
	s.Metric = &v
	return s
}

func (s *DataQualityRuleSamplingConfig) SetMetricParameters(v string) *DataQualityRuleSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *DataQualityRuleSamplingConfig) SetSamplingFilter(v string) *DataQualityRuleSamplingConfig {
	s.SamplingFilter = &v
	return s
}

func (s *DataQualityRuleSamplingConfig) SetSettingConfig(v string) *DataQualityRuleSamplingConfig {
	s.SettingConfig = &v
	return s
}

type DataQualityRuleTarget struct {
	// example:
	//
	// maxcompute
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// example:
	//
	// ds=$[yyyymmdd-1]
	PartitionSpec *string `json:"PartitionSpec,omitempty" xml:"PartitionSpec,omitempty"`
	// example:
	//
	// odps.unit_test.tb_unit_test
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	// example:
	//
	// Table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DataQualityRuleTarget) String() string {
	return tea.Prettify(s)
}

func (s DataQualityRuleTarget) GoString() string {
	return s.String()
}

func (s *DataQualityRuleTarget) SetDatabaseType(v string) *DataQualityRuleTarget {
	s.DatabaseType = &v
	return s
}

func (s *DataQualityRuleTarget) SetPartitionSpec(v string) *DataQualityRuleTarget {
	s.PartitionSpec = &v
	return s
}

func (s *DataQualityRuleTarget) SetTableGuid(v string) *DataQualityRuleTarget {
	s.TableGuid = &v
	return s
}

func (s *DataQualityRuleTarget) SetType(v string) *DataQualityRuleTarget {
	s.Type = &v
	return s
}

type DataQualityRuleTemplate struct {
	CheckingConfig *DataQualityRuleTemplateCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	Code           *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// /ods/订单数据
	DirectoryPath  *string                                `json:"DirectoryPath,omitempty" xml:"DirectoryPath,omitempty"`
	Name           *string                                `json:"Name,omitempty" xml:"Name,omitempty"`
	ProjectId      *int64                                 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SamplingConfig *DataQualityRuleTemplateSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	TenantId       *int64                                 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// example:
	//
	// Project
	VisibleScope *string `json:"VisibleScope,omitempty" xml:"VisibleScope,omitempty"`
}

func (s DataQualityRuleTemplate) String() string {
	return tea.Prettify(s)
}

func (s DataQualityRuleTemplate) GoString() string {
	return s.String()
}

func (s *DataQualityRuleTemplate) SetCheckingConfig(v *DataQualityRuleTemplateCheckingConfig) *DataQualityRuleTemplate {
	s.CheckingConfig = v
	return s
}

func (s *DataQualityRuleTemplate) SetCode(v string) *DataQualityRuleTemplate {
	s.Code = &v
	return s
}

func (s *DataQualityRuleTemplate) SetDirectoryPath(v string) *DataQualityRuleTemplate {
	s.DirectoryPath = &v
	return s
}

func (s *DataQualityRuleTemplate) SetName(v string) *DataQualityRuleTemplate {
	s.Name = &v
	return s
}

func (s *DataQualityRuleTemplate) SetProjectId(v int64) *DataQualityRuleTemplate {
	s.ProjectId = &v
	return s
}

func (s *DataQualityRuleTemplate) SetSamplingConfig(v *DataQualityRuleTemplateSamplingConfig) *DataQualityRuleTemplate {
	s.SamplingConfig = v
	return s
}

func (s *DataQualityRuleTemplate) SetTenantId(v int64) *DataQualityRuleTemplate {
	s.TenantId = &v
	return s
}

func (s *DataQualityRuleTemplate) SetVisibleScope(v string) *DataQualityRuleTemplate {
	s.VisibleScope = &v
	return s
}

type DataQualityRuleTemplateCheckingConfig struct {
	// example:
	//
	// { "bizdate": [ "-1", "-7", "-1m" ] }
	ReferencedSamplesFilter *string `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	// example:
	//
	// Fixed
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DataQualityRuleTemplateCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s DataQualityRuleTemplateCheckingConfig) GoString() string {
	return s.String()
}

func (s *DataQualityRuleTemplateCheckingConfig) SetReferencedSamplesFilter(v string) *DataQualityRuleTemplateCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *DataQualityRuleTemplateCheckingConfig) SetType(v string) *DataQualityRuleTemplateCheckingConfig {
	s.Type = &v
	return s
}

type DataQualityRuleTemplateSamplingConfig struct {
	// example:
	//
	// Min
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// example:
	//
	// { "SQL": "SELECT min(id) from table;" }
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// example:
	//
	// SET odps.sql.udf.timeout=600s;
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s DataQualityRuleTemplateSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s DataQualityRuleTemplateSamplingConfig) GoString() string {
	return s.String()
}

func (s *DataQualityRuleTemplateSamplingConfig) SetMetric(v string) *DataQualityRuleTemplateSamplingConfig {
	s.Metric = &v
	return s
}

func (s *DataQualityRuleTemplateSamplingConfig) SetMetricParameters(v string) *DataQualityRuleTemplateSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *DataQualityRuleTemplateSamplingConfig) SetSettingConfig(v string) *DataQualityRuleTemplateSamplingConfig {
	s.SettingConfig = &v
	return s
}

type Database struct {
	// example:
	//
	// test comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// 1736852168000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// holo-database:h-xxxx::test_db
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// oss://test-bucket/test_db
	LocationUri *string `json:"LocationUri,omitempty" xml:"LocationUri,omitempty"`
	// example:
	//
	// 1736852168000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// example:
	//
	// test_db
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// holo:h-xxxx
	ParentMetaEntityId *string `json:"ParentMetaEntityId,omitempty" xml:"ParentMetaEntityId,omitempty"`
}

func (s Database) String() string {
	return tea.Prettify(s)
}

func (s Database) GoString() string {
	return s.String()
}

func (s *Database) SetComment(v string) *Database {
	s.Comment = &v
	return s
}

func (s *Database) SetCreateTime(v int64) *Database {
	s.CreateTime = &v
	return s
}

func (s *Database) SetId(v string) *Database {
	s.Id = &v
	return s
}

func (s *Database) SetLocationUri(v string) *Database {
	s.LocationUri = &v
	return s
}

func (s *Database) SetModifyTime(v int64) *Database {
	s.ModifyTime = &v
	return s
}

func (s *Database) SetName(v string) *Database {
	s.Name = &v
	return s
}

func (s *Database) SetParentMetaEntityId(v string) *Database {
	s.ParentMetaEntityId = &v
	return s
}

type LineageEntity struct {
	// example:
	//
	// {"key1":"value1"}
	Attributes map[string]*string `json:"Attributes,omitempty" xml:"Attributes,omitempty"`
	// example:
	//
	// maxcompute-table:123456::test_project::test_tbl
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// test_tbl
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s LineageEntity) String() string {
	return tea.Prettify(s)
}

func (s LineageEntity) GoString() string {
	return s.String()
}

func (s *LineageEntity) SetAttributes(v map[string]*string) *LineageEntity {
	s.Attributes = v
	return s
}

func (s *LineageEntity) SetId(v string) *LineageEntity {
	s.Id = &v
	return s
}

func (s *LineageEntity) SetName(v string) *LineageEntity {
	s.Name = &v
	return s
}

type LineageRelationship struct {
	// example:
	//
	// 1743040581000
	CreateTime *int64         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DstEntity  *LineageEntity `json:"DstEntity,omitempty" xml:"DstEntity,omitempty"`
	// example:
	//
	// maxcompute-table.p.table:custom-table.xxx:custom-sql.123
	Id        *string        `json:"Id,omitempty" xml:"Id,omitempty"`
	SrcEntity *LineageEntity `json:"SrcEntity,omitempty" xml:"SrcEntity,omitempty"`
	Task      *LineageTask   `json:"Task,omitempty" xml:"Task,omitempty"`
}

func (s LineageRelationship) String() string {
	return tea.Prettify(s)
}

func (s LineageRelationship) GoString() string {
	return s.String()
}

func (s *LineageRelationship) SetCreateTime(v int64) *LineageRelationship {
	s.CreateTime = &v
	return s
}

func (s *LineageRelationship) SetDstEntity(v *LineageEntity) *LineageRelationship {
	s.DstEntity = v
	return s
}

func (s *LineageRelationship) SetId(v string) *LineageRelationship {
	s.Id = &v
	return s
}

func (s *LineageRelationship) SetSrcEntity(v *LineageEntity) *LineageRelationship {
	s.SrcEntity = v
	return s
}

func (s *LineageRelationship) SetTask(v *LineageTask) *LineageRelationship {
	s.Task = v
	return s
}

type LineageTask struct {
	Attributes map[string]*string `json:"Attributes,omitempty" xml:"Attributes,omitempty"`
	// example:
	//
	// 12345
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// custom-sql
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s LineageTask) String() string {
	return tea.Prettify(s)
}

func (s LineageTask) GoString() string {
	return s.String()
}

func (s *LineageTask) SetAttributes(v map[string]*string) *LineageTask {
	s.Attributes = v
	return s
}

func (s *LineageTask) SetId(v string) *LineageTask {
	s.Id = &v
	return s
}

func (s *LineageTask) SetType(v string) *LineageTask {
	s.Type = &v
	return s
}

type Partition struct {
	// example:
	//
	// 1700192563000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 4096
	DataSize *int64 `json:"DataSize,omitempty" xml:"DataSize,omitempty"`
	// example:
	//
	// 1700192563000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// example:
	//
	// ds=20250101
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1000000
	RecordCount *int64 `json:"RecordCount,omitempty" xml:"RecordCount,omitempty"`
	// example:
	//
	// maxcompute-table:accountId::project::table
	TableId *string `json:"TableId,omitempty" xml:"TableId,omitempty"`
}

func (s Partition) String() string {
	return tea.Prettify(s)
}

func (s Partition) GoString() string {
	return s.String()
}

func (s *Partition) SetCreateTime(v int64) *Partition {
	s.CreateTime = &v
	return s
}

func (s *Partition) SetDataSize(v int64) *Partition {
	s.DataSize = &v
	return s
}

func (s *Partition) SetModifyTime(v int64) *Partition {
	s.ModifyTime = &v
	return s
}

func (s *Partition) SetName(v string) *Partition {
	s.Name = &v
	return s
}

func (s *Partition) SetRecordCount(v int64) *Partition {
	s.RecordCount = &v
	return s
}

func (s *Partition) SetTableId(v string) *Partition {
	s.TableId = &v
	return s
}

type Schema struct {
	// example:
	//
	// test comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// 1736852168000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// maxcompute-schema:123456::test_project:default
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 1736852168000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// example:
	//
	// test_db
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// maxcompute-project:123456::test_project
	ParentMetaEntityId *string `json:"ParentMetaEntityId,omitempty" xml:"ParentMetaEntityId,omitempty"`
	// example:
	//
	// MANAGED
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s Schema) String() string {
	return tea.Prettify(s)
}

func (s Schema) GoString() string {
	return s.String()
}

func (s *Schema) SetComment(v string) *Schema {
	s.Comment = &v
	return s
}

func (s *Schema) SetCreateTime(v int64) *Schema {
	s.CreateTime = &v
	return s
}

func (s *Schema) SetId(v string) *Schema {
	s.Id = &v
	return s
}

func (s *Schema) SetModifyTime(v int64) *Schema {
	s.ModifyTime = &v
	return s
}

func (s *Schema) SetName(v string) *Schema {
	s.Name = &v
	return s
}

func (s *Schema) SetParentMetaEntityId(v string) *Schema {
	s.ParentMetaEntityId = &v
	return s
}

func (s *Schema) SetType(v string) *Schema {
	s.Type = &v
	return s
}

type Table struct {
	BusinessMetadata *TableBusinessMetadata `json:"BusinessMetadata,omitempty" xml:"BusinessMetadata,omitempty" type:"Struct"`
	// example:
	//
	// 测试表
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// 1736852168000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// maxcompute-table:123456::test_project::test_tbl
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 1736852168000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// example:
	//
	// test_tbl
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// maxcompute-project:123456::test_project
	ParentMetaEntityId *string   `json:"ParentMetaEntityId,omitempty" xml:"ParentMetaEntityId,omitempty"`
	PartitionKeys      []*string `json:"PartitionKeys,omitempty" xml:"PartitionKeys,omitempty" type:"Repeated"`
	// example:
	//
	// TABLE
	TableType         *string                 `json:"TableType,omitempty" xml:"TableType,omitempty"`
	TechnicalMetadata *TableTechnicalMetadata `json:"TechnicalMetadata,omitempty" xml:"TechnicalMetadata,omitempty" type:"Struct"`
}

func (s Table) String() string {
	return tea.Prettify(s)
}

func (s Table) GoString() string {
	return s.String()
}

func (s *Table) SetBusinessMetadata(v *TableBusinessMetadata) *Table {
	s.BusinessMetadata = v
	return s
}

func (s *Table) SetComment(v string) *Table {
	s.Comment = &v
	return s
}

func (s *Table) SetCreateTime(v int64) *Table {
	s.CreateTime = &v
	return s
}

func (s *Table) SetId(v string) *Table {
	s.Id = &v
	return s
}

func (s *Table) SetModifyTime(v int64) *Table {
	s.ModifyTime = &v
	return s
}

func (s *Table) SetName(v string) *Table {
	s.Name = &v
	return s
}

func (s *Table) SetParentMetaEntityId(v string) *Table {
	s.ParentMetaEntityId = &v
	return s
}

func (s *Table) SetPartitionKeys(v []*string) *Table {
	s.PartitionKeys = v
	return s
}

func (s *Table) SetTableType(v string) *Table {
	s.TableType = &v
	return s
}

func (s *Table) SetTechnicalMetadata(v *TableTechnicalMetadata) *Table {
	s.TechnicalMetadata = v
	return s
}

type TableBusinessMetadata struct {
	Categories [][]*TableBusinessMetadataCategories `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Repeated"`
	Extension  *TableBusinessMetadataExtension      `json:"Extension,omitempty" xml:"Extension,omitempty" type:"Struct"`
	// example:
	//
	// ## 使用说明
	Readme        *string                               `json:"Readme,omitempty" xml:"Readme,omitempty"`
	Tags          []*TableBusinessMetadataTags          `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	UpstreamTasks []*TableBusinessMetadataUpstreamTasks `json:"UpstreamTasks,omitempty" xml:"UpstreamTasks,omitempty" type:"Repeated"`
}

func (s TableBusinessMetadata) String() string {
	return tea.Prettify(s)
}

func (s TableBusinessMetadata) GoString() string {
	return s.String()
}

func (s *TableBusinessMetadata) SetCategories(v [][]*TableBusinessMetadataCategories) *TableBusinessMetadata {
	s.Categories = v
	return s
}

func (s *TableBusinessMetadata) SetExtension(v *TableBusinessMetadataExtension) *TableBusinessMetadata {
	s.Extension = v
	return s
}

func (s *TableBusinessMetadata) SetReadme(v string) *TableBusinessMetadata {
	s.Readme = &v
	return s
}

func (s *TableBusinessMetadata) SetTags(v []*TableBusinessMetadataTags) *TableBusinessMetadata {
	s.Tags = v
	return s
}

func (s *TableBusinessMetadata) SetUpstreamTasks(v []*TableBusinessMetadataUpstreamTasks) *TableBusinessMetadata {
	s.UpstreamTasks = v
	return s
}

type TableBusinessMetadataCategories struct {
	// example:
	//
	// CATEGORY.456
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 测试类目
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// CATEGORY.123
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s TableBusinessMetadataCategories) String() string {
	return tea.Prettify(s)
}

func (s TableBusinessMetadataCategories) GoString() string {
	return s.String()
}

func (s *TableBusinessMetadataCategories) SetId(v string) *TableBusinessMetadataCategories {
	s.Id = &v
	return s
}

func (s *TableBusinessMetadataCategories) SetName(v string) *TableBusinessMetadataCategories {
	s.Name = &v
	return s
}

func (s *TableBusinessMetadataCategories) SetParentId(v string) *TableBusinessMetadataCategories {
	s.ParentId = &v
	return s
}

type TableBusinessMetadataExtension struct {
	// example:
	//
	// Dev
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// example:
	//
	// 0
	FavorCount *int64 `json:"FavorCount,omitempty" xml:"FavorCount,omitempty"`
	// example:
	//
	// 234
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// 0
	ReadCount *int64 `json:"ReadCount,omitempty" xml:"ReadCount,omitempty"`
	// example:
	//
	// 0
	ViewCount *int64 `json:"ViewCount,omitempty" xml:"ViewCount,omitempty"`
}

func (s TableBusinessMetadataExtension) String() string {
	return tea.Prettify(s)
}

func (s TableBusinessMetadataExtension) GoString() string {
	return s.String()
}

func (s *TableBusinessMetadataExtension) SetEnvType(v string) *TableBusinessMetadataExtension {
	s.EnvType = &v
	return s
}

func (s *TableBusinessMetadataExtension) SetFavorCount(v int64) *TableBusinessMetadataExtension {
	s.FavorCount = &v
	return s
}

func (s *TableBusinessMetadataExtension) SetProjectId(v int64) *TableBusinessMetadataExtension {
	s.ProjectId = &v
	return s
}

func (s *TableBusinessMetadataExtension) SetReadCount(v int64) *TableBusinessMetadataExtension {
	s.ReadCount = &v
	return s
}

func (s *TableBusinessMetadataExtension) SetViewCount(v int64) *TableBusinessMetadataExtension {
	s.ViewCount = &v
	return s
}

type TableBusinessMetadataTags struct {
	// example:
	//
	// tag_key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// if can be null:
	// true
	//
	// example:
	//
	// tag_value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TableBusinessMetadataTags) String() string {
	return tea.Prettify(s)
}

func (s TableBusinessMetadataTags) GoString() string {
	return s.String()
}

func (s *TableBusinessMetadataTags) SetKey(v string) *TableBusinessMetadataTags {
	s.Key = &v
	return s
}

func (s *TableBusinessMetadataTags) SetValue(v string) *TableBusinessMetadataTags {
	s.Value = &v
	return s
}

type TableBusinessMetadataUpstreamTasks struct {
	// example:
	//
	// 123456
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// test_task
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s TableBusinessMetadataUpstreamTasks) String() string {
	return tea.Prettify(s)
}

func (s TableBusinessMetadataUpstreamTasks) GoString() string {
	return s.String()
}

func (s *TableBusinessMetadataUpstreamTasks) SetId(v int64) *TableBusinessMetadataUpstreamTasks {
	s.Id = &v
	return s
}

func (s *TableBusinessMetadataUpstreamTasks) SetName(v string) *TableBusinessMetadataUpstreamTasks {
	s.Name = &v
	return s
}

type TableTechnicalMetadata struct {
	// example:
	//
	// false
	Compressed *bool `json:"Compressed,omitempty" xml:"Compressed,omitempty"`
	// example:
	//
	// org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
	InputFormat *string `json:"InputFormat,omitempty" xml:"InputFormat,omitempty"`
	// example:
	//
	// oss://test-bucket/test_tbl
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// example:
	//
	// org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
	OutputFormat *string `json:"OutputFormat,omitempty" xml:"OutputFormat,omitempty"`
	// example:
	//
	// 123456789
	Owner      *string            `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Parameters map[string]*string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// example:
	//
	// org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
	SerializationLibrary *string `json:"SerializationLibrary,omitempty" xml:"SerializationLibrary,omitempty"`
}

func (s TableTechnicalMetadata) String() string {
	return tea.Prettify(s)
}

func (s TableTechnicalMetadata) GoString() string {
	return s.String()
}

func (s *TableTechnicalMetadata) SetCompressed(v bool) *TableTechnicalMetadata {
	s.Compressed = &v
	return s
}

func (s *TableTechnicalMetadata) SetInputFormat(v string) *TableTechnicalMetadata {
	s.InputFormat = &v
	return s
}

func (s *TableTechnicalMetadata) SetLocation(v string) *TableTechnicalMetadata {
	s.Location = &v
	return s
}

func (s *TableTechnicalMetadata) SetOutputFormat(v string) *TableTechnicalMetadata {
	s.OutputFormat = &v
	return s
}

func (s *TableTechnicalMetadata) SetOwner(v string) *TableTechnicalMetadata {
	s.Owner = &v
	return s
}

func (s *TableTechnicalMetadata) SetParameters(v map[string]*string) *TableTechnicalMetadata {
	s.Parameters = v
	return s
}

func (s *TableTechnicalMetadata) SetSerializationLibrary(v string) *TableTechnicalMetadata {
	s.SerializationLibrary = &v
	return s
}

type SuccessInfoValue struct {
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The error message.
	//
	// example:
	//
	// The task does not exist.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s SuccessInfoValue) String() string {
	return tea.Prettify(s)
}

func (s SuccessInfoValue) GoString() string {
	return s.String()
}

func (s *SuccessInfoValue) SetSuccess(v bool) *SuccessInfoValue {
	s.Success = &v
	return s
}

func (s *SuccessInfoValue) SetMessage(v string) *SuccessInfoValue {
	s.Message = &v
	return s
}

type AbolishPipelineRunRequest struct {
	// The ID of the process.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1606087c-9ac4-43f0-83a8-0b5ced21XXXX
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s AbolishPipelineRunRequest) String() string {
	return tea.Prettify(s)
}

func (s AbolishPipelineRunRequest) GoString() string {
	return s.String()
}

func (s *AbolishPipelineRunRequest) SetId(v string) *AbolishPipelineRunRequest {
	s.Id = &v
	return s
}

func (s *AbolishPipelineRunRequest) SetProjectId(v int64) *AbolishPipelineRunRequest {
	s.ProjectId = &v
	return s
}

type AbolishPipelineRunResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 55D786C9-DD57-524D-884C-C5239278XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AbolishPipelineRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AbolishPipelineRunResponseBody) GoString() string {
	return s.String()
}

func (s *AbolishPipelineRunResponseBody) SetRequestId(v string) *AbolishPipelineRunResponseBody {
	s.RequestId = &v
	return s
}

func (s *AbolishPipelineRunResponseBody) SetSuccess(v bool) *AbolishPipelineRunResponseBody {
	s.Success = &v
	return s
}

type AbolishPipelineRunResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AbolishPipelineRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AbolishPipelineRunResponse) String() string {
	return tea.Prettify(s)
}

func (s AbolishPipelineRunResponse) GoString() string {
	return s.String()
}

func (s *AbolishPipelineRunResponse) SetHeaders(v map[string]*string) *AbolishPipelineRunResponse {
	s.Headers = v
	return s
}

func (s *AbolishPipelineRunResponse) SetStatusCode(v int32) *AbolishPipelineRunResponse {
	s.StatusCode = &v
	return s
}

func (s *AbolishPipelineRunResponse) SetBody(v *AbolishPipelineRunResponseBody) *AbolishPipelineRunResponse {
	s.Body = v
	return s
}

type AddEntityIntoMetaCollectionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-table
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// category.123
	MetaCollectionId *string `json:"MetaCollectionId,omitempty" xml:"MetaCollectionId,omitempty"`
	Remark           *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
}

func (s AddEntityIntoMetaCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s AddEntityIntoMetaCollectionRequest) GoString() string {
	return s.String()
}

func (s *AddEntityIntoMetaCollectionRequest) SetId(v string) *AddEntityIntoMetaCollectionRequest {
	s.Id = &v
	return s
}

func (s *AddEntityIntoMetaCollectionRequest) SetMetaCollectionId(v string) *AddEntityIntoMetaCollectionRequest {
	s.MetaCollectionId = &v
	return s
}

func (s *AddEntityIntoMetaCollectionRequest) SetRemark(v string) *AddEntityIntoMetaCollectionRequest {
	s.Remark = &v
	return s
}

type AddEntityIntoMetaCollectionResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddEntityIntoMetaCollectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddEntityIntoMetaCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *AddEntityIntoMetaCollectionResponseBody) SetRequestId(v string) *AddEntityIntoMetaCollectionResponseBody {
	s.RequestId = &v
	return s
}

type AddEntityIntoMetaCollectionResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddEntityIntoMetaCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddEntityIntoMetaCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s AddEntityIntoMetaCollectionResponse) GoString() string {
	return s.String()
}

func (s *AddEntityIntoMetaCollectionResponse) SetHeaders(v map[string]*string) *AddEntityIntoMetaCollectionResponse {
	s.Headers = v
	return s
}

func (s *AddEntityIntoMetaCollectionResponse) SetStatusCode(v int32) *AddEntityIntoMetaCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *AddEntityIntoMetaCollectionResponse) SetBody(v *AddEntityIntoMetaCollectionResponseBody) *AddEntityIntoMetaCollectionResponse {
	s.Body = v
	return s
}

type AssociateProjectToResourceGroupRequest struct {
	// The ID of the DataWorks workspace with which you want to associate the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The ID of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s AssociateProjectToResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateProjectToResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *AssociateProjectToResourceGroupRequest) SetProjectId(v int64) *AssociateProjectToResourceGroupRequest {
	s.ProjectId = &v
	return s
}

func (s *AssociateProjectToResourceGroupRequest) SetResourceGroupId(v string) *AssociateProjectToResourceGroupRequest {
	s.ResourceGroupId = &v
	return s
}

type AssociateProjectToResourceGroupResponseBody struct {
	// The request ID. You can use the ID to locate logs and troubleshoot issues.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AssociateProjectToResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssociateProjectToResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AssociateProjectToResourceGroupResponseBody) SetRequestId(v string) *AssociateProjectToResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *AssociateProjectToResourceGroupResponseBody) SetSuccess(v bool) *AssociateProjectToResourceGroupResponseBody {
	s.Success = &v
	return s
}

type AssociateProjectToResourceGroupResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AssociateProjectToResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AssociateProjectToResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateProjectToResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *AssociateProjectToResourceGroupResponse) SetHeaders(v map[string]*string) *AssociateProjectToResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *AssociateProjectToResourceGroupResponse) SetStatusCode(v int32) *AssociateProjectToResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AssociateProjectToResourceGroupResponse) SetBody(v *AssociateProjectToResourceGroupResponseBody) *AssociateProjectToResourceGroupResponse {
	s.Body = v
	return s
}

type AttachDataQualityRulesToEvaluationTaskRequest struct {
	// The ID of the data quality monitoring task that is associated with the rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// 200001
	DataQualityEvaluationTaskId *int64 `json:"DataQualityEvaluationTaskId,omitempty" xml:"DataQualityEvaluationTaskId,omitempty"`
	// The IDs of the monitoring rules.
	//
	// This parameter is required.
	DataQualityRuleIds []*int64 `json:"DataQualityRuleIds,omitempty" xml:"DataQualityRuleIds,omitempty" type:"Repeated"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s AttachDataQualityRulesToEvaluationTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachDataQualityRulesToEvaluationTaskRequest) GoString() string {
	return s.String()
}

func (s *AttachDataQualityRulesToEvaluationTaskRequest) SetDataQualityEvaluationTaskId(v int64) *AttachDataQualityRulesToEvaluationTaskRequest {
	s.DataQualityEvaluationTaskId = &v
	return s
}

func (s *AttachDataQualityRulesToEvaluationTaskRequest) SetDataQualityRuleIds(v []*int64) *AttachDataQualityRulesToEvaluationTaskRequest {
	s.DataQualityRuleIds = v
	return s
}

func (s *AttachDataQualityRulesToEvaluationTaskRequest) SetProjectId(v int64) *AttachDataQualityRulesToEvaluationTaskRequest {
	s.ProjectId = &v
	return s
}

type AttachDataQualityRulesToEvaluationTaskShrinkRequest struct {
	// The ID of the data quality monitoring task that is associated with the rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// 200001
	DataQualityEvaluationTaskId *int64 `json:"DataQualityEvaluationTaskId,omitempty" xml:"DataQualityEvaluationTaskId,omitempty"`
	// The IDs of the monitoring rules.
	//
	// This parameter is required.
	DataQualityRuleIdsShrink *string `json:"DataQualityRuleIds,omitempty" xml:"DataQualityRuleIds,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s AttachDataQualityRulesToEvaluationTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachDataQualityRulesToEvaluationTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *AttachDataQualityRulesToEvaluationTaskShrinkRequest) SetDataQualityEvaluationTaskId(v int64) *AttachDataQualityRulesToEvaluationTaskShrinkRequest {
	s.DataQualityEvaluationTaskId = &v
	return s
}

func (s *AttachDataQualityRulesToEvaluationTaskShrinkRequest) SetDataQualityRuleIdsShrink(v string) *AttachDataQualityRulesToEvaluationTaskShrinkRequest {
	s.DataQualityRuleIdsShrink = &v
	return s
}

func (s *AttachDataQualityRulesToEvaluationTaskShrinkRequest) SetProjectId(v int64) *AttachDataQualityRulesToEvaluationTaskShrinkRequest {
	s.ProjectId = &v
	return s
}

type AttachDataQualityRulesToEvaluationTaskResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// E6F0DBDD-5AD8-4870-A6A0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The value of the association is as follows:
	//
	// - true: The call is successful.
	//
	// - false: the call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AttachDataQualityRulesToEvaluationTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachDataQualityRulesToEvaluationTaskResponseBody) GoString() string {
	return s.String()
}

func (s *AttachDataQualityRulesToEvaluationTaskResponseBody) SetRequestId(v string) *AttachDataQualityRulesToEvaluationTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *AttachDataQualityRulesToEvaluationTaskResponseBody) SetSuccess(v bool) *AttachDataQualityRulesToEvaluationTaskResponseBody {
	s.Success = &v
	return s
}

type AttachDataQualityRulesToEvaluationTaskResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachDataQualityRulesToEvaluationTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachDataQualityRulesToEvaluationTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachDataQualityRulesToEvaluationTaskResponse) GoString() string {
	return s.String()
}

func (s *AttachDataQualityRulesToEvaluationTaskResponse) SetHeaders(v map[string]*string) *AttachDataQualityRulesToEvaluationTaskResponse {
	s.Headers = v
	return s
}

func (s *AttachDataQualityRulesToEvaluationTaskResponse) SetStatusCode(v int32) *AttachDataQualityRulesToEvaluationTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachDataQualityRulesToEvaluationTaskResponse) SetBody(v *AttachDataQualityRulesToEvaluationTaskResponseBody) *AttachDataQualityRulesToEvaluationTaskResponse {
	s.Body = v
	return s
}

type BatchUpdateTasksRequest struct {
	// The remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The tasks.
	Tasks []*BatchUpdateTasksRequestTasks `json:"Tasks,omitempty" xml:"Tasks,omitempty" type:"Repeated"`
}

func (s BatchUpdateTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateTasksRequest) GoString() string {
	return s.String()
}

func (s *BatchUpdateTasksRequest) SetComment(v string) *BatchUpdateTasksRequest {
	s.Comment = &v
	return s
}

func (s *BatchUpdateTasksRequest) SetTasks(v []*BatchUpdateTasksRequestTasks) *BatchUpdateTasksRequest {
	s.Tasks = v
	return s
}

type BatchUpdateTasksRequestTasks struct {
	// The information about the associated data source.
	DataSource *BatchUpdateTasksRequestTasksDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The task ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The rerun interval. Unit: seconds.
	//
	// example:
	//
	// 60
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode. Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The configurations of the runtime environment, such as the resource group information.
	RuntimeResource *BatchUpdateTasksRequestTasksRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The tags.
	Tags []*BatchUpdateTasksRequestTasksTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The trigger method.
	Trigger *BatchUpdateTasksRequestTasksTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s BatchUpdateTasksRequestTasks) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateTasksRequestTasks) GoString() string {
	return s.String()
}

func (s *BatchUpdateTasksRequestTasks) SetDataSource(v *BatchUpdateTasksRequestTasksDataSource) *BatchUpdateTasksRequestTasks {
	s.DataSource = v
	return s
}

func (s *BatchUpdateTasksRequestTasks) SetDescription(v string) *BatchUpdateTasksRequestTasks {
	s.Description = &v
	return s
}

func (s *BatchUpdateTasksRequestTasks) SetEnvType(v string) *BatchUpdateTasksRequestTasks {
	s.EnvType = &v
	return s
}

func (s *BatchUpdateTasksRequestTasks) SetId(v int64) *BatchUpdateTasksRequestTasks {
	s.Id = &v
	return s
}

func (s *BatchUpdateTasksRequestTasks) SetName(v string) *BatchUpdateTasksRequestTasks {
	s.Name = &v
	return s
}

func (s *BatchUpdateTasksRequestTasks) SetOwner(v string) *BatchUpdateTasksRequestTasks {
	s.Owner = &v
	return s
}

func (s *BatchUpdateTasksRequestTasks) SetRerunInterval(v int32) *BatchUpdateTasksRequestTasks {
	s.RerunInterval = &v
	return s
}

func (s *BatchUpdateTasksRequestTasks) SetRerunMode(v string) *BatchUpdateTasksRequestTasks {
	s.RerunMode = &v
	return s
}

func (s *BatchUpdateTasksRequestTasks) SetRerunTimes(v int32) *BatchUpdateTasksRequestTasks {
	s.RerunTimes = &v
	return s
}

func (s *BatchUpdateTasksRequestTasks) SetRuntimeResource(v *BatchUpdateTasksRequestTasksRuntimeResource) *BatchUpdateTasksRequestTasks {
	s.RuntimeResource = v
	return s
}

func (s *BatchUpdateTasksRequestTasks) SetTags(v []*BatchUpdateTasksRequestTasksTags) *BatchUpdateTasksRequestTasks {
	s.Tags = v
	return s
}

func (s *BatchUpdateTasksRequestTasks) SetTimeout(v int32) *BatchUpdateTasksRequestTasks {
	s.Timeout = &v
	return s
}

func (s *BatchUpdateTasksRequestTasks) SetTrigger(v *BatchUpdateTasksRequestTasksTrigger) *BatchUpdateTasksRequestTasks {
	s.Trigger = v
	return s
}

type BatchUpdateTasksRequestTasksDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// odps_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s BatchUpdateTasksRequestTasksDataSource) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateTasksRequestTasksDataSource) GoString() string {
	return s.String()
}

func (s *BatchUpdateTasksRequestTasksDataSource) SetName(v string) *BatchUpdateTasksRequestTasksDataSource {
	s.Name = &v
	return s
}

type BatchUpdateTasksRequestTasksRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s BatchUpdateTasksRequestTasksRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateTasksRequestTasksRuntimeResource) GoString() string {
	return s.String()
}

func (s *BatchUpdateTasksRequestTasksRuntimeResource) SetCu(v string) *BatchUpdateTasksRequestTasksRuntimeResource {
	s.Cu = &v
	return s
}

func (s *BatchUpdateTasksRequestTasksRuntimeResource) SetImage(v string) *BatchUpdateTasksRequestTasksRuntimeResource {
	s.Image = &v
	return s
}

func (s *BatchUpdateTasksRequestTasksRuntimeResource) SetResourceGroupId(v string) *BatchUpdateTasksRequestTasksRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type BatchUpdateTasksRequestTasksTags struct {
	// The tag key.
	//
	// This parameter is required.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s BatchUpdateTasksRequestTasksTags) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateTasksRequestTasksTags) GoString() string {
	return s.String()
}

func (s *BatchUpdateTasksRequestTasksTags) SetKey(v string) *BatchUpdateTasksRequestTasksTags {
	s.Key = &v
	return s
}

func (s *BatchUpdateTasksRequestTasksTags) SetValue(v string) *BatchUpdateTasksRequestTasksTags {
	s.Value = &v
	return s
}

type BatchUpdateTasksRequestTasksTrigger struct {
	// The CRON expression. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler. The value of this parameter is in the `yyyy-mm-dd hh:mm:ss`.
	//
	// example:
	//
	// 9999-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler. The value of this parameter is in the `yyyy-mm-dd hh:mm:ss`.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s BatchUpdateTasksRequestTasksTrigger) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateTasksRequestTasksTrigger) GoString() string {
	return s.String()
}

func (s *BatchUpdateTasksRequestTasksTrigger) SetCron(v string) *BatchUpdateTasksRequestTasksTrigger {
	s.Cron = &v
	return s
}

func (s *BatchUpdateTasksRequestTasksTrigger) SetEndTime(v string) *BatchUpdateTasksRequestTasksTrigger {
	s.EndTime = &v
	return s
}

func (s *BatchUpdateTasksRequestTasksTrigger) SetRecurrence(v string) *BatchUpdateTasksRequestTasksTrigger {
	s.Recurrence = &v
	return s
}

func (s *BatchUpdateTasksRequestTasksTrigger) SetStartTime(v string) *BatchUpdateTasksRequestTasksTrigger {
	s.StartTime = &v
	return s
}

func (s *BatchUpdateTasksRequestTasksTrigger) SetType(v string) *BatchUpdateTasksRequestTasksTrigger {
	s.Type = &v
	return s
}

type BatchUpdateTasksShrinkRequest struct {
	// The remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The tasks.
	TasksShrink *string `json:"Tasks,omitempty" xml:"Tasks,omitempty"`
}

func (s BatchUpdateTasksShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateTasksShrinkRequest) GoString() string {
	return s.String()
}

func (s *BatchUpdateTasksShrinkRequest) SetComment(v string) *BatchUpdateTasksShrinkRequest {
	s.Comment = &v
	return s
}

func (s *BatchUpdateTasksShrinkRequest) SetTasksShrink(v string) *BatchUpdateTasksShrinkRequest {
	s.TasksShrink = &v
	return s
}

type BatchUpdateTasksResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the batch operation, which is in the MAP structure. The task ID serves as a key, and the result serves as a value.
	SuccessInfo map[string]*SuccessInfoValue `json:"SuccessInfo,omitempty" xml:"SuccessInfo,omitempty"`
}

func (s BatchUpdateTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateTasksResponseBody) GoString() string {
	return s.String()
}

func (s *BatchUpdateTasksResponseBody) SetRequestId(v string) *BatchUpdateTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchUpdateTasksResponseBody) SetSuccessInfo(v map[string]*SuccessInfoValue) *BatchUpdateTasksResponseBody {
	s.SuccessInfo = v
	return s
}

type BatchUpdateTasksResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchUpdateTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchUpdateTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateTasksResponse) GoString() string {
	return s.String()
}

func (s *BatchUpdateTasksResponse) SetHeaders(v map[string]*string) *BatchUpdateTasksResponse {
	s.Headers = v
	return s
}

func (s *BatchUpdateTasksResponse) SetStatusCode(v int32) *BatchUpdateTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchUpdateTasksResponse) SetBody(v *BatchUpdateTasksResponseBody) *BatchUpdateTasksResponse {
	s.Body = v
	return s
}

type CloneDataSourceRequest struct {
	// The name of the destination data source The name can contain letters, digits, and underscores (_), and must start with a letter. It cannot exceed 60 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// demo_holo_datasource
	CloneDataSourceName *string `json:"CloneDataSourceName,omitempty" xml:"CloneDataSourceName,omitempty"`
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 16036
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CloneDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CloneDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CloneDataSourceRequest) SetCloneDataSourceName(v string) *CloneDataSourceRequest {
	s.CloneDataSourceName = &v
	return s
}

func (s *CloneDataSourceRequest) SetId(v int64) *CloneDataSourceRequest {
	s.Id = &v
	return s
}

type CloneDataSourceResponseBody struct {
	// The ID of the cloned data source.
	//
	// example:
	//
	// 19715
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the request. It is used to locate logs and troubleshoot problems.
	//
	// example:
	//
	// FCD583B9-346B-5E75-82C1-4A7C192C48DB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CloneDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloneDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CloneDataSourceResponseBody) SetId(v int64) *CloneDataSourceResponseBody {
	s.Id = &v
	return s
}

func (s *CloneDataSourceResponseBody) SetRequestId(v string) *CloneDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type CloneDataSourceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CloneDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CloneDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CloneDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CloneDataSourceResponse) SetHeaders(v map[string]*string) *CloneDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CloneDataSourceResponse) SetStatusCode(v int32) *CloneDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CloneDataSourceResponse) SetBody(v *CloneDataSourceResponseBody) *CloneDataSourceResponse {
	s.Body = v
	return s
}

type CreateAlertRuleRequest struct {
	// Indicates whether the rule is enabled.
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The name of the rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// xm_create_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configuration for the alert notification.
	Notification *CreateAlertRuleRequestNotification `json:"Notification,omitempty" xml:"Notification,omitempty" type:"Struct"`
	// The ID of the Alibaba Cloud account used by the owner of the rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// 279114181716147735
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The alert triggering condition.
	//
	// This parameter is required.
	TriggerCondition *CreateAlertRuleRequestTriggerCondition `json:"TriggerCondition,omitempty" xml:"TriggerCondition,omitempty" type:"Struct"`
}

func (s CreateAlertRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequest) SetEnabled(v bool) *CreateAlertRuleRequest {
	s.Enabled = &v
	return s
}

func (s *CreateAlertRuleRequest) SetName(v string) *CreateAlertRuleRequest {
	s.Name = &v
	return s
}

func (s *CreateAlertRuleRequest) SetNotification(v *CreateAlertRuleRequestNotification) *CreateAlertRuleRequest {
	s.Notification = v
	return s
}

func (s *CreateAlertRuleRequest) SetOwner(v string) *CreateAlertRuleRequest {
	s.Owner = &v
	return s
}

func (s *CreateAlertRuleRequest) SetTriggerCondition(v *CreateAlertRuleRequestTriggerCondition) *CreateAlertRuleRequest {
	s.TriggerCondition = v
	return s
}

type CreateAlertRuleRequestNotification struct {
	// The alert notification channels.
	//
	// This parameter is required.
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
	// The interval at which an alert notification is sent. Unit: minutes. Valid values: [5,10000].
	//
	// example:
	//
	// 30
	IntervalInMinutes *int32 `json:"IntervalInMinutes,omitempty" xml:"IntervalInMinutes,omitempty"`
	// The maximum number of times an alert notification can be sent within a calendar day. Valid values: [1, 10000].
	//
	// example:
	//
	// 3
	Maximum *int32 `json:"Maximum,omitempty" xml:"Maximum,omitempty"`
	// The alert recipients.
	//
	// This parameter is required.
	Receivers []*CreateAlertRuleRequestNotificationReceivers `json:"Receivers,omitempty" xml:"Receivers,omitempty" type:"Repeated"`
	// The end time for silence. The time is in the HH:mm format.
	//
	// example:
	//
	// 00:00:00
	SilenceEndTime *string `json:"SilenceEndTime,omitempty" xml:"SilenceEndTime,omitempty"`
	// The start time for silence. The time is in the HH:mm format.
	//
	// example:
	//
	// 00:00:00
	SilenceStartTime *string `json:"SilenceStartTime,omitempty" xml:"SilenceStartTime,omitempty"`
}

func (s CreateAlertRuleRequestNotification) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequestNotification) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequestNotification) SetChannels(v []*string) *CreateAlertRuleRequestNotification {
	s.Channels = v
	return s
}

func (s *CreateAlertRuleRequestNotification) SetIntervalInMinutes(v int32) *CreateAlertRuleRequestNotification {
	s.IntervalInMinutes = &v
	return s
}

func (s *CreateAlertRuleRequestNotification) SetMaximum(v int32) *CreateAlertRuleRequestNotification {
	s.Maximum = &v
	return s
}

func (s *CreateAlertRuleRequestNotification) SetReceivers(v []*CreateAlertRuleRequestNotificationReceivers) *CreateAlertRuleRequestNotification {
	s.Receivers = v
	return s
}

func (s *CreateAlertRuleRequestNotification) SetSilenceEndTime(v string) *CreateAlertRuleRequestNotification {
	s.SilenceEndTime = &v
	return s
}

func (s *CreateAlertRuleRequestNotification) SetSilenceStartTime(v string) *CreateAlertRuleRequestNotification {
	s.SilenceStartTime = &v
	return s
}

type CreateAlertRuleRequestNotificationReceivers struct {
	// The additional configuration of the alert recipient. If the ReceiverType parameter is set to DingdingUrl, you can set this parameter to {"atAll":true} to remind all members in a DingTalk group.
	//
	// example:
	//
	// {"atAll":true}
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// The type of the alert recipient. Valid valves:
	//
	// 	- AliUid: Alibaba Cloud account ID.
	//
	// 	- Shift Schedules: the personnel in a shift schedule.
	//
	// 	- TaskOwner: the task owner. The task owner can receive custom alerts and event alerts.
	//
	// 	- Owner: the baseline owner. The baseline owner can receive baseline alerts.
	//
	// 	- WebhookUrl: URL of a custom webhook.
	//
	// 	- DingdingUrl: DingTalk webhook URL.
	//
	// 	- FeishuUrl: Lark webhook URL.
	//
	// 	- WeixinUrl: WeCom webhook URL.
	//
	// example:
	//
	// TaskOwner
	ReceiverType *string `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	// The ID of the alert recipient.
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s CreateAlertRuleRequestNotificationReceivers) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequestNotificationReceivers) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequestNotificationReceivers) SetExtension(v string) *CreateAlertRuleRequestNotificationReceivers {
	s.Extension = &v
	return s
}

func (s *CreateAlertRuleRequestNotificationReceivers) SetReceiverType(v string) *CreateAlertRuleRequestNotificationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *CreateAlertRuleRequestNotificationReceivers) SetReceiverValues(v []*string) *CreateAlertRuleRequestNotificationReceivers {
	s.ReceiverValues = v
	return s
}

type CreateAlertRuleRequestTriggerCondition struct {
	// The extended information about the rule. This parameter is required for specific types of alerts.
	Extension *CreateAlertRuleRequestTriggerConditionExtension `json:"Extension,omitempty" xml:"Extension,omitempty" type:"Struct"`
	// The monitored objects.
	Target *CreateAlertRuleRequestTriggerConditionTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The alert type. Valid values:
	//
	// 	- Finished: An instance is successfully run.
	//
	// 	- UnFinished: An instance does not finish running before a specified point in time.
	//
	// 	- Error: An error occurs on an instance.
	//
	// 	- CycleUnfinished: An instance does not finish running as expected within a specific cycle.
	//
	// 	- Timeout: An instance times out.
	//
	// 	- InstanceTransferComplete: An instance is generated by the auto triggered node.
	//
	// 	- InstanceTransferFluctuate: The number of generated instances fluctuates.
	//
	// 	- ExhaustedError: An error persists after an instance is automatically rerun.
	//
	// 	- InstanceKeyword: An instance with errors contains specified keywords.
	//
	// 	- InstanceErrorCount: The number of instances on which an error occurs reaches a specified threshold.
	//
	// 	- InstanceErrorPercentage: The proportion of instances on which an error occurs in the workspace to the total number of instances reaches a specified threshold.
	//
	// 	- ResourceGroupPercentage: The usage rate of the resource group reaches a specified threshold.
	//
	// 	- ResourceGroupWaitCount: The number of instances that are waiting for resources in the resource group reaches a specified threshold.
	//
	// example:
	//
	// Error
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateAlertRuleRequestTriggerCondition) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequestTriggerCondition) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequestTriggerCondition) SetExtension(v *CreateAlertRuleRequestTriggerConditionExtension) *CreateAlertRuleRequestTriggerCondition {
	s.Extension = v
	return s
}

func (s *CreateAlertRuleRequestTriggerCondition) SetTarget(v *CreateAlertRuleRequestTriggerConditionTarget) *CreateAlertRuleRequestTriggerCondition {
	s.Target = v
	return s
}

func (s *CreateAlertRuleRequestTriggerCondition) SetType(v string) *CreateAlertRuleRequestTriggerCondition {
	s.Type = &v
	return s
}

type CreateAlertRuleRequestTriggerConditionExtension struct {
	// The configuration for an alert of the CycleUnfinished type.
	CycleUnfinished *CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinished `json:"CycleUnfinished,omitempty" xml:"CycleUnfinished,omitempty" type:"Struct"`
	// The configuration for an alert of the Error type.
	Error *CreateAlertRuleRequestTriggerConditionExtensionError `json:"Error,omitempty" xml:"Error,omitempty" type:"Struct"`
	// The configuration for an alert of the InstanceErrorCount type.
	InstanceErrorCount *CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount `json:"InstanceErrorCount,omitempty" xml:"InstanceErrorCount,omitempty" type:"Struct"`
	// The configuration for an alert of the InstanceErrorPercentage type.
	InstanceErrorPercentage *CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage `json:"InstanceErrorPercentage,omitempty" xml:"InstanceErrorPercentage,omitempty" type:"Struct"`
	// The configuration for an alert of the InstanceTransferFluctuate type.
	InstanceTransferFluctuate *CreateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate `json:"InstanceTransferFluctuate,omitempty" xml:"InstanceTransferFluctuate,omitempty" type:"Struct"`
	// The configuration for an alert of the Timeout type.
	Timeout *CreateAlertRuleRequestTriggerConditionExtensionTimeout `json:"Timeout,omitempty" xml:"Timeout,omitempty" type:"Struct"`
	// The configuration for an alert of the UnFinished type.
	UnFinished *CreateAlertRuleRequestTriggerConditionExtensionUnFinished `json:"UnFinished,omitempty" xml:"UnFinished,omitempty" type:"Struct"`
}

func (s CreateAlertRuleRequestTriggerConditionExtension) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequestTriggerConditionExtension) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequestTriggerConditionExtension) SetCycleUnfinished(v *CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinished) *CreateAlertRuleRequestTriggerConditionExtension {
	s.CycleUnfinished = v
	return s
}

func (s *CreateAlertRuleRequestTriggerConditionExtension) SetError(v *CreateAlertRuleRequestTriggerConditionExtensionError) *CreateAlertRuleRequestTriggerConditionExtension {
	s.Error = v
	return s
}

func (s *CreateAlertRuleRequestTriggerConditionExtension) SetInstanceErrorCount(v *CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount) *CreateAlertRuleRequestTriggerConditionExtension {
	s.InstanceErrorCount = v
	return s
}

func (s *CreateAlertRuleRequestTriggerConditionExtension) SetInstanceErrorPercentage(v *CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage) *CreateAlertRuleRequestTriggerConditionExtension {
	s.InstanceErrorPercentage = v
	return s
}

func (s *CreateAlertRuleRequestTriggerConditionExtension) SetInstanceTransferFluctuate(v *CreateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate) *CreateAlertRuleRequestTriggerConditionExtension {
	s.InstanceTransferFluctuate = v
	return s
}

func (s *CreateAlertRuleRequestTriggerConditionExtension) SetTimeout(v *CreateAlertRuleRequestTriggerConditionExtensionTimeout) *CreateAlertRuleRequestTriggerConditionExtension {
	s.Timeout = v
	return s
}

func (s *CreateAlertRuleRequestTriggerConditionExtension) SetUnFinished(v *CreateAlertRuleRequestTriggerConditionExtensionUnFinished) *CreateAlertRuleRequestTriggerConditionExtension {
	s.UnFinished = v
	return s
}

type CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinished struct {
	// The configurations of the scheduling cycle and timeout period of the instance.
	CycleAndTime []*CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime `json:"CycleAndTime,omitempty" xml:"CycleAndTime,omitempty" type:"Repeated"`
}

func (s CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinished) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinished) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinished) SetCycleAndTime(v []*CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime) *CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinished {
	s.CycleAndTime = v
	return s
}

type CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime struct {
	// The ID of the scheduling cycle of the instance. Valid values: [1,288].
	//
	// example:
	//
	// 1
	CycleId *int32 `json:"CycleId,omitempty" xml:"CycleId,omitempty"`
	// The latest completion time of the instance within the scheduling cycle. The time is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].
	//
	// example:
	//
	// 12:00
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime) SetCycleId(v int32) *CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime {
	s.CycleId = &v
	return s
}

func (s *CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime) SetTime(v string) *CreateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime {
	s.Time = &v
	return s
}

type CreateAlertRuleRequestTriggerConditionExtensionError struct {
	// Specifies whether to trigger an alert if a batch synchronization task is automatically rerun upon a failure.
	//
	// example:
	//
	// false
	AutoRerunAlertEnabled *bool `json:"AutoRerunAlertEnabled,omitempty" xml:"AutoRerunAlertEnabled,omitempty"`
	// The IDs of the real-time computing tasks. This parameter is required when you monitor real-time computing tasks.
	StreamTaskIds []*int64 `json:"StreamTaskIds,omitempty" xml:"StreamTaskIds,omitempty" type:"Repeated"`
}

func (s CreateAlertRuleRequestTriggerConditionExtensionError) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequestTriggerConditionExtensionError) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequestTriggerConditionExtensionError) SetAutoRerunAlertEnabled(v bool) *CreateAlertRuleRequestTriggerConditionExtensionError {
	s.AutoRerunAlertEnabled = &v
	return s
}

func (s *CreateAlertRuleRequestTriggerConditionExtensionError) SetStreamTaskIds(v []*int64) *CreateAlertRuleRequestTriggerConditionExtensionError {
	s.StreamTaskIds = v
	return s
}

type CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount struct {
	// The maximum number of instances on which an error occurs. Valid values: [1,10000].
	//
	// example:
	//
	// 5
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount) SetCount(v int32) *CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount {
	s.Count = &v
	return s
}

type CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage struct {
	// The maximum percentage of instances on which an error occurs in the workspace to the total number of instances. Valid values: [1-100].
	//
	// example:
	//
	// 5
	Percentage *int32 `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
}

func (s CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage) SetPercentage(v int32) *CreateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage {
	s.Percentage = &v
	return s
}

type CreateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate struct {
	// The maximum percentage of fluctuation in the number of auto triggered node instances that are generated in your workspace. Valid values: [1-100].
	//
	// example:
	//
	// 10
	Percentage *int32 `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	// The way in which the number of auto triggered node instances that are generated in your workspace fluctuates. Valid values:
	//
	// 	- abs: the absolute value. The number of instances increases or decreases.
	//
	// 	- increase: The number of instances increases.
	//
	// 	- decrease: The number of instances decreases.
	//
	// example:
	//
	// abs
	Trend *string `json:"Trend,omitempty" xml:"Trend,omitempty"`
}

func (s CreateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate) SetPercentage(v int32) *CreateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate {
	s.Percentage = &v
	return s
}

func (s *CreateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate) SetTrend(v string) *CreateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate {
	s.Trend = &v
	return s
}

type CreateAlertRuleRequestTriggerConditionExtensionTimeout struct {
	// The timeout period. Unit: minutes. Valid values: [1, 21600].
	//
	// example:
	//
	// 10
	TimeoutInMinutes *int32 `json:"TimeoutInMinutes,omitempty" xml:"TimeoutInMinutes,omitempty"`
}

func (s CreateAlertRuleRequestTriggerConditionExtensionTimeout) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequestTriggerConditionExtensionTimeout) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequestTriggerConditionExtensionTimeout) SetTimeoutInMinutes(v int32) *CreateAlertRuleRequestTriggerConditionExtensionTimeout {
	s.TimeoutInMinutes = &v
	return s
}

type CreateAlertRuleRequestTriggerConditionExtensionUnFinished struct {
	// The latest completion time of the instance. The period is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].
	//
	// example:
	//
	// 30:00
	UnFinishedTime *string `json:"UnFinishedTime,omitempty" xml:"UnFinishedTime,omitempty"`
}

func (s CreateAlertRuleRequestTriggerConditionExtensionUnFinished) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequestTriggerConditionExtensionUnFinished) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequestTriggerConditionExtensionUnFinished) SetUnFinishedTime(v string) *CreateAlertRuleRequestTriggerConditionExtensionUnFinished {
	s.UnFinishedTime = &v
	return s
}

type CreateAlertRuleRequestTriggerConditionTarget struct {
	// The nodes that are not to be monitored.
	AllowTasks []*int64 `json:"AllowTasks,omitempty" xml:"AllowTasks,omitempty" type:"Repeated"`
	// The IDs of monitored objects.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// The type of the monitored objects. Valid values:
	//
	// 	- Task: node
	//
	// 	- Baseline: baseline
	//
	// 	- Project: workspace
	//
	// 	- BizProcess: workflow
	//
	// example:
	//
	// Task
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateAlertRuleRequestTriggerConditionTarget) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleRequestTriggerConditionTarget) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleRequestTriggerConditionTarget) SetAllowTasks(v []*int64) *CreateAlertRuleRequestTriggerConditionTarget {
	s.AllowTasks = v
	return s
}

func (s *CreateAlertRuleRequestTriggerConditionTarget) SetIds(v []*int64) *CreateAlertRuleRequestTriggerConditionTarget {
	s.Ids = v
	return s
}

func (s *CreateAlertRuleRequestTriggerConditionTarget) SetType(v string) *CreateAlertRuleRequestTriggerConditionTarget {
	s.Type = &v
	return s
}

type CreateAlertRuleShrinkRequest struct {
	// Indicates whether the rule is enabled.
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The name of the rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// xm_create_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configuration for the alert notification.
	NotificationShrink *string `json:"Notification,omitempty" xml:"Notification,omitempty"`
	// The ID of the Alibaba Cloud account used by the owner of the rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// 279114181716147735
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The alert triggering condition.
	//
	// This parameter is required.
	TriggerConditionShrink *string `json:"TriggerCondition,omitempty" xml:"TriggerCondition,omitempty"`
}

func (s CreateAlertRuleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleShrinkRequest) SetEnabled(v bool) *CreateAlertRuleShrinkRequest {
	s.Enabled = &v
	return s
}

func (s *CreateAlertRuleShrinkRequest) SetName(v string) *CreateAlertRuleShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateAlertRuleShrinkRequest) SetNotificationShrink(v string) *CreateAlertRuleShrinkRequest {
	s.NotificationShrink = &v
	return s
}

func (s *CreateAlertRuleShrinkRequest) SetOwner(v string) *CreateAlertRuleShrinkRequest {
	s.Owner = &v
	return s
}

func (s *CreateAlertRuleShrinkRequest) SetTriggerConditionShrink(v string) *CreateAlertRuleShrinkRequest {
	s.TriggerConditionShrink = &v
	return s
}

type CreateAlertRuleResponseBody struct {
	// The rule ID.
	//
	// example:
	//
	// 123123
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The request ID.
	//
	// example:
	//
	// A6C6B486-E3A2-5D52-9E76-D9380485D946
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAlertRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleResponseBody) SetId(v int64) *CreateAlertRuleResponseBody {
	s.Id = &v
	return s
}

func (s *CreateAlertRuleResponseBody) SetRequestId(v string) *CreateAlertRuleResponseBody {
	s.RequestId = &v
	return s
}

type CreateAlertRuleResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAlertRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAlertRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateAlertRuleResponse) SetHeaders(v map[string]*string) *CreateAlertRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateAlertRuleResponse) SetStatusCode(v int32) *CreateAlertRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAlertRuleResponse) SetBody(v *CreateAlertRuleResponseBody) *CreateAlertRuleResponse {
	s.Body = v
	return s
}

type CreateBusinessRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// My business process
	BusinessName *string `json:"BusinessName,omitempty" xml:"BusinessName,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 1000000000001
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	// example:
	//
	// NORMAL
	UseType *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s CreateBusinessRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessRequest) GoString() string {
	return s.String()
}

func (s *CreateBusinessRequest) SetBusinessName(v string) *CreateBusinessRequest {
	s.BusinessName = &v
	return s
}

func (s *CreateBusinessRequest) SetDescription(v string) *CreateBusinessRequest {
	s.Description = &v
	return s
}

func (s *CreateBusinessRequest) SetOwner(v string) *CreateBusinessRequest {
	s.Owner = &v
	return s
}

func (s *CreateBusinessRequest) SetProjectId(v int64) *CreateBusinessRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateBusinessRequest) SetProjectIdentifier(v string) *CreateBusinessRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *CreateBusinessRequest) SetUseType(v string) *CreateBusinessRequest {
	s.UseType = &v
	return s
}

type CreateBusinessResponseBody struct {
	// example:
	//
	// 100001
	BusinessId *int64 `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateBusinessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBusinessResponseBody) SetBusinessId(v int64) *CreateBusinessResponseBody {
	s.BusinessId = &v
	return s
}

func (s *CreateBusinessResponseBody) SetErrorCode(v string) *CreateBusinessResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateBusinessResponseBody) SetErrorMessage(v string) *CreateBusinessResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateBusinessResponseBody) SetHttpStatusCode(v int32) *CreateBusinessResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateBusinessResponseBody) SetRequestId(v string) *CreateBusinessResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateBusinessResponseBody) SetSuccess(v bool) *CreateBusinessResponseBody {
	s.Success = &v
	return s
}

type CreateBusinessResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateBusinessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateBusinessResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBusinessResponse) GoString() string {
	return s.String()
}

func (s *CreateBusinessResponse) SetHeaders(v map[string]*string) *CreateBusinessResponse {
	s.Headers = v
	return s
}

func (s *CreateBusinessResponse) SetStatusCode(v int32) *CreateBusinessResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBusinessResponse) SetBody(v *CreateBusinessResponseBody) *CreateBusinessResponse {
	s.Body = v
	return s
}

type CreateDIAlarmRuleRequest struct {
	// The client token that is used to ensure the idempotence of the request.
	//
	// example:
	//
	// ABFUOEUOTRTRJKE
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the synchronization task with which the alert rule is associated.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The description of the alert rule.
	//
	// example:
	//
	// The description of the alert rule.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the alert rule. By default, the alert rule is disabled.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The metric type in the alert rule. Valid values:
	//
	// 	- Heartbeat
	//
	// 	- FailoverCount
	//
	// 	- Delay
	//
	// 	- DdlReport
	//
	// 	- ResourceUtilization
	//
	// This parameter is required.
	//
	// example:
	//
	// Heartbeat
	MetricType *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	// The name of the alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// alartRule
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The alert notification settings.
	//
	// This parameter is required.
	NotificationSettings *CreateDIAlarmRuleRequestNotificationSettings `json:"NotificationSettings,omitempty" xml:"NotificationSettings,omitempty" type:"Struct"`
	// The conditions that can trigger the alert rule.
	//
	// This parameter is required.
	TriggerConditions []*CreateDIAlarmRuleRequestTriggerConditions `json:"TriggerConditions,omitempty" xml:"TriggerConditions,omitempty" type:"Repeated"`
}

func (s CreateDIAlarmRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDIAlarmRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateDIAlarmRuleRequest) SetClientToken(v string) *CreateDIAlarmRuleRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDIAlarmRuleRequest) SetDIJobId(v int64) *CreateDIAlarmRuleRequest {
	s.DIJobId = &v
	return s
}

func (s *CreateDIAlarmRuleRequest) SetDescription(v string) *CreateDIAlarmRuleRequest {
	s.Description = &v
	return s
}

func (s *CreateDIAlarmRuleRequest) SetEnabled(v bool) *CreateDIAlarmRuleRequest {
	s.Enabled = &v
	return s
}

func (s *CreateDIAlarmRuleRequest) SetMetricType(v string) *CreateDIAlarmRuleRequest {
	s.MetricType = &v
	return s
}

func (s *CreateDIAlarmRuleRequest) SetName(v string) *CreateDIAlarmRuleRequest {
	s.Name = &v
	return s
}

func (s *CreateDIAlarmRuleRequest) SetNotificationSettings(v *CreateDIAlarmRuleRequestNotificationSettings) *CreateDIAlarmRuleRequest {
	s.NotificationSettings = v
	return s
}

func (s *CreateDIAlarmRuleRequest) SetTriggerConditions(v []*CreateDIAlarmRuleRequestTriggerConditions) *CreateDIAlarmRuleRequest {
	s.TriggerConditions = v
	return s
}

type CreateDIAlarmRuleRequestNotificationSettings struct {
	// Deprecated
	//
	// This parameter is deprecated and replaced by the MuteInterval parameter.
	//
	// example:
	//
	// 5
	InhibitionInterval *int32 `json:"InhibitionInterval,omitempty" xml:"InhibitionInterval,omitempty"`
	// The duration of the alert suppression interval. Default value: 5. Unit: minutes.
	//
	// example:
	//
	// 5
	MuteInterval *int32 `json:"MuteInterval,omitempty" xml:"MuteInterval,omitempty"`
	// The alert notification methods.
	NotificationChannels []*CreateDIAlarmRuleRequestNotificationSettingsNotificationChannels `json:"NotificationChannels,omitempty" xml:"NotificationChannels,omitempty" type:"Repeated"`
	// The settings of alert notification recipients.
	NotificationReceivers []*CreateDIAlarmRuleRequestNotificationSettingsNotificationReceivers `json:"NotificationReceivers,omitempty" xml:"NotificationReceivers,omitempty" type:"Repeated"`
}

func (s CreateDIAlarmRuleRequestNotificationSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateDIAlarmRuleRequestNotificationSettings) GoString() string {
	return s.String()
}

func (s *CreateDIAlarmRuleRequestNotificationSettings) SetInhibitionInterval(v int32) *CreateDIAlarmRuleRequestNotificationSettings {
	s.InhibitionInterval = &v
	return s
}

func (s *CreateDIAlarmRuleRequestNotificationSettings) SetMuteInterval(v int32) *CreateDIAlarmRuleRequestNotificationSettings {
	s.MuteInterval = &v
	return s
}

func (s *CreateDIAlarmRuleRequestNotificationSettings) SetNotificationChannels(v []*CreateDIAlarmRuleRequestNotificationSettingsNotificationChannels) *CreateDIAlarmRuleRequestNotificationSettings {
	s.NotificationChannels = v
	return s
}

func (s *CreateDIAlarmRuleRequestNotificationSettings) SetNotificationReceivers(v []*CreateDIAlarmRuleRequestNotificationSettingsNotificationReceivers) *CreateDIAlarmRuleRequestNotificationSettings {
	s.NotificationReceivers = v
	return s
}

type CreateDIAlarmRuleRequestNotificationSettingsNotificationChannels struct {
	// The alert notification method. Valid values:
	//
	// 	- Mail
	//
	// 	- Phone
	//
	// 	- Sms
	//
	// 	- Ding
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
	// The severity level. Valid values:
	//
	// 	- Warning
	//
	// 	- Critical
	//
	// example:
	//
	// Warning
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
}

func (s CreateDIAlarmRuleRequestNotificationSettingsNotificationChannels) String() string {
	return tea.Prettify(s)
}

func (s CreateDIAlarmRuleRequestNotificationSettingsNotificationChannels) GoString() string {
	return s.String()
}

func (s *CreateDIAlarmRuleRequestNotificationSettingsNotificationChannels) SetChannels(v []*string) *CreateDIAlarmRuleRequestNotificationSettingsNotificationChannels {
	s.Channels = v
	return s
}

func (s *CreateDIAlarmRuleRequestNotificationSettingsNotificationChannels) SetSeverity(v string) *CreateDIAlarmRuleRequestNotificationSettingsNotificationChannels {
	s.Severity = &v
	return s
}

type CreateDIAlarmRuleRequestNotificationSettingsNotificationReceivers struct {
	// The recipient type. Valid values: AliyunUid, DingToken, FeishuToken, and WebHookUrl.
	//
	// example:
	//
	// DingToken
	ReceiverType *string `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	// The recipient.
	//
	// 	- If the ReceiverType parameter is set to AliyunUid, set this parameter to the Alibaba Cloud account ID of a user.
	//
	// 	- If the ReceiverType parameter is set to DingToken, set this parameter to the token of a DingTalk chatbot.
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s CreateDIAlarmRuleRequestNotificationSettingsNotificationReceivers) String() string {
	return tea.Prettify(s)
}

func (s CreateDIAlarmRuleRequestNotificationSettingsNotificationReceivers) GoString() string {
	return s.String()
}

func (s *CreateDIAlarmRuleRequestNotificationSettingsNotificationReceivers) SetReceiverType(v string) *CreateDIAlarmRuleRequestNotificationSettingsNotificationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *CreateDIAlarmRuleRequestNotificationSettingsNotificationReceivers) SetReceiverValues(v []*string) *CreateDIAlarmRuleRequestNotificationSettingsNotificationReceivers {
	s.ReceiverValues = v
	return s
}

type CreateDIAlarmRuleRequestTriggerConditions struct {
	// Deprecated
	//
	// This parameter is deprecated and replaced by the DdlTypes parameter.
	DdlReportTags []*string `json:"DdlReportTags,omitempty" xml:"DdlReportTags,omitempty" type:"Repeated"`
	// The types of DDL operations for which the alert rule takes effect.
	DdlTypes []*string `json:"DdlTypes,omitempty" xml:"DdlTypes,omitempty" type:"Repeated"`
	// The time interval for alert calculation. Unit: minutes.
	//
	// example:
	//
	// 10
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The severity level. Valid values:
	//
	// 	- Warning
	//
	// 	- Critical
	//
	// example:
	//
	// Warning
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The alert threshold.
	//
	// 	- If the alert rule is for task status, you do not need to specify a threshold.
	//
	// 	- If the alert rule is for failovers, you must specify the number of failovers.
	//
	// 	- If the alert rule is for latency, you must specify the latency duration, in seconds.
	//
	// example:
	//
	// 10
	Threshold *int64 `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
}

func (s CreateDIAlarmRuleRequestTriggerConditions) String() string {
	return tea.Prettify(s)
}

func (s CreateDIAlarmRuleRequestTriggerConditions) GoString() string {
	return s.String()
}

func (s *CreateDIAlarmRuleRequestTriggerConditions) SetDdlReportTags(v []*string) *CreateDIAlarmRuleRequestTriggerConditions {
	s.DdlReportTags = v
	return s
}

func (s *CreateDIAlarmRuleRequestTriggerConditions) SetDdlTypes(v []*string) *CreateDIAlarmRuleRequestTriggerConditions {
	s.DdlTypes = v
	return s
}

func (s *CreateDIAlarmRuleRequestTriggerConditions) SetDuration(v int64) *CreateDIAlarmRuleRequestTriggerConditions {
	s.Duration = &v
	return s
}

func (s *CreateDIAlarmRuleRequestTriggerConditions) SetSeverity(v string) *CreateDIAlarmRuleRequestTriggerConditions {
	s.Severity = &v
	return s
}

func (s *CreateDIAlarmRuleRequestTriggerConditions) SetThreshold(v int64) *CreateDIAlarmRuleRequestTriggerConditions {
	s.Threshold = &v
	return s
}

type CreateDIAlarmRuleShrinkRequest struct {
	// The client token that is used to ensure the idempotence of the request.
	//
	// example:
	//
	// ABFUOEUOTRTRJKE
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the synchronization task with which the alert rule is associated.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The description of the alert rule.
	//
	// example:
	//
	// The description of the alert rule.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the alert rule. By default, the alert rule is disabled.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The metric type in the alert rule. Valid values:
	//
	// 	- Heartbeat
	//
	// 	- FailoverCount
	//
	// 	- Delay
	//
	// 	- DdlReport
	//
	// 	- ResourceUtilization
	//
	// This parameter is required.
	//
	// example:
	//
	// Heartbeat
	MetricType *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	// The name of the alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// alartRule
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The alert notification settings.
	//
	// This parameter is required.
	NotificationSettingsShrink *string `json:"NotificationSettings,omitempty" xml:"NotificationSettings,omitempty"`
	// The conditions that can trigger the alert rule.
	//
	// This parameter is required.
	TriggerConditionsShrink *string `json:"TriggerConditions,omitempty" xml:"TriggerConditions,omitempty"`
}

func (s CreateDIAlarmRuleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDIAlarmRuleShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateDIAlarmRuleShrinkRequest) SetClientToken(v string) *CreateDIAlarmRuleShrinkRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDIAlarmRuleShrinkRequest) SetDIJobId(v int64) *CreateDIAlarmRuleShrinkRequest {
	s.DIJobId = &v
	return s
}

func (s *CreateDIAlarmRuleShrinkRequest) SetDescription(v string) *CreateDIAlarmRuleShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateDIAlarmRuleShrinkRequest) SetEnabled(v bool) *CreateDIAlarmRuleShrinkRequest {
	s.Enabled = &v
	return s
}

func (s *CreateDIAlarmRuleShrinkRequest) SetMetricType(v string) *CreateDIAlarmRuleShrinkRequest {
	s.MetricType = &v
	return s
}

func (s *CreateDIAlarmRuleShrinkRequest) SetName(v string) *CreateDIAlarmRuleShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateDIAlarmRuleShrinkRequest) SetNotificationSettingsShrink(v string) *CreateDIAlarmRuleShrinkRequest {
	s.NotificationSettingsShrink = &v
	return s
}

func (s *CreateDIAlarmRuleShrinkRequest) SetTriggerConditionsShrink(v string) *CreateDIAlarmRuleShrinkRequest {
	s.TriggerConditionsShrink = &v
	return s
}

type CreateDIAlarmRuleResponseBody struct {
	// Deprecated
	//
	// This parameter is deprecated and is replaced by the Id parameter.
	//
	// example:
	//
	// 1
	DIAlarmRuleId *string `json:"DIAlarmRuleId,omitempty" xml:"DIAlarmRuleId,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// C636A747-7E4E-594D-94CD-2B4F8A9A9A63
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDIAlarmRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDIAlarmRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDIAlarmRuleResponseBody) SetDIAlarmRuleId(v string) *CreateDIAlarmRuleResponseBody {
	s.DIAlarmRuleId = &v
	return s
}

func (s *CreateDIAlarmRuleResponseBody) SetId(v int64) *CreateDIAlarmRuleResponseBody {
	s.Id = &v
	return s
}

func (s *CreateDIAlarmRuleResponseBody) SetRequestId(v string) *CreateDIAlarmRuleResponseBody {
	s.RequestId = &v
	return s
}

type CreateDIAlarmRuleResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDIAlarmRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDIAlarmRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDIAlarmRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateDIAlarmRuleResponse) SetHeaders(v map[string]*string) *CreateDIAlarmRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateDIAlarmRuleResponse) SetStatusCode(v int32) *CreateDIAlarmRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDIAlarmRuleResponse) SetBody(v *CreateDIAlarmRuleResponseBody) *CreateDIAlarmRuleResponse {
	s.Body = v
	return s
}

type CreateDIJobRequest struct {
	// The description of the synchronization task.
	//
	// example:
	//
	// The description of the synchronization task.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The settings of the destination. Only a single destination is supported.
	//
	// This parameter is required.
	DestinationDataSourceSettings []*CreateDIJobRequestDestinationDataSourceSettings `json:"DestinationDataSourceSettings,omitempty" xml:"DestinationDataSourceSettings,omitempty" type:"Repeated"`
	// The destination type. Valid values: Hologres, OSS-HDFS, OSS, MaxCompute, LogHub, StarRocks, DataHub, AnalyticDB for MySQL, Kafka, and Hive.
	//
	// This parameter is required.
	//
	// example:
	//
	// Hologres
	DestinationDataSourceType *string `json:"DestinationDataSourceType,omitempty" xml:"DestinationDataSourceType,omitempty"`
	// Deprecated
	//
	// This parameter is deprecated and is replaced by the Name parameter.
	//
	// example:
	//
	// mysql_to_holo_sync_8772
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The settings for the dimension of the synchronization task. The settings include processing policies for DDL messages, policies for data type mappings between source fields and destination fields, and runtime parameters of the synchronization task.
	JobSettings *CreateDIJobRequestJobSettings `json:"JobSettings,omitempty" xml:"JobSettings,omitempty" type:"Struct"`
	// The type of the task. This parameter is optional. Valid values:
	//
	// 	- DatabaseRealtimeMigration: A real-time synchronization task used to synchronize only full data, only incremental data, or full and incremental data in multiple tables of multiple databases at the source.
	//
	// 	- DatabaseOfflineMigration: A batch synchronization task used to synchronize only full data, only incremental data, or full and incremental data in multiple tables of multiple databases at the source.
	//
	// 	- SingleTableRealtimeMigration: A real-time synchronization task used to synchronize only data in single table at the source.
	//
	// example:
	//
	// DatabaseRealtimeMigration
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The synchronization type. Valid values:
	//
	// 	- FullAndRealtimeIncremental: full synchronization and real-time incremental synchronization of data in an entire database
	//
	// 	- RealtimeIncremental: real-time incremental synchronization of data in a single table
	//
	// 	- Full: full batch synchronization of data in an entire database
	//
	// 	- OfflineIncremental: batch incremental synchronization of data in an entire database
	//
	// 	- FullAndOfflineIncremental: full synchronization and batch incremental synchronization of data in an entire database
	//
	// This parameter is required.
	//
	// example:
	//
	// FullAndRealtimeIncremental
	MigrationType *string `json:"MigrationType,omitempty" xml:"MigrationType,omitempty"`
	// The name of the synchronization task.
	//
	// example:
	//
	// mysql_to_holo_sync_8772
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The resource settings.
	//
	// This parameter is required.
	ResourceSettings *CreateDIJobRequestResourceSettings `json:"ResourceSettings,omitempty" xml:"ResourceSettings,omitempty" type:"Struct"`
	// The settings of the source. Only a single source is supported.
	//
	// This parameter is required.
	SourceDataSourceSettings []*CreateDIJobRequestSourceDataSourceSettings `json:"SourceDataSourceSettings,omitempty" xml:"SourceDataSourceSettings,omitempty" type:"Repeated"`
	// The source type. Valid values: PolarDB, MySQL, Kafka, LogHub, Hologres, Oracle, OceanBase, MongoDB, Redshift, Hive, SQL Server, Doris, and ClickHouse.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	SourceDataSourceType *string `json:"SourceDataSourceType,omitempty" xml:"SourceDataSourceType,omitempty"`
	// The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.
	//
	// >  [ { "SourceObjectSelectionRules":[ { "ObjectType":"Database", "Action":"Include", "ExpressionType":"Exact", "Expression":"biz_db" }, { "ObjectType":"Schema", "Action":"Include", "ExpressionType":"Exact", "Expression":"s1" }, { "ObjectType":"Table", "Action":"Include", "ExpressionType":"Exact", "Expression":"table1" } ], "TransformationRuleNames":[ { "RuleName":"my_database_rename_rule", "RuleActionType":"Rename", "RuleTargetType":"Schema" } ] } ]
	//
	// This parameter is required.
	TableMappings []*CreateDIJobRequestTableMappings `json:"TableMappings,omitempty" xml:"TableMappings,omitempty" type:"Repeated"`
	// The list of transformation rules for objects involved in the synchronization task.
	//
	// >  [ { "RuleName":"my_database_rename_rule", "RuleActionType":"Rename", "RuleTargetType":"Schema", "RuleExpression":"{"expression":"${srcDatasoureName}_${srcDatabaseName}"}" } ]
	TransformationRules []*CreateDIJobRequestTransformationRules `json:"TransformationRules,omitempty" xml:"TransformationRules,omitempty" type:"Repeated"`
}

func (s CreateDIJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequest) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequest) SetDescription(v string) *CreateDIJobRequest {
	s.Description = &v
	return s
}

func (s *CreateDIJobRequest) SetDestinationDataSourceSettings(v []*CreateDIJobRequestDestinationDataSourceSettings) *CreateDIJobRequest {
	s.DestinationDataSourceSettings = v
	return s
}

func (s *CreateDIJobRequest) SetDestinationDataSourceType(v string) *CreateDIJobRequest {
	s.DestinationDataSourceType = &v
	return s
}

func (s *CreateDIJobRequest) SetJobName(v string) *CreateDIJobRequest {
	s.JobName = &v
	return s
}

func (s *CreateDIJobRequest) SetJobSettings(v *CreateDIJobRequestJobSettings) *CreateDIJobRequest {
	s.JobSettings = v
	return s
}

func (s *CreateDIJobRequest) SetJobType(v string) *CreateDIJobRequest {
	s.JobType = &v
	return s
}

func (s *CreateDIJobRequest) SetMigrationType(v string) *CreateDIJobRequest {
	s.MigrationType = &v
	return s
}

func (s *CreateDIJobRequest) SetName(v string) *CreateDIJobRequest {
	s.Name = &v
	return s
}

func (s *CreateDIJobRequest) SetProjectId(v int64) *CreateDIJobRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDIJobRequest) SetResourceSettings(v *CreateDIJobRequestResourceSettings) *CreateDIJobRequest {
	s.ResourceSettings = v
	return s
}

func (s *CreateDIJobRequest) SetSourceDataSourceSettings(v []*CreateDIJobRequestSourceDataSourceSettings) *CreateDIJobRequest {
	s.SourceDataSourceSettings = v
	return s
}

func (s *CreateDIJobRequest) SetSourceDataSourceType(v string) *CreateDIJobRequest {
	s.SourceDataSourceType = &v
	return s
}

func (s *CreateDIJobRequest) SetTableMappings(v []*CreateDIJobRequestTableMappings) *CreateDIJobRequest {
	s.TableMappings = v
	return s
}

func (s *CreateDIJobRequest) SetTransformationRules(v []*CreateDIJobRequestTransformationRules) *CreateDIJobRequest {
	s.TransformationRules = v
	return s
}

type CreateDIJobRequestDestinationDataSourceSettings struct {
	// The name of the data source.
	//
	// example:
	//
	// holo_datasource_1
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
}

func (s CreateDIJobRequestDestinationDataSourceSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestDestinationDataSourceSettings) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestDestinationDataSourceSettings) SetDataSourceName(v string) *CreateDIJobRequestDestinationDataSourceSettings {
	s.DataSourceName = &v
	return s
}

type CreateDIJobRequestJobSettings struct {
	// The channel control settings for the synchronization task. You can configure special channel control settings for the following synchronization links: data synchronization between Hologres data sources and data synchronization from Hologres to Kafka.
	//
	// 1.  Holo2Kafka
	//
	// 	- Example: {"destinationChannelSettings":{"kafkaClientProperties":[{"key":"linger.ms","value":"100"}],"keyColumns":["col3"],"writeMode":"canal"}}
	//
	// 	- kafkaClientProperties: the parameters related to a Kafka producer, which are used when you write data to a Kafka data source.
	//
	// 	- keyColumns: the names of Kafka columns to which you want to write data.
	//
	// 	- writeMode: the writing format of the Kafka data source. Valid values: json and canal.
	//
	// 2.  Holo2Holo
	//
	// 	- Example: {"destinationChannelSettings":{"conflictMode":"replace","dynamicColumnAction":"replay","writeMode":"replay"}}
	//
	// 	- conflictMode: the policy used to handle a conflict that occurs during data writing to Hologres. Valid values: replace and ignore.
	//
	// 	- writeMode: the mode in which you want to write data to Hologres. Valid values: replay and insert.
	//
	// 	- dynamicColumnAction: the mode in which you want to write data to dynamic columns in a Hologres table. Valid values: replay, insert, and ignore.
	//
	// example:
	//
	// {"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}
	ChannelSettings *string `json:"ChannelSettings,omitempty" xml:"ChannelSettings,omitempty"`
	// The data type mappings between source fields and destination fields.
	//
	// >  "ColumnDataTypeSettings":[ { "SourceDataType":"Bigint", "DestinationDataType":"Text" } ]
	ColumnDataTypeSettings []*CreateDIJobRequestJobSettingsColumnDataTypeSettings `json:"ColumnDataTypeSettings,omitempty" xml:"ColumnDataTypeSettings,omitempty" type:"Repeated"`
	// The settings for periodic scheduling.
	CycleScheduleSettings *CreateDIJobRequestJobSettingsCycleScheduleSettings `json:"CycleScheduleSettings,omitempty" xml:"CycleScheduleSettings,omitempty" type:"Struct"`
	// The processing settings for DDL messages.
	//
	// >  "DDLHandlingSettings":[ { "Type":"Insert", "Action":"Normal" } ]
	DdlHandlingSettings []*CreateDIJobRequestJobSettingsDdlHandlingSettings `json:"DdlHandlingSettings,omitempty" xml:"DdlHandlingSettings,omitempty" type:"Repeated"`
	// The runtime settings.
	RuntimeSettings []*CreateDIJobRequestJobSettingsRuntimeSettings `json:"RuntimeSettings,omitempty" xml:"RuntimeSettings,omitempty" type:"Repeated"`
}

func (s CreateDIJobRequestJobSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestJobSettings) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestJobSettings) SetChannelSettings(v string) *CreateDIJobRequestJobSettings {
	s.ChannelSettings = &v
	return s
}

func (s *CreateDIJobRequestJobSettings) SetColumnDataTypeSettings(v []*CreateDIJobRequestJobSettingsColumnDataTypeSettings) *CreateDIJobRequestJobSettings {
	s.ColumnDataTypeSettings = v
	return s
}

func (s *CreateDIJobRequestJobSettings) SetCycleScheduleSettings(v *CreateDIJobRequestJobSettingsCycleScheduleSettings) *CreateDIJobRequestJobSettings {
	s.CycleScheduleSettings = v
	return s
}

func (s *CreateDIJobRequestJobSettings) SetDdlHandlingSettings(v []*CreateDIJobRequestJobSettingsDdlHandlingSettings) *CreateDIJobRequestJobSettings {
	s.DdlHandlingSettings = v
	return s
}

func (s *CreateDIJobRequestJobSettings) SetRuntimeSettings(v []*CreateDIJobRequestJobSettingsRuntimeSettings) *CreateDIJobRequestJobSettings {
	s.RuntimeSettings = v
	return s
}

type CreateDIJobRequestJobSettingsColumnDataTypeSettings struct {
	// The data type of the destination field. Valid values: bigint, boolean, string, text, datetime, timestamp, decimal, and binary. Different types of data sources support different data types.
	//
	// example:
	//
	// text
	DestinationDataType *string `json:"DestinationDataType,omitempty" xml:"DestinationDataType,omitempty"`
	// The data type of the source field. Valid values: Valid values: bigint, boolean, string, text, datetime, timestamp, decimal, and binary. Different types of data sources support different data types.
	//
	// example:
	//
	// bigint
	SourceDataType *string `json:"SourceDataType,omitempty" xml:"SourceDataType,omitempty"`
}

func (s CreateDIJobRequestJobSettingsColumnDataTypeSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestJobSettingsColumnDataTypeSettings) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestJobSettingsColumnDataTypeSettings) SetDestinationDataType(v string) *CreateDIJobRequestJobSettingsColumnDataTypeSettings {
	s.DestinationDataType = &v
	return s
}

func (s *CreateDIJobRequestJobSettingsColumnDataTypeSettings) SetSourceDataType(v string) *CreateDIJobRequestJobSettingsColumnDataTypeSettings {
	s.SourceDataType = &v
	return s
}

type CreateDIJobRequestJobSettingsCycleScheduleSettings struct {
	// The synchronization type that requires periodic scheduling. Valid values:
	//
	// 	- Full: full synchronization
	//
	// 	- OfflineIncremental: batch incremental synchronization
	//
	// example:
	//
	// Full
	CycleMigrationType *string `json:"CycleMigrationType,omitempty" xml:"CycleMigrationType,omitempty"`
	// The scheduling parameters.
	//
	// example:
	//
	// bizdate=$bizdate
	ScheduleParameters *string `json:"ScheduleParameters,omitempty" xml:"ScheduleParameters,omitempty"`
}

func (s CreateDIJobRequestJobSettingsCycleScheduleSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestJobSettingsCycleScheduleSettings) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestJobSettingsCycleScheduleSettings) SetCycleMigrationType(v string) *CreateDIJobRequestJobSettingsCycleScheduleSettings {
	s.CycleMigrationType = &v
	return s
}

func (s *CreateDIJobRequestJobSettingsCycleScheduleSettings) SetScheduleParameters(v string) *CreateDIJobRequestJobSettingsCycleScheduleSettings {
	s.ScheduleParameters = &v
	return s
}

type CreateDIJobRequestJobSettingsDdlHandlingSettings struct {
	// The processing policy. Valid values:
	//
	// 	- Ignore: ignores a DDL message.
	//
	// 	- Critical: reports an error for a DDL message.
	//
	// 	- Normal: normally processes a DDL message.
	//
	// example:
	//
	// Critical
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// The type of the DDL operation. Valid values:
	//
	// 	- RenameColumn
	//
	// 	- ModifyColumn
	//
	// 	- CreateTable
	//
	// 	- TruncateTable
	//
	// 	- DropTable
	//
	// 	- DropColumn
	//
	// 	- AddColumn
	//
	// example:
	//
	// AddColumn
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDIJobRequestJobSettingsDdlHandlingSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestJobSettingsDdlHandlingSettings) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestJobSettingsDdlHandlingSettings) SetAction(v string) *CreateDIJobRequestJobSettingsDdlHandlingSettings {
	s.Action = &v
	return s
}

func (s *CreateDIJobRequestJobSettingsDdlHandlingSettings) SetType(v string) *CreateDIJobRequestJobSettingsDdlHandlingSettings {
	s.Type = &v
	return s
}

type CreateDIJobRequestJobSettingsRuntimeSettings struct {
	// The name of the configuration item. Valid values:
	//
	// 	- src.offline.datasource.max.connection: specifies the maximum number of connections that are allowed for reading data from the source of a batch synchronization task.
	//
	// 	- dst.offline.truncate: specifies whether to clear the destination table before data writing.
	//
	// 	- runtime.offline.speed.limit.enable: specifies whether throttling is enabled for a batch synchronization task.
	//
	// 	- runtime.offline.concurrent: specifies the maximum number of parallel threads that are allowed for a batch synchronization task.
	//
	// 	- runtime.enable.auto.create.schema: specifies whether schemas are automatically created in the destination of a synchronization task.
	//
	// 	- runtime.realtime.concurrent: specifies the maximum number of parallel threads that are allowed for a real-time synchronization task.
	//
	// 	- runtime.realtime.failover.minute.dataxcdc: specifies the maximum waiting duration before a synchronization task retries the next restart if the previous restart fails after failover occurs. Unit: minutes.
	//
	// 	- runtime.realtime.failover.times.dataxcdc: specifies the maximum number of failures that are allowed for restarting a synchronization task after failovers occur.
	//
	// example:
	//
	// runtime.offline.concurrent
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the configuration item.
	//
	// example:
	//
	// 1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDIJobRequestJobSettingsRuntimeSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestJobSettingsRuntimeSettings) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestJobSettingsRuntimeSettings) SetName(v string) *CreateDIJobRequestJobSettingsRuntimeSettings {
	s.Name = &v
	return s
}

func (s *CreateDIJobRequestJobSettingsRuntimeSettings) SetValue(v string) *CreateDIJobRequestJobSettingsRuntimeSettings {
	s.Value = &v
	return s
}

type CreateDIJobRequestResourceSettings struct {
	// The resource settings for batch synchronization.
	OfflineResourceSettings *CreateDIJobRequestResourceSettingsOfflineResourceSettings `json:"OfflineResourceSettings,omitempty" xml:"OfflineResourceSettings,omitempty" type:"Struct"`
	// The resource settings for real-time synchronization.
	RealtimeResourceSettings *CreateDIJobRequestResourceSettingsRealtimeResourceSettings `json:"RealtimeResourceSettings,omitempty" xml:"RealtimeResourceSettings,omitempty" type:"Struct"`
	// The resource settings for scheduling.
	ScheduleResourceSettings *CreateDIJobRequestResourceSettingsScheduleResourceSettings `json:"ScheduleResourceSettings,omitempty" xml:"ScheduleResourceSettings,omitempty" type:"Struct"`
}

func (s CreateDIJobRequestResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestResourceSettings) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestResourceSettings) SetOfflineResourceSettings(v *CreateDIJobRequestResourceSettingsOfflineResourceSettings) *CreateDIJobRequestResourceSettings {
	s.OfflineResourceSettings = v
	return s
}

func (s *CreateDIJobRequestResourceSettings) SetRealtimeResourceSettings(v *CreateDIJobRequestResourceSettingsRealtimeResourceSettings) *CreateDIJobRequestResourceSettings {
	s.RealtimeResourceSettings = v
	return s
}

func (s *CreateDIJobRequestResourceSettings) SetScheduleResourceSettings(v *CreateDIJobRequestResourceSettingsScheduleResourceSettings) *CreateDIJobRequestResourceSettings {
	s.ScheduleResourceSettings = v
	return s
}

type CreateDIJobRequestResourceSettingsOfflineResourceSettings struct {
	// The number of compute units (CUs) in the resource group for Data Integration that are used for batch synchronization.
	//
	// example:
	//
	// 2.0
	RequestedCu *float64 `json:"RequestedCu,omitempty" xml:"RequestedCu,omitempty"`
	// The name of the resource group for Data Integration that are used for batch synchronization.
	//
	// example:
	//
	// S_res_group_111_222
	ResourceGroupIdentifier *string `json:"ResourceGroupIdentifier,omitempty" xml:"ResourceGroupIdentifier,omitempty"`
}

func (s CreateDIJobRequestResourceSettingsOfflineResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestResourceSettingsOfflineResourceSettings) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestResourceSettingsOfflineResourceSettings) SetRequestedCu(v float64) *CreateDIJobRequestResourceSettingsOfflineResourceSettings {
	s.RequestedCu = &v
	return s
}

func (s *CreateDIJobRequestResourceSettingsOfflineResourceSettings) SetResourceGroupIdentifier(v string) *CreateDIJobRequestResourceSettingsOfflineResourceSettings {
	s.ResourceGroupIdentifier = &v
	return s
}

type CreateDIJobRequestResourceSettingsRealtimeResourceSettings struct {
	// The number of CUs in the resource group for Data Integration that are used for real-time synchronization.
	//
	// example:
	//
	// 2.0
	RequestedCu *float64 `json:"RequestedCu,omitempty" xml:"RequestedCu,omitempty"`
	// The name of the resource group for Data Integration that are used for real-time synchronization.
	//
	// example:
	//
	// S_res_group_111_222
	ResourceGroupIdentifier *string `json:"ResourceGroupIdentifier,omitempty" xml:"ResourceGroupIdentifier,omitempty"`
}

func (s CreateDIJobRequestResourceSettingsRealtimeResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestResourceSettingsRealtimeResourceSettings) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestResourceSettingsRealtimeResourceSettings) SetRequestedCu(v float64) *CreateDIJobRequestResourceSettingsRealtimeResourceSettings {
	s.RequestedCu = &v
	return s
}

func (s *CreateDIJobRequestResourceSettingsRealtimeResourceSettings) SetResourceGroupIdentifier(v string) *CreateDIJobRequestResourceSettingsRealtimeResourceSettings {
	s.ResourceGroupIdentifier = &v
	return s
}

type CreateDIJobRequestResourceSettingsScheduleResourceSettings struct {
	// The number of CUs in the resource group for scheduling that are used for batch synchronization.
	//
	// example:
	//
	// 2.0
	RequestedCu *float64 `json:"RequestedCu,omitempty" xml:"RequestedCu,omitempty"`
	// The name of the resource group for scheduling that is used for batch synchronization.
	//
	// example:
	//
	// S_res_group_235454102432001_1579085295030
	ResourceGroupIdentifier *string `json:"ResourceGroupIdentifier,omitempty" xml:"ResourceGroupIdentifier,omitempty"`
}

func (s CreateDIJobRequestResourceSettingsScheduleResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestResourceSettingsScheduleResourceSettings) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestResourceSettingsScheduleResourceSettings) SetRequestedCu(v float64) *CreateDIJobRequestResourceSettingsScheduleResourceSettings {
	s.RequestedCu = &v
	return s
}

func (s *CreateDIJobRequestResourceSettingsScheduleResourceSettings) SetResourceGroupIdentifier(v string) *CreateDIJobRequestResourceSettingsScheduleResourceSettings {
	s.ResourceGroupIdentifier = &v
	return s
}

type CreateDIJobRequestSourceDataSourceSettings struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_datasource_1
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The properties of the data source.
	DataSourceProperties *CreateDIJobRequestSourceDataSourceSettingsDataSourceProperties `json:"DataSourceProperties,omitempty" xml:"DataSourceProperties,omitempty" type:"Struct"`
}

func (s CreateDIJobRequestSourceDataSourceSettings) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestSourceDataSourceSettings) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestSourceDataSourceSettings) SetDataSourceName(v string) *CreateDIJobRequestSourceDataSourceSettings {
	s.DataSourceName = &v
	return s
}

func (s *CreateDIJobRequestSourceDataSourceSettings) SetDataSourceProperties(v *CreateDIJobRequestSourceDataSourceSettingsDataSourceProperties) *CreateDIJobRequestSourceDataSourceSettings {
	s.DataSourceProperties = v
	return s
}

type CreateDIJobRequestSourceDataSourceSettingsDataSourceProperties struct {
	// The encoding format of the database.
	//
	// example:
	//
	// UTF-8
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The time zone.
	//
	// example:
	//
	// GMT+8
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
}

func (s CreateDIJobRequestSourceDataSourceSettingsDataSourceProperties) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestSourceDataSourceSettingsDataSourceProperties) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestSourceDataSourceSettingsDataSourceProperties) SetEncoding(v string) *CreateDIJobRequestSourceDataSourceSettingsDataSourceProperties {
	s.Encoding = &v
	return s
}

func (s *CreateDIJobRequestSourceDataSourceSettingsDataSourceProperties) SetTimezone(v string) *CreateDIJobRequestSourceDataSourceSettingsDataSourceProperties {
	s.Timezone = &v
	return s
}

type CreateDIJobRequestTableMappings struct {
	// The list of rules used to select synchronization objects in the source.
	SourceObjectSelectionRules []*CreateDIJobRequestTableMappingsSourceObjectSelectionRules `json:"SourceObjectSelectionRules,omitempty" xml:"SourceObjectSelectionRules,omitempty" type:"Repeated"`
	// The list of transformation rules that you want to apply to the synchronization objects selected from the source. Each entry in the list defines a transformation rule.
	TransformationRules []*CreateDIJobRequestTableMappingsTransformationRules `json:"TransformationRules,omitempty" xml:"TransformationRules,omitempty" type:"Repeated"`
}

func (s CreateDIJobRequestTableMappings) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestTableMappings) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestTableMappings) SetSourceObjectSelectionRules(v []*CreateDIJobRequestTableMappingsSourceObjectSelectionRules) *CreateDIJobRequestTableMappings {
	s.SourceObjectSelectionRules = v
	return s
}

func (s *CreateDIJobRequestTableMappings) SetTransformationRules(v []*CreateDIJobRequestTableMappingsTransformationRules) *CreateDIJobRequestTableMappings {
	s.TransformationRules = v
	return s
}

type CreateDIJobRequestTableMappingsSourceObjectSelectionRules struct {
	// The operation that is performed to select objects. Valid values: Include and Exclude.
	//
	// example:
	//
	// Include
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// The expression.
	//
	// example:
	//
	// mysql_table_1
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The expression type. Valid values: Exact and Regex.
	//
	// example:
	//
	// Exact
	ExpressionType *string `json:"ExpressionType,omitempty" xml:"ExpressionType,omitempty"`
	// The object type. Valid values:
	//
	// 	- Table
	//
	// 	- Schema
	//
	// 	- Database
	//
	// example:
	//
	// Table
	ObjectType *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
}

func (s CreateDIJobRequestTableMappingsSourceObjectSelectionRules) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestTableMappingsSourceObjectSelectionRules) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestTableMappingsSourceObjectSelectionRules) SetAction(v string) *CreateDIJobRequestTableMappingsSourceObjectSelectionRules {
	s.Action = &v
	return s
}

func (s *CreateDIJobRequestTableMappingsSourceObjectSelectionRules) SetExpression(v string) *CreateDIJobRequestTableMappingsSourceObjectSelectionRules {
	s.Expression = &v
	return s
}

func (s *CreateDIJobRequestTableMappingsSourceObjectSelectionRules) SetExpressionType(v string) *CreateDIJobRequestTableMappingsSourceObjectSelectionRules {
	s.ExpressionType = &v
	return s
}

func (s *CreateDIJobRequestTableMappingsSourceObjectSelectionRules) SetObjectType(v string) *CreateDIJobRequestTableMappingsSourceObjectSelectionRules {
	s.ObjectType = &v
	return s
}

type CreateDIJobRequestTableMappingsTransformationRules struct {
	// The action type. Valid values:
	//
	// 	- DefinePrimaryKey
	//
	// 	- Rename
	//
	// 	- AddColumn
	//
	// 	- HandleDml
	//
	// 	- DefineIncrementalCondition
	//
	// 	- DefineCycleScheduleSettings
	//
	// 	- DefineRuntimeSettings
	//
	// 	- DefinePartitionKey
	//
	// example:
	//
	// Rename
	RuleActionType *string `json:"RuleActionType,omitempty" xml:"RuleActionType,omitempty"`
	// The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.
	//
	// example:
	//
	// rename_rule_1
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The type of the object on which you want to perform the action. Valid values:
	//
	// 	- Table
	//
	// 	- Schema
	//
	// 	- Database
	//
	// example:
	//
	// Table
	RuleTargetType *string `json:"RuleTargetType,omitempty" xml:"RuleTargetType,omitempty"`
}

func (s CreateDIJobRequestTableMappingsTransformationRules) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestTableMappingsTransformationRules) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestTableMappingsTransformationRules) SetRuleActionType(v string) *CreateDIJobRequestTableMappingsTransformationRules {
	s.RuleActionType = &v
	return s
}

func (s *CreateDIJobRequestTableMappingsTransformationRules) SetRuleName(v string) *CreateDIJobRequestTableMappingsTransformationRules {
	s.RuleName = &v
	return s
}

func (s *CreateDIJobRequestTableMappingsTransformationRules) SetRuleTargetType(v string) *CreateDIJobRequestTableMappingsTransformationRules {
	s.RuleTargetType = &v
	return s
}

type CreateDIJobRequestTransformationRules struct {
	// The action type. Valid values:
	//
	// 	- DefinePrimaryKey
	//
	// 	- Rename
	//
	// 	- AddColumn
	//
	// 	- HandleDml
	//
	// 	- DefineIncrementalCondition
	//
	// 	- DefineCycleScheduleSettings
	//
	// 	- DefinePartitionKey
	//
	// example:
	//
	// Rename
	RuleActionType *string `json:"RuleActionType,omitempty" xml:"RuleActionType,omitempty"`
	// The expression of the rule. The expression must be a JSON string.
	//
	// 1.  Example of a renaming rule
	//
	// 	- Example: {"expression":"${srcDatasourceName}_${srcDatabaseName}_0922" }
	//
	// 	- expression: the expression of the renaming rule. You can use the following variables in an expression: ${srcDatasourceName}, ${srcDatabaseName}, and ${srcTableName}. ${srcDatasourceName} specifies the name of the source. ${srcDatabaseName} specifies the name of a source database. ${srcTableName} specifies the name of a source table.
	//
	// 2.  Example of a column addition rule
	//
	// 	- Example: {"columns":[{"columnName":"my_add_column","columnValueType":"Constant","columnValue":"123"}]}
	//
	// 	- If you do not configure such a rule, no fields are added to the destination and no values are assigned by default.
	//
	// 	- columnName: the name of the field that is added.
	//
	// 	- columnValueType: the value type of the field. Valid values: Constant and Variable.
	//
	// 	- columnValue: the value of the field. If the columnValueType parameter is set to Constant, set the columnValue parameter to a constant of the STRING data type. If the columnValueType parameter is set to Variable, set the columnValue parameter to a built-in variable. The following built-in variables are supported: EXECUTE_TIME (LONG data type), DB_NAME_SRC (STRING data type), DATASOURCE_NAME_SRC (STRING data type), TABLE_NAME_SRC (STRING data type), DB_NAME_DEST (STRING data type), DATASOURCE_NAME_DEST (STRING data type), TABLE_NAME_DEST (STRING data type), and DB_NAME_SRC_TRANSED (STRING data type). EXECUTE_TIME specifies the execution time. DB_NAME_SRC specifies the name of a source database. DATASOURCE_NAME_SRC specifies the name of the source. TABLE_NAME_SRC specifies the name of a source table. DB_NAME_DEST specifies the name of a destination database. DATASOURCE_NAME_DEST specifies the name of the destination. TABLE_NAME_DEST specifies the name of a destination table. DB_NAME_SRC_TRANSED specifies the database name obtained after a transformation.
	//
	// 3.  Example of a rule used to specify primary key fields for a destination table
	//
	// 	- Example: {"columns":["ukcolumn1","ukcolumn2"]}
	//
	// 	- If you do not configure such a rule, the primary key fields in the mapped source table are used for the destination table by default.
	//
	// 	- If the destination table is an existing table, Data Integration does not modify the schema of the destination table. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.
	//
	// 	- If the destination table is automatically created by the system, Data Integration automatically creates the schema of the destination table. The schema contains the primary key fields that you specify. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.
	//
	// 4.  Example of a rule used to process DML messages
	//
	// 	- Example: {"dmlPolicies":[{"dmlType":"Delete","dmlAction":"Filter","filterCondition":"id > 1"}]}
	//
	// 	- If you do not configure such a rule, the default processing policy for messages generated for insert, update, and delete operations is Normal.
	//
	// 	- dmlType: the DML operation. Valid values: Insert, Update, and Delete.
	//
	// 	- dmlAction: the processing policy for DML messages. Valid values: Normal, Ignore, Filter, and LogicalDelete. Filter indicates conditional processing. You can set the dmlAction parameter to Filter only when the dmlType parameter is set to Update or Delete.
	//
	// 	- filterCondition: the condition used to filter DML messages. This parameter is required only when the dmlAction parameter is set to Filter.
	//
	// 5.  Example of a rule used to perform incremental synchronization
	//
	// 	- Example: {"where":"id > 0"}
	//
	// 	- You can configure such a rule to perform incremental synchronization.
	//
	// 6.  Example of a rule used to configure scheduling parameters for an auto triggered task
	//
	// 	- Example: {"cronExpress":" \\	- \\	- \\	- \\	- \\	- \\*", "cycleType":"1"}
	//
	// 	- You can configure such a rule to configure scheduling parameters for an auto triggered task.
	//
	// 7.  Example of a rule used to specify a partition key
	//
	// 	- Example: {"columns":["id"]}
	//
	// 	- You can configure such a rule to specify a partition key.
	//
	// example:
	//
	// {"expression":"${srcDatasoureName}_${srcDatabaseName}"}
	RuleExpression *string `json:"RuleExpression,omitempty" xml:"RuleExpression,omitempty"`
	// The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.
	//
	// example:
	//
	// rename_rule_1
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The type of the object on which you want to perform the action. Valid values:
	//
	// 	- Table
	//
	// 	- Schema
	//
	// 	- Database
	//
	// example:
	//
	// Table
	RuleTargetType *string `json:"RuleTargetType,omitempty" xml:"RuleTargetType,omitempty"`
}

func (s CreateDIJobRequestTransformationRules) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobRequestTransformationRules) GoString() string {
	return s.String()
}

func (s *CreateDIJobRequestTransformationRules) SetRuleActionType(v string) *CreateDIJobRequestTransformationRules {
	s.RuleActionType = &v
	return s
}

func (s *CreateDIJobRequestTransformationRules) SetRuleExpression(v string) *CreateDIJobRequestTransformationRules {
	s.RuleExpression = &v
	return s
}

func (s *CreateDIJobRequestTransformationRules) SetRuleName(v string) *CreateDIJobRequestTransformationRules {
	s.RuleName = &v
	return s
}

func (s *CreateDIJobRequestTransformationRules) SetRuleTargetType(v string) *CreateDIJobRequestTransformationRules {
	s.RuleTargetType = &v
	return s
}

type CreateDIJobShrinkRequest struct {
	// The description of the synchronization task.
	//
	// example:
	//
	// The description of the synchronization task.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The settings of the destination. Only a single destination is supported.
	//
	// This parameter is required.
	DestinationDataSourceSettingsShrink *string `json:"DestinationDataSourceSettings,omitempty" xml:"DestinationDataSourceSettings,omitempty"`
	// The destination type. Valid values: Hologres, OSS-HDFS, OSS, MaxCompute, LogHub, StarRocks, DataHub, AnalyticDB for MySQL, Kafka, and Hive.
	//
	// This parameter is required.
	//
	// example:
	//
	// Hologres
	DestinationDataSourceType *string `json:"DestinationDataSourceType,omitempty" xml:"DestinationDataSourceType,omitempty"`
	// Deprecated
	//
	// This parameter is deprecated and is replaced by the Name parameter.
	//
	// example:
	//
	// mysql_to_holo_sync_8772
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The settings for the dimension of the synchronization task. The settings include processing policies for DDL messages, policies for data type mappings between source fields and destination fields, and runtime parameters of the synchronization task.
	JobSettingsShrink *string `json:"JobSettings,omitempty" xml:"JobSettings,omitempty"`
	// The type of the task. This parameter is optional. Valid values:
	//
	// 	- DatabaseRealtimeMigration: A real-time synchronization task used to synchronize only full data, only incremental data, or full and incremental data in multiple tables of multiple databases at the source.
	//
	// 	- DatabaseOfflineMigration: A batch synchronization task used to synchronize only full data, only incremental data, or full and incremental data in multiple tables of multiple databases at the source.
	//
	// 	- SingleTableRealtimeMigration: A real-time synchronization task used to synchronize only data in single table at the source.
	//
	// example:
	//
	// DatabaseRealtimeMigration
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The synchronization type. Valid values:
	//
	// 	- FullAndRealtimeIncremental: full synchronization and real-time incremental synchronization of data in an entire database
	//
	// 	- RealtimeIncremental: real-time incremental synchronization of data in a single table
	//
	// 	- Full: full batch synchronization of data in an entire database
	//
	// 	- OfflineIncremental: batch incremental synchronization of data in an entire database
	//
	// 	- FullAndOfflineIncremental: full synchronization and batch incremental synchronization of data in an entire database
	//
	// This parameter is required.
	//
	// example:
	//
	// FullAndRealtimeIncremental
	MigrationType *string `json:"MigrationType,omitempty" xml:"MigrationType,omitempty"`
	// The name of the synchronization task.
	//
	// example:
	//
	// mysql_to_holo_sync_8772
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The resource settings.
	//
	// This parameter is required.
	ResourceSettingsShrink *string `json:"ResourceSettings,omitempty" xml:"ResourceSettings,omitempty"`
	// The settings of the source. Only a single source is supported.
	//
	// This parameter is required.
	SourceDataSourceSettingsShrink *string `json:"SourceDataSourceSettings,omitempty" xml:"SourceDataSourceSettings,omitempty"`
	// The source type. Valid values: PolarDB, MySQL, Kafka, LogHub, Hologres, Oracle, OceanBase, MongoDB, Redshift, Hive, SQL Server, Doris, and ClickHouse.
	//
	// This parameter is required.
	//
	// example:
	//
	// MySQL
	SourceDataSourceType *string `json:"SourceDataSourceType,omitempty" xml:"SourceDataSourceType,omitempty"`
	// The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.
	//
	// >  [ { "SourceObjectSelectionRules":[ { "ObjectType":"Database", "Action":"Include", "ExpressionType":"Exact", "Expression":"biz_db" }, { "ObjectType":"Schema", "Action":"Include", "ExpressionType":"Exact", "Expression":"s1" }, { "ObjectType":"Table", "Action":"Include", "ExpressionType":"Exact", "Expression":"table1" } ], "TransformationRuleNames":[ { "RuleName":"my_database_rename_rule", "RuleActionType":"Rename", "RuleTargetType":"Schema" } ] } ]
	//
	// This parameter is required.
	TableMappingsShrink *string `json:"TableMappings,omitempty" xml:"TableMappings,omitempty"`
	// The list of transformation rules for objects involved in the synchronization task.
	//
	// >  [ { "RuleName":"my_database_rename_rule", "RuleActionType":"Rename", "RuleTargetType":"Schema", "RuleExpression":"{"expression":"${srcDatasoureName}_${srcDatabaseName}"}" } ]
	TransformationRulesShrink *string `json:"TransformationRules,omitempty" xml:"TransformationRules,omitempty"`
}

func (s CreateDIJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateDIJobShrinkRequest) SetDescription(v string) *CreateDIJobShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateDIJobShrinkRequest) SetDestinationDataSourceSettingsShrink(v string) *CreateDIJobShrinkRequest {
	s.DestinationDataSourceSettingsShrink = &v
	return s
}

func (s *CreateDIJobShrinkRequest) SetDestinationDataSourceType(v string) *CreateDIJobShrinkRequest {
	s.DestinationDataSourceType = &v
	return s
}

func (s *CreateDIJobShrinkRequest) SetJobName(v string) *CreateDIJobShrinkRequest {
	s.JobName = &v
	return s
}

func (s *CreateDIJobShrinkRequest) SetJobSettingsShrink(v string) *CreateDIJobShrinkRequest {
	s.JobSettingsShrink = &v
	return s
}

func (s *CreateDIJobShrinkRequest) SetJobType(v string) *CreateDIJobShrinkRequest {
	s.JobType = &v
	return s
}

func (s *CreateDIJobShrinkRequest) SetMigrationType(v string) *CreateDIJobShrinkRequest {
	s.MigrationType = &v
	return s
}

func (s *CreateDIJobShrinkRequest) SetName(v string) *CreateDIJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateDIJobShrinkRequest) SetProjectId(v int64) *CreateDIJobShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDIJobShrinkRequest) SetResourceSettingsShrink(v string) *CreateDIJobShrinkRequest {
	s.ResourceSettingsShrink = &v
	return s
}

func (s *CreateDIJobShrinkRequest) SetSourceDataSourceSettingsShrink(v string) *CreateDIJobShrinkRequest {
	s.SourceDataSourceSettingsShrink = &v
	return s
}

func (s *CreateDIJobShrinkRequest) SetSourceDataSourceType(v string) *CreateDIJobShrinkRequest {
	s.SourceDataSourceType = &v
	return s
}

func (s *CreateDIJobShrinkRequest) SetTableMappingsShrink(v string) *CreateDIJobShrinkRequest {
	s.TableMappingsShrink = &v
	return s
}

func (s *CreateDIJobShrinkRequest) SetTransformationRulesShrink(v string) *CreateDIJobShrinkRequest {
	s.TransformationRulesShrink = &v
	return s
}

type CreateDIJobResponseBody struct {
	// Deprecated
	//
	// This parameter is deprecated and is replaced by the Id parameter.
	//
	// example:
	//
	// 11792
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 11792
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 4F6AB6B3-41FB-5EBB-AFB2-0C98D49DA2BB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDIJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDIJobResponseBody) SetDIJobId(v int64) *CreateDIJobResponseBody {
	s.DIJobId = &v
	return s
}

func (s *CreateDIJobResponseBody) SetId(v int64) *CreateDIJobResponseBody {
	s.Id = &v
	return s
}

func (s *CreateDIJobResponseBody) SetRequestId(v string) *CreateDIJobResponseBody {
	s.RequestId = &v
	return s
}

type CreateDIJobResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDIJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDIJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDIJobResponse) GoString() string {
	return s.String()
}

func (s *CreateDIJobResponse) SetHeaders(v map[string]*string) *CreateDIJobResponse {
	s.Headers = v
	return s
}

func (s *CreateDIJobResponse) SetStatusCode(v int32) *CreateDIJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDIJobResponse) SetBody(v *CreateDIJobResponseBody) *CreateDIJobResponse {
	s.Body = v
	return s
}

type CreateDataAssetTagRequest struct {
	// The description of the tag.
	//
	// example:
	//
	// This is a description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The tag key.
	//
	// This parameter is required.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag administrators.
	Managers []*string `json:"Managers,omitempty" xml:"Managers,omitempty" type:"Repeated"`
	// The type of the tag value. Valid values:
	//
	// 	- Boolean
	//
	// 	- Int
	//
	// 	- String
	//
	// 	- Double
	//
	// example:
	//
	// String
	ValueType *string `json:"ValueType,omitempty" xml:"ValueType,omitempty"`
	// The tag values.
	Values []*string `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s CreateDataAssetTagRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAssetTagRequest) GoString() string {
	return s.String()
}

func (s *CreateDataAssetTagRequest) SetDescription(v string) *CreateDataAssetTagRequest {
	s.Description = &v
	return s
}

func (s *CreateDataAssetTagRequest) SetKey(v string) *CreateDataAssetTagRequest {
	s.Key = &v
	return s
}

func (s *CreateDataAssetTagRequest) SetManagers(v []*string) *CreateDataAssetTagRequest {
	s.Managers = v
	return s
}

func (s *CreateDataAssetTagRequest) SetValueType(v string) *CreateDataAssetTagRequest {
	s.ValueType = &v
	return s
}

func (s *CreateDataAssetTagRequest) SetValues(v []*string) *CreateDataAssetTagRequest {
	s.Values = v
	return s
}

type CreateDataAssetTagShrinkRequest struct {
	// The description of the tag.
	//
	// example:
	//
	// This is a description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The tag key.
	//
	// This parameter is required.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag administrators.
	ManagersShrink *string `json:"Managers,omitempty" xml:"Managers,omitempty"`
	// The type of the tag value. Valid values:
	//
	// 	- Boolean
	//
	// 	- Int
	//
	// 	- String
	//
	// 	- Double
	//
	// example:
	//
	// String
	ValueType *string `json:"ValueType,omitempty" xml:"ValueType,omitempty"`
	// The tag values.
	ValuesShrink *string `json:"Values,omitempty" xml:"Values,omitempty"`
}

func (s CreateDataAssetTagShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAssetTagShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateDataAssetTagShrinkRequest) SetDescription(v string) *CreateDataAssetTagShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateDataAssetTagShrinkRequest) SetKey(v string) *CreateDataAssetTagShrinkRequest {
	s.Key = &v
	return s
}

func (s *CreateDataAssetTagShrinkRequest) SetManagersShrink(v string) *CreateDataAssetTagShrinkRequest {
	s.ManagersShrink = &v
	return s
}

func (s *CreateDataAssetTagShrinkRequest) SetValueType(v string) *CreateDataAssetTagShrinkRequest {
	s.ValueType = &v
	return s
}

func (s *CreateDataAssetTagShrinkRequest) SetValuesShrink(v string) *CreateDataAssetTagShrinkRequest {
	s.ValuesShrink = &v
	return s
}

type CreateDataAssetTagResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 0bc1ec92159376
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDataAssetTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAssetTagResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataAssetTagResponseBody) SetRequestId(v string) *CreateDataAssetTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDataAssetTagResponseBody) SetSuccess(v bool) *CreateDataAssetTagResponseBody {
	s.Success = &v
	return s
}

type CreateDataAssetTagResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDataAssetTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDataAssetTagResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAssetTagResponse) GoString() string {
	return s.String()
}

func (s *CreateDataAssetTagResponse) SetHeaders(v map[string]*string) *CreateDataAssetTagResponse {
	s.Headers = v
	return s
}

func (s *CreateDataAssetTagResponse) SetStatusCode(v int32) *CreateDataAssetTagResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDataAssetTagResponse) SetBody(v *CreateDataAssetTagResponseBody) *CreateDataAssetTagResponse {
	s.Body = v
	return s
}

type CreateDataQualityEvaluationTaskRequest struct {
	// The list of monitoring rules that are associated with the monitor. If you configure the ID of a monitoring rule by using the DataQualityRule.Id parameter, the system associates the rule with a created monitor. If you do not configure the ID of a monitoring rule, the system creates a new monitoring rule by using other fields and associates the rule with a created monitor.
	DataQualityRules []*CreateDataQualityEvaluationTaskRequestDataQualityRules `json:"DataQualityRules,omitempty" xml:"DataQualityRules,omitempty" type:"Repeated"`
	// The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *int64 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The description of the monitor.
	//
	// example:
	//
	// OpenAPI create a data quality monitoring test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The hook.
	Hooks []*CreateDataQualityEvaluationTaskRequestHooks `json:"Hooks,omitempty" xml:"Hooks,omitempty" type:"Repeated"`
	// The name of the monitor.
	//
	// This parameter is required.
	//
	// example:
	//
	// OpenAPI create a data quality monitoring test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configurations of alert notifications.
	Notifications *CreateDataQualityEvaluationTaskRequestNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Struct"`
	// The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The extended configurations in JSON-formatted strings. You can use this parameter only for monitors that are used to monitor the quality of E-MapReduce (EMR) data.
	//
	// 	- queue: The Yarn queue used when a monitor checks the quality of EMR data. By default, the queue configured for the current workspace is used.
	//
	// 	- sqlEngine: The SQL engine used when a monitor checks the quality of EMR data.
	//
	//     	- HIVE_SQL
	//
	//     	- SPARK_SQL
	//
	// example:
	//
	// { "queue": "default", "sqlEngine": "SPARK_SQL" }
	RuntimeConf *string `json:"RuntimeConf,omitempty" xml:"RuntimeConf,omitempty"`
	// The monitored object of the monitor.
	//
	// This parameter is required.
	Target *CreateDataQualityEvaluationTaskRequestTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The trigger configuration of the monitor.
	Trigger *CreateDataQualityEvaluationTaskRequestTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s CreateDataQualityEvaluationTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequest) SetDataQualityRules(v []*CreateDataQualityEvaluationTaskRequestDataQualityRules) *CreateDataQualityEvaluationTaskRequest {
	s.DataQualityRules = v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequest) SetDataSourceId(v int64) *CreateDataQualityEvaluationTaskRequest {
	s.DataSourceId = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequest) SetDescription(v string) *CreateDataQualityEvaluationTaskRequest {
	s.Description = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequest) SetHooks(v []*CreateDataQualityEvaluationTaskRequestHooks) *CreateDataQualityEvaluationTaskRequest {
	s.Hooks = v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequest) SetName(v string) *CreateDataQualityEvaluationTaskRequest {
	s.Name = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequest) SetNotifications(v *CreateDataQualityEvaluationTaskRequestNotifications) *CreateDataQualityEvaluationTaskRequest {
	s.Notifications = v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequest) SetProjectId(v int64) *CreateDataQualityEvaluationTaskRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequest) SetRuntimeConf(v string) *CreateDataQualityEvaluationTaskRequest {
	s.RuntimeConf = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequest) SetTarget(v *CreateDataQualityEvaluationTaskRequestTarget) *CreateDataQualityEvaluationTaskRequest {
	s.Target = v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequest) SetTrigger(v *CreateDataQualityEvaluationTaskRequestTrigger) *CreateDataQualityEvaluationTaskRequest {
	s.Trigger = v
	return s
}

type CreateDataQualityEvaluationTaskRequestDataQualityRules struct {
	// The check settings for sample data.
	CheckingConfig *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	// The description of the monitoring rule.
	//
	// example:
	//
	// OpenAPI test rules
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the monitoring rule.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The operations that you can perform after the rule-based check fails.
	ErrorHandlers []*CreateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers `json:"ErrorHandlers,omitempty" xml:"ErrorHandlers,omitempty" type:"Repeated"`
	// The rule ID.
	//
	// example:
	//
	// 2176
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the monitoring rule.
	//
	// example:
	//
	// OpenAPI test rules
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The parameters required for sampling.
	SamplingConfig *CreateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	// The strength of the monitoring rule. Valid values:
	//
	// 	- Normal
	//
	// 	- High
	//
	// example:
	//
	// High
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The ID of the template used by the monitoring rule.
	//
	// example:
	//
	// SYSTEM:field:null_value:fixed:0
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRules) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRules) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRules) SetCheckingConfig(v *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig) *CreateDataQualityEvaluationTaskRequestDataQualityRules {
	s.CheckingConfig = v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRules) SetDescription(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRules {
	s.Description = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRules) SetEnabled(v bool) *CreateDataQualityEvaluationTaskRequestDataQualityRules {
	s.Enabled = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRules) SetErrorHandlers(v []*CreateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers) *CreateDataQualityEvaluationTaskRequestDataQualityRules {
	s.ErrorHandlers = v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRules) SetId(v int64) *CreateDataQualityEvaluationTaskRequestDataQualityRules {
	s.Id = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRules) SetName(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRules {
	s.Name = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRules) SetSamplingConfig(v *CreateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) *CreateDataQualityEvaluationTaskRequestDataQualityRules {
	s.SamplingConfig = v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRules) SetSeverity(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRules {
	s.Severity = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRules) SetTemplateCode(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRules {
	s.TemplateCode = &v
	return s
}

type CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig struct {
	// The method that is used to query the referenced samples. To obtain specific types of thresholds, you must query reference values. In this example, an expression is used to specify the query method of referenced samples.
	//
	// example:
	//
	// {"bizdate": ["-1"]}
	ReferencedSamplesFilter *string `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	// The threshold settings.
	Thresholds *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds `json:"Thresholds,omitempty" xml:"Thresholds,omitempty" type:"Struct"`
	// The threshold calculation method. Valid values:
	//
	// 	- Fixed
	//
	// 	- Fluctation
	//
	// 	- FluctationDiscreate
	//
	// 	- Auto
	//
	// 	- Average
	//
	// example:
	//
	// Fixed
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig) SetReferencedSamplesFilter(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig) SetThresholds(v *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig {
	s.Thresholds = v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig) SetType(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig {
	s.Type = &v
	return s
}

type CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds struct {
	// The threshold settings for critical alerts.
	Critical *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	// The expected threshold setting.
	Expected *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected `json:"Expected,omitempty" xml:"Expected,omitempty" type:"Struct"`
	// The threshold settings for normal alerts.
	Warned *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned `json:"Warned,omitempty" xml:"Warned,omitempty" type:"Struct"`
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds) SetCritical(v *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds {
	s.Critical = v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds) SetExpected(v *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds {
	s.Expected = v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds) SetWarned(v *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds {
	s.Warned = v
	return s
}

type CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 0.01
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical) SetExpression(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical {
	s.Expression = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical) SetOperator(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical {
	s.Operator = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical) SetValue(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical {
	s.Value = &v
	return s
}

type CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// =
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected) SetExpression(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected {
	s.Expression = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected) SetOperator(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected {
	s.Operator = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected) SetValue(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected {
	s.Value = &v
	return s
}

type CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 0.001
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned) SetExpression(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned {
	s.Expression = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned) SetOperator(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned {
	s.Operator = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned) SetValue(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned {
	s.Value = &v
	return s
}

type CreateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers struct {
	// The SQL statement that is used to filter failed tasks. If you define the rule by using custom SQL statements, you must specify an SQL statement to filter failed tasks.
	//
	// example:
	//
	// SELECT 	- FROM ods_api_log WHERE status = \\"Error\\";
	ErrorDataFilter *string `json:"ErrorDataFilter,omitempty" xml:"ErrorDataFilter,omitempty"`
	// The type of the operation. Valid values:
	//
	// 	- SaveErrorData
	//
	// example:
	//
	// SaveErrorData
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers) SetErrorDataFilter(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers {
	s.ErrorDataFilter = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers) SetType(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers {
	s.Type = &v
	return s
}

type CreateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig struct {
	// The metrics used for sampling. Valid values:
	//
	// 	- Count: the number of rows in the table.
	//
	// 	- Min: the minimum value of the field.
	//
	// 	- Max: the maximum value of the field.
	//
	// 	- Avg: the average value of the field.
	//
	// 	- DistinctCount: the number of unique values of the field after deduplication.
	//
	// 	- DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
	//
	// 	- DuplicatedCount: the number of duplicated values of the field.
	//
	// 	- DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
	//
	// 	- TableSize: the table size.
	//
	// 	- NullValueCount: the number of rows in which the field value is null.
	//
	// 	- NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
	//
	// 	- GroupCount: the field value and the number of rows for each field value.
	//
	// 	- CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
	//
	// 	- CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
	//
	// 	- UserDefinedSql: specifies that data is sampled by executing custom SQL statements.
	//
	// example:
	//
	// NullValueCount
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The parameters required for sampling.
	//
	// example:
	//
	// { "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.
	//
	// example:
	//
	// status != \\"Succeeded\\"
	SamplingFilter *string `json:"SamplingFilter,omitempty" xml:"SamplingFilter,omitempty"`
	// The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.
	//
	// example:
	//
	// odps.sql.type.system.odps2=True,odps.sql.hive.compatible=True
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) SetMetric(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig {
	s.Metric = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) SetMetricParameters(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) SetSamplingFilter(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig {
	s.SamplingFilter = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) SetSettingConfig(v string) *CreateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig {
	s.SettingConfig = &v
	return s
}

type CreateDataQualityEvaluationTaskRequestHooks struct {
	// The hook trigger condition. When this condition is met, the hook action is triggered. Only two conditional expressions are supported:
	//
	// 1.  Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
	//
	// 2.  Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.
	//
	// example:
	//
	// (${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// The hook type. Only one hook type is supported.
	//
	// 	- BlockTaskInstance: Blocks the running of scheduling tasks. A monitor is triggered by scheduling tasks. After a monitor finishes running, the monitor determines whether to block the running of scheduling tasks based on the hook condition.
	//
	// example:
	//
	// BlockTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDataQualityEvaluationTaskRequestHooks) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestHooks) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestHooks) SetCondition(v string) *CreateDataQualityEvaluationTaskRequestHooks {
	s.Condition = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestHooks) SetType(v string) *CreateDataQualityEvaluationTaskRequestHooks {
	s.Type = &v
	return s
}

type CreateDataQualityEvaluationTaskRequestNotifications struct {
	// The notification trigger condition. When this condition is met, the alert notification is triggered. Only two conditional expressions are supported:
	//
	// Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical. Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.
	//
	// example:
	//
	// (${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// The configurations of the alert notification.
	Notifications []*CreateDataQualityEvaluationTaskRequestNotificationsNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Repeated"`
}

func (s CreateDataQualityEvaluationTaskRequestNotifications) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestNotifications) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestNotifications) SetCondition(v string) *CreateDataQualityEvaluationTaskRequestNotifications {
	s.Condition = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestNotifications) SetNotifications(v []*CreateDataQualityEvaluationTaskRequestNotificationsNotifications) *CreateDataQualityEvaluationTaskRequestNotifications {
	s.Notifications = v
	return s
}

type CreateDataQualityEvaluationTaskRequestNotificationsNotifications struct {
	// The alert notification methods.
	NotificationChannels []*CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels `json:"NotificationChannels,omitempty" xml:"NotificationChannels,omitempty" type:"Repeated"`
	// The configurations of alert recipients.
	NotificationReceivers []*CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers `json:"NotificationReceivers,omitempty" xml:"NotificationReceivers,omitempty" type:"Repeated"`
}

func (s CreateDataQualityEvaluationTaskRequestNotificationsNotifications) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestNotificationsNotifications) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestNotificationsNotifications) SetNotificationChannels(v []*CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels) *CreateDataQualityEvaluationTaskRequestNotificationsNotifications {
	s.NotificationChannels = v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestNotificationsNotifications) SetNotificationReceivers(v []*CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers) *CreateDataQualityEvaluationTaskRequestNotificationsNotifications {
	s.NotificationReceivers = v
	return s
}

type CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels struct {
	// The alert notification methods.
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
}

func (s CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels) SetChannels(v []*string) *CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels {
	s.Channels = v
	return s
}

type CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers struct {
	// The additional parameters that are required when alerts are sent. The parameters are JSON-formatted strings. The following keys are supported:
	//
	// 	- atAll: specifies that all members in a group are mentioned when alerts are sent by using DingTalk. This parameter is valid only if you set ReceiverType to DingdingUrl.
	//
	// example:
	//
	// {  "atAll": true }
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// The type of the alert recipient. Valid values:
	//
	// 	- WebhookUrl
	//
	// 	- FeishuUrl
	//
	// 	- DingdingUrl
	//
	// 	- WeixinUrl
	//
	// 	- AliUid
	//
	// example:
	//
	// DingdingUrl
	ReceiverType *string `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	// The alert recipient.
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers) SetExtension(v string) *CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers {
	s.Extension = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers) SetReceiverType(v string) *CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers) SetReceiverValues(v []*string) *CreateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers {
	s.ReceiverValues = v
	return s
}

type CreateDataQualityEvaluationTaskRequestTarget struct {
	// The type of the database to which the table belongs. Valid values:
	//
	// 	- maxcompute
	//
	// 	- hologres
	//
	// 	- cdh
	//
	// 	- analyticdb_for_mysql
	//
	// 	- starrocks
	//
	// 	- emr
	//
	// 	- analyticdb_for_postgresql
	//
	// This parameter is required.
	//
	// example:
	//
	// maxcompute
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The configuration of the partitioned table.
	//
	// example:
	//
	// pt=$[yyyymmdd-1]
	PartitionSpec *string `json:"PartitionSpec,omitempty" xml:"PartitionSpec,omitempty"`
	// The ID of the table in Data Map.
	//
	// This parameter is required.
	//
	// example:
	//
	// odps.api_test.ods_openapi_log_d
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s CreateDataQualityEvaluationTaskRequestTarget) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestTarget) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestTarget) SetDatabaseType(v string) *CreateDataQualityEvaluationTaskRequestTarget {
	s.DatabaseType = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestTarget) SetPartitionSpec(v string) *CreateDataQualityEvaluationTaskRequestTarget {
	s.PartitionSpec = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestTarget) SetTableGuid(v string) *CreateDataQualityEvaluationTaskRequestTarget {
	s.TableGuid = &v
	return s
}

type CreateDataQualityEvaluationTaskRequestTrigger struct {
	// The IDs of scheduling tasks. This parameter is valid only if you set Type to ByScheduledTaskInstance.
	TaskIds []*int64 `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
	// The trigger type of the monitor. Valid values:
	//
	// 	- ByManual (default): The monitor is manually triggered.
	//
	// 	- ByScheduledTaskInstance: The monitor is triggered by the associated scheduling tasks.
	//
	// example:
	//
	// ByScheduledTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDataQualityEvaluationTaskRequestTrigger) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskRequestTrigger) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskRequestTrigger) SetTaskIds(v []*int64) *CreateDataQualityEvaluationTaskRequestTrigger {
	s.TaskIds = v
	return s
}

func (s *CreateDataQualityEvaluationTaskRequestTrigger) SetType(v string) *CreateDataQualityEvaluationTaskRequestTrigger {
	s.Type = &v
	return s
}

type CreateDataQualityEvaluationTaskShrinkRequest struct {
	// The list of monitoring rules that are associated with the monitor. If you configure the ID of a monitoring rule by using the DataQualityRule.Id parameter, the system associates the rule with a created monitor. If you do not configure the ID of a monitoring rule, the system creates a new monitoring rule by using other fields and associates the rule with a created monitor.
	DataQualityRulesShrink *string `json:"DataQualityRules,omitempty" xml:"DataQualityRules,omitempty"`
	// The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *int64 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The description of the monitor.
	//
	// example:
	//
	// OpenAPI create a data quality monitoring test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The hook.
	HooksShrink *string `json:"Hooks,omitempty" xml:"Hooks,omitempty"`
	// The name of the monitor.
	//
	// This parameter is required.
	//
	// example:
	//
	// OpenAPI create a data quality monitoring test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configurations of alert notifications.
	NotificationsShrink *string `json:"Notifications,omitempty" xml:"Notifications,omitempty"`
	// The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The extended configurations in JSON-formatted strings. You can use this parameter only for monitors that are used to monitor the quality of E-MapReduce (EMR) data.
	//
	// 	- queue: The Yarn queue used when a monitor checks the quality of EMR data. By default, the queue configured for the current workspace is used.
	//
	// 	- sqlEngine: The SQL engine used when a monitor checks the quality of EMR data.
	//
	//     	- HIVE_SQL
	//
	//     	- SPARK_SQL
	//
	// example:
	//
	// { "queue": "default", "sqlEngine": "SPARK_SQL" }
	RuntimeConf *string `json:"RuntimeConf,omitempty" xml:"RuntimeConf,omitempty"`
	// The monitored object of the monitor.
	//
	// This parameter is required.
	TargetShrink *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The trigger configuration of the monitor.
	TriggerShrink *string `json:"Trigger,omitempty" xml:"Trigger,omitempty"`
}

func (s CreateDataQualityEvaluationTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskShrinkRequest) SetDataQualityRulesShrink(v string) *CreateDataQualityEvaluationTaskShrinkRequest {
	s.DataQualityRulesShrink = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskShrinkRequest) SetDataSourceId(v int64) *CreateDataQualityEvaluationTaskShrinkRequest {
	s.DataSourceId = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskShrinkRequest) SetDescription(v string) *CreateDataQualityEvaluationTaskShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskShrinkRequest) SetHooksShrink(v string) *CreateDataQualityEvaluationTaskShrinkRequest {
	s.HooksShrink = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskShrinkRequest) SetName(v string) *CreateDataQualityEvaluationTaskShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskShrinkRequest) SetNotificationsShrink(v string) *CreateDataQualityEvaluationTaskShrinkRequest {
	s.NotificationsShrink = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskShrinkRequest) SetProjectId(v int64) *CreateDataQualityEvaluationTaskShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskShrinkRequest) SetRuntimeConf(v string) *CreateDataQualityEvaluationTaskShrinkRequest {
	s.RuntimeConf = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskShrinkRequest) SetTargetShrink(v string) *CreateDataQualityEvaluationTaskShrinkRequest {
	s.TargetShrink = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskShrinkRequest) SetTriggerShrink(v string) *CreateDataQualityEvaluationTaskShrinkRequest {
	s.TriggerShrink = &v
	return s
}

type CreateDataQualityEvaluationTaskResponseBody struct {
	// The ID of the new monitor.
	//
	// example:
	//
	// 10001
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 2d9ce-38ef-4923-baf6-391a7e656
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDataQualityEvaluationTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskResponseBody) SetId(v int64) *CreateDataQualityEvaluationTaskResponseBody {
	s.Id = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskResponseBody) SetRequestId(v string) *CreateDataQualityEvaluationTaskResponseBody {
	s.RequestId = &v
	return s
}

type CreateDataQualityEvaluationTaskResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDataQualityEvaluationTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDataQualityEvaluationTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskResponse) SetHeaders(v map[string]*string) *CreateDataQualityEvaluationTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateDataQualityEvaluationTaskResponse) SetStatusCode(v int32) *CreateDataQualityEvaluationTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskResponse) SetBody(v *CreateDataQualityEvaluationTaskResponseBody) *CreateDataQualityEvaluationTaskResponse {
	s.Body = v
	return s
}

type CreateDataQualityEvaluationTaskInstanceRequest struct {
	// The ID of the data quality monitoring task.
	//
	// This parameter is required.
	//
	// example:
	//
	// 200001
	DataQualityEvaluationTaskId *int64 `json:"DataQualityEvaluationTaskId,omitempty" xml:"DataQualityEvaluationTaskId,omitempty"`
	// Data quality verification execution parameters in JSON format. The available keys are as follows:
	//
	// - triggerTime: the millisecond timestamp of the trigger time. The baseline time of the $[yyyymmdd] expression in the data range of data quality monitoring. Required.
	//
	// This parameter is required.
	//
	// example:
	//
	// { "triggerTime": 1733284062000 }
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the workspace management page to obtain the ID.
	//
	// This parameter is used to determine the DataWorks workspaces used for this API call.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Resource Group information, which must be filled in when running non-MaxCompute data quality verification.
	RuntimeResource *CreateDataQualityEvaluationTaskInstanceRequestRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
}

func (s CreateDataQualityEvaluationTaskInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskInstanceRequest) SetDataQualityEvaluationTaskId(v int64) *CreateDataQualityEvaluationTaskInstanceRequest {
	s.DataQualityEvaluationTaskId = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskInstanceRequest) SetParameters(v string) *CreateDataQualityEvaluationTaskInstanceRequest {
	s.Parameters = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskInstanceRequest) SetProjectId(v int64) *CreateDataQualityEvaluationTaskInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskInstanceRequest) SetRuntimeResource(v *CreateDataQualityEvaluationTaskInstanceRequestRuntimeResource) *CreateDataQualityEvaluationTaskInstanceRequest {
	s.RuntimeResource = v
	return s
}

type CreateDataQualityEvaluationTaskInstanceRequestRuntimeResource struct {
	// The task runs to configure CU consumption. If Serverless resource groups are used, you must specify this parameter.
	//
	// example:
	//
	// 0.25
	Cu *float64 `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The identifier of the scheduling resource group configured for running the task.
	//
	// example:
	//
	// 63900680
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateDataQualityEvaluationTaskInstanceRequestRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskInstanceRequestRuntimeResource) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskInstanceRequestRuntimeResource) SetCu(v float64) *CreateDataQualityEvaluationTaskInstanceRequestRuntimeResource {
	s.Cu = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskInstanceRequestRuntimeResource) SetResourceGroupId(v string) *CreateDataQualityEvaluationTaskInstanceRequestRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type CreateDataQualityEvaluationTaskInstanceShrinkRequest struct {
	// The ID of the data quality monitoring task.
	//
	// This parameter is required.
	//
	// example:
	//
	// 200001
	DataQualityEvaluationTaskId *int64 `json:"DataQualityEvaluationTaskId,omitempty" xml:"DataQualityEvaluationTaskId,omitempty"`
	// Data quality verification execution parameters in JSON format. The available keys are as follows:
	//
	// - triggerTime: the millisecond timestamp of the trigger time. The baseline time of the $[yyyymmdd] expression in the data range of data quality monitoring. Required.
	//
	// This parameter is required.
	//
	// example:
	//
	// { "triggerTime": 1733284062000 }
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the workspace management page to obtain the ID.
	//
	// This parameter is used to determine the DataWorks workspaces used for this API call.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Resource Group information, which must be filled in when running non-MaxCompute data quality verification.
	RuntimeResourceShrink *string `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty"`
}

func (s CreateDataQualityEvaluationTaskInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskInstanceShrinkRequest) SetDataQualityEvaluationTaskId(v int64) *CreateDataQualityEvaluationTaskInstanceShrinkRequest {
	s.DataQualityEvaluationTaskId = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskInstanceShrinkRequest) SetParameters(v string) *CreateDataQualityEvaluationTaskInstanceShrinkRequest {
	s.Parameters = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskInstanceShrinkRequest) SetProjectId(v int64) *CreateDataQualityEvaluationTaskInstanceShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskInstanceShrinkRequest) SetRuntimeResourceShrink(v string) *CreateDataQualityEvaluationTaskInstanceShrinkRequest {
	s.RuntimeResourceShrink = &v
	return s
}

type CreateDataQualityEvaluationTaskInstanceResponseBody struct {
	// The ID of the data quality monitoring instance.
	//
	// example:
	//
	// 22130
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ecb967ec-c137-48****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDataQualityEvaluationTaskInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskInstanceResponseBody) SetId(v int64) *CreateDataQualityEvaluationTaskInstanceResponseBody {
	s.Id = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskInstanceResponseBody) SetRequestId(v string) *CreateDataQualityEvaluationTaskInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateDataQualityEvaluationTaskInstanceResponse struct {
	Headers    map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDataQualityEvaluationTaskInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDataQualityEvaluationTaskInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityEvaluationTaskInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateDataQualityEvaluationTaskInstanceResponse) SetHeaders(v map[string]*string) *CreateDataQualityEvaluationTaskInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateDataQualityEvaluationTaskInstanceResponse) SetStatusCode(v int32) *CreateDataQualityEvaluationTaskInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDataQualityEvaluationTaskInstanceResponse) SetBody(v *CreateDataQualityEvaluationTaskInstanceResponseBody) *CreateDataQualityEvaluationTaskInstanceResponse {
	s.Body = v
	return s
}

type CreateDataQualityRuleRequest struct {
	// The check settings for sample data.
	CheckingConfig *CreateDataQualityRuleRequestCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	// The description of the rule. The description can be up to 500 characters in length.
	//
	// example:
	//
	// this is a odps _sql task
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the monitoring rule.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The operations that you can perform after the rule-based check fails.
	ErrorHandlers []*CreateDataQualityRuleRequestErrorHandlers `json:"ErrorHandlers,omitempty" xml:"ErrorHandlers,omitempty" type:"Repeated"`
	// The name of the rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// The table cannot be empty.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10726
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The sampling settings.
	SamplingConfig *CreateDataQualityRuleRequestSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	// The strength of the rule. Valid values:
	//
	// 	- Normal
	//
	// 	- High
	//
	// example:
	//
	// Normal
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The monitored object of the rule.
	Target *CreateDataQualityRuleRequestTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The ID of the template used by the rule.
	//
	// example:
	//
	// system::user_defined
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s CreateDataQualityRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleRequest) SetCheckingConfig(v *CreateDataQualityRuleRequestCheckingConfig) *CreateDataQualityRuleRequest {
	s.CheckingConfig = v
	return s
}

func (s *CreateDataQualityRuleRequest) SetDescription(v string) *CreateDataQualityRuleRequest {
	s.Description = &v
	return s
}

func (s *CreateDataQualityRuleRequest) SetEnabled(v bool) *CreateDataQualityRuleRequest {
	s.Enabled = &v
	return s
}

func (s *CreateDataQualityRuleRequest) SetErrorHandlers(v []*CreateDataQualityRuleRequestErrorHandlers) *CreateDataQualityRuleRequest {
	s.ErrorHandlers = v
	return s
}

func (s *CreateDataQualityRuleRequest) SetName(v string) *CreateDataQualityRuleRequest {
	s.Name = &v
	return s
}

func (s *CreateDataQualityRuleRequest) SetProjectId(v int64) *CreateDataQualityRuleRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataQualityRuleRequest) SetSamplingConfig(v *CreateDataQualityRuleRequestSamplingConfig) *CreateDataQualityRuleRequest {
	s.SamplingConfig = v
	return s
}

func (s *CreateDataQualityRuleRequest) SetSeverity(v string) *CreateDataQualityRuleRequest {
	s.Severity = &v
	return s
}

func (s *CreateDataQualityRuleRequest) SetTarget(v *CreateDataQualityRuleRequestTarget) *CreateDataQualityRuleRequest {
	s.Target = v
	return s
}

func (s *CreateDataQualityRuleRequest) SetTemplateCode(v string) *CreateDataQualityRuleRequest {
	s.TemplateCode = &v
	return s
}

type CreateDataQualityRuleRequestCheckingConfig struct {
	// The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference samples and perform aggregate operations on the reference values. In this example, an expression is used to specify the query method of referenced samples.
	//
	// example:
	//
	// { "bizdate": [ "-1", "-7", "-1m" ] }
	ReferencedSamplesFilter *string `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	// The threshold settings.
	Thresholds *CreateDataQualityRuleRequestCheckingConfigThresholds `json:"Thresholds,omitempty" xml:"Thresholds,omitempty" type:"Struct"`
	// The method that is used to calculate a threshold. You can leave this parameter empty if you use a rule template. Valid values:
	//
	// 	- Fixed
	//
	// 	- Fluctation
	//
	// 	- FluctationDiscreate
	//
	// 	- Auto
	//
	// 	- Average
	//
	// 	- Variance
	//
	// example:
	//
	// Fixed
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDataQualityRuleRequestCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleRequestCheckingConfig) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleRequestCheckingConfig) SetReferencedSamplesFilter(v string) *CreateDataQualityRuleRequestCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *CreateDataQualityRuleRequestCheckingConfig) SetThresholds(v *CreateDataQualityRuleRequestCheckingConfigThresholds) *CreateDataQualityRuleRequestCheckingConfig {
	s.Thresholds = v
	return s
}

func (s *CreateDataQualityRuleRequestCheckingConfig) SetType(v string) *CreateDataQualityRuleRequestCheckingConfig {
	s.Type = &v
	return s
}

type CreateDataQualityRuleRequestCheckingConfigThresholds struct {
	// The threshold settings for critical alerts.
	Critical *CreateDataQualityRuleRequestCheckingConfigThresholdsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	// The expected threshold setting.
	Expected *CreateDataQualityRuleRequestCheckingConfigThresholdsExpected `json:"Expected,omitempty" xml:"Expected,omitempty" type:"Struct"`
	// The threshold settings for normal alerts.
	Warned *CreateDataQualityRuleRequestCheckingConfigThresholdsWarned `json:"Warned,omitempty" xml:"Warned,omitempty" type:"Struct"`
}

func (s CreateDataQualityRuleRequestCheckingConfigThresholds) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleRequestCheckingConfigThresholds) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleRequestCheckingConfigThresholds) SetCritical(v *CreateDataQualityRuleRequestCheckingConfigThresholdsCritical) *CreateDataQualityRuleRequestCheckingConfigThresholds {
	s.Critical = v
	return s
}

func (s *CreateDataQualityRuleRequestCheckingConfigThresholds) SetExpected(v *CreateDataQualityRuleRequestCheckingConfigThresholdsExpected) *CreateDataQualityRuleRequestCheckingConfigThresholds {
	s.Expected = v
	return s
}

func (s *CreateDataQualityRuleRequestCheckingConfigThresholds) SetWarned(v *CreateDataQualityRuleRequestCheckingConfigThresholdsWarned) *CreateDataQualityRuleRequestCheckingConfigThresholds {
	s.Warned = v
	return s
}

type CreateDataQualityRuleRequestCheckingConfigThresholdsCritical struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Example:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.05
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDataQualityRuleRequestCheckingConfigThresholdsCritical) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleRequestCheckingConfigThresholdsCritical) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleRequestCheckingConfigThresholdsCritical) SetExpression(v string) *CreateDataQualityRuleRequestCheckingConfigThresholdsCritical {
	s.Expression = &v
	return s
}

func (s *CreateDataQualityRuleRequestCheckingConfigThresholdsCritical) SetOperator(v string) *CreateDataQualityRuleRequestCheckingConfigThresholdsCritical {
	s.Operator = &v
	return s
}

func (s *CreateDataQualityRuleRequestCheckingConfigThresholdsCritical) SetValue(v string) *CreateDataQualityRuleRequestCheckingConfigThresholdsCritical {
	s.Value = &v
	return s
}

type CreateDataQualityRuleRequestCheckingConfigThresholdsExpected struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Example:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue <= 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDataQualityRuleRequestCheckingConfigThresholdsExpected) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleRequestCheckingConfigThresholdsExpected) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleRequestCheckingConfigThresholdsExpected) SetExpression(v string) *CreateDataQualityRuleRequestCheckingConfigThresholdsExpected {
	s.Expression = &v
	return s
}

func (s *CreateDataQualityRuleRequestCheckingConfigThresholdsExpected) SetOperator(v string) *CreateDataQualityRuleRequestCheckingConfigThresholdsExpected {
	s.Operator = &v
	return s
}

func (s *CreateDataQualityRuleRequestCheckingConfigThresholdsExpected) SetValue(v string) *CreateDataQualityRuleRequestCheckingConfigThresholdsExpected {
	s.Value = &v
	return s
}

type CreateDataQualityRuleRequestCheckingConfigThresholdsWarned struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Example:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDataQualityRuleRequestCheckingConfigThresholdsWarned) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleRequestCheckingConfigThresholdsWarned) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleRequestCheckingConfigThresholdsWarned) SetExpression(v string) *CreateDataQualityRuleRequestCheckingConfigThresholdsWarned {
	s.Expression = &v
	return s
}

func (s *CreateDataQualityRuleRequestCheckingConfigThresholdsWarned) SetOperator(v string) *CreateDataQualityRuleRequestCheckingConfigThresholdsWarned {
	s.Operator = &v
	return s
}

func (s *CreateDataQualityRuleRequestCheckingConfigThresholdsWarned) SetValue(v string) *CreateDataQualityRuleRequestCheckingConfigThresholdsWarned {
	s.Value = &v
	return s
}

type CreateDataQualityRuleRequestErrorHandlers struct {
	// The SQL statement that is used to filter failed tasks. If you define the rule by using custom SQL statements, you must specify an SQL statement to filter failed tasks.
	//
	// example:
	//
	// SELECT 	- FROM tb_api_log WHERE id IS NULL
	ErrorDataFilter *string `json:"ErrorDataFilter,omitempty" xml:"ErrorDataFilter,omitempty"`
	// The type of the operation. Valid values:
	//
	// 	- SaveErrorData
	//
	// example:
	//
	// SaveErrorData
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDataQualityRuleRequestErrorHandlers) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleRequestErrorHandlers) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleRequestErrorHandlers) SetErrorDataFilter(v string) *CreateDataQualityRuleRequestErrorHandlers {
	s.ErrorDataFilter = &v
	return s
}

func (s *CreateDataQualityRuleRequestErrorHandlers) SetType(v string) *CreateDataQualityRuleRequestErrorHandlers {
	s.Type = &v
	return s
}

type CreateDataQualityRuleRequestSamplingConfig struct {
	// The metrics used for sampling. You can leave this parameter empty if you use a rule template. Valid values:
	//
	// 	- Count: the number of rows in the table.
	//
	// 	- Min: the minimum value of the field.
	//
	// 	- Max: the maximum value of the field.
	//
	// 	- Avg: the average value of the field.
	//
	// 	- DistinctCount: the number of unique values of the field after deduplication.
	//
	// 	- DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
	//
	// 	- DuplicatedCount: the number of duplicated values of the field.
	//
	// 	- DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
	//
	// 	- TableSize: the table size.
	//
	// 	- NullValueCount: the number of rows in which the field value is null.
	//
	// 	- NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
	//
	// 	- GroupCount: the field value and the number of rows for each field value.
	//
	// 	- CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
	//
	// 	- CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
	//
	// 	- UserDefinedSql: specifies that data is sampled by executing custom SQL statements.
	//
	// example:
	//
	// Count
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The parameters required for sampling.
	//
	// example:
	//
	// { "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.
	//
	// example:
	//
	// id IS NULL
	SamplingFilter *string `json:"SamplingFilter,omitempty" xml:"SamplingFilter,omitempty"`
	// The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.
	//
	// example:
	//
	// SET odps.sql.udf.timeout=600s;
	//
	// SET odps.sql.python.version=cp27;
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s CreateDataQualityRuleRequestSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleRequestSamplingConfig) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleRequestSamplingConfig) SetMetric(v string) *CreateDataQualityRuleRequestSamplingConfig {
	s.Metric = &v
	return s
}

func (s *CreateDataQualityRuleRequestSamplingConfig) SetMetricParameters(v string) *CreateDataQualityRuleRequestSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *CreateDataQualityRuleRequestSamplingConfig) SetSamplingFilter(v string) *CreateDataQualityRuleRequestSamplingConfig {
	s.SamplingFilter = &v
	return s
}

func (s *CreateDataQualityRuleRequestSamplingConfig) SetSettingConfig(v string) *CreateDataQualityRuleRequestSamplingConfig {
	s.SettingConfig = &v
	return s
}

type CreateDataQualityRuleRequestTarget struct {
	// The type of the database to which the table belongs. Valid values:
	//
	// 	- maxcompute
	//
	// 	- emr
	//
	// 	- cdh
	//
	// 	- hologres
	//
	// 	- analyticdb_for_postgresql
	//
	// 	- analyticdb_for_mysql
	//
	// 	- starrocks
	//
	// example:
	//
	// maxcompute
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The configuration of the partitioned table.
	//
	// example:
	//
	// ds=$[yyyymmdd-1]
	PartitionSpec *string `json:"PartitionSpec,omitempty" xml:"PartitionSpec,omitempty"`
	// The ID of the table that is limited by the rule in Data Map.
	//
	// This parameter is required.
	//
	// example:
	//
	// odps.unit_test.tb_unit_test
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	// The type of the monitored object. Valid values:
	//
	// 	- Table
	//
	// example:
	//
	// Table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDataQualityRuleRequestTarget) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleRequestTarget) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleRequestTarget) SetDatabaseType(v string) *CreateDataQualityRuleRequestTarget {
	s.DatabaseType = &v
	return s
}

func (s *CreateDataQualityRuleRequestTarget) SetPartitionSpec(v string) *CreateDataQualityRuleRequestTarget {
	s.PartitionSpec = &v
	return s
}

func (s *CreateDataQualityRuleRequestTarget) SetTableGuid(v string) *CreateDataQualityRuleRequestTarget {
	s.TableGuid = &v
	return s
}

func (s *CreateDataQualityRuleRequestTarget) SetType(v string) *CreateDataQualityRuleRequestTarget {
	s.Type = &v
	return s
}

type CreateDataQualityRuleShrinkRequest struct {
	// The check settings for sample data.
	CheckingConfigShrink *string `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty"`
	// The description of the rule. The description can be up to 500 characters in length.
	//
	// example:
	//
	// this is a odps _sql task
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the monitoring rule.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The operations that you can perform after the rule-based check fails.
	ErrorHandlersShrink *string `json:"ErrorHandlers,omitempty" xml:"ErrorHandlers,omitempty"`
	// The name of the rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// The table cannot be empty.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10726
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The sampling settings.
	SamplingConfigShrink *string `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty"`
	// The strength of the rule. Valid values:
	//
	// 	- Normal
	//
	// 	- High
	//
	// example:
	//
	// Normal
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The monitored object of the rule.
	TargetShrink *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The ID of the template used by the rule.
	//
	// example:
	//
	// system::user_defined
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s CreateDataQualityRuleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleShrinkRequest) SetCheckingConfigShrink(v string) *CreateDataQualityRuleShrinkRequest {
	s.CheckingConfigShrink = &v
	return s
}

func (s *CreateDataQualityRuleShrinkRequest) SetDescription(v string) *CreateDataQualityRuleShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateDataQualityRuleShrinkRequest) SetEnabled(v bool) *CreateDataQualityRuleShrinkRequest {
	s.Enabled = &v
	return s
}

func (s *CreateDataQualityRuleShrinkRequest) SetErrorHandlersShrink(v string) *CreateDataQualityRuleShrinkRequest {
	s.ErrorHandlersShrink = &v
	return s
}

func (s *CreateDataQualityRuleShrinkRequest) SetName(v string) *CreateDataQualityRuleShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateDataQualityRuleShrinkRequest) SetProjectId(v int64) *CreateDataQualityRuleShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataQualityRuleShrinkRequest) SetSamplingConfigShrink(v string) *CreateDataQualityRuleShrinkRequest {
	s.SamplingConfigShrink = &v
	return s
}

func (s *CreateDataQualityRuleShrinkRequest) SetSeverity(v string) *CreateDataQualityRuleShrinkRequest {
	s.Severity = &v
	return s
}

func (s *CreateDataQualityRuleShrinkRequest) SetTargetShrink(v string) *CreateDataQualityRuleShrinkRequest {
	s.TargetShrink = &v
	return s
}

func (s *CreateDataQualityRuleShrinkRequest) SetTemplateCode(v string) *CreateDataQualityRuleShrinkRequest {
	s.TemplateCode = &v
	return s
}

type CreateDataQualityRuleResponseBody struct {
	// The ID of the rule.
	//
	// example:
	//
	// 19715
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDataQualityRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleResponseBody) SetId(v int64) *CreateDataQualityRuleResponseBody {
	s.Id = &v
	return s
}

func (s *CreateDataQualityRuleResponseBody) SetRequestId(v string) *CreateDataQualityRuleResponseBody {
	s.RequestId = &v
	return s
}

type CreateDataQualityRuleResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDataQualityRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDataQualityRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleResponse) SetHeaders(v map[string]*string) *CreateDataQualityRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateDataQualityRuleResponse) SetStatusCode(v int32) *CreateDataQualityRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDataQualityRuleResponse) SetBody(v *CreateDataQualityRuleResponseBody) *CreateDataQualityRuleResponse {
	s.Body = v
	return s
}

type CreateDataQualityRuleTemplateRequest struct {
	// The check settings for sample data.
	CheckingConfig *CreateDataQualityRuleTemplateRequestCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	// The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).
	//
	// example:
	//
	// /ods/order_data
	DirectoryPath *string `json:"DirectoryPath,omitempty" xml:"DirectoryPath,omitempty"`
	// The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.
	//
	// This parameter is required.
	//
	// example:
	//
	// Table row Count Verification
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The sampling settings.
	SamplingConfig *CreateDataQualityRuleTemplateRequestSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	// The applicable scope of the template. Valid values:
	//
	// 	- Tenant: The template is available in all workspaces in the current tenant.
	//
	// 	- Project: The template is available only in the current workspace.
	//
	// example:
	//
	// Project
	VisibleScope *string `json:"VisibleScope,omitempty" xml:"VisibleScope,omitempty"`
}

func (s CreateDataQualityRuleTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleTemplateRequest) SetCheckingConfig(v *CreateDataQualityRuleTemplateRequestCheckingConfig) *CreateDataQualityRuleTemplateRequest {
	s.CheckingConfig = v
	return s
}

func (s *CreateDataQualityRuleTemplateRequest) SetDirectoryPath(v string) *CreateDataQualityRuleTemplateRequest {
	s.DirectoryPath = &v
	return s
}

func (s *CreateDataQualityRuleTemplateRequest) SetName(v string) *CreateDataQualityRuleTemplateRequest {
	s.Name = &v
	return s
}

func (s *CreateDataQualityRuleTemplateRequest) SetProjectId(v int64) *CreateDataQualityRuleTemplateRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataQualityRuleTemplateRequest) SetSamplingConfig(v *CreateDataQualityRuleTemplateRequestSamplingConfig) *CreateDataQualityRuleTemplateRequest {
	s.SamplingConfig = v
	return s
}

func (s *CreateDataQualityRuleTemplateRequest) SetVisibleScope(v string) *CreateDataQualityRuleTemplateRequest {
	s.VisibleScope = &v
	return s
}

type CreateDataQualityRuleTemplateRequestCheckingConfig struct {
	// The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference samples and perform aggregate operations on the reference values. In this example, an expression is used to specify the query method of referenced samples.
	//
	// example:
	//
	// { "bizdate": [ "-1", "-7", "-1m" ] }
	ReferencedSamplesFilter *string `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	// The threshold calculation method. Valid values:
	//
	// 	- Fixed
	//
	// 	- Fluctation
	//
	// 	- FluctationDiscreate
	//
	// 	- Auto
	//
	// 	- Average
	//
	// 	- Variance
	//
	// example:
	//
	// Fixed
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDataQualityRuleTemplateRequestCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleTemplateRequestCheckingConfig) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleTemplateRequestCheckingConfig) SetReferencedSamplesFilter(v string) *CreateDataQualityRuleTemplateRequestCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *CreateDataQualityRuleTemplateRequestCheckingConfig) SetType(v string) *CreateDataQualityRuleTemplateRequestCheckingConfig {
	s.Type = &v
	return s
}

type CreateDataQualityRuleTemplateRequestSamplingConfig struct {
	// The metrics used for sampling. Valid values:
	//
	// 	- Count: the number of rows in the table.
	//
	// 	- Min: the minimum value of the field.
	//
	// 	- Max: the maximum value of the field.
	//
	// 	- Avg: the average value of the field.
	//
	// 	- DistinctCount: the number of unique values of the field after deduplication.
	//
	// 	- DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
	//
	// 	- DuplicatedCount: the number of duplicated values of the field.
	//
	// 	- DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
	//
	// 	- TableSize: the table size.
	//
	// 	- NullValueCount: the number of rows in which the field value is null.
	//
	// 	- NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
	//
	// 	- GroupCount: the field value and the number of rows for each field value.
	//
	// 	- CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
	//
	// 	- CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
	//
	// 	- UserDefinedSql: specifies that data is sampled by executing custom SQL statements.
	//
	// example:
	//
	// Count
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The parameters required for sampling.
	//
	// example:
	//
	// {"SQL": "select count(1) from table;"}
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.
	//
	// example:
	//
	// SET odps.sql.udf.timeout=600s;
	//
	// SET odps.sql.python.version=cp27;
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s CreateDataQualityRuleTemplateRequestSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleTemplateRequestSamplingConfig) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleTemplateRequestSamplingConfig) SetMetric(v string) *CreateDataQualityRuleTemplateRequestSamplingConfig {
	s.Metric = &v
	return s
}

func (s *CreateDataQualityRuleTemplateRequestSamplingConfig) SetMetricParameters(v string) *CreateDataQualityRuleTemplateRequestSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *CreateDataQualityRuleTemplateRequestSamplingConfig) SetSettingConfig(v string) *CreateDataQualityRuleTemplateRequestSamplingConfig {
	s.SettingConfig = &v
	return s
}

type CreateDataQualityRuleTemplateShrinkRequest struct {
	// The check settings for sample data.
	CheckingConfigShrink *string `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty"`
	// The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).
	//
	// example:
	//
	// /ods/order_data
	DirectoryPath *string `json:"DirectoryPath,omitempty" xml:"DirectoryPath,omitempty"`
	// The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.
	//
	// This parameter is required.
	//
	// example:
	//
	// Table row Count Verification
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The sampling settings.
	SamplingConfigShrink *string `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty"`
	// The applicable scope of the template. Valid values:
	//
	// 	- Tenant: The template is available in all workspaces in the current tenant.
	//
	// 	- Project: The template is available only in the current workspace.
	//
	// example:
	//
	// Project
	VisibleScope *string `json:"VisibleScope,omitempty" xml:"VisibleScope,omitempty"`
}

func (s CreateDataQualityRuleTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleTemplateShrinkRequest) SetCheckingConfigShrink(v string) *CreateDataQualityRuleTemplateShrinkRequest {
	s.CheckingConfigShrink = &v
	return s
}

func (s *CreateDataQualityRuleTemplateShrinkRequest) SetDirectoryPath(v string) *CreateDataQualityRuleTemplateShrinkRequest {
	s.DirectoryPath = &v
	return s
}

func (s *CreateDataQualityRuleTemplateShrinkRequest) SetName(v string) *CreateDataQualityRuleTemplateShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateDataQualityRuleTemplateShrinkRequest) SetProjectId(v int64) *CreateDataQualityRuleTemplateShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataQualityRuleTemplateShrinkRequest) SetSamplingConfigShrink(v string) *CreateDataQualityRuleTemplateShrinkRequest {
	s.SamplingConfigShrink = &v
	return s
}

func (s *CreateDataQualityRuleTemplateShrinkRequest) SetVisibleScope(v string) *CreateDataQualityRuleTemplateShrinkRequest {
	s.VisibleScope = &v
	return s
}

type CreateDataQualityRuleTemplateResponseBody struct {
	// The Code of the rule template.
	//
	// example:
	//
	// UserDefined:3001
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDataQualityRuleTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleTemplateResponseBody) SetCode(v string) *CreateDataQualityRuleTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *CreateDataQualityRuleTemplateResponseBody) SetRequestId(v string) *CreateDataQualityRuleTemplateResponseBody {
	s.RequestId = &v
	return s
}

type CreateDataQualityRuleTemplateResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDataQualityRuleTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDataQualityRuleTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataQualityRuleTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateDataQualityRuleTemplateResponse) SetHeaders(v map[string]*string) *CreateDataQualityRuleTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateDataQualityRuleTemplateResponse) SetStatusCode(v int32) *CreateDataQualityRuleTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDataQualityRuleTemplateResponse) SetBody(v *CreateDataQualityRuleTemplateResponseBody) *CreateDataQualityRuleTemplateResponse {
	s.Body = v
	return s
}

type CreateDataSourceRequest struct {
	// The connection configurations of the data source, including the connection address, access identity, and environment information. The envType parameter specifies the environment in which the data source is used. Valid values of the envType parameter:
	//
	// 	- Dev: development environment
	//
	// 	- Prod: production environment
	//
	// The parameters that you need to configure for the data source vary based on the mode in which the data source is added. For more information, see [Data source connection information (ConnectionProperties)](https://help.aliyun.com/document_detail/2852465.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	// 	"envType": "Prod",
	//
	// 	"regionId": "cn-beijing",
	//
	//     "instanceId": "hgprecn-cn-x0r3oun4k001",
	//
	//     "database": "testdb",
	//
	//     "securityProtocol": "authTypeNone",
	//
	//     "authType": "Executor",
	//
	//     "authIdentity": "1107550004253538"
	//
	// }
	ConnectionProperties *string `json:"ConnectionProperties,omitempty" xml:"ConnectionProperties,omitempty"`
	// The mode in which you want to add the data source. The mode varies based on the data source type. Valid values for MySQL data sources:
	//
	// 	- InstanceMode: instance mode
	//
	// 	- UrlMode: connection string mode
	//
	// This parameter is required.
	//
	// example:
	//
	// UrlMode
	ConnectionPropertiesMode *string `json:"ConnectionPropertiesMode,omitempty" xml:"ConnectionPropertiesMode,omitempty"`
	// The description of the data source. The description cannot exceed 3,000 characters in length.
	//
	// example:
	//
	// this is a holo datasource
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the data source. The name can be up to 255 characters in length and can contain letters, digits, and underscores (_). The name must start with a letter.
	//
	// This parameter is required.
	//
	// example:
	//
	// demo_holo_datasource
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/overview) and go to the workspace management page to obtain the ID.
	//
	// This parameter is used to determine the DataWorks workspaces used for this API call.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The type of the data source. More than 70 types of data sources are supported in DataWorks. For more information, see [Data source types](https://help.aliyun.com/document_detail/2852465.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// hologres
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateDataSourceRequest) SetConnectionProperties(v string) *CreateDataSourceRequest {
	s.ConnectionProperties = &v
	return s
}

func (s *CreateDataSourceRequest) SetConnectionPropertiesMode(v string) *CreateDataSourceRequest {
	s.ConnectionPropertiesMode = &v
	return s
}

func (s *CreateDataSourceRequest) SetDescription(v string) *CreateDataSourceRequest {
	s.Description = &v
	return s
}

func (s *CreateDataSourceRequest) SetName(v string) *CreateDataSourceRequest {
	s.Name = &v
	return s
}

func (s *CreateDataSourceRequest) SetProjectId(v int64) *CreateDataSourceRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateDataSourceRequest) SetType(v string) *CreateDataSourceRequest {
	s.Type = &v
	return s
}

type CreateDataSourceResponseBody struct {
	// The data source ID.
	//
	// example:
	//
	// 22130
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// B62EC203-B39E-5DC1-B5B8-EB3C61707009
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataSourceResponseBody) SetId(v int64) *CreateDataSourceResponseBody {
	s.Id = &v
	return s
}

func (s *CreateDataSourceResponseBody) SetRequestId(v string) *CreateDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type CreateDataSourceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateDataSourceResponse) SetHeaders(v map[string]*string) *CreateDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateDataSourceResponse) SetStatusCode(v int32) *CreateDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDataSourceResponse) SetBody(v *CreateDataSourceResponseBody) *CreateDataSourceResponse {
	s.Body = v
	return s
}

type CreateDataSourceSharedRuleRequest struct {
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 144544
	DataSourceId *int64 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// Share data sources to the target project environment, including
	//
	// - Dev (Development Environment)
	//
	// - Prod (production environment)
	//
	// This parameter is required.
	//
	// example:
	//
	// Dev
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The user with which you want to share the data source. If you do not configure this parameter, the data source is shared to an entire workspace.
	//
	// example:
	//
	// 1107550004253538
	SharedUser *string `json:"SharedUser,omitempty" xml:"SharedUser,omitempty"`
	// The ID of the workspace to which you want to share the data source. You cannot share the data source to the workspace with which the data source is associated.
	//
	// This parameter is required.
	//
	// example:
	//
	// 106560
	TargetProjectId *int64 `json:"TargetProjectId,omitempty" xml:"TargetProjectId,omitempty"`
}

func (s CreateDataSourceSharedRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceSharedRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateDataSourceSharedRuleRequest) SetDataSourceId(v int64) *CreateDataSourceSharedRuleRequest {
	s.DataSourceId = &v
	return s
}

func (s *CreateDataSourceSharedRuleRequest) SetEnvType(v string) *CreateDataSourceSharedRuleRequest {
	s.EnvType = &v
	return s
}

func (s *CreateDataSourceSharedRuleRequest) SetSharedUser(v string) *CreateDataSourceSharedRuleRequest {
	s.SharedUser = &v
	return s
}

func (s *CreateDataSourceSharedRuleRequest) SetTargetProjectId(v int64) *CreateDataSourceSharedRuleRequest {
	s.TargetProjectId = &v
	return s
}

type CreateDataSourceSharedRuleResponseBody struct {
	// The sharing rule ID.
	//
	// example:
	//
	// 105412
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the request. It is used to locate logs and troubleshoot problems.
	//
	// example:
	//
	// 46F594E6-84AB-5FA5-8144-6F3D149961E1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDataSourceSharedRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceSharedRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataSourceSharedRuleResponseBody) SetId(v int64) *CreateDataSourceSharedRuleResponseBody {
	s.Id = &v
	return s
}

func (s *CreateDataSourceSharedRuleResponseBody) SetRequestId(v string) *CreateDataSourceSharedRuleResponseBody {
	s.RequestId = &v
	return s
}

type CreateDataSourceSharedRuleResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDataSourceSharedRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDataSourceSharedRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceSharedRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateDataSourceSharedRuleResponse) SetHeaders(v map[string]*string) *CreateDataSourceSharedRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateDataSourceSharedRuleResponse) SetStatusCode(v int32) *CreateDataSourceSharedRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDataSourceSharedRuleResponse) SetBody(v *CreateDataSourceSharedRuleResponseBody) *CreateDataSourceSharedRuleResponse {
	s.Body = v
	return s
}

type CreateFileRequest struct {
	// example:
	//
	// {"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}
	AdvancedSettings *string `json:"AdvancedSettings,omitempty" xml:"AdvancedSettings,omitempty"`
	// example:
	//
	// true
	ApplyScheduleImmediately *bool `json:"ApplyScheduleImmediately,omitempty" xml:"ApplyScheduleImmediately,omitempty"`
	// example:
	//
	// true
	AutoParsing *bool `json:"AutoParsing,omitempty" xml:"AutoParsing,omitempty"`
	// example:
	//
	// 120000
	AutoRerunIntervalMillis *int32 `json:"AutoRerunIntervalMillis,omitempty" xml:"AutoRerunIntervalMillis,omitempty"`
	// example:
	//
	// 3
	AutoRerunTimes *int32 `json:"AutoRerunTimes,omitempty" xml:"AutoRerunTimes,omitempty"`
	// example:
	//
	// odps_source
	ConnectionName *string `json:"ConnectionName,omitempty" xml:"ConnectionName,omitempty"`
	// example:
	//
	// SHOW TABLES;
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// false
	CreateFolderIfNotExists *bool `json:"CreateFolderIfNotExists,omitempty" xml:"CreateFolderIfNotExists,omitempty"`
	// example:
	//
	// 00 05 00 	- 	- ?
	CronExpress *string `json:"CronExpress,omitempty" xml:"CronExpress,omitempty"`
	// example:
	//
	// DAY
	CycleType *string `json:"CycleType,omitempty" xml:"CycleType,omitempty"`
	// example:
	//
	// abc
	DependentNodeIdList *string `json:"DependentNodeIdList,omitempty" xml:"DependentNodeIdList,omitempty"`
	// example:
	//
	// NONE
	DependentType *string `json:"DependentType,omitempty" xml:"DependentType,omitempty"`
	// example:
	//
	// 1671694850000
	EndEffectDate   *int64  `json:"EndEffectDate,omitempty" xml:"EndEffectDate,omitempty"`
	FileDescription *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	// example:
	//
	// Business_process/First_Business_Process/MaxCompute/Folder_1/Folder_2
	FileFolderPath *string `json:"FileFolderPath,omitempty" xml:"FileFolderPath,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// File name
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	FileType *int32 `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// false
	IgnoreParentSkipRunningProperty *bool `json:"IgnoreParentSkipRunningProperty,omitempty" xml:"IgnoreParentSkipRunningProperty,omitempty"`
	// example:
	//
	// m-bp1h4b5a8ogkbll2f3tr
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// example:
	//
	// project_root,project.file1,project.001_out
	InputList *string `json:"InputList,omitempty" xml:"InputList,omitempty"`
	// example:
	//
	// [{"ValueSource": "project_001.first_node:bizdate_param","ParameterName": "bizdate_input"}]
	InputParameters *string `json:"InputParameters,omitempty" xml:"InputParameters,omitempty"`
	// example:
	//
	// [{"Type": 1,"Value": "${bizdate}","ParameterName": "bizdate_param"}]
	OutputParameters *string `json:"OutputParameters,omitempty" xml:"OutputParameters,omitempty"`
	// example:
	//
	// 1000000000001
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// example:
	//
	// a=x b=y
	ParaValue *string `json:"ParaValue,omitempty" xml:"ParaValue,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	// example:
	//
	// ALL_ALLOWED
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// example:
	//
	// 375827434852437
	ResourceGroupId *int64 `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// example:
	//
	// S_res_group_559_1613715566828
	ResourceGroupIdentifier *string `json:"ResourceGroupIdentifier,omitempty" xml:"ResourceGroupIdentifier,omitempty"`
	// example:
	//
	// NORMAL
	SchedulerType *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
	// example:
	//
	// 1671608450000
	StartEffectDate *int64 `json:"StartEffectDate,omitempty" xml:"StartEffectDate,omitempty"`
	// example:
	//
	// true
	StartImmediately *bool `json:"StartImmediately,omitempty" xml:"StartImmediately,omitempty"`
	// example:
	//
	// false
	Stop *bool `json:"Stop,omitempty" xml:"Stop,omitempty"`
	// example:
	//
	// 1
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s CreateFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFileRequest) GoString() string {
	return s.String()
}

func (s *CreateFileRequest) SetAdvancedSettings(v string) *CreateFileRequest {
	s.AdvancedSettings = &v
	return s
}

func (s *CreateFileRequest) SetApplyScheduleImmediately(v bool) *CreateFileRequest {
	s.ApplyScheduleImmediately = &v
	return s
}

func (s *CreateFileRequest) SetAutoParsing(v bool) *CreateFileRequest {
	s.AutoParsing = &v
	return s
}

func (s *CreateFileRequest) SetAutoRerunIntervalMillis(v int32) *CreateFileRequest {
	s.AutoRerunIntervalMillis = &v
	return s
}

func (s *CreateFileRequest) SetAutoRerunTimes(v int32) *CreateFileRequest {
	s.AutoRerunTimes = &v
	return s
}

func (s *CreateFileRequest) SetConnectionName(v string) *CreateFileRequest {
	s.ConnectionName = &v
	return s
}

func (s *CreateFileRequest) SetContent(v string) *CreateFileRequest {
	s.Content = &v
	return s
}

func (s *CreateFileRequest) SetCreateFolderIfNotExists(v bool) *CreateFileRequest {
	s.CreateFolderIfNotExists = &v
	return s
}

func (s *CreateFileRequest) SetCronExpress(v string) *CreateFileRequest {
	s.CronExpress = &v
	return s
}

func (s *CreateFileRequest) SetCycleType(v string) *CreateFileRequest {
	s.CycleType = &v
	return s
}

func (s *CreateFileRequest) SetDependentNodeIdList(v string) *CreateFileRequest {
	s.DependentNodeIdList = &v
	return s
}

func (s *CreateFileRequest) SetDependentType(v string) *CreateFileRequest {
	s.DependentType = &v
	return s
}

func (s *CreateFileRequest) SetEndEffectDate(v int64) *CreateFileRequest {
	s.EndEffectDate = &v
	return s
}

func (s *CreateFileRequest) SetFileDescription(v string) *CreateFileRequest {
	s.FileDescription = &v
	return s
}

func (s *CreateFileRequest) SetFileFolderPath(v string) *CreateFileRequest {
	s.FileFolderPath = &v
	return s
}

func (s *CreateFileRequest) SetFileName(v string) *CreateFileRequest {
	s.FileName = &v
	return s
}

func (s *CreateFileRequest) SetFileType(v int32) *CreateFileRequest {
	s.FileType = &v
	return s
}

func (s *CreateFileRequest) SetIgnoreParentSkipRunningProperty(v bool) *CreateFileRequest {
	s.IgnoreParentSkipRunningProperty = &v
	return s
}

func (s *CreateFileRequest) SetImageId(v string) *CreateFileRequest {
	s.ImageId = &v
	return s
}

func (s *CreateFileRequest) SetInputList(v string) *CreateFileRequest {
	s.InputList = &v
	return s
}

func (s *CreateFileRequest) SetInputParameters(v string) *CreateFileRequest {
	s.InputParameters = &v
	return s
}

func (s *CreateFileRequest) SetOutputParameters(v string) *CreateFileRequest {
	s.OutputParameters = &v
	return s
}

func (s *CreateFileRequest) SetOwner(v string) *CreateFileRequest {
	s.Owner = &v
	return s
}

func (s *CreateFileRequest) SetParaValue(v string) *CreateFileRequest {
	s.ParaValue = &v
	return s
}

func (s *CreateFileRequest) SetProjectId(v int64) *CreateFileRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFileRequest) SetProjectIdentifier(v string) *CreateFileRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *CreateFileRequest) SetRerunMode(v string) *CreateFileRequest {
	s.RerunMode = &v
	return s
}

func (s *CreateFileRequest) SetResourceGroupId(v int64) *CreateFileRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateFileRequest) SetResourceGroupIdentifier(v string) *CreateFileRequest {
	s.ResourceGroupIdentifier = &v
	return s
}

func (s *CreateFileRequest) SetSchedulerType(v string) *CreateFileRequest {
	s.SchedulerType = &v
	return s
}

func (s *CreateFileRequest) SetStartEffectDate(v int64) *CreateFileRequest {
	s.StartEffectDate = &v
	return s
}

func (s *CreateFileRequest) SetStartImmediately(v bool) *CreateFileRequest {
	s.StartImmediately = &v
	return s
}

func (s *CreateFileRequest) SetStop(v bool) *CreateFileRequest {
	s.Stop = &v
	return s
}

func (s *CreateFileRequest) SetTimeout(v int32) *CreateFileRequest {
	s.Timeout = &v
	return s
}

type CreateFileResponseBody struct {
	// example:
	//
	// 1000001
	Data *int64 `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFileResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFileResponseBody) SetData(v int64) *CreateFileResponseBody {
	s.Data = &v
	return s
}

func (s *CreateFileResponseBody) SetErrorCode(v string) *CreateFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateFileResponseBody) SetErrorMessage(v string) *CreateFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateFileResponseBody) SetHttpStatusCode(v int32) *CreateFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateFileResponseBody) SetRequestId(v string) *CreateFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFileResponseBody) SetSuccess(v bool) *CreateFileResponseBody {
	s.Success = &v
	return s
}

type CreateFileResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFileResponse) GoString() string {
	return s.String()
}

func (s *CreateFileResponse) SetHeaders(v map[string]*string) *CreateFileResponse {
	s.Headers = v
	return s
}

func (s *CreateFileResponse) SetStatusCode(v int32) *CreateFileResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFileResponse) SetBody(v *CreateFileResponseBody) *CreateFileResponse {
	s.Body = v
	return s
}

type CreateFolderRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Business_process/System_Data/MaxCompute/import_layer
	FolderPath *string `json:"FolderPath,omitempty" xml:"FolderPath,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s CreateFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFolderRequest) GoString() string {
	return s.String()
}

func (s *CreateFolderRequest) SetFolderPath(v string) *CreateFolderRequest {
	s.FolderPath = &v
	return s
}

func (s *CreateFolderRequest) SetProjectId(v int64) *CreateFolderRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFolderRequest) SetProjectIdentifier(v string) *CreateFolderRequest {
	s.ProjectIdentifier = &v
	return s
}

type CreateFolderResponseBody struct {
	// example:
	//
	// bdfd68****
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateFolderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFolderResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFolderResponseBody) SetData(v string) *CreateFolderResponseBody {
	s.Data = &v
	return s
}

func (s *CreateFolderResponseBody) SetErrorCode(v string) *CreateFolderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateFolderResponseBody) SetErrorMessage(v string) *CreateFolderResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateFolderResponseBody) SetHttpStatusCode(v int32) *CreateFolderResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateFolderResponseBody) SetRequestId(v string) *CreateFolderResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFolderResponseBody) SetSuccess(v bool) *CreateFolderResponseBody {
	s.Success = &v
	return s
}

type CreateFolderResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFolderResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFolderResponse) GoString() string {
	return s.String()
}

func (s *CreateFolderResponse) SetHeaders(v map[string]*string) *CreateFolderResponse {
	s.Headers = v
	return s
}

func (s *CreateFolderResponse) SetStatusCode(v int32) *CreateFolderResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFolderResponse) SetBody(v *CreateFolderResponseBody) *CreateFolderResponse {
	s.Body = v
	return s
}

type CreateFunctionRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//   "version": "1.1.0",
	//
	//   "kind": "Function",
	//
	//   "spec": {
	//
	//     "functions": [
	//
	//       {
	//
	//         "name": "function name",
	//
	//         "script": {
	//
	//           "content": "{\\"name\\": \\"function name\\", \\"datasource\\": {\\"type\\": \\"ODPS\\", \\"name\\": \\"ODPS_first\\"}, \\"runtimeResource\\": {\\"resourceGroup\\": \\"s_res_group_xx_xxxx\\"}}",
	//
	//           "path": "XXX/OpenAPI/function/function name",
	//
	//           "runtime": {
	//
	//             "command": "ODPS_FUNCTION"
	//
	//           }
	//
	//         },
	//
	//         "datasource": {
	//
	//           "name": "ODPS_first",
	//
	//           "type": "ODPS"
	//
	//         },
	//
	//         "runtimeResource": {
	//
	//           "resourceGroup": "S_res_group_XXXX_XXXX"
	//
	//         }
	//
	//       }
	//
	//     ]
	//
	//   }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s CreateFunctionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFunctionRequest) GoString() string {
	return s.String()
}

func (s *CreateFunctionRequest) SetProjectId(v int64) *CreateFunctionRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFunctionRequest) SetSpec(v string) *CreateFunctionRequest {
	s.Spec = &v
	return s
}

type CreateFunctionResponseBody struct {
	// The ID of the UDF.
	//
	// example:
	//
	// 580667964888595XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// AE49C88D-5BEE-5ADD-8B8C-C4BBC0D7XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFunctionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFunctionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFunctionResponseBody) SetId(v int64) *CreateFunctionResponseBody {
	s.Id = &v
	return s
}

func (s *CreateFunctionResponseBody) SetRequestId(v string) *CreateFunctionResponseBody {
	s.RequestId = &v
	return s
}

type CreateFunctionResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFunctionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFunctionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFunctionResponse) GoString() string {
	return s.String()
}

func (s *CreateFunctionResponse) SetHeaders(v map[string]*string) *CreateFunctionResponse {
	s.Headers = v
	return s
}

func (s *CreateFunctionResponse) SetStatusCode(v int32) *CreateFunctionResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFunctionResponse) SetBody(v *CreateFunctionResponseBody) *CreateFunctionResponse {
	s.Body = v
	return s
}

type CreateLineageRelationshipRequest struct {
	DstEntity *LineageEntity `json:"DstEntity,omitempty" xml:"DstEntity,omitempty"`
	SrcEntity *LineageEntity `json:"SrcEntity,omitempty" xml:"SrcEntity,omitempty"`
	Task      *LineageTask   `json:"Task,omitempty" xml:"Task,omitempty"`
}

func (s CreateLineageRelationshipRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLineageRelationshipRequest) GoString() string {
	return s.String()
}

func (s *CreateLineageRelationshipRequest) SetDstEntity(v *LineageEntity) *CreateLineageRelationshipRequest {
	s.DstEntity = v
	return s
}

func (s *CreateLineageRelationshipRequest) SetSrcEntity(v *LineageEntity) *CreateLineageRelationshipRequest {
	s.SrcEntity = v
	return s
}

func (s *CreateLineageRelationshipRequest) SetTask(v *LineageTask) *CreateLineageRelationshipRequest {
	s.Task = v
	return s
}

type CreateLineageRelationshipShrinkRequest struct {
	DstEntityShrink *string `json:"DstEntity,omitempty" xml:"DstEntity,omitempty"`
	SrcEntityShrink *string `json:"SrcEntity,omitempty" xml:"SrcEntity,omitempty"`
	TaskShrink      *string `json:"Task,omitempty" xml:"Task,omitempty"`
}

func (s CreateLineageRelationshipShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLineageRelationshipShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateLineageRelationshipShrinkRequest) SetDstEntityShrink(v string) *CreateLineageRelationshipShrinkRequest {
	s.DstEntityShrink = &v
	return s
}

func (s *CreateLineageRelationshipShrinkRequest) SetSrcEntityShrink(v string) *CreateLineageRelationshipShrinkRequest {
	s.SrcEntityShrink = &v
	return s
}

func (s *CreateLineageRelationshipShrinkRequest) SetTaskShrink(v string) *CreateLineageRelationshipShrinkRequest {
	s.TaskShrink = &v
	return s
}

type CreateLineageRelationshipResponseBody struct {
	// example:
	//
	// 110xxxx:custom-table.xxxxx:maxcompute-table.project.test_big_lineage_080901:custom-sqlxx.00001
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateLineageRelationshipResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLineageRelationshipResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLineageRelationshipResponseBody) SetId(v string) *CreateLineageRelationshipResponseBody {
	s.Id = &v
	return s
}

func (s *CreateLineageRelationshipResponseBody) SetRequestId(v string) *CreateLineageRelationshipResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLineageRelationshipResponseBody) SetSuccess(v bool) *CreateLineageRelationshipResponseBody {
	s.Success = &v
	return s
}

type CreateLineageRelationshipResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLineageRelationshipResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLineageRelationshipResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLineageRelationshipResponse) GoString() string {
	return s.String()
}

func (s *CreateLineageRelationshipResponse) SetHeaders(v map[string]*string) *CreateLineageRelationshipResponse {
	s.Headers = v
	return s
}

func (s *CreateLineageRelationshipResponse) SetStatusCode(v int32) *CreateLineageRelationshipResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLineageRelationshipResponse) SetBody(v *CreateLineageRelationshipResponseBody) *CreateLineageRelationshipResponse {
	s.Body = v
	return s
}

type CreateMetaCollectionRequest struct {
	// example:
	//
	// test comment
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// test_album
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// category.123
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Category
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateMetaCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaCollectionRequest) GoString() string {
	return s.String()
}

func (s *CreateMetaCollectionRequest) SetDescription(v string) *CreateMetaCollectionRequest {
	s.Description = &v
	return s
}

func (s *CreateMetaCollectionRequest) SetName(v string) *CreateMetaCollectionRequest {
	s.Name = &v
	return s
}

func (s *CreateMetaCollectionRequest) SetParentId(v string) *CreateMetaCollectionRequest {
	s.ParentId = &v
	return s
}

func (s *CreateMetaCollectionRequest) SetType(v string) *CreateMetaCollectionRequest {
	s.Type = &v
	return s
}

type CreateMetaCollectionResponseBody struct {
	// example:
	//
	// category.123
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// Id of the request
	//
	// example:
	//
	// E6F0DBDD-5AD****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateMetaCollectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMetaCollectionResponseBody) SetId(v string) *CreateMetaCollectionResponseBody {
	s.Id = &v
	return s
}

func (s *CreateMetaCollectionResponseBody) SetRequestId(v string) *CreateMetaCollectionResponseBody {
	s.RequestId = &v
	return s
}

type CreateMetaCollectionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMetaCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMetaCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaCollectionResponse) GoString() string {
	return s.String()
}

func (s *CreateMetaCollectionResponse) SetHeaders(v map[string]*string) *CreateMetaCollectionResponse {
	s.Headers = v
	return s
}

func (s *CreateMetaCollectionResponse) SetStatusCode(v int32) *CreateMetaCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMetaCollectionResponse) SetBody(v *CreateMetaCollectionResponseBody) *CreateMetaCollectionResponse {
	s.Body = v
	return s
}

type CreateNetworkRequest struct {
	// The client token that is used to ensure the idempotence of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// eb870033-74c8-4b1b-9664-04c4e7cc3465
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the serverless resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The ID of the virtual private cloud (VPC).
	//
	// This parameter is required.
	//
	// example:
	//
	// vpc-m2et4f3oc8msfbccXXXXX
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The VSwitch ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// vsw-uf8usrhs7hjd9amsXXXXX
	VswitchId *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s CreateNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkRequest) SetClientToken(v string) *CreateNetworkRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateNetworkRequest) SetResourceGroupId(v string) *CreateNetworkRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateNetworkRequest) SetVpcId(v string) *CreateNetworkRequest {
	s.VpcId = &v
	return s
}

func (s *CreateNetworkRequest) SetVswitchId(v string) *CreateNetworkRequest {
	s.VswitchId = &v
	return s
}

type CreateNetworkResponseBody struct {
	// The network ID.
	//
	// example:
	//
	// 1000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNetworkResponseBody) SetId(v int64) *CreateNetworkResponseBody {
	s.Id = &v
	return s
}

func (s *CreateNetworkResponseBody) SetRequestId(v string) *CreateNetworkResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateNetworkResponseBody) SetSuccess(v bool) *CreateNetworkResponseBody {
	s.Success = &v
	return s
}

type CreateNetworkResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkResponse) SetHeaders(v map[string]*string) *CreateNetworkResponse {
	s.Headers = v
	return s
}

func (s *CreateNetworkResponse) SetStatusCode(v int32) *CreateNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNetworkResponse) SetBody(v *CreateNetworkResponseBody) *CreateNetworkResponse {
	s.Body = v
	return s
}

type CreateNodeRequest struct {
	// The container ID. If you want to create a node in a container, you must configure this parameter to specify the container. The container can be a workflow or a node in a container.
	//
	// >  If you configure this parameter, the path field defined in FlowSpec becomes invalid.
	//
	// example:
	//
	// a7ef0634-20ec-4a7c-a214-54020f91XXXX
	ContainerId *int64 `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The scene of the node. This parameter determines the location (the DataStudio pane or the Manual pane) of the node. You can set this parameter to DataworksManualWorkflow only if the ContainerId parameter is configured and the container specified by ContainerId is a manually triggered workflow.
	//
	// Valid values:
	//
	// 	- DataworksProject
	//
	// 	- DataworksManualWorkflow
	//
	// 	- DataworksManualTask
	//
	// This parameter is required.
	//
	// example:
	//
	// DATAWORKS_PROJECT
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// { "type": "object", "description": "CycleWorkflow the structure of the workflow configurations", "properties": { "version": { "type": "string", "description": "the version ID of the workflow configuration files" }, "kind": { "type": "string", "description": "the category ID of the workflow", "enum": [ "CycleWorkflow", "ManualWorkflow", "ManualNode", "TemporaryWorkflow", "PaiFlow", "BatchDeployment", "DataSource", "DataQuality", "DataService", "DataCatalog", "Table", "Node", "Component", "Resource", "Function", "Workflow" ] }, "spec": { "type": "object", "description": "the key configurations of the workflow", "properties": { "name": { "type": "string", "description": "the readable name identifier of the workflow" }, "id": { "type": "string", "description": "the UUID of the workflow" }, "type": { "type": "string", "description": "the type of the workflow instance", "enum": [ "CycleWorkflow", "ManualWorkflow" ] }, "owner": { "type": "string", "description": "the system user ID of the workflow owner" }, "description": { "type": "string", "description": "the detailed description of the features and usage of the workflow" }, "workflows": { "type": "array", "description": an array of node configurations in the workflow. The workflows can be run at the same time", "items": { "type": "object", "properties": { "script": { "type": "object", "description": "the script parameters", "properties": { "path": { "type": "string", "description": "the storage path of the script file. Example: HDFS/S3" }, "runtime": { "type": "object", "description": "the parameter settings for the runtime environment, such as the specifications of computing resources" }, "id": { "type": "string", "description": "the unique identifiers of the script parameters" } } }, "id": { "type": "string", "description": "the ID of the node in the workflow" }, "trigger": { "type": "object", "description": "the rule configurations to trigger the node“, "properties": { "type": { "type": "string", "enum": [ "Scheduler", "Manual", "Streaming", "None" ], "description": "the trigger type. Valid values: Scheduler, Manual, Streaming, and None" }, "id": { "type": "string", "description": "the trigger ID" }, "cron": { "type": "string", "description": "the scheduling rule of the node. The rule is in the cron expression format" }, "startTime": { "type": "string", "description": "the start time for scheduling. The value is in the ISO 8601 format" }, "endTime": { "type": "string", "description": "the end time for scheduling. The value is in the ISO 8601 format" }, "timezone": { "type": "string", "description": "the time zone. Example: UTC+8" }, "delaySeconds": { "type": "number", "description": "the delayed execution time. Unit: seconds" } } }, "strategy": { "type": "object", "description": "the execution policy parameters", "properties": { "timeout": { "type": "number", "description": "the timeout period. Unit: seconds" }, "instanceMode": { "type": "string", "enum": [ "T+1", "Immediately" ], "description": "the instance scheduling mode. Valid values: T+1 and Immediately" }, "rerunMode": { "type": "string", "enum": [ "Allowed", "Denied", "FailureAllowed" ], "description": "the rerun mode. Valid values: Allowed, Denied, and FailureAllowed" }, "rerunTimes": { "type": "number", "description": "the maximum number of reruns allowed after a failure" }, "rerunInterval": { "type": "number", "description": "the rerun interval. Unit: seconds" }, "failureStrategy": { "type": "string", "enum": [ "Continue", "Break" ], "description": "the failure handling policy. Valid values: Continue and Break" }, "recurrenceType": { "type": "string", "enum": [ "Normal", "Pause", "Skip", "NoneAuto" ], "description": "the running mode of the auto triggered node. Valid values: Normal, Pause, Skip, and NoneAuto" } } }, "name": { "type": "string", "description": "the readable name of the node" }, "owner": { "type": "string", "description": "the system ID of the node owner" }, "description": { "type": "string", "description": "the feature description of the node" }, "citable": { "type": "boolean", "description": "specifies whether the node can be referenced by other workflows. Valid values: true and false" }, "metadata": { "type": "object", "description": "the container that stores the metadata information", "properties": { "owner": { "type": "string", "description": "the metadata owner ID" }, "project": { "type": "object", "properties": { "projectIdentifier": { "type": "string", "description": "the unique code of the project" }, "projectName": { "type": "string", "description": "the project name" }, "projectId": { "type": "string", "Description": "the project ID" } } }, "ownerName": { "type": "string", "description": "the name of the project owner" }, "projectId": { "type": "string", "description": "the ID of the associated project" } } }, "inputs": { "type": "object", "description": "the structure of the node input", "properties": { "nodeOutputs": { "type": "array", "description": "the configuration items for node input", "items": { "type": "object", "properties": { "data": { "type": "string", "description": "the content of the node input" }, "artifactType": { "type": "string", "enum": [ "Table", "File", "NodeOutput", "Variable" ], "description": "the type of the node input. Valid values: Table, File, NodeOutput, and Variable" }, "refTableName": { "type": "string", "description": "the name of the referenced table" }, "isDefault": { "type": "boolean", "description": "specifies whether the table is the default output“ } } } }, "tables": { "type": "array", "description": "the metadata collection in the input table", "items": { "type": "object", "properties": { "artifactType": { "type": "string", "enum": [ "Table", "File", "NodeOutput", "Variable" ], "description": "the type of the table" }, "guid": { "type": "string", "description": "the GUID of the table" } } } } } }, "outputs": { "type": "object", "description": "the structure of the node output", "properties": { "nodeOutputs": { "type": "array", "description": "the configuration items for node output", "items": { "type": "object", "properties": { "data": { "type": "string", "description": "the content of the node output" }, "artifactType": { "type": "string", "enum": [ "Table", "File", "NodeOutput", "Variable" ], "description": "the type of the node output. Valid values: Table, File, NodeOutput, and Variable" }, "refTableName": { "type": "string", "description": "the name of the referenced table" }, "isDefault": { "type": "boolean", "description": "specifies whether the table is the default output“ } } } }, "tables": { "type": "array", "description": "the metadata collection in the output table", "items": { "type": "object", "properties": { "artifactType": { "type": "string", "enum": [ "Table", "File", "NodeOutput", "Variable" ], "description": "the type of the table" }, "guid": { "type": "string", "description": "the GUID of the table" } } } } } }, "nodes": { "type": "array", "description": "the configuration items for descendant nodes that are used for workflow nesting", "items": { "type": "object", "properties": { "recurrence": { "type": "string", "enum": [ "Normal", "Pause", "Skip", "NoneAuto" ], "description": "the running mode of the descendant node" }, "id": { "type": "string", "description": "the descendant node ID" }, "timeout": { "type": "number", "description": "the timeout period of the descendant node. Unit: seconds" }, "instanceMode": { "type": "string", "enum": [ "T+1", "Immediately" ], "description": "the instance scheduling mode of the descendant node. Valid values: T+1 and Immediately" }, "rerunMode": { "type": "string", "enum": [ "Allowed", "Denied", "FailureAllowed" ], "description": "the rerun mode of the descendant node" }, "rerunTimes": { "type": "number", "description": "the maximum number of reruns allowed after a failure for the descendant node" }, "rerunInterval": { "type": "number", "description": "the rerun interval" }, "datasource": { "type": "object", "description": "the parameters of the associated data source", "properties": { "name": { "type": "string", "description": "the name of the data source" }, "type": { "type": "string", "description": "the type of the data source. Examples: MySQL and Oracle" } } }, "script": { "type": "object", "description": "the script configurations of the node", "properties": { "language": { "type": "string", "enum": [ "python2", "python3", "java8", "java11", "java17" ], "description": "the programming language of the script" }, "path": { "type": "string", "description": "the storage path of the code" }, "runtime": { "type": "object", "description": "the configurations of the runtime environment" }, "content": { "type": "string", "description": "the content of the inline script" }, "id": { "type": "string", "description": "the identifier of the script content" }, "parameters": { "type": "array", "description": "the parameters for initialization", "items": { "type": "object", "properties": { "name": { "type": "string", "description": "the identifier of the parameter name" }, "artifactType": { "type": "string", "enum": [ "Table", "File", "NodeOutput", "Variable" ], "description": "the identifier of the data type" }, "scope": { "type": "string", "enum": [ "Tenant", "Workspace", "Workflow", "NodeParameter", "NodeContext" ], "description": "the application scope of the parameter" }, "type": { "type": "string", "enum": [ "NoKvVariableExpression", "System", "Constant", "NodeOutput", "PaiOutput", "PassThrough" ], "description": "the type of the parameter" }, "value": { "type": "string", "description": "the default value of the parameter" }, "id": { "type": "string", "description": "the parameter ID" } } } } } }, "trigger": { "type": "object", "description": "the configurations of the trigger at the node level. You can overwrite or inherit the configurations" }, "runtimeResource": { "type": "object", "description": "the configurations of computing resources, such as CPU and memory" }, "name": { "type": "string", "description": "the readable name of the descendant node" }, "owner": { "type": "string", "description": "the ID of the descendant node owner" }, "metadata": { "type": "object", "description": "the extended metadata of the descendant node" }, "inputs": { "type": "object", "description": "the parameter definitions of the node input" }, "outputs": { "type": "object", "description": "the parameter definitions of the node output" } } } }, "dependencies": { "type": "array", "description": "the node dependencies", "items": { "type": "object", "properties": { "nodeId": { "type": "string", "description": "the ID of the current node" }, "depends": { "type": "array", "description": "the ancestor node output", "items": { "type": "object", "properties": { "type": { "type": "string", "enum": [ "Normal", "CrossCycleDependsOnSelf", "CrossCycleDependsOnChildren", "CrossCycleDependsOnOtherNode" ], "description": "the dependency type. Valid values: Normal, CrossCycleDependsOnSelf, CrossCycleDependsOnChildren, and CrossCycleDependsOnOtherNode" }, "output": { "type": "string", "description": "the unique identifier of the ancestor node output" }, "refTableName": { "type": "string", "description": "the identifier of the referenced table name" } } } } } } } } } }, "metadata": { "type": "object", "description": "the high-level metadata of the workflow", "properties": { "innerVersion": { "type": "object", "description": "the mappings between the versions of components", "additionalProperties": { "type": "number" } }, "gmtModified": { "type": "number", "description": "the last modification time. The value is a UNIX timestamp" }, "projectId": { "type": "string", "description": "the ID of the associated project" }, "uuid": { "type": "string", "description": "the GUID of the instance" } } } } } }, "required": [ "version", "kind", "spec" ] }
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//   "version": "1.1.0",
	//
	//   "kind": "Node",
	//
	//   "spec": {
	//
	//     "nodes": [
	//
	//       {
	//
	//         "id": "860438872620113XXXX",
	//
	//         "recurrence": "Normal",
	//
	//         "timeout": 0,
	//
	//         "instanceMode": "T+1",
	//
	//         "rerunMode": "Allowed",
	//
	//         "rerunTimes": 3,
	//
	//         "rerunInterval": 180000,
	//
	//         "datasource": {
	//
	//           "name": "ODPS_test",
	//
	//           "type": "ODPS"
	//
	//         },
	//
	//         "script": {
	//
	//           "path": "XX/OpenAPI test/odpsSQL test",
	//
	//           "runtime": {
	//
	//             "command": "ODPS_SQL"
	//
	//           },
	//
	//           "content": "select now();"
	//
	//         },
	//
	//         "trigger": {
	//
	//           "type": "Scheduler",
	//
	//           "cron": "00 00 00 	- 	- ?",
	//
	//           "startTime": "1970-01-01 00:00:00",
	//
	//           "endTime": "9999-01-01 00:00:00",
	//
	//           "timezone": "Asia/Shanghai",
	//
	//           "delaySeconds": 0
	//
	//         },
	//
	//         "runtimeResource": {
	//
	//           "resourceGroup": "S_res_group_XXXX_XXXX"
	//
	//         },
	//
	//         "name": "odpsSQL test",
	//
	//         "inputs": {
	//
	//           "nodeOutputs": [
	//
	//             {
	//
	//               "data": "lwttest_standard_root",
	//
	//               "artifactType": "NodeOutput"
	//
	//             }
	//
	//           ]
	//
	//         },
	//
	//         "outputs": {
	//
	//           "nodeOutputs": [
	//
	//             {
	//
	//               "data": "output_data",
	//
	//               "artifactType": "NodeOutput",
	//
	//               "refTableName": "odpsSQL test"
	//
	//             }
	//
	//           ]
	//
	//         }
	//
	//       }
	//
	//     ],
	//
	//     "flow": [
	//
	//       {
	//
	//         "nodeId": "860438872620113XXXX",
	//
	//         "depends": [
	//
	//           {
	//
	//             "type": "Normal",
	//
	//             "output": "project_root"
	//
	//           }
	//
	//         ]
	//
	//       }
	//
	//     ]
	//
	//   }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s CreateNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNodeRequest) GoString() string {
	return s.String()
}

func (s *CreateNodeRequest) SetContainerId(v int64) *CreateNodeRequest {
	s.ContainerId = &v
	return s
}

func (s *CreateNodeRequest) SetProjectId(v int64) *CreateNodeRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateNodeRequest) SetScene(v string) *CreateNodeRequest {
	s.Scene = &v
	return s
}

func (s *CreateNodeRequest) SetSpec(v string) *CreateNodeRequest {
	s.Spec = &v
	return s
}

type CreateNodeResponseBody struct {
	// The ID of the node.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The request ID.
	//
	// example:
	//
	// AFBB799F-8578-51C5-A766-E922EDB8XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNodeResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNodeResponseBody) SetId(v int64) *CreateNodeResponseBody {
	s.Id = &v
	return s
}

func (s *CreateNodeResponseBody) SetRequestId(v string) *CreateNodeResponseBody {
	s.RequestId = &v
	return s
}

type CreateNodeResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateNodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNodeResponse) GoString() string {
	return s.String()
}

func (s *CreateNodeResponse) SetHeaders(v map[string]*string) *CreateNodeResponse {
	s.Headers = v
	return s
}

func (s *CreateNodeResponse) SetStatusCode(v int32) *CreateNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNodeResponse) SetBody(v *CreateNodeResponseBody) *CreateNodeResponse {
	s.Body = v
	return s
}

type CreatePipelineRunRequest struct {
	// The description of the process.
	//
	// example:
	//
	// This is a OdpsSQL-node publishing process. The function is XXXX.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The IDs of entities to which you want to apply the process.
	//
	// >  A process can be applied to only a single entity and its child entities. If you specify multiple entities in the array, the process is applied only to the first entity in the array and its child entities. Make sure that the array in your request contains only one element. Extra elements will be ignored.
	//
	// This parameter is required.
	ObjectIds []*string `json:"ObjectIds,omitempty" xml:"ObjectIds,omitempty" type:"Repeated"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Specifies whether to deploy or undeploy the entity. Valid values:
	//
	// 	- Online: deploys the entity.
	//
	// 	- Offline: undeploys the entity.
	//
	// This parameter is required.
	//
	// example:
	//
	// Online
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreatePipelineRunRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineRunRequest) GoString() string {
	return s.String()
}

func (s *CreatePipelineRunRequest) SetDescription(v string) *CreatePipelineRunRequest {
	s.Description = &v
	return s
}

func (s *CreatePipelineRunRequest) SetObjectIds(v []*string) *CreatePipelineRunRequest {
	s.ObjectIds = v
	return s
}

func (s *CreatePipelineRunRequest) SetProjectId(v int64) *CreatePipelineRunRequest {
	s.ProjectId = &v
	return s
}

func (s *CreatePipelineRunRequest) SetType(v string) *CreatePipelineRunRequest {
	s.Type = &v
	return s
}

type CreatePipelineRunShrinkRequest struct {
	// The description of the process.
	//
	// example:
	//
	// This is a OdpsSQL-node publishing process. The function is XXXX.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The IDs of entities to which you want to apply the process.
	//
	// >  A process can be applied to only a single entity and its child entities. If you specify multiple entities in the array, the process is applied only to the first entity in the array and its child entities. Make sure that the array in your request contains only one element. Extra elements will be ignored.
	//
	// This parameter is required.
	ObjectIdsShrink *string `json:"ObjectIds,omitempty" xml:"ObjectIds,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Specifies whether to deploy or undeploy the entity. Valid values:
	//
	// 	- Online: deploys the entity.
	//
	// 	- Offline: undeploys the entity.
	//
	// This parameter is required.
	//
	// example:
	//
	// Online
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreatePipelineRunShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineRunShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreatePipelineRunShrinkRequest) SetDescription(v string) *CreatePipelineRunShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreatePipelineRunShrinkRequest) SetObjectIdsShrink(v string) *CreatePipelineRunShrinkRequest {
	s.ObjectIdsShrink = &v
	return s
}

func (s *CreatePipelineRunShrinkRequest) SetProjectId(v int64) *CreatePipelineRunShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *CreatePipelineRunShrinkRequest) SetType(v string) *CreatePipelineRunShrinkRequest {
	s.Type = &v
	return s
}

type CreatePipelineRunResponseBody struct {
	// The ID of the process.
	//
	// example:
	//
	// a7ef0634-20ec-4a7c-a214-54020f91XXXX
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7C352CB7-CD88-50CF-9D0D-E81BDF02XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreatePipelineRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineRunResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePipelineRunResponseBody) SetId(v string) *CreatePipelineRunResponseBody {
	s.Id = &v
	return s
}

func (s *CreatePipelineRunResponseBody) SetRequestId(v string) *CreatePipelineRunResponseBody {
	s.RequestId = &v
	return s
}

type CreatePipelineRunResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePipelineRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePipelineRunResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineRunResponse) GoString() string {
	return s.String()
}

func (s *CreatePipelineRunResponse) SetHeaders(v map[string]*string) *CreatePipelineRunResponse {
	s.Headers = v
	return s
}

func (s *CreatePipelineRunResponse) SetStatusCode(v int32) *CreatePipelineRunResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePipelineRunResponse) SetBody(v *CreatePipelineRunResponseBody) *CreatePipelineRunResponse {
	s.Body = v
	return s
}

type CreateProjectRequest struct {
	// The ID of the Alibaba Cloud resource group to which the workspace belongs. You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) and go to the Resource Group page to query the ID.
	//
	// You must configure this parameter to specify an Alibaba Cloud resource group for the workspace that you want to create.
	//
	// example:
	//
	// rg-acfmzbn7pti3zff
	AliyunResourceGroupId *string `json:"AliyunResourceGroupId,omitempty" xml:"AliyunResourceGroupId,omitempty"`
	// The tags.
	AliyunResourceTags []*CreateProjectRequestAliyunResourceTags `json:"AliyunResourceTags,omitempty" xml:"AliyunResourceTags,omitempty" type:"Repeated"`
	// The description of the workspace.
	//
	// example:
	//
	// Financial analysis group project data development
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the development environment. Valid values:
	//
	// 	- true : enables the development environment. In this case, the development environment is isolated from the production environment in the workspace.
	//
	// 	- false: disables the development environment. In this case, only the production environment is used in the workspace.
	//
	// example:
	//
	// false
	DevEnvironmentEnabled *bool `json:"DevEnvironmentEnabled,omitempty" xml:"DevEnvironmentEnabled,omitempty"`
	// Specifies whether to disable the Develop role. Valid values:
	//
	// 	- false (default)
	//
	// 	- true
	//
	// example:
	//
	// true
	DevRoleDisabled *bool `json:"DevRoleDisabled,omitempty" xml:"DevRoleDisabled,omitempty"`
	// The display name of the workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// Sora financial analysis
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The name of the workspace.
	//
	// Limits:
	//
	// 	- The workspace name must be unqiue in a region.
	//
	// 	- The workspace name can contain letters, digits, and underscores (_), and must start with a letter.
	//
	// 	- The workspace name must be 3 to 28 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// sora_finance
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Specifies whether to enable scheduling of Platform for AI (PAI) tasks. Valid values:
	//
	// 	- true: enables scheduling of PAI tasks. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
	//
	// 	- false: disables scheduling of PAI tasks.
	//
	// example:
	//
	// true
	PaiTaskEnabled *bool `json:"PaiTaskEnabled,omitempty" xml:"PaiTaskEnabled,omitempty"`
}

func (s CreateProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequest) GoString() string {
	return s.String()
}

func (s *CreateProjectRequest) SetAliyunResourceGroupId(v string) *CreateProjectRequest {
	s.AliyunResourceGroupId = &v
	return s
}

func (s *CreateProjectRequest) SetAliyunResourceTags(v []*CreateProjectRequestAliyunResourceTags) *CreateProjectRequest {
	s.AliyunResourceTags = v
	return s
}

func (s *CreateProjectRequest) SetDescription(v string) *CreateProjectRequest {
	s.Description = &v
	return s
}

func (s *CreateProjectRequest) SetDevEnvironmentEnabled(v bool) *CreateProjectRequest {
	s.DevEnvironmentEnabled = &v
	return s
}

func (s *CreateProjectRequest) SetDevRoleDisabled(v bool) *CreateProjectRequest {
	s.DevRoleDisabled = &v
	return s
}

func (s *CreateProjectRequest) SetDisplayName(v string) *CreateProjectRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateProjectRequest) SetName(v string) *CreateProjectRequest {
	s.Name = &v
	return s
}

func (s *CreateProjectRequest) SetPaiTaskEnabled(v bool) *CreateProjectRequest {
	s.PaiTaskEnabled = &v
	return s
}

type CreateProjectRequestAliyunResourceTags struct {
	// The tag key.
	//
	// example:
	//
	// batch
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// blue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateProjectRequestAliyunResourceTags) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequestAliyunResourceTags) GoString() string {
	return s.String()
}

func (s *CreateProjectRequestAliyunResourceTags) SetKey(v string) *CreateProjectRequestAliyunResourceTags {
	s.Key = &v
	return s
}

func (s *CreateProjectRequestAliyunResourceTags) SetValue(v string) *CreateProjectRequestAliyunResourceTags {
	s.Value = &v
	return s
}

type CreateProjectShrinkRequest struct {
	// The ID of the Alibaba Cloud resource group to which the workspace belongs. You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) and go to the Resource Group page to query the ID.
	//
	// You must configure this parameter to specify an Alibaba Cloud resource group for the workspace that you want to create.
	//
	// example:
	//
	// rg-acfmzbn7pti3zff
	AliyunResourceGroupId *string `json:"AliyunResourceGroupId,omitempty" xml:"AliyunResourceGroupId,omitempty"`
	// The tags.
	AliyunResourceTagsShrink *string `json:"AliyunResourceTags,omitempty" xml:"AliyunResourceTags,omitempty"`
	// The description of the workspace.
	//
	// example:
	//
	// Financial analysis group project data development
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the development environment. Valid values:
	//
	// 	- true : enables the development environment. In this case, the development environment is isolated from the production environment in the workspace.
	//
	// 	- false: disables the development environment. In this case, only the production environment is used in the workspace.
	//
	// example:
	//
	// false
	DevEnvironmentEnabled *bool `json:"DevEnvironmentEnabled,omitempty" xml:"DevEnvironmentEnabled,omitempty"`
	// Specifies whether to disable the Develop role. Valid values:
	//
	// 	- false (default)
	//
	// 	- true
	//
	// example:
	//
	// true
	DevRoleDisabled *bool `json:"DevRoleDisabled,omitempty" xml:"DevRoleDisabled,omitempty"`
	// The display name of the workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// Sora financial analysis
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The name of the workspace.
	//
	// Limits:
	//
	// 	- The workspace name must be unqiue in a region.
	//
	// 	- The workspace name can contain letters, digits, and underscores (_), and must start with a letter.
	//
	// 	- The workspace name must be 3 to 28 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// sora_finance
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Specifies whether to enable scheduling of Platform for AI (PAI) tasks. Valid values:
	//
	// 	- true: enables scheduling of PAI tasks. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
	//
	// 	- false: disables scheduling of PAI tasks.
	//
	// example:
	//
	// true
	PaiTaskEnabled *bool `json:"PaiTaskEnabled,omitempty" xml:"PaiTaskEnabled,omitempty"`
}

func (s CreateProjectShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateProjectShrinkRequest) SetAliyunResourceGroupId(v string) *CreateProjectShrinkRequest {
	s.AliyunResourceGroupId = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetAliyunResourceTagsShrink(v string) *CreateProjectShrinkRequest {
	s.AliyunResourceTagsShrink = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetDescription(v string) *CreateProjectShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetDevEnvironmentEnabled(v bool) *CreateProjectShrinkRequest {
	s.DevEnvironmentEnabled = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetDevRoleDisabled(v bool) *CreateProjectShrinkRequest {
	s.DevRoleDisabled = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetDisplayName(v string) *CreateProjectShrinkRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetName(v string) *CreateProjectShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateProjectShrinkRequest) SetPaiTaskEnabled(v bool) *CreateProjectShrinkRequest {
	s.PaiTaskEnabled = &v
	return s
}

type CreateProjectResponseBody struct {
	// The workspace ID.
	//
	// example:
	//
	// 123456
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Deprecated
	//
	// The workspace ID. Note: This parameter is deprecated and is replaced by the Id parameter.
	//
	// example:
	//
	// 123456
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// AFBB799F-8578-51C5-A766-E922EDB8XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProjectResponseBody) SetId(v int64) *CreateProjectResponseBody {
	s.Id = &v
	return s
}

func (s *CreateProjectResponseBody) SetProjectId(v int64) *CreateProjectResponseBody {
	s.ProjectId = &v
	return s
}

func (s *CreateProjectResponseBody) SetRequestId(v string) *CreateProjectResponseBody {
	s.RequestId = &v
	return s
}

type CreateProjectResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectResponse) GoString() string {
	return s.String()
}

func (s *CreateProjectResponse) SetHeaders(v map[string]*string) *CreateProjectResponse {
	s.Headers = v
	return s
}

func (s *CreateProjectResponse) SetStatusCode(v int32) *CreateProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateProjectResponse) SetBody(v *CreateProjectResponseBody) *CreateProjectResponse {
	s.Body = v
	return s
}

type CreateProjectMemberRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 24054
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.
	//
	// This parameter specifies the roles that you can assign to a member when you add the member.
	//
	// This parameter is required.
	RoleCodes []*string `json:"RoleCodes,omitempty" xml:"RoleCodes,omitempty" type:"Repeated"`
	// The ID of the account that you want to add to the workspace as a member. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click **Tenant Members and Roles**. On the Tenant Members and Roles page, view the ID of the account that you want to add to the workspace as a member.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123422344899
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CreateProjectMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectMemberRequest) GoString() string {
	return s.String()
}

func (s *CreateProjectMemberRequest) SetProjectId(v int64) *CreateProjectMemberRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateProjectMemberRequest) SetRoleCodes(v []*string) *CreateProjectMemberRequest {
	s.RoleCodes = v
	return s
}

func (s *CreateProjectMemberRequest) SetUserId(v string) *CreateProjectMemberRequest {
	s.UserId = &v
	return s
}

type CreateProjectMemberShrinkRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 24054
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.
	//
	// This parameter specifies the roles that you can assign to a member when you add the member.
	//
	// This parameter is required.
	RoleCodesShrink *string `json:"RoleCodes,omitempty" xml:"RoleCodes,omitempty"`
	// The ID of the account that you want to add to the workspace as a member. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click **Tenant Members and Roles**. On the Tenant Members and Roles page, view the ID of the account that you want to add to the workspace as a member.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123422344899
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CreateProjectMemberShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectMemberShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateProjectMemberShrinkRequest) SetProjectId(v int64) *CreateProjectMemberShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateProjectMemberShrinkRequest) SetRoleCodesShrink(v string) *CreateProjectMemberShrinkRequest {
	s.RoleCodesShrink = &v
	return s
}

func (s *CreateProjectMemberShrinkRequest) SetUserId(v string) *CreateProjectMemberShrinkRequest {
	s.UserId = &v
	return s
}

type CreateProjectMemberResponseBody struct {
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 2B2F0B26-9253-5780-B6DB-F1A886D44D6F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateProjectMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectMemberResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProjectMemberResponseBody) SetRequestId(v string) *CreateProjectMemberResponseBody {
	s.RequestId = &v
	return s
}

type CreateProjectMemberResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateProjectMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateProjectMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectMemberResponse) GoString() string {
	return s.String()
}

func (s *CreateProjectMemberResponse) SetHeaders(v map[string]*string) *CreateProjectMemberResponse {
	s.Headers = v
	return s
}

func (s *CreateProjectMemberResponse) SetStatusCode(v int32) *CreateProjectMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateProjectMemberResponse) SetBody(v *CreateProjectMemberResponseBody) *CreateProjectMemberResponse {
	s.Body = v
	return s
}

type CreateResourceRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	ProjectId    *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ResourceFile *string `json:"ResourceFile,omitempty" xml:"ResourceFile,omitempty"`
	// The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//     "version": "1.1.0",
	//
	//     "kind": "Resource",
	//
	//     "spec": {
	//
	//         "fileResources": [
	//
	//             {
	//
	//                 "name": "OpenAPITestResource.py",
	//
	//                 "script": {
	//
	//                     "content": "",
	//
	//                     "path": "XX/OpenAPITest/ResourcesTest/OpenAPITestResource.py",
	//
	//                     "runtime": {
	//
	//                         "command": "ODPS_PYTHON"
	//
	//                     }
	//
	//                 },
	//
	//                 "type": "python",
	//
	//                 "file": {
	//
	//                     "storage": {}
	//
	//                 },
	//
	//                 "datasource": {
	//
	//                     "name": "odps_first",
	//
	//                     "type": "odps"
	//
	//                 }
	//
	//             }
	//
	//         ]
	//
	//     }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s CreateResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceRequest) GoString() string {
	return s.String()
}

func (s *CreateResourceRequest) SetProjectId(v int64) *CreateResourceRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateResourceRequest) SetResourceFile(v string) *CreateResourceRequest {
	s.ResourceFile = &v
	return s
}

func (s *CreateResourceRequest) SetSpec(v string) *CreateResourceRequest {
	s.Spec = &v
	return s
}

type CreateResourceAdvanceRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	ProjectId          *int64    `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ResourceFileObject io.Reader `json:"ResourceFile,omitempty" xml:"ResourceFile,omitempty"`
	// The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//     "version": "1.1.0",
	//
	//     "kind": "Resource",
	//
	//     "spec": {
	//
	//         "fileResources": [
	//
	//             {
	//
	//                 "name": "OpenAPITestResource.py",
	//
	//                 "script": {
	//
	//                     "content": "",
	//
	//                     "path": "XX/OpenAPITest/ResourcesTest/OpenAPITestResource.py",
	//
	//                     "runtime": {
	//
	//                         "command": "ODPS_PYTHON"
	//
	//                     }
	//
	//                 },
	//
	//                 "type": "python",
	//
	//                 "file": {
	//
	//                     "storage": {}
	//
	//                 },
	//
	//                 "datasource": {
	//
	//                     "name": "odps_first",
	//
	//                     "type": "odps"
	//
	//                 }
	//
	//             }
	//
	//         ]
	//
	//     }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s CreateResourceAdvanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceAdvanceRequest) GoString() string {
	return s.String()
}

func (s *CreateResourceAdvanceRequest) SetProjectId(v int64) *CreateResourceAdvanceRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateResourceAdvanceRequest) SetResourceFileObject(v io.Reader) *CreateResourceAdvanceRequest {
	s.ResourceFileObject = v
	return s
}

func (s *CreateResourceAdvanceRequest) SetSpec(v string) *CreateResourceAdvanceRequest {
	s.Spec = &v
	return s
}

type CreateResourceResponseBody struct {
	// The ID of the file resource.
	//
	// example:
	//
	// 631478864897630XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// A5B97987-66EA-5563-9599-A2752292XXXX
	//
	// example:
	//
	// The ID of the file resource.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateResourceResponseBody) SetId(v int64) *CreateResourceResponseBody {
	s.Id = &v
	return s
}

func (s *CreateResourceResponseBody) SetRequestId(v string) *CreateResourceResponseBody {
	s.RequestId = &v
	return s
}

type CreateResourceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceResponse) GoString() string {
	return s.String()
}

func (s *CreateResourceResponse) SetHeaders(v map[string]*string) *CreateResourceResponse {
	s.Headers = v
	return s
}

func (s *CreateResourceResponse) SetStatusCode(v int32) *CreateResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateResourceResponse) SetBody(v *CreateResourceResponseBody) *CreateResourceResponse {
	s.Body = v
	return s
}

type CreateResourceFileRequest struct {
	// The code for the file. The code format varies based on the file type. To view the code format for a specific file type, go to Operation Center, open the directed acyclic graph (DAG) of a node of the file type, right-click the node, and then select View Code.
	//
	// example:
	//
	// SHOW TABLES;
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The description of the file.
	//
	// example:
	//
	// This is a description
	FileDescription *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	// The path of the file.
	//
	// This parameter is required.
	//
	// example:
	//
	// Business_process/First_Business_Process/MaxCompute/Folder_1/Folder_2
	FileFolderPath *string `json:"FileFolderPath,omitempty" xml:"FileFolderPath,omitempty"`
	// The name of the file.
	//
	// This parameter is required.
	//
	// example:
	//
	// Filename
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The type of the code for the file.
	//
	// The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html). You can call the [ListFileType](https://help.aliyun.com/document_detail/212428.html) operation to query the type of the code for the file.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	FileType *int32 `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The name of the original resource file.
	//
	// This parameter is required.
	//
	// example:
	//
	// origin_file_name.sql
	OriginResourceName *string `json:"OriginResourceName,omitempty" xml:"OriginResourceName,omitempty"`
	// The ID of the Alibaba Cloud account used by the file owner. If this parameter is not configured, the ID of the Alibaba Cloud account of the user who calls the operation is used by default.
	//
	// example:
	//
	// 1000000000001
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Specifies whether to upload the resource file to a desired compute engine.
	//
	// This parameter is required.
	//
	// example:
	//
	// false
	RegisterToCalcEngine *bool `json:"RegisterToCalcEngine,omitempty" xml:"RegisterToCalcEngine,omitempty"`
	// The URL of the Object Storage Service (OSS) bucket to which you upload the file. The URL is provided by the POP platform.
	//
	// example:
	//
	// http://bucketname1.oss-cn-shanghai.aliyuncs.com/example
	ResourceFile *string `json:"ResourceFile,omitempty" xml:"ResourceFile,omitempty"`
	// The storage path of the resource file in a desired compute engine. This parameter takes effect only for E-MapReduce (EMR) and Cloudera\\"s Distribution including Apache Hadoop (CDH) compute engines. In an EMR compute engine, this parameter is configured in the [osshdfs]://path/to/object format. In a CDH compute engine, this parameter is set to /user/admin/lib by default.
	//
	// example:
	//
	// oss://oss-cn-shanghai.aliyuncs.com/emr-test
	StorageURL *string `json:"StorageURL,omitempty" xml:"StorageURL,omitempty"`
	// The upload mode of MaxCompute file resources. This parameter takes effect only for MaxCompute file resources. Valid values:
	//
	// 	- true: indicates the resource upload and download mode.
	//
	// 	- false: indicates the online editing mode.
	//
	// example:
	//
	// false
	UploadMode *bool `json:"UploadMode,omitempty" xml:"UploadMode,omitempty"`
}

func (s CreateResourceFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceFileRequest) GoString() string {
	return s.String()
}

func (s *CreateResourceFileRequest) SetContent(v string) *CreateResourceFileRequest {
	s.Content = &v
	return s
}

func (s *CreateResourceFileRequest) SetFileDescription(v string) *CreateResourceFileRequest {
	s.FileDescription = &v
	return s
}

func (s *CreateResourceFileRequest) SetFileFolderPath(v string) *CreateResourceFileRequest {
	s.FileFolderPath = &v
	return s
}

func (s *CreateResourceFileRequest) SetFileName(v string) *CreateResourceFileRequest {
	s.FileName = &v
	return s
}

func (s *CreateResourceFileRequest) SetFileType(v int32) *CreateResourceFileRequest {
	s.FileType = &v
	return s
}

func (s *CreateResourceFileRequest) SetOriginResourceName(v string) *CreateResourceFileRequest {
	s.OriginResourceName = &v
	return s
}

func (s *CreateResourceFileRequest) SetOwner(v string) *CreateResourceFileRequest {
	s.Owner = &v
	return s
}

func (s *CreateResourceFileRequest) SetProjectId(v int64) *CreateResourceFileRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateResourceFileRequest) SetRegisterToCalcEngine(v bool) *CreateResourceFileRequest {
	s.RegisterToCalcEngine = &v
	return s
}

func (s *CreateResourceFileRequest) SetResourceFile(v string) *CreateResourceFileRequest {
	s.ResourceFile = &v
	return s
}

func (s *CreateResourceFileRequest) SetStorageURL(v string) *CreateResourceFileRequest {
	s.StorageURL = &v
	return s
}

func (s *CreateResourceFileRequest) SetUploadMode(v bool) *CreateResourceFileRequest {
	s.UploadMode = &v
	return s
}

type CreateResourceFileAdvanceRequest struct {
	// The code for the file. The code format varies based on the file type. To view the code format for a specific file type, go to Operation Center, open the directed acyclic graph (DAG) of a node of the file type, right-click the node, and then select View Code.
	//
	// example:
	//
	// SHOW TABLES;
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The description of the file.
	//
	// example:
	//
	// This is a description
	FileDescription *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	// The path of the file.
	//
	// This parameter is required.
	//
	// example:
	//
	// Business_process/First_Business_Process/MaxCompute/Folder_1/Folder_2
	FileFolderPath *string `json:"FileFolderPath,omitempty" xml:"FileFolderPath,omitempty"`
	// The name of the file.
	//
	// This parameter is required.
	//
	// example:
	//
	// Filename
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The type of the code for the file.
	//
	// The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html). You can call the [ListFileType](https://help.aliyun.com/document_detail/212428.html) operation to query the type of the code for the file.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	FileType *int32 `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The name of the original resource file.
	//
	// This parameter is required.
	//
	// example:
	//
	// origin_file_name.sql
	OriginResourceName *string `json:"OriginResourceName,omitempty" xml:"OriginResourceName,omitempty"`
	// The ID of the Alibaba Cloud account used by the file owner. If this parameter is not configured, the ID of the Alibaba Cloud account of the user who calls the operation is used by default.
	//
	// example:
	//
	// 1000000000001
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The DataWorks workspace ID. You can log on to the DataWorks console and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Specifies whether to upload the resource file to a desired compute engine.
	//
	// This parameter is required.
	//
	// example:
	//
	// false
	RegisterToCalcEngine *bool `json:"RegisterToCalcEngine,omitempty" xml:"RegisterToCalcEngine,omitempty"`
	// The URL of the Object Storage Service (OSS) bucket to which you upload the file. The URL is provided by the POP platform.
	//
	// example:
	//
	// http://bucketname1.oss-cn-shanghai.aliyuncs.com/example
	ResourceFileObject io.Reader `json:"ResourceFile,omitempty" xml:"ResourceFile,omitempty"`
	// The storage path of the resource file in a desired compute engine. This parameter takes effect only for E-MapReduce (EMR) and Cloudera\\"s Distribution including Apache Hadoop (CDH) compute engines. In an EMR compute engine, this parameter is configured in the [osshdfs]://path/to/object format. In a CDH compute engine, this parameter is set to /user/admin/lib by default.
	//
	// example:
	//
	// oss://oss-cn-shanghai.aliyuncs.com/emr-test
	StorageURL *string `json:"StorageURL,omitempty" xml:"StorageURL,omitempty"`
	// The upload mode of MaxCompute file resources. This parameter takes effect only for MaxCompute file resources. Valid values:
	//
	// 	- true: indicates the resource upload and download mode.
	//
	// 	- false: indicates the online editing mode.
	//
	// example:
	//
	// false
	UploadMode *bool `json:"UploadMode,omitempty" xml:"UploadMode,omitempty"`
}

func (s CreateResourceFileAdvanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceFileAdvanceRequest) GoString() string {
	return s.String()
}

func (s *CreateResourceFileAdvanceRequest) SetContent(v string) *CreateResourceFileAdvanceRequest {
	s.Content = &v
	return s
}

func (s *CreateResourceFileAdvanceRequest) SetFileDescription(v string) *CreateResourceFileAdvanceRequest {
	s.FileDescription = &v
	return s
}

func (s *CreateResourceFileAdvanceRequest) SetFileFolderPath(v string) *CreateResourceFileAdvanceRequest {
	s.FileFolderPath = &v
	return s
}

func (s *CreateResourceFileAdvanceRequest) SetFileName(v string) *CreateResourceFileAdvanceRequest {
	s.FileName = &v
	return s
}

func (s *CreateResourceFileAdvanceRequest) SetFileType(v int32) *CreateResourceFileAdvanceRequest {
	s.FileType = &v
	return s
}

func (s *CreateResourceFileAdvanceRequest) SetOriginResourceName(v string) *CreateResourceFileAdvanceRequest {
	s.OriginResourceName = &v
	return s
}

func (s *CreateResourceFileAdvanceRequest) SetOwner(v string) *CreateResourceFileAdvanceRequest {
	s.Owner = &v
	return s
}

func (s *CreateResourceFileAdvanceRequest) SetProjectId(v int64) *CreateResourceFileAdvanceRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateResourceFileAdvanceRequest) SetRegisterToCalcEngine(v bool) *CreateResourceFileAdvanceRequest {
	s.RegisterToCalcEngine = &v
	return s
}

func (s *CreateResourceFileAdvanceRequest) SetResourceFileObject(v io.Reader) *CreateResourceFileAdvanceRequest {
	s.ResourceFileObject = v
	return s
}

func (s *CreateResourceFileAdvanceRequest) SetStorageURL(v string) *CreateResourceFileAdvanceRequest {
	s.StorageURL = &v
	return s
}

func (s *CreateResourceFileAdvanceRequest) SetUploadMode(v bool) *CreateResourceFileAdvanceRequest {
	s.UploadMode = &v
	return s
}

type CreateResourceFileResponseBody struct {
	// The ID of the file that is created.
	//
	// example:
	//
	// 1000001
	Data *int64 `json:"Data,omitempty" xml:"Data,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0000-ABCD-EFG
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateResourceFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceFileResponseBody) GoString() string {
	return s.String()
}

func (s *CreateResourceFileResponseBody) SetData(v int64) *CreateResourceFileResponseBody {
	s.Data = &v
	return s
}

func (s *CreateResourceFileResponseBody) SetRequestId(v string) *CreateResourceFileResponseBody {
	s.RequestId = &v
	return s
}

type CreateResourceFileResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateResourceFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateResourceFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceFileResponse) GoString() string {
	return s.String()
}

func (s *CreateResourceFileResponse) SetHeaders(v map[string]*string) *CreateResourceFileResponse {
	s.Headers = v
	return s
}

func (s *CreateResourceFileResponse) SetStatusCode(v int32) *CreateResourceFileResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateResourceFileResponse) SetBody(v *CreateResourceFileResponseBody) *CreateResourceFileResponse {
	s.Body = v
	return s
}

type CreateResourceGroupRequest struct {
	// The ID of the Alibaba Cloud resource group.
	//
	// example:
	//
	// rg-aek2kqofrgXXXXX
	AliyunResourceGroupId *string `json:"AliyunResourceGroupId,omitempty" xml:"AliyunResourceGroupId,omitempty"`
	// The tags.
	AliyunResourceTags []*CreateResourceGroupRequestAliyunResourceTags `json:"AliyunResourceTags,omitempty" xml:"AliyunResourceTags,omitempty" type:"Repeated"`
	// Specifies whether to enable auto-renewal.
	AutoRenewEnabled *bool `json:"AutoRenewEnabled,omitempty" xml:"AutoRenewEnabled,omitempty"`
	// The client token that is used to ensure the idempotence of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// eb870033-74c8-4b1b-9664-04c4e7cc3465
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The name of the serverless resource group. The name can be a maximum of 128 characters in length and can contain letters, digits, and underscores (_). The name must start with a letter.
	//
	// This parameter is required.
	//
	// example:
	//
	// common_resource_group
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The subscription duration.
	//
	// example:
	//
	// 1
	PaymentDuration *int32 `json:"PaymentDuration,omitempty" xml:"PaymentDuration,omitempty"`
	// The unit of the subscription duration. Valid values: Month and Year.
	//
	// example:
	//
	// Month
	PaymentDurationUnit *string `json:"PaymentDurationUnit,omitempty" xml:"PaymentDurationUnit,omitempty"`
	// The billing method of the serverless resource group. Valid values: PrePaid and PostPaid. The value PrePaid indicates the subscription billing method, and the value PostPaid indicates the pay-as-you-go billing method.
	//
	// This parameter is required.
	//
	// example:
	//
	// PrePaid
	PaymentType *string `json:"PaymentType,omitempty" xml:"PaymentType,omitempty"`
	// The description of the serverless resource group. The description can be a maximum of 128 characters in length and can contain letters, digits, and underscores (_).
	//
	// example:
	//
	// Create a serverless resource group for common tasks
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The specifications of the serverless resource group. Unit: CU. This parameter is required only if you set the PaymentType parameter to PrePaid.
	//
	// example:
	//
	// 2
	Spec *int32 `json:"Spec,omitempty" xml:"Spec,omitempty"`
	// The ID of the virtual private cloud (VPC) with which the serverless resource group is associated by default.
	//
	// This parameter is required.
	//
	// example:
	//
	// vpc-m2et4f3oc8msfbccXXXXX
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The ID of the vSwitch with which the serverless resource group is associated by default.
	//
	// This parameter is required.
	//
	// example:
	//
	// vsw-uf8usrhs7hjd9amsXXXXX
	VswitchId *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s CreateResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateResourceGroupRequest) SetAliyunResourceGroupId(v string) *CreateResourceGroupRequest {
	s.AliyunResourceGroupId = &v
	return s
}

func (s *CreateResourceGroupRequest) SetAliyunResourceTags(v []*CreateResourceGroupRequestAliyunResourceTags) *CreateResourceGroupRequest {
	s.AliyunResourceTags = v
	return s
}

func (s *CreateResourceGroupRequest) SetAutoRenewEnabled(v bool) *CreateResourceGroupRequest {
	s.AutoRenewEnabled = &v
	return s
}

func (s *CreateResourceGroupRequest) SetClientToken(v string) *CreateResourceGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateResourceGroupRequest) SetName(v string) *CreateResourceGroupRequest {
	s.Name = &v
	return s
}

func (s *CreateResourceGroupRequest) SetPaymentDuration(v int32) *CreateResourceGroupRequest {
	s.PaymentDuration = &v
	return s
}

func (s *CreateResourceGroupRequest) SetPaymentDurationUnit(v string) *CreateResourceGroupRequest {
	s.PaymentDurationUnit = &v
	return s
}

func (s *CreateResourceGroupRequest) SetPaymentType(v string) *CreateResourceGroupRequest {
	s.PaymentType = &v
	return s
}

func (s *CreateResourceGroupRequest) SetRemark(v string) *CreateResourceGroupRequest {
	s.Remark = &v
	return s
}

func (s *CreateResourceGroupRequest) SetSpec(v int32) *CreateResourceGroupRequest {
	s.Spec = &v
	return s
}

func (s *CreateResourceGroupRequest) SetVpcId(v string) *CreateResourceGroupRequest {
	s.VpcId = &v
	return s
}

func (s *CreateResourceGroupRequest) SetVswitchId(v string) *CreateResourceGroupRequest {
	s.VswitchId = &v
	return s
}

type CreateResourceGroupRequestAliyunResourceTags struct {
	// The tag key.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateResourceGroupRequestAliyunResourceTags) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceGroupRequestAliyunResourceTags) GoString() string {
	return s.String()
}

func (s *CreateResourceGroupRequestAliyunResourceTags) SetKey(v string) *CreateResourceGroupRequestAliyunResourceTags {
	s.Key = &v
	return s
}

func (s *CreateResourceGroupRequestAliyunResourceTags) SetValue(v string) *CreateResourceGroupRequestAliyunResourceTags {
	s.Value = &v
	return s
}

type CreateResourceGroupShrinkRequest struct {
	// The ID of the Alibaba Cloud resource group.
	//
	// example:
	//
	// rg-aek2kqofrgXXXXX
	AliyunResourceGroupId *string `json:"AliyunResourceGroupId,omitempty" xml:"AliyunResourceGroupId,omitempty"`
	// The tags.
	AliyunResourceTagsShrink *string `json:"AliyunResourceTags,omitempty" xml:"AliyunResourceTags,omitempty"`
	// Specifies whether to enable auto-renewal.
	AutoRenewEnabled *bool `json:"AutoRenewEnabled,omitempty" xml:"AutoRenewEnabled,omitempty"`
	// The client token that is used to ensure the idempotence of the request.
	//
	// This parameter is required.
	//
	// example:
	//
	// eb870033-74c8-4b1b-9664-04c4e7cc3465
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The name of the serverless resource group. The name can be a maximum of 128 characters in length and can contain letters, digits, and underscores (_). The name must start with a letter.
	//
	// This parameter is required.
	//
	// example:
	//
	// common_resource_group
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The subscription duration.
	//
	// example:
	//
	// 1
	PaymentDuration *int32 `json:"PaymentDuration,omitempty" xml:"PaymentDuration,omitempty"`
	// The unit of the subscription duration. Valid values: Month and Year.
	//
	// example:
	//
	// Month
	PaymentDurationUnit *string `json:"PaymentDurationUnit,omitempty" xml:"PaymentDurationUnit,omitempty"`
	// The billing method of the serverless resource group. Valid values: PrePaid and PostPaid. The value PrePaid indicates the subscription billing method, and the value PostPaid indicates the pay-as-you-go billing method.
	//
	// This parameter is required.
	//
	// example:
	//
	// PrePaid
	PaymentType *string `json:"PaymentType,omitempty" xml:"PaymentType,omitempty"`
	// The description of the serverless resource group. The description can be a maximum of 128 characters in length and can contain letters, digits, and underscores (_).
	//
	// example:
	//
	// Create a serverless resource group for common tasks
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The specifications of the serverless resource group. Unit: CU. This parameter is required only if you set the PaymentType parameter to PrePaid.
	//
	// example:
	//
	// 2
	Spec *int32 `json:"Spec,omitempty" xml:"Spec,omitempty"`
	// The ID of the virtual private cloud (VPC) with which the serverless resource group is associated by default.
	//
	// This parameter is required.
	//
	// example:
	//
	// vpc-m2et4f3oc8msfbccXXXXX
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The ID of the vSwitch with which the serverless resource group is associated by default.
	//
	// This parameter is required.
	//
	// example:
	//
	// vsw-uf8usrhs7hjd9amsXXXXX
	VswitchId *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s CreateResourceGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateResourceGroupShrinkRequest) SetAliyunResourceGroupId(v string) *CreateResourceGroupShrinkRequest {
	s.AliyunResourceGroupId = &v
	return s
}

func (s *CreateResourceGroupShrinkRequest) SetAliyunResourceTagsShrink(v string) *CreateResourceGroupShrinkRequest {
	s.AliyunResourceTagsShrink = &v
	return s
}

func (s *CreateResourceGroupShrinkRequest) SetAutoRenewEnabled(v bool) *CreateResourceGroupShrinkRequest {
	s.AutoRenewEnabled = &v
	return s
}

func (s *CreateResourceGroupShrinkRequest) SetClientToken(v string) *CreateResourceGroupShrinkRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateResourceGroupShrinkRequest) SetName(v string) *CreateResourceGroupShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateResourceGroupShrinkRequest) SetPaymentDuration(v int32) *CreateResourceGroupShrinkRequest {
	s.PaymentDuration = &v
	return s
}

func (s *CreateResourceGroupShrinkRequest) SetPaymentDurationUnit(v string) *CreateResourceGroupShrinkRequest {
	s.PaymentDurationUnit = &v
	return s
}

func (s *CreateResourceGroupShrinkRequest) SetPaymentType(v string) *CreateResourceGroupShrinkRequest {
	s.PaymentType = &v
	return s
}

func (s *CreateResourceGroupShrinkRequest) SetRemark(v string) *CreateResourceGroupShrinkRequest {
	s.Remark = &v
	return s
}

func (s *CreateResourceGroupShrinkRequest) SetSpec(v int32) *CreateResourceGroupShrinkRequest {
	s.Spec = &v
	return s
}

func (s *CreateResourceGroupShrinkRequest) SetVpcId(v string) *CreateResourceGroupShrinkRequest {
	s.VpcId = &v
	return s
}

func (s *CreateResourceGroupShrinkRequest) SetVswitchId(v string) *CreateResourceGroupShrinkRequest {
	s.VswitchId = &v
	return s
}

type CreateResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the order that is used to create the serverless resource group.
	ResourceGroupOrder *CreateResourceGroupResponseBodyResourceGroupOrder `json:"ResourceGroupOrder,omitempty" xml:"ResourceGroupOrder,omitempty" type:"Struct"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateResourceGroupResponseBody) SetRequestId(v string) *CreateResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateResourceGroupResponseBody) SetResourceGroupOrder(v *CreateResourceGroupResponseBodyResourceGroupOrder) *CreateResourceGroupResponseBody {
	s.ResourceGroupOrder = v
	return s
}

func (s *CreateResourceGroupResponseBody) SetSuccess(v bool) *CreateResourceGroupResponseBody {
	s.Success = &v
	return s
}

type CreateResourceGroupResponseBodyResourceGroupOrder struct {
	// The ID of the serverless resource group.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the order that is used to create the serverless resource group.
	//
	// example:
	//
	// 2391982058XXXXX
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The instance ID of the order that is used to create the serverless resource group.
	//
	// example:
	//
	// c442b330-3b10-4584-959e-736e4edXXXXX
	OrderInstanceId *string `json:"OrderInstanceId,omitempty" xml:"OrderInstanceId,omitempty"`
}

func (s CreateResourceGroupResponseBodyResourceGroupOrder) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceGroupResponseBodyResourceGroupOrder) GoString() string {
	return s.String()
}

func (s *CreateResourceGroupResponseBodyResourceGroupOrder) SetId(v string) *CreateResourceGroupResponseBodyResourceGroupOrder {
	s.Id = &v
	return s
}

func (s *CreateResourceGroupResponseBodyResourceGroupOrder) SetOrderId(v int64) *CreateResourceGroupResponseBodyResourceGroupOrder {
	s.OrderId = &v
	return s
}

func (s *CreateResourceGroupResponseBodyResourceGroupOrder) SetOrderInstanceId(v string) *CreateResourceGroupResponseBodyResourceGroupOrder {
	s.OrderInstanceId = &v
	return s
}

type CreateResourceGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateResourceGroupResponse) SetHeaders(v map[string]*string) *CreateResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateResourceGroupResponse) SetStatusCode(v int32) *CreateResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateResourceGroupResponse) SetBody(v *CreateResourceGroupResponseBody) *CreateResourceGroupResponse {
	s.Body = v
	return s
}

type CreateRouteRequest struct {
	// The CIDR blocks of the destination-based route.
	//
	// This parameter is required.
	//
	// example:
	//
	// 192.168.0.0/16
	DestinationCidr *string `json:"DestinationCidr,omitempty" xml:"DestinationCidr,omitempty"`
	// The network ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	NetworkId *int64 `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// Unique identifier of the serverless resource group.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteRequest) GoString() string {
	return s.String()
}

func (s *CreateRouteRequest) SetDestinationCidr(v string) *CreateRouteRequest {
	s.DestinationCidr = &v
	return s
}

func (s *CreateRouteRequest) SetNetworkId(v int64) *CreateRouteRequest {
	s.NetworkId = &v
	return s
}

func (s *CreateRouteRequest) SetResourceGroupId(v string) *CreateRouteRequest {
	s.ResourceGroupId = &v
	return s
}

type CreateRouteResponseBody struct {
	// The route ID.
	//
	// example:
	//
	// 1000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRouteResponseBody) SetId(v int64) *CreateRouteResponseBody {
	s.Id = &v
	return s
}

func (s *CreateRouteResponseBody) SetRequestId(v string) *CreateRouteResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRouteResponseBody) SetSuccess(v bool) *CreateRouteResponseBody {
	s.Success = &v
	return s
}

type CreateRouteResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRouteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRouteResponse) GoString() string {
	return s.String()
}

func (s *CreateRouteResponse) SetHeaders(v map[string]*string) *CreateRouteResponse {
	s.Headers = v
	return s
}

func (s *CreateRouteResponse) SetStatusCode(v int32) *CreateRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRouteResponse) SetBody(v *CreateRouteResponseBody) *CreateRouteResponse {
	s.Body = v
	return s
}

type CreateUdfFileRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// com.alibaba.DataWorks.api.udf.StringConcat
	ClassName *string `json:"ClassName,omitempty" xml:"ClassName,omitempty"`
	// example:
	//
	// StringConcat(String... substrs)
	CmdDescription *string `json:"CmdDescription,omitempty" xml:"CmdDescription,omitempty"`
	// example:
	//
	// false
	CreateFolderIfNotExists *bool `json:"CreateFolderIfNotExists,omitempty" xml:"CreateFolderIfNotExists,omitempty"`
	// example:
	//
	// StringConcat(\\"a\\", \\"b\\", \\"c\\")
	Example *string `json:"Example,omitempty" xml:"Example,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Business_process/First_Business_Process/function/string_processing
	FileFolderPath *string `json:"FileFolderPath,omitempty" xml:"FileFolderPath,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// StringConcat
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// STRING
	FunctionType *string `json:"FunctionType,omitempty" xml:"FunctionType,omitempty"`
	// example:
	//
	// List of strings to be connected
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// string-concat-1.0.0.jar,commons-lang-2.6.jar
	Resources *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	// example:
	//
	// New strings generated by concatenating all strings before and after the input order
	ReturnValue *string `json:"ReturnValue,omitempty" xml:"ReturnValue,omitempty"`
	// example:
	//
	// Concatenate several strings to generate a new string
	UdfDescription *string `json:"UdfDescription,omitempty" xml:"UdfDescription,omitempty"`
}

func (s CreateUdfFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUdfFileRequest) GoString() string {
	return s.String()
}

func (s *CreateUdfFileRequest) SetClassName(v string) *CreateUdfFileRequest {
	s.ClassName = &v
	return s
}

func (s *CreateUdfFileRequest) SetCmdDescription(v string) *CreateUdfFileRequest {
	s.CmdDescription = &v
	return s
}

func (s *CreateUdfFileRequest) SetCreateFolderIfNotExists(v bool) *CreateUdfFileRequest {
	s.CreateFolderIfNotExists = &v
	return s
}

func (s *CreateUdfFileRequest) SetExample(v string) *CreateUdfFileRequest {
	s.Example = &v
	return s
}

func (s *CreateUdfFileRequest) SetFileFolderPath(v string) *CreateUdfFileRequest {
	s.FileFolderPath = &v
	return s
}

func (s *CreateUdfFileRequest) SetFileName(v string) *CreateUdfFileRequest {
	s.FileName = &v
	return s
}

func (s *CreateUdfFileRequest) SetFunctionType(v string) *CreateUdfFileRequest {
	s.FunctionType = &v
	return s
}

func (s *CreateUdfFileRequest) SetParameterDescription(v string) *CreateUdfFileRequest {
	s.ParameterDescription = &v
	return s
}

func (s *CreateUdfFileRequest) SetProjectId(v int64) *CreateUdfFileRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateUdfFileRequest) SetProjectIdentifier(v string) *CreateUdfFileRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *CreateUdfFileRequest) SetResources(v string) *CreateUdfFileRequest {
	s.Resources = &v
	return s
}

func (s *CreateUdfFileRequest) SetReturnValue(v string) *CreateUdfFileRequest {
	s.ReturnValue = &v
	return s
}

func (s *CreateUdfFileRequest) SetUdfDescription(v string) *CreateUdfFileRequest {
	s.UdfDescription = &v
	return s
}

type CreateUdfFileResponseBody struct {
	// example:
	//
	// 100000002
	Data *int64 `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateUdfFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUdfFileResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUdfFileResponseBody) SetData(v int64) *CreateUdfFileResponseBody {
	s.Data = &v
	return s
}

func (s *CreateUdfFileResponseBody) SetErrorCode(v string) *CreateUdfFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateUdfFileResponseBody) SetErrorMessage(v string) *CreateUdfFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateUdfFileResponseBody) SetHttpStatusCode(v int32) *CreateUdfFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateUdfFileResponseBody) SetRequestId(v string) *CreateUdfFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateUdfFileResponseBody) SetSuccess(v bool) *CreateUdfFileResponseBody {
	s.Success = &v
	return s
}

type CreateUdfFileResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateUdfFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateUdfFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUdfFileResponse) GoString() string {
	return s.String()
}

func (s *CreateUdfFileResponse) SetHeaders(v map[string]*string) *CreateUdfFileResponse {
	s.Headers = v
	return s
}

func (s *CreateUdfFileResponse) SetStatusCode(v int32) *CreateUdfFileResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUdfFileResponse) SetBody(v *CreateUdfFileResponseBody) *CreateUdfFileResponse {
	s.Body = v
	return s
}

type CreateWorkflowDefinitionRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow/).
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//     "kind": "CycleWorkflow",
	//
	//     "version": "1.1.0",
	//
	//     "spec": {
	//
	//         "name": "OpenAPITestWorkflowDemo",
	//
	//         "type": "CycleWorkflow",
	//
	//         "workflows": [
	//
	//             {
	//
	//                 "script": {
	//
	//                     "path": "XX/OpenAPITest/WorkflowTest/OpenAPITestWorkflowDemo",
	//
	//                     "runtime": {
	//
	//                         "command": "WORKFLOW"
	//
	//                     }
	//
	//                 },
	//
	//                 "trigger": {
	//
	//                     "type": "Scheduler",
	//
	//                     "cron": "00 02 00 	- 	- ?",
	//
	//                     "startTime": "1970-01-01 00:00:00",
	//
	//                     "endTime": "9999-01-01 00:00:00",
	//
	//                     "timezone": "Asia/Shanghai",
	//
	//                     "delaySeconds": 0
	//
	//                 },
	//
	//                 "strategy": {
	//
	//                     "timeout": 0,
	//
	//                     "instanceMode": "T+1",
	//
	//                     "rerunMode": "Allowed",
	//
	//                     "rerunTimes": 3,
	//
	//                     "rerunInterval": 180000,
	//
	//                     "failureStrategy": "Break"
	//
	//                 },
	//
	//                 "name": "OpenAPITestWorkflowDemo",
	//
	//                 "inputs": {},
	//
	//                 "outputs": {
	//
	//                     "nodeOutputs": [
	//
	//                         {
	//
	//                             "data": "workflow_output",
	//
	//                             "artifactType": "NodeOutput",
	//
	//                             "refTableName": "OpenAPITestWorkflowDemo"
	//
	//                         }
	//
	//                     ]
	//
	//                 },
	//
	//                 "nodes": [],
	//
	//                 "dependencies": []
	//
	//             }
	//
	//         ]
	//
	//     }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s CreateWorkflowDefinitionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkflowDefinitionRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkflowDefinitionRequest) SetProjectId(v int64) *CreateWorkflowDefinitionRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateWorkflowDefinitionRequest) SetSpec(v string) *CreateWorkflowDefinitionRequest {
	s.Spec = &v
	return s
}

type CreateWorkflowDefinitionResponseBody struct {
	// The ID of the workflow.
	//
	// example:
	//
	// 463497880880954XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0EF298E5-0940-5AC7-9CB0-65025070XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateWorkflowDefinitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkflowDefinitionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWorkflowDefinitionResponseBody) SetId(v int64) *CreateWorkflowDefinitionResponseBody {
	s.Id = &v
	return s
}

func (s *CreateWorkflowDefinitionResponseBody) SetRequestId(v string) *CreateWorkflowDefinitionResponseBody {
	s.RequestId = &v
	return s
}

type CreateWorkflowDefinitionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateWorkflowDefinitionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWorkflowDefinitionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkflowDefinitionResponse) GoString() string {
	return s.String()
}

func (s *CreateWorkflowDefinitionResponse) SetHeaders(v map[string]*string) *CreateWorkflowDefinitionResponse {
	s.Headers = v
	return s
}

func (s *CreateWorkflowDefinitionResponse) SetStatusCode(v int32) *CreateWorkflowDefinitionResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWorkflowDefinitionResponse) SetBody(v *CreateWorkflowDefinitionResponseBody) *CreateWorkflowDefinitionResponse {
	s.Body = v
	return s
}

type CreateWorkflowInstancesRequest struct {
	// The default value is true.
	//
	// example:
	//
	// true
	AutoStartEnabled *bool `json:"AutoStartEnabled,omitempty" xml:"AutoStartEnabled,omitempty"`
	// The reason for the creation.
	//
	// example:
	//
	// create for test
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The runtime configuration.
	DefaultRunProperties *CreateWorkflowInstancesRequestDefaultRunProperties `json:"DefaultRunProperties,omitempty" xml:"DefaultRunProperties,omitempty" type:"Struct"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The name.
	//
	// This parameter is required.
	//
	// example:
	//
	// WorkflowInstance1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configuration of the data backfilling period.
	Periods *CreateWorkflowInstancesRequestPeriods `json:"Periods,omitempty" xml:"Periods,omitempty" type:"Struct"`
	// The project ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The task-specific parameters. The value is in the JSON format. The key specifies the task ID. You can call the GetTask operation to obtain the format of the value by querying the script parameters.
	//
	// example:
	//
	// {
	//
	//   "1001": "key1=val2 key2=val2",
	//
	//   "1002": "key1=val2 key2=val2"
	//
	// }
	TaskParameters *string `json:"TaskParameters,omitempty" xml:"TaskParameters,omitempty"`
	// The type of the workflow instance. Valid values:
	//
	// 	- SupplementData: The values of the RootTaskIds and IncludeTaskIds parameters vary based on the value of the Mode parameter. For more information, see the Mode parameter in this API operation.
	//
	// 	- ManualWorkflow: If you set the Type parameter to ManualWorkflow, you must set the WorkflowId parameter to the ID of the manually triggered workflow. The RootTaskIds parameter is optional. If you do not configure the RootTaskIds parameter, the IDs of the default root nodes of the manually triggered workflow are used.
	//
	// 	- Manual: You need to configure only the RootTaskIds parameter. The RootTaskIds parameter specifies the IDs of the manually triggered tasks that need to be run.
	//
	// 	- SmokeTest: You need to configure only the RootTaskIds parameter. The RootTaskIds parameter specifies the IDs of the test tasks that need to be run.
	//
	// This parameter is required.
	//
	// example:
	//
	// SupplementData
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the workflow to which the instance belongs. This parameter is set to 1 for auto triggered tasks.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
	// The workflow parameters. The priority of workflow parameters is higher than that of task parameters. You can call the GetTask operation to obtain the format of the workflow parameters by querying the Parameters parameter.
	//
	// example:
	//
	// {
	//
	//   "key1": "value1",
	//
	//   "key2": "value2"
	//
	// }
	WorkflowParameters *string `json:"WorkflowParameters,omitempty" xml:"WorkflowParameters,omitempty"`
}

func (s CreateWorkflowInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkflowInstancesRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkflowInstancesRequest) SetAutoStartEnabled(v bool) *CreateWorkflowInstancesRequest {
	s.AutoStartEnabled = &v
	return s
}

func (s *CreateWorkflowInstancesRequest) SetComment(v string) *CreateWorkflowInstancesRequest {
	s.Comment = &v
	return s
}

func (s *CreateWorkflowInstancesRequest) SetDefaultRunProperties(v *CreateWorkflowInstancesRequestDefaultRunProperties) *CreateWorkflowInstancesRequest {
	s.DefaultRunProperties = v
	return s
}

func (s *CreateWorkflowInstancesRequest) SetEnvType(v string) *CreateWorkflowInstancesRequest {
	s.EnvType = &v
	return s
}

func (s *CreateWorkflowInstancesRequest) SetName(v string) *CreateWorkflowInstancesRequest {
	s.Name = &v
	return s
}

func (s *CreateWorkflowInstancesRequest) SetPeriods(v *CreateWorkflowInstancesRequestPeriods) *CreateWorkflowInstancesRequest {
	s.Periods = v
	return s
}

func (s *CreateWorkflowInstancesRequest) SetProjectId(v int64) *CreateWorkflowInstancesRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateWorkflowInstancesRequest) SetTaskParameters(v string) *CreateWorkflowInstancesRequest {
	s.TaskParameters = &v
	return s
}

func (s *CreateWorkflowInstancesRequest) SetType(v string) *CreateWorkflowInstancesRequest {
	s.Type = &v
	return s
}

func (s *CreateWorkflowInstancesRequest) SetWorkflowId(v int64) *CreateWorkflowInstancesRequest {
	s.WorkflowId = &v
	return s
}

func (s *CreateWorkflowInstancesRequest) SetWorkflowParameters(v string) *CreateWorkflowInstancesRequest {
	s.WorkflowParameters = &v
	return s
}

type CreateWorkflowInstancesRequestDefaultRunProperties struct {
	// The alert settings.
	Alert *CreateWorkflowInstancesRequestDefaultRunPropertiesAlert `json:"Alert,omitempty" xml:"Alert,omitempty" type:"Struct"`
	// The configurations for analysis. If you set the Type parameter to SupplementData, this parameter is required.
	Analysis *CreateWorkflowInstancesRequestDefaultRunPropertiesAnalysis `json:"Analysis,omitempty" xml:"Analysis,omitempty" type:"Struct"`
	// The IDs of the projects that do not need to be run.
	ExcludeProjectIds []*int64 `json:"ExcludeProjectIds,omitempty" xml:"ExcludeProjectIds,omitempty" type:"Repeated"`
	// The IDs of the tasks that do not need to be run.
	ExcludeTaskIds []*int64 `json:"ExcludeTaskIds,omitempty" xml:"ExcludeTaskIds,omitempty" type:"Repeated"`
	// The IDs of the projects that need to be run.
	IncludeProjectIds []*int64 `json:"IncludeProjectIds,omitempty" xml:"IncludeProjectIds,omitempty" type:"Repeated"`
	// The IDs of the tasks that need to be run.
	IncludeTaskIds []*int64 `json:"IncludeTaskIds,omitempty" xml:"IncludeTaskIds,omitempty" type:"Repeated"`
	// The data backfill mode. Default value: ManualSelection. If you set the Type parameter to SupplementData, this parameter is required. Valid values:
	//
	// 	- General: You can specify only `one root task ID`. The `IncludeTaskIds` parameter is optional. If you do not configure the IncludeTaskIds parameter, the tasks that are specified by the `RootTaskIds` parameter are included by default.
	//
	// 	- ManualSelection: You can specify `multiple root task IDs`. The `IncludeTaskIds` parameter is optional. If you do not configure the IncludeTaskIds parameter, the tasks that are specified by the `RootTaskIds` parameter are included by default.
	//
	// 	- Chain: If you set the Mode parameter to Chain, you must leave the `RootTaskIds` parameter empty and set the `IncludeTaskIds` parameter to the start task ID and the end task ID.
	//
	// 	- AllDownstream: You can specify only one `root task ID`.
	//
	// example:
	//
	// ManualSelection
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// The running order. Default value: Asc. Valid values:
	//
	// 	- Asc: The tasks are sorted by data timestamp in ascending order.
	//
	// 	- Desc: The tasks are sorted by data timestamp in descending order.
	//
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// The number of tasks that can be run in parallel. If you specify a value that ranges from 2 to 10, the value indicates the number of tasks that can be run in parallel. If you set the value to 1, the tasks are run one by one. If you set the Type parameter to SupplementData, this parameter is required.
	//
	// example:
	//
	// 2
	Parallelism *int32 `json:"Parallelism,omitempty" xml:"Parallelism,omitempty"`
	Priority    *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The root task IDs.
	//
	// 	- If you set the Type parameter to SupplementData and the Mode parameter to a value other than Chain, the RootTaskIds parameter is required.
	//
	// 	- If you set the Type parameter to ManualWorkflow, the RootTaskIds parameter is optional. If you do not configure the RootTaskIds parameter, the IDs of the default root nodes of the manually triggered workflow are used.
	//
	// 	- If you set the Type parameter to Manual, the RootTaskIds parameter is required. The RootTaskIds parameter specifies the IDs of the manually triggered tasks that need to be run.
	//
	// 	- If you set the Type parameter to SmokeTest, the RootTaskIds parameter is required. The RootTaskIds parameter specifies the IDs of the test tasks that need to be run.
	RootTaskIds []*int64 `json:"RootTaskIds,omitempty" xml:"RootTaskIds,omitempty" type:"Repeated"`
	// The policy for running. If you leave this parameter empty, the runtime configuration is used.
	RunPolicy *CreateWorkflowInstancesRequestDefaultRunPropertiesRunPolicy `json:"RunPolicy,omitempty" xml:"RunPolicy,omitempty" type:"Struct"`
	// The identifier of the custom resource group for scheduling. If you leave this parameter empty, the runtime configuration is used.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	RuntimeResource *string `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty"`
}

func (s CreateWorkflowInstancesRequestDefaultRunProperties) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkflowInstancesRequestDefaultRunProperties) GoString() string {
	return s.String()
}

func (s *CreateWorkflowInstancesRequestDefaultRunProperties) SetAlert(v *CreateWorkflowInstancesRequestDefaultRunPropertiesAlert) *CreateWorkflowInstancesRequestDefaultRunProperties {
	s.Alert = v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunProperties) SetAnalysis(v *CreateWorkflowInstancesRequestDefaultRunPropertiesAnalysis) *CreateWorkflowInstancesRequestDefaultRunProperties {
	s.Analysis = v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunProperties) SetExcludeProjectIds(v []*int64) *CreateWorkflowInstancesRequestDefaultRunProperties {
	s.ExcludeProjectIds = v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunProperties) SetExcludeTaskIds(v []*int64) *CreateWorkflowInstancesRequestDefaultRunProperties {
	s.ExcludeTaskIds = v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunProperties) SetIncludeProjectIds(v []*int64) *CreateWorkflowInstancesRequestDefaultRunProperties {
	s.IncludeProjectIds = v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunProperties) SetIncludeTaskIds(v []*int64) *CreateWorkflowInstancesRequestDefaultRunProperties {
	s.IncludeTaskIds = v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunProperties) SetMode(v string) *CreateWorkflowInstancesRequestDefaultRunProperties {
	s.Mode = &v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunProperties) SetOrder(v string) *CreateWorkflowInstancesRequestDefaultRunProperties {
	s.Order = &v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunProperties) SetParallelism(v int32) *CreateWorkflowInstancesRequestDefaultRunProperties {
	s.Parallelism = &v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunProperties) SetPriority(v int32) *CreateWorkflowInstancesRequestDefaultRunProperties {
	s.Priority = &v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunProperties) SetRootTaskIds(v []*int64) *CreateWorkflowInstancesRequestDefaultRunProperties {
	s.RootTaskIds = v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunProperties) SetRunPolicy(v *CreateWorkflowInstancesRequestDefaultRunPropertiesRunPolicy) *CreateWorkflowInstancesRequestDefaultRunProperties {
	s.RunPolicy = v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunProperties) SetRuntimeResource(v string) *CreateWorkflowInstancesRequestDefaultRunProperties {
	s.RuntimeResource = &v
	return s
}

type CreateWorkflowInstancesRequestDefaultRunPropertiesAlert struct {
	// The alert notification method. Valid values:
	//
	// 	- Sms
	//
	// 	- Mail
	//
	// 	- SmsMail
	//
	// example:
	//
	// Sms
	NoticeType *string `json:"NoticeType,omitempty" xml:"NoticeType,omitempty"`
	// The alerting policy. Valid values:
	//
	// 	- SUCCESS: An alert is reported when data backfill succeeds.
	//
	// 	- FAILURE: An alert is reported when data backfill fails.
	//
	// 	- SuccessFailure: An alert is reported regardless of whether data backfill succeeds or fails.
	//
	// example:
	//
	// Succes
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateWorkflowInstancesRequestDefaultRunPropertiesAlert) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkflowInstancesRequestDefaultRunPropertiesAlert) GoString() string {
	return s.String()
}

func (s *CreateWorkflowInstancesRequestDefaultRunPropertiesAlert) SetNoticeType(v string) *CreateWorkflowInstancesRequestDefaultRunPropertiesAlert {
	s.NoticeType = &v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunPropertiesAlert) SetType(v string) *CreateWorkflowInstancesRequestDefaultRunPropertiesAlert {
	s.Type = &v
	return s
}

type CreateWorkflowInstancesRequestDefaultRunPropertiesAnalysis struct {
	// Specifies whether to block the running of the instance if the analysis fails. If you set the Type parameter to SupplementData, this parameter is required.
	//
	// example:
	//
	// true
	Blocked *bool `json:"Blocked,omitempty" xml:"Blocked,omitempty"`
	// Specifies whether to enable the analysis feature. If you set the Type parameter to SupplementData, this parameter is required.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
}

func (s CreateWorkflowInstancesRequestDefaultRunPropertiesAnalysis) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkflowInstancesRequestDefaultRunPropertiesAnalysis) GoString() string {
	return s.String()
}

func (s *CreateWorkflowInstancesRequestDefaultRunPropertiesAnalysis) SetBlocked(v bool) *CreateWorkflowInstancesRequestDefaultRunPropertiesAnalysis {
	s.Blocked = &v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunPropertiesAnalysis) SetEnabled(v bool) *CreateWorkflowInstancesRequestDefaultRunPropertiesAnalysis {
	s.Enabled = &v
	return s
}

type CreateWorkflowInstancesRequestDefaultRunPropertiesRunPolicy struct {
	// The end time of running. Configure this parameter in the `hh:mm:ss` format. The time must be in the 24-hour clock. This parameter is required if you configure the RunPolicy parameter.
	//
	// example:
	//
	// 23:59:59
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// Specifies whether the instance can be run immediately during the time period in the future. Default value: false.
	//
	// example:
	//
	// false
	Immediately *bool `json:"Immediately,omitempty" xml:"Immediately,omitempty"`
	// The start time of running. Configure this parameter in the `hh:mm:ss` format. The time must be in the 24-hour clock. This parameter is required if you configure the RunPolicy parameter.
	//
	// example:
	//
	// 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The type of the time period during which the data is backfilled. This parameter is required if you configure the RunPolicy parameter.
	//
	// 	- Daily
	//
	// 	- Weekend
	//
	// example:
	//
	// Daily
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateWorkflowInstancesRequestDefaultRunPropertiesRunPolicy) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkflowInstancesRequestDefaultRunPropertiesRunPolicy) GoString() string {
	return s.String()
}

func (s *CreateWorkflowInstancesRequestDefaultRunPropertiesRunPolicy) SetEndTime(v string) *CreateWorkflowInstancesRequestDefaultRunPropertiesRunPolicy {
	s.EndTime = &v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunPropertiesRunPolicy) SetImmediately(v bool) *CreateWorkflowInstancesRequestDefaultRunPropertiesRunPolicy {
	s.Immediately = &v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunPropertiesRunPolicy) SetStartTime(v string) *CreateWorkflowInstancesRequestDefaultRunPropertiesRunPolicy {
	s.StartTime = &v
	return s
}

func (s *CreateWorkflowInstancesRequestDefaultRunPropertiesRunPolicy) SetType(v string) *CreateWorkflowInstancesRequestDefaultRunPropertiesRunPolicy {
	s.Type = &v
	return s
}

type CreateWorkflowInstancesRequestPeriods struct {
	// The data timestamps. You can specify up to seven data timestamps.
	//
	// This parameter is required.
	BizDates []*CreateWorkflowInstancesRequestPeriodsBizDates `json:"BizDates,omitempty" xml:"BizDates,omitempty" type:"Repeated"`
	// The end time of data backfill. Configure this parameter in the `hh:mm:ss` format. The time must be in the 24-hour clock. Default value: 23:59:59.
	//
	// If you configure this parameter, you must also configure the StartTime parameter.
	//
	// example:
	//
	// 23:59:59
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The start time of data backfill. Configure this parameter in the `hh:mm:ss` format. The time must be in the 24-hour clock. Default value: 00:00:00.
	//
	// If you configure this parameter, you must also configure the EndTime parameter.
	//
	// example:
	//
	// 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s CreateWorkflowInstancesRequestPeriods) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkflowInstancesRequestPeriods) GoString() string {
	return s.String()
}

func (s *CreateWorkflowInstancesRequestPeriods) SetBizDates(v []*CreateWorkflowInstancesRequestPeriodsBizDates) *CreateWorkflowInstancesRequestPeriods {
	s.BizDates = v
	return s
}

func (s *CreateWorkflowInstancesRequestPeriods) SetEndTime(v string) *CreateWorkflowInstancesRequestPeriods {
	s.EndTime = &v
	return s
}

func (s *CreateWorkflowInstancesRequestPeriods) SetStartTime(v string) *CreateWorkflowInstancesRequestPeriods {
	s.StartTime = &v
	return s
}

type CreateWorkflowInstancesRequestPeriodsBizDates struct {
	// The data timestamp at which data is no longer backfilled. Configure this parameter in the `yyyy-mm-dd` format.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2024-11-24
	EndBizDate *string `json:"EndBizDate,omitempty" xml:"EndBizDate,omitempty"`
	// The data timestamp at which the data starts to be backfilled. Configure this parameter in the `yyyy-mm-dd` format.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2024-11-20
	StartBizDate *string `json:"StartBizDate,omitempty" xml:"StartBizDate,omitempty"`
}

func (s CreateWorkflowInstancesRequestPeriodsBizDates) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkflowInstancesRequestPeriodsBizDates) GoString() string {
	return s.String()
}

func (s *CreateWorkflowInstancesRequestPeriodsBizDates) SetEndBizDate(v string) *CreateWorkflowInstancesRequestPeriodsBizDates {
	s.EndBizDate = &v
	return s
}

func (s *CreateWorkflowInstancesRequestPeriodsBizDates) SetStartBizDate(v string) *CreateWorkflowInstancesRequestPeriodsBizDates {
	s.StartBizDate = &v
	return s
}

type CreateWorkflowInstancesShrinkRequest struct {
	// The default value is true.
	//
	// example:
	//
	// true
	AutoStartEnabled *bool `json:"AutoStartEnabled,omitempty" xml:"AutoStartEnabled,omitempty"`
	// The reason for the creation.
	//
	// example:
	//
	// create for test
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The runtime configuration.
	DefaultRunPropertiesShrink *string `json:"DefaultRunProperties,omitempty" xml:"DefaultRunProperties,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The name.
	//
	// This parameter is required.
	//
	// example:
	//
	// WorkflowInstance1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configuration of the data backfilling period.
	PeriodsShrink *string `json:"Periods,omitempty" xml:"Periods,omitempty"`
	// The project ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The task-specific parameters. The value is in the JSON format. The key specifies the task ID. You can call the GetTask operation to obtain the format of the value by querying the script parameters.
	//
	// example:
	//
	// {
	//
	//   "1001": "key1=val2 key2=val2",
	//
	//   "1002": "key1=val2 key2=val2"
	//
	// }
	TaskParameters *string `json:"TaskParameters,omitempty" xml:"TaskParameters,omitempty"`
	// The type of the workflow instance. Valid values:
	//
	// 	- SupplementData: The values of the RootTaskIds and IncludeTaskIds parameters vary based on the value of the Mode parameter. For more information, see the Mode parameter in this API operation.
	//
	// 	- ManualWorkflow: If you set the Type parameter to ManualWorkflow, you must set the WorkflowId parameter to the ID of the manually triggered workflow. The RootTaskIds parameter is optional. If you do not configure the RootTaskIds parameter, the IDs of the default root nodes of the manually triggered workflow are used.
	//
	// 	- Manual: You need to configure only the RootTaskIds parameter. The RootTaskIds parameter specifies the IDs of the manually triggered tasks that need to be run.
	//
	// 	- SmokeTest: You need to configure only the RootTaskIds parameter. The RootTaskIds parameter specifies the IDs of the test tasks that need to be run.
	//
	// This parameter is required.
	//
	// example:
	//
	// SupplementData
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the workflow to which the instance belongs. This parameter is set to 1 for auto triggered tasks.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
	// The workflow parameters. The priority of workflow parameters is higher than that of task parameters. You can call the GetTask operation to obtain the format of the workflow parameters by querying the Parameters parameter.
	//
	// example:
	//
	// {
	//
	//   "key1": "value1",
	//
	//   "key2": "value2"
	//
	// }
	WorkflowParameters *string `json:"WorkflowParameters,omitempty" xml:"WorkflowParameters,omitempty"`
}

func (s CreateWorkflowInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkflowInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkflowInstancesShrinkRequest) SetAutoStartEnabled(v bool) *CreateWorkflowInstancesShrinkRequest {
	s.AutoStartEnabled = &v
	return s
}

func (s *CreateWorkflowInstancesShrinkRequest) SetComment(v string) *CreateWorkflowInstancesShrinkRequest {
	s.Comment = &v
	return s
}

func (s *CreateWorkflowInstancesShrinkRequest) SetDefaultRunPropertiesShrink(v string) *CreateWorkflowInstancesShrinkRequest {
	s.DefaultRunPropertiesShrink = &v
	return s
}

func (s *CreateWorkflowInstancesShrinkRequest) SetEnvType(v string) *CreateWorkflowInstancesShrinkRequest {
	s.EnvType = &v
	return s
}

func (s *CreateWorkflowInstancesShrinkRequest) SetName(v string) *CreateWorkflowInstancesShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateWorkflowInstancesShrinkRequest) SetPeriodsShrink(v string) *CreateWorkflowInstancesShrinkRequest {
	s.PeriodsShrink = &v
	return s
}

func (s *CreateWorkflowInstancesShrinkRequest) SetProjectId(v int64) *CreateWorkflowInstancesShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateWorkflowInstancesShrinkRequest) SetTaskParameters(v string) *CreateWorkflowInstancesShrinkRequest {
	s.TaskParameters = &v
	return s
}

func (s *CreateWorkflowInstancesShrinkRequest) SetType(v string) *CreateWorkflowInstancesShrinkRequest {
	s.Type = &v
	return s
}

func (s *CreateWorkflowInstancesShrinkRequest) SetWorkflowId(v int64) *CreateWorkflowInstancesShrinkRequest {
	s.WorkflowId = &v
	return s
}

func (s *CreateWorkflowInstancesShrinkRequest) SetWorkflowParameters(v string) *CreateWorkflowInstancesShrinkRequest {
	s.WorkflowParameters = &v
	return s
}

type CreateWorkflowInstancesResponseBody struct {
	// The ID of the operation. You can use this field to query the results of the creation operation through the GetCreateWorkflowInstancesResult interface.
	//
	// example:
	//
	// e15ad21c-b0e9-4792-8f55-b037xxxxxxxx
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	// The ID of the request. It is used to locate logs and troubleshoot problems.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateWorkflowInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkflowInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWorkflowInstancesResponseBody) SetOperationId(v string) *CreateWorkflowInstancesResponseBody {
	s.OperationId = &v
	return s
}

func (s *CreateWorkflowInstancesResponseBody) SetRequestId(v string) *CreateWorkflowInstancesResponseBody {
	s.RequestId = &v
	return s
}

type CreateWorkflowInstancesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateWorkflowInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWorkflowInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkflowInstancesResponse) GoString() string {
	return s.String()
}

func (s *CreateWorkflowInstancesResponse) SetHeaders(v map[string]*string) *CreateWorkflowInstancesResponse {
	s.Headers = v
	return s
}

func (s *CreateWorkflowInstancesResponse) SetStatusCode(v int32) *CreateWorkflowInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWorkflowInstancesResponse) SetBody(v *CreateWorkflowInstancesResponseBody) *CreateWorkflowInstancesResponse {
	s.Body = v
	return s
}

type DeleteAlertRuleRequest struct {
	// The rule ID.
	//
	// example:
	//
	// 105412
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteAlertRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlertRuleRequest) SetId(v int64) *DeleteAlertRuleRequest {
	s.Id = &v
	return s
}

type DeleteAlertRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 8754EE08-4AA2-5F77-ADD7-754DBBDA9F75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteAlertRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAlertRuleResponseBody) SetRequestId(v string) *DeleteAlertRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAlertRuleResponseBody) SetSuccess(v bool) *DeleteAlertRuleResponseBody {
	s.Success = &v
	return s
}

type DeleteAlertRuleResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAlertRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAlertRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlertRuleResponse) SetHeaders(v map[string]*string) *DeleteAlertRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteAlertRuleResponse) SetStatusCode(v int32) *DeleteAlertRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAlertRuleResponse) SetBody(v *DeleteAlertRuleResponseBody) *DeleteAlertRuleResponse {
	s.Body = v
	return s
}

type DeleteBusinessRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1000001
	BusinessId *int64 `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s DeleteBusinessRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBusinessRequest) GoString() string {
	return s.String()
}

func (s *DeleteBusinessRequest) SetBusinessId(v int64) *DeleteBusinessRequest {
	s.BusinessId = &v
	return s
}

func (s *DeleteBusinessRequest) SetProjectId(v int64) *DeleteBusinessRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteBusinessRequest) SetProjectIdentifier(v string) *DeleteBusinessRequest {
	s.ProjectIdentifier = &v
	return s
}

type DeleteBusinessResponseBody struct {
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteBusinessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBusinessResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBusinessResponseBody) SetErrorCode(v string) *DeleteBusinessResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteBusinessResponseBody) SetErrorMessage(v string) *DeleteBusinessResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteBusinessResponseBody) SetHttpStatusCode(v int32) *DeleteBusinessResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteBusinessResponseBody) SetRequestId(v string) *DeleteBusinessResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteBusinessResponseBody) SetSuccess(v bool) *DeleteBusinessResponseBody {
	s.Success = &v
	return s
}

type DeleteBusinessResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteBusinessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteBusinessResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBusinessResponse) GoString() string {
	return s.String()
}

func (s *DeleteBusinessResponse) SetHeaders(v map[string]*string) *DeleteBusinessResponse {
	s.Headers = v
	return s
}

func (s *DeleteBusinessResponse) SetStatusCode(v int32) *DeleteBusinessResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBusinessResponse) SetBody(v *DeleteBusinessResponseBody) *DeleteBusinessResponse {
	s.Body = v
	return s
}

type DeleteCertificateRequest struct {
	// The ID of the certificate file.
	//
	// This parameter is required.
	//
	// example:
	//
	// 676303114031776
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the workspace to which the certificate file belongs.
	//
	// example:
	//
	// 106560
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCertificateRequest) GoString() string {
	return s.String()
}

func (s *DeleteCertificateRequest) SetId(v int64) *DeleteCertificateRequest {
	s.Id = &v
	return s
}

func (s *DeleteCertificateRequest) SetProjectId(v int64) *DeleteCertificateRequest {
	s.ProjectId = &v
	return s
}

type DeleteCertificateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// D9A61DC0-B922-421B-B706
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCertificateResponseBody) SetRequestId(v string) *DeleteCertificateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCertificateResponseBody) SetSuccess(v bool) *DeleteCertificateResponseBody {
	s.Success = &v
	return s
}

type DeleteCertificateResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCertificateResponse) GoString() string {
	return s.String()
}

func (s *DeleteCertificateResponse) SetHeaders(v map[string]*string) *DeleteCertificateResponse {
	s.Headers = v
	return s
}

func (s *DeleteCertificateResponse) SetStatusCode(v int32) *DeleteCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCertificateResponse) SetBody(v *DeleteCertificateResponseBody) *DeleteCertificateResponse {
	s.Body = v
	return s
}

type DeleteDIAlarmRuleRequest struct {
	// Deprecated
	//
	// This parameter is deprecated. Use the Id parameter instead.
	//
	// example:
	//
	// 2
	DIAlarmRuleId *int64 `json:"DIAlarmRuleId,omitempty" xml:"DIAlarmRuleId,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 1
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 2
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteDIAlarmRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDIAlarmRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteDIAlarmRuleRequest) SetDIAlarmRuleId(v int64) *DeleteDIAlarmRuleRequest {
	s.DIAlarmRuleId = &v
	return s
}

func (s *DeleteDIAlarmRuleRequest) SetDIJobId(v int64) *DeleteDIAlarmRuleRequest {
	s.DIJobId = &v
	return s
}

func (s *DeleteDIAlarmRuleRequest) SetId(v int64) *DeleteDIAlarmRuleRequest {
	s.Id = &v
	return s
}

type DeleteDIAlarmRuleResponseBody struct {
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDIAlarmRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDIAlarmRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDIAlarmRuleResponseBody) SetRequestId(v string) *DeleteDIAlarmRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDIAlarmRuleResponseBody) SetSuccess(v bool) *DeleteDIAlarmRuleResponseBody {
	s.Success = &v
	return s
}

type DeleteDIAlarmRuleResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDIAlarmRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDIAlarmRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDIAlarmRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteDIAlarmRuleResponse) SetHeaders(v map[string]*string) *DeleteDIAlarmRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteDIAlarmRuleResponse) SetStatusCode(v int32) *DeleteDIAlarmRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDIAlarmRuleResponse) SetBody(v *DeleteDIAlarmRuleResponseBody) *DeleteDIAlarmRuleResponse {
	s.Body = v
	return s
}

type DeleteDIJobRequest struct {
	// Deprecated
	//
	// This parameter is deprecated. Use the Id parameter instead.
	//
	// example:
	//
	// 11126
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 11126
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 108864
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteDIJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDIJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteDIJobRequest) SetDIJobId(v int64) *DeleteDIJobRequest {
	s.DIJobId = &v
	return s
}

func (s *DeleteDIJobRequest) SetId(v int64) *DeleteDIJobRequest {
	s.Id = &v
	return s
}

func (s *DeleteDIJobRequest) SetProjectId(v int64) *DeleteDIJobRequest {
	s.ProjectId = &v
	return s
}

type DeleteDIJobResponseBody struct {
	// The request ID. You can troubleshoot issues based on the ID.
	//
	// example:
	//
	// D33D4A51-5845-579A-B4BA-FAADD0F83D53
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// true
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDIJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDIJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDIJobResponseBody) SetRequestId(v string) *DeleteDIJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDIJobResponseBody) SetSuccess(v bool) *DeleteDIJobResponseBody {
	s.Success = &v
	return s
}

type DeleteDIJobResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDIJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDIJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDIJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteDIJobResponse) SetHeaders(v map[string]*string) *DeleteDIJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteDIJobResponse) SetStatusCode(v int32) *DeleteDIJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDIJobResponse) SetBody(v *DeleteDIJobResponseBody) *DeleteDIJobResponse {
	s.Body = v
	return s
}

type DeleteDataAssetTagRequest struct {
	// The tag key.
	//
	// This parameter is required.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag values.
	Values []*string `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s DeleteDataAssetTagRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataAssetTagRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataAssetTagRequest) SetKey(v string) *DeleteDataAssetTagRequest {
	s.Key = &v
	return s
}

func (s *DeleteDataAssetTagRequest) SetValues(v []*string) *DeleteDataAssetTagRequest {
	s.Values = v
	return s
}

type DeleteDataAssetTagShrinkRequest struct {
	// The tag key.
	//
	// This parameter is required.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag values.
	ValuesShrink *string `json:"Values,omitempty" xml:"Values,omitempty"`
}

func (s DeleteDataAssetTagShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataAssetTagShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataAssetTagShrinkRequest) SetKey(v string) *DeleteDataAssetTagShrinkRequest {
	s.Key = &v
	return s
}

func (s *DeleteDataAssetTagShrinkRequest) SetValuesShrink(v string) *DeleteDataAssetTagShrinkRequest {
	s.ValuesShrink = &v
	return s
}

type DeleteDataAssetTagResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 0bc1411515937635973****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDataAssetTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataAssetTagResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataAssetTagResponseBody) SetRequestId(v string) *DeleteDataAssetTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDataAssetTagResponseBody) SetSuccess(v bool) *DeleteDataAssetTagResponseBody {
	s.Success = &v
	return s
}

type DeleteDataAssetTagResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDataAssetTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDataAssetTagResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataAssetTagResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataAssetTagResponse) SetHeaders(v map[string]*string) *DeleteDataAssetTagResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataAssetTagResponse) SetStatusCode(v int32) *DeleteDataAssetTagResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDataAssetTagResponse) SetBody(v *DeleteDataAssetTagResponseBody) *DeleteDataAssetTagResponse {
	s.Body = v
	return s
}

type DeleteDataQualityEvaluationTaskRequest struct {
	// The ID of the data quality monitor.
	//
	// example:
	//
	// 123123
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the workspace management page to obtain the ID.
	//
	// This parameter is used to determine the DataWorks workspaces used for this API call.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteDataQualityEvaluationTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataQualityEvaluationTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataQualityEvaluationTaskRequest) SetId(v int64) *DeleteDataQualityEvaluationTaskRequest {
	s.Id = &v
	return s
}

func (s *DeleteDataQualityEvaluationTaskRequest) SetProjectId(v int64) *DeleteDataQualityEvaluationTaskRequest {
	s.ProjectId = &v
	return s
}

type DeleteDataQualityEvaluationTaskResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// 0bc1ec92159376****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Whether the deletion is successful.
	//
	// - true: Successful
	//
	// - false: Failed
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDataQualityEvaluationTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataQualityEvaluationTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataQualityEvaluationTaskResponseBody) SetRequestId(v string) *DeleteDataQualityEvaluationTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDataQualityEvaluationTaskResponseBody) SetSuccess(v bool) *DeleteDataQualityEvaluationTaskResponseBody {
	s.Success = &v
	return s
}

type DeleteDataQualityEvaluationTaskResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDataQualityEvaluationTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDataQualityEvaluationTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataQualityEvaluationTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataQualityEvaluationTaskResponse) SetHeaders(v map[string]*string) *DeleteDataQualityEvaluationTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataQualityEvaluationTaskResponse) SetStatusCode(v int32) *DeleteDataQualityEvaluationTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDataQualityEvaluationTaskResponse) SetBody(v *DeleteDataQualityEvaluationTaskResponseBody) *DeleteDataQualityEvaluationTaskResponse {
	s.Body = v
	return s
}

type DeleteDataQualityRuleRequest struct {
	// The rule ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 19715
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 17302
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteDataQualityRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataQualityRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataQualityRuleRequest) SetId(v int64) *DeleteDataQualityRuleRequest {
	s.Id = &v
	return s
}

func (s *DeleteDataQualityRuleRequest) SetProjectId(v int64) *DeleteDataQualityRuleRequest {
	s.ProjectId = &v
	return s
}

type DeleteDataQualityRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDataQualityRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataQualityRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataQualityRuleResponseBody) SetRequestId(v string) *DeleteDataQualityRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDataQualityRuleResponseBody) SetSuccess(v bool) *DeleteDataQualityRuleResponseBody {
	s.Success = &v
	return s
}

type DeleteDataQualityRuleResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDataQualityRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDataQualityRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataQualityRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataQualityRuleResponse) SetHeaders(v map[string]*string) *DeleteDataQualityRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataQualityRuleResponse) SetStatusCode(v int32) *DeleteDataQualityRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDataQualityRuleResponse) SetBody(v *DeleteDataQualityRuleResponseBody) *DeleteDataQualityRuleResponse {
	s.Body = v
	return s
}

type DeleteDataQualityRuleTemplateRequest struct {
	// The code for the template.
	//
	// This parameter is required.
	//
	// example:
	//
	// USER_DEFINED:123
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 10001
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteDataQualityRuleTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataQualityRuleTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataQualityRuleTemplateRequest) SetCode(v string) *DeleteDataQualityRuleTemplateRequest {
	s.Code = &v
	return s
}

func (s *DeleteDataQualityRuleTemplateRequest) SetProjectId(v int64) *DeleteDataQualityRuleTemplateRequest {
	s.ProjectId = &v
	return s
}

type DeleteDataQualityRuleTemplateResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDataQualityRuleTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataQualityRuleTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataQualityRuleTemplateResponseBody) SetRequestId(v string) *DeleteDataQualityRuleTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDataQualityRuleTemplateResponseBody) SetSuccess(v bool) *DeleteDataQualityRuleTemplateResponseBody {
	s.Success = &v
	return s
}

type DeleteDataQualityRuleTemplateResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDataQualityRuleTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDataQualityRuleTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataQualityRuleTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataQualityRuleTemplateResponse) SetHeaders(v map[string]*string) *DeleteDataQualityRuleTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataQualityRuleTemplateResponse) SetStatusCode(v int32) *DeleteDataQualityRuleTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDataQualityRuleTemplateResponse) SetBody(v *DeleteDataQualityRuleTemplateResponseBody) *DeleteDataQualityRuleTemplateResponse {
	s.Body = v
	return s
}

type DeleteDataSourceRequest struct {
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceRequest) SetId(v int64) *DeleteDataSourceRequest {
	s.Id = &v
	return s
}

type DeleteDataSourceResponseBody struct {
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// B56432E0-2112-5C97-88D0-AA0AE5C75C74
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Whether the call is successful.
	//
	// - true: Successful
	//
	// - false: Failed
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceResponseBody) SetRequestId(v string) *DeleteDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDataSourceResponseBody) SetSuccess(v bool) *DeleteDataSourceResponseBody {
	s.Success = &v
	return s
}

type DeleteDataSourceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceResponse) SetHeaders(v map[string]*string) *DeleteDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataSourceResponse) SetStatusCode(v int32) *DeleteDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDataSourceResponse) SetBody(v *DeleteDataSourceResponseBody) *DeleteDataSourceResponse {
	s.Body = v
	return s
}

type DeleteDataSourceSharedRuleRequest struct {
	// The sharing rule ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 22127
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteDataSourceSharedRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceSharedRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceSharedRuleRequest) SetId(v int64) *DeleteDataSourceSharedRuleRequest {
	s.Id = &v
	return s
}

type DeleteDataSourceSharedRuleResponseBody struct {
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// 64B-587A-8CED-969E1973887FXXX-TT
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Whether the data source sharing rule is deleted successfully. The value is as follows:
	//
	// -true: The request is successful.
	//
	// -false: The request failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDataSourceSharedRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceSharedRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceSharedRuleResponseBody) SetRequestId(v string) *DeleteDataSourceSharedRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDataSourceSharedRuleResponseBody) SetSuccess(v bool) *DeleteDataSourceSharedRuleResponseBody {
	s.Success = &v
	return s
}

type DeleteDataSourceSharedRuleResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDataSourceSharedRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDataSourceSharedRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceSharedRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceSharedRuleResponse) SetHeaders(v map[string]*string) *DeleteDataSourceSharedRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataSourceSharedRuleResponse) SetStatusCode(v int32) *DeleteDataSourceSharedRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDataSourceSharedRuleResponse) SetBody(v *DeleteDataSourceSharedRuleResponseBody) *DeleteDataSourceSharedRuleResponse {
	s.Body = v
	return s
}

type DeleteFileRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 10000201
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s DeleteFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileRequest) GoString() string {
	return s.String()
}

func (s *DeleteFileRequest) SetFileId(v int64) *DeleteFileRequest {
	s.FileId = &v
	return s
}

func (s *DeleteFileRequest) SetProjectId(v int64) *DeleteFileRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFileRequest) SetProjectIdentifier(v string) *DeleteFileRequest {
	s.ProjectIdentifier = &v
	return s
}

type DeleteFileResponseBody struct {
	// example:
	//
	// 1000000001
	DeploymentId *int64 `json:"DeploymentId,omitempty" xml:"DeploymentId,omitempty"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFileResponseBody) SetDeploymentId(v int64) *DeleteFileResponseBody {
	s.DeploymentId = &v
	return s
}

func (s *DeleteFileResponseBody) SetErrorCode(v string) *DeleteFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteFileResponseBody) SetErrorMessage(v string) *DeleteFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteFileResponseBody) SetHttpStatusCode(v int32) *DeleteFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteFileResponseBody) SetRequestId(v string) *DeleteFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFileResponseBody) SetSuccess(v bool) *DeleteFileResponseBody {
	s.Success = &v
	return s
}

type DeleteFileResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileResponse) GoString() string {
	return s.String()
}

func (s *DeleteFileResponse) SetHeaders(v map[string]*string) *DeleteFileResponse {
	s.Headers = v
	return s
}

func (s *DeleteFileResponse) SetStatusCode(v int32) *DeleteFileResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFileResponse) SetBody(v *DeleteFileResponseBody) *DeleteFileResponse {
	s.Body = v
	return s
}

type DeleteFolderRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2eb6f9****
	FolderId *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s DeleteFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFolderRequest) GoString() string {
	return s.String()
}

func (s *DeleteFolderRequest) SetFolderId(v string) *DeleteFolderRequest {
	s.FolderId = &v
	return s
}

func (s *DeleteFolderRequest) SetProjectId(v int64) *DeleteFolderRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFolderRequest) SetProjectIdentifier(v string) *DeleteFolderRequest {
	s.ProjectIdentifier = &v
	return s
}

type DeleteFolderResponseBody struct {
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteFolderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFolderResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFolderResponseBody) SetErrorCode(v string) *DeleteFolderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteFolderResponseBody) SetErrorMessage(v string) *DeleteFolderResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteFolderResponseBody) SetHttpStatusCode(v int32) *DeleteFolderResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteFolderResponseBody) SetRequestId(v string) *DeleteFolderResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFolderResponseBody) SetSuccess(v bool) *DeleteFolderResponseBody {
	s.Success = &v
	return s
}

type DeleteFolderResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFolderResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFolderResponse) GoString() string {
	return s.String()
}

func (s *DeleteFolderResponse) SetHeaders(v map[string]*string) *DeleteFolderResponse {
	s.Headers = v
	return s
}

func (s *DeleteFolderResponse) SetStatusCode(v int32) *DeleteFolderResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFolderResponse) SetBody(v *DeleteFolderResponseBody) *DeleteFolderResponse {
	s.Body = v
	return s
}

type DeleteFunctionRequest struct {
	// The ID of the UDF.
	//
	// This parameter is required.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID. You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteFunctionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFunctionRequest) GoString() string {
	return s.String()
}

func (s *DeleteFunctionRequest) SetId(v int64) *DeleteFunctionRequest {
	s.Id = &v
	return s
}

func (s *DeleteFunctionRequest) SetProjectId(v int64) *DeleteFunctionRequest {
	s.ProjectId = &v
	return s
}

type DeleteFunctionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 88198F19-A36B-52A9-AE44-4518A688XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteFunctionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFunctionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFunctionResponseBody) SetRequestId(v string) *DeleteFunctionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFunctionResponseBody) SetSuccess(v bool) *DeleteFunctionResponseBody {
	s.Success = &v
	return s
}

type DeleteFunctionResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFunctionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFunctionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFunctionResponse) GoString() string {
	return s.String()
}

func (s *DeleteFunctionResponse) SetHeaders(v map[string]*string) *DeleteFunctionResponse {
	s.Headers = v
	return s
}

func (s *DeleteFunctionResponse) SetStatusCode(v int32) *DeleteFunctionResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFunctionResponse) SetBody(v *DeleteFunctionResponseBody) *DeleteFunctionResponse {
	s.Body = v
	return s
}

type DeleteLineageRelationshipRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 110xxxx:custom-table.xxxxx:maxcompute-table.project.test_big_lineage_080901:custom-sqlxx.00001
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteLineageRelationshipRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLineageRelationshipRequest) GoString() string {
	return s.String()
}

func (s *DeleteLineageRelationshipRequest) SetId(v string) *DeleteLineageRelationshipRequest {
	s.Id = &v
	return s
}

type DeleteLineageRelationshipResponseBody struct {
	// example:
	//
	// 952795279527ab****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteLineageRelationshipResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLineageRelationshipResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLineageRelationshipResponseBody) SetRequestId(v string) *DeleteLineageRelationshipResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteLineageRelationshipResponseBody) SetSuccess(v bool) *DeleteLineageRelationshipResponseBody {
	s.Success = &v
	return s
}

type DeleteLineageRelationshipResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLineageRelationshipResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLineageRelationshipResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLineageRelationshipResponse) GoString() string {
	return s.String()
}

func (s *DeleteLineageRelationshipResponse) SetHeaders(v map[string]*string) *DeleteLineageRelationshipResponse {
	s.Headers = v
	return s
}

func (s *DeleteLineageRelationshipResponse) SetStatusCode(v int32) *DeleteLineageRelationshipResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLineageRelationshipResponse) SetBody(v *DeleteLineageRelationshipResponseBody) *DeleteLineageRelationshipResponse {
	s.Body = v
	return s
}

type DeleteMetaCollectionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// category.123
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteMetaCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetaCollectionRequest) GoString() string {
	return s.String()
}

func (s *DeleteMetaCollectionRequest) SetId(v string) *DeleteMetaCollectionRequest {
	s.Id = &v
	return s
}

type DeleteMetaCollectionResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// 45D14A7A-7C28-5547-AB0A-35FBCD9DE7B5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMetaCollectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetaCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMetaCollectionResponseBody) SetRequestId(v string) *DeleteMetaCollectionResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMetaCollectionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMetaCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMetaCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetaCollectionResponse) GoString() string {
	return s.String()
}

func (s *DeleteMetaCollectionResponse) SetHeaders(v map[string]*string) *DeleteMetaCollectionResponse {
	s.Headers = v
	return s
}

func (s *DeleteMetaCollectionResponse) SetStatusCode(v int32) *DeleteMetaCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMetaCollectionResponse) SetBody(v *DeleteMetaCollectionResponseBody) *DeleteMetaCollectionResponse {
	s.Body = v
	return s
}

type DeleteNetworkRequest struct {
	// The ID of the network that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkRequest) SetId(v int64) *DeleteNetworkRequest {
	s.Id = &v
	return s
}

type DeleteNetworkResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkResponseBody) SetRequestId(v string) *DeleteNetworkResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteNetworkResponseBody) SetSuccess(v bool) *DeleteNetworkResponseBody {
	s.Success = &v
	return s
}

type DeleteNetworkResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkResponse) SetHeaders(v map[string]*string) *DeleteNetworkResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkResponse) SetStatusCode(v int32) *DeleteNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNetworkResponse) SetBody(v *DeleteNetworkResponseBody) *DeleteNetworkResponse {
	s.Body = v
	return s
}

type DeleteNodeRequest struct {
	// The ID of the node.
	//
	// This parameter is required.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.
	//
	// You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteNodeRequest) SetId(v int64) *DeleteNodeRequest {
	s.Id = &v
	return s
}

func (s *DeleteNodeRequest) SetProjectId(v int64) *DeleteNodeRequest {
	s.ProjectId = &v
	return s
}

type DeleteNodeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// A1E54497-5122-505E-91C6-BAC14980XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// true\\
	//
	// false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNodeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNodeResponseBody) SetRequestId(v string) *DeleteNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteNodeResponseBody) SetSuccess(v bool) *DeleteNodeResponseBody {
	s.Success = &v
	return s
}

type DeleteNodeResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteNodeResponse) SetHeaders(v map[string]*string) *DeleteNodeResponse {
	s.Headers = v
	return s
}

func (s *DeleteNodeResponse) SetStatusCode(v int32) *DeleteNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNodeResponse) SetBody(v *DeleteNodeResponseBody) *DeleteNodeResponse {
	s.Body = v
	return s
}

type DeleteProjectRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectRequest) GoString() string {
	return s.String()
}

func (s *DeleteProjectRequest) SetId(v int64) *DeleteProjectRequest {
	s.Id = &v
	return s
}

type DeleteProjectResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// AFBB799F-8578-51C5-A766-E922EDB8XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProjectResponseBody) SetRequestId(v string) *DeleteProjectResponseBody {
	s.RequestId = &v
	return s
}

type DeleteProjectResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectResponse) GoString() string {
	return s.String()
}

func (s *DeleteProjectResponse) SetHeaders(v map[string]*string) *DeleteProjectResponse {
	s.Headers = v
	return s
}

func (s *DeleteProjectResponse) SetStatusCode(v int32) *DeleteProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteProjectResponse) SetBody(v *DeleteProjectResponseBody) *DeleteProjectResponse {
	s.Body = v
	return s
}

type DeleteProjectMemberRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 534752
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the **Tenant Members and Roles*	- page, view the ID of the account used by the member in the workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123422344899
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DeleteProjectMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectMemberRequest) GoString() string {
	return s.String()
}

func (s *DeleteProjectMemberRequest) SetProjectId(v int64) *DeleteProjectMemberRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteProjectMemberRequest) SetUserId(v string) *DeleteProjectMemberRequest {
	s.UserId = &v
	return s
}

type DeleteProjectMemberResponseBody struct {
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 1FF0465F-209C-5964-8F30-FAF21B677CC6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteProjectMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectMemberResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProjectMemberResponseBody) SetRequestId(v string) *DeleteProjectMemberResponseBody {
	s.RequestId = &v
	return s
}

type DeleteProjectMemberResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteProjectMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteProjectMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectMemberResponse) GoString() string {
	return s.String()
}

func (s *DeleteProjectMemberResponse) SetHeaders(v map[string]*string) *DeleteProjectMemberResponse {
	s.Headers = v
	return s
}

func (s *DeleteProjectMemberResponse) SetStatusCode(v int32) *DeleteProjectMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteProjectMemberResponse) SetBody(v *DeleteProjectMemberResponseBody) *DeleteProjectMemberResponse {
	s.Body = v
	return s
}

type DeleteResourceRequest struct {
	// The ID of the file resource.
	//
	// This parameter is required.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID. You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteResourceRequest) SetId(v int64) *DeleteResourceRequest {
	s.Id = &v
	return s
}

func (s *DeleteResourceRequest) SetProjectId(v int64) *DeleteResourceRequest {
	s.ProjectId = &v
	return s
}

type DeleteResourceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 88198F19-A36B-52A9-AE44-4518A688XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteResourceResponseBody) SetRequestId(v string) *DeleteResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteResourceResponseBody) SetSuccess(v bool) *DeleteResourceResponseBody {
	s.Success = &v
	return s
}

type DeleteResourceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteResourceResponse) SetHeaders(v map[string]*string) *DeleteResourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteResourceResponse) SetStatusCode(v int32) *DeleteResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteResourceResponse) SetBody(v *DeleteResourceResponseBody) *DeleteResourceResponse {
	s.Body = v
	return s
}

type DeleteResourceGroupRequest struct {
	// The ID of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteResourceGroupRequest) SetId(v string) *DeleteResourceGroupRequest {
	s.Id = &v
	return s
}

type DeleteResourceGroupResponseBody struct {
	// The request ID. You can use the ID to locate logs and troubleshoot issues.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteResourceGroupResponseBody) SetRequestId(v string) *DeleteResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteResourceGroupResponseBody) SetSuccess(v bool) *DeleteResourceGroupResponseBody {
	s.Success = &v
	return s
}

type DeleteResourceGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteResourceGroupResponse) SetHeaders(v map[string]*string) *DeleteResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteResourceGroupResponse) SetStatusCode(v int32) *DeleteResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteResourceGroupResponse) SetBody(v *DeleteResourceGroupResponseBody) *DeleteResourceGroupResponse {
	s.Body = v
	return s
}

type DeleteRouteRequest struct {
	// The route ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteRequest) GoString() string {
	return s.String()
}

func (s *DeleteRouteRequest) SetId(v int64) *DeleteRouteRequest {
	s.Id = &v
	return s
}

type DeleteRouteResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRouteResponseBody) SetRequestId(v string) *DeleteRouteResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRouteResponseBody) SetSuccess(v bool) *DeleteRouteResponseBody {
	s.Success = &v
	return s
}

type DeleteRouteResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRouteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRouteResponse) GoString() string {
	return s.String()
}

func (s *DeleteRouteResponse) SetHeaders(v map[string]*string) *DeleteRouteResponse {
	s.Headers = v
	return s
}

func (s *DeleteRouteResponse) SetStatusCode(v int32) *DeleteRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRouteResponse) SetBody(v *DeleteRouteResponseBody) *DeleteRouteResponse {
	s.Body = v
	return s
}

type DeleteTaskRequest struct {
	// The task ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The environment of the workspace.
	//
	// Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s DeleteTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteTaskRequest) SetId(v int64) *DeleteTaskRequest {
	s.Id = &v
	return s
}

func (s *DeleteTaskRequest) SetProjectEnv(v string) *DeleteTaskRequest {
	s.ProjectEnv = &v
	return s
}

type DeleteTaskResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTaskResponseBody) SetRequestId(v string) *DeleteTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTaskResponseBody) SetSuccess(v bool) *DeleteTaskResponseBody {
	s.Success = &v
	return s
}

type DeleteTaskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteTaskResponse) SetHeaders(v map[string]*string) *DeleteTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteTaskResponse) SetStatusCode(v int32) *DeleteTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTaskResponse) SetBody(v *DeleteTaskResponseBody) *DeleteTaskResponse {
	s.Body = v
	return s
}

type DeleteWorkflowRequest struct {
	// The unique code of the client. This parameter is used to create a workflow asynchronously and implement the idempotence of the workflow. If you do not specify this parameter when you create the workflow, the system automatically generates a unique code. The unique code is uniquely associated with the workflow ID. If you specify this parameter when you update or delete the workflow, the value of this parameter must be the unique code that is used to create the workflow.
	//
	// example:
	//
	// Workflow_0bc5213917368545132902xxxxxxxx
	ClientUniqueCode *string `json:"ClientUniqueCode,omitempty" xml:"ClientUniqueCode,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The workflow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkflowRequest) GoString() string {
	return s.String()
}

func (s *DeleteWorkflowRequest) SetClientUniqueCode(v string) *DeleteWorkflowRequest {
	s.ClientUniqueCode = &v
	return s
}

func (s *DeleteWorkflowRequest) SetEnvType(v string) *DeleteWorkflowRequest {
	s.EnvType = &v
	return s
}

func (s *DeleteWorkflowRequest) SetId(v int64) *DeleteWorkflowRequest {
	s.Id = &v
	return s
}

type DeleteWorkflowResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteWorkflowResponseBody) SetRequestId(v string) *DeleteWorkflowResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteWorkflowResponseBody) SetSuccess(v bool) *DeleteWorkflowResponseBody {
	s.Success = &v
	return s
}

type DeleteWorkflowResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkflowResponse) GoString() string {
	return s.String()
}

func (s *DeleteWorkflowResponse) SetHeaders(v map[string]*string) *DeleteWorkflowResponse {
	s.Headers = v
	return s
}

func (s *DeleteWorkflowResponse) SetStatusCode(v int32) *DeleteWorkflowResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteWorkflowResponse) SetBody(v *DeleteWorkflowResponseBody) *DeleteWorkflowResponse {
	s.Body = v
	return s
}

type DeleteWorkflowDefinitionRequest struct {
	// The ID of the workflow.
	//
	// This parameter is required.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteWorkflowDefinitionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkflowDefinitionRequest) GoString() string {
	return s.String()
}

func (s *DeleteWorkflowDefinitionRequest) SetId(v int64) *DeleteWorkflowDefinitionRequest {
	s.Id = &v
	return s
}

func (s *DeleteWorkflowDefinitionRequest) SetProjectId(v int64) *DeleteWorkflowDefinitionRequest {
	s.ProjectId = &v
	return s
}

type DeleteWorkflowDefinitionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// B17730C0-D959-548A-AE23-E754177CXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteWorkflowDefinitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkflowDefinitionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteWorkflowDefinitionResponseBody) SetRequestId(v string) *DeleteWorkflowDefinitionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteWorkflowDefinitionResponseBody) SetSuccess(v bool) *DeleteWorkflowDefinitionResponseBody {
	s.Success = &v
	return s
}

type DeleteWorkflowDefinitionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteWorkflowDefinitionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteWorkflowDefinitionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkflowDefinitionResponse) GoString() string {
	return s.String()
}

func (s *DeleteWorkflowDefinitionResponse) SetHeaders(v map[string]*string) *DeleteWorkflowDefinitionResponse {
	s.Headers = v
	return s
}

func (s *DeleteWorkflowDefinitionResponse) SetStatusCode(v int32) *DeleteWorkflowDefinitionResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteWorkflowDefinitionResponse) SetBody(v *DeleteWorkflowDefinitionResponseBody) *DeleteWorkflowDefinitionResponse {
	s.Body = v
	return s
}

type DeployFileRequest struct {
	// example:
	//
	// First release task
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// 10000001
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// 2000001
	NodeId *int64 `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s DeployFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployFileRequest) GoString() string {
	return s.String()
}

func (s *DeployFileRequest) SetComment(v string) *DeployFileRequest {
	s.Comment = &v
	return s
}

func (s *DeployFileRequest) SetFileId(v int64) *DeployFileRequest {
	s.FileId = &v
	return s
}

func (s *DeployFileRequest) SetNodeId(v int64) *DeployFileRequest {
	s.NodeId = &v
	return s
}

func (s *DeployFileRequest) SetProjectId(v int64) *DeployFileRequest {
	s.ProjectId = &v
	return s
}

func (s *DeployFileRequest) SetProjectIdentifier(v string) *DeployFileRequest {
	s.ProjectIdentifier = &v
	return s
}

type DeployFileResponseBody struct {
	// example:
	//
	// 30000001
	Data *int64 `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeployFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeployFileResponseBody) GoString() string {
	return s.String()
}

func (s *DeployFileResponseBody) SetData(v int64) *DeployFileResponseBody {
	s.Data = &v
	return s
}

func (s *DeployFileResponseBody) SetErrorCode(v string) *DeployFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeployFileResponseBody) SetErrorMessage(v string) *DeployFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeployFileResponseBody) SetHttpStatusCode(v int32) *DeployFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeployFileResponseBody) SetRequestId(v string) *DeployFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeployFileResponseBody) SetSuccess(v bool) *DeployFileResponseBody {
	s.Success = &v
	return s
}

type DeployFileResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeployFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeployFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployFileResponse) GoString() string {
	return s.String()
}

func (s *DeployFileResponse) SetHeaders(v map[string]*string) *DeployFileResponse {
	s.Headers = v
	return s
}

func (s *DeployFileResponse) SetStatusCode(v int32) *DeployFileResponse {
	s.StatusCode = &v
	return s
}

func (s *DeployFileResponse) SetBody(v *DeployFileResponseBody) *DeployFileResponse {
	s.Body = v
	return s
}

type DetachDataQualityRulesFromEvaluationTaskRequest struct {
	// The ID of the data quality monitoring task that is associated with the rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	DataQualityEvaluationTaskId *int64 `json:"DataQualityEvaluationTaskId,omitempty" xml:"DataQualityEvaluationTaskId,omitempty"`
	// The IDs of the monitoring rules.
	//
	// This parameter is required.
	DataQualityRuleIds []*int64 `json:"DataQualityRuleIds,omitempty" xml:"DataQualityRuleIds,omitempty" type:"Repeated"`
	// The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the workspace configuration page to obtain the workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10002
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DetachDataQualityRulesFromEvaluationTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachDataQualityRulesFromEvaluationTaskRequest) GoString() string {
	return s.String()
}

func (s *DetachDataQualityRulesFromEvaluationTaskRequest) SetDataQualityEvaluationTaskId(v int64) *DetachDataQualityRulesFromEvaluationTaskRequest {
	s.DataQualityEvaluationTaskId = &v
	return s
}

func (s *DetachDataQualityRulesFromEvaluationTaskRequest) SetDataQualityRuleIds(v []*int64) *DetachDataQualityRulesFromEvaluationTaskRequest {
	s.DataQualityRuleIds = v
	return s
}

func (s *DetachDataQualityRulesFromEvaluationTaskRequest) SetProjectId(v int64) *DetachDataQualityRulesFromEvaluationTaskRequest {
	s.ProjectId = &v
	return s
}

type DetachDataQualityRulesFromEvaluationTaskShrinkRequest struct {
	// The ID of the data quality monitoring task that is associated with the rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	DataQualityEvaluationTaskId *int64 `json:"DataQualityEvaluationTaskId,omitempty" xml:"DataQualityEvaluationTaskId,omitempty"`
	// The IDs of the monitoring rules.
	//
	// This parameter is required.
	DataQualityRuleIdsShrink *string `json:"DataQualityRuleIds,omitempty" xml:"DataQualityRuleIds,omitempty"`
	// The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the workspace configuration page to obtain the workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10002
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DetachDataQualityRulesFromEvaluationTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachDataQualityRulesFromEvaluationTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *DetachDataQualityRulesFromEvaluationTaskShrinkRequest) SetDataQualityEvaluationTaskId(v int64) *DetachDataQualityRulesFromEvaluationTaskShrinkRequest {
	s.DataQualityEvaluationTaskId = &v
	return s
}

func (s *DetachDataQualityRulesFromEvaluationTaskShrinkRequest) SetDataQualityRuleIdsShrink(v string) *DetachDataQualityRulesFromEvaluationTaskShrinkRequest {
	s.DataQualityRuleIdsShrink = &v
	return s
}

func (s *DetachDataQualityRulesFromEvaluationTaskShrinkRequest) SetProjectId(v int64) *DetachDataQualityRulesFromEvaluationTaskShrinkRequest {
	s.ProjectId = &v
	return s
}

type DetachDataQualityRulesFromEvaluationTaskResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// 8abcb91f-d266-4073-b907-2ed670378ed1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Whether the call is successful. The values are as follows:
	//
	// - true: The call is successful.
	//
	// - false: the call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DetachDataQualityRulesFromEvaluationTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachDataQualityRulesFromEvaluationTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DetachDataQualityRulesFromEvaluationTaskResponseBody) SetRequestId(v string) *DetachDataQualityRulesFromEvaluationTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetachDataQualityRulesFromEvaluationTaskResponseBody) SetSuccess(v bool) *DetachDataQualityRulesFromEvaluationTaskResponseBody {
	s.Success = &v
	return s
}

type DetachDataQualityRulesFromEvaluationTaskResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachDataQualityRulesFromEvaluationTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachDataQualityRulesFromEvaluationTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachDataQualityRulesFromEvaluationTaskResponse) GoString() string {
	return s.String()
}

func (s *DetachDataQualityRulesFromEvaluationTaskResponse) SetHeaders(v map[string]*string) *DetachDataQualityRulesFromEvaluationTaskResponse {
	s.Headers = v
	return s
}

func (s *DetachDataQualityRulesFromEvaluationTaskResponse) SetStatusCode(v int32) *DetachDataQualityRulesFromEvaluationTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachDataQualityRulesFromEvaluationTaskResponse) SetBody(v *DetachDataQualityRulesFromEvaluationTaskResponseBody) *DetachDataQualityRulesFromEvaluationTaskResponse {
	s.Body = v
	return s
}

type DissociateProjectFromResourceGroupRequest struct {
	// The ID of the workspace from which you want to disassociate the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The ID of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DissociateProjectFromResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DissociateProjectFromResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *DissociateProjectFromResourceGroupRequest) SetProjectId(v int64) *DissociateProjectFromResourceGroupRequest {
	s.ProjectId = &v
	return s
}

func (s *DissociateProjectFromResourceGroupRequest) SetResourceGroupId(v string) *DissociateProjectFromResourceGroupRequest {
	s.ResourceGroupId = &v
	return s
}

type DissociateProjectFromResourceGroupResponseBody struct {
	// The request ID. You can use the ID to locate logs and troubleshoot issues.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DissociateProjectFromResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DissociateProjectFromResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DissociateProjectFromResourceGroupResponseBody) SetRequestId(v string) *DissociateProjectFromResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DissociateProjectFromResourceGroupResponseBody) SetSuccess(v bool) *DissociateProjectFromResourceGroupResponseBody {
	s.Success = &v
	return s
}

type DissociateProjectFromResourceGroupResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DissociateProjectFromResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DissociateProjectFromResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DissociateProjectFromResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *DissociateProjectFromResourceGroupResponse) SetHeaders(v map[string]*string) *DissociateProjectFromResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *DissociateProjectFromResourceGroupResponse) SetStatusCode(v int32) *DissociateProjectFromResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DissociateProjectFromResourceGroupResponse) SetBody(v *DissociateProjectFromResourceGroupResponseBody) *DissociateProjectFromResourceGroupResponse {
	s.Body = v
	return s
}

type EstablishRelationTableToBusinessRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1000001
	BusinessId *string `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	// example:
	//
	// 2eb6f9****
	FolderId *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// odps.dw_project.tb1
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s EstablishRelationTableToBusinessRequest) String() string {
	return tea.Prettify(s)
}

func (s EstablishRelationTableToBusinessRequest) GoString() string {
	return s.String()
}

func (s *EstablishRelationTableToBusinessRequest) SetBusinessId(v string) *EstablishRelationTableToBusinessRequest {
	s.BusinessId = &v
	return s
}

func (s *EstablishRelationTableToBusinessRequest) SetFolderId(v string) *EstablishRelationTableToBusinessRequest {
	s.FolderId = &v
	return s
}

func (s *EstablishRelationTableToBusinessRequest) SetProjectId(v int64) *EstablishRelationTableToBusinessRequest {
	s.ProjectId = &v
	return s
}

func (s *EstablishRelationTableToBusinessRequest) SetProjectIdentifier(v string) *EstablishRelationTableToBusinessRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *EstablishRelationTableToBusinessRequest) SetTableGuid(v string) *EstablishRelationTableToBusinessRequest {
	s.TableGuid = &v
	return s
}

type EstablishRelationTableToBusinessResponseBody struct {
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s EstablishRelationTableToBusinessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EstablishRelationTableToBusinessResponseBody) GoString() string {
	return s.String()
}

func (s *EstablishRelationTableToBusinessResponseBody) SetErrorCode(v string) *EstablishRelationTableToBusinessResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *EstablishRelationTableToBusinessResponseBody) SetErrorMessage(v string) *EstablishRelationTableToBusinessResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *EstablishRelationTableToBusinessResponseBody) SetHttpStatusCode(v int32) *EstablishRelationTableToBusinessResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *EstablishRelationTableToBusinessResponseBody) SetRequestId(v string) *EstablishRelationTableToBusinessResponseBody {
	s.RequestId = &v
	return s
}

func (s *EstablishRelationTableToBusinessResponseBody) SetSuccess(v bool) *EstablishRelationTableToBusinessResponseBody {
	s.Success = &v
	return s
}

type EstablishRelationTableToBusinessResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EstablishRelationTableToBusinessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EstablishRelationTableToBusinessResponse) String() string {
	return tea.Prettify(s)
}

func (s EstablishRelationTableToBusinessResponse) GoString() string {
	return s.String()
}

func (s *EstablishRelationTableToBusinessResponse) SetHeaders(v map[string]*string) *EstablishRelationTableToBusinessResponse {
	s.Headers = v
	return s
}

func (s *EstablishRelationTableToBusinessResponse) SetStatusCode(v int32) *EstablishRelationTableToBusinessResponse {
	s.StatusCode = &v
	return s
}

func (s *EstablishRelationTableToBusinessResponse) SetBody(v *EstablishRelationTableToBusinessResponseBody) *EstablishRelationTableToBusinessResponse {
	s.Body = v
	return s
}

type ExecPipelineRunStageRequest struct {
	// The code of the stage in the process. You can call the GetDeployment operation to query the code.
	//
	// This parameter is required.
	//
	// example:
	//
	// DEV_CHECK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the process.
	//
	// This parameter is required.
	//
	// example:
	//
	// a7ef0634-20ec-4a7c-a214-54020f91XXXX
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ExecPipelineRunStageRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecPipelineRunStageRequest) GoString() string {
	return s.String()
}

func (s *ExecPipelineRunStageRequest) SetCode(v string) *ExecPipelineRunStageRequest {
	s.Code = &v
	return s
}

func (s *ExecPipelineRunStageRequest) SetId(v string) *ExecPipelineRunStageRequest {
	s.Id = &v
	return s
}

func (s *ExecPipelineRunStageRequest) SetProjectId(v int64) *ExecPipelineRunStageRequest {
	s.ProjectId = &v
	return s
}

type ExecPipelineRunStageResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// AFBB799F-8578-51C5-A766-E922EDB8XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	//     **
	//
	//     **Note:*	- The value of this parameter indicates only whether the stage is triggered but does not indicate whether the execution of the stage is successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExecPipelineRunStageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExecPipelineRunStageResponseBody) GoString() string {
	return s.String()
}

func (s *ExecPipelineRunStageResponseBody) SetRequestId(v string) *ExecPipelineRunStageResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExecPipelineRunStageResponseBody) SetSuccess(v bool) *ExecPipelineRunStageResponseBody {
	s.Success = &v
	return s
}

type ExecPipelineRunStageResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExecPipelineRunStageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExecPipelineRunStageResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecPipelineRunStageResponse) GoString() string {
	return s.String()
}

func (s *ExecPipelineRunStageResponse) SetHeaders(v map[string]*string) *ExecPipelineRunStageResponse {
	s.Headers = v
	return s
}

func (s *ExecPipelineRunStageResponse) SetStatusCode(v int32) *ExecPipelineRunStageResponse {
	s.StatusCode = &v
	return s
}

func (s *ExecPipelineRunStageResponse) SetBody(v *ExecPipelineRunStageResponseBody) *ExecPipelineRunStageResponse {
	s.Body = v
	return s
}

type ExecuteAdhocWorkflowInstanceRequest struct {
	// The data timestamp.
	//
	// example:
	//
	// 1710239005403
	BizDate *int64 `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The name of the workflow instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// WorkflowInstance1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the owner.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The tasks.
	//
	// This parameter is required.
	Tasks []*ExecuteAdhocWorkflowInstanceRequestTasks `json:"Tasks,omitempty" xml:"Tasks,omitempty" type:"Repeated"`
}

func (s ExecuteAdhocWorkflowInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceRequest) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceRequest) SetBizDate(v int64) *ExecuteAdhocWorkflowInstanceRequest {
	s.BizDate = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequest) SetEnvType(v string) *ExecuteAdhocWorkflowInstanceRequest {
	s.EnvType = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequest) SetName(v string) *ExecuteAdhocWorkflowInstanceRequest {
	s.Name = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequest) SetOwner(v string) *ExecuteAdhocWorkflowInstanceRequest {
	s.Owner = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequest) SetProjectId(v int64) *ExecuteAdhocWorkflowInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequest) SetTasks(v []*ExecuteAdhocWorkflowInstanceRequestTasks) *ExecuteAdhocWorkflowInstanceRequest {
	s.Tasks = v
	return s
}

type ExecuteAdhocWorkflowInstanceRequestTasks struct {
	// The unique code of the client. This code uniquely identifies a task.
	//
	// This parameter is required.
	//
	// example:
	//
	// Task_0bc5213917368545132902xxxxxxxx
	ClientUniqueCode *string `json:"ClientUniqueCode,omitempty" xml:"ClientUniqueCode,omitempty"`
	// The information about the associated data source.
	DataSource *ExecuteAdhocWorkflowInstanceRequestTasksDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The dependency information.
	Dependencies []*ExecuteAdhocWorkflowInstanceRequestTasksDependencies `json:"Dependencies,omitempty" xml:"Dependencies,omitempty" type:"Repeated"`
	// The input information.
	Inputs *ExecuteAdhocWorkflowInstanceRequestTasksInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Struct"`
	// The name of the task.
	//
	// This parameter is required.
	//
	// example:
	//
	// SQL node.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output information.
	Outputs *ExecuteAdhocWorkflowInstanceRequestTasksOutputs `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Struct"`
	// The account ID of the owner.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The configurations of the runtime environment, such as the resource group information.
	//
	// This parameter is required.
	RuntimeResource *ExecuteAdhocWorkflowInstanceRequestTasksRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The script information.
	Script *ExecuteAdhocWorkflowInstanceRequestTasksScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The type of the task.
	//
	// This parameter is required.
	//
	// example:
	//
	// ODPS_SQL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ExecuteAdhocWorkflowInstanceRequestTasks) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceRequestTasks) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasks) SetClientUniqueCode(v string) *ExecuteAdhocWorkflowInstanceRequestTasks {
	s.ClientUniqueCode = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasks) SetDataSource(v *ExecuteAdhocWorkflowInstanceRequestTasksDataSource) *ExecuteAdhocWorkflowInstanceRequestTasks {
	s.DataSource = v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasks) SetDependencies(v []*ExecuteAdhocWorkflowInstanceRequestTasksDependencies) *ExecuteAdhocWorkflowInstanceRequestTasks {
	s.Dependencies = v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasks) SetInputs(v *ExecuteAdhocWorkflowInstanceRequestTasksInputs) *ExecuteAdhocWorkflowInstanceRequestTasks {
	s.Inputs = v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasks) SetName(v string) *ExecuteAdhocWorkflowInstanceRequestTasks {
	s.Name = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasks) SetOutputs(v *ExecuteAdhocWorkflowInstanceRequestTasksOutputs) *ExecuteAdhocWorkflowInstanceRequestTasks {
	s.Outputs = v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasks) SetOwner(v string) *ExecuteAdhocWorkflowInstanceRequestTasks {
	s.Owner = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasks) SetRuntimeResource(v *ExecuteAdhocWorkflowInstanceRequestTasksRuntimeResource) *ExecuteAdhocWorkflowInstanceRequestTasks {
	s.RuntimeResource = v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasks) SetScript(v *ExecuteAdhocWorkflowInstanceRequestTasksScript) *ExecuteAdhocWorkflowInstanceRequestTasks {
	s.Script = v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasks) SetTimeout(v int32) *ExecuteAdhocWorkflowInstanceRequestTasks {
	s.Timeout = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasks) SetType(v string) *ExecuteAdhocWorkflowInstanceRequestTasks {
	s.Type = &v
	return s
}

type ExecuteAdhocWorkflowInstanceRequestTasksDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksDataSource) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksDataSource) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksDataSource) SetName(v string) *ExecuteAdhocWorkflowInstanceRequestTasksDataSource {
	s.Name = &v
	return s
}

type ExecuteAdhocWorkflowInstanceRequestTasksDependencies struct {
	// The identifier of the output of the ancestor task.
	//
	// example:
	//
	// pre.odps_sql_demo_0
	UpstreamOutput *string `json:"UpstreamOutput,omitempty" xml:"UpstreamOutput,omitempty"`
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksDependencies) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksDependencies) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksDependencies) SetUpstreamOutput(v string) *ExecuteAdhocWorkflowInstanceRequestTasksDependencies {
	s.UpstreamOutput = &v
	return s
}

type ExecuteAdhocWorkflowInstanceRequestTasksInputs struct {
	// The variables.
	Variables []*ExecuteAdhocWorkflowInstanceRequestTasksInputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksInputs) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksInputs) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksInputs) SetVariables(v []*ExecuteAdhocWorkflowInstanceRequestTasksInputsVariables) *ExecuteAdhocWorkflowInstanceRequestTasksInputs {
	s.Variables = v
	return s
}

type ExecuteAdhocWorkflowInstanceRequestTasksInputsVariables struct {
	// The name of the variable.
	//
	// example:
	//
	// key1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the variable. You must configure this parameter in the `The ancestor output: The output variable name of the ancestor task` format.
	//
	// example:
	//
	// Value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksInputsVariables) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksInputsVariables) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksInputsVariables) SetName(v string) *ExecuteAdhocWorkflowInstanceRequestTasksInputsVariables {
	s.Name = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksInputsVariables) SetValue(v string) *ExecuteAdhocWorkflowInstanceRequestTasksInputsVariables {
	s.Value = &v
	return s
}

type ExecuteAdhocWorkflowInstanceRequestTasksOutputs struct {
	// The task outputs.
	TaskOutputs []*ExecuteAdhocWorkflowInstanceRequestTasksOutputsTaskOutputs `json:"TaskOutputs,omitempty" xml:"TaskOutputs,omitempty" type:"Repeated"`
	// The variables.
	Variables []*ExecuteAdhocWorkflowInstanceRequestTasksOutputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksOutputs) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksOutputs) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksOutputs) SetTaskOutputs(v []*ExecuteAdhocWorkflowInstanceRequestTasksOutputsTaskOutputs) *ExecuteAdhocWorkflowInstanceRequestTasksOutputs {
	s.TaskOutputs = v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksOutputs) SetVariables(v []*ExecuteAdhocWorkflowInstanceRequestTasksOutputsVariables) *ExecuteAdhocWorkflowInstanceRequestTasksOutputs {
	s.Variables = v
	return s
}

type ExecuteAdhocWorkflowInstanceRequestTasksOutputsTaskOutputs struct {
	// The identifier of the output.
	//
	// example:
	//
	// pre.odps_sql_demo_0
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksOutputsTaskOutputs) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksOutputsTaskOutputs) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksOutputsTaskOutputs) SetOutput(v string) *ExecuteAdhocWorkflowInstanceRequestTasksOutputsTaskOutputs {
	s.Output = &v
	return s
}

type ExecuteAdhocWorkflowInstanceRequestTasksOutputsVariables struct {
	// The name of the variable.
	//
	// example:
	//
	// key1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type. Valid values:
	//
	// 	- System
	//
	// 	- Constant
	//
	// 	- NodeOutput
	//
	// 	- PassThrough
	//
	// example:
	//
	// Constant
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksOutputsVariables) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksOutputsVariables) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksOutputsVariables) SetName(v string) *ExecuteAdhocWorkflowInstanceRequestTasksOutputsVariables {
	s.Name = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksOutputsVariables) SetType(v string) *ExecuteAdhocWorkflowInstanceRequestTasksOutputsVariables {
	s.Type = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksOutputsVariables) SetValue(v string) *ExecuteAdhocWorkflowInstanceRequestTasksOutputsVariables {
	s.Value = &v
	return s
}

type ExecuteAdhocWorkflowInstanceRequestTasksRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// This parameter is required.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksRuntimeResource) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksRuntimeResource) SetCu(v string) *ExecuteAdhocWorkflowInstanceRequestTasksRuntimeResource {
	s.Cu = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksRuntimeResource) SetImage(v string) *ExecuteAdhocWorkflowInstanceRequestTasksRuntimeResource {
	s.Image = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksRuntimeResource) SetResourceGroupId(v string) *ExecuteAdhocWorkflowInstanceRequestTasksRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ExecuteAdhocWorkflowInstanceRequestTasksScript struct {
	// The script content.
	//
	// example:
	//
	// echo "helloWorld"
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The script parameters.
	//
	// example:
	//
	// para1=$bizdate
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksScript) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceRequestTasksScript) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksScript) SetContent(v string) *ExecuteAdhocWorkflowInstanceRequestTasksScript {
	s.Content = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceRequestTasksScript) SetParameters(v string) *ExecuteAdhocWorkflowInstanceRequestTasksScript {
	s.Parameters = &v
	return s
}

type ExecuteAdhocWorkflowInstanceShrinkRequest struct {
	// The data timestamp.
	//
	// example:
	//
	// 1710239005403
	BizDate *int64 `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The name of the workflow instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// WorkflowInstance1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the owner.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The tasks.
	//
	// This parameter is required.
	TasksShrink *string `json:"Tasks,omitempty" xml:"Tasks,omitempty"`
}

func (s ExecuteAdhocWorkflowInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceShrinkRequest) SetBizDate(v int64) *ExecuteAdhocWorkflowInstanceShrinkRequest {
	s.BizDate = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceShrinkRequest) SetEnvType(v string) *ExecuteAdhocWorkflowInstanceShrinkRequest {
	s.EnvType = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceShrinkRequest) SetName(v string) *ExecuteAdhocWorkflowInstanceShrinkRequest {
	s.Name = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceShrinkRequest) SetOwner(v string) *ExecuteAdhocWorkflowInstanceShrinkRequest {
	s.Owner = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceShrinkRequest) SetProjectId(v int64) *ExecuteAdhocWorkflowInstanceShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceShrinkRequest) SetTasksShrink(v string) *ExecuteAdhocWorkflowInstanceShrinkRequest {
	s.TasksShrink = &v
	return s
}

type ExecuteAdhocWorkflowInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The workflow instance ID.
	//
	// example:
	//
	// 1234
	WorkflowInstanceId *int64 `json:"WorkflowInstanceId,omitempty" xml:"WorkflowInstanceId,omitempty"`
}

func (s ExecuteAdhocWorkflowInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceResponseBody) SetRequestId(v string) *ExecuteAdhocWorkflowInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceResponseBody) SetWorkflowInstanceId(v int64) *ExecuteAdhocWorkflowInstanceResponseBody {
	s.WorkflowInstanceId = &v
	return s
}

type ExecuteAdhocWorkflowInstanceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExecuteAdhocWorkflowInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExecuteAdhocWorkflowInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecuteAdhocWorkflowInstanceResponse) GoString() string {
	return s.String()
}

func (s *ExecuteAdhocWorkflowInstanceResponse) SetHeaders(v map[string]*string) *ExecuteAdhocWorkflowInstanceResponse {
	s.Headers = v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceResponse) SetStatusCode(v int32) *ExecuteAdhocWorkflowInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ExecuteAdhocWorkflowInstanceResponse) SetBody(v *ExecuteAdhocWorkflowInstanceResponseBody) *ExecuteAdhocWorkflowInstanceResponse {
	s.Body = v
	return s
}

type GetAlertRuleRequest struct {
	// The rule ID.
	//
	// example:
	//
	// 28547072
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetAlertRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleRequest) GoString() string {
	return s.String()
}

func (s *GetAlertRuleRequest) SetId(v string) *GetAlertRuleRequest {
	s.Id = &v
	return s
}

type GetAlertRuleResponseBody struct {
	// The information about the rule.
	AlertRule *GetAlertRuleResponseBodyAlertRule `json:"AlertRule,omitempty" xml:"AlertRule,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 8abcb91f-d266-4073-b907-2ed670378ed1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAlertRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBody) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBody) SetAlertRule(v *GetAlertRuleResponseBodyAlertRule) *GetAlertRuleResponseBody {
	s.AlertRule = v
	return s
}

func (s *GetAlertRuleResponseBody) SetRequestId(v string) *GetAlertRuleResponseBody {
	s.RequestId = &v
	return s
}

type GetAlertRuleResponseBodyAlertRule struct {
	// Indicates whether the rule is enabled.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The rule ID.
	//
	// example:
	//
	// 16035
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the rule.
	//
	// example:
	//
	// error_rule
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configuration for the alert notification.
	Notification *GetAlertRuleResponseBodyAlertRuleNotification `json:"Notification,omitempty" xml:"Notification,omitempty" type:"Struct"`
	// The ID of the Alibaba Cloud account used by the owner of the rule.
	//
	// example:
	//
	// 279961421580845157
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The alert triggering condition.
	TriggerCondition *GetAlertRuleResponseBodyAlertRuleTriggerCondition `json:"TriggerCondition,omitempty" xml:"TriggerCondition,omitempty" type:"Struct"`
}

func (s GetAlertRuleResponseBodyAlertRule) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRule) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRule) SetEnabled(v bool) *GetAlertRuleResponseBodyAlertRule {
	s.Enabled = &v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRule) SetId(v int64) *GetAlertRuleResponseBodyAlertRule {
	s.Id = &v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRule) SetName(v string) *GetAlertRuleResponseBodyAlertRule {
	s.Name = &v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRule) SetNotification(v *GetAlertRuleResponseBodyAlertRuleNotification) *GetAlertRuleResponseBodyAlertRule {
	s.Notification = v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRule) SetOwner(v string) *GetAlertRuleResponseBodyAlertRule {
	s.Owner = &v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRule) SetTriggerCondition(v *GetAlertRuleResponseBodyAlertRuleTriggerCondition) *GetAlertRuleResponseBodyAlertRule {
	s.TriggerCondition = v
	return s
}

type GetAlertRuleResponseBodyAlertRuleNotification struct {
	// The alert notification channels.
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
	// The interval at which an alert notification is sent. Unit: minutes. Valid values: [5,10000].
	//
	// example:
	//
	// 30
	IntervalInMinutes *int32 `json:"IntervalInMinutes,omitempty" xml:"IntervalInMinutes,omitempty"`
	// The maximum number of times an alert notification can be sent within a calendar day. Valid values: [1, 10000].
	//
	// example:
	//
	// 3
	Maximum *int32 `json:"Maximum,omitempty" xml:"Maximum,omitempty"`
	// The alert recipients.
	Receivers []*GetAlertRuleResponseBodyAlertRuleNotificationReceivers `json:"Receivers,omitempty" xml:"Receivers,omitempty" type:"Repeated"`
	// The end time for silence. The time is in the HH:mm:ss format.
	//
	// example:
	//
	// 00:00:00
	SilenceEndTime *string `json:"SilenceEndTime,omitempty" xml:"SilenceEndTime,omitempty"`
	// The start time for silence. The time is in the HH:mm:ss format.
	//
	// example:
	//
	// 00:00:00
	SilenceStartTime *string `json:"SilenceStartTime,omitempty" xml:"SilenceStartTime,omitempty"`
}

func (s GetAlertRuleResponseBodyAlertRuleNotification) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRuleNotification) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRuleNotification) SetChannels(v []*string) *GetAlertRuleResponseBodyAlertRuleNotification {
	s.Channels = v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleNotification) SetIntervalInMinutes(v int32) *GetAlertRuleResponseBodyAlertRuleNotification {
	s.IntervalInMinutes = &v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleNotification) SetMaximum(v int32) *GetAlertRuleResponseBodyAlertRuleNotification {
	s.Maximum = &v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleNotification) SetReceivers(v []*GetAlertRuleResponseBodyAlertRuleNotificationReceivers) *GetAlertRuleResponseBodyAlertRuleNotification {
	s.Receivers = v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleNotification) SetSilenceEndTime(v string) *GetAlertRuleResponseBodyAlertRuleNotification {
	s.SilenceEndTime = &v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleNotification) SetSilenceStartTime(v string) *GetAlertRuleResponseBodyAlertRuleNotification {
	s.SilenceStartTime = &v
	return s
}

type GetAlertRuleResponseBodyAlertRuleNotificationReceivers struct {
	// The additional configuration of the alert recipient. If the ReceiverType parameter is set to DingdingUrl, you can set this parameter to {"atAll":true} to remind all members in a DingTalk group.
	//
	// example:
	//
	// {"atAll":true}
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// The type of the alert recipient. Valid valves:
	//
	// 	- AliUid: Alibaba Cloud account ID.
	//
	// 	- Shift Schedules: the personnel in a shift schedule.
	//
	// 	- TaskOwner: the task owner. The task owner can receive custom alerts and event alerts.
	//
	// 	- Owner: the baseline owner. The baseline owner can receive baseline alerts.
	//
	// 	- WebhookUrl: URL of a custom webhook.
	//
	// 	- DingdingUrl: DingTalk webhook URL.
	//
	// 	- FeishuUrl: Lark webhook URL.
	//
	// 	- WeixinUrl: WeCom webhook URL.
	//
	// example:
	//
	// WebhookUrl
	ReceiverType *string `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	// The alert recipients.
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s GetAlertRuleResponseBodyAlertRuleNotificationReceivers) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRuleNotificationReceivers) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRuleNotificationReceivers) SetExtension(v string) *GetAlertRuleResponseBodyAlertRuleNotificationReceivers {
	s.Extension = &v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleNotificationReceivers) SetReceiverType(v string) *GetAlertRuleResponseBodyAlertRuleNotificationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleNotificationReceivers) SetReceiverValues(v []*string) *GetAlertRuleResponseBodyAlertRuleNotificationReceivers {
	s.ReceiverValues = v
	return s
}

type GetAlertRuleResponseBodyAlertRuleTriggerCondition struct {
	// The extended information about the rule. This parameter is required for specific types of alerts.
	Extension *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension `json:"Extension,omitempty" xml:"Extension,omitempty" type:"Struct"`
	// The monitored objects.
	Target *GetAlertRuleResponseBodyAlertRuleTriggerConditionTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The alert type. Valid values:
	//
	// 	- Finished: An instance is successfully run.
	//
	// 	- UnFinished: An instance does not finish running before a specified point in time.
	//
	// 	- Error: An error occurs on an instance.
	//
	// 	- CycleUnfinished: An instance does not finish running as expected within a specific cycle.
	//
	// 	- Timeout: An instance times out.
	//
	// 	- InstanceTransferComplete: An instance is generated by the auto triggered node.
	//
	// 	- InstanceTransferFluctuate: The number of generated instances fluctuates.
	//
	// 	- ExhaustedError: An error persists after an instance is automatically rerun.
	//
	// 	- InstanceKeyword: An instance with errors contains specified keywords.
	//
	// 	- InstanceErrorCount: The number of instances on which an error occurs reaches a specified threshold.
	//
	// 	- InstanceErrorPercentage: The proportion of instances on which an error occurs in the workspace to the total number of instances reaches a specified threshold.
	//
	// 	- ResourceGroupPercentage: The usage rate of the resource group reaches a specified threshold.
	//
	// 	- ResourceGroupWaitCount: The number of instances that are waiting for resources in the resource group reaches a specified threshold.
	//
	// example:
	//
	// Error
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerCondition) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerCondition) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerCondition) SetExtension(v *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension) *GetAlertRuleResponseBodyAlertRuleTriggerCondition {
	s.Extension = v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerCondition) SetTarget(v *GetAlertRuleResponseBodyAlertRuleTriggerConditionTarget) *GetAlertRuleResponseBodyAlertRuleTriggerCondition {
	s.Target = v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerCondition) SetType(v string) *GetAlertRuleResponseBodyAlertRuleTriggerCondition {
	s.Type = &v
	return s
}

type GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension struct {
	// The configuration for an alert of the CycleUnfinished type.
	CycleUnfinished *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinished `json:"CycleUnfinished,omitempty" xml:"CycleUnfinished,omitempty" type:"Struct"`
	// The configuration for an alert of the Error type.
	Error *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionError `json:"Error,omitempty" xml:"Error,omitempty" type:"Struct"`
	// The configuration for an alert of the InstanceErrorCount type.
	InstanceErrorCount *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorCount `json:"InstanceErrorCount,omitempty" xml:"InstanceErrorCount,omitempty" type:"Struct"`
	// The configuration for an alert of the InstanceErrorPercentage type.
	InstanceErrorPercentage *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorPercentage `json:"InstanceErrorPercentage,omitempty" xml:"InstanceErrorPercentage,omitempty" type:"Struct"`
	// The configuration for an alert of the InstanceTransferFluctuate type.
	InstanceTransferFluctuate *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceTransferFluctuate `json:"InstanceTransferFluctuate,omitempty" xml:"InstanceTransferFluctuate,omitempty" type:"Struct"`
	// The configuration for an alert of the Timeout type.
	Timeout *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionTimeout `json:"Timeout,omitempty" xml:"Timeout,omitempty" type:"Struct"`
	// The configuration for an alert of the UnFinished type.
	UnFinished *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionUnFinished `json:"UnFinished,omitempty" xml:"UnFinished,omitempty" type:"Struct"`
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension) SetCycleUnfinished(v *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinished) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension {
	s.CycleUnfinished = v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension) SetError(v *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionError) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension {
	s.Error = v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension) SetInstanceErrorCount(v *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorCount) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension {
	s.InstanceErrorCount = v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension) SetInstanceErrorPercentage(v *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorPercentage) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension {
	s.InstanceErrorPercentage = v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension) SetInstanceTransferFluctuate(v *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceTransferFluctuate) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension {
	s.InstanceTransferFluctuate = v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension) SetTimeout(v *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionTimeout) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension {
	s.Timeout = v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension) SetUnFinished(v *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionUnFinished) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtension {
	s.UnFinished = v
	return s
}

type GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinished struct {
	// The configurations of the scheduling cycle and timeout period of the instance.
	CycleAndTime []*GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinishedCycleAndTime `json:"CycleAndTime,omitempty" xml:"CycleAndTime,omitempty" type:"Repeated"`
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinished) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinished) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinished) SetCycleAndTime(v []*GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinishedCycleAndTime) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinished {
	s.CycleAndTime = v
	return s
}

type GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinishedCycleAndTime struct {
	// The ID of the scheduling cycle of the instance. Valid values: [1,288].
	//
	// example:
	//
	// 1
	CycleId *int32 `json:"CycleId,omitempty" xml:"CycleId,omitempty"`
	// The latest completion time of the instance within the scheduling cycle. The time is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].
	//
	// example:
	//
	// 12:00
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinishedCycleAndTime) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinishedCycleAndTime) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinishedCycleAndTime) SetCycleId(v int32) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinishedCycleAndTime {
	s.CycleId = &v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinishedCycleAndTime) SetTime(v string) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionCycleUnfinishedCycleAndTime {
	s.Time = &v
	return s
}

type GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionError struct {
	// Indicates whether an alert is triggered if a batch synchronization task is automatically rerun upon a failure.
	//
	// example:
	//
	// false
	AutoRerunAlertEnabled *bool `json:"AutoRerunAlertEnabled,omitempty" xml:"AutoRerunAlertEnabled,omitempty"`
	// The IDs of the real-time computing tasks. This parameter is required when you monitor real-time computing tasks.
	StreamTaskIds []*int64 `json:"StreamTaskIds,omitempty" xml:"StreamTaskIds,omitempty" type:"Repeated"`
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionError) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionError) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionError) SetAutoRerunAlertEnabled(v bool) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionError {
	s.AutoRerunAlertEnabled = &v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionError) SetStreamTaskIds(v []*int64) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionError {
	s.StreamTaskIds = v
	return s
}

type GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorCount struct {
	// The maximum number of instances on which an error occurs. Valid values: [1,10000].
	//
	// example:
	//
	// 10
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorCount) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorCount) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorCount) SetCount(v int32) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorCount {
	s.Count = &v
	return s
}

type GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorPercentage struct {
	// The maximum percentage of instances on which an error occurs in the workspace to the total number of instances. Valid values: [1-100].
	//
	// example:
	//
	// 10
	Percentage *int32 `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorPercentage) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorPercentage) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorPercentage) SetPercentage(v int32) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceErrorPercentage {
	s.Percentage = &v
	return s
}

type GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceTransferFluctuate struct {
	// The maximum percentage of fluctuation in the number of auto triggered node instances that are generated in your workspace. Valid values: [1-100].
	//
	// example:
	//
	// 10
	Percentage *int32 `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	// The way in which the number of auto triggered node instances that are generated in your workspace fluctuates. Valid values:
	//
	// 	- abs: the absolute value. The number of instances increases or decreases.
	//
	// 	- increase: The number of instances increases.
	//
	// 	- decrease: The number of instances decreases.
	//
	// example:
	//
	// 10
	Trend *string `json:"Trend,omitempty" xml:"Trend,omitempty"`
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceTransferFluctuate) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceTransferFluctuate) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceTransferFluctuate) SetPercentage(v int32) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceTransferFluctuate {
	s.Percentage = &v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceTransferFluctuate) SetTrend(v string) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionInstanceTransferFluctuate {
	s.Trend = &v
	return s
}

type GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionTimeout struct {
	// The timeout period. Unit: minutes. Valid values: [1, 21600].
	//
	// example:
	//
	// 10
	TimeoutInMinutes *int32 `json:"TimeoutInMinutes,omitempty" xml:"TimeoutInMinutes,omitempty"`
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionTimeout) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionTimeout) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionTimeout) SetTimeoutInMinutes(v int32) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionTimeout {
	s.TimeoutInMinutes = &v
	return s
}

type GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionUnFinished struct {
	// The latest completion time of the instance. The period is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].
	//
	// example:
	//
	// 12:00
	UnFinishedTime *string `json:"UnFinishedTime,omitempty" xml:"UnFinishedTime,omitempty"`
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionUnFinished) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionUnFinished) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionUnFinished) SetUnFinishedTime(v string) *GetAlertRuleResponseBodyAlertRuleTriggerConditionExtensionUnFinished {
	s.UnFinishedTime = &v
	return s
}

type GetAlertRuleResponseBodyAlertRuleTriggerConditionTarget struct {
	// The nodes that are not to be monitored.
	AllowTasks []*int64 `json:"AllowTasks,omitempty" xml:"AllowTasks,omitempty" type:"Repeated"`
	// The IDs of monitored objects.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// The type of the monitored objects. Valid values:
	//
	// 	- Task: node
	//
	// 	- Baseline: baseline
	//
	// 	- project: workspace
	//
	// 	- BizProcess: workflow
	//
	// example:
	//
	// Task
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionTarget) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponseBodyAlertRuleTriggerConditionTarget) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionTarget) SetAllowTasks(v []*int64) *GetAlertRuleResponseBodyAlertRuleTriggerConditionTarget {
	s.AllowTasks = v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionTarget) SetIds(v []*int64) *GetAlertRuleResponseBodyAlertRuleTriggerConditionTarget {
	s.Ids = v
	return s
}

func (s *GetAlertRuleResponseBodyAlertRuleTriggerConditionTarget) SetType(v string) *GetAlertRuleResponseBodyAlertRuleTriggerConditionTarget {
	s.Type = &v
	return s
}

type GetAlertRuleResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAlertRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAlertRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlertRuleResponse) GoString() string {
	return s.String()
}

func (s *GetAlertRuleResponse) SetHeaders(v map[string]*string) *GetAlertRuleResponse {
	s.Headers = v
	return s
}

func (s *GetAlertRuleResponse) SetStatusCode(v int32) *GetAlertRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAlertRuleResponse) SetBody(v *GetAlertRuleResponseBody) *GetAlertRuleResponse {
	s.Body = v
	return s
}

type GetBusinessRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1000000111
	BusinessId *int64 `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s GetBusinessRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessRequest) SetBusinessId(v int64) *GetBusinessRequest {
	s.BusinessId = &v
	return s
}

func (s *GetBusinessRequest) SetProjectId(v int64) *GetBusinessRequest {
	s.ProjectId = &v
	return s
}

func (s *GetBusinessRequest) SetProjectIdentifier(v string) *GetBusinessRequest {
	s.ProjectIdentifier = &v
	return s
}

type GetBusinessResponseBody struct {
	Data *GetBusinessResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetBusinessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessResponseBody) SetData(v *GetBusinessResponseBodyData) *GetBusinessResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessResponseBody) SetErrorCode(v string) *GetBusinessResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetBusinessResponseBody) SetErrorMessage(v string) *GetBusinessResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetBusinessResponseBody) SetHttpStatusCode(v int32) *GetBusinessResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetBusinessResponseBody) SetRequestId(v string) *GetBusinessResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessResponseBody) SetSuccess(v bool) *GetBusinessResponseBody {
	s.Success = &v
	return s
}

type GetBusinessResponseBodyData struct {
	// example:
	//
	// 1000001
	BusinessId *int64 `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	// example:
	//
	// The first business process
	BusinessName *string `json:"BusinessName,omitempty" xml:"BusinessName,omitempty"`
	// example:
	//
	// This is my first business process.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 20000****
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// example:
	//
	// 10000
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// NORMAL
	UseType *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s GetBusinessResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetBusinessResponseBodyData) SetBusinessId(v int64) *GetBusinessResponseBodyData {
	s.BusinessId = &v
	return s
}

func (s *GetBusinessResponseBodyData) SetBusinessName(v string) *GetBusinessResponseBodyData {
	s.BusinessName = &v
	return s
}

func (s *GetBusinessResponseBodyData) SetDescription(v string) *GetBusinessResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetBusinessResponseBodyData) SetOwner(v string) *GetBusinessResponseBodyData {
	s.Owner = &v
	return s
}

func (s *GetBusinessResponseBodyData) SetProjectId(v string) *GetBusinessResponseBodyData {
	s.ProjectId = &v
	return s
}

func (s *GetBusinessResponseBodyData) SetUseType(v string) *GetBusinessResponseBodyData {
	s.UseType = &v
	return s
}

type GetBusinessResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessResponse) SetHeaders(v map[string]*string) *GetBusinessResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessResponse) SetStatusCode(v int32) *GetBusinessResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessResponse) SetBody(v *GetBusinessResponseBody) *GetBusinessResponse {
	s.Body = v
	return s
}

type GetCatalogRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// dlf-catalog:123456XXX:test_catalog
	//
	// starrocks-catalog:c-abc123xxx:default_catalog
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetCatalogRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCatalogRequest) GoString() string {
	return s.String()
}

func (s *GetCatalogRequest) SetId(v string) *GetCatalogRequest {
	s.Id = &v
	return s
}

type GetCatalogResponseBody struct {
	Catalog *Catalog `json:"Catalog,omitempty" xml:"Catalog,omitempty"`
	// example:
	//
	// 1AFAE64E-D1BE-432B-A9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetCatalogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCatalogResponseBody) GoString() string {
	return s.String()
}

func (s *GetCatalogResponseBody) SetCatalog(v *Catalog) *GetCatalogResponseBody {
	s.Catalog = v
	return s
}

func (s *GetCatalogResponseBody) SetRequestId(v string) *GetCatalogResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCatalogResponseBody) SetSuccess(v bool) *GetCatalogResponseBody {
	s.Success = &v
	return s
}

type GetCatalogResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCatalogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCatalogResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCatalogResponse) GoString() string {
	return s.String()
}

func (s *GetCatalogResponse) SetHeaders(v map[string]*string) *GetCatalogResponse {
	s.Headers = v
	return s
}

func (s *GetCatalogResponse) SetStatusCode(v int32) *GetCatalogResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCatalogResponse) SetBody(v *GetCatalogResponseBody) *GetCatalogResponse {
	s.Body = v
	return s
}

type GetCertificateRequest struct {
	// The ID of the certificate file.
	//
	// This parameter is required.
	//
	// example:
	//
	// 676303114031776
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the workspace to which the certificate file belongs.
	//
	// example:
	//
	// 1065601
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCertificateRequest) GoString() string {
	return s.String()
}

func (s *GetCertificateRequest) SetId(v int64) *GetCertificateRequest {
	s.Id = &v
	return s
}

func (s *GetCertificateRequest) SetProjectId(v int64) *GetCertificateRequest {
	s.ProjectId = &v
	return s
}

type GetCertificateResponseBody struct {
	// The details of the certificate file.
	Certificate *GetCertificateResponseBodyCertificate `json:"Certificate,omitempty" xml:"Certificate,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *GetCertificateResponseBody) SetCertificate(v *GetCertificateResponseBodyCertificate) *GetCertificateResponseBody {
	s.Certificate = v
	return s
}

func (s *GetCertificateResponseBody) SetRequestId(v string) *GetCertificateResponseBody {
	s.RequestId = &v
	return s
}

type GetCertificateResponseBodyCertificate struct {
	// The time when the certificate file was created. The value is a UNIX timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1730217600000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the user who created the certificate file.
	//
	// example:
	//
	// 1107550004253538
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The description.
	//
	// example:
	//
	// This is a file
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The size of the certificate file, in bytes.
	//
	// example:
	//
	// 77549
	FileSizeInBytes *int64 `json:"FileSizeInBytes,omitempty" xml:"FileSizeInBytes,omitempty"`
	// The ID of the certificate file.
	//
	// example:
	//
	// 676303114031776
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the certificate file.
	//
	// example:
	//
	// ca1.crt
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the workspace to which the certificate file belongs.
	//
	// example:
	//
	// 177161
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetCertificateResponseBodyCertificate) String() string {
	return tea.Prettify(s)
}

func (s GetCertificateResponseBodyCertificate) GoString() string {
	return s.String()
}

func (s *GetCertificateResponseBodyCertificate) SetCreateTime(v int64) *GetCertificateResponseBodyCertificate {
	s.CreateTime = &v
	return s
}

func (s *GetCertificateResponseBodyCertificate) SetCreateUser(v string) *GetCertificateResponseBodyCertificate {
	s.CreateUser = &v
	return s
}

func (s *GetCertificateResponseBodyCertificate) SetDescription(v string) *GetCertificateResponseBodyCertificate {
	s.Description = &v
	return s
}

func (s *GetCertificateResponseBodyCertificate) SetFileSizeInBytes(v int64) *GetCertificateResponseBodyCertificate {
	s.FileSizeInBytes = &v
	return s
}

func (s *GetCertificateResponseBodyCertificate) SetId(v int64) *GetCertificateResponseBodyCertificate {
	s.Id = &v
	return s
}

func (s *GetCertificateResponseBodyCertificate) SetName(v string) *GetCertificateResponseBodyCertificate {
	s.Name = &v
	return s
}

func (s *GetCertificateResponseBodyCertificate) SetProjectId(v int64) *GetCertificateResponseBodyCertificate {
	s.ProjectId = &v
	return s
}

type GetCertificateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCertificateResponse) GoString() string {
	return s.String()
}

func (s *GetCertificateResponse) SetHeaders(v map[string]*string) *GetCertificateResponse {
	s.Headers = v
	return s
}

func (s *GetCertificateResponse) SetStatusCode(v int32) *GetCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCertificateResponse) SetBody(v *GetCertificateResponseBody) *GetCertificateResponse {
	s.Body = v
	return s
}

type GetColumnRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-column:11075xxxx::test_project:test_schema:test_table:test_column
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetColumnRequest) String() string {
	return tea.Prettify(s)
}

func (s GetColumnRequest) GoString() string {
	return s.String()
}

func (s *GetColumnRequest) SetId(v string) *GetColumnRequest {
	s.Id = &v
	return s
}

type GetColumnResponseBody struct {
	Column *Column `json:"Column,omitempty" xml:"Column,omitempty"`
	// example:
	//
	// D1E2E5BC-xxxx-xxxx-xxxx-xxxxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetColumnResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetColumnResponseBody) GoString() string {
	return s.String()
}

func (s *GetColumnResponseBody) SetColumn(v *Column) *GetColumnResponseBody {
	s.Column = v
	return s
}

func (s *GetColumnResponseBody) SetRequestId(v string) *GetColumnResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetColumnResponseBody) SetSuccess(v bool) *GetColumnResponseBody {
	s.Success = &v
	return s
}

type GetColumnResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetColumnResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetColumnResponse) String() string {
	return tea.Prettify(s)
}

func (s GetColumnResponse) GoString() string {
	return s.String()
}

func (s *GetColumnResponse) SetHeaders(v map[string]*string) *GetColumnResponse {
	s.Headers = v
	return s
}

func (s *GetColumnResponse) SetStatusCode(v int32) *GetColumnResponse {
	s.StatusCode = &v
	return s
}

func (s *GetColumnResponse) SetBody(v *GetColumnResponseBody) *GetColumnResponse {
	s.Body = v
	return s
}

type GetCreateWorkflowInstancesResultRequest struct {
	// The operation ID. This parameter is used to query the result of asynchronously creating a workflow instance. You can call the CreateWorkflowInstances operation to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// e15ad21c-b0e9-4792-8f55-b037xxxxxxxx
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
}

func (s GetCreateWorkflowInstancesResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCreateWorkflowInstancesResultRequest) GoString() string {
	return s.String()
}

func (s *GetCreateWorkflowInstancesResultRequest) SetOperationId(v string) *GetCreateWorkflowInstancesResultRequest {
	s.OperationId = &v
	return s
}

type GetCreateWorkflowInstancesResultResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of asynchronously creating a workflow instance.
	Result *GetCreateWorkflowInstancesResultResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s GetCreateWorkflowInstancesResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCreateWorkflowInstancesResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetCreateWorkflowInstancesResultResponseBody) SetRequestId(v string) *GetCreateWorkflowInstancesResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCreateWorkflowInstancesResultResponseBody) SetResult(v *GetCreateWorkflowInstancesResultResponseBodyResult) *GetCreateWorkflowInstancesResultResponseBody {
	s.Result = v
	return s
}

type GetCreateWorkflowInstancesResultResponseBodyResult struct {
	// The error message. This parameter is returned only if the creation fails.
	//
	// example:
	//
	// Invalid Param xxx
	FailureMessage *string `json:"FailureMessage,omitempty" xml:"FailureMessage,omitempty"`
	// The creation status. Valid values:
	//
	// 	- Creating
	//
	// 	- Created
	//
	// 	- CreateFailure
	//
	// example:
	//
	// Created
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The workflow instance IDs. This parameter is returned only if the creation is successful.
	WorkflowInstanceIds []*int64 `json:"WorkflowInstanceIds,omitempty" xml:"WorkflowInstanceIds,omitempty" type:"Repeated"`
}

func (s GetCreateWorkflowInstancesResultResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetCreateWorkflowInstancesResultResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetCreateWorkflowInstancesResultResponseBodyResult) SetFailureMessage(v string) *GetCreateWorkflowInstancesResultResponseBodyResult {
	s.FailureMessage = &v
	return s
}

func (s *GetCreateWorkflowInstancesResultResponseBodyResult) SetStatus(v string) *GetCreateWorkflowInstancesResultResponseBodyResult {
	s.Status = &v
	return s
}

func (s *GetCreateWorkflowInstancesResultResponseBodyResult) SetWorkflowInstanceIds(v []*int64) *GetCreateWorkflowInstancesResultResponseBodyResult {
	s.WorkflowInstanceIds = v
	return s
}

type GetCreateWorkflowInstancesResultResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCreateWorkflowInstancesResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCreateWorkflowInstancesResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCreateWorkflowInstancesResultResponse) GoString() string {
	return s.String()
}

func (s *GetCreateWorkflowInstancesResultResponse) SetHeaders(v map[string]*string) *GetCreateWorkflowInstancesResultResponse {
	s.Headers = v
	return s
}

func (s *GetCreateWorkflowInstancesResultResponse) SetStatusCode(v int32) *GetCreateWorkflowInstancesResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCreateWorkflowInstancesResultResponse) SetBody(v *GetCreateWorkflowInstancesResultResponseBody) *GetCreateWorkflowInstancesResultResponse {
	s.Body = v
	return s
}

type GetDIJobRequest struct {
	// Deprecated
	//
	// This parameter is deprecated. Use the Id parameter instead.
	//
	// example:
	//
	// 11588
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 11588
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Specifies whether to return detailed configuration information, including TransformationRules, TableMappings, and JobSettings. Valid values: true and false. Default value: true.
	//
	// example:
	//
	// true
	WithDetails *bool `json:"WithDetails,omitempty" xml:"WithDetails,omitempty"`
}

func (s GetDIJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobRequest) GoString() string {
	return s.String()
}

func (s *GetDIJobRequest) SetDIJobId(v int64) *GetDIJobRequest {
	s.DIJobId = &v
	return s
}

func (s *GetDIJobRequest) SetId(v int64) *GetDIJobRequest {
	s.Id = &v
	return s
}

func (s *GetDIJobRequest) SetProjectId(v int64) *GetDIJobRequest {
	s.ProjectId = &v
	return s
}

func (s *GetDIJobRequest) SetWithDetails(v bool) *GetDIJobRequest {
	s.WithDetails = &v
	return s
}

type GetDIJobResponseBody struct {
	// The pagination information.
	PagingInfo *GetDIJobResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDIJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBody) SetPagingInfo(v *GetDIJobResponseBodyPagingInfo) *GetDIJobResponseBody {
	s.PagingInfo = v
	return s
}

func (s *GetDIJobResponseBody) SetRequestId(v string) *GetDIJobResponseBody {
	s.RequestId = &v
	return s
}

type GetDIJobResponseBodyPagingInfo struct {
	// Deprecated
	//
	// This parameter is deprecated. Use the Id parameter instead.
	//
	// example:
	//
	// 32601
	DIJobId *string `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The description of the synchronization task.
	//
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The properties of the destination.
	DestinationDataSourceSettings []*GetDIJobResponseBodyPagingInfoDestinationDataSourceSettings `json:"DestinationDataSourceSettings,omitempty" xml:"DestinationDataSourceSettings,omitempty" type:"Repeated"`
	// The destination type. Valid values: Hologres, OSS-HDFS, OSS, MaxCompute, LogHub, StarRocks, DataHub, AnalyticDB_For_MySQL, Kafka, Hive.
	//
	// example:
	//
	// Hologres
	DestinationDataSourceType *string `json:"DestinationDataSourceType,omitempty" xml:"DestinationDataSourceType,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 32601
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the synchronization task.
	//
	// example:
	//
	// imp_ods_dms_det_dealer_info_df
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The runtime settings.
	JobSettings *GetDIJobResponseBodyPagingInfoJobSettings `json:"JobSettings,omitempty" xml:"JobSettings,omitempty" type:"Struct"`
	// The status of the job.
	//
	// example:
	//
	// Running
	JobStatus *string `json:"JobStatus,omitempty" xml:"JobStatus,omitempty"`
	// 任务类型
	//
	// - DatabaseRealtimeMigration(整库实时):将源端多个库的多个表进行流同步，支持仅全量，仅增量，或全量+增量。
	//
	// - DatabaseOfflineMigration(整库离线):将源端多个库的多个表进行批同步，支持仅全量，仅增量，或全量+增量。
	//
	// - SingleTableRealtimeMigration(单表实时):将源端单个表进行流同步。
	//
	// example:
	//
	// DatabaseRealtimeMigration
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The synchronization type. Valid values:
	//
	// 	- FullAndRealtimeIncremental: full synchronization and real-time incremental synchronization of data in an entire database
	//
	// 	- RealtimeIncremental: real-time incremental synchronization of data in a single table
	//
	// 	- Full: full batch synchronization of data in an entire database
	//
	// 	- OfflineIncremental: batch incremental synchronization of data in an entire database
	//
	// 	- FullAndOfflineIncremental: full synchronization and batch incremental synchronization of data in an entire database
	//
	// example:
	//
	// FullAndRealtimeIncremental
	MigrationType *string `json:"MigrationType,omitempty" xml:"MigrationType,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter indicates the DataWorks workspace to which the API operation is applied.
	//
	// example:
	//
	// 98330
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The resource settings.
	ResourceSettings *GetDIJobResponseBodyPagingInfoResourceSettings `json:"ResourceSettings,omitempty" xml:"ResourceSettings,omitempty" type:"Struct"`
	// The settings of the source. Only a single source is supported.
	SourceDataSourceSettings []*GetDIJobResponseBodyPagingInfoSourceDataSourceSettings `json:"SourceDataSourceSettings,omitempty" xml:"SourceDataSourceSettings,omitempty" type:"Repeated"`
	// The source type. Valid values: PolarDB, MySQL, Kafka, LogHub, Hologres, Oracle, OceanBase, MongoDB, RedShift, Hive, SQLServer, Doris, ClickHouse.
	//
	// example:
	//
	// Mysql
	SourceDataSourceType *string `json:"SourceDataSourceType,omitempty" xml:"SourceDataSourceType,omitempty"`
	// The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.
	//
	// >  [ { "SourceObjectSelectionRules":[ { "ObjectType":"Database", "Action":"Include", "ExpressionType":"Exact", "Expression":"biz_db" }, { "ObjectType":"Schema", "Action":"Include", "ExpressionType":"Exact", "Expression":"s1" }, { "ObjectType":"Table", "Action":"Include", "ExpressionType":"Exact", "Expression":"table1" } ], "TransformationRuleNames":[ { "RuleName":"my_database_rename_rule", "RuleActionType":"Rename", "RuleTargetType":"Schema" } ] } ]
	TableMappings []*GetDIJobResponseBodyPagingInfoTableMappings `json:"TableMappings,omitempty" xml:"TableMappings,omitempty" type:"Repeated"`
	// The list of transformation rules that are applied to the synchronization objects selected from the source.
	//
	// >  [ { "RuleName":"my_database_rename_rule", "RuleActionType":"Rename", "RuleTargetType":"Schema", "RuleExpression":"{"expression":"${srcDatasoureName}_${srcDatabaseName}"}" } ]
	TransformationRules []*GetDIJobResponseBodyPagingInfoTransformationRules `json:"TransformationRules,omitempty" xml:"TransformationRules,omitempty" type:"Repeated"`
}

func (s GetDIJobResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfo) SetDIJobId(v string) *GetDIJobResponseBodyPagingInfo {
	s.DIJobId = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetDescription(v string) *GetDIJobResponseBodyPagingInfo {
	s.Description = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetDestinationDataSourceSettings(v []*GetDIJobResponseBodyPagingInfoDestinationDataSourceSettings) *GetDIJobResponseBodyPagingInfo {
	s.DestinationDataSourceSettings = v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetDestinationDataSourceType(v string) *GetDIJobResponseBodyPagingInfo {
	s.DestinationDataSourceType = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetId(v int64) *GetDIJobResponseBodyPagingInfo {
	s.Id = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetJobName(v string) *GetDIJobResponseBodyPagingInfo {
	s.JobName = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetJobSettings(v *GetDIJobResponseBodyPagingInfoJobSettings) *GetDIJobResponseBodyPagingInfo {
	s.JobSettings = v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetJobStatus(v string) *GetDIJobResponseBodyPagingInfo {
	s.JobStatus = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetJobType(v string) *GetDIJobResponseBodyPagingInfo {
	s.JobType = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetMigrationType(v string) *GetDIJobResponseBodyPagingInfo {
	s.MigrationType = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetProjectId(v int64) *GetDIJobResponseBodyPagingInfo {
	s.ProjectId = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetResourceSettings(v *GetDIJobResponseBodyPagingInfoResourceSettings) *GetDIJobResponseBodyPagingInfo {
	s.ResourceSettings = v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetSourceDataSourceSettings(v []*GetDIJobResponseBodyPagingInfoSourceDataSourceSettings) *GetDIJobResponseBodyPagingInfo {
	s.SourceDataSourceSettings = v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetSourceDataSourceType(v string) *GetDIJobResponseBodyPagingInfo {
	s.SourceDataSourceType = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetTableMappings(v []*GetDIJobResponseBodyPagingInfoTableMappings) *GetDIJobResponseBodyPagingInfo {
	s.TableMappings = v
	return s
}

func (s *GetDIJobResponseBodyPagingInfo) SetTransformationRules(v []*GetDIJobResponseBodyPagingInfoTransformationRules) *GetDIJobResponseBodyPagingInfo {
	s.TransformationRules = v
	return s
}

type GetDIJobResponseBodyPagingInfoDestinationDataSourceSettings struct {
	// The name of the data source.
	//
	// example:
	//
	// dw_mysql
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
}

func (s GetDIJobResponseBodyPagingInfoDestinationDataSourceSettings) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoDestinationDataSourceSettings) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoDestinationDataSourceSettings) SetDataSourceName(v string) *GetDIJobResponseBodyPagingInfoDestinationDataSourceSettings {
	s.DataSourceName = &v
	return s
}

type GetDIJobResponseBodyPagingInfoJobSettings struct {
	// The channel control settings for the synchronization task. You can configure special channel control settings for the following synchronization links: data synchronization between Hologres data sources and data synchronization from Hologres to Kafka.
	//
	// 1.  Holo2Kafka
	//
	// 	- Example: {"destinationChannelSettings":{"kafkaClientProperties":[{"key":"linger.ms","value":"100"}],"keyColumns":["col3"],"writeMode":"canal"}}
	//
	// 	- kafkaClientProperties: the parameters related to a Kafka producer, which are used when you write data to a Kafka data source.
	//
	// 	- keyColumns: the names of Kafka columns to which data is written.
	//
	// 	- writeMode: the writing format. Valid values: json and canal.
	//
	// 2.  Holo2Holo
	//
	// 	- Example: {"destinationChannelSettings":{"conflictMode":"replace","dynamicColumnAction":"replay","writeMode":"replay"}}
	//
	// 	- conflictMode: the policy used to handle a conflict that occurs during data writing to Hologres. Valid values: replace and ignore.
	//
	// 	- writeMode: the mode in which data is written to Hologres. Valid values: replay and insert.
	//
	// 	- dynamicColumnAction: the mode in which data is written to dynamic columns in a Hologres table. Valid values: replay, insert, and ignore.
	//
	// example:
	//
	// {"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}
	ChannelSettings *string `json:"ChannelSettings,omitempty" xml:"ChannelSettings,omitempty"`
	// The data type mappings between source fields and destination fields.
	ColumnDataTypeSettings []*GetDIJobResponseBodyPagingInfoJobSettingsColumnDataTypeSettings `json:"ColumnDataTypeSettings,omitempty" xml:"ColumnDataTypeSettings,omitempty" type:"Repeated"`
	// The settings for periodic scheduling.
	CycleScheduleSettings *GetDIJobResponseBodyPagingInfoJobSettingsCycleScheduleSettings `json:"CycleScheduleSettings,omitempty" xml:"CycleScheduleSettings,omitempty" type:"Struct"`
	// The DDL operation types. Valid values:
	//
	// 	- RenameColumn
	//
	// 	- ModifyColumn
	//
	// 	- CreateTable
	//
	// 	- TruncateTable
	//
	// 	- DropTable
	//
	// 	- DropColumn
	//
	// 	- AddColumn
	DdlHandlingSettings []*GetDIJobResponseBodyPagingInfoJobSettingsDdlHandlingSettings `json:"DdlHandlingSettings,omitempty" xml:"DdlHandlingSettings,omitempty" type:"Repeated"`
	// The runtime settings.
	RuntimeSettings []*GetDIJobResponseBodyPagingInfoJobSettingsRuntimeSettings `json:"RuntimeSettings,omitempty" xml:"RuntimeSettings,omitempty" type:"Repeated"`
}

func (s GetDIJobResponseBodyPagingInfoJobSettings) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoJobSettings) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoJobSettings) SetChannelSettings(v string) *GetDIJobResponseBodyPagingInfoJobSettings {
	s.ChannelSettings = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoJobSettings) SetColumnDataTypeSettings(v []*GetDIJobResponseBodyPagingInfoJobSettingsColumnDataTypeSettings) *GetDIJobResponseBodyPagingInfoJobSettings {
	s.ColumnDataTypeSettings = v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoJobSettings) SetCycleScheduleSettings(v *GetDIJobResponseBodyPagingInfoJobSettingsCycleScheduleSettings) *GetDIJobResponseBodyPagingInfoJobSettings {
	s.CycleScheduleSettings = v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoJobSettings) SetDdlHandlingSettings(v []*GetDIJobResponseBodyPagingInfoJobSettingsDdlHandlingSettings) *GetDIJobResponseBodyPagingInfoJobSettings {
	s.DdlHandlingSettings = v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoJobSettings) SetRuntimeSettings(v []*GetDIJobResponseBodyPagingInfoJobSettingsRuntimeSettings) *GetDIJobResponseBodyPagingInfoJobSettings {
	s.RuntimeSettings = v
	return s
}

type GetDIJobResponseBodyPagingInfoJobSettingsColumnDataTypeSettings struct {
	// The data type of the destination field. Valid values: bigint, boolean, string, text, datetime, timestamp, decimal, and binary. Different types of data sources support different data types.
	//
	// example:
	//
	// text
	DestinationDataType *string `json:"DestinationDataType,omitempty" xml:"DestinationDataType,omitempty"`
	// The data type of the source field. Valid values: bigint, boolean, string, text, datetime, timestamp, decimal, and binary. Different types of data sources support different data types.
	//
	// example:
	//
	// bigint
	SourceDataType *string `json:"SourceDataType,omitempty" xml:"SourceDataType,omitempty"`
}

func (s GetDIJobResponseBodyPagingInfoJobSettingsColumnDataTypeSettings) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoJobSettingsColumnDataTypeSettings) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoJobSettingsColumnDataTypeSettings) SetDestinationDataType(v string) *GetDIJobResponseBodyPagingInfoJobSettingsColumnDataTypeSettings {
	s.DestinationDataType = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoJobSettingsColumnDataTypeSettings) SetSourceDataType(v string) *GetDIJobResponseBodyPagingInfoJobSettingsColumnDataTypeSettings {
	s.SourceDataType = &v
	return s
}

type GetDIJobResponseBodyPagingInfoJobSettingsCycleScheduleSettings struct {
	// The synchronization type that requires periodic scheduling. Valid values:
	//
	// 	- Full: full synchronization
	//
	// 	- OfflineIncremental: batch incremental synchronization
	//
	// example:
	//
	// Full
	CycleMigrationType *string `json:"CycleMigrationType,omitempty" xml:"CycleMigrationType,omitempty"`
	// The scheduling parameters.
	//
	// example:
	//
	// bizdate=$bizdate
	ScheduleParameters *string `json:"ScheduleParameters,omitempty" xml:"ScheduleParameters,omitempty"`
}

func (s GetDIJobResponseBodyPagingInfoJobSettingsCycleScheduleSettings) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoJobSettingsCycleScheduleSettings) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoJobSettingsCycleScheduleSettings) SetCycleMigrationType(v string) *GetDIJobResponseBodyPagingInfoJobSettingsCycleScheduleSettings {
	s.CycleMigrationType = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoJobSettingsCycleScheduleSettings) SetScheduleParameters(v string) *GetDIJobResponseBodyPagingInfoJobSettingsCycleScheduleSettings {
	s.ScheduleParameters = &v
	return s
}

type GetDIJobResponseBodyPagingInfoJobSettingsDdlHandlingSettings struct {
	// The processing policy for a specific type of DDL message. Valid values:
	//
	// 	- Ignore: ignores a DDL message.
	//
	// 	- Critical: reports an error for a DDL message.
	//
	// 	- Normal: normally processes a DDL message.
	//
	// example:
	//
	// Ignore
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// The DDL operation type. Valid values:
	//
	// 	- RenameColumn
	//
	// 	- ModifyColumn
	//
	// 	- CreateTable
	//
	// 	- TruncateTable
	//
	// 	- DropTable
	//
	// example:
	//
	// CreateTable
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDIJobResponseBodyPagingInfoJobSettingsDdlHandlingSettings) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoJobSettingsDdlHandlingSettings) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoJobSettingsDdlHandlingSettings) SetAction(v string) *GetDIJobResponseBodyPagingInfoJobSettingsDdlHandlingSettings {
	s.Action = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoJobSettingsDdlHandlingSettings) SetType(v string) *GetDIJobResponseBodyPagingInfoJobSettingsDdlHandlingSettings {
	s.Type = &v
	return s
}

type GetDIJobResponseBodyPagingInfoJobSettingsRuntimeSettings struct {
	// The name of the configuration item. Valid values:
	//
	// 	- src.offline.datasource.max.connection: indicates the maximum number of connections that are allowed for reading data from the source of a batch synchronization task.
	//
	// 	- dst.offline.truncate: indicates whether to clear the destination table before data writing.
	//
	// 	- runtime.offline.speed.limit.enable: indicates whether throttling is enabled for a batch synchronization task.
	//
	// 	- runtime.offline.concurrent: indicates the maximum number of parallel threads that are allowed for a batch synchronization task.
	//
	// 	- runtime.enable.auto.create.schema: indicates whether schemas are automatically created in the destination of a synchronization task.
	//
	// 	- runtime.realtime.concurrent: indicates the maximum number of parallel threads that are allowed for a real-time synchronization task.
	//
	// 	- runtime.realtime.failover.minute.dataxcdc: indicates the maximum waiting duration before a synchronization task retries the next restart if the previous restart fails after failover occurs. Unit: minutes.
	//
	// 	- runtime.realtime.failover.times.dataxcdc: indicates the maximum number of failures that are allowed for restarting a synchronization task after failovers occur.
	//
	// example:
	//
	// runtime.offline.concurrent
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the configuration item.
	//
	// example:
	//
	// 1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetDIJobResponseBodyPagingInfoJobSettingsRuntimeSettings) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoJobSettingsRuntimeSettings) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoJobSettingsRuntimeSettings) SetName(v string) *GetDIJobResponseBodyPagingInfoJobSettingsRuntimeSettings {
	s.Name = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoJobSettingsRuntimeSettings) SetValue(v string) *GetDIJobResponseBodyPagingInfoJobSettingsRuntimeSettings {
	s.Value = &v
	return s
}

type GetDIJobResponseBodyPagingInfoResourceSettings struct {
	// The resource used for batch synchronization.
	OfflineResourceSettings *GetDIJobResponseBodyPagingInfoResourceSettingsOfflineResourceSettings `json:"OfflineResourceSettings,omitempty" xml:"OfflineResourceSettings,omitempty" type:"Struct"`
	// The resource used for real-time synchronization.
	RealtimeResourceSettings *GetDIJobResponseBodyPagingInfoResourceSettingsRealtimeResourceSettings `json:"RealtimeResourceSettings,omitempty" xml:"RealtimeResourceSettings,omitempty" type:"Struct"`
	// The resource used for scheduling.
	ScheduleResourceSettings *GetDIJobResponseBodyPagingInfoResourceSettingsScheduleResourceSettings `json:"ScheduleResourceSettings,omitempty" xml:"ScheduleResourceSettings,omitempty" type:"Struct"`
}

func (s GetDIJobResponseBodyPagingInfoResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoResourceSettings) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoResourceSettings) SetOfflineResourceSettings(v *GetDIJobResponseBodyPagingInfoResourceSettingsOfflineResourceSettings) *GetDIJobResponseBodyPagingInfoResourceSettings {
	s.OfflineResourceSettings = v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoResourceSettings) SetRealtimeResourceSettings(v *GetDIJobResponseBodyPagingInfoResourceSettingsRealtimeResourceSettings) *GetDIJobResponseBodyPagingInfoResourceSettings {
	s.RealtimeResourceSettings = v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoResourceSettings) SetScheduleResourceSettings(v *GetDIJobResponseBodyPagingInfoResourceSettingsScheduleResourceSettings) *GetDIJobResponseBodyPagingInfoResourceSettings {
	s.ScheduleResourceSettings = v
	return s
}

type GetDIJobResponseBodyPagingInfoResourceSettingsOfflineResourceSettings struct {
	// The number of compute units (CUs) in the resource group for scheduling that are used for batch synchronization.
	//
	// example:
	//
	// 2.0
	RequestedCu *float64 `json:"RequestedCu,omitempty" xml:"RequestedCu,omitempty"`
	// The identifier of the resource group for Data Integration used for batch synchronization.
	//
	// example:
	//
	// S_res_group_7708_1667792816832
	ResourceGroupIdentifier *string `json:"ResourceGroupIdentifier,omitempty" xml:"ResourceGroupIdentifier,omitempty"`
}

func (s GetDIJobResponseBodyPagingInfoResourceSettingsOfflineResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoResourceSettingsOfflineResourceSettings) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoResourceSettingsOfflineResourceSettings) SetRequestedCu(v float64) *GetDIJobResponseBodyPagingInfoResourceSettingsOfflineResourceSettings {
	s.RequestedCu = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoResourceSettingsOfflineResourceSettings) SetResourceGroupIdentifier(v string) *GetDIJobResponseBodyPagingInfoResourceSettingsOfflineResourceSettings {
	s.ResourceGroupIdentifier = &v
	return s
}

type GetDIJobResponseBodyPagingInfoResourceSettingsRealtimeResourceSettings struct {
	// The number of CUs in the resource group for Data Integration that are used for real-time synchronization.
	//
	// example:
	//
	// 2.0
	RequestedCu *float64 `json:"RequestedCu,omitempty" xml:"RequestedCu,omitempty"`
	// The identifier of the resource group for Data Integration used for real-time synchronization.
	//
	// example:
	//
	// S_res_group_235454102432001_1579085295030
	ResourceGroupIdentifier *string `json:"ResourceGroupIdentifier,omitempty" xml:"ResourceGroupIdentifier,omitempty"`
}

func (s GetDIJobResponseBodyPagingInfoResourceSettingsRealtimeResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoResourceSettingsRealtimeResourceSettings) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoResourceSettingsRealtimeResourceSettings) SetRequestedCu(v float64) *GetDIJobResponseBodyPagingInfoResourceSettingsRealtimeResourceSettings {
	s.RequestedCu = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoResourceSettingsRealtimeResourceSettings) SetResourceGroupIdentifier(v string) *GetDIJobResponseBodyPagingInfoResourceSettingsRealtimeResourceSettings {
	s.ResourceGroupIdentifier = &v
	return s
}

type GetDIJobResponseBodyPagingInfoResourceSettingsScheduleResourceSettings struct {
	// The number of CUs in the resource group for Data Integration that are used for scheduling.
	//
	// example:
	//
	// 2.0
	RequestedCu *float64 `json:"RequestedCu,omitempty" xml:"RequestedCu,omitempty"`
	// The identifier of the resource group for scheduling used by the synchronization task.
	//
	// example:
	//
	// S_res_group_235454102432001_1718359176885
	ResourceGroupIdentifier *string `json:"ResourceGroupIdentifier,omitempty" xml:"ResourceGroupIdentifier,omitempty"`
}

func (s GetDIJobResponseBodyPagingInfoResourceSettingsScheduleResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoResourceSettingsScheduleResourceSettings) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoResourceSettingsScheduleResourceSettings) SetRequestedCu(v float64) *GetDIJobResponseBodyPagingInfoResourceSettingsScheduleResourceSettings {
	s.RequestedCu = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoResourceSettingsScheduleResourceSettings) SetResourceGroupIdentifier(v string) *GetDIJobResponseBodyPagingInfoResourceSettingsScheduleResourceSettings {
	s.ResourceGroupIdentifier = &v
	return s
}

type GetDIJobResponseBodyPagingInfoSourceDataSourceSettings struct {
	// The name of the data source.
	//
	// example:
	//
	// dw_mysql
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The properties of the data source.
	DataSourceProperties *GetDIJobResponseBodyPagingInfoSourceDataSourceSettingsDataSourceProperties `json:"DataSourceProperties,omitempty" xml:"DataSourceProperties,omitempty" type:"Struct"`
}

func (s GetDIJobResponseBodyPagingInfoSourceDataSourceSettings) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoSourceDataSourceSettings) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoSourceDataSourceSettings) SetDataSourceName(v string) *GetDIJobResponseBodyPagingInfoSourceDataSourceSettings {
	s.DataSourceName = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoSourceDataSourceSettings) SetDataSourceProperties(v *GetDIJobResponseBodyPagingInfoSourceDataSourceSettingsDataSourceProperties) *GetDIJobResponseBodyPagingInfoSourceDataSourceSettings {
	s.DataSourceProperties = v
	return s
}

type GetDIJobResponseBodyPagingInfoSourceDataSourceSettingsDataSourceProperties struct {
	// The encoding format of the database.
	//
	// example:
	//
	// UTF-8
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The time zone.
	//
	// example:
	//
	// GMT+8
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
}

func (s GetDIJobResponseBodyPagingInfoSourceDataSourceSettingsDataSourceProperties) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoSourceDataSourceSettingsDataSourceProperties) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoSourceDataSourceSettingsDataSourceProperties) SetEncoding(v string) *GetDIJobResponseBodyPagingInfoSourceDataSourceSettingsDataSourceProperties {
	s.Encoding = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoSourceDataSourceSettingsDataSourceProperties) SetTimezone(v string) *GetDIJobResponseBodyPagingInfoSourceDataSourceSettingsDataSourceProperties {
	s.Timezone = &v
	return s
}

type GetDIJobResponseBodyPagingInfoTableMappings struct {
	// The list of rules used to select synchronization objects in the source.
	SourceObjectSelectionRules []*GetDIJobResponseBodyPagingInfoTableMappingsSourceObjectSelectionRules `json:"SourceObjectSelectionRules,omitempty" xml:"SourceObjectSelectionRules,omitempty" type:"Repeated"`
	// The list of transformation rules that are applied to the synchronization objects selected from the source. Each entry in the list defines a transformation rule.
	TransformationRules []*GetDIJobResponseBodyPagingInfoTableMappingsTransformationRules `json:"TransformationRules,omitempty" xml:"TransformationRules,omitempty" type:"Repeated"`
}

func (s GetDIJobResponseBodyPagingInfoTableMappings) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoTableMappings) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoTableMappings) SetSourceObjectSelectionRules(v []*GetDIJobResponseBodyPagingInfoTableMappingsSourceObjectSelectionRules) *GetDIJobResponseBodyPagingInfoTableMappings {
	s.SourceObjectSelectionRules = v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoTableMappings) SetTransformationRules(v []*GetDIJobResponseBodyPagingInfoTableMappingsTransformationRules) *GetDIJobResponseBodyPagingInfoTableMappings {
	s.TransformationRules = v
	return s
}

type GetDIJobResponseBodyPagingInfoTableMappingsSourceObjectSelectionRules struct {
	// The operation that is performed to select objects. Valid values: Include and Exclude.
	//
	// example:
	//
	// Include
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// The expression.
	//
	// example:
	//
	// mysql_table_1
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The expression type. Valid values: Exact and Regex.
	//
	// example:
	//
	// Exact
	ExpressionType *string `json:"ExpressionType,omitempty" xml:"ExpressionType,omitempty"`
	// The object type. Valid values:
	//
	// 	- Table
	//
	// 	- Schema
	//
	// 	- Database
	//
	// example:
	//
	// Table
	ObjectType *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
}

func (s GetDIJobResponseBodyPagingInfoTableMappingsSourceObjectSelectionRules) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoTableMappingsSourceObjectSelectionRules) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoTableMappingsSourceObjectSelectionRules) SetAction(v string) *GetDIJobResponseBodyPagingInfoTableMappingsSourceObjectSelectionRules {
	s.Action = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoTableMappingsSourceObjectSelectionRules) SetExpression(v string) *GetDIJobResponseBodyPagingInfoTableMappingsSourceObjectSelectionRules {
	s.Expression = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoTableMappingsSourceObjectSelectionRules) SetExpressionType(v string) *GetDIJobResponseBodyPagingInfoTableMappingsSourceObjectSelectionRules {
	s.ExpressionType = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoTableMappingsSourceObjectSelectionRules) SetObjectType(v string) *GetDIJobResponseBodyPagingInfoTableMappingsSourceObjectSelectionRules {
	s.ObjectType = &v
	return s
}

type GetDIJobResponseBodyPagingInfoTableMappingsTransformationRules struct {
	// The action type. Valid values:
	//
	// 	- DefinePrimaryKey
	//
	// 	- Rename
	//
	// 	- AddColumn
	//
	// 	- HandleDml
	//
	// example:
	//
	// AddColumn
	RuleActionType *string `json:"RuleActionType,omitempty" xml:"RuleActionType,omitempty"`
	// The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.
	//
	// example:
	//
	// rename_rule_1
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The type of the object on which the action is performed. Valid values:
	//
	// 	- Table
	//
	// 	- Schema
	//
	// 	- Database
	//
	// example:
	//
	// Table
	RuleTargetType *string `json:"RuleTargetType,omitempty" xml:"RuleTargetType,omitempty"`
}

func (s GetDIJobResponseBodyPagingInfoTableMappingsTransformationRules) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoTableMappingsTransformationRules) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoTableMappingsTransformationRules) SetRuleActionType(v string) *GetDIJobResponseBodyPagingInfoTableMappingsTransformationRules {
	s.RuleActionType = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoTableMappingsTransformationRules) SetRuleName(v string) *GetDIJobResponseBodyPagingInfoTableMappingsTransformationRules {
	s.RuleName = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoTableMappingsTransformationRules) SetRuleTargetType(v string) *GetDIJobResponseBodyPagingInfoTableMappingsTransformationRules {
	s.RuleTargetType = &v
	return s
}

type GetDIJobResponseBodyPagingInfoTransformationRules struct {
	// The action type. Valid values:
	//
	// 	- DefinePrimaryKey
	//
	// 	- Rename
	//
	// 	- AddColumn
	//
	// 	- HandleDml
	//
	// 	- DefineIncrementalCondition
	//
	// 	- DefineCycleScheduleSettings
	//
	// 	- DefinePartitionKey
	//
	// example:
	//
	// Rename
	RuleActionType *string `json:"RuleActionType,omitempty" xml:"RuleActionType,omitempty"`
	// The expression of the rule. The expression is a JSON string.
	//
	// 1.  Example of a renaming rule
	//
	// 	- Example: {"expression":"${srcDatasourceName}_${srcDatabaseName}_0922" }
	//
	// 	- expression: the expression of the renaming rule. You can use the following variables in an expression: ${srcDatasourceName}, ${srcDatabaseName}, and ${srcTableName}. ${srcDatasourceName} indicates the name of the source. ${srcDatabaseName} indicates the name of a source database. ${srcTableName} indicates the name of a source table.
	//
	// 2.  Example of a column addition rule
	//
	// 	- Example: {"columns":[{"columnName":"my_add_column","columnValueType":"Constant","columnValue":"123"}]}
	//
	// 	- If no rule of this type is configured, no fields are added to the destination and no values are assigned by default.
	//
	// 	- columnName: the name of the field that is added.
	//
	// 	- columnValueType: the value type of the field. Valid values: Constant and Variable.
	//
	// 	- columnValue: the value of the field. If the columnValueType parameter is set to Constant, the value of the columnValue parameter is a constant of the STRING data type. If the columnValueType parameter is set to Variable, the value of the columnValue parameter is a built-in variable. The following built-in variables are supported: EXECUTE_TIME (LONG data type), DB_NAME_SRC (STRING data type), DATASOURCE_NAME_SRC (STRING data type), TABLE_NAME_SRC (STRING data type), DB_NAME_DEST (STRING data type), DATASOURCE_NAME_DEST (STRING data type), TABLE_NAME_DEST (STRING data type), and DB_NAME_SRC_TRANSED (STRING data type). EXECUTE_TIME indicates the execution time. DB_NAME_SRC indicates the name of a source database. DATASOURCE_NAME_SRC indicates the name of the source. TABLE_NAME_SRC indicates the name of a source table. DB_NAME_DEST indicates the name of a destination database. DATASOURCE_NAME_DEST indicates the name of the destination. TABLE_NAME_DEST indicates the name of a destination table. DB_NAME_SRC_TRANSED indicates the database name obtained after a transformation.
	//
	// 3.  Example of a rule used to specify primary key fields for a destination table
	//
	// 	- Example: {"columns":["ukcolumn1","ukcolumn2"]}
	//
	// 	- If no rule of this type is configured, the primary key fields in the mapped source table are used for the destination table by default.
	//
	// 	- If the destination table is an existing table, Data Integration does not modify the schema of the destination table. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.
	//
	// 	- If the destination table is automatically created by the system, Data Integration automatically creates the schema of the destination table. The schema contains the primary key fields that you specify. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.
	//
	// 4.  Example of a rule used to process DML messages
	//
	// 	- Example: {"dmlPolicies":[{"dmlType":"Delete","dmlAction":"Filter","filterCondition":"id > 1"}]}
	//
	// 	- If no rule of this type is configured, the default processing policy for messages generated for insert, update, and delete operations is Normal.
	//
	// 	- dmlType: the DML operation. Valid values: Insert, Update, and Delete.
	//
	// 	- dmlAction: the processing policy for DML messages. Valid values: Normal, Ignore, Filter, and LogicalDelete. Filter indicates conditional processing. The value Filter is returned for the dmlAction parameter only when the value of the dmlType parameter is Update or Delete.
	//
	// 	- filterCondition: the condition used to filter DML messages. This parameter is returned only when the value of the dmlAction parameter is Filter.
	//
	// 5.  Example of a rule used to perform incremental synchronization
	//
	// 	- Example: {"where":"id > 0"}
	//
	// 	- The rule used to perform incremental synchronization is returned.
	//
	// 6.  Example of a rule used to configure scheduling parameters for an auto triggered task
	//
	// 	- Example: {"cronExpress":" \\	- \\	- \\	- \\	- \\	- \\*", "cycleType":"1"}
	//
	// 	- The rule used to configure scheduling parameters for an auto triggered task is returned.
	//
	// 7.  Example of a rule used to specify a partition key
	//
	// 	- Example: {"columns":["id"]}
	//
	// 	- The rule used to specify a partition key is returned.
	//
	// example:
	//
	// {"expression":"${srcDatasoureName}_${srcDatabaseName}"}
	RuleExpression *string `json:"RuleExpression,omitempty" xml:"RuleExpression,omitempty"`
	// The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.
	//
	// example:
	//
	// rename_rule_1
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The type of the object on which the action is performed. Valid values:
	//
	// 	- Table
	//
	// 	- Schema
	//
	// 	- Database
	//
	// example:
	//
	// Table
	RuleTargetType *string `json:"RuleTargetType,omitempty" xml:"RuleTargetType,omitempty"`
}

func (s GetDIJobResponseBodyPagingInfoTransformationRules) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponseBodyPagingInfoTransformationRules) GoString() string {
	return s.String()
}

func (s *GetDIJobResponseBodyPagingInfoTransformationRules) SetRuleActionType(v string) *GetDIJobResponseBodyPagingInfoTransformationRules {
	s.RuleActionType = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoTransformationRules) SetRuleExpression(v string) *GetDIJobResponseBodyPagingInfoTransformationRules {
	s.RuleExpression = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoTransformationRules) SetRuleName(v string) *GetDIJobResponseBodyPagingInfoTransformationRules {
	s.RuleName = &v
	return s
}

func (s *GetDIJobResponseBodyPagingInfoTransformationRules) SetRuleTargetType(v string) *GetDIJobResponseBodyPagingInfoTransformationRules {
	s.RuleTargetType = &v
	return s
}

type GetDIJobResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDIJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDIJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobResponse) GoString() string {
	return s.String()
}

func (s *GetDIJobResponse) SetHeaders(v map[string]*string) *GetDIJobResponse {
	s.Headers = v
	return s
}

func (s *GetDIJobResponse) SetStatusCode(v int32) *GetDIJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDIJobResponse) SetBody(v *GetDIJobResponseBody) *GetDIJobResponse {
	s.Body = v
	return s
}

type GetDIJobLogRequest struct {
	// Deprecated
	//
	// This parameter is deprecated. Use the Id parameter instead.
	//
	// example:
	//
	// 10000
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The failover ID.
	//
	// example:
	//
	// 10
	FailoverId *int64 `json:"FailoverId,omitempty" xml:"FailoverId,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 10000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// 6153616438
	InstanceId *int64 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the node. This parameter is applicable only to the tasks that are run on serverless resource groups. Valid values:
	//
	// 	- **MASTER**: the master node, which is used to query the logs of JobManagers.
	//
	// 	- **WORKER**: the worker node, which is used to query the logs of TaskManagers.
	//
	// example:
	//
	// MASTER
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	// The page number of the pagination query. The value is a positive integer greater than or equal to 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s GetDIJobLogRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobLogRequest) GoString() string {
	return s.String()
}

func (s *GetDIJobLogRequest) SetDIJobId(v int64) *GetDIJobLogRequest {
	s.DIJobId = &v
	return s
}

func (s *GetDIJobLogRequest) SetFailoverId(v int64) *GetDIJobLogRequest {
	s.FailoverId = &v
	return s
}

func (s *GetDIJobLogRequest) SetId(v int64) *GetDIJobLogRequest {
	s.Id = &v
	return s
}

func (s *GetDIJobLogRequest) SetInstanceId(v int64) *GetDIJobLogRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDIJobLogRequest) SetNodeType(v string) *GetDIJobLogRequest {
	s.NodeType = &v
	return s
}

func (s *GetDIJobLogRequest) SetPageNumber(v int32) *GetDIJobLogRequest {
	s.PageNumber = &v
	return s
}

type GetDIJobLogResponseBody struct {
	// The log.
	//
	// example:
	//
	// >>>>>>>> stdout:n++++++++++++++++++executing sql: create database if not exists jindo_test location \\"oss://pangbei-hdfs/tmp/hive\\" n++n
	Log *string `json:"Log,omitempty" xml:"Log,omitempty"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 1AFAE64E-D1BE-432B-A9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDIJobLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobLogResponseBody) GoString() string {
	return s.String()
}

func (s *GetDIJobLogResponseBody) SetLog(v string) *GetDIJobLogResponseBody {
	s.Log = &v
	return s
}

func (s *GetDIJobLogResponseBody) SetRequestId(v string) *GetDIJobLogResponseBody {
	s.RequestId = &v
	return s
}

type GetDIJobLogResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDIJobLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDIJobLogResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDIJobLogResponse) GoString() string {
	return s.String()
}

func (s *GetDIJobLogResponse) SetHeaders(v map[string]*string) *GetDIJobLogResponse {
	s.Headers = v
	return s
}

func (s *GetDIJobLogResponse) SetStatusCode(v int32) *GetDIJobLogResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDIJobLogResponse) SetBody(v *GetDIJobLogResponseBody) *GetDIJobLogResponse {
	s.Body = v
	return s
}

type GetDataQualityEvaluationTaskRequest struct {
	// The ID of the data quality monitor.
	//
	// example:
	//
	// 1006455182
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetDataQualityEvaluationTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskRequest) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskRequest) SetId(v int64) *GetDataQualityEvaluationTaskRequest {
	s.Id = &v
	return s
}

type GetDataQualityEvaluationTaskResponseBody struct {
	// The details of the monitor.
	DataQualityEvaluationTask *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask `json:"DataQualityEvaluationTask,omitempty" xml:"DataQualityEvaluationTask,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDataQualityEvaluationTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskResponseBody) SetDataQualityEvaluationTask(v *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask) *GetDataQualityEvaluationTaskResponseBody {
	s.DataQualityEvaluationTask = v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBody) SetRequestId(v string) *GetDataQualityEvaluationTaskResponseBody {
	s.RequestId = &v
	return s
}

type GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask struct {
	// The ID of the data source used for the monitor.
	//
	// example:
	//
	// 45238
	DataSourceId *int64 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The description of the monitor.
	//
	// example:
	//
	// The description of the quality monitoring task.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The hook.
	Hooks []*GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskHooks `json:"Hooks,omitempty" xml:"Hooks,omitempty" type:"Repeated"`
	// The ID of the data quality monitor.
	//
	// example:
	//
	// 2178
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the monitor.
	//
	// This parameter is required.
	//
	// example:
	//
	// OpenAPI create a data quality monitoring test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configurations of alert notifications.
	Notifications *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Struct"`
	// The workspace ID.
	//
	// example:
	//
	// 2626
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Extended configuration, JSON-formatted string, takes effect only for EMR-type data quality monitoring.
	//
	// - queue: the yarn queue used when performing EMR data quality verification. The default queue is the queue configured for this project.
	//
	// - sqlEngine: SQL engine used when performing EMR data verification
	//
	//     - HIVE_ SQL
	//
	//     - SPARK_ SQL
	//
	// example:
	//
	// { "queue": "default", "sqlEngine": "SPARK_SQL" }
	RuntimeConf *string `json:"RuntimeConf,omitempty" xml:"RuntimeConf,omitempty"`
	// The monitored object of the monitor.
	Target *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The trigger configuration of the monitor.
	Trigger *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask) SetDataSourceId(v int64) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask {
	s.DataSourceId = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask) SetDescription(v string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask {
	s.Description = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask) SetHooks(v []*GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskHooks) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask {
	s.Hooks = v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask) SetId(v int64) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask {
	s.Id = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask) SetName(v string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask {
	s.Name = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask) SetNotifications(v *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotifications) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask {
	s.Notifications = v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask) SetProjectId(v int64) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask {
	s.ProjectId = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask) SetRuntimeConf(v string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask {
	s.RuntimeConf = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask) SetTarget(v *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTarget) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask {
	s.Target = v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask) SetTrigger(v *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTrigger) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTask {
	s.Trigger = v
	return s
}

type GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskHooks struct {
	// The hook trigger condition. When this condition is met, the hook action is triggered. Only two conditional expressions are supported:
	//
	// 	- Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
	//
	// 	- Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.
	//
	// example:
	//
	// (${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// The hook type. Only one hook type is supported.
	//
	// 	- BlockTaskInstance: Blocks the running of scheduling tasks. A monitor is triggered by scheduling tasks. After a monitor finishes running, the monitor determines whether to block the running of scheduling tasks based on the hook condition.
	//
	// example:
	//
	// BlockTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskHooks) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskHooks) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskHooks) SetCondition(v string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskHooks {
	s.Condition = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskHooks) SetType(v string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskHooks {
	s.Type = &v
	return s
}

type GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotifications struct {
	// The notification trigger condition. When this condition is met, the alert notification is triggered. Only two conditional expressions are supported:
	//
	// 	- Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
	//
	// 	- Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High"AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.
	//
	// example:
	//
	// (${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// The configurations of alert notifications.
	Notifications []*GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Repeated"`
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotifications) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotifications) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotifications) SetCondition(v string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotifications {
	s.Condition = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotifications) SetNotifications(v []*GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotifications) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotifications {
	s.Notifications = v
	return s
}

type GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotifications struct {
	// The alert notification methods.
	NotificationChannels []*GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationChannels `json:"NotificationChannels,omitempty" xml:"NotificationChannels,omitempty" type:"Repeated"`
	// The configurations of alert recipients.
	NotificationReceivers []*GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers `json:"NotificationReceivers,omitempty" xml:"NotificationReceivers,omitempty" type:"Repeated"`
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotifications) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotifications) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotifications) SetNotificationChannels(v []*GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationChannels) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotifications {
	s.NotificationChannels = v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotifications) SetNotificationReceivers(v []*GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotifications {
	s.NotificationReceivers = v
	return s
}

type GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationChannels struct {
	// The alert notification methods.
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationChannels) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationChannels) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationChannels) SetChannels(v []*string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationChannels {
	s.Channels = v
	return s
}

type GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers struct {
	// The extended information.
	//
	// example:
	//
	// {  "atAll": true }
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// The additional parameters that are required when alerts are sent. The parameters are JSON-formatted strings. The following keys are supported:
	//
	// 	- atAll: specifies that all members in a group are mentioned when alerts are sent by using DingTalk. This parameter is valid only if you set ReceiverType to DingdingUrl.
	//
	// Valid values:
	//
	// 	- WebhookUrl
	//
	// 	- FeishuUrl
	//
	// 	- DingdingUrl
	//
	// 	- WeixinUrl
	//
	// 	- AliUid
	//
	// example:
	//
	// DingdingUrl
	ReceiverType *string `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	// The alert recipients.
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers) SetExtension(v string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers {
	s.Extension = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers) SetReceiverType(v string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers) SetReceiverValues(v []*string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskNotificationsNotificationsNotificationReceivers {
	s.ReceiverValues = v
	return s
}

type GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTarget struct {
	// The type of the database to which the table belongs. Valid values:
	//
	// 	- maxcompute
	//
	// 	- hologres
	//
	// 	- cdh
	//
	// 	- analyticdb_for_mysql
	//
	// 	- starrocks
	//
	// 	- emr
	//
	// 	- analyticdb_for_postgresql
	//
	// example:
	//
	// maxcompute
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// Data quality monitoring partition range settings.
	//
	// example:
	//
	// pt=$[yyyymmdd-1]
	PartitionSpec *string `json:"PartitionSpec,omitempty" xml:"PartitionSpec,omitempty"`
	// The ID of the table in Data Map.
	//
	// example:
	//
	// odps.meta_open_api_test_sz.test_partition_tbl
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	// The type of the monitoring object.
	//
	// - Table: Table.
	//
	// example:
	//
	// Table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTarget) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTarget) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTarget) SetDatabaseType(v string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTarget {
	s.DatabaseType = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTarget) SetPartitionSpec(v string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTarget {
	s.PartitionSpec = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTarget) SetTableGuid(v string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTarget {
	s.TableGuid = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTarget) SetType(v string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTarget {
	s.Type = &v
	return s
}

type GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTrigger struct {
	// The IDs of scheduling tasks. This parameter is valid only if you set Type to ByScheduledTaskInstance.
	TaskIds []*int64 `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
	// The trigger type of the monitor. Valid values:
	//
	// 	- ByManual: The monitor is manually triggered.
	//
	// 	- ByScheduledTaskInstance: The monitor is triggered by associated scheduling tasks.
	//
	// 	- ByQualityNode: The monitor is triggered by created data quality monitoring nodes.
	//
	// example:
	//
	// ByScheduledTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTrigger) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTrigger) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTrigger) SetTaskIds(v []*int64) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTrigger {
	s.TaskIds = v
	return s
}

func (s *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTrigger) SetType(v string) *GetDataQualityEvaluationTaskResponseBodyDataQualityEvaluationTaskTrigger {
	s.Type = &v
	return s
}

type GetDataQualityEvaluationTaskResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDataQualityEvaluationTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDataQualityEvaluationTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskResponse) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskResponse) SetHeaders(v map[string]*string) *GetDataQualityEvaluationTaskResponse {
	s.Headers = v
	return s
}

func (s *GetDataQualityEvaluationTaskResponse) SetStatusCode(v int32) *GetDataQualityEvaluationTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDataQualityEvaluationTaskResponse) SetBody(v *GetDataQualityEvaluationTaskResponseBody) *GetDataQualityEvaluationTaskResponse {
	s.Body = v
	return s
}

type GetDataQualityEvaluationTaskInstanceRequest struct {
	// The ID of the data quality monitoring instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7227550902
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceRequest) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceRequest) SetId(v int64) *GetDataQualityEvaluationTaskInstanceRequest {
	s.Id = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBody struct {
	// The details of the monitor instance.
	DataQualityEvaluationTaskInstance *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance `json:"DataQualityEvaluationTaskInstance,omitempty" xml:"DataQualityEvaluationTaskInstance,omitempty" type:"Struct"`
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// 8abcb91f-d266-4073-b907-2ed670378ed1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBody) SetDataQualityEvaluationTaskInstance(v *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance) *GetDataQualityEvaluationTaskInstanceResponseBody {
	s.DataQualityEvaluationTaskInstance = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBody) SetRequestId(v string) *GetDataQualityEvaluationTaskInstanceResponseBody {
	s.RequestId = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance struct {
	// The creation time.
	//
	// example:
	//
	// 1716344665000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The end time of the instance.
	//
	// example:
	//
	// 1716344665000
	FinishTime *int64 `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The ID of the data quality monitoring instance.
	//
	// example:
	//
	// 7234231689
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Data quality verification execution parameters in JSON format. The available keys are as follows:
	//
	// - triggerTime: the millisecond timestamp of the trigger time. The baseline time of the $[yyyymmdd] expression in the data range of data quality monitoring. Required.
	//
	// example:
	//
	// { "triggerTime": 1733284062000 }
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The ID of the workspace.
	//
	// example:
	//
	// 98330
	ProjectId *int64                                                                                      `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Results   []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
	// The status of the data quality monitoring instance.
	//
	// - Running: Verifying
	//
	// - Error: A rule verification Error occurred.
	//
	// - Passed: all rules are verified
	//
	// - Warned: normal alarm threshold triggered by rules
	//
	// - Critical: Threshold for serious alerts triggered by rules
	//
	// example:
	//
	// Passed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The monitor.
	Task *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask `json:"Task,omitempty" xml:"Task,omitempty" type:"Struct"`
	// The context information when the instance is triggered, in JSON format. The possible keys are as follows:
	//
	// - TriggerClient: the trigger source of the data quality monitoring instance, such as CWF2 (scheduling system), may be added later.
	//
	// - TriggerClientId: associated with a specific business resource in the source system. For example, if TriggerClient is CWF2, the ID of the scheduling task is recorded here.
	//
	// example:
	//
	// { "triggerClient": "CWF2", "triggerClientId": 70001238945 }
	TriggerContext *string `json:"TriggerContext,omitempty" xml:"TriggerContext,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance) SetCreateTime(v int64) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance {
	s.CreateTime = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance) SetFinishTime(v int64) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance {
	s.FinishTime = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance) SetId(v int64) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance {
	s.Id = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance) SetParameters(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance {
	s.Parameters = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance) SetProjectId(v int64) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance {
	s.ProjectId = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance) SetResults(v []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance {
	s.Results = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance) SetStatus(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance {
	s.Status = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance) SetTask(v *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance {
	s.Task = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance) SetTriggerContext(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstance {
	s.TriggerContext = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults struct {
	CreateTime     *int64                                                                                             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Details        []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsDetails `json:"Details,omitempty" xml:"Details,omitempty" type:"Repeated"`
	Id             *int64                                                                                             `json:"Id,omitempty" xml:"Id,omitempty"`
	Rule           *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule      `json:"Rule,omitempty" xml:"Rule,omitempty" type:"Struct"`
	Sample         *string                                                                                            `json:"Sample,omitempty" xml:"Sample,omitempty"`
	Status         *string                                                                                            `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskInstanceId *int64                                                                                             `json:"TaskInstanceId,omitempty" xml:"TaskInstanceId,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults) SetCreateTime(v int64) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults {
	s.CreateTime = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults) SetDetails(v []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsDetails) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults {
	s.Details = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults) SetId(v int64) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults {
	s.Id = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults) SetRule(v *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults {
	s.Rule = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults) SetSample(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults {
	s.Sample = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults) SetStatus(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults {
	s.Status = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults) SetTaskInstanceId(v int64) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResults {
	s.TaskInstanceId = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsDetails struct {
	CheckedValue    *string `json:"CheckedValue,omitempty" xml:"CheckedValue,omitempty"`
	ReferencedValue *string `json:"ReferencedValue,omitempty" xml:"ReferencedValue,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsDetails) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsDetails) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsDetails) SetCheckedValue(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsDetails {
	s.CheckedValue = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsDetails) SetReferencedValue(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsDetails {
	s.ReferencedValue = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsDetails) SetStatus(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsDetails {
	s.Status = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule struct {
	CheckingConfig *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfig  `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	Description    *string                                                                                                      `json:"Description,omitempty" xml:"Description,omitempty"`
	Enabled        *bool                                                                                                        `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	ErrorHandlers  []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleErrorHandlers `json:"ErrorHandlers,omitempty" xml:"ErrorHandlers,omitempty" type:"Repeated"`
	Id             *int64                                                                                                       `json:"Id,omitempty" xml:"Id,omitempty"`
	Name           *string                                                                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	ProjectId      *int64                                                                                                       `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	SamplingConfig *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleSamplingConfig  `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	Severity       *string                                                                                                      `json:"Severity,omitempty" xml:"Severity,omitempty"`
	Target         *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleTarget          `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	TemplateCode   *string                                                                                                      `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) SetCheckingConfig(v *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfig) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule {
	s.CheckingConfig = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) SetDescription(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule {
	s.Description = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) SetEnabled(v bool) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule {
	s.Enabled = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) SetErrorHandlers(v []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleErrorHandlers) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule {
	s.ErrorHandlers = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) SetId(v int64) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule {
	s.Id = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) SetName(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule {
	s.Name = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) SetProjectId(v int64) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule {
	s.ProjectId = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) SetSamplingConfig(v *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleSamplingConfig) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule {
	s.SamplingConfig = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) SetSeverity(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule {
	s.Severity = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) SetTarget(v *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleTarget) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule {
	s.Target = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule) SetTemplateCode(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRule {
	s.TemplateCode = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfig struct {
	ReferencedSamplesFilter *string                                                                                                               `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	Thresholds              *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholds `json:"Thresholds,omitempty" xml:"Thresholds,omitempty" type:"Struct"`
	Type                    *string                                                                                                               `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfig) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfig) SetReferencedSamplesFilter(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfig) SetThresholds(v *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholds) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfig {
	s.Thresholds = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfig) SetType(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfig {
	s.Type = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholds struct {
	Critical *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	Expected *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsExpected `json:"Expected,omitempty" xml:"Expected,omitempty" type:"Struct"`
	Warned   *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsWarned   `json:"Warned,omitempty" xml:"Warned,omitempty" type:"Struct"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholds) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholds) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholds) SetCritical(v *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsCritical) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholds {
	s.Critical = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholds) SetExpected(v *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsExpected) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholds {
	s.Expected = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholds) SetWarned(v *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsWarned) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholds {
	s.Warned = v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsCritical struct {
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	Operator   *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	Value      *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsCritical) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsCritical) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsCritical) SetExpression(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsCritical {
	s.Expression = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsCritical) SetOperator(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsCritical {
	s.Operator = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsCritical) SetValue(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsCritical {
	s.Value = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsExpected struct {
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	Operator   *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	Value      *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsExpected) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsExpected) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsExpected) SetExpression(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsExpected {
	s.Expression = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsExpected) SetOperator(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsExpected {
	s.Operator = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsExpected) SetValue(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsExpected {
	s.Value = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsWarned struct {
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	Operator   *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	Value      *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsWarned) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsWarned) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsWarned) SetExpression(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsWarned {
	s.Expression = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsWarned) SetOperator(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsWarned {
	s.Operator = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsWarned) SetValue(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleCheckingConfigThresholdsWarned {
	s.Value = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleErrorHandlers struct {
	ErrorDataFilter *string `json:"ErrorDataFilter,omitempty" xml:"ErrorDataFilter,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleErrorHandlers) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleErrorHandlers) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleErrorHandlers) SetErrorDataFilter(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleErrorHandlers {
	s.ErrorDataFilter = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleErrorHandlers) SetType(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleErrorHandlers {
	s.Type = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleSamplingConfig struct {
	Metric           *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	SamplingFilter   *string `json:"SamplingFilter,omitempty" xml:"SamplingFilter,omitempty"`
	SettingConfig    *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleSamplingConfig) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleSamplingConfig) SetMetric(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleSamplingConfig {
	s.Metric = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleSamplingConfig) SetMetricParameters(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleSamplingConfig) SetSamplingFilter(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleSamplingConfig {
	s.SamplingFilter = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleSamplingConfig) SetSettingConfig(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleSamplingConfig {
	s.SettingConfig = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleTarget struct {
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	TableGuid    *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleTarget) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleTarget) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleTarget) SetDatabaseType(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleTarget {
	s.DatabaseType = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleTarget) SetTableGuid(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleTarget {
	s.TableGuid = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleTarget) SetType(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceResultsRuleTarget {
	s.Type = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask struct {
	// The description of the monitor.
	//
	// example:
	//
	// OpenAPI quality monitoring test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The hook.
	Hooks []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskHooks `json:"Hooks,omitempty" xml:"Hooks,omitempty" type:"Repeated"`
	// The ID of the data quality monitor.
	//
	// example:
	//
	// 28544990
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the monitor.
	//
	// example:
	//
	// Data quality OpenAPI monitoring test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configurations of alert notifications.
	Notifications *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Struct"`
	// The ID of the workspace.
	//
	// example:
	//
	// 20629
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Extended configuration, JSON-formatted string, takes effect only for EMR-type data quality monitoring.
	//
	// - queue: the yarn queue used when performing EMR data quality verification. The default queue is the queue configured for this project.
	//
	// - sqlEngine: SQL engine used when performing EMR data verification
	//
	//   - HIVE_ SQL
	//
	//   - SPARK_ SQL
	//
	// example:
	//
	// { "queue": "default" }
	RuntimeConf *string `json:"RuntimeConf,omitempty" xml:"RuntimeConf,omitempty"`
	// The monitored object of the monitor.
	Target *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The trigger configuration of the monitor.
	Trigger *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask) SetDescription(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask {
	s.Description = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask) SetHooks(v []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskHooks) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask {
	s.Hooks = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask) SetId(v int64) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask {
	s.Id = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask) SetName(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask {
	s.Name = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask) SetNotifications(v *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotifications) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask {
	s.Notifications = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask) SetProjectId(v int64) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask {
	s.ProjectId = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask) SetRuntimeConf(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask {
	s.RuntimeConf = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask) SetTarget(v *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTarget) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask {
	s.Target = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask) SetTrigger(v *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTrigger) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTask {
	s.Trigger = v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskHooks struct {
	// The hook trigger condition. When this condition is met, the hook action is triggered. Only two conditional expressions are supported:
	//
	// 	- Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
	//
	// 	- Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.
	//
	// example:
	//
	// (${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// Hook type. Currently, only one type is supported:
	//
	// - BlockTaskInstance: the blocking scheduling task continues to run. Data quality monitoring is triggered by the scheduling task. After the data quality monitoring is completed, the Hook.Condition is used to determine whether the blocking scheduling task continues to run.
	//
	// example:
	//
	// BlockTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskHooks) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskHooks) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskHooks) SetCondition(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskHooks {
	s.Condition = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskHooks) SetType(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskHooks {
	s.Type = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotifications struct {
	// The notification trigger condition. When this condition is met, the alert notification is triggered. Only two conditional expressions are supported:
	//
	// 	- Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
	//
	// 	- Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.
	//
	// example:
	//
	// ${severity} == "High" AND ${status} == "Critical"
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// The alert notification methods.
	Notifications []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Repeated"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotifications) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotifications) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotifications) SetCondition(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotifications {
	s.Condition = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotifications) SetNotifications(v []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotifications) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotifications {
	s.Notifications = v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotifications struct {
	// The notification method.
	NotificationChannels []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels `json:"NotificationChannels,omitempty" xml:"NotificationChannels,omitempty" type:"Repeated"`
	// The value of the receiver.
	NotificationReceivers []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers `json:"NotificationReceivers,omitempty" xml:"NotificationReceivers,omitempty" type:"Repeated"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotifications) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotifications) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotifications) SetNotificationChannels(v []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotifications {
	s.NotificationChannels = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotifications) SetNotificationReceivers(v []*GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotifications {
	s.NotificationReceivers = v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels struct {
	// The notification method.
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels) SetChannels(v []*string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationChannels {
	s.Channels = v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers struct {
	// Additional parameter settings for sending alerts in json format. The supported keys are as follows:
	//
	// - atAll: when sending DingTalk alerts, do you need to @ everyone in the group. It takes effect when ReceiverType is DingdingUrl.
	//
	// example:
	//
	// { "atAll": true }
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// The type of alert recipient.
	//
	// example:
	//
	// DingdingUrl
	ReceiverType *string `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	// The recipient of the alert.
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers) SetExtension(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers {
	s.Extension = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers) SetReceiverType(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers) SetReceiverValues(v []*string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskNotificationsNotificationsNotificationReceivers {
	s.ReceiverValues = v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTarget struct {
	// The type of the database to which the table belongs.
	//
	// example:
	//
	// maxcompute
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The partition range monitored.
	//
	// example:
	//
	// pt=$[yyyymmdd-1]
	PartitionSpec *string `json:"PartitionSpec,omitempty" xml:"PartitionSpec,omitempty"`
	// The unique ID of the table in the data map.
	//
	// example:
	//
	// odps.api_trace.ods_d_api_log
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	// The type of the monitoring object.
	//
	// - Table: Table
	//
	// example:
	//
	// Table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTarget) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTarget) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTarget) SetDatabaseType(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTarget {
	s.DatabaseType = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTarget) SetPartitionSpec(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTarget {
	s.PartitionSpec = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTarget) SetTableGuid(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTarget {
	s.TableGuid = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTarget) SetType(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTarget {
	s.Type = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTrigger struct {
	// The Id list of the scheduled task, which is valid when the Type is ByScheduledTaskInstance.
	TaskIds []*int64 `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
	// The trigger type of the monitor. Valid values:
	//
	// 	- ByManual (default): The monitor is manually triggered.
	//
	// 	- ByScheduledTaskInstance: The monitor is triggered by the associated scheduling tasks.
	//
	// example:
	//
	// ByScheduledTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTrigger) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTrigger) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTrigger) SetTaskIds(v []*int64) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTrigger {
	s.TaskIds = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTrigger) SetType(v string) *GetDataQualityEvaluationTaskInstanceResponseBodyDataQualityEvaluationTaskInstanceTaskTrigger {
	s.Type = &v
	return s
}

type GetDataQualityEvaluationTaskInstanceResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDataQualityEvaluationTaskInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDataQualityEvaluationTaskInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityEvaluationTaskInstanceResponse) GoString() string {
	return s.String()
}

func (s *GetDataQualityEvaluationTaskInstanceResponse) SetHeaders(v map[string]*string) *GetDataQualityEvaluationTaskInstanceResponse {
	s.Headers = v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponse) SetStatusCode(v int32) *GetDataQualityEvaluationTaskInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDataQualityEvaluationTaskInstanceResponse) SetBody(v *GetDataQualityEvaluationTaskInstanceResponseBody) *GetDataQualityEvaluationTaskInstanceResponse {
	s.Body = v
	return s
}

type GetDataQualityRuleRequest struct {
	// The rule ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 19715
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetDataQualityRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleRequest) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleRequest) SetId(v int64) *GetDataQualityRuleRequest {
	s.Id = &v
	return s
}

type GetDataQualityRuleResponseBody struct {
	// The information about the rule.
	DataQualityRule *GetDataQualityRuleResponseBodyDataQualityRule `json:"DataQualityRule,omitempty" xml:"DataQualityRule,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDataQualityRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleResponseBody) SetDataQualityRule(v *GetDataQualityRuleResponseBodyDataQualityRule) *GetDataQualityRuleResponseBody {
	s.DataQualityRule = v
	return s
}

func (s *GetDataQualityRuleResponseBody) SetRequestId(v string) *GetDataQualityRuleResponseBody {
	s.RequestId = &v
	return s
}

type GetDataQualityRuleResponseBodyDataQualityRule struct {
	// The check settings for sample data.
	CheckingConfig *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	// The description of the rule. The description can be up to 500 characters in length.
	//
	// example:
	//
	// this is a odps _sql task
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Indicates whether the rule is enabled.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The operations that you can perform after the rule-based check fails.
	ErrorHandlers []*GetDataQualityRuleResponseBodyDataQualityRuleErrorHandlers `json:"ErrorHandlers,omitempty" xml:"ErrorHandlers,omitempty" type:"Repeated"`
	// The rule ID.
	//
	// example:
	//
	// 16033
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The rule name.
	//
	// example:
	//
	// The table cannot be empty.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 1948
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The sampling settings.
	SamplingConfig *GetDataQualityRuleResponseBodyDataQualityRuleSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	// Rule for the business level (corresponding to the strong and weak rules on the page), optional enumeration value:
	//
	// - Normal
	//
	// - High
	//
	// example:
	//
	// High
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The monitored object of the rule.
	Target *GetDataQualityRuleResponseBodyDataQualityRuleTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The ID of the template used by the rule.
	//
	// example:
	//
	// system::user_defined
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s GetDataQualityRuleResponseBodyDataQualityRule) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleResponseBodyDataQualityRule) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleResponseBodyDataQualityRule) SetCheckingConfig(v *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfig) *GetDataQualityRuleResponseBodyDataQualityRule {
	s.CheckingConfig = v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRule) SetDescription(v string) *GetDataQualityRuleResponseBodyDataQualityRule {
	s.Description = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRule) SetEnabled(v bool) *GetDataQualityRuleResponseBodyDataQualityRule {
	s.Enabled = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRule) SetErrorHandlers(v []*GetDataQualityRuleResponseBodyDataQualityRuleErrorHandlers) *GetDataQualityRuleResponseBodyDataQualityRule {
	s.ErrorHandlers = v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRule) SetId(v int64) *GetDataQualityRuleResponseBodyDataQualityRule {
	s.Id = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRule) SetName(v string) *GetDataQualityRuleResponseBodyDataQualityRule {
	s.Name = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRule) SetProjectId(v int64) *GetDataQualityRuleResponseBodyDataQualityRule {
	s.ProjectId = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRule) SetSamplingConfig(v *GetDataQualityRuleResponseBodyDataQualityRuleSamplingConfig) *GetDataQualityRuleResponseBodyDataQualityRule {
	s.SamplingConfig = v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRule) SetSeverity(v string) *GetDataQualityRuleResponseBodyDataQualityRule {
	s.Severity = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRule) SetTarget(v *GetDataQualityRuleResponseBodyDataQualityRuleTarget) *GetDataQualityRuleResponseBodyDataQualityRule {
	s.Target = v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRule) SetTemplateCode(v string) *GetDataQualityRuleResponseBodyDataQualityRule {
	s.TemplateCode = &v
	return s
}

type GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfig struct {
	// The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference values. In this example, an expression is used to indicate the query method of referenced samples.
	//
	// example:
	//
	// { "bizdate": [ "-1", "-7", "-1m" ] }
	ReferencedSamplesFilter *string `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	// The threshold settings.
	Thresholds *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholds `json:"Thresholds,omitempty" xml:"Thresholds,omitempty" type:"Struct"`
	// The threshold calculation method. Valid values:
	//
	// 	- Fixed
	//
	// 	- Fluctation
	//
	// 	- FluctationDiscreate
	//
	// 	- Auto
	//
	// 	- Average
	//
	// 	- Variance
	//
	// example:
	//
	// Fixed
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfig) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfig) SetReferencedSamplesFilter(v string) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfig) SetThresholds(v *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholds) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfig {
	s.Thresholds = v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfig) SetType(v string) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfig {
	s.Type = &v
	return s
}

type GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholds struct {
	// The threshold settings for critical alerts.
	Critical *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	// The expected threshold setting.
	Expected *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsExpected `json:"Expected,omitempty" xml:"Expected,omitempty" type:"Struct"`
	// The threshold settings for normal alerts.
	Warned *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsWarned `json:"Warned,omitempty" xml:"Warned,omitempty" type:"Struct"`
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholds) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholds) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholds) SetCritical(v *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsCritical) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholds {
	s.Critical = v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholds) SetExpected(v *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsExpected) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholds {
	s.Expected = v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholds) SetWarned(v *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsWarned) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholds {
	s.Warned = v
	return s
}

type GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsCritical struct {
	// The threshold expression.
	//
	// example:
	//
	// $checkValue > 0.05
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsCritical) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsCritical) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsCritical) SetExpression(v string) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsCritical {
	s.Expression = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsCritical) SetOperator(v string) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsCritical {
	s.Operator = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsCritical) SetValue(v string) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsCritical {
	s.Value = &v
	return s
}

type GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsExpected struct {
	// The threshold expression.
	//
	// example:
	//
	// $checkValue <= 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsExpected) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsExpected) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsExpected) SetExpression(v string) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsExpected {
	s.Expression = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsExpected) SetOperator(v string) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsExpected {
	s.Operator = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsExpected) SetValue(v string) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsExpected {
	s.Value = &v
	return s
}

type GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsWarned struct {
	// The threshold expression.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsWarned) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsWarned) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsWarned) SetExpression(v string) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsWarned {
	s.Expression = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsWarned) SetOperator(v string) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsWarned {
	s.Operator = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsWarned) SetValue(v string) *GetDataQualityRuleResponseBodyDataQualityRuleCheckingConfigThresholdsWarned {
	s.Value = &v
	return s
}

type GetDataQualityRuleResponseBodyDataQualityRuleErrorHandlers struct {
	// The SQL statement that is used to filter failed tasks. If you define the rule by using custom SQL statements, you must specify an SQL statement to filter failed tasks.
	//
	// example:
	//
	// SELECT 	- FROM tb_api_log WHERE id IS NULL
	ErrorDataFilter *string `json:"ErrorDataFilter,omitempty" xml:"ErrorDataFilter,omitempty"`
	// Processor type:
	//
	// - SaveErrorData
	//
	// example:
	//
	// SaveErrorData
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleErrorHandlers) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleErrorHandlers) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleErrorHandlers) SetErrorDataFilter(v string) *GetDataQualityRuleResponseBodyDataQualityRuleErrorHandlers {
	s.ErrorDataFilter = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleErrorHandlers) SetType(v string) *GetDataQualityRuleResponseBodyDataQualityRuleErrorHandlers {
	s.Type = &v
	return s
}

type GetDataQualityRuleResponseBodyDataQualityRuleSamplingConfig struct {
	// The metrics used for sampling. Valid values:
	//
	// 	- Count: the number of rows in the table.
	//
	// 	- Min: the minimum value of the field.
	//
	// 	- Max: the maximum value of the field.
	//
	// 	- Avg: the average value of the field.
	//
	// 	- DistinctCount: the number of unique values of the field after deduplication.
	//
	// 	- DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
	//
	// 	- DuplicatedCount: the number of duplicated values of the field.
	//
	// 	- DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
	//
	// 	- TableSize: the table size.
	//
	// 	- NullValueCount: the number of rows in which the field value is null.
	//
	// 	- NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
	//
	// 	- GroupCount: the field value and the number of rows for each field value.
	//
	// 	- CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
	//
	// 	- CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
	//
	// 	- UserDefinedSql: indicates that data is sampled by executing custom SQL statements.
	//
	// example:
	//
	// Max
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The parameters required for sampling.
	//
	// example:
	//
	// { "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.
	//
	// example:
	//
	// id IS NULL
	SamplingFilter *string `json:"SamplingFilter,omitempty" xml:"SamplingFilter,omitempty"`
	// The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.
	//
	// example:
	//
	// SET odps.sql.udf.timeout=600s;
	//
	// SET odps.sql.python.version=cp27;
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleSamplingConfig) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleSamplingConfig) SetMetric(v string) *GetDataQualityRuleResponseBodyDataQualityRuleSamplingConfig {
	s.Metric = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleSamplingConfig) SetMetricParameters(v string) *GetDataQualityRuleResponseBodyDataQualityRuleSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleSamplingConfig) SetSamplingFilter(v string) *GetDataQualityRuleResponseBodyDataQualityRuleSamplingConfig {
	s.SamplingFilter = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleSamplingConfig) SetSettingConfig(v string) *GetDataQualityRuleResponseBodyDataQualityRuleSamplingConfig {
	s.SettingConfig = &v
	return s
}

type GetDataQualityRuleResponseBodyDataQualityRuleTarget struct {
	// The dataset of the table type. The database type to which the table belongs.
	//
	// - maxcompute
	//
	// - emr
	//
	// - cdh
	//
	// - hologres
	//
	// - analyticdb_for_postgresql
	//
	// - analyticdb_for_mysql
	//
	// - starrocks
	//
	// example:
	//
	// maxcompute
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The configuration of the partitioned table.
	//
	// example:
	//
	// ds=$[yyyymmdd-1]
	PartitionSpec *string `json:"PartitionSpec,omitempty" xml:"PartitionSpec,omitempty"`
	// The ID of the table that is limited by the rule in Data Map.
	//
	// example:
	//
	// odps.unit_test.tb_unit_test
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	// Monitoring object type
	//
	// - Table
	//
	// example:
	//
	// Table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleTarget) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleResponseBodyDataQualityRuleTarget) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleTarget) SetDatabaseType(v string) *GetDataQualityRuleResponseBodyDataQualityRuleTarget {
	s.DatabaseType = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleTarget) SetPartitionSpec(v string) *GetDataQualityRuleResponseBodyDataQualityRuleTarget {
	s.PartitionSpec = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleTarget) SetTableGuid(v string) *GetDataQualityRuleResponseBodyDataQualityRuleTarget {
	s.TableGuid = &v
	return s
}

func (s *GetDataQualityRuleResponseBodyDataQualityRuleTarget) SetType(v string) *GetDataQualityRuleResponseBodyDataQualityRuleTarget {
	s.Type = &v
	return s
}

type GetDataQualityRuleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDataQualityRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDataQualityRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleResponse) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleResponse) SetHeaders(v map[string]*string) *GetDataQualityRuleResponse {
	s.Headers = v
	return s
}

func (s *GetDataQualityRuleResponse) SetStatusCode(v int32) *GetDataQualityRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDataQualityRuleResponse) SetBody(v *GetDataQualityRuleResponseBody) *GetDataQualityRuleResponse {
	s.Body = v
	return s
}

type GetDataQualityRuleTemplateRequest struct {
	// The code for the template.
	//
	// This parameter is required.
	//
	// example:
	//
	// USER_DEFINED:123
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s GetDataQualityRuleTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleTemplateRequest) SetCode(v string) *GetDataQualityRuleTemplateRequest {
	s.Code = &v
	return s
}

type GetDataQualityRuleTemplateResponseBody struct {
	// The information about the template.
	DataQualityRuleTemplate *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate `json:"DataQualityRuleTemplate,omitempty" xml:"DataQualityRuleTemplate,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDataQualityRuleTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleTemplateResponseBody) SetDataQualityRuleTemplate(v *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate) *GetDataQualityRuleTemplateResponseBody {
	s.DataQualityRuleTemplate = v
	return s
}

func (s *GetDataQualityRuleTemplateResponseBody) SetRequestId(v string) *GetDataQualityRuleTemplateResponseBody {
	s.RequestId = &v
	return s
}

type GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate struct {
	// The check settings for sample data.
	CheckingConfig *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	// The code for the template.
	//
	// example:
	//
	// USER_DEFINED:123
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).
	//
	// example:
	//
	// /ods/order_data
	DirectoryPath *string `json:"DirectoryPath,omitempty" xml:"DirectoryPath,omitempty"`
	// The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.
	//
	// example:
	//
	// Table row Count Verification
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 4020
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The sampling settings.
	SamplingConfig *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	// Available range of templates:
	//
	// - Tenant: all tenants are available
	//
	// - Project: only available in the current Project
	//
	// example:
	//
	// Project
	VisibleScope *string `json:"VisibleScope,omitempty" xml:"VisibleScope,omitempty"`
}

func (s GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate) SetCheckingConfig(v *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateCheckingConfig) *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate {
	s.CheckingConfig = v
	return s
}

func (s *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate) SetCode(v string) *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate {
	s.Code = &v
	return s
}

func (s *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate) SetDirectoryPath(v string) *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate {
	s.DirectoryPath = &v
	return s
}

func (s *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate) SetName(v string) *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate {
	s.Name = &v
	return s
}

func (s *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate) SetProjectId(v int64) *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate {
	s.ProjectId = &v
	return s
}

func (s *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate) SetSamplingConfig(v *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateSamplingConfig) *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate {
	s.SamplingConfig = v
	return s
}

func (s *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate) SetVisibleScope(v string) *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplate {
	s.VisibleScope = &v
	return s
}

type GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateCheckingConfig struct {
	// The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference samples and perform aggregate operations on the reference values. In this example, an expression is used to indicate the query method of referenced samples.
	//
	// example:
	//
	// { "bizdate": [ "-1", "-7", "-1m" ] }
	ReferencedSamplesFilter *string `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	// The threshold calculation method. Valid values:
	//
	// 	- Fixed
	//
	// 	- Fluctation
	//
	// 	- FluctationDiscreate
	//
	// 	- Auto
	//
	// 	- Average
	//
	// 	- Variance
	//
	// example:
	//
	// Fixed
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateCheckingConfig) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateCheckingConfig) SetReferencedSamplesFilter(v string) *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateCheckingConfig) SetType(v string) *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateCheckingConfig {
	s.Type = &v
	return s
}

type GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateSamplingConfig struct {
	// The metrics used for sampling. Valid values:
	//
	// 	- Count: the number of rows in the table.
	//
	// 	- Min: the minimum value of the field.
	//
	// 	- Max: the maximum value of the field.
	//
	// 	- Avg: the average value of the field.
	//
	// 	- DistinctCount: the number of unique values of the field after deduplication.
	//
	// 	- DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
	//
	// 	- DuplicatedCount: the number of duplicated values of the field.
	//
	// 	- DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
	//
	// 	- TableSize: the table size.
	//
	// 	- NullValueCount: the number of rows in which the field value is null.
	//
	// 	- NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
	//
	// 	- GroupCount: the field value and the number of rows for each field value.
	//
	// 	- CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
	//
	// 	- CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
	//
	// 	- UserDefinedSql: indicates that data is sampled by executing custom SQL statements.
	//
	// example:
	//
	// Max
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The parameters required for sampling.
	//
	// example:
	//
	// {"SQL": "select count(1) from table;"}
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.
	//
	// example:
	//
	// SET odps.sql.udf.timeout=600s;
	//
	// SET odps.sql.python.version=cp27;
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateSamplingConfig) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateSamplingConfig) SetMetric(v string) *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateSamplingConfig {
	s.Metric = &v
	return s
}

func (s *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateSamplingConfig) SetMetricParameters(v string) *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateSamplingConfig) SetSettingConfig(v string) *GetDataQualityRuleTemplateResponseBodyDataQualityRuleTemplateSamplingConfig {
	s.SettingConfig = &v
	return s
}

type GetDataQualityRuleTemplateResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDataQualityRuleTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDataQualityRuleTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataQualityRuleTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetDataQualityRuleTemplateResponse) SetHeaders(v map[string]*string) *GetDataQualityRuleTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetDataQualityRuleTemplateResponse) SetStatusCode(v int32) *GetDataQualityRuleTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDataQualityRuleTemplateResponse) SetBody(v *GetDataQualityRuleTemplateResponseBody) *GetDataQualityRuleTemplateResponse {
	s.Body = v
	return s
}

type GetDataSourceRequest struct {
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 16035
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceRequest) GoString() string {
	return s.String()
}

func (s *GetDataSourceRequest) SetId(v int64) *GetDataSourceRequest {
	s.Id = &v
	return s
}

type GetDataSourceResponseBody struct {
	// The information about the data source.
	DataSource *GetDataSourceResponseBodyDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 9252F32F-D855-549E-8898-61CF5A733050
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataSourceResponseBody) SetDataSource(v *GetDataSourceResponseBodyDataSource) *GetDataSourceResponseBody {
	s.DataSource = v
	return s
}

func (s *GetDataSourceResponseBody) SetRequestId(v string) *GetDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type GetDataSourceResponseBodyDataSource struct {
	// The connection configurations of the data source, including the connection address, access identity, and environment information. The envType parameter specifies the environment in which the data source is used. Valid values of the envType parameter:
	//
	// 	- Dev: development environment
	//
	// 	- Prod: production environment
	//
	// The parameters that you need to configure for the data source vary based on the mode in which the data source is added. For more information, see [Data source connection information (ConnectionProperties)](https://help.aliyun.com/document_detail/2852465.html).
	//
	// example:
	//
	// {
	//
	// 	"envType": "Prod",
	//
	// 	"regionId": "cn-beijing",
	//
	//     "instanceId": "hgprecn-cn-x0r3oun4k001",
	//
	//     "database": "testdb",
	//
	//     "securityProtocol": "authTypeNone",
	//
	//     "authType": "Executor",
	//
	//     "authIdentity": "1107550004253538"
	//
	// }
	ConnectionProperties interface{} `json:"ConnectionProperties,omitempty" xml:"ConnectionProperties,omitempty"`
	// The mode in which the data source is added. The mode varies based on the data source type. Valid values:
	//
	// 	- InstanceMode: instance mode
	//
	// 	- UrlMode: connection string mode
	//
	// 	- CdhMode: CDH cluster mode
	//
	// example:
	//
	// UrlMode
	ConnectionPropertiesMode *string `json:"ConnectionPropertiesMode,omitempty" xml:"ConnectionPropertiesMode,omitempty"`
	// The time when the data source was added. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1698286929333
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the user who adds the data source.
	//
	// example:
	//
	// 1107550004253538
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The description of the data source.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The data source ID.
	//
	// example:
	//
	// 16738
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The time when the data source was last modified. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1698286929333
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The ID of the user who modifies the data source.
	//
	// example:
	//
	// 1107550004253538
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The name of the data source.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the workspace with which the data source is associated.
	//
	// example:
	//
	// 52660
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The unique business key of the data source. For example, the unique business key of a Hologres data source is in the `${tenantOwnerId}:${regionId}:${type}:${instanceId}:${database}` format.
	//
	// example:
	//
	// 1107550004253538:cn-beijing:holo:hgprecn-cn-x0r3oun4k001:testdb
	QualifiedName *string `json:"QualifiedName,omitempty" xml:"QualifiedName,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// hologres
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDataSourceResponseBodyDataSource) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceResponseBodyDataSource) GoString() string {
	return s.String()
}

func (s *GetDataSourceResponseBodyDataSource) SetConnectionProperties(v interface{}) *GetDataSourceResponseBodyDataSource {
	s.ConnectionProperties = v
	return s
}

func (s *GetDataSourceResponseBodyDataSource) SetConnectionPropertiesMode(v string) *GetDataSourceResponseBodyDataSource {
	s.ConnectionPropertiesMode = &v
	return s
}

func (s *GetDataSourceResponseBodyDataSource) SetCreateTime(v int64) *GetDataSourceResponseBodyDataSource {
	s.CreateTime = &v
	return s
}

func (s *GetDataSourceResponseBodyDataSource) SetCreateUser(v string) *GetDataSourceResponseBodyDataSource {
	s.CreateUser = &v
	return s
}

func (s *GetDataSourceResponseBodyDataSource) SetDescription(v string) *GetDataSourceResponseBodyDataSource {
	s.Description = &v
	return s
}

func (s *GetDataSourceResponseBodyDataSource) SetId(v int64) *GetDataSourceResponseBodyDataSource {
	s.Id = &v
	return s
}

func (s *GetDataSourceResponseBodyDataSource) SetModifyTime(v int64) *GetDataSourceResponseBodyDataSource {
	s.ModifyTime = &v
	return s
}

func (s *GetDataSourceResponseBodyDataSource) SetModifyUser(v string) *GetDataSourceResponseBodyDataSource {
	s.ModifyUser = &v
	return s
}

func (s *GetDataSourceResponseBodyDataSource) SetName(v string) *GetDataSourceResponseBodyDataSource {
	s.Name = &v
	return s
}

func (s *GetDataSourceResponseBodyDataSource) SetProjectId(v int64) *GetDataSourceResponseBodyDataSource {
	s.ProjectId = &v
	return s
}

func (s *GetDataSourceResponseBodyDataSource) SetQualifiedName(v string) *GetDataSourceResponseBodyDataSource {
	s.QualifiedName = &v
	return s
}

func (s *GetDataSourceResponseBodyDataSource) SetType(v string) *GetDataSourceResponseBodyDataSource {
	s.Type = &v
	return s
}

type GetDataSourceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceResponse) GoString() string {
	return s.String()
}

func (s *GetDataSourceResponse) SetHeaders(v map[string]*string) *GetDataSourceResponse {
	s.Headers = v
	return s
}

func (s *GetDataSourceResponse) SetStatusCode(v int32) *GetDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDataSourceResponse) SetBody(v *GetDataSourceResponseBody) *GetDataSourceResponse {
	s.Body = v
	return s
}

type GetDatabaseRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// mysql-database:rm-abc123xxx::test_db
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDatabaseRequest) GoString() string {
	return s.String()
}

func (s *GetDatabaseRequest) SetId(v string) *GetDatabaseRequest {
	s.Id = &v
	return s
}

type GetDatabaseResponseBody struct {
	Database *Database `json:"Database,omitempty" xml:"Database,omitempty"`
	// example:
	//
	// 1AFAE64E-D1BE-432B-A9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *GetDatabaseResponseBody) SetDatabase(v *Database) *GetDatabaseResponseBody {
	s.Database = v
	return s
}

func (s *GetDatabaseResponseBody) SetRequestId(v string) *GetDatabaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDatabaseResponseBody) SetSuccess(v bool) *GetDatabaseResponseBody {
	s.Success = &v
	return s
}

type GetDatabaseResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDatabaseResponse) GoString() string {
	return s.String()
}

func (s *GetDatabaseResponse) SetHeaders(v map[string]*string) *GetDatabaseResponse {
	s.Headers = v
	return s
}

func (s *GetDatabaseResponse) SetStatusCode(v int32) *GetDatabaseResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDatabaseResponse) SetBody(v *GetDatabaseResponseBody) *GetDatabaseResponse {
	s.Body = v
	return s
}

type GetDeploymentPackageRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1000000001
	DeploymentId *int64 `json:"DeploymentId,omitempty" xml:"DeploymentId,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s GetDeploymentPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentPackageRequest) GoString() string {
	return s.String()
}

func (s *GetDeploymentPackageRequest) SetDeploymentId(v int64) *GetDeploymentPackageRequest {
	s.DeploymentId = &v
	return s
}

func (s *GetDeploymentPackageRequest) SetProjectId(v int64) *GetDeploymentPackageRequest {
	s.ProjectId = &v
	return s
}

func (s *GetDeploymentPackageRequest) SetProjectIdentifier(v string) *GetDeploymentPackageRequest {
	s.ProjectIdentifier = &v
	return s
}

type GetDeploymentPackageResponseBody struct {
	Data *GetDeploymentPackageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// You have no permission.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0bc1ec92159376****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDeploymentPackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentPackageResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeploymentPackageResponseBody) SetData(v *GetDeploymentPackageResponseBodyData) *GetDeploymentPackageResponseBody {
	s.Data = v
	return s
}

func (s *GetDeploymentPackageResponseBody) SetErrorCode(v string) *GetDeploymentPackageResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetDeploymentPackageResponseBody) SetErrorMessage(v string) *GetDeploymentPackageResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetDeploymentPackageResponseBody) SetHttpStatusCode(v int32) *GetDeploymentPackageResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDeploymentPackageResponseBody) SetRequestId(v string) *GetDeploymentPackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDeploymentPackageResponseBody) SetSuccess(v bool) *GetDeploymentPackageResponseBody {
	s.Success = &v
	return s
}

type GetDeploymentPackageResponseBodyData struct {
	DeployedItems []*GetDeploymentPackageResponseBodyDataDeployedItems `json:"DeployedItems,omitempty" xml:"DeployedItems,omitempty" type:"Repeated"`
	Deployment    *GetDeploymentPackageResponseBodyDataDeployment      `json:"Deployment,omitempty" xml:"Deployment,omitempty" type:"Struct"`
}

func (s GetDeploymentPackageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentPackageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDeploymentPackageResponseBodyData) SetDeployedItems(v []*GetDeploymentPackageResponseBodyDataDeployedItems) *GetDeploymentPackageResponseBodyData {
	s.DeployedItems = v
	return s
}

func (s *GetDeploymentPackageResponseBodyData) SetDeployment(v *GetDeploymentPackageResponseBodyDataDeployment) *GetDeploymentPackageResponseBodyData {
	s.Deployment = v
	return s
}

type GetDeploymentPackageResponseBodyDataDeployedItems struct {
	// example:
	//
	// 5076****
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// 7
	FileVersion *int64 `json:"FileVersion,omitempty" xml:"FileVersion,omitempty"`
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDeploymentPackageResponseBodyDataDeployedItems) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentPackageResponseBodyDataDeployedItems) GoString() string {
	return s.String()
}

func (s *GetDeploymentPackageResponseBodyDataDeployedItems) SetFileId(v int64) *GetDeploymentPackageResponseBodyDataDeployedItems {
	s.FileId = &v
	return s
}

func (s *GetDeploymentPackageResponseBodyDataDeployedItems) SetFileVersion(v int64) *GetDeploymentPackageResponseBodyDataDeployedItems {
	s.FileVersion = &v
	return s
}

func (s *GetDeploymentPackageResponseBodyDataDeployedItems) SetStatus(v int32) *GetDeploymentPackageResponseBodyDataDeployedItems {
	s.Status = &v
	return s
}

type GetDeploymentPackageResponseBodyDataDeployment struct {
	// example:
	//
	// 7
	CheckingStatus *int32 `json:"CheckingStatus,omitempty" xml:"CheckingStatus,omitempty"`
	// example:
	//
	// 1593877765000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 20030****
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// Success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 1593877765000
	ExecuteTime *int64 `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	// example:
	//
	// 0
	FromEnvironment *int32 `json:"FromEnvironment,omitempty" xml:"FromEnvironment,omitempty"`
	// example:
	//
	// 2003****
	HandlerId *string `json:"HandlerId,omitempty" xml:"HandlerId,omitempty"`
	// example:
	//
	// ods_user_info_d-2020-07-04_20030****
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 1
	ToEnvironment *int32 `json:"ToEnvironment,omitempty" xml:"ToEnvironment,omitempty"`
}

func (s GetDeploymentPackageResponseBodyDataDeployment) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentPackageResponseBodyDataDeployment) GoString() string {
	return s.String()
}

func (s *GetDeploymentPackageResponseBodyDataDeployment) SetCheckingStatus(v int32) *GetDeploymentPackageResponseBodyDataDeployment {
	s.CheckingStatus = &v
	return s
}

func (s *GetDeploymentPackageResponseBodyDataDeployment) SetCreateTime(v int64) *GetDeploymentPackageResponseBodyDataDeployment {
	s.CreateTime = &v
	return s
}

func (s *GetDeploymentPackageResponseBodyDataDeployment) SetCreatorId(v string) *GetDeploymentPackageResponseBodyDataDeployment {
	s.CreatorId = &v
	return s
}

func (s *GetDeploymentPackageResponseBodyDataDeployment) SetErrorMessage(v string) *GetDeploymentPackageResponseBodyDataDeployment {
	s.ErrorMessage = &v
	return s
}

func (s *GetDeploymentPackageResponseBodyDataDeployment) SetExecuteTime(v int64) *GetDeploymentPackageResponseBodyDataDeployment {
	s.ExecuteTime = &v
	return s
}

func (s *GetDeploymentPackageResponseBodyDataDeployment) SetFromEnvironment(v int32) *GetDeploymentPackageResponseBodyDataDeployment {
	s.FromEnvironment = &v
	return s
}

func (s *GetDeploymentPackageResponseBodyDataDeployment) SetHandlerId(v string) *GetDeploymentPackageResponseBodyDataDeployment {
	s.HandlerId = &v
	return s
}

func (s *GetDeploymentPackageResponseBodyDataDeployment) SetName(v string) *GetDeploymentPackageResponseBodyDataDeployment {
	s.Name = &v
	return s
}

func (s *GetDeploymentPackageResponseBodyDataDeployment) SetStatus(v int32) *GetDeploymentPackageResponseBodyDataDeployment {
	s.Status = &v
	return s
}

func (s *GetDeploymentPackageResponseBodyDataDeployment) SetToEnvironment(v int32) *GetDeploymentPackageResponseBodyDataDeployment {
	s.ToEnvironment = &v
	return s
}

type GetDeploymentPackageResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDeploymentPackageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDeploymentPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeploymentPackageResponse) GoString() string {
	return s.String()
}

func (s *GetDeploymentPackageResponse) SetHeaders(v map[string]*string) *GetDeploymentPackageResponse {
	s.Headers = v
	return s
}

func (s *GetDeploymentPackageResponse) SetStatusCode(v int32) *GetDeploymentPackageResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDeploymentPackageResponse) SetBody(v *GetDeploymentPackageResponseBody) *GetDeploymentPackageResponse {
	s.Body = v
	return s
}

type GetFileRequest struct {
	// The file ID. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID.
	//
	// example:
	//
	// 100000001
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The ID of the node that is scheduled. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID.
	//
	// example:
	//
	// 200000001
	NodeId *int64 `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure either this parameter or the ProjectIdentifier parameter to determine the DataWorks workspace to which the operation is applied.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The name of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the name.
	//
	// You must configure either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.
	//
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s GetFileRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileRequest) GoString() string {
	return s.String()
}

func (s *GetFileRequest) SetFileId(v int64) *GetFileRequest {
	s.FileId = &v
	return s
}

func (s *GetFileRequest) SetNodeId(v int64) *GetFileRequest {
	s.NodeId = &v
	return s
}

func (s *GetFileRequest) SetProjectId(v int64) *GetFileRequest {
	s.ProjectId = &v
	return s
}

func (s *GetFileRequest) SetProjectIdentifier(v string) *GetFileRequest {
	s.ProjectIdentifier = &v
	return s
}

type GetFileResponseBody struct {
	// The details of the file.
	Data *GetFileResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code.
	//
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message.
	//
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The HTTP status code.
	//
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBody) GoString() string {
	return s.String()
}

func (s *GetFileResponseBody) SetData(v *GetFileResponseBodyData) *GetFileResponseBody {
	s.Data = v
	return s
}

func (s *GetFileResponseBody) SetErrorCode(v string) *GetFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetFileResponseBody) SetErrorMessage(v string) *GetFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetFileResponseBody) SetHttpStatusCode(v int32) *GetFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetFileResponseBody) SetRequestId(v string) *GetFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFileResponseBody) SetSuccess(v bool) *GetFileResponseBody {
	s.Success = &v
	return s
}

type GetFileResponseBodyData struct {
	// The basic information about the file.
	File *GetFileResponseBodyDataFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// The scheduling configurations of the file.
	NodeConfiguration *GetFileResponseBodyDataNodeConfiguration `json:"NodeConfiguration,omitempty" xml:"NodeConfiguration,omitempty" type:"Struct"`
	// The download URL of the resource.
	ResourceDownloadLink *GetFileResponseBodyDataResourceDownloadLink `json:"ResourceDownloadLink,omitempty" xml:"ResourceDownloadLink,omitempty" type:"Struct"`
}

func (s GetFileResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFileResponseBodyData) SetFile(v *GetFileResponseBodyDataFile) *GetFileResponseBodyData {
	s.File = v
	return s
}

func (s *GetFileResponseBodyData) SetNodeConfiguration(v *GetFileResponseBodyDataNodeConfiguration) *GetFileResponseBodyData {
	s.NodeConfiguration = v
	return s
}

func (s *GetFileResponseBodyData) SetResourceDownloadLink(v *GetFileResponseBodyDataResourceDownloadLink) *GetFileResponseBodyData {
	s.ResourceDownloadLink = v
	return s
}

type GetFileResponseBodyDataFile struct {
	// The advanced configurations of the node.
	//
	// This parameter is valid for an EMR node. This parameter corresponds to the Advanced Settings tab in the right-side navigation pane on the configuration tab of the node in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// >  You cannot configure advanced parameters for EMR Shell nodes.
	//
	// For information about the advanced parameters of each type of EMR node, see [Develop EMR tasks](https://help.aliyun.com/document_detail/473077.html).
	//
	// example:
	//
	// {\\"priority\\":\\"1\\",\\"ENABLE_SPARKSQL_JDBC\\":false,\\"FLOW_SKIP_SQL_ANALYZE\\":false,\\"queue\\":\\"default\\"}
	AdvancedSettings *string `json:"AdvancedSettings,omitempty" xml:"AdvancedSettings,omitempty"`
	// Indicates whether the automatic parsing feature is enabled for the file. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// This parameter corresponds to the Automatic Parsing From Code Before Node Committing parameter that is displayed after you select Same Cycle in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// true
	AutoParsing *bool `json:"AutoParsing,omitempty" xml:"AutoParsing,omitempty"`
	// The ID of the workflow to which the file belongs. This parameter is deprecated and replaced by the BusinessId parameter.
	//
	// example:
	//
	// 1000001
	BizId *int64 `json:"BizId,omitempty" xml:"BizId,omitempty"`
	// The ID of the workflow to which the file belongs.
	//
	// example:
	//
	// 1000001
	BusinessId *int64 `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	// Indicates whether the latest code in the file is committed. Valid values: 0 and 1. The value 0 indicates that the latest code in the file is not committed. The value 1 indicates that the latest code in the file is committed.
	//
	// example:
	//
	// 0
	CommitStatus *int32 `json:"CommitStatus,omitempty" xml:"CommitStatus,omitempty"`
	// The name of the data source that is used to run the node that corresponds to the file.
	//
	// example:
	//
	// odps_source
	ConnectionName *string `json:"ConnectionName,omitempty" xml:"ConnectionName,omitempty"`
	// The code in the file.
	//
	// example:
	//
	// SHOW TABLES;
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The time when the file was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1593879116000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the Alibaba Cloud account used to create the file.
	//
	// example:
	//
	// 424732****
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The latest version number of the file.
	//
	// example:
	//
	// 3
	CurrentVersion *int32 `json:"CurrentVersion,omitempty" xml:"CurrentVersion,omitempty"`
	// The status of the file. Valid values:
	//
	// 	- NORMAL: The file is not deleted.
	//
	// 	- RECYCLE_BIN: The file is stored in the recycle bin.
	//
	// 	- DELETED: The file is deleted.
	//
	// example:
	//
	// RECYCLE
	DeletedStatus *string `json:"DeletedStatus,omitempty" xml:"DeletedStatus,omitempty"`
	// The description of the file.
	//
	// example:
	//
	// My first DataWorks file
	FileDescription *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	// The ID of the folder to which the file belongs.
	//
	// example:
	//
	// 2735c2****
	FileFolderId *string `json:"FileFolderId,omitempty" xml:"FileFolderId,omitempty"`
	// The file ID.
	//
	// example:
	//
	// 100000001
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The name of the file.
	//
	// example:
	//
	// ods_user_info_d
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The type of the code for the file. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).
	//
	// example:
	//
	// 10
	FileType *int32 `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// Indicates whether the resource file needs to be uploaded to MaxCompute. This parameter is returned only if the file is a MaxCompute resource file.
	//
	// example:
	//
	// true
	IsMaxCompute *bool `json:"IsMaxCompute,omitempty" xml:"IsMaxCompute,omitempty"`
	// The time when the file was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1593879116000
	LastEditTime *int64 `json:"LastEditTime,omitempty" xml:"LastEditTime,omitempty"`
	// The ID of the Alibaba Cloud account used to last modify the file.
	//
	// example:
	//
	// 424732****
	LastEditUser *string `json:"LastEditUser,omitempty" xml:"LastEditUser,omitempty"`
	// The ID of the auto triggered node that is generated in the scheduling system after the file is committed.
	//
	// example:
	//
	// 300001
	NodeId *int64 `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The ID of the Alibaba Cloud account used by the file owner.
	//
	// example:
	//
	// 7775674356****
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The ID of the node group file to which the current file belongs. This parameter is returned only if the current file is an inner file of the node group file.
	//
	// example:
	//
	// -1
	ParentId *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// The module to which the file belongs. Valid values:
	//
	// 	- NORMAL: The file is used for DataStudio.
	//
	// 	- MANUAL: The file is used for a manually triggered node.
	//
	// 	- MANUAL_BIZ: The file is used for a manually triggered workflow.
	//
	// 	- SKIP: The file is used for a dry-run node in DataStudio.
	//
	// 	- ADHOCQUERY: The file is used for an ad hoc query.
	//
	// 	- COMPONENT: The file is used for a script template.
	//
	// example:
	//
	// NORMAL
	UseType *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s GetFileResponseBodyDataFile) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBodyDataFile) GoString() string {
	return s.String()
}

func (s *GetFileResponseBodyDataFile) SetAdvancedSettings(v string) *GetFileResponseBodyDataFile {
	s.AdvancedSettings = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetAutoParsing(v bool) *GetFileResponseBodyDataFile {
	s.AutoParsing = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetBizId(v int64) *GetFileResponseBodyDataFile {
	s.BizId = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetBusinessId(v int64) *GetFileResponseBodyDataFile {
	s.BusinessId = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetCommitStatus(v int32) *GetFileResponseBodyDataFile {
	s.CommitStatus = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetConnectionName(v string) *GetFileResponseBodyDataFile {
	s.ConnectionName = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetContent(v string) *GetFileResponseBodyDataFile {
	s.Content = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetCreateTime(v int64) *GetFileResponseBodyDataFile {
	s.CreateTime = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetCreateUser(v string) *GetFileResponseBodyDataFile {
	s.CreateUser = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetCurrentVersion(v int32) *GetFileResponseBodyDataFile {
	s.CurrentVersion = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetDeletedStatus(v string) *GetFileResponseBodyDataFile {
	s.DeletedStatus = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetFileDescription(v string) *GetFileResponseBodyDataFile {
	s.FileDescription = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetFileFolderId(v string) *GetFileResponseBodyDataFile {
	s.FileFolderId = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetFileId(v int64) *GetFileResponseBodyDataFile {
	s.FileId = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetFileName(v string) *GetFileResponseBodyDataFile {
	s.FileName = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetFileType(v int32) *GetFileResponseBodyDataFile {
	s.FileType = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetIsMaxCompute(v bool) *GetFileResponseBodyDataFile {
	s.IsMaxCompute = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetLastEditTime(v int64) *GetFileResponseBodyDataFile {
	s.LastEditTime = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetLastEditUser(v string) *GetFileResponseBodyDataFile {
	s.LastEditUser = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetNodeId(v int64) *GetFileResponseBodyDataFile {
	s.NodeId = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetOwner(v string) *GetFileResponseBodyDataFile {
	s.Owner = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetParentId(v int64) *GetFileResponseBodyDataFile {
	s.ParentId = &v
	return s
}

func (s *GetFileResponseBodyDataFile) SetUseType(v string) *GetFileResponseBodyDataFile {
	s.UseType = &v
	return s
}

type GetFileResponseBodyDataNodeConfiguration struct {
	// Indicates whether scheduling configurations immediately take effect after the deployment.
	//
	// example:
	//
	// true
	ApplyScheduleImmediately *string `json:"ApplyScheduleImmediately,omitempty" xml:"ApplyScheduleImmediately,omitempty"`
	// The interval between automatic reruns after an error occurs. Unit: milliseconds.
	//
	// This parameter corresponds to the Rerun interval parameter that is displayed after the Auto Rerun upon Failure check box is selected in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console). The interval that you specify in the DataWorks console is measured in minutes. Pay attention to the conversion between the units of time when you call the operation.
	//
	// example:
	//
	// 120000
	AutoRerunIntervalMillis *int32 `json:"AutoRerunIntervalMillis,omitempty" xml:"AutoRerunIntervalMillis,omitempty"`
	// The number of automatic reruns that are allowed after an error occurs.
	//
	// example:
	//
	// 3
	AutoRerunTimes *int32 `json:"AutoRerunTimes,omitempty" xml:"AutoRerunTimes,omitempty"`
	// The cron expression that represents the periodic scheduling policy of the node.
	//
	// example:
	//
	// 00 05 00 	- 	- ?
	CronExpress *string `json:"CronExpress,omitempty" xml:"CronExpress,omitempty"`
	// The type of the scheduling cycle. Valid values: NOT_DAY and DAY. The value NOT_DAY indicates that the node is scheduled to run by minute or hour. The value DAY indicates that the node is scheduled to run by day, week, or month.
	//
	// This parameter corresponds to the Scheduling Cycle parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// DAY
	CycleType *string `json:"CycleType,omitempty" xml:"CycleType,omitempty"`
	// The ID of the node on which the node that corresponds to the file depends when the DependentType parameter is set to USER_DEFINE. Multiple IDs are separated by commas (,).
	//
	// The value of this parameter is equivalent to the ID of the node that you specified after you select Previous Cycle and set Depend On to Other Nodes in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// 5,10,15,20
	DependentNodeIdList *string `json:"DependentNodeIdList,omitempty" xml:"DependentNodeIdList,omitempty"`
	// The type of the cross-cycle scheduling dependency of the node. Valid values:
	//
	// 	- SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle.
	//
	// 	- CHILD: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle.
	//
	// 	- USER_DEFINE: The instance generated for the node in the current cycle depends on the instances generated for one or more specified nodes in the previous cycle.
	//
	// 	- NONE: No cross-cycle scheduling dependency type is selected for the node.
	//
	// example:
	//
	// USER_DEFINE
	DependentType *string `json:"DependentType,omitempty" xml:"DependentType,omitempty"`
	// The end of the time range for automatic scheduling. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// Configuring this parameter is equivalent to specifying an end time for the Validity Period parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// 4155787800000
	EndEffectDate *int64 `json:"EndEffectDate,omitempty" xml:"EndEffectDate,omitempty"`
	// Indicates whether the dry-run property of the ancestor nodes of the node is skipped. This parameter corresponds to the Skip the dry-run property of the ancestor node parameter that is displayed after you configure the Depend On parameter in the Dependencies section of the Properties tab on the DataStudio page in the DataWorks console.
	//
	// example:
	//
	// true
	IgnoreParentSkipRunningProperty *string `json:"IgnoreParentSkipRunningProperty,omitempty" xml:"IgnoreParentSkipRunningProperty,omitempty"`
	// The custom image ID.
	//
	// example:
	//
	// m-bp1h4b5a8ogkbll2f3tr
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The output information about the parent files on which the current file depends.
	InputList []*GetFileResponseBodyDataNodeConfigurationInputList `json:"InputList,omitempty" xml:"InputList,omitempty" type:"Repeated"`
	// The input parameters of the node.
	InputParameters []*GetFileResponseBodyDataNodeConfigurationInputParameters `json:"InputParameters,omitempty" xml:"InputParameters,omitempty" type:"Repeated"`
	// The output information about the current file.
	OutputList []*GetFileResponseBodyDataNodeConfigurationOutputList `json:"OutputList,omitempty" xml:"OutputList,omitempty" type:"Repeated"`
	// The output parameters of the node.
	OutputParameters []*GetFileResponseBodyDataNodeConfigurationOutputParameters `json:"OutputParameters,omitempty" xml:"OutputParameters,omitempty" type:"Repeated"`
	// The scheduling parameters of the node.
	//
	// This parameter corresponds to the Scheduling Parameter section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console). For more information about the configurations of scheduling parameters, see [Configure scheduling parameters](https://help.aliyun.com/document_detail/137548.html).
	//
	// example:
	//
	// a=x b=y
	ParaValue *string `json:"ParaValue,omitempty" xml:"ParaValue,omitempty"`
	// Indicates whether the node that corresponds to the file can be rerun. Valid values:
	//
	// 	- ALL_ALLOWED: The node can be rerun regardless of whether it is successfully run or fails to run.
	//
	// 	- FAILURE_ALLOWED: The node can be rerun only after it fails to run.
	//
	// 	- ALL_DENIED: The node cannot be rerun regardless of whether it is successfully run or fails to run.
	//
	// This parameter corresponds to the Rerun parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// ALL_ALLOWED
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The ID of the resource group that is used to run the node that corresponds to the file. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/173913.html) operation to query the available resource groups in the workspace.
	//
	// example:
	//
	// 375827434852437
	ResourceGroupId *int64 `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The scheduling type of the node. Valid values:
	//
	// 	- NORMAL: The node is an auto triggered node.
	//
	// 	- MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered. They correspond to the nodes in the Manually Triggered Workflows pane.
	//
	// 	- PAUSE: The node is a paused node.
	//
	// 	- SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled, but the system sets the status of the nodes to successful when it starts to run them.
	//
	// example:
	//
	// NORMAL
	SchedulerType *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
	// The beginning of the time range for automatic scheduling. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// Configuring this parameter is equivalent to specifying a start time for the Validity Period parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// 936923400000
	StartEffectDate *int64 `json:"StartEffectDate,omitempty" xml:"StartEffectDate,omitempty"`
	// Indicates whether a node is immediately run after the node is deployed to the production environment.
	//
	// This parameter is valid only for an EMR Spark Streaming node or an EMR Streaming SQL node. This parameter corresponds to the Start Method parameter in the Schedule section of the Configure tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// true
	StartImmediately *bool `json:"StartImmediately,omitempty" xml:"StartImmediately,omitempty"`
	// Indicates whether the scheduling for the node is suspended Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// This parameter corresponds to the Recurrence parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// false
	Stop *bool `json:"Stop,omitempty" xml:"Stop,omitempty"`
	// The timeout period.
	//
	// example:
	//
	// 1
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s GetFileResponseBodyDataNodeConfiguration) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBodyDataNodeConfiguration) GoString() string {
	return s.String()
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetApplyScheduleImmediately(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.ApplyScheduleImmediately = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetAutoRerunIntervalMillis(v int32) *GetFileResponseBodyDataNodeConfiguration {
	s.AutoRerunIntervalMillis = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetAutoRerunTimes(v int32) *GetFileResponseBodyDataNodeConfiguration {
	s.AutoRerunTimes = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetCronExpress(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.CronExpress = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetCycleType(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.CycleType = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetDependentNodeIdList(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.DependentNodeIdList = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetDependentType(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.DependentType = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetEndEffectDate(v int64) *GetFileResponseBodyDataNodeConfiguration {
	s.EndEffectDate = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetIgnoreParentSkipRunningProperty(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.IgnoreParentSkipRunningProperty = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetImageId(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.ImageId = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetInputList(v []*GetFileResponseBodyDataNodeConfigurationInputList) *GetFileResponseBodyDataNodeConfiguration {
	s.InputList = v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetInputParameters(v []*GetFileResponseBodyDataNodeConfigurationInputParameters) *GetFileResponseBodyDataNodeConfiguration {
	s.InputParameters = v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetOutputList(v []*GetFileResponseBodyDataNodeConfigurationOutputList) *GetFileResponseBodyDataNodeConfiguration {
	s.OutputList = v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetOutputParameters(v []*GetFileResponseBodyDataNodeConfigurationOutputParameters) *GetFileResponseBodyDataNodeConfiguration {
	s.OutputParameters = v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetParaValue(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.ParaValue = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetRerunMode(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.RerunMode = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetResourceGroupId(v int64) *GetFileResponseBodyDataNodeConfiguration {
	s.ResourceGroupId = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetSchedulerType(v string) *GetFileResponseBodyDataNodeConfiguration {
	s.SchedulerType = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetStartEffectDate(v int64) *GetFileResponseBodyDataNodeConfiguration {
	s.StartEffectDate = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetStartImmediately(v bool) *GetFileResponseBodyDataNodeConfiguration {
	s.StartImmediately = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetStop(v bool) *GetFileResponseBodyDataNodeConfiguration {
	s.Stop = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfiguration) SetTimeout(v int32) *GetFileResponseBodyDataNodeConfiguration {
	s.Timeout = &v
	return s
}

type GetFileResponseBodyDataNodeConfigurationInputList struct {
	// The output name of the parent file on which the current file depends.
	//
	// This parameter corresponds to the Output Name of Ancestor Node parameter under Parent Nodes after Same Cycle is selected in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// project.001_out
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// The mode of the configuration file dependency. Valid values:
	//
	// 	- MANUAL: Scheduling dependencies are manually configured.
	//
	// 	- AUTO: Scheduling dependencies are automatically parsed.
	//
	// example:
	//
	// MANUAL
	ParseType *string `json:"ParseType,omitempty" xml:"ParseType,omitempty"`
}

func (s GetFileResponseBodyDataNodeConfigurationInputList) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBodyDataNodeConfigurationInputList) GoString() string {
	return s.String()
}

func (s *GetFileResponseBodyDataNodeConfigurationInputList) SetInput(v string) *GetFileResponseBodyDataNodeConfigurationInputList {
	s.Input = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfigurationInputList) SetParseType(v string) *GetFileResponseBodyDataNodeConfigurationInputList {
	s.ParseType = &v
	return s
}

type GetFileResponseBodyDataNodeConfigurationInputParameters struct {
	// The name of the input parameter of the node. In the code, you can use the ${...} method to reference the input parameter of the node.
	//
	// This parameter corresponds to the Parameter Name parameter in the Input Parameters table in the Input and Output Parameters section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// input
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The value source of the input parameter of the node.
	//
	// This parameter corresponds to the Value Source parameter in the Input Parameters table in the Input and Output Parameters section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// project_001.parent_node:outputs
	ValueSource *string `json:"ValueSource,omitempty" xml:"ValueSource,omitempty"`
}

func (s GetFileResponseBodyDataNodeConfigurationInputParameters) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBodyDataNodeConfigurationInputParameters) GoString() string {
	return s.String()
}

func (s *GetFileResponseBodyDataNodeConfigurationInputParameters) SetParameterName(v string) *GetFileResponseBodyDataNodeConfigurationInputParameters {
	s.ParameterName = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfigurationInputParameters) SetValueSource(v string) *GetFileResponseBodyDataNodeConfigurationInputParameters {
	s.ValueSource = &v
	return s
}

type GetFileResponseBodyDataNodeConfigurationOutputList struct {
	// The output name of the current file.
	//
	// This parameter corresponds to the Output Name parameter under Output after Same Cycle is selected in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// dw_project.002_out
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// The output table name of the current file.
	//
	// This parameter corresponds to the Output Table Name parameter under Output after Same Cycle is selected in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// ods_user_info_d
	RefTableName *string `json:"RefTableName,omitempty" xml:"RefTableName,omitempty"`
}

func (s GetFileResponseBodyDataNodeConfigurationOutputList) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBodyDataNodeConfigurationOutputList) GoString() string {
	return s.String()
}

func (s *GetFileResponseBodyDataNodeConfigurationOutputList) SetOutput(v string) *GetFileResponseBodyDataNodeConfigurationOutputList {
	s.Output = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfigurationOutputList) SetRefTableName(v string) *GetFileResponseBodyDataNodeConfigurationOutputList {
	s.RefTableName = &v
	return s
}

type GetFileResponseBodyDataNodeConfigurationOutputParameters struct {
	// The description of the output parameter of the node.
	//
	// example:
	//
	// It\\"s a context output parameter.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the output parameter of the node.
	//
	// This parameter corresponds to the Parameter Name parameter in the Output Parameters table in the Input and Output Parameters section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// output
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The type of the output parameter of the node. Valid values:
	//
	// 	- 1: indicates a constant.
	//
	// 	- 2: indicates a variable.
	//
	// 	- 3: indicates a pass-through variable.
	//
	// This parameter corresponds to the Type parameter in the Output Parameters table in the Input and Output Parameters section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// 1
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the output parameter of the node.
	//
	// This parameter corresponds to the Value parameter in the Output Parameters table in the Input and Output Parameters section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// ${bizdate}
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetFileResponseBodyDataNodeConfigurationOutputParameters) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBodyDataNodeConfigurationOutputParameters) GoString() string {
	return s.String()
}

func (s *GetFileResponseBodyDataNodeConfigurationOutputParameters) SetDescription(v string) *GetFileResponseBodyDataNodeConfigurationOutputParameters {
	s.Description = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfigurationOutputParameters) SetParameterName(v string) *GetFileResponseBodyDataNodeConfigurationOutputParameters {
	s.ParameterName = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfigurationOutputParameters) SetType(v string) *GetFileResponseBodyDataNodeConfigurationOutputParameters {
	s.Type = &v
	return s
}

func (s *GetFileResponseBodyDataNodeConfigurationOutputParameters) SetValue(v string) *GetFileResponseBodyDataNodeConfigurationOutputParameters {
	s.Value = &v
	return s
}

type GetFileResponseBodyDataResourceDownloadLink struct {
	// The download URL of the resource.
	//
	// example:
	//
	// http://xx
	DownloadLink *string `json:"downloadLink,omitempty" xml:"downloadLink,omitempty"`
}

func (s GetFileResponseBodyDataResourceDownloadLink) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponseBodyDataResourceDownloadLink) GoString() string {
	return s.String()
}

func (s *GetFileResponseBodyDataResourceDownloadLink) SetDownloadLink(v string) *GetFileResponseBodyDataResourceDownloadLink {
	s.DownloadLink = &v
	return s
}

type GetFileResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFileResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileResponse) GoString() string {
	return s.String()
}

func (s *GetFileResponse) SetHeaders(v map[string]*string) *GetFileResponse {
	s.Headers = v
	return s
}

func (s *GetFileResponse) SetStatusCode(v int32) *GetFileResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFileResponse) SetBody(v *GetFileResponseBody) *GetFileResponse {
	s.Body = v
	return s
}

type GetFileVersionRequest struct {
	// The file ID. You can call the [ListFiles](https://help.aliyun.com/document_detail/173942.html) operation to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000001
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The file version whose information you want to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	FileVersion *int32 `json:"FileVersion,omitempty" xml:"FileVersion,omitempty"`
	// The DataWorks workspace ID. You can click the Workspace Manage icon in the upper-right corner of the DataStudio page to go to the Workspace page and query the workspace ID.
	//
	// example:
	//
	// 1000011
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The unique identifier of the DataWorks workspace. You can view the identifier in the upper part of the DataStudio page. You can also select another identifier to switch to another workspace.
	//
	// You must configure either this parameter or the ProjectId parameter to determine the DataWorks workspace to which the operation is applied.
	//
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s GetFileVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileVersionRequest) GoString() string {
	return s.String()
}

func (s *GetFileVersionRequest) SetFileId(v int64) *GetFileVersionRequest {
	s.FileId = &v
	return s
}

func (s *GetFileVersionRequest) SetFileVersion(v int32) *GetFileVersionRequest {
	s.FileVersion = &v
	return s
}

func (s *GetFileVersionRequest) SetProjectId(v int64) *GetFileVersionRequest {
	s.ProjectId = &v
	return s
}

func (s *GetFileVersionRequest) SetProjectIdentifier(v string) *GetFileVersionRequest {
	s.ProjectIdentifier = &v
	return s
}

type GetFileVersionResponseBody struct {
	// The details of the file version.
	Data *GetFileVersionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error code.
	//
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message.
	//
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The HTTP status code.
	//
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFileVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFileVersionResponseBody) GoString() string {
	return s.String()
}

func (s *GetFileVersionResponseBody) SetData(v *GetFileVersionResponseBodyData) *GetFileVersionResponseBody {
	s.Data = v
	return s
}

func (s *GetFileVersionResponseBody) SetErrorCode(v string) *GetFileVersionResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetFileVersionResponseBody) SetErrorMessage(v string) *GetFileVersionResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetFileVersionResponseBody) SetHttpStatusCode(v int32) *GetFileVersionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetFileVersionResponseBody) SetRequestId(v string) *GetFileVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFileVersionResponseBody) SetSuccess(v bool) *GetFileVersionResponseBody {
	s.Success = &v
	return s
}

type GetFileVersionResponseBodyData struct {
	// The type of the change to the file of the current version. Valid values: CREATE, UPDATE, and DELETE.
	//
	// example:
	//
	// UPDATE
	ChangeType *string `json:"ChangeType,omitempty" xml:"ChangeType,omitempty"`
	// The description of the file version.
	//
	// example:
	//
	// Second version submission
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The time when the file version was generated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1593881265000
	CommitTime *int64 `json:"CommitTime,omitempty" xml:"CommitTime,omitempty"`
	// The ID of the Alibaba Cloud account that is used to generate the file of the current version.
	//
	// example:
	//
	// 7384234****
	CommitUser *string `json:"CommitUser,omitempty" xml:"CommitUser,omitempty"`
	// The code in the file of the current version.
	//
	// example:
	//
	// SHOW TABLES;
	FileContent *string `json:"FileContent,omitempty" xml:"FileContent,omitempty"`
	// The name of the file of the current version.
	//
	// example:
	//
	// ods_user_info_d
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The basic information about the file of the current version.
	//
	// example:
	//
	// {"fileName":"ods_user_info_d","fileType":10}
	FilePropertyContent *string `json:"FilePropertyContent,omitempty" xml:"FilePropertyContent,omitempty"`
	// The file version.
	//
	// example:
	//
	// 2
	FileVersion *int32 `json:"FileVersion,omitempty" xml:"FileVersion,omitempty"`
	// Indicates whether the version is the latest version in the production environment. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	IsCurrentProd *bool `json:"IsCurrentProd,omitempty" xml:"IsCurrentProd,omitempty"`
	// The scheduling configurations of the node that corresponds to the file of the current version.
	//
	// example:
	//
	// {"cycleType":0,"cronExpress":"00 05 00 	- 	- ?"}
	NodeContent *string `json:"NodeContent,omitempty" xml:"NodeContent,omitempty"`
	// The ID of the node that corresponds to the file version.
	//
	// example:
	//
	// 3000001
	NodeId *int64 `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The status of the file version. Valid values:
	//
	// 	- COMMITTING
	//
	// 	- COMMITTED or CHECK_OK
	//
	// 	- PACKAGED
	//
	// 	- DEPLOYING
	//
	// 	- DEPLOYED
	//
	// 	- CANCELLED
	//
	// example:
	//
	// COMMITTED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The module to which the file belongs. Valid values:
	//
	// 	- 0: NORMAL, which indicates that the file is used for DataStudio.
	//
	// 	- 1: MANUAL, which indicates that the file is used for a manually triggered node.
	//
	// 	- 2: MANUAL_BIZ, which indicates that the file is used for a manually triggered workflow.
	//
	// 	- 3: SKIP, which indicates that the file is used for a dry-run node in DataStudio.
	//
	// 	- 10: ADHOCQUERY, which indicates that the file is used for an ad hoc query.
	//
	// 	- 30: COMPONENT, which indicates that the file is used for a script template.
	//
	// example:
	//
	// 0
	UseType *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s GetFileVersionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFileVersionResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFileVersionResponseBodyData) SetChangeType(v string) *GetFileVersionResponseBodyData {
	s.ChangeType = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetComment(v string) *GetFileVersionResponseBodyData {
	s.Comment = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetCommitTime(v int64) *GetFileVersionResponseBodyData {
	s.CommitTime = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetCommitUser(v string) *GetFileVersionResponseBodyData {
	s.CommitUser = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetFileContent(v string) *GetFileVersionResponseBodyData {
	s.FileContent = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetFileName(v string) *GetFileVersionResponseBodyData {
	s.FileName = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetFilePropertyContent(v string) *GetFileVersionResponseBodyData {
	s.FilePropertyContent = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetFileVersion(v int32) *GetFileVersionResponseBodyData {
	s.FileVersion = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetIsCurrentProd(v bool) *GetFileVersionResponseBodyData {
	s.IsCurrentProd = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetNodeContent(v string) *GetFileVersionResponseBodyData {
	s.NodeContent = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetNodeId(v int64) *GetFileVersionResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetStatus(v string) *GetFileVersionResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetFileVersionResponseBodyData) SetUseType(v string) *GetFileVersionResponseBodyData {
	s.UseType = &v
	return s
}

type GetFileVersionResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFileVersionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFileVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileVersionResponse) GoString() string {
	return s.String()
}

func (s *GetFileVersionResponse) SetHeaders(v map[string]*string) *GetFileVersionResponse {
	s.Headers = v
	return s
}

func (s *GetFileVersionResponse) SetStatusCode(v int32) *GetFileVersionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFileVersionResponse) SetBody(v *GetFileVersionResponseBody) *GetFileVersionResponse {
	s.Body = v
	return s
}

type GetFolderRequest struct {
	// example:
	//
	// 273****
	FolderId *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	// example:
	//
	// Business_process/my_first_business_process/MaxCompute/ods_layer
	FolderPath *string `json:"FolderPath,omitempty" xml:"FolderPath,omitempty"`
	// example:
	//
	// 1000011
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s GetFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFolderRequest) GoString() string {
	return s.String()
}

func (s *GetFolderRequest) SetFolderId(v string) *GetFolderRequest {
	s.FolderId = &v
	return s
}

func (s *GetFolderRequest) SetFolderPath(v string) *GetFolderRequest {
	s.FolderPath = &v
	return s
}

func (s *GetFolderRequest) SetProjectId(v int64) *GetFolderRequest {
	s.ProjectId = &v
	return s
}

func (s *GetFolderRequest) SetProjectIdentifier(v string) *GetFolderRequest {
	s.ProjectIdentifier = &v
	return s
}

type GetFolderResponseBody struct {
	Data *GetFolderResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFolderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFolderResponseBody) GoString() string {
	return s.String()
}

func (s *GetFolderResponseBody) SetData(v *GetFolderResponseBodyData) *GetFolderResponseBody {
	s.Data = v
	return s
}

func (s *GetFolderResponseBody) SetErrorCode(v string) *GetFolderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetFolderResponseBody) SetErrorMessage(v string) *GetFolderResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetFolderResponseBody) SetHttpStatusCode(v int32) *GetFolderResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetFolderResponseBody) SetRequestId(v string) *GetFolderResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFolderResponseBody) SetSuccess(v bool) *GetFolderResponseBody {
	s.Success = &v
	return s
}

type GetFolderResponseBodyData struct {
	// example:
	//
	// 2735****
	FolderId *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	// example:
	//
	// Business_process/my_first_business_process/MaxCompute/ods_layer
	FolderPath *string `json:"FolderPath,omitempty" xml:"FolderPath,omitempty"`
}

func (s GetFolderResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFolderResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFolderResponseBodyData) SetFolderId(v string) *GetFolderResponseBodyData {
	s.FolderId = &v
	return s
}

func (s *GetFolderResponseBodyData) SetFolderPath(v string) *GetFolderResponseBodyData {
	s.FolderPath = &v
	return s
}

type GetFolderResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFolderResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFolderResponse) GoString() string {
	return s.String()
}

func (s *GetFolderResponse) SetHeaders(v map[string]*string) *GetFolderResponse {
	s.Headers = v
	return s
}

func (s *GetFolderResponse) SetStatusCode(v int32) *GetFolderResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFolderResponse) SetBody(v *GetFolderResponseBody) *GetFolderResponse {
	s.Body = v
	return s
}

type GetFunctionRequest struct {
	// The ID of the UDF.
	//
	// This parameter is required.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetFunctionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFunctionRequest) GoString() string {
	return s.String()
}

func (s *GetFunctionRequest) SetId(v int64) *GetFunctionRequest {
	s.Id = &v
	return s
}

func (s *GetFunctionRequest) SetProjectId(v int64) *GetFunctionRequest {
	s.ProjectId = &v
	return s
}

type GetFunctionResponseBody struct {
	// The information about the UDF.
	Function *GetFunctionResponseBodyFunction `json:"Function,omitempty" xml:"Function,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 6CF95929-6D12-5A88-8CC3-4B2F4C2EXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetFunctionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFunctionResponseBody) GoString() string {
	return s.String()
}

func (s *GetFunctionResponseBody) SetFunction(v *GetFunctionResponseBodyFunction) *GetFunctionResponseBody {
	s.Function = v
	return s
}

func (s *GetFunctionResponseBody) SetRequestId(v string) *GetFunctionResponseBody {
	s.RequestId = &v
	return s
}

type GetFunctionResponseBodyFunction struct {
	// The time when the UDF was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1724505917000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the UDF.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The time when the UDF was last modified. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1724506661000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The name of the UDF.
	//
	// example:
	//
	// Function name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The owner of the UDF.
	//
	// example:
	//
	// 110755000425XXXX
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The ID of the DataWorks workspace to which the UDF belongs.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).
	//
	// example:
	//
	// {
	//
	//     "version": "1.1.0",
	//
	//     "kind": "Function",
	//
	//     "spec": {
	//
	//         "functions": [
	//
	//             {
	//
	//                 "name": "Function_Name",
	//
	//                 "id": "580667964888595XXXX",
	//
	//                 "script": {
	//
	//                     "content": "{  \\"uuid\\": \\"580667964888595XXXX\\",  \\"name\\": \\"Function_Name\\",  \\"datasource\\": {    \\"type\\": \\"odps\\",    \\"name\\": \\"odps_first\\"  },  \\"runtimeResource\\": {    \\"resourceGroup\\": \\"S_res_group_XXXX_XXXX\\",    \\"resourceGroupId\\": 6591XXXX  }}",
	//
	//                     "path": "XXX/OpenAPI/Function/Function_Name",
	//
	//                     "runtime": {
	//
	//                         "command": "ODPS_FUNCTION"
	//
	//                     }
	//
	//                 },
	//
	//                 "datasource": {
	//
	//                     "name": "odps_first",
	//
	//                     "type": "odps"
	//
	//                 },
	//
	//                 "runtimeResource": {
	//
	//                     "resourceGroup": "S_res_group_XXXX_XXXX",
	//
	//                     "id": "723932906364267XXXX",
	//
	//                     "resourceGroupId": "6591XXXX"
	//
	//                 },
	//
	//                 "metadata": {
	//
	//                     "owner": "110755000425XXXX"
	//
	//                 }
	//
	//             }
	//
	//         ]
	//
	//     }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s GetFunctionResponseBodyFunction) String() string {
	return tea.Prettify(s)
}

func (s GetFunctionResponseBodyFunction) GoString() string {
	return s.String()
}

func (s *GetFunctionResponseBodyFunction) SetCreateTime(v int64) *GetFunctionResponseBodyFunction {
	s.CreateTime = &v
	return s
}

func (s *GetFunctionResponseBodyFunction) SetId(v int64) *GetFunctionResponseBodyFunction {
	s.Id = &v
	return s
}

func (s *GetFunctionResponseBodyFunction) SetModifyTime(v int64) *GetFunctionResponseBodyFunction {
	s.ModifyTime = &v
	return s
}

func (s *GetFunctionResponseBodyFunction) SetName(v string) *GetFunctionResponseBodyFunction {
	s.Name = &v
	return s
}

func (s *GetFunctionResponseBodyFunction) SetOwner(v string) *GetFunctionResponseBodyFunction {
	s.Owner = &v
	return s
}

func (s *GetFunctionResponseBodyFunction) SetProjectId(v int64) *GetFunctionResponseBodyFunction {
	s.ProjectId = &v
	return s
}

func (s *GetFunctionResponseBodyFunction) SetSpec(v string) *GetFunctionResponseBodyFunction {
	s.Spec = &v
	return s
}

type GetFunctionResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFunctionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFunctionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFunctionResponse) GoString() string {
	return s.String()
}

func (s *GetFunctionResponse) SetHeaders(v map[string]*string) *GetFunctionResponse {
	s.Headers = v
	return s
}

func (s *GetFunctionResponse) SetStatusCode(v int32) *GetFunctionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFunctionResponse) SetBody(v *GetFunctionResponseBody) *GetFunctionResponse {
	s.Body = v
	return s
}

type GetIDEEventDetailRequest struct {
	// The message ID in DataWorks OpenEvent. You can obtain the ID from a received message when an extension point event is triggered.
	//
	// This parameter is required.
	//
	// example:
	//
	// 8abcb91f-d266-4073-b907-2ed67****1
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	// The DataWorks workspace ID. You can obtain the ID from the message.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetIDEEventDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailRequest) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailRequest) SetMessageId(v string) *GetIDEEventDetailRequest {
	s.MessageId = &v
	return s
}

func (s *GetIDEEventDetailRequest) SetProjectId(v int64) *GetIDEEventDetailRequest {
	s.ProjectId = &v
	return s
}

type GetIDEEventDetailResponseBody struct {
	// The data snapshot that is generated when an extension point event is triggered.
	//
	// The fields contained in data snapshots vary based on the types of the triggered extension point events. For more information, see the description of the fields.
	EventDetail *GetIDEEventDetailResponseBodyEventDetail `json:"EventDetail,omitempty" xml:"EventDetail,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 8abcb91f-d266-4073-b907-2ed670378ed1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetIDEEventDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBody) SetEventDetail(v *GetIDEEventDetailResponseBodyEventDetail) *GetIDEEventDetailResponseBody {
	s.EventDetail = v
	return s
}

func (s *GetIDEEventDetailResponseBody) SetRequestId(v string) *GetIDEEventDetailResponseBody {
	s.RequestId = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetail struct {
	// The data snapshot when the file is committed and deployed.
	//
	// This parameter is valid only if the message type is IDE_FILE_SUBMIT_BEFORE or IDE_FILE_DEPLOY_BEFORE.
	CommittedFile *GetIDEEventDetailResponseBodyEventDetailCommittedFile `json:"CommittedFile,omitempty" xml:"CommittedFile,omitempty" type:"Struct"`
	// The data snapshot when the file is deleted. This parameter is valid only if the message type is IDE_FILE_DELETE_BEFORE.
	DeletedFile *GetIDEEventDetailResponseBodyEventDetailDeletedFile `json:"DeletedFile,omitempty" xml:"DeletedFile,omitempty" type:"Struct"`
	// The data snapshot when the code in the file is run. This parameter is valid only if the message type is IDE_FILE_EXECUTE_BEFORE.
	FileExecutionCommand *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand `json:"FileExecutionCommand,omitempty" xml:"FileExecutionCommand,omitempty" type:"Struct"`
	// The data snapshot when the table is committed and deployed. This parameter is valid only if the message type is IDE_TABLE_SUBMIT_BEFORE or IDE_TABLE_DEPLOY_BEFORE.
	TableModel *GetIDEEventDetailResponseBodyEventDetailTableModel `json:"TableModel,omitempty" xml:"TableModel,omitempty" type:"Struct"`
}

func (s GetIDEEventDetailResponseBodyEventDetail) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetail) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetail) SetCommittedFile(v *GetIDEEventDetailResponseBodyEventDetailCommittedFile) *GetIDEEventDetailResponseBodyEventDetail {
	s.CommittedFile = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetail) SetDeletedFile(v *GetIDEEventDetailResponseBodyEventDetailDeletedFile) *GetIDEEventDetailResponseBodyEventDetail {
	s.DeletedFile = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetail) SetFileExecutionCommand(v *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) *GetIDEEventDetailResponseBodyEventDetail {
	s.FileExecutionCommand = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetail) SetTableModel(v *GetIDEEventDetailResponseBodyEventDetailTableModel) *GetIDEEventDetailResponseBodyEventDetail {
	s.TableModel = v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailCommittedFile struct {
	// The type of the change to the file of the current version. Valid values: CREATE, UPDATE, and DELETE.
	//
	// example:
	//
	// UPDATE
	ChangeType *string `json:"ChangeType,omitempty" xml:"ChangeType,omitempty"`
	// The description of the file version.
	//
	// example:
	//
	// Second version submission
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID of the Alibaba Cloud account that is used to generate the file of the current version.
	//
	// example:
	//
	// 7384234****
	Committor *string `json:"Committor,omitempty" xml:"Committor,omitempty"`
	// The code in the file of the current version.
	//
	// example:
	//
	// SHOW TABLES;
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The file ID.
	//
	// example:
	//
	// 1234123
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The name of the file.
	//
	// example:
	//
	// hello_dataworks.sql
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The details of the file.
	FilePropertyContent *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent `json:"FilePropertyContent,omitempty" xml:"FilePropertyContent,omitempty" type:"Struct"`
	// The file type. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).
	//
	// example:
	//
	// 10
	FileType *int64 `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The scheduling properties of the node that corresponds to the file.
	NodeConfiguration *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration `json:"NodeConfiguration,omitempty" xml:"NodeConfiguration,omitempty" type:"Struct"`
	// The ID of the node that is scheduled.
	//
	// example:
	//
	// 421429
	NodeId *int64 `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The module to which the file belongs. Valid values:
	//
	// 	- NORMAL: The file is used for DataStudio.
	//
	// 	- MANUAL: The file is used for a manually triggered node.
	//
	// 	- MANUAL_BIZ: The file is used for a manually triggered workflow.
	//
	// 	- SKIP: The file is used for a dry-run node in DataStudio.
	//
	// 	- ADHOCQUERY: The file is used for an ad hoc query.
	//
	// 	- COMPONENT: The file is used for a script template.
	//
	// example:
	//
	// NORMAL
	UseType *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFile) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFile) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetChangeType(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.ChangeType = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetComment(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.Comment = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetCommittor(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.Committor = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetContent(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.Content = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetFileId(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.FileId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetFileName(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.FileName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetFilePropertyContent(v *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.FilePropertyContent = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetFileType(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.FileType = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetNodeConfiguration(v *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.NodeConfiguration = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetNodeId(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.NodeId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFile) SetUseType(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFile {
	s.UseType = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent struct {
	// The ID of the workflow to which the file belongs.
	//
	// example:
	//
	// 74328
	BusinessId *int64 `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	// The latest version number of the file.
	//
	// example:
	//
	// 1
	CurrentVersion *int64 `json:"CurrentVersion,omitempty" xml:"CurrentVersion,omitempty"`
	// The name of the data source with which the file is associated.
	//
	// example:
	//
	// odps_source
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The ID of the folder to which the file belongs. You can call the [GetFolder](https://help.aliyun.com/document_detail/173952.html) operation to query the details of the file based on the folder ID.
	//
	// example:
	//
	// aldurie78l2falure
	FolderId *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	// The file owner.
	//
	// example:
	//
	// 7384234****
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The ID of the do-while node or for-each node that corresponds to the file.
	//
	// example:
	//
	// 1234122
	ParentFileId *int64 `json:"ParentFileId,omitempty" xml:"ParentFileId,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) SetBusinessId(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent {
	s.BusinessId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) SetCurrentVersion(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent {
	s.CurrentVersion = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) SetDataSourceName(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent {
	s.DataSourceName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) SetFolderId(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent {
	s.FolderId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) SetOwner(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent {
	s.Owner = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent) SetParentFileId(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFileFilePropertyContent {
	s.ParentFileId = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration struct {
	// The interval at which the node corresponding to the file is rerun. Unit: milliseconds.
	//
	// example:
	//
	// 120000
	AutoRerunIntervalMillis *int64 `json:"AutoRerunIntervalMillis,omitempty" xml:"AutoRerunIntervalMillis,omitempty"`
	// The number of times that the node corresponding to the file can be rerun.
	//
	// example:
	//
	// 3
	AutoRerunTimes *int64 `json:"AutoRerunTimes,omitempty" xml:"AutoRerunTimes,omitempty"`
	// The cron expression that is used to schedule the node corresponding to the file.
	//
	// example:
	//
	// 00 05 00 	- 	- ?
	CronExpress *string `json:"CronExpress,omitempty" xml:"CronExpress,omitempty"`
	// The type of the scheduling cycle of the node that corresponds to the file. Valid values: NOT_DAY and DAY. The value NOT_DAY indicates that the node is scheduled to run by minute or hour. The value DAY indicates that the node is scheduled to run by day, week, or month.
	//
	// This parameter corresponds to the Scheduling Cycle parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// DAY
	CycleType *string `json:"CycleType,omitempty" xml:"CycleType,omitempty"`
	// The ID of the node on which the node that corresponds to the file depends when the DependentType parameter is set to USER_DEFINE. Multiple IDs are separated by commas (,).
	//
	// The value of this parameter is equivalent to the ID of the node that you specified after you select Other Nodes for Cross-Cycle Dependency (Original Previous-Cycle Dependency) in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// 5,10,15,20
	DependentNodeIdList *string `json:"DependentNodeIdList,omitempty" xml:"DependentNodeIdList,omitempty"`
	// The type of the cross-cycle scheduling dependency of the node. Valid values:
	//
	// 	- SELF: The instance generated for the node in the current cycle depends on the instance generated for the node in the previous cycle.
	//
	// 	- CHILD: The instance generated for the node in the current cycle depends on the instances generated for the descendant nodes at the nearest level of the node in the previous cycle.
	//
	// 	- USER_DEFINE: The instance generated for the node in the current cycle depends on the instances generated for one or more specified nodes in the previous cycle.
	//
	// 	- NONE: No cross-cycle scheduling dependency type is selected for the node.
	//
	// example:
	//
	// USER_DEFINE
	DependentType *string `json:"DependentType,omitempty" xml:"DependentType,omitempty"`
	// The output information about the parent files on which the current file depends.
	InputList []*GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList `json:"InputList,omitempty" xml:"InputList,omitempty" type:"Repeated"`
	// The output information about the current file.
	OutputList []*GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList `json:"OutputList,omitempty" xml:"OutputList,omitempty" type:"Repeated"`
	// The scheduling parameters of the node.
	//
	// This parameter corresponds to the Scheduling Parameter section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console). For more information about the configurations of scheduling parameters, see [Configure scheduling parameters](https://help.aliyun.com/document_detail/137548.html).
	//
	// example:
	//
	// a=x b=y
	ParaValue *string `json:"ParaValue,omitempty" xml:"ParaValue,omitempty"`
	// Indicates whether the node that corresponds to the file can be rerun. Valid values:
	//
	// 	- ALL_ALLOWED: The node can be rerun regardless of whether it is successfully run or fails to run.
	//
	// 	- FAILURE_ALLOWED: The node can be rerun only after it fails to run.
	//
	// 	- ALL_DENIED: The node cannot be rerun regardless of whether it is successfully run or fails to run.
	//
	// This parameter corresponds to the Rerun parameter in the Schedule section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// ALL_ALLOWED
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The ID of the resource group that is used to run the node that corresponds to the file. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/173913.html) operation to query the available resource groups in the workspace.
	//
	// example:
	//
	// 375827434852437
	ResourceGroupId *int64 `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The scheduling type of the node. Valid values:
	//
	// 	- NORMAL: The node is an auto triggered node.
	//
	// 	- MANUAL: The node is a manually triggered node. Manually triggered nodes cannot be automatically triggered. They correspond to the nodes in the Manually Triggered Workflows pane.
	//
	// 	- PAUSE: The node is a paused node.
	//
	// 	- SKIP: The node is a dry-run node. Dry-run nodes are started as scheduled, but the system sets the status of the nodes to successful when it starts to run them.
	//
	// example:
	//
	// NORMAL
	SchedulerType *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetAutoRerunIntervalMillis(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.AutoRerunIntervalMillis = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetAutoRerunTimes(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.AutoRerunTimes = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetCronExpress(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.CronExpress = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetCycleType(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.CycleType = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetDependentNodeIdList(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.DependentNodeIdList = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetDependentType(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.DependentType = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetInputList(v []*GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.InputList = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetOutputList(v []*GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.OutputList = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetParaValue(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.ParaValue = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetRerunMode(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.RerunMode = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetResourceGroupId(v int64) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.ResourceGroupId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration) SetSchedulerType(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfiguration {
	s.SchedulerType = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList struct {
	// The output name of the parent file on which the current file depends.
	//
	// This parameter corresponds to the Output Name of Ancestor Node parameter under Parent Nodes in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// dw_project_root
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// The mode of the configuration file dependency. Valid values:
	//
	// 	- MANUAL: Scheduling dependencies are manually configured.
	//
	// 	- AUTO: Scheduling dependencies are automatically parsed.
	//
	// example:
	//
	// MANUAL
	ParseType *string `json:"ParseType,omitempty" xml:"ParseType,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList) SetInput(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList {
	s.Input = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList) SetParseType(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationInputList {
	s.ParseType = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList struct {
	// The output name of the current file.
	//
	// This parameter corresponds to the Output Name parameter under Output Name of Current Node in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// dw_project.002_out
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// The output table name of the current file.
	//
	// This parameter corresponds to the Output Table Name parameter under Output Name of Current Node in the Dependencies section of the Properties tab on the DataStudio page in the [DataWorks console](https://workbench.data.aliyun.com/console).
	//
	// example:
	//
	// ods_user_info_d
	RefTableName *string `json:"RefTableName,omitempty" xml:"RefTableName,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList) SetOutput(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList {
	s.Output = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList) SetRefTableName(v string) *GetIDEEventDetailResponseBodyEventDetailCommittedFileNodeConfigurationOutputList {
	s.RefTableName = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailDeletedFile struct {
	// The ID of the workflow to which the file belongs.
	//
	// example:
	//
	// 74328
	BusinessId *int64 `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	// The code in the file of the current version.
	//
	// example:
	//
	// SHOW TABLES;
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The latest version number of the file.
	//
	// example:
	//
	// 1
	CurrentVersion *int64 `json:"CurrentVersion,omitempty" xml:"CurrentVersion,omitempty"`
	// The name of the data source with which the file is associated.
	//
	// example:
	//
	// odps_source
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The file ID.
	//
	// example:
	//
	// 1234123
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The name of the file.
	//
	// example:
	//
	// hello_dataworks.sql
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file type. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).
	//
	// example:
	//
	// 10
	FileType *int64 `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The ID of the folder to which the file belongs. You can call the [GetFolder](https://help.aliyun.com/document_detail/173952.html) operation to query the details of the file based on the folder ID.
	//
	// example:
	//
	// aldurie78l2falure
	FolderId *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	// The ID of the node that is scheduled.
	//
	// example:
	//
	// 421429
	NodeId *int64 `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The file owner.
	//
	// example:
	//
	// 7384234****
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The ID of the do-while node or for-each node that corresponds to the file.
	//
	// example:
	//
	// 1234122
	ParentFileId *int64 `json:"ParentFileId,omitempty" xml:"ParentFileId,omitempty"`
	// The module to which the file belongs. Valid values:
	//
	// 	- NORMAL: The file is used for DataStudio.
	//
	// 	- MANUAL: The file is used for a manually triggered node.
	//
	// 	- MANUAL_BIZ: The file is used for a manually triggered workflow.
	//
	// 	- SKIP: The file is used for a dry-run node in DataStudio.
	//
	// 	- ADHOCQUERY: The file is used for an ad hoc query.
	//
	// 	- COMPONENT: The file is used for a script template.
	//
	// example:
	//
	// NORMAL
	UseType *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailDeletedFile) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailDeletedFile) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetBusinessId(v int64) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.BusinessId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetContent(v string) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.Content = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetCurrentVersion(v int64) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.CurrentVersion = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetDataSourceName(v string) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.DataSourceName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetFileId(v int64) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.FileId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetFileName(v string) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.FileName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetFileType(v int64) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.FileType = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetFolderId(v string) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.FolderId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetNodeId(v int64) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.NodeId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetOwner(v string) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.Owner = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetParentFileId(v int64) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.ParentFileId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailDeletedFile) SetUseType(v string) *GetIDEEventDetailResponseBodyEventDetailDeletedFile {
	s.UseType = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand struct {
	// The code in the file of the current version.
	//
	// example:
	//
	// SHOW TABLES;
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The name of the data source with which the file is associated.
	//
	// example:
	//
	// odps_source
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The file ID.
	//
	// example:
	//
	// 1234123
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The file type. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).
	//
	// example:
	//
	// 10
	FileType *int64 `json:"FileType,omitempty" xml:"FileType,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) SetContent(v string) *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand {
	s.Content = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) SetDataSourceName(v string) *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand {
	s.DataSourceName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) SetFileId(v int64) *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand {
	s.FileId = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand) SetFileType(v int64) *GetIDEEventDetailResponseBodyEventDetailFileExecutionCommand {
	s.FileType = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailTableModel struct {
	// The columns in the table.
	Columns []*GetIDEEventDetailResponseBodyEventDetailTableModelColumns `json:"Columns,omitempty" xml:"Columns,omitempty" type:"Repeated"`
	// The remarks of the table.
	//
	// example:
	//
	// A new table
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The name of the data source to which the table belongs.
	//
	// example:
	//
	// odps_source
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	// The environment in which the table is used. Valid values:
	//
	// 	- DEV
	//
	// 	- PROD
	//
	// example:
	//
	// DEV
	Env *string `json:"Env,omitempty" xml:"Env,omitempty"`
	// The lifecycle of the table. Unit: day.
	//
	// example:
	//
	// 7
	LifeCycle *int64 `json:"LifeCycle,omitempty" xml:"LifeCycle,omitempty"`
	// The path of the table.
	//
	// example:
	//
	// hdfs://path/to/object
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the table.
	//
	// example:
	//
	// tb_hello
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailTableModel) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailTableModel) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetColumns(v []*GetIDEEventDetailResponseBodyEventDetailTableModelColumns) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.Columns = v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetComment(v string) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.Comment = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetDataSourceName(v string) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.DataSourceName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetEnv(v string) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.Env = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetLifeCycle(v int64) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.LifeCycle = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetLocation(v string) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.Location = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModel) SetTableName(v string) *GetIDEEventDetailResponseBodyEventDetailTableModel {
	s.TableName = &v
	return s
}

type GetIDEEventDetailResponseBodyEventDetailTableModelColumns struct {
	// The name of the column.
	//
	// example:
	//
	// ID
	ColumnName *string `json:"ColumnName,omitempty" xml:"ColumnName,omitempty"`
	// The data type of the column.
	//
	// example:
	//
	// BIGINT
	ColumnType *string `json:"ColumnType,omitempty" xml:"ColumnType,omitempty"`
	// The remarks of the column.
	//
	// example:
	//
	// ID
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// Indicates whether the column is a partition key column. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// false
	IsPartitionColumn *bool `json:"IsPartitionColumn,omitempty" xml:"IsPartitionColumn,omitempty"`
}

func (s GetIDEEventDetailResponseBodyEventDetailTableModelColumns) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponseBodyEventDetailTableModelColumns) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModelColumns) SetColumnName(v string) *GetIDEEventDetailResponseBodyEventDetailTableModelColumns {
	s.ColumnName = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModelColumns) SetColumnType(v string) *GetIDEEventDetailResponseBodyEventDetailTableModelColumns {
	s.ColumnType = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModelColumns) SetComment(v string) *GetIDEEventDetailResponseBodyEventDetailTableModelColumns {
	s.Comment = &v
	return s
}

func (s *GetIDEEventDetailResponseBodyEventDetailTableModelColumns) SetIsPartitionColumn(v bool) *GetIDEEventDetailResponseBodyEventDetailTableModelColumns {
	s.IsPartitionColumn = &v
	return s
}

type GetIDEEventDetailResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetIDEEventDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetIDEEventDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetIDEEventDetailResponse) GoString() string {
	return s.String()
}

func (s *GetIDEEventDetailResponse) SetHeaders(v map[string]*string) *GetIDEEventDetailResponse {
	s.Headers = v
	return s
}

func (s *GetIDEEventDetailResponse) SetStatusCode(v int32) *GetIDEEventDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetIDEEventDetailResponse) SetBody(v *GetIDEEventDetailResponseBody) *GetIDEEventDetailResponse {
	s.Body = v
	return s
}

type GetJobStatusRequest struct {
	// The ID of the asynchronous task that is generated after you call an asynchronous operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 70ecdaec-bf21-4c11-8ecb-4f77453ceea8
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetJobStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetJobStatusRequest) GoString() string {
	return s.String()
}

func (s *GetJobStatusRequest) SetJobId(v string) *GetJobStatusRequest {
	s.JobId = &v
	return s
}

type GetJobStatusResponseBody struct {
	// The real-time status information of the asynchronous task.
	JobStatus *GetJobStatusResponseBodyJobStatus `json:"JobStatus,omitempty" xml:"JobStatus,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 5E2BFE96-C0E0-5A98-85C8-633EC803198D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetJobStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetJobStatusResponseBody) GoString() string {
	return s.String()
}

func (s *GetJobStatusResponseBody) SetJobStatus(v *GetJobStatusResponseBodyJobStatus) *GetJobStatusResponseBody {
	s.JobStatus = v
	return s
}

func (s *GetJobStatusResponseBody) SetRequestId(v string) *GetJobStatusResponseBody {
	s.RequestId = &v
	return s
}

type GetJobStatusResponseBodyJobStatus struct {
	// Indicates whether the asynchronous task is complete. Valid values: True False
	//
	// example:
	//
	// False
	Completed *string `json:"Completed,omitempty" xml:"Completed,omitempty"`
	// The time when the asynchronous task was created.
	//
	// example:
	//
	// 1729063449802
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The error message returned if the asynchronous task fails.
	//
	// example:
	//
	// Not Found
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// The ID of the asynchronous task.
	//
	// example:
	//
	// C664CDE3-9C0B-5792-B17F-6C543783BBBC
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The type of the asynchronous task. Valid values:
	//
	// 	- **Create**: The asynchronous task is used to create an object.
	//
	// 	- **Update**: The asynchronous task is used to update an object.
	//
	// 	- **Cancel**: The asynchronous task is used to cancel an operation.
	//
	// example:
	//
	// Create
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The status of the asynchronous task. Valid values:
	//
	// 	- **Success**
	//
	// 	- **Fail**
	//
	// 	- **Cancel**
	//
	// 	- **Running**
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetJobStatusResponseBodyJobStatus) String() string {
	return tea.Prettify(s)
}

func (s GetJobStatusResponseBodyJobStatus) GoString() string {
	return s.String()
}

func (s *GetJobStatusResponseBodyJobStatus) SetCompleted(v string) *GetJobStatusResponseBodyJobStatus {
	s.Completed = &v
	return s
}

func (s *GetJobStatusResponseBodyJobStatus) SetCreateTime(v string) *GetJobStatusResponseBodyJobStatus {
	s.CreateTime = &v
	return s
}

func (s *GetJobStatusResponseBodyJobStatus) SetError(v string) *GetJobStatusResponseBodyJobStatus {
	s.Error = &v
	return s
}

func (s *GetJobStatusResponseBodyJobStatus) SetJobId(v string) *GetJobStatusResponseBodyJobStatus {
	s.JobId = &v
	return s
}

func (s *GetJobStatusResponseBodyJobStatus) SetJobType(v string) *GetJobStatusResponseBodyJobStatus {
	s.JobType = &v
	return s
}

func (s *GetJobStatusResponseBodyJobStatus) SetStatus(v string) *GetJobStatusResponseBodyJobStatus {
	s.Status = &v
	return s
}

type GetJobStatusResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetJobStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetJobStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetJobStatusResponse) GoString() string {
	return s.String()
}

func (s *GetJobStatusResponse) SetHeaders(v map[string]*string) *GetJobStatusResponse {
	s.Headers = v
	return s
}

func (s *GetJobStatusResponse) SetStatusCode(v int32) *GetJobStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *GetJobStatusResponse) SetBody(v *GetJobStatusResponseBody) *GetJobStatusResponse {
	s.Body = v
	return s
}

type GetLineageRelationshipRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 110xxxx:custom-table.xxxxx:maxcompute-table.project.test_big_lineage_080901:custom-sqlxx.00001
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetLineageRelationshipRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLineageRelationshipRequest) GoString() string {
	return s.String()
}

func (s *GetLineageRelationshipRequest) SetId(v string) *GetLineageRelationshipRequest {
	s.Id = &v
	return s
}

type GetLineageRelationshipResponseBody struct {
	LineageRelationship *LineageRelationship `json:"LineageRelationship,omitempty" xml:"LineageRelationship,omitempty"`
	// example:
	//
	// 58D5334A-B013-430E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLineageRelationshipResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLineageRelationshipResponseBody) GoString() string {
	return s.String()
}

func (s *GetLineageRelationshipResponseBody) SetLineageRelationship(v *LineageRelationship) *GetLineageRelationshipResponseBody {
	s.LineageRelationship = v
	return s
}

func (s *GetLineageRelationshipResponseBody) SetRequestId(v string) *GetLineageRelationshipResponseBody {
	s.RequestId = &v
	return s
}

type GetLineageRelationshipResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLineageRelationshipResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLineageRelationshipResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLineageRelationshipResponse) GoString() string {
	return s.String()
}

func (s *GetLineageRelationshipResponse) SetHeaders(v map[string]*string) *GetLineageRelationshipResponse {
	s.Headers = v
	return s
}

func (s *GetLineageRelationshipResponse) SetStatusCode(v int32) *GetLineageRelationshipResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLineageRelationshipResponse) SetBody(v *GetLineageRelationshipResponseBody) *GetLineageRelationshipResponse {
	s.Body = v
	return s
}

type GetMetaCollectionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// category.123
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetMetaCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetaCollectionRequest) GoString() string {
	return s.String()
}

func (s *GetMetaCollectionRequest) SetId(v string) *GetMetaCollectionRequest {
	s.Id = &v
	return s
}

type GetMetaCollectionResponseBody struct {
	MetaCollection *GetMetaCollectionResponseBodyMetaCollection `json:"MetaCollection,omitempty" xml:"MetaCollection,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// 1AFAE64E-D1BE-432B-A9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMetaCollectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetaCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetaCollectionResponseBody) SetMetaCollection(v *GetMetaCollectionResponseBodyMetaCollection) *GetMetaCollectionResponseBody {
	s.MetaCollection = v
	return s
}

func (s *GetMetaCollectionResponseBody) SetRequestId(v string) *GetMetaCollectionResponseBody {
	s.RequestId = &v
	return s
}

type GetMetaCollectionResponseBodyMetaCollection struct {
	Administrators []*int64 `json:"Administrators,omitempty" xml:"Administrators,omitempty" type:"Repeated"`
	// example:
	//
	// 1668568601000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 456789
	CreateUser  *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// category.123
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 1668568601000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// example:
	//
	// test_category
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// category.12
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// Category
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetMetaCollectionResponseBodyMetaCollection) String() string {
	return tea.Prettify(s)
}

func (s GetMetaCollectionResponseBodyMetaCollection) GoString() string {
	return s.String()
}

func (s *GetMetaCollectionResponseBodyMetaCollection) SetAdministrators(v []*int64) *GetMetaCollectionResponseBodyMetaCollection {
	s.Administrators = v
	return s
}

func (s *GetMetaCollectionResponseBodyMetaCollection) SetCreateTime(v int64) *GetMetaCollectionResponseBodyMetaCollection {
	s.CreateTime = &v
	return s
}

func (s *GetMetaCollectionResponseBodyMetaCollection) SetCreateUser(v string) *GetMetaCollectionResponseBodyMetaCollection {
	s.CreateUser = &v
	return s
}

func (s *GetMetaCollectionResponseBodyMetaCollection) SetDescription(v string) *GetMetaCollectionResponseBodyMetaCollection {
	s.Description = &v
	return s
}

func (s *GetMetaCollectionResponseBodyMetaCollection) SetId(v string) *GetMetaCollectionResponseBodyMetaCollection {
	s.Id = &v
	return s
}

func (s *GetMetaCollectionResponseBodyMetaCollection) SetModifyTime(v int64) *GetMetaCollectionResponseBodyMetaCollection {
	s.ModifyTime = &v
	return s
}

func (s *GetMetaCollectionResponseBodyMetaCollection) SetName(v string) *GetMetaCollectionResponseBodyMetaCollection {
	s.Name = &v
	return s
}

func (s *GetMetaCollectionResponseBodyMetaCollection) SetParentId(v string) *GetMetaCollectionResponseBodyMetaCollection {
	s.ParentId = &v
	return s
}

func (s *GetMetaCollectionResponseBodyMetaCollection) SetType(v string) *GetMetaCollectionResponseBodyMetaCollection {
	s.Type = &v
	return s
}

type GetMetaCollectionResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMetaCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMetaCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetaCollectionResponse) GoString() string {
	return s.String()
}

func (s *GetMetaCollectionResponse) SetHeaders(v map[string]*string) *GetMetaCollectionResponse {
	s.Headers = v
	return s
}

func (s *GetMetaCollectionResponse) SetStatusCode(v int32) *GetMetaCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMetaCollectionResponse) SetBody(v *GetMetaCollectionResponseBody) *GetMetaCollectionResponse {
	s.Body = v
	return s
}

type GetNetworkRequest struct {
	// The network ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNetworkRequest) GoString() string {
	return s.String()
}

func (s *GetNetworkRequest) SetId(v int64) *GetNetworkRequest {
	s.Id = &v
	return s
}

type GetNetworkResponseBody struct {
	// The information about the network resource.
	Network *GetNetworkResponseBodyNetwork `json:"Network,omitempty" xml:"Network,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *GetNetworkResponseBody) SetNetwork(v *GetNetworkResponseBodyNetwork) *GetNetworkResponseBody {
	s.Network = v
	return s
}

func (s *GetNetworkResponseBody) SetRequestId(v string) *GetNetworkResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetNetworkResponseBody) SetSuccess(v bool) *GetNetworkResponseBody {
	s.Success = &v
	return s
}

type GetNetworkResponseBodyNetwork struct {
	// The time when the network resource was created. The value is a 64-bit timestamp.
	//
	// example:
	//
	// 1727055811000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the user who creates the network resource.
	//
	// example:
	//
	// 11075500042XXXXX
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The network ID.
	//
	// example:
	//
	// 1000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the serverless resource group.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The security group ID.
	//
	// example:
	//
	// sg-2ze13vamugr7jenXXXXX
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The status of the network resource. Valid values:
	//
	// 	- Pending: The network resource is waiting to be created.
	//
	// 	- Creating: The network resource is being created.
	//
	// 	- Running: The network resource is running as expected.
	//
	// 	- Deleting: The network resource is being deleted.
	//
	// 	- Deleted: The network resource is deleted.
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the virtual private cloud (VPC).
	//
	// example:
	//
	// vpc-m2et4f3oc8msfbccXXXXX
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The VSwitch ID.
	//
	// example:
	//
	// vsw-uf8usrhs7hjd9amsXXXXX
	VswitchId *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s GetNetworkResponseBodyNetwork) String() string {
	return tea.Prettify(s)
}

func (s GetNetworkResponseBodyNetwork) GoString() string {
	return s.String()
}

func (s *GetNetworkResponseBodyNetwork) SetCreateTime(v int64) *GetNetworkResponseBodyNetwork {
	s.CreateTime = &v
	return s
}

func (s *GetNetworkResponseBodyNetwork) SetCreateUser(v string) *GetNetworkResponseBodyNetwork {
	s.CreateUser = &v
	return s
}

func (s *GetNetworkResponseBodyNetwork) SetId(v int64) *GetNetworkResponseBodyNetwork {
	s.Id = &v
	return s
}

func (s *GetNetworkResponseBodyNetwork) SetResourceGroupId(v string) *GetNetworkResponseBodyNetwork {
	s.ResourceGroupId = &v
	return s
}

func (s *GetNetworkResponseBodyNetwork) SetSecurityGroupId(v string) *GetNetworkResponseBodyNetwork {
	s.SecurityGroupId = &v
	return s
}

func (s *GetNetworkResponseBodyNetwork) SetStatus(v string) *GetNetworkResponseBodyNetwork {
	s.Status = &v
	return s
}

func (s *GetNetworkResponseBodyNetwork) SetVpcId(v string) *GetNetworkResponseBodyNetwork {
	s.VpcId = &v
	return s
}

func (s *GetNetworkResponseBodyNetwork) SetVswitchId(v string) *GetNetworkResponseBodyNetwork {
	s.VswitchId = &v
	return s
}

type GetNetworkResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNetworkResponse) GoString() string {
	return s.String()
}

func (s *GetNetworkResponse) SetHeaders(v map[string]*string) *GetNetworkResponse {
	s.Headers = v
	return s
}

func (s *GetNetworkResponse) SetStatusCode(v int32) *GetNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *GetNetworkResponse) SetBody(v *GetNetworkResponseBody) *GetNetworkResponse {
	s.Body = v
	return s
}

type GetNodeRequest struct {
	// The ID of the node.
	//
	// This parameter is required.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodeRequest) GoString() string {
	return s.String()
}

func (s *GetNodeRequest) SetId(v int64) *GetNodeRequest {
	s.Id = &v
	return s
}

func (s *GetNodeRequest) SetProjectId(v int64) *GetNodeRequest {
	s.ProjectId = &v
	return s
}

type GetNodeResponseBody struct {
	// The information about the node.
	Node *GetNodeResponseBodyNode `json:"Node,omitempty" xml:"Node,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNodeResponseBody) GoString() string {
	return s.String()
}

func (s *GetNodeResponseBody) SetNode(v *GetNodeResponseBodyNode) *GetNodeResponseBody {
	s.Node = v
	return s
}

func (s *GetNodeResponseBody) SetRequestId(v string) *GetNodeResponseBody {
	s.RequestId = &v
	return s
}

type GetNodeResponseBodyNode struct {
	// The time when the node was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1700539206000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the node.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The time when the node was last modified. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1700539206000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The name of the node.
	//
	// example:
	//
	// Node name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The owner of the node.
	//
	// example:
	//
	// 196596664824XXXX
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The FlowSpec field information about this node. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow).
	//
	// example:
	//
	// {
	//
	//     "version": "1.1.0",
	//
	//     "kind": "Node",
	//
	//     "spec": {
	//
	//         "nodes": [
	//
	//             {
	//
	//                 "recurrence": "Normal",
	//
	//                 "id": "860438872620113XXXX",
	//
	//                 "timeout": 0,
	//
	//                 "instanceMode": "T+1",
	//
	//                 "rerunMode": "Allowed",
	//
	//                 "rerunTimes": 3,
	//
	//                 "rerunInterval": 180000,
	//
	//                 "datasource": {
	//
	//                     "name": "odps_test",
	//
	//                     "type": "odps"
	//
	//                 },
	//
	//                 "script": {
	//
	//                     "language": "odps-sql",
	//
	//                     "path": "XX/OpenAPI_Test/ODPS_SQL_Test",
	//
	//                     "runtime": {
	//
	//                         "command": "ODPS_SQL",
	//
	//                         "commandTypeId": 10
	//
	//                     },
	//
	//                     "content": "select now();",
	//
	//                     "id": "853573334108680XXXX"
	//
	//                 },
	//
	//                 "trigger": {
	//
	//                     "type": "Scheduler",
	//
	//                     "id": "543680677872062XXXX",
	//
	//                     "cron": "00 00 00 	- 	- ?",
	//
	//                     "startTime": "1970-01-01 00:00:00",
	//
	//                     "endTime": "9999-01-01 00:00:00",
	//
	//                     "timezone": "Asia/Shanghai",
	//
	//                     "delaySeconds": 0
	//
	//                 },
	//
	//                 "runtimeResource": {
	//
	//                     "resourceGroup": "S_res_group_XXXX_XXXX",
	//
	//                     "id": "623731286945488XXXX",
	//
	//                     "resourceGroupId": "7201XXXX"
	//
	//                 },
	//
	//                 "name": "ODPS_SQL_Test",
	//
	//                 "owner": "110755000425XXXX",
	//
	//                 "metadata": {
	//
	//                     "owner": "110755000425XXXX",
	//
	//                     "ownerName": "XXXXX@test.XXX.com",
	//
	//                     "projectId": "307XXX"
	//
	//                 },
	//
	//                 "inputs": {
	//
	//                     "nodeOutputs": [
	//
	//                         {
	//
	//                             "data": "lwttest_standard_root",
	//
	//                             "artifactType": "NodeOutput"
	//
	//                         }
	//
	//                     ]
	//
	//                 },
	//
	//                 "outputs": {
	//
	//                     "nodeOutputs": [
	//
	//                         {
	//
	//                             "data": "860438872620113XXXX",
	//
	//                             "artifactType": "NodeOutput",
	//
	//                             "refTableName": "ODPS_SQL_Test",
	//
	//                             "isDefault": true
	//
	//                         }
	//
	//                     ]
	//
	//                 }
	//
	//             }
	//
	//         ],
	//
	//         "flow": [
	//
	//             {
	//
	//                 "nodeId": "860438872620113XXXX",
	//
	//                 "depends": [
	//
	//                     {
	//
	//                         "type": "Normal",
	//
	//                         "output": "lwttest_standard_root"
	//
	//                     }
	//
	//                 ]
	//
	//             }
	//
	//         ]
	//
	//     },
	//
	//     "metadata": {
	//
	//         "uuid": "860438872620113XXXX"
	//
	//     }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	// The Id of the scheduled task after the node is published.
	//
	// example:
	//
	// 700006680527
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetNodeResponseBodyNode) String() string {
	return tea.Prettify(s)
}

func (s GetNodeResponseBodyNode) GoString() string {
	return s.String()
}

func (s *GetNodeResponseBodyNode) SetCreateTime(v int64) *GetNodeResponseBodyNode {
	s.CreateTime = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetId(v int64) *GetNodeResponseBodyNode {
	s.Id = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetModifyTime(v int64) *GetNodeResponseBodyNode {
	s.ModifyTime = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetName(v string) *GetNodeResponseBodyNode {
	s.Name = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetOwner(v string) *GetNodeResponseBodyNode {
	s.Owner = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetProjectId(v int64) *GetNodeResponseBodyNode {
	s.ProjectId = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetSpec(v string) *GetNodeResponseBodyNode {
	s.Spec = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetTaskId(v int64) *GetNodeResponseBodyNode {
	s.TaskId = &v
	return s
}

type GetNodeResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetNodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNodeResponse) GoString() string {
	return s.String()
}

func (s *GetNodeResponse) SetHeaders(v map[string]*string) *GetNodeResponse {
	s.Headers = v
	return s
}

func (s *GetNodeResponse) SetStatusCode(v int32) *GetNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetNodeResponse) SetBody(v *GetNodeResponseBody) *GetNodeResponse {
	s.Body = v
	return s
}

type GetPartitionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ds=20250101
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-column:11075xxxx::test_project:test_schema:test_table
	TableId *string `json:"TableId,omitempty" xml:"TableId,omitempty"`
}

func (s GetPartitionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPartitionRequest) GoString() string {
	return s.String()
}

func (s *GetPartitionRequest) SetName(v string) *GetPartitionRequest {
	s.Name = &v
	return s
}

func (s *GetPartitionRequest) SetTableId(v string) *GetPartitionRequest {
	s.TableId = &v
	return s
}

type GetPartitionResponseBody struct {
	Partition *Partition `json:"Partition,omitempty" xml:"Partition,omitempty"`
	// example:
	//
	// D1E2E5BC-xxxx-xxxx-xxxx-xxxxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetPartitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPartitionResponseBody) GoString() string {
	return s.String()
}

func (s *GetPartitionResponseBody) SetPartition(v *Partition) *GetPartitionResponseBody {
	s.Partition = v
	return s
}

func (s *GetPartitionResponseBody) SetRequestId(v string) *GetPartitionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPartitionResponseBody) SetSuccess(v bool) *GetPartitionResponseBody {
	s.Success = &v
	return s
}

type GetPartitionResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPartitionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPartitionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPartitionResponse) GoString() string {
	return s.String()
}

func (s *GetPartitionResponse) SetHeaders(v map[string]*string) *GetPartitionResponse {
	s.Headers = v
	return s
}

func (s *GetPartitionResponse) SetStatusCode(v int32) *GetPartitionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPartitionResponse) SetBody(v *GetPartitionResponseBody) *GetPartitionResponse {
	s.Body = v
	return s
}

type GetPipelineRunRequest struct {
	// The ID of the process.
	//
	// This parameter is required.
	//
	// example:
	//
	// a7ef0634-20ec-4a7c-a214-54020f****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetPipelineRunRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunRequest) GoString() string {
	return s.String()
}

func (s *GetPipelineRunRequest) SetId(v string) *GetPipelineRunRequest {
	s.Id = &v
	return s
}

func (s *GetPipelineRunRequest) SetProjectId(v int64) *GetPipelineRunRequest {
	s.ProjectId = &v
	return s
}

type GetPipelineRunResponseBody struct {
	// The information about the process.
	Pipeline *GetPipelineRunResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 08468352-032C-5262-AEDC-68C9FA05XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPipelineRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunResponseBody) GoString() string {
	return s.String()
}

func (s *GetPipelineRunResponseBody) SetPipeline(v *GetPipelineRunResponseBodyPipeline) *GetPipelineRunResponseBody {
	s.Pipeline = v
	return s
}

func (s *GetPipelineRunResponseBody) SetRequestId(v string) *GetPipelineRunResponseBody {
	s.RequestId = &v
	return s
}

type GetPipelineRunResponseBodyPipeline struct {
	// The time when the process was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1724984066000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The creator of the process.
	//
	// example:
	//
	// 137946317766XXXX
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// The process ID.
	//
	// example:
	//
	// a7ef0634-20ec-4a7c-a214-54020f91XXXX
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The error message returned when the process fails.
	//
	// example:
	//
	// Error message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The time when the process was modified. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1724984066000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 56160
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The information about stages in the process.
	Stages []*GetPipelineRunResponseBodyPipelineStages `json:"Stages,omitempty" xml:"Stages,omitempty" type:"Repeated"`
	// The status of the process.
	//
	// Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Success
	//
	// 	- Fail
	//
	// 	- Termination
	//
	// 	- Cancel
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetPipelineRunResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *GetPipelineRunResponseBodyPipeline) SetCreateTime(v int64) *GetPipelineRunResponseBodyPipeline {
	s.CreateTime = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipeline) SetCreator(v string) *GetPipelineRunResponseBodyPipeline {
	s.Creator = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipeline) SetId(v string) *GetPipelineRunResponseBodyPipeline {
	s.Id = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipeline) SetMessage(v string) *GetPipelineRunResponseBodyPipeline {
	s.Message = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipeline) SetModifyTime(v int64) *GetPipelineRunResponseBodyPipeline {
	s.ModifyTime = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipeline) SetProjectId(v int64) *GetPipelineRunResponseBodyPipeline {
	s.ProjectId = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipeline) SetStages(v []*GetPipelineRunResponseBodyPipelineStages) *GetPipelineRunResponseBodyPipeline {
	s.Stages = v
	return s
}

func (s *GetPipelineRunResponseBodyPipeline) SetStatus(v string) *GetPipelineRunResponseBodyPipeline {
	s.Status = &v
	return s
}

type GetPipelineRunResponseBodyPipelineStages struct {
	// The code of the stage.
	//
	// example:
	//
	// DEV_CHECK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The description of the stage.
	//
	// example:
	//
	// Phase description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The details of the stage.
	Detail map[string]interface{} `json:"Detail,omitempty" xml:"Detail,omitempty"`
	// The error message returned for the stage.
	//
	// example:
	//
	// Exception information XXX
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The name of the stage.
	//
	// example:
	//
	// Publish package build
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The status of the stage.
	//
	// Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Success
	//
	// 	- Fail
	//
	// 	- Termination
	//
	// 	- Cancel
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The step number of the stage.
	//
	// example:
	//
	// 1
	Step *int32 `json:"Step,omitempty" xml:"Step,omitempty"`
	// The type of the stage.
	//
	// Valid values:
	//
	// 	- Deploy
	//
	// 	- Check
	//
	// 	- Offline
	//
	// 	- Build
	//
	// 	- Delete
	//
	// example:
	//
	// Check
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetPipelineRunResponseBodyPipelineStages) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunResponseBodyPipelineStages) GoString() string {
	return s.String()
}

func (s *GetPipelineRunResponseBodyPipelineStages) SetCode(v string) *GetPipelineRunResponseBodyPipelineStages {
	s.Code = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineStages) SetDescription(v string) *GetPipelineRunResponseBodyPipelineStages {
	s.Description = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineStages) SetDetail(v map[string]interface{}) *GetPipelineRunResponseBodyPipelineStages {
	s.Detail = v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineStages) SetMessage(v string) *GetPipelineRunResponseBodyPipelineStages {
	s.Message = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineStages) SetName(v string) *GetPipelineRunResponseBodyPipelineStages {
	s.Name = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineStages) SetStatus(v string) *GetPipelineRunResponseBodyPipelineStages {
	s.Status = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineStages) SetStep(v int32) *GetPipelineRunResponseBodyPipelineStages {
	s.Step = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineStages) SetType(v string) *GetPipelineRunResponseBodyPipelineStages {
	s.Type = &v
	return s
}

type GetPipelineRunResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPipelineRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPipelineRunResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunResponse) GoString() string {
	return s.String()
}

func (s *GetPipelineRunResponse) SetHeaders(v map[string]*string) *GetPipelineRunResponse {
	s.Headers = v
	return s
}

func (s *GetPipelineRunResponse) SetStatusCode(v int32) *GetPipelineRunResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPipelineRunResponse) SetBody(v *GetPipelineRunResponseBody) *GetPipelineRunResponse {
	s.Body = v
	return s
}

type GetProjectRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s GetProjectRequest) GoString() string {
	return s.String()
}

func (s *GetProjectRequest) SetId(v int64) *GetProjectRequest {
	s.Id = &v
	return s
}

type GetProjectResponseBody struct {
	// The information about the workspace.
	Project *GetProjectResponseBodyProject `json:"Project,omitempty" xml:"Project,omitempty" type:"Struct"`
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProjectResponseBody) GoString() string {
	return s.String()
}

func (s *GetProjectResponseBody) SetProject(v *GetProjectResponseBodyProject) *GetProjectResponseBody {
	s.Project = v
	return s
}

func (s *GetProjectResponseBody) SetRequestId(v string) *GetProjectResponseBody {
	s.RequestId = &v
	return s
}

type GetProjectResponseBodyProject struct {
	// The ID of the Alibaba Cloud resource group to which the workspace belongs.
	//
	// example:
	//
	// rg-acfmzbn7pti3zfa
	AliyunResourceGroupId *string `json:"AliyunResourceGroupId,omitempty" xml:"AliyunResourceGroupId,omitempty"`
	// The tags.
	AliyunResourceTags []*GetProjectResponseBodyProjectAliyunResourceTags `json:"AliyunResourceTags,omitempty" xml:"AliyunResourceTags,omitempty" type:"Repeated"`
	// The description of the workspace.
	//
	// example:
	//
	// Financial analysis group project data development
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Indicates whether the development environment is enabled. Valid values:
	//
	// 	- true: The development environment is enabled. In this case, the development environment is isolated from the production environment in the workspace.
	//
	// 	- false: The development environment is disabled. In this case, only the production environment is used in the workspace.
	//
	// example:
	//
	// true
	DevEnvironmentEnabled *bool `json:"DevEnvironmentEnabled,omitempty" xml:"DevEnvironmentEnabled,omitempty"`
	// Indicates whether the Develop role is disabled. Valid values:
	//
	// 	- false
	//
	// 	- true
	//
	// example:
	//
	// false
	DevRoleDisabled *bool `json:"DevRoleDisabled,omitempty" xml:"DevRoleDisabled,omitempty"`
	// The display name of the workspace.
	//
	// example:
	//
	// Sora financial analysis
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 28477242
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the workspace.
	//
	// example:
	//
	// sora_finance
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the Alibaba Cloud account to which the workspace belongs.
	//
	// example:
	//
	// 207947397706614299
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// Indicates whether scheduling of PAI tasks is enabled. Valid values:
	//
	// 	- true: Scheduling of PAI tasks is enabled. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
	//
	// 	- false: Scheduling of PAI tasks is disabled.
	//
	// example:
	//
	// true
	PaiTaskEnabled *bool `json:"PaiTaskEnabled,omitempty" xml:"PaiTaskEnabled,omitempty"`
	// The status of the workspace. Valid values:
	//
	// 	- Available
	//
	// 	- Initializing
	//
	// 	- InitFailed
	//
	// 	- Forbidden
	//
	// 	- Deleting
	//
	// 	- DeleteFailed
	//
	// 	- Frozen
	//
	// 	- Updating
	//
	// 	- UpdateFailed
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetProjectResponseBodyProject) String() string {
	return tea.Prettify(s)
}

func (s GetProjectResponseBodyProject) GoString() string {
	return s.String()
}

func (s *GetProjectResponseBodyProject) SetAliyunResourceGroupId(v string) *GetProjectResponseBodyProject {
	s.AliyunResourceGroupId = &v
	return s
}

func (s *GetProjectResponseBodyProject) SetAliyunResourceTags(v []*GetProjectResponseBodyProjectAliyunResourceTags) *GetProjectResponseBodyProject {
	s.AliyunResourceTags = v
	return s
}

func (s *GetProjectResponseBodyProject) SetDescription(v string) *GetProjectResponseBodyProject {
	s.Description = &v
	return s
}

func (s *GetProjectResponseBodyProject) SetDevEnvironmentEnabled(v bool) *GetProjectResponseBodyProject {
	s.DevEnvironmentEnabled = &v
	return s
}

func (s *GetProjectResponseBodyProject) SetDevRoleDisabled(v bool) *GetProjectResponseBodyProject {
	s.DevRoleDisabled = &v
	return s
}

func (s *GetProjectResponseBodyProject) SetDisplayName(v string) *GetProjectResponseBodyProject {
	s.DisplayName = &v
	return s
}

func (s *GetProjectResponseBodyProject) SetId(v int64) *GetProjectResponseBodyProject {
	s.Id = &v
	return s
}

func (s *GetProjectResponseBodyProject) SetName(v string) *GetProjectResponseBodyProject {
	s.Name = &v
	return s
}

func (s *GetProjectResponseBodyProject) SetOwner(v string) *GetProjectResponseBodyProject {
	s.Owner = &v
	return s
}

func (s *GetProjectResponseBodyProject) SetPaiTaskEnabled(v bool) *GetProjectResponseBodyProject {
	s.PaiTaskEnabled = &v
	return s
}

func (s *GetProjectResponseBodyProject) SetStatus(v string) *GetProjectResponseBodyProject {
	s.Status = &v
	return s
}

type GetProjectResponseBodyProjectAliyunResourceTags struct {
	// The tag key.
	//
	// example:
	//
	// batch
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// blue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetProjectResponseBodyProjectAliyunResourceTags) String() string {
	return tea.Prettify(s)
}

func (s GetProjectResponseBodyProjectAliyunResourceTags) GoString() string {
	return s.String()
}

func (s *GetProjectResponseBodyProjectAliyunResourceTags) SetKey(v string) *GetProjectResponseBodyProjectAliyunResourceTags {
	s.Key = &v
	return s
}

func (s *GetProjectResponseBodyProjectAliyunResourceTags) SetValue(v string) *GetProjectResponseBodyProjectAliyunResourceTags {
	s.Value = &v
	return s
}

type GetProjectResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProjectResponse) GoString() string {
	return s.String()
}

func (s *GetProjectResponse) SetHeaders(v map[string]*string) *GetProjectResponse {
	s.Headers = v
	return s
}

func (s *GetProjectResponse) SetStatusCode(v int32) *GetProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *GetProjectResponse) SetBody(v *GetProjectResponseBody) *GetProjectResponse {
	s.Body = v
	return s
}

type GetProjectMemberRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 88757
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the ID of the account used by the member in the workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123422344899
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetProjectMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s GetProjectMemberRequest) GoString() string {
	return s.String()
}

func (s *GetProjectMemberRequest) SetProjectId(v int64) *GetProjectMemberRequest {
	s.ProjectId = &v
	return s
}

func (s *GetProjectMemberRequest) SetUserId(v string) *GetProjectMemberRequest {
	s.UserId = &v
	return s
}

type GetProjectMemberResponseBody struct {
	// The details about the member in the workspace.
	ProjectMember *GetProjectMemberResponseBodyProjectMember `json:"ProjectMember,omitempty" xml:"ProjectMember,omitempty" type:"Struct"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 8abcb91f-d266-4073-b907-2ed670378ed1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetProjectMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProjectMemberResponseBody) GoString() string {
	return s.String()
}

func (s *GetProjectMemberResponseBody) SetProjectMember(v *GetProjectMemberResponseBodyProjectMember) *GetProjectMemberResponseBody {
	s.ProjectMember = v
	return s
}

func (s *GetProjectMemberResponseBody) SetRequestId(v string) *GetProjectMemberResponseBody {
	s.RequestId = &v
	return s
}

type GetProjectMemberResponseBodyProjectMember struct {
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 88757
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The roles that are assigned to the member in the workspace.
	Roles []*GetProjectMemberResponseBodyProjectMemberRoles `json:"Roles,omitempty" xml:"Roles,omitempty" type:"Repeated"`
	// The status of the member.
	//
	// 	- Normal
	//
	// 	- Forbidden
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the account used by the member in the workspace.
	//
	// example:
	//
	// 123422344899
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetProjectMemberResponseBodyProjectMember) String() string {
	return tea.Prettify(s)
}

func (s GetProjectMemberResponseBodyProjectMember) GoString() string {
	return s.String()
}

func (s *GetProjectMemberResponseBodyProjectMember) SetProjectId(v int64) *GetProjectMemberResponseBodyProjectMember {
	s.ProjectId = &v
	return s
}

func (s *GetProjectMemberResponseBodyProjectMember) SetRoles(v []*GetProjectMemberResponseBodyProjectMemberRoles) *GetProjectMemberResponseBodyProjectMember {
	s.Roles = v
	return s
}

func (s *GetProjectMemberResponseBodyProjectMember) SetStatus(v string) *GetProjectMemberResponseBodyProjectMember {
	s.Status = &v
	return s
}

func (s *GetProjectMemberResponseBodyProjectMember) SetUserId(v string) *GetProjectMemberResponseBodyProjectMember {
	s.UserId = &v
	return s
}

type GetProjectMemberResponseBodyProjectMemberRoles struct {
	// The code of the role. Valid values:
	//
	// 	- role_project_admin: Workspace Administrator
	//
	// 	- role_project_dev: Develop
	//
	// 	- role_project_dg_admin: Data Governance Administrator
	//
	// 	- role_project_guest: Visitor
	//
	// 	- role_project_security: Security Administrator
	//
	// 	- role_project_deploy: Deploy
	//
	// 	- role_project_owner: Workspace Owner
	//
	// 	- role_project_data_analyst: Data Analyst
	//
	// 	- role_project_pe: O\\&M
	//
	// 	- role_project_erd: Model Designer
	//
	// example:
	//
	// role_project_guest
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the role.
	//
	// example:
	//
	// Visitors
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the role. Valid values:
	//
	// 	- UserCustom: custom role
	//
	// 	- System: built-in role
	//
	// example:
	//
	// System
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetProjectMemberResponseBodyProjectMemberRoles) String() string {
	return tea.Prettify(s)
}

func (s GetProjectMemberResponseBodyProjectMemberRoles) GoString() string {
	return s.String()
}

func (s *GetProjectMemberResponseBodyProjectMemberRoles) SetCode(v string) *GetProjectMemberResponseBodyProjectMemberRoles {
	s.Code = &v
	return s
}

func (s *GetProjectMemberResponseBodyProjectMemberRoles) SetName(v string) *GetProjectMemberResponseBodyProjectMemberRoles {
	s.Name = &v
	return s
}

func (s *GetProjectMemberResponseBodyProjectMemberRoles) SetType(v string) *GetProjectMemberResponseBodyProjectMemberRoles {
	s.Type = &v
	return s
}

type GetProjectMemberResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetProjectMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetProjectMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProjectMemberResponse) GoString() string {
	return s.String()
}

func (s *GetProjectMemberResponse) SetHeaders(v map[string]*string) *GetProjectMemberResponse {
	s.Headers = v
	return s
}

func (s *GetProjectMemberResponse) SetStatusCode(v int32) *GetProjectMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *GetProjectMemberResponse) SetBody(v *GetProjectMemberResponseBody) *GetProjectMemberResponse {
	s.Body = v
	return s
}

type GetProjectRoleRequest struct {
	// The code of the role in the DataWorks workspace. Valid values:
	//
	// 	- role_project_admin: workspace administrator
	//
	// 	- role_project_dev: developer
	//
	// 	- role_project_dg_admin: data governance administrator
	//
	// 	- role_project_guest: visitor
	//
	// 	- role_project_security: security administrator
	//
	// 	- role_project_deploy: deployer
	//
	// 	- role_project_owner: workspace owner
	//
	// 	- role_project_data_analyst: data analyst
	//
	// 	- role_project_pe: O\\&M engineer
	//
	// 	- role_project_erd: model designer
	//
	// This parameter is required.
	//
	// example:
	//
	// role_project_guest
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10002
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetProjectRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetProjectRoleRequest) GoString() string {
	return s.String()
}

func (s *GetProjectRoleRequest) SetCode(v string) *GetProjectRoleRequest {
	s.Code = &v
	return s
}

func (s *GetProjectRoleRequest) SetProjectId(v int64) *GetProjectRoleRequest {
	s.ProjectId = &v
	return s
}

type GetProjectRoleResponseBody struct {
	// The role in the DataWorks workspace.
	ProjectRole *GetProjectRoleResponseBodyProjectRole `json:"ProjectRole,omitempty" xml:"ProjectRole,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 82F28E60-CF48-5EDF-AB25-D806847B97D1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetProjectRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProjectRoleResponseBody) GoString() string {
	return s.String()
}

func (s *GetProjectRoleResponseBody) SetProjectRole(v *GetProjectRoleResponseBodyProjectRole) *GetProjectRoleResponseBody {
	s.ProjectRole = v
	return s
}

func (s *GetProjectRoleResponseBody) SetRequestId(v string) *GetProjectRoleResponseBody {
	s.RequestId = &v
	return s
}

type GetProjectRoleResponseBodyProjectRole struct {
	// The code of the role in the DataWorks workspace.
	//
	// example:
	//
	// role_project_guest
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the role in the DataWorks workspace.
	//
	// example:
	//
	// Visitors
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 10002
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The type of the role in the DataWorks workspace. Valid values:
	//
	// 	- UserCustom: user-defined role
	//
	// 	- System: system role
	//
	// example:
	//
	// System
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetProjectRoleResponseBodyProjectRole) String() string {
	return tea.Prettify(s)
}

func (s GetProjectRoleResponseBodyProjectRole) GoString() string {
	return s.String()
}

func (s *GetProjectRoleResponseBodyProjectRole) SetCode(v string) *GetProjectRoleResponseBodyProjectRole {
	s.Code = &v
	return s
}

func (s *GetProjectRoleResponseBodyProjectRole) SetName(v string) *GetProjectRoleResponseBodyProjectRole {
	s.Name = &v
	return s
}

func (s *GetProjectRoleResponseBodyProjectRole) SetProjectId(v int64) *GetProjectRoleResponseBodyProjectRole {
	s.ProjectId = &v
	return s
}

func (s *GetProjectRoleResponseBodyProjectRole) SetType(v string) *GetProjectRoleResponseBodyProjectRole {
	s.Type = &v
	return s
}

type GetProjectRoleResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetProjectRoleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetProjectRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProjectRoleResponse) GoString() string {
	return s.String()
}

func (s *GetProjectRoleResponse) SetHeaders(v map[string]*string) *GetProjectRoleResponse {
	s.Headers = v
	return s
}

func (s *GetProjectRoleResponse) SetStatusCode(v int32) *GetProjectRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetProjectRoleResponse) SetBody(v *GetProjectRoleResponseBody) *GetProjectRoleResponse {
	s.Body = v
	return s
}

type GetRerunWorkflowInstancesResultRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// e15ad21c-b0e9-4792-8f55-b037xxxxxxxx
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
}

func (s GetRerunWorkflowInstancesResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRerunWorkflowInstancesResultRequest) GoString() string {
	return s.String()
}

func (s *GetRerunWorkflowInstancesResultRequest) SetOperationId(v string) *GetRerunWorkflowInstancesResultRequest {
	s.OperationId = &v
	return s
}

type GetRerunWorkflowInstancesResultResponseBody struct {
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *GetRerunWorkflowInstancesResultResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s GetRerunWorkflowInstancesResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRerunWorkflowInstancesResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetRerunWorkflowInstancesResultResponseBody) SetRequestId(v string) *GetRerunWorkflowInstancesResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRerunWorkflowInstancesResultResponseBody) SetResult(v *GetRerunWorkflowInstancesResultResponseBodyResult) *GetRerunWorkflowInstancesResultResponseBody {
	s.Result = v
	return s
}

type GetRerunWorkflowInstancesResultResponseBodyResult struct {
	FailureMessage *string `json:"FailureMessage,omitempty" xml:"FailureMessage,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRerunWorkflowInstancesResultResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetRerunWorkflowInstancesResultResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetRerunWorkflowInstancesResultResponseBodyResult) SetFailureMessage(v string) *GetRerunWorkflowInstancesResultResponseBodyResult {
	s.FailureMessage = &v
	return s
}

func (s *GetRerunWorkflowInstancesResultResponseBodyResult) SetStatus(v string) *GetRerunWorkflowInstancesResultResponseBodyResult {
	s.Status = &v
	return s
}

type GetRerunWorkflowInstancesResultResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRerunWorkflowInstancesResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRerunWorkflowInstancesResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRerunWorkflowInstancesResultResponse) GoString() string {
	return s.String()
}

func (s *GetRerunWorkflowInstancesResultResponse) SetHeaders(v map[string]*string) *GetRerunWorkflowInstancesResultResponse {
	s.Headers = v
	return s
}

func (s *GetRerunWorkflowInstancesResultResponse) SetStatusCode(v int32) *GetRerunWorkflowInstancesResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRerunWorkflowInstancesResultResponse) SetBody(v *GetRerunWorkflowInstancesResultResponseBody) *GetRerunWorkflowInstancesResultResponse {
	s.Body = v
	return s
}

type GetResourceRequest struct {
	// The ID of the file resource.
	//
	// This parameter is required.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetResourceRequest) GoString() string {
	return s.String()
}

func (s *GetResourceRequest) SetId(v int64) *GetResourceRequest {
	s.Id = &v
	return s
}

func (s *GetResourceRequest) SetProjectId(v int64) *GetResourceRequest {
	s.ProjectId = &v
	return s
}

type GetResourceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// E871F6C0-2EFF-5790-A00D-C57543EEXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the file resource.
	Resource *GetResourceResponseBodyResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Struct"`
}

func (s GetResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetResourceResponseBody) GoString() string {
	return s.String()
}

func (s *GetResourceResponseBody) SetRequestId(v string) *GetResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetResourceResponseBody) SetResource(v *GetResourceResponseBodyResource) *GetResourceResponseBody {
	s.Resource = v
	return s
}

type GetResourceResponseBodyResource struct {
	// The time when the file resource was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1700539206000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the file resource.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The time when the file resource was last modified. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1700539206000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The name of the file resource.
	//
	// example:
	//
	// OpenAPI_Test_Resource. py
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The owner of the file resource.
	//
	// example:
	//
	// 110755000425XXXX
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The ID of the workspace to which the file resource belongs.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow).
	//
	// example:
	//
	// {
	//
	//     "version": "1.1.0",
	//
	//     "kind": "Resource",
	//
	//     "spec": {
	//
	//         "fileResources": [
	//
	//             {
	//
	//                 "name": "OpenAPI_Test_Resource.py",
	//
	//                 "id": "631478864897630XXXX",
	//
	//                 "script": {
	//
	//                     "content": "",
	//
	//                     "path": "XX/OpenAPI_Test/Resource_Test/OpenAPI_Test_Resource.py",
	//
	//                     "runtime": {
	//
	//                         "command": "ODPS_PYTHON"
	//
	//                     }
	//
	//                 },
	//
	//                 "type": "python",
	//
	//                 "file": {
	//
	//                     "storage": {}
	//
	//                 },
	//
	//                 "datasource": {
	//
	//                     "name": "odps_first",
	//
	//                     "type": "odps"
	//
	//                 },
	//
	//                 "metadata": {
	//
	//                     "owner": "110755000425XXXX"
	//
	//                 }
	//
	//             }
	//
	//         ]
	//
	//     }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s GetResourceResponseBodyResource) String() string {
	return tea.Prettify(s)
}

func (s GetResourceResponseBodyResource) GoString() string {
	return s.String()
}

func (s *GetResourceResponseBodyResource) SetCreateTime(v int64) *GetResourceResponseBodyResource {
	s.CreateTime = &v
	return s
}

func (s *GetResourceResponseBodyResource) SetId(v int64) *GetResourceResponseBodyResource {
	s.Id = &v
	return s
}

func (s *GetResourceResponseBodyResource) SetModifyTime(v int64) *GetResourceResponseBodyResource {
	s.ModifyTime = &v
	return s
}

func (s *GetResourceResponseBodyResource) SetName(v string) *GetResourceResponseBodyResource {
	s.Name = &v
	return s
}

func (s *GetResourceResponseBodyResource) SetOwner(v string) *GetResourceResponseBodyResource {
	s.Owner = &v
	return s
}

func (s *GetResourceResponseBodyResource) SetProjectId(v int64) *GetResourceResponseBodyResource {
	s.ProjectId = &v
	return s
}

func (s *GetResourceResponseBodyResource) SetSpec(v string) *GetResourceResponseBodyResource {
	s.Spec = &v
	return s
}

type GetResourceResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetResourceResponse) GoString() string {
	return s.String()
}

func (s *GetResourceResponse) SetHeaders(v map[string]*string) *GetResourceResponse {
	s.Headers = v
	return s
}

func (s *GetResourceResponse) SetStatusCode(v int32) *GetResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetResourceResponse) SetBody(v *GetResourceResponseBody) *GetResourceResponse {
	s.Body = v
	return s
}

type GetResourceGroupRequest struct {
	// The ID of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *GetResourceGroupRequest) SetId(v string) *GetResourceGroupRequest {
	s.Id = &v
	return s
}

type GetResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details about the resource group.
	ResourceGroup *GetResourceGroupResponseBodyResourceGroup `json:"ResourceGroup,omitempty" xml:"ResourceGroup,omitempty" type:"Struct"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetResourceGroupResponseBody) SetRequestId(v string) *GetResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetResourceGroupResponseBody) SetResourceGroup(v *GetResourceGroupResponseBodyResourceGroup) *GetResourceGroupResponseBody {
	s.ResourceGroup = v
	return s
}

func (s *GetResourceGroupResponseBody) SetSuccess(v bool) *GetResourceGroupResponseBody {
	s.Success = &v
	return s
}

type GetResourceGroupResponseBodyResourceGroup struct {
	// The ID of the Alibaba Cloud resource group.
	//
	// example:
	//
	// rg-aek2kqofrgXXXXX
	AliyunResourceGroupId *string `json:"AliyunResourceGroupId,omitempty" xml:"AliyunResourceGroupId,omitempty"`
	// The tags.
	AliyunResourceTags []*GetResourceGroupResponseBodyResourceGroupAliyunResourceTags `json:"AliyunResourceTags,omitempty" xml:"AliyunResourceTags,omitempty" type:"Repeated"`
	// The time when the resource group was created. The value is a 64-bit timestamp.
	//
	// example:
	//
	// 1727055811000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the account that is used to create the resource group.
	//
	// example:
	//
	// 11075500042XXXXX
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The ID of the virtual private cloud (VPC) with which the resource group is associated by default.
	//
	// example:
	//
	// vpc-m2et4f3oc8msfbccXXXXX
	DefaultVpcId *string `json:"DefaultVpcId,omitempty" xml:"DefaultVpcId,omitempty"`
	// The ID of the vSwitch with which the resource group is associated by default.
	//
	// example:
	//
	// vsw-uf8usrhs7hjd9amsXXXXX
	DefaultVswitchId *string `json:"DefaultVswitchId,omitempty" xml:"DefaultVswitchId,omitempty"`
	// The ID of the resource group.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the resource group.
	//
	// example:
	//
	// common_resource_group
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The instance ID of the order that is used to create the resource group.
	//
	// example:
	//
	// c442b330-3b10-4584-959e-736e4edXXXXX
	OrderInstanceId *string `json:"OrderInstanceId,omitempty" xml:"OrderInstanceId,omitempty"`
	// The billing method of the resource group. Valid values: PrePaid and PostPaid. The value PrePaid indicates the subscription billing method, and the value PostPaid indicates the pay-as-you-go billing method.
	//
	// example:
	//
	// PrePaid
	PaymentType *string `json:"PaymentType,omitempty" xml:"PaymentType,omitempty"`
	// The description of the resource group.
	//
	// example:
	//
	// Create a common resource group for common tasks
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The type of the resource group. Valid values:
	//
	// 	- CommonV2: serverless resource group
	//
	// 	- ExclusiveDataIntegration: exclusive resource group for Data Integration
	//
	// 	- ExclusiveScheduler: exclusive resource group for scheduling
	//
	// 	- ExclusiveDataService: exclusive resource group for DataService Studio
	//
	// example:
	//
	// CommonV2
	ResourceGroupType *string `json:"ResourceGroupType,omitempty" xml:"ResourceGroupType,omitempty"`
	// The specifications of the resource group.
	Spec *GetResourceGroupResponseBodyResourceGroupSpec `json:"Spec,omitempty" xml:"Spec,omitempty" type:"Struct"`
	// The status of the resource group. Valid values:
	//
	// 	- Normal: The resource group is running or in use.
	//
	// 	- Stop: The resource group is expired.
	//
	// 	- Deleted: The resource group is released or destroyed.
	//
	// 	- Creating: The resource group is being created.
	//
	// 	- CreateFailed: The resource group fails to be created.
	//
	// 	- Updating: The resource group is being scaled in or out, or the configurations of the resource group are being changed.
	//
	// 	- UpdateFailed: The resource group fails to be scaled out or upgraded.
	//
	// 	- Deleting: The resource group is being released or destroyed.
	//
	// 	- DeleteFailed: The resource group fails to be released or destroyed.
	//
	// 	- Timeout: The operations that are performed on the resource group time out.
	//
	// 	- Freezed: The resource group is frozen.
	//
	// 	- Starting: The resource group is being started.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetResourceGroupResponseBodyResourceGroup) String() string {
	return tea.Prettify(s)
}

func (s GetResourceGroupResponseBodyResourceGroup) GoString() string {
	return s.String()
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetAliyunResourceGroupId(v string) *GetResourceGroupResponseBodyResourceGroup {
	s.AliyunResourceGroupId = &v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetAliyunResourceTags(v []*GetResourceGroupResponseBodyResourceGroupAliyunResourceTags) *GetResourceGroupResponseBodyResourceGroup {
	s.AliyunResourceTags = v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetCreateTime(v int64) *GetResourceGroupResponseBodyResourceGroup {
	s.CreateTime = &v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetCreateUser(v string) *GetResourceGroupResponseBodyResourceGroup {
	s.CreateUser = &v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetDefaultVpcId(v string) *GetResourceGroupResponseBodyResourceGroup {
	s.DefaultVpcId = &v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetDefaultVswitchId(v string) *GetResourceGroupResponseBodyResourceGroup {
	s.DefaultVswitchId = &v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetId(v string) *GetResourceGroupResponseBodyResourceGroup {
	s.Id = &v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetName(v string) *GetResourceGroupResponseBodyResourceGroup {
	s.Name = &v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetOrderInstanceId(v string) *GetResourceGroupResponseBodyResourceGroup {
	s.OrderInstanceId = &v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetPaymentType(v string) *GetResourceGroupResponseBodyResourceGroup {
	s.PaymentType = &v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetRemark(v string) *GetResourceGroupResponseBodyResourceGroup {
	s.Remark = &v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetResourceGroupType(v string) *GetResourceGroupResponseBodyResourceGroup {
	s.ResourceGroupType = &v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetSpec(v *GetResourceGroupResponseBodyResourceGroupSpec) *GetResourceGroupResponseBodyResourceGroup {
	s.Spec = v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroup) SetStatus(v string) *GetResourceGroupResponseBodyResourceGroup {
	s.Status = &v
	return s
}

type GetResourceGroupResponseBodyResourceGroupAliyunResourceTags struct {
	// The tag key.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetResourceGroupResponseBodyResourceGroupAliyunResourceTags) String() string {
	return tea.Prettify(s)
}

func (s GetResourceGroupResponseBodyResourceGroupAliyunResourceTags) GoString() string {
	return s.String()
}

func (s *GetResourceGroupResponseBodyResourceGroupAliyunResourceTags) SetKey(v string) *GetResourceGroupResponseBodyResourceGroupAliyunResourceTags {
	s.Key = &v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroupAliyunResourceTags) SetValue(v string) *GetResourceGroupResponseBodyResourceGroupAliyunResourceTags {
	s.Value = &v
	return s
}

type GetResourceGroupResponseBodyResourceGroupSpec struct {
	// The number of resources in the resource group.
	//
	// example:
	//
	// 1
	Amount *int32 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// The number of compute units (CUs) in the resource group.
	//
	// example:
	//
	// 2CU
	Standard *string `json:"Standard,omitempty" xml:"Standard,omitempty"`
}

func (s GetResourceGroupResponseBodyResourceGroupSpec) String() string {
	return tea.Prettify(s)
}

func (s GetResourceGroupResponseBodyResourceGroupSpec) GoString() string {
	return s.String()
}

func (s *GetResourceGroupResponseBodyResourceGroupSpec) SetAmount(v int32) *GetResourceGroupResponseBodyResourceGroupSpec {
	s.Amount = &v
	return s
}

func (s *GetResourceGroupResponseBodyResourceGroupSpec) SetStandard(v string) *GetResourceGroupResponseBodyResourceGroupSpec {
	s.Standard = &v
	return s
}

type GetResourceGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *GetResourceGroupResponse) SetHeaders(v map[string]*string) *GetResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *GetResourceGroupResponse) SetStatusCode(v int32) *GetResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *GetResourceGroupResponse) SetBody(v *GetResourceGroupResponseBody) *GetResourceGroupResponse {
	s.Body = v
	return s
}

type GetRouteRequest struct {
	// The route ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRouteRequest) GoString() string {
	return s.String()
}

func (s *GetRouteRequest) SetId(v int64) *GetRouteRequest {
	s.Id = &v
	return s
}

type GetRouteResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the route.
	Route *GetRouteResponseBodyRoute `json:"Route,omitempty" xml:"Route,omitempty" type:"Struct"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRouteResponseBody) GoString() string {
	return s.String()
}

func (s *GetRouteResponseBody) SetRequestId(v string) *GetRouteResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRouteResponseBody) SetRoute(v *GetRouteResponseBodyRoute) *GetRouteResponseBody {
	s.Route = v
	return s
}

func (s *GetRouteResponseBody) SetSuccess(v bool) *GetRouteResponseBody {
	s.Success = &v
	return s
}

type GetRouteResponseBodyRoute struct {
	// The time when the route was created. The value is a 64-bit timestamp.
	//
	// example:
	//
	// 1727055811000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The CIDR block of the destination-based route.
	//
	// example:
	//
	// 192.168.0.0/16
	DestinationCidr *string `json:"DestinationCidr,omitempty" xml:"DestinationCidr,omitempty"`
	// The route ID.
	//
	// example:
	//
	// 1000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The network ID.
	//
	// example:
	//
	// 1000
	NetworkId *int64 `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The network resource ID.
	//
	// example:
	//
	// ns-679XXXXX
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s GetRouteResponseBodyRoute) String() string {
	return tea.Prettify(s)
}

func (s GetRouteResponseBodyRoute) GoString() string {
	return s.String()
}

func (s *GetRouteResponseBodyRoute) SetCreateTime(v int64) *GetRouteResponseBodyRoute {
	s.CreateTime = &v
	return s
}

func (s *GetRouteResponseBodyRoute) SetDestinationCidr(v string) *GetRouteResponseBodyRoute {
	s.DestinationCidr = &v
	return s
}

func (s *GetRouteResponseBodyRoute) SetId(v int64) *GetRouteResponseBodyRoute {
	s.Id = &v
	return s
}

func (s *GetRouteResponseBodyRoute) SetNetworkId(v int64) *GetRouteResponseBodyRoute {
	s.NetworkId = &v
	return s
}

func (s *GetRouteResponseBodyRoute) SetResourceGroupId(v string) *GetRouteResponseBodyRoute {
	s.ResourceGroupId = &v
	return s
}

func (s *GetRouteResponseBodyRoute) SetResourceId(v string) *GetRouteResponseBodyRoute {
	s.ResourceId = &v
	return s
}

type GetRouteResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRouteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRouteResponse) GoString() string {
	return s.String()
}

func (s *GetRouteResponse) SetHeaders(v map[string]*string) *GetRouteResponse {
	s.Headers = v
	return s
}

func (s *GetRouteResponse) SetStatusCode(v int32) *GetRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRouteResponse) SetBody(v *GetRouteResponseBody) *GetRouteResponse {
	s.Body = v
	return s
}

type GetSchemaRequest struct {
	// The schema ID. You can call the ListSchemas operation to query schema IDs. For more information, see [Concepts related to metadata entities](https://help.aliyun.com/document_detail/2880092.html).
	//
	// Configure this parameter in the `${Entity type}:${Instance ID or escaped URL}:${Catalog identifier}:${Database name}:${Schema name}` format. If a level does not exist, leave the level empty.
	//
	// >  If you want to query the information about a MaxCompute schema, specify an empty string at the Instance ID level as a placeholder and a MaxCompute project name at the Database name level. Make sure that the schema feature is enabled for the MaxCompute project.
	//
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-schema:123456XXX::test_project:default
	//
	// holo-schema:h-abc123xxx::test_db:test_schema
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSchemaRequest) GoString() string {
	return s.String()
}

func (s *GetSchemaRequest) SetId(v string) *GetSchemaRequest {
	s.Id = &v
	return s
}

type GetSchemaResponseBody struct {
	// example:
	//
	// A89B5D9D-74EA-XXXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Schema    *Schema `json:"Schema,omitempty" xml:"Schema,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetSchemaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSchemaResponseBody) GoString() string {
	return s.String()
}

func (s *GetSchemaResponseBody) SetRequestId(v string) *GetSchemaResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSchemaResponseBody) SetSchema(v *Schema) *GetSchemaResponseBody {
	s.Schema = v
	return s
}

func (s *GetSchemaResponseBody) SetSuccess(v bool) *GetSchemaResponseBody {
	s.Success = &v
	return s
}

type GetSchemaResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSchemaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSchemaResponse) GoString() string {
	return s.String()
}

func (s *GetSchemaResponse) SetHeaders(v map[string]*string) *GetSchemaResponse {
	s.Headers = v
	return s
}

func (s *GetSchemaResponse) SetStatusCode(v int32) *GetSchemaResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSchemaResponse) SetBody(v *GetSchemaResponseBody) *GetSchemaResponse {
	s.Body = v
	return s
}

type GetTableRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-table:123456XXX::test_project::test_tbl
	//
	// dlf-table:123456XXX:test_catalog:test_db::test_tbl
	//
	// hms-table:c-abc123xxx::test_db::test_tbl
	//
	// holo-table:h-abc123xxx::test_db:test_schema:test_tbl
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// true
	IncludeBusinessMetadata *bool `json:"IncludeBusinessMetadata,omitempty" xml:"IncludeBusinessMetadata,omitempty"`
}

func (s GetTableRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTableRequest) GoString() string {
	return s.String()
}

func (s *GetTableRequest) SetId(v string) *GetTableRequest {
	s.Id = &v
	return s
}

func (s *GetTableRequest) SetIncludeBusinessMetadata(v bool) *GetTableRequest {
	s.IncludeBusinessMetadata = &v
	return s
}

type GetTableResponseBody struct {
	// example:
	//
	// 7B3435F4-2D91-XXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool  `json:"Success,omitempty" xml:"Success,omitempty"`
	Table   *Table `json:"Table,omitempty" xml:"Table,omitempty"`
}

func (s GetTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTableResponseBody) GoString() string {
	return s.String()
}

func (s *GetTableResponseBody) SetRequestId(v string) *GetTableResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTableResponseBody) SetSuccess(v bool) *GetTableResponseBody {
	s.Success = &v
	return s
}

func (s *GetTableResponseBody) SetTable(v *Table) *GetTableResponseBody {
	s.Table = v
	return s
}

type GetTableResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTableResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTableResponse) GoString() string {
	return s.String()
}

func (s *GetTableResponse) SetHeaders(v map[string]*string) *GetTableResponse {
	s.Headers = v
	return s
}

func (s *GetTableResponse) SetStatusCode(v int32) *GetTableResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTableResponse) SetBody(v *GetTableResponseBody) *GetTableResponse {
	s.Body = v
	return s
}

type GetTaskRequest struct {
	// The task ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s GetTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTaskRequest) GoString() string {
	return s.String()
}

func (s *GetTaskRequest) SetId(v int64) *GetTaskRequest {
	s.Id = &v
	return s
}

func (s *GetTaskRequest) SetProjectEnv(v string) *GetTaskRequest {
	s.ProjectEnv = &v
	return s
}

type GetTaskResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of the task.
	Task *GetTaskResponseBodyTask `json:"Task,omitempty" xml:"Task,omitempty" type:"Struct"`
}

func (s GetTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBody) SetRequestId(v string) *GetTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTaskResponseBody) SetTask(v *GetTaskResponseBodyTask) *GetTaskResponseBody {
	s.Task = v
	return s
}

type GetTaskResponseBodyTask struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *GetTaskResponseBodyTaskDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The dependency information.
	Dependencies []*GetTaskResponseBodyTaskDependencies `json:"Dependencies,omitempty" xml:"Dependencies,omitempty" type:"Repeated"`
	// The description of the task.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The input information.
	//
	// if can be null:
	// false
	Inputs *GetTaskResponseBodyTaskInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Struct"`
	// The instance generation mode. Valid values:
	//
	// 	- T+1
	//
	// 	- Immediately
	//
	// example:
	//
	// T+1
	InstanceMode *string `json:"InstanceMode,omitempty" xml:"InstanceMode,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The name of the task.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output information.
	Outputs *GetTaskResponseBodyTaskOutputs `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Struct"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// Deprecated
	//
	// The environment of the workspace. This parameter is deprecated and replaced by the EnvType parameter. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun interval. Unit: seconds.
	//
	// example:
	//
	// 60
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode. Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to be run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to be run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to be run.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The configurations of the runtime environment, such as the resource group information.
	RuntimeResource *GetTaskResponseBodyTaskRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The script information.
	Script *GetTaskResponseBodyTaskScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	// The configurations of the subtasks, such as a do-while node.
	SubTasks *GetTaskResponseBodyTaskSubTasks `json:"SubTasks,omitempty" xml:"SubTasks,omitempty" type:"Struct"`
	// The tags.
	Tags []*GetTaskResponseBodyTaskTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The method to trigger task scheduling.
	Trigger *GetTaskResponseBodyTaskTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	// The type of the task.
	//
	// example:
	//
	// ODPS_SQL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The workflow ID.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s GetTaskResponseBodyTask) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTask) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTask) SetBaselineId(v int64) *GetTaskResponseBodyTask {
	s.BaselineId = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetCreateTime(v int64) *GetTaskResponseBodyTask {
	s.CreateTime = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetCreateUser(v string) *GetTaskResponseBodyTask {
	s.CreateUser = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetDataSource(v *GetTaskResponseBodyTaskDataSource) *GetTaskResponseBodyTask {
	s.DataSource = v
	return s
}

func (s *GetTaskResponseBodyTask) SetDependencies(v []*GetTaskResponseBodyTaskDependencies) *GetTaskResponseBodyTask {
	s.Dependencies = v
	return s
}

func (s *GetTaskResponseBodyTask) SetDescription(v string) *GetTaskResponseBodyTask {
	s.Description = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetEnvType(v string) *GetTaskResponseBodyTask {
	s.EnvType = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetId(v int64) *GetTaskResponseBodyTask {
	s.Id = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetInputs(v *GetTaskResponseBodyTaskInputs) *GetTaskResponseBodyTask {
	s.Inputs = v
	return s
}

func (s *GetTaskResponseBodyTask) SetInstanceMode(v string) *GetTaskResponseBodyTask {
	s.InstanceMode = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetModifyTime(v int64) *GetTaskResponseBodyTask {
	s.ModifyTime = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetModifyUser(v string) *GetTaskResponseBodyTask {
	s.ModifyUser = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetName(v string) *GetTaskResponseBodyTask {
	s.Name = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetOutputs(v *GetTaskResponseBodyTaskOutputs) *GetTaskResponseBodyTask {
	s.Outputs = v
	return s
}

func (s *GetTaskResponseBodyTask) SetOwner(v string) *GetTaskResponseBodyTask {
	s.Owner = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetPriority(v int32) *GetTaskResponseBodyTask {
	s.Priority = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetProjectEnv(v string) *GetTaskResponseBodyTask {
	s.ProjectEnv = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetProjectId(v int64) *GetTaskResponseBodyTask {
	s.ProjectId = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetRerunInterval(v int32) *GetTaskResponseBodyTask {
	s.RerunInterval = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetRerunMode(v string) *GetTaskResponseBodyTask {
	s.RerunMode = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetRerunTimes(v int32) *GetTaskResponseBodyTask {
	s.RerunTimes = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetRuntimeResource(v *GetTaskResponseBodyTaskRuntimeResource) *GetTaskResponseBodyTask {
	s.RuntimeResource = v
	return s
}

func (s *GetTaskResponseBodyTask) SetScript(v *GetTaskResponseBodyTaskScript) *GetTaskResponseBodyTask {
	s.Script = v
	return s
}

func (s *GetTaskResponseBodyTask) SetSubTasks(v *GetTaskResponseBodyTaskSubTasks) *GetTaskResponseBodyTask {
	s.SubTasks = v
	return s
}

func (s *GetTaskResponseBodyTask) SetTags(v []*GetTaskResponseBodyTaskTags) *GetTaskResponseBodyTask {
	s.Tags = v
	return s
}

func (s *GetTaskResponseBodyTask) SetTimeout(v int32) *GetTaskResponseBodyTask {
	s.Timeout = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetTrigger(v *GetTaskResponseBodyTaskTrigger) *GetTaskResponseBodyTask {
	s.Trigger = v
	return s
}

func (s *GetTaskResponseBodyTask) SetType(v string) *GetTaskResponseBodyTask {
	s.Type = &v
	return s
}

func (s *GetTaskResponseBodyTask) SetWorkflowId(v int64) *GetTaskResponseBodyTask {
	s.WorkflowId = &v
	return s
}

type GetTaskResponseBodyTaskDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetTaskResponseBodyTaskDataSource) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskDataSource) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskDataSource) SetName(v string) *GetTaskResponseBodyTaskDataSource {
	s.Name = &v
	return s
}

type GetTaskResponseBodyTaskDependencies struct {
	// The dependency type. Valid values:
	//
	// 	- CrossCycleDependsOnChildren: cross-cycle dependency on level-1 descendant nodes
	//
	// 	- CrossCycleDependsOnSelf: cross-cycle dependency on the current node
	//
	// 	- CrossCycleDependsOnOtherNode: cross-cycle dependency on other nodes
	//
	// 	- Normal: same-cycle scheduling dependency
	//
	// example:
	//
	// Normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The identifier of the output of the ancestor task. This parameter is returned only if `same-cycle scheduling dependencies` and the node input are configured.
	//
	// example:
	//
	// pre.odps_sql_demo_0
	UpstreamOutput *string `json:"UpstreamOutput,omitempty" xml:"UpstreamOutput,omitempty"`
	// The ancestor task ID. This parameter is returned only if `cross-cycle scheduling dependencies` or `same-cycle scheduling dependencies` and the node input are not configured.
	//
	// example:
	//
	// 1234
	UpstreamTaskId *string `json:"UpstreamTaskId,omitempty" xml:"UpstreamTaskId,omitempty"`
}

func (s GetTaskResponseBodyTaskDependencies) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskDependencies) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskDependencies) SetType(v string) *GetTaskResponseBodyTaskDependencies {
	s.Type = &v
	return s
}

func (s *GetTaskResponseBodyTaskDependencies) SetUpstreamOutput(v string) *GetTaskResponseBodyTaskDependencies {
	s.UpstreamOutput = &v
	return s
}

func (s *GetTaskResponseBodyTaskDependencies) SetUpstreamTaskId(v string) *GetTaskResponseBodyTaskDependencies {
	s.UpstreamTaskId = &v
	return s
}

type GetTaskResponseBodyTaskInputs struct {
	// The variables.
	Variables []*GetTaskResponseBodyTaskInputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s GetTaskResponseBodyTaskInputs) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskInputs) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskInputs) SetVariables(v []*GetTaskResponseBodyTaskInputsVariables) *GetTaskResponseBodyTaskInputs {
	s.Variables = v
	return s
}

type GetTaskResponseBodyTaskInputsVariables struct {
	// The name of the variable.
	//
	// example:
	//
	// key1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type. Valid values:
	//
	// 	- Constant: constant
	//
	// 	- PassThrough: node output
	//
	// 	- System: variable
	//
	// 	- NodeOutput: script output
	//
	// example:
	//
	// Constant
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// Value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetTaskResponseBodyTaskInputsVariables) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskInputsVariables) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskInputsVariables) SetName(v string) *GetTaskResponseBodyTaskInputsVariables {
	s.Name = &v
	return s
}

func (s *GetTaskResponseBodyTaskInputsVariables) SetType(v string) *GetTaskResponseBodyTaskInputsVariables {
	s.Type = &v
	return s
}

func (s *GetTaskResponseBodyTaskInputsVariables) SetValue(v string) *GetTaskResponseBodyTaskInputsVariables {
	s.Value = &v
	return s
}

type GetTaskResponseBodyTaskOutputs struct {
	// The task outputs.
	TaskOutputs []*GetTaskResponseBodyTaskOutputsTaskOutputs `json:"TaskOutputs,omitempty" xml:"TaskOutputs,omitempty" type:"Repeated"`
	// The variables.
	Variables []*GetTaskResponseBodyTaskOutputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s GetTaskResponseBodyTaskOutputs) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskOutputs) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskOutputs) SetTaskOutputs(v []*GetTaskResponseBodyTaskOutputsTaskOutputs) *GetTaskResponseBodyTaskOutputs {
	s.TaskOutputs = v
	return s
}

func (s *GetTaskResponseBodyTaskOutputs) SetVariables(v []*GetTaskResponseBodyTaskOutputsVariables) *GetTaskResponseBodyTaskOutputs {
	s.Variables = v
	return s
}

type GetTaskResponseBodyTaskOutputsTaskOutputs struct {
	// The identifier of the output.
	//
	// example:
	//
	// pre.odps_sql_demo_0
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s GetTaskResponseBodyTaskOutputsTaskOutputs) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskOutputsTaskOutputs) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskOutputsTaskOutputs) SetOutput(v string) *GetTaskResponseBodyTaskOutputsTaskOutputs {
	s.Output = &v
	return s
}

type GetTaskResponseBodyTaskOutputsVariables struct {
	// The name of the variable.
	//
	// example:
	//
	// key1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type. Valid values:
	//
	// 	- Constant: constant
	//
	// 	- PassThrough: node output
	//
	// 	- System: variable
	//
	// 	- NodeOutput: script output
	//
	// example:
	//
	// Constant
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetTaskResponseBodyTaskOutputsVariables) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskOutputsVariables) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskOutputsVariables) SetName(v string) *GetTaskResponseBodyTaskOutputsVariables {
	s.Name = &v
	return s
}

func (s *GetTaskResponseBodyTaskOutputsVariables) SetType(v string) *GetTaskResponseBodyTaskOutputsVariables {
	s.Type = &v
	return s
}

func (s *GetTaskResponseBodyTaskOutputsVariables) SetValue(v string) *GetTaskResponseBodyTaskOutputsVariables {
	s.Value = &v
	return s
}

type GetTaskResponseBodyTaskRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s GetTaskResponseBodyTaskRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskRuntimeResource) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskRuntimeResource) SetCu(v string) *GetTaskResponseBodyTaskRuntimeResource {
	s.Cu = &v
	return s
}

func (s *GetTaskResponseBodyTaskRuntimeResource) SetImage(v string) *GetTaskResponseBodyTaskRuntimeResource {
	s.Image = &v
	return s
}

func (s *GetTaskResponseBodyTaskRuntimeResource) SetResourceGroupId(v string) *GetTaskResponseBodyTaskRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type GetTaskResponseBodyTaskScript struct {
	// The script content.
	//
	// example:
	//
	// echo "helloWorld"
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The script parameters.
	//
	// example:
	//
	// para1=$bizdate
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
}

func (s GetTaskResponseBodyTaskScript) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskScript) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskScript) SetContent(v string) *GetTaskResponseBodyTaskScript {
	s.Content = &v
	return s
}

func (s *GetTaskResponseBodyTaskScript) SetParameters(v string) *GetTaskResponseBodyTaskScript {
	s.Parameters = &v
	return s
}

type GetTaskResponseBodyTaskSubTasks struct {
	// The subtasks.
	SubTasks []*GetTaskResponseBodyTaskSubTasksSubTasks `json:"SubTasks,omitempty" xml:"SubTasks,omitempty" type:"Repeated"`
	// The type of the subtask. Valid values:
	//
	// 	- DoWhile: do-while node
	//
	// 	- Combined: node group
	//
	// 	- ForEach: for-each node
	//
	// example:
	//
	// Combined
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTaskResponseBodyTaskSubTasks) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskSubTasks) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskSubTasks) SetSubTasks(v []*GetTaskResponseBodyTaskSubTasksSubTasks) *GetTaskResponseBodyTaskSubTasks {
	s.SubTasks = v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasks) SetType(v string) *GetTaskResponseBodyTaskSubTasks {
	s.Type = &v
	return s
}

type GetTaskResponseBodyTaskSubTasksSubTasks struct {
	// The baseline ID.
	//
	// example:
	//
	// The baseline ID.
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *GetTaskResponseBodyTaskSubTasksSubTasksDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description of the task.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The name of the task.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// Deprecated
	//
	// The environment of the workspace. This parameter is deprecated and replaced by the EnvType parameter. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun interval. Unit: seconds.
	//
	// example:
	//
	// 180
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode. Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to be run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to be run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to be run.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The runtime environment configuration of the task, such as the resource group.
	RuntimeResource *GetTaskResponseBodyTaskSubTasksSubTasksRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The method to trigger task scheduling.
	Trigger *GetTaskResponseBodyTaskSubTasksSubTasksTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	// The type of the task.
	//
	// example:
	//
	// ODPS_SQL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the workflow to which the task belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s GetTaskResponseBodyTaskSubTasksSubTasks) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskSubTasksSubTasks) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetBaselineId(v int64) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.BaselineId = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetCreateTime(v int64) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.CreateTime = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetCreateUser(v string) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.CreateUser = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetDataSource(v *GetTaskResponseBodyTaskSubTasksSubTasksDataSource) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.DataSource = v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetDescription(v string) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.Description = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetEnvType(v string) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.EnvType = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetId(v int64) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.Id = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetModifyTime(v int64) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.ModifyTime = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetModifyUser(v string) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.ModifyUser = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetName(v string) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.Name = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetOwner(v string) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.Owner = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetPriority(v int32) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.Priority = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetProjectEnv(v string) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.ProjectEnv = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetProjectId(v int64) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.ProjectId = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetRerunInterval(v int32) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.RerunInterval = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetRerunMode(v string) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.RerunMode = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetRerunTimes(v int32) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.RerunTimes = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetRuntimeResource(v *GetTaskResponseBodyTaskSubTasksSubTasksRuntimeResource) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.RuntimeResource = v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetTimeout(v int32) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.Timeout = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetTrigger(v *GetTaskResponseBodyTaskSubTasksSubTasksTrigger) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.Trigger = v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetType(v string) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.Type = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasks) SetWorkflowId(v int64) *GetTaskResponseBodyTaskSubTasksSubTasks {
	s.WorkflowId = &v
	return s
}

type GetTaskResponseBodyTaskSubTasksSubTasksDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetTaskResponseBodyTaskSubTasksSubTasksDataSource) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskSubTasksSubTasksDataSource) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasksDataSource) SetName(v string) *GetTaskResponseBodyTaskSubTasksSubTasksDataSource {
	s.Name = &v
	return s
}

type GetTaskResponseBodyTaskSubTasksSubTasksRuntimeResource struct {
	// The default number of CUs configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s GetTaskResponseBodyTaskSubTasksSubTasksRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskSubTasksSubTasksRuntimeResource) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasksRuntimeResource) SetCu(v string) *GetTaskResponseBodyTaskSubTasksSubTasksRuntimeResource {
	s.Cu = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasksRuntimeResource) SetImage(v string) *GetTaskResponseBodyTaskSubTasksSubTasksRuntimeResource {
	s.Image = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasksRuntimeResource) SetResourceGroupId(v string) *GetTaskResponseBodyTaskSubTasksSubTasksRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type GetTaskResponseBodyTaskSubTasksSubTasksTrigger struct {
	// The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 9999-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: periodic scheduling
	//
	// 	- Manual: manual scheduling
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTaskResponseBodyTaskSubTasksSubTasksTrigger) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskSubTasksSubTasksTrigger) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasksTrigger) SetCron(v string) *GetTaskResponseBodyTaskSubTasksSubTasksTrigger {
	s.Cron = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasksTrigger) SetEndTime(v string) *GetTaskResponseBodyTaskSubTasksSubTasksTrigger {
	s.EndTime = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasksTrigger) SetRecurrence(v string) *GetTaskResponseBodyTaskSubTasksSubTasksTrigger {
	s.Recurrence = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasksTrigger) SetStartTime(v string) *GetTaskResponseBodyTaskSubTasksSubTasksTrigger {
	s.StartTime = &v
	return s
}

func (s *GetTaskResponseBodyTaskSubTasksSubTasksTrigger) SetType(v string) *GetTaskResponseBodyTaskSubTasksSubTasksTrigger {
	s.Type = &v
	return s
}

type GetTaskResponseBodyTaskTags struct {
	// The tag key.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetTaskResponseBodyTaskTags) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskTags) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskTags) SetKey(v string) *GetTaskResponseBodyTaskTags {
	s.Key = &v
	return s
}

func (s *GetTaskResponseBodyTaskTags) SetValue(v string) *GetTaskResponseBodyTaskTags {
	s.Value = &v
	return s
}

type GetTaskResponseBodyTaskTrigger struct {
	// The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 9999-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: periodic scheduling
	//
	// 	- Manual: manual scheduling
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTaskResponseBodyTaskTrigger) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponseBodyTaskTrigger) GoString() string {
	return s.String()
}

func (s *GetTaskResponseBodyTaskTrigger) SetCron(v string) *GetTaskResponseBodyTaskTrigger {
	s.Cron = &v
	return s
}

func (s *GetTaskResponseBodyTaskTrigger) SetEndTime(v string) *GetTaskResponseBodyTaskTrigger {
	s.EndTime = &v
	return s
}

func (s *GetTaskResponseBodyTaskTrigger) SetRecurrence(v string) *GetTaskResponseBodyTaskTrigger {
	s.Recurrence = &v
	return s
}

func (s *GetTaskResponseBodyTaskTrigger) SetStartTime(v string) *GetTaskResponseBodyTaskTrigger {
	s.StartTime = &v
	return s
}

func (s *GetTaskResponseBodyTaskTrigger) SetType(v string) *GetTaskResponseBodyTaskTrigger {
	s.Type = &v
	return s
}

type GetTaskResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTaskResponse) GoString() string {
	return s.String()
}

func (s *GetTaskResponse) SetHeaders(v map[string]*string) *GetTaskResponse {
	s.Headers = v
	return s
}

func (s *GetTaskResponse) SetStatusCode(v int32) *GetTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTaskResponse) SetBody(v *GetTaskResponseBody) *GetTaskResponse {
	s.Body = v
	return s
}

type GetTaskInstanceRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetTaskInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceRequest) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceRequest) SetId(v int64) *GetTaskInstanceRequest {
	s.Id = &v
	return s
}

type GetTaskInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of the instance.
	TaskInstance *GetTaskInstanceResponseBodyTaskInstance `json:"TaskInstance,omitempty" xml:"TaskInstance,omitempty" type:"Struct"`
}

func (s GetTaskInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceResponseBody) SetRequestId(v string) *GetTaskInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTaskInstanceResponseBody) SetTaskInstance(v *GetTaskInstanceResponseBodyTaskInstance) *GetTaskInstanceResponseBody {
	s.TaskInstance = v
	return s
}

type GetTaskInstanceResponseBodyTaskInstance struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The data timestamp.
	//
	// example:
	//
	// 1710239005403
	Bizdate *int64 `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *GetTaskInstanceResponseBodyTaskInstanceDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time when the instance finished running.
	//
	// example:
	//
	// 1710239005403
	FinishedTime *int64 `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The input information.
	Inputs *GetTaskInstanceResponseBodyTaskInstanceInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Struct"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The output information.
	Outputs *GetTaskInstanceResponseBodyTaskInstanceOutputs `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Struct"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The sequence number of the cycle. This parameter indicates the cycle of the task instance on the current day.
	//
	// example:
	//
	// 1
	PeriodNumber *int32 `json:"PeriodNumber,omitempty" xml:"PeriodNumber,omitempty"`
	// The task priority. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun mode. Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times the instance is run. By default, the value starts from 1.
	//
	// example:
	//
	// 1
	RunNumber *int32 `json:"RunNumber,omitempty" xml:"RunNumber,omitempty"`
	// The runtime information about the instance.
	Runtime *GetTaskInstanceResponseBodyTaskInstanceRuntime `json:"Runtime,omitempty" xml:"Runtime,omitempty" type:"Struct"`
	// The information about the resource group with which the instance is associated.
	RuntimeResource *GetTaskInstanceResponseBodyTaskInstanceRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The script information.
	Script *GetTaskInstanceResponseBodyTaskInstanceScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	// The time when the instance started to run.
	//
	// example:
	//
	// 1710239005403
	StartedTime *int64 `json:"StartedTime,omitempty" xml:"StartedTime,omitempty"`
	// The status of the instance. Valid values:
	//
	// 	- NotRun: The instance is not run.
	//
	// 	- Running: The instance is running.
	//
	// 	- WaitTime: The instance is waiting for the scheduling time to arrive.
	//
	// 	- CheckingCondition: Branch conditions are being checked for the instance.
	//
	// 	- WaitResource: The instance is waiting for resources.
	//
	// 	- Failure: The instance fails to be run.
	//
	// 	- Success: The instance is successfully run.
	//
	// 	- Checking: Data quality is being checked for the instance.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tags of the task.
	Tags []*GetTaskInstanceResponseBodyTaskInstanceTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The ID of the task for which the instance is generated.
	//
	// example:
	//
	// 1234
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the task for which the instance is generated.
	//
	// example:
	//
	// SQL node
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The type of the task for which the instance is generated.
	//
	// example:
	//
	// ODPS_SQL
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The timeout period of task running. Unit: seconds.
	//
	// Note: The value of this parameter is rounded up by hour.
	//
	// example:
	//
	// 1
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	TriggerRecurrence *string `json:"TriggerRecurrence,omitempty" xml:"TriggerRecurrence,omitempty"`
	// The scheduling time.
	//
	// example:
	//
	// 1710239005403
	TriggerTime *int64 `json:"TriggerTime,omitempty" xml:"TriggerTime,omitempty"`
	// The method to trigger instance scheduling. The value of the Trigger.Type parameter in the response of the GetTask operation is used. Valid values:
	//
	// 	- Scheduler
	//
	// 	- Manual
	//
	// example:
	//
	// Scheduler
	TriggerType         *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
	WaitingResourceTime *int64  `json:"WaitingResourceTime,omitempty" xml:"WaitingResourceTime,omitempty"`
	WaitingTriggerTime  *int64  `json:"WaitingTriggerTime,omitempty" xml:"WaitingTriggerTime,omitempty"`
	// The ID of the workflow to which the instance belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
	// The workflow instance ID.
	//
	// example:
	//
	// 1234
	WorkflowInstanceId *int64 `json:"WorkflowInstanceId,omitempty" xml:"WorkflowInstanceId,omitempty"`
	// The type of the workflow instance. Valid values:
	//
	// 	- SmokeTest
	//
	// 	- SupplementData
	//
	// 	- Manual
	//
	// 	- ManualWorkflow
	//
	// 	- Normal
	//
	// 	- ManualFlow
	//
	// example:
	//
	// Normal
	WorkflowInstanceType *string `json:"WorkflowInstanceType,omitempty" xml:"WorkflowInstanceType,omitempty"`
	// The name of the workflow to which the instance belongs.
	//
	// example:
	//
	// Test workflow
	WorkflowName *string `json:"WorkflowName,omitempty" xml:"WorkflowName,omitempty"`
}

func (s GetTaskInstanceResponseBodyTaskInstance) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceResponseBodyTaskInstance) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetBaselineId(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.BaselineId = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetBizdate(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.Bizdate = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetCreateTime(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.CreateTime = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetCreateUser(v string) *GetTaskInstanceResponseBodyTaskInstance {
	s.CreateUser = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetDataSource(v *GetTaskInstanceResponseBodyTaskInstanceDataSource) *GetTaskInstanceResponseBodyTaskInstance {
	s.DataSource = v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetDescription(v string) *GetTaskInstanceResponseBodyTaskInstance {
	s.Description = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetFinishedTime(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.FinishedTime = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetId(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.Id = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetInputs(v *GetTaskInstanceResponseBodyTaskInstanceInputs) *GetTaskInstanceResponseBodyTaskInstance {
	s.Inputs = v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetModifyTime(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.ModifyTime = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetModifyUser(v string) *GetTaskInstanceResponseBodyTaskInstance {
	s.ModifyUser = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetOutputs(v *GetTaskInstanceResponseBodyTaskInstanceOutputs) *GetTaskInstanceResponseBodyTaskInstance {
	s.Outputs = v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetOwner(v string) *GetTaskInstanceResponseBodyTaskInstance {
	s.Owner = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetPeriodNumber(v int32) *GetTaskInstanceResponseBodyTaskInstance {
	s.PeriodNumber = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetPriority(v int32) *GetTaskInstanceResponseBodyTaskInstance {
	s.Priority = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetProjectEnv(v string) *GetTaskInstanceResponseBodyTaskInstance {
	s.ProjectEnv = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetProjectId(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.ProjectId = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetRerunMode(v string) *GetTaskInstanceResponseBodyTaskInstance {
	s.RerunMode = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetRunNumber(v int32) *GetTaskInstanceResponseBodyTaskInstance {
	s.RunNumber = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetRuntime(v *GetTaskInstanceResponseBodyTaskInstanceRuntime) *GetTaskInstanceResponseBodyTaskInstance {
	s.Runtime = v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetRuntimeResource(v *GetTaskInstanceResponseBodyTaskInstanceRuntimeResource) *GetTaskInstanceResponseBodyTaskInstance {
	s.RuntimeResource = v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetScript(v *GetTaskInstanceResponseBodyTaskInstanceScript) *GetTaskInstanceResponseBodyTaskInstance {
	s.Script = v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetStartedTime(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.StartedTime = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetStatus(v string) *GetTaskInstanceResponseBodyTaskInstance {
	s.Status = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetTags(v []*GetTaskInstanceResponseBodyTaskInstanceTags) *GetTaskInstanceResponseBodyTaskInstance {
	s.Tags = v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetTaskId(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.TaskId = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetTaskName(v string) *GetTaskInstanceResponseBodyTaskInstance {
	s.TaskName = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetTaskType(v string) *GetTaskInstanceResponseBodyTaskInstance {
	s.TaskType = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetTimeout(v int32) *GetTaskInstanceResponseBodyTaskInstance {
	s.Timeout = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetTriggerRecurrence(v string) *GetTaskInstanceResponseBodyTaskInstance {
	s.TriggerRecurrence = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetTriggerTime(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.TriggerTime = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetTriggerType(v string) *GetTaskInstanceResponseBodyTaskInstance {
	s.TriggerType = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetWaitingResourceTime(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.WaitingResourceTime = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetWaitingTriggerTime(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.WaitingTriggerTime = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetWorkflowId(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.WorkflowId = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetWorkflowInstanceId(v int64) *GetTaskInstanceResponseBodyTaskInstance {
	s.WorkflowInstanceId = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetWorkflowInstanceType(v string) *GetTaskInstanceResponseBodyTaskInstance {
	s.WorkflowInstanceType = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstance) SetWorkflowName(v string) *GetTaskInstanceResponseBodyTaskInstance {
	s.WorkflowName = &v
	return s
}

type GetTaskInstanceResponseBodyTaskInstanceDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetTaskInstanceResponseBodyTaskInstanceDataSource) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceResponseBodyTaskInstanceDataSource) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceResponseBodyTaskInstanceDataSource) SetName(v string) *GetTaskInstanceResponseBodyTaskInstanceDataSource {
	s.Name = &v
	return s
}

type GetTaskInstanceResponseBodyTaskInstanceInputs struct {
	// The variables.
	Variables []*GetTaskInstanceResponseBodyTaskInstanceInputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s GetTaskInstanceResponseBodyTaskInstanceInputs) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceResponseBodyTaskInstanceInputs) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceResponseBodyTaskInstanceInputs) SetVariables(v []*GetTaskInstanceResponseBodyTaskInstanceInputsVariables) *GetTaskInstanceResponseBodyTaskInstanceInputs {
	s.Variables = v
	return s
}

type GetTaskInstanceResponseBodyTaskInstanceInputsVariables struct {
	// The name of the variable.
	//
	// example:
	//
	// Key1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type. Valid values:
	//
	// 	- Constant: constant
	//
	// 	- PassThrough: node output
	//
	// 	- System: variable
	//
	// 	- NodeOutput: script output
	//
	// example:
	//
	// Constant
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// Value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetTaskInstanceResponseBodyTaskInstanceInputsVariables) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceResponseBodyTaskInstanceInputsVariables) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceResponseBodyTaskInstanceInputsVariables) SetName(v string) *GetTaskInstanceResponseBodyTaskInstanceInputsVariables {
	s.Name = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstanceInputsVariables) SetType(v string) *GetTaskInstanceResponseBodyTaskInstanceInputsVariables {
	s.Type = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstanceInputsVariables) SetValue(v string) *GetTaskInstanceResponseBodyTaskInstanceInputsVariables {
	s.Value = &v
	return s
}

type GetTaskInstanceResponseBodyTaskInstanceOutputs struct {
	// The task outputs.
	TaskOutputs []*GetTaskInstanceResponseBodyTaskInstanceOutputsTaskOutputs `json:"TaskOutputs,omitempty" xml:"TaskOutputs,omitempty" type:"Repeated"`
	// The variables.
	Variables []*GetTaskInstanceResponseBodyTaskInstanceOutputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s GetTaskInstanceResponseBodyTaskInstanceOutputs) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceResponseBodyTaskInstanceOutputs) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceResponseBodyTaskInstanceOutputs) SetTaskOutputs(v []*GetTaskInstanceResponseBodyTaskInstanceOutputsTaskOutputs) *GetTaskInstanceResponseBodyTaskInstanceOutputs {
	s.TaskOutputs = v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstanceOutputs) SetVariables(v []*GetTaskInstanceResponseBodyTaskInstanceOutputsVariables) *GetTaskInstanceResponseBodyTaskInstanceOutputs {
	s.Variables = v
	return s
}

type GetTaskInstanceResponseBodyTaskInstanceOutputsTaskOutputs struct {
	// The output identifier.
	//
	// example:
	//
	// pre.odps_sql_demo_0
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s GetTaskInstanceResponseBodyTaskInstanceOutputsTaskOutputs) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceResponseBodyTaskInstanceOutputsTaskOutputs) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceResponseBodyTaskInstanceOutputsTaskOutputs) SetOutput(v string) *GetTaskInstanceResponseBodyTaskInstanceOutputsTaskOutputs {
	s.Output = &v
	return s
}

type GetTaskInstanceResponseBodyTaskInstanceOutputsVariables struct {
	// The name of the variable.
	//
	// example:
	//
	// key1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type. Valid values:
	//
	// 	- Constant: constant
	//
	// 	- PassThrough: node output
	//
	// 	- System: variable
	//
	// 	- NodeOutput: script output
	//
	// example:
	//
	// Constant
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetTaskInstanceResponseBodyTaskInstanceOutputsVariables) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceResponseBodyTaskInstanceOutputsVariables) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceResponseBodyTaskInstanceOutputsVariables) SetName(v string) *GetTaskInstanceResponseBodyTaskInstanceOutputsVariables {
	s.Name = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstanceOutputsVariables) SetType(v string) *GetTaskInstanceResponseBodyTaskInstanceOutputsVariables {
	s.Type = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstanceOutputsVariables) SetValue(v string) *GetTaskInstanceResponseBodyTaskInstanceOutputsVariables {
	s.Value = &v
	return s
}

type GetTaskInstanceResponseBodyTaskInstanceRuntime struct {
	// The host for running.
	//
	// example:
	//
	// cn-shanghai.1.2
	Gateway *string `json:"Gateway,omitempty" xml:"Gateway,omitempty"`
	// The instance run ID.
	//
	// example:
	//
	// T3_123
	ProcessId *string `json:"ProcessId,omitempty" xml:"ProcessId,omitempty"`
}

func (s GetTaskInstanceResponseBodyTaskInstanceRuntime) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceResponseBodyTaskInstanceRuntime) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceResponseBodyTaskInstanceRuntime) SetGateway(v string) *GetTaskInstanceResponseBodyTaskInstanceRuntime {
	s.Gateway = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstanceRuntime) SetProcessId(v string) *GetTaskInstanceResponseBodyTaskInstanceRuntime {
	s.ProcessId = &v
	return s
}

type GetTaskInstanceResponseBodyTaskInstanceRuntimeResource struct {
	// The default number of CUs configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s GetTaskInstanceResponseBodyTaskInstanceRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceResponseBodyTaskInstanceRuntimeResource) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceResponseBodyTaskInstanceRuntimeResource) SetCu(v string) *GetTaskInstanceResponseBodyTaskInstanceRuntimeResource {
	s.Cu = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstanceRuntimeResource) SetImage(v string) *GetTaskInstanceResponseBodyTaskInstanceRuntimeResource {
	s.Image = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstanceRuntimeResource) SetResourceGroupId(v string) *GetTaskInstanceResponseBodyTaskInstanceRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type GetTaskInstanceResponseBodyTaskInstanceScript struct {
	// The script content.
	//
	// example:
	//
	// echo "helloWorld"
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The script parameters.
	//
	// example:
	//
	// para1=$bizdate
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
}

func (s GetTaskInstanceResponseBodyTaskInstanceScript) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceResponseBodyTaskInstanceScript) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceResponseBodyTaskInstanceScript) SetContent(v string) *GetTaskInstanceResponseBodyTaskInstanceScript {
	s.Content = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstanceScript) SetParameters(v string) *GetTaskInstanceResponseBodyTaskInstanceScript {
	s.Parameters = &v
	return s
}

type GetTaskInstanceResponseBodyTaskInstanceTags struct {
	// The tag key.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetTaskInstanceResponseBodyTaskInstanceTags) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceResponseBodyTaskInstanceTags) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceResponseBodyTaskInstanceTags) SetKey(v string) *GetTaskInstanceResponseBodyTaskInstanceTags {
	s.Key = &v
	return s
}

func (s *GetTaskInstanceResponseBodyTaskInstanceTags) SetValue(v string) *GetTaskInstanceResponseBodyTaskInstanceTags {
	s.Value = &v
	return s
}

type GetTaskInstanceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTaskInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTaskInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceResponse) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceResponse) SetHeaders(v map[string]*string) *GetTaskInstanceResponse {
	s.Headers = v
	return s
}

func (s *GetTaskInstanceResponse) SetStatusCode(v int32) *GetTaskInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTaskInstanceResponse) SetBody(v *GetTaskInstanceResponseBody) *GetTaskInstanceResponse {
	s.Body = v
	return s
}

type GetTaskInstanceLogRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The sequence number of an instance run. Minimum value: 1. By default, the latest run is used.
	//
	// example:
	//
	// 1
	RunNumber *int32 `json:"RunNumber,omitempty" xml:"RunNumber,omitempty"`
}

func (s GetTaskInstanceLogRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceLogRequest) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceLogRequest) SetId(v int64) *GetTaskInstanceLogRequest {
	s.Id = &v
	return s
}

func (s *GetTaskInstanceLogRequest) SetRunNumber(v int32) *GetTaskInstanceLogRequest {
	s.RunNumber = &v
	return s
}

type GetTaskInstanceLogResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The run log of the instance.
	//
	// example:
	//
	// This is running log
	TaskInstanceLog *string `json:"TaskInstanceLog,omitempty" xml:"TaskInstanceLog,omitempty"`
}

func (s GetTaskInstanceLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceLogResponseBody) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceLogResponseBody) SetRequestId(v string) *GetTaskInstanceLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTaskInstanceLogResponseBody) SetTaskInstanceLog(v string) *GetTaskInstanceLogResponseBody {
	s.TaskInstanceLog = &v
	return s
}

type GetTaskInstanceLogResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTaskInstanceLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTaskInstanceLogResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTaskInstanceLogResponse) GoString() string {
	return s.String()
}

func (s *GetTaskInstanceLogResponse) SetHeaders(v map[string]*string) *GetTaskInstanceLogResponse {
	s.Headers = v
	return s
}

func (s *GetTaskInstanceLogResponse) SetStatusCode(v int32) *GetTaskInstanceLogResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTaskInstanceLogResponse) SetBody(v *GetTaskInstanceLogResponseBody) *GetTaskInstanceLogResponse {
	s.Body = v
	return s
}

type GetWorkflowRequest struct {
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The workflow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowRequest) GoString() string {
	return s.String()
}

func (s *GetWorkflowRequest) SetEnvType(v string) *GetWorkflowRequest {
	s.EnvType = &v
	return s
}

func (s *GetWorkflowRequest) SetId(v int64) *GetWorkflowRequest {
	s.Id = &v
	return s
}

type GetWorkflowResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the workflow.
	Workflow *GetWorkflowResponseBodyWorkflow `json:"Workflow,omitempty" xml:"Workflow,omitempty" type:"Struct"`
}

func (s GetWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkflowResponseBody) SetRequestId(v string) *GetWorkflowResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkflowResponseBody) SetWorkflow(v *GetWorkflowResponseBodyWorkflow) *GetWorkflowResponseBody {
	s.Workflow = v
	return s
}

type GetWorkflowResponseBodyWorkflow struct {
	// The unique code of the client. This parameter is used to create a workflow asynchronously and implement the idempotence of the workflow. If you do not specify this parameter when you create the workflow, the system automatically generates a unique code. The unique code is uniquely associated with the workflow ID. If you specify this parameter when you update or delete the workflow, the value of this parameter must be the unique code that is used to create the workflow.
	//
	// example:
	//
	// Workflow_0bc5213917368545132902xxxxxxxx
	ClientUniqueCode *string `json:"ClientUniqueCode,omitempty" xml:"ClientUniqueCode,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The dependency information.
	Dependencies []*GetWorkflowResponseBodyWorkflowDependencies `json:"Dependencies,omitempty" xml:"Dependencies,omitempty" type:"Repeated"`
	// The description of the workflow.
	//
	// example:
	//
	// Test workflow
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The workflow ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The name of the workflow.
	//
	// example:
	//
	// Workflow
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output information.
	Outputs *GetWorkflowResponseBodyWorkflowOutputs `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Struct"`
	// The account ID of the workflow owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The parameters.
	//
	// example:
	//
	// para1=$bizdate para2=$[yyyymmdd]
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The tags.
	Tags []*GetWorkflowResponseBodyWorkflowTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The tasks.
	Tasks []*GetWorkflowResponseBodyWorkflowTasks `json:"Tasks,omitempty" xml:"Tasks,omitempty" type:"Repeated"`
	// The trigger method.
	Trigger *GetWorkflowResponseBodyWorkflowTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s GetWorkflowResponseBodyWorkflow) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowResponseBodyWorkflow) GoString() string {
	return s.String()
}

func (s *GetWorkflowResponseBodyWorkflow) SetClientUniqueCode(v string) *GetWorkflowResponseBodyWorkflow {
	s.ClientUniqueCode = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetCreateTime(v int64) *GetWorkflowResponseBodyWorkflow {
	s.CreateTime = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetCreateUser(v string) *GetWorkflowResponseBodyWorkflow {
	s.CreateUser = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetDependencies(v []*GetWorkflowResponseBodyWorkflowDependencies) *GetWorkflowResponseBodyWorkflow {
	s.Dependencies = v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetDescription(v string) *GetWorkflowResponseBodyWorkflow {
	s.Description = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetEnvType(v string) *GetWorkflowResponseBodyWorkflow {
	s.EnvType = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetId(v int64) *GetWorkflowResponseBodyWorkflow {
	s.Id = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetModifyTime(v int64) *GetWorkflowResponseBodyWorkflow {
	s.ModifyTime = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetModifyUser(v string) *GetWorkflowResponseBodyWorkflow {
	s.ModifyUser = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetName(v string) *GetWorkflowResponseBodyWorkflow {
	s.Name = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetOutputs(v *GetWorkflowResponseBodyWorkflowOutputs) *GetWorkflowResponseBodyWorkflow {
	s.Outputs = v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetOwner(v string) *GetWorkflowResponseBodyWorkflow {
	s.Owner = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetParameters(v string) *GetWorkflowResponseBodyWorkflow {
	s.Parameters = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetProjectId(v int64) *GetWorkflowResponseBodyWorkflow {
	s.ProjectId = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetTags(v []*GetWorkflowResponseBodyWorkflowTags) *GetWorkflowResponseBodyWorkflow {
	s.Tags = v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetTasks(v []*GetWorkflowResponseBodyWorkflowTasks) *GetWorkflowResponseBodyWorkflow {
	s.Tasks = v
	return s
}

func (s *GetWorkflowResponseBodyWorkflow) SetTrigger(v *GetWorkflowResponseBodyWorkflowTrigger) *GetWorkflowResponseBodyWorkflow {
	s.Trigger = v
	return s
}

type GetWorkflowResponseBodyWorkflowDependencies struct {
	// The scheduling dependency type. Valid values:
	//
	// 	- CrossCycleDependsOnChildren: cross-cycle dependency on the level-1 descendant nodes of a node
	//
	// 	- CrossCycleDependsOnSelf: cross-cycle dependency on the current node
	//
	// 	- CrossCycleDependsOnOtherNode: cross-cycle dependency on other nodes
	//
	// 	- Normal: same-cycle scheduling dependency
	//
	// example:
	//
	// Normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The identifier of the output of the ancestor task. This parameter is returned only if `same-cycle scheduling dependencies` and the node input are configured.
	//
	// example:
	//
	// pre.odps_sql_demo_0
	UpstreamOutput *string `json:"UpstreamOutput,omitempty" xml:"UpstreamOutput,omitempty"`
	// The ancestor task ID. This parameter is returned only if `cross-cycle scheduling dependencies` or `same-cycle scheduling dependencies` and the node input are not configured.
	//
	// example:
	//
	// 1234
	UpstreamTaskId *int64 `json:"UpstreamTaskId,omitempty" xml:"UpstreamTaskId,omitempty"`
}

func (s GetWorkflowResponseBodyWorkflowDependencies) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowResponseBodyWorkflowDependencies) GoString() string {
	return s.String()
}

func (s *GetWorkflowResponseBodyWorkflowDependencies) SetType(v string) *GetWorkflowResponseBodyWorkflowDependencies {
	s.Type = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowDependencies) SetUpstreamOutput(v string) *GetWorkflowResponseBodyWorkflowDependencies {
	s.UpstreamOutput = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowDependencies) SetUpstreamTaskId(v int64) *GetWorkflowResponseBodyWorkflowDependencies {
	s.UpstreamTaskId = &v
	return s
}

type GetWorkflowResponseBodyWorkflowOutputs struct {
	// The task outputs.
	TaskOutputs []*GetWorkflowResponseBodyWorkflowOutputsTaskOutputs `json:"TaskOutputs,omitempty" xml:"TaskOutputs,omitempty" type:"Repeated"`
}

func (s GetWorkflowResponseBodyWorkflowOutputs) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowResponseBodyWorkflowOutputs) GoString() string {
	return s.String()
}

func (s *GetWorkflowResponseBodyWorkflowOutputs) SetTaskOutputs(v []*GetWorkflowResponseBodyWorkflowOutputsTaskOutputs) *GetWorkflowResponseBodyWorkflowOutputs {
	s.TaskOutputs = v
	return s
}

type GetWorkflowResponseBodyWorkflowOutputsTaskOutputs struct {
	// The identifier of the output.
	//
	// example:
	//
	// pre.odps_sql_demo_0
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s GetWorkflowResponseBodyWorkflowOutputsTaskOutputs) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowResponseBodyWorkflowOutputsTaskOutputs) GoString() string {
	return s.String()
}

func (s *GetWorkflowResponseBodyWorkflowOutputsTaskOutputs) SetOutput(v string) *GetWorkflowResponseBodyWorkflowOutputsTaskOutputs {
	s.Output = &v
	return s
}

type GetWorkflowResponseBodyWorkflowTags struct {
	// The tag key.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetWorkflowResponseBodyWorkflowTags) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowResponseBodyWorkflowTags) GoString() string {
	return s.String()
}

func (s *GetWorkflowResponseBodyWorkflowTags) SetKey(v string) *GetWorkflowResponseBodyWorkflowTags {
	s.Key = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTags) SetValue(v string) *GetWorkflowResponseBodyWorkflowTags {
	s.Value = &v
	return s
}

type GetWorkflowResponseBodyWorkflowTasks struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The unique code of the client. This parameter is used to create a task asynchronously and implement the idempotence of the task. If you do not specify this parameter when you create the task, the system automatically generates a unique code. The unique code is uniquely associated with the task ID. If you specify this parameter when you update or delete the task, the value of this parameter must be the unique code that is used to create the task.
	//
	// example:
	//
	// Task_0bc5213917368545132902xxxxxxxx
	ClientUniqueCode *string `json:"ClientUniqueCode,omitempty" xml:"ClientUniqueCode,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *GetWorkflowResponseBodyWorkflowTasksDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description of the task.
	//
	// example:
	//
	// Test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The name of the task.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun interval. Unit: seconds.
	//
	// example:
	//
	// 60
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode. Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The configurations of the runtime environment, such as the resource group information.
	RuntimeResource *GetWorkflowResponseBodyWorkflowTasksRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The running mode of the task after it is triggered. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	TriggerRecurrence *string `json:"TriggerRecurrence,omitempty" xml:"TriggerRecurrence,omitempty"`
	// The type of the task.
	//
	// example:
	//
	// ODPS_SQL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the workflow to which the task belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s GetWorkflowResponseBodyWorkflowTasks) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowResponseBodyWorkflowTasks) GoString() string {
	return s.String()
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetBaselineId(v int64) *GetWorkflowResponseBodyWorkflowTasks {
	s.BaselineId = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetClientUniqueCode(v string) *GetWorkflowResponseBodyWorkflowTasks {
	s.ClientUniqueCode = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetCreateTime(v int64) *GetWorkflowResponseBodyWorkflowTasks {
	s.CreateTime = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetCreateUser(v string) *GetWorkflowResponseBodyWorkflowTasks {
	s.CreateUser = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetDataSource(v *GetWorkflowResponseBodyWorkflowTasksDataSource) *GetWorkflowResponseBodyWorkflowTasks {
	s.DataSource = v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetDescription(v string) *GetWorkflowResponseBodyWorkflowTasks {
	s.Description = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetEnvType(v string) *GetWorkflowResponseBodyWorkflowTasks {
	s.EnvType = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetId(v int64) *GetWorkflowResponseBodyWorkflowTasks {
	s.Id = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetModifyTime(v int64) *GetWorkflowResponseBodyWorkflowTasks {
	s.ModifyTime = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetModifyUser(v string) *GetWorkflowResponseBodyWorkflowTasks {
	s.ModifyUser = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetName(v string) *GetWorkflowResponseBodyWorkflowTasks {
	s.Name = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetOwner(v string) *GetWorkflowResponseBodyWorkflowTasks {
	s.Owner = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetPriority(v int32) *GetWorkflowResponseBodyWorkflowTasks {
	s.Priority = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetProjectId(v int64) *GetWorkflowResponseBodyWorkflowTasks {
	s.ProjectId = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetRerunInterval(v int32) *GetWorkflowResponseBodyWorkflowTasks {
	s.RerunInterval = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetRerunMode(v string) *GetWorkflowResponseBodyWorkflowTasks {
	s.RerunMode = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetRerunTimes(v int32) *GetWorkflowResponseBodyWorkflowTasks {
	s.RerunTimes = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetRuntimeResource(v *GetWorkflowResponseBodyWorkflowTasksRuntimeResource) *GetWorkflowResponseBodyWorkflowTasks {
	s.RuntimeResource = v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetTimeout(v int32) *GetWorkflowResponseBodyWorkflowTasks {
	s.Timeout = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetTriggerRecurrence(v string) *GetWorkflowResponseBodyWorkflowTasks {
	s.TriggerRecurrence = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetType(v string) *GetWorkflowResponseBodyWorkflowTasks {
	s.Type = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasks) SetWorkflowId(v int64) *GetWorkflowResponseBodyWorkflowTasks {
	s.WorkflowId = &v
	return s
}

type GetWorkflowResponseBodyWorkflowTasksDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetWorkflowResponseBodyWorkflowTasksDataSource) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowResponseBodyWorkflowTasksDataSource) GoString() string {
	return s.String()
}

func (s *GetWorkflowResponseBodyWorkflowTasksDataSource) SetName(v string) *GetWorkflowResponseBodyWorkflowTasksDataSource {
	s.Name = &v
	return s
}

type GetWorkflowResponseBodyWorkflowTasksRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s GetWorkflowResponseBodyWorkflowTasksRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowResponseBodyWorkflowTasksRuntimeResource) GoString() string {
	return s.String()
}

func (s *GetWorkflowResponseBodyWorkflowTasksRuntimeResource) SetCu(v string) *GetWorkflowResponseBodyWorkflowTasksRuntimeResource {
	s.Cu = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasksRuntimeResource) SetImage(v string) *GetWorkflowResponseBodyWorkflowTasksRuntimeResource {
	s.Image = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTasksRuntimeResource) SetResourceGroupId(v string) *GetWorkflowResponseBodyWorkflowTasksRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type GetWorkflowResponseBodyWorkflowTrigger struct {
	// The CRON expression. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the time range during which the workflow is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The running mode of the workflow after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The start time of the time range during which the workflow is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetWorkflowResponseBodyWorkflowTrigger) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowResponseBodyWorkflowTrigger) GoString() string {
	return s.String()
}

func (s *GetWorkflowResponseBodyWorkflowTrigger) SetCron(v string) *GetWorkflowResponseBodyWorkflowTrigger {
	s.Cron = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTrigger) SetEndTime(v string) *GetWorkflowResponseBodyWorkflowTrigger {
	s.EndTime = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTrigger) SetRecurrence(v string) *GetWorkflowResponseBodyWorkflowTrigger {
	s.Recurrence = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTrigger) SetStartTime(v string) *GetWorkflowResponseBodyWorkflowTrigger {
	s.StartTime = &v
	return s
}

func (s *GetWorkflowResponseBodyWorkflowTrigger) SetType(v string) *GetWorkflowResponseBodyWorkflowTrigger {
	s.Type = &v
	return s
}

type GetWorkflowResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowResponse) GoString() string {
	return s.String()
}

func (s *GetWorkflowResponse) SetHeaders(v map[string]*string) *GetWorkflowResponse {
	s.Headers = v
	return s
}

func (s *GetWorkflowResponse) SetStatusCode(v int32) *GetWorkflowResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkflowResponse) SetBody(v *GetWorkflowResponseBody) *GetWorkflowResponse {
	s.Body = v
	return s
}

type GetWorkflowDefinitionRequest struct {
	// The ID of the workflow.
	//
	// This parameter is required.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// 查询结果是否包含工作流内部节点的脚本内容（对于内容较多的节点，可能存在较长的网络传输延时）。
	//
	// example:
	//
	// false
	IncludeScriptContent *bool `json:"IncludeScriptContent,omitempty" xml:"IncludeScriptContent,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetWorkflowDefinitionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowDefinitionRequest) GoString() string {
	return s.String()
}

func (s *GetWorkflowDefinitionRequest) SetId(v int64) *GetWorkflowDefinitionRequest {
	s.Id = &v
	return s
}

func (s *GetWorkflowDefinitionRequest) SetIncludeScriptContent(v bool) *GetWorkflowDefinitionRequest {
	s.IncludeScriptContent = &v
	return s
}

func (s *GetWorkflowDefinitionRequest) SetProjectId(v int64) *GetWorkflowDefinitionRequest {
	s.ProjectId = &v
	return s
}

type GetWorkflowDefinitionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// F2BDD628-8A21-5BD1-B930-1A2D5989XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the workflow.
	WorkflowDefinition *GetWorkflowDefinitionResponseBodyWorkflowDefinition `json:"WorkflowDefinition,omitempty" xml:"WorkflowDefinition,omitempty" type:"Struct"`
}

func (s GetWorkflowDefinitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowDefinitionResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkflowDefinitionResponseBody) SetRequestId(v string) *GetWorkflowDefinitionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkflowDefinitionResponseBody) SetWorkflowDefinition(v *GetWorkflowDefinitionResponseBodyWorkflowDefinition) *GetWorkflowDefinitionResponseBody {
	s.WorkflowDefinition = v
	return s
}

type GetWorkflowDefinitionResponseBodyWorkflowDefinition struct {
	// The time when the workflow was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1708481905000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the workflow.
	//
	// example:
	//
	// 463497880880954XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The time when the workflow was last modified. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1708481905000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The name of the workflow.
	//
	// example:
	//
	// OpenAPI test workflow Demo
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The owner of the workflow.
	//
	// example:
	//
	// 110755000425XXXX
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The ID of the workspace to which the workflow belongs.
	//
	// example:
	//
	// 307XXX
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow/).
	//
	// example:
	//
	// {
	//
	//     "metadata": {
	//
	//         "tenantId": "52425742456XXXX",
	//
	//         "projectId": "307XXXX",
	//
	//         "uuid": "463497880880954XXXX"
	//
	//     },
	//
	//     "kind": "CycleWorkflow",
	//
	//     "version": "1.1.0",
	//
	//     "spec": {
	//
	//         "name": "OpenAPI_Test_Workflow_Demo",
	//
	//         "id": "463497880880954XXXX",
	//
	//         "type": "CycleWorkflow",
	//
	//         "owner": "110755000425XXXX",
	//
	//         "workflows": [
	//
	//             {
	//
	//                 "script": {
	//
	//                     "path": "XX/OpenAPI_Test/Workflow_Test/OpenAPI_Test_Workflow_Demo",
	//
	//                     "runtime": {
	//
	//                         "command": "WORKFLOW"
	//
	//                     },
	//
	//                     "id": "698002781368644XXXX"
	//
	//                 },
	//
	//                 "id": "463497880880954XXXX",
	//
	//                 "trigger": {
	//
	//                     "type": "Scheduler",
	//
	//                     "id": "652567824470354XXXX",
	//
	//                     "cron": "00 02 00 	- 	- ?",
	//
	//                     "startTime": "1970-01-01 00:00:00",
	//
	//                     "endTime": "9999-01-01 00:00:00",
	//
	//                     "timezone": "Asia/Shanghai",
	//
	//                     "delaySeconds": 0
	//
	//                 },
	//
	//                 "strategy": {
	//
	//                     "timeout": 0,
	//
	//                     "instanceMode": "T+1",
	//
	//                     "rerunMode": "Allowed",
	//
	//                     "rerunTimes": 3,
	//
	//                     "rerunInterval": 180000,
	//
	//                     "failureStrategy": "Break"
	//
	//                 },
	//
	//                 "name": "OpenAPI_Test_Workflow_Demo",
	//
	//                 "owner": "110755000425XXXX",
	//
	//                 "metadata": {
	//
	//                     "owner": "110755000425XXXX",
	//
	//                     "ownerName": "XXXX@test.XXXX.com",
	//
	//                     "tenantId": "52425742456XXXX",
	//
	//                     "project": {
	//
	//                         "mode": "STANDARD",
	//
	//                         "projectId": "307303",
	//
	//                         "projectIdentifier": "lwttest_standard",
	//
	//                         "projectName": "XXXX",
	//
	//                         "projectOwnerId": "110755000425XXXX",
	//
	//                         "simple": false,
	//
	//                         "tenantId": "52425742456XXXX"
	//
	//                     },
	//
	//                     "projectId": "307XXXX"
	//
	//                 },
	//
	//                 "inputs": {},
	//
	//                 "outputs": {
	//
	//                     "nodeOutputs": [
	//
	//                         {
	//
	//                             "data": "463497880880954XXXX",
	//
	//                             "artifactType": "NodeOutput",
	//
	//                             "refTableName": "OpenAPI_Test_Workflow_Demo",
	//
	//                             "isDefault": true
	//
	//                         }
	//
	//                     ]
	//
	//                 },
	//
	//                 "nodes": [],
	//
	//                 "dependencies": []
	//
	//             }
	//
	//         ]
	//
	//     }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	// The ID of the workflow on the scheduling side after publishing.
	//
	// example:
	//
	// 700006657495
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s GetWorkflowDefinitionResponseBodyWorkflowDefinition) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowDefinitionResponseBodyWorkflowDefinition) GoString() string {
	return s.String()
}

func (s *GetWorkflowDefinitionResponseBodyWorkflowDefinition) SetCreateTime(v int64) *GetWorkflowDefinitionResponseBodyWorkflowDefinition {
	s.CreateTime = &v
	return s
}

func (s *GetWorkflowDefinitionResponseBodyWorkflowDefinition) SetId(v int64) *GetWorkflowDefinitionResponseBodyWorkflowDefinition {
	s.Id = &v
	return s
}

func (s *GetWorkflowDefinitionResponseBodyWorkflowDefinition) SetModifyTime(v int64) *GetWorkflowDefinitionResponseBodyWorkflowDefinition {
	s.ModifyTime = &v
	return s
}

func (s *GetWorkflowDefinitionResponseBodyWorkflowDefinition) SetName(v string) *GetWorkflowDefinitionResponseBodyWorkflowDefinition {
	s.Name = &v
	return s
}

func (s *GetWorkflowDefinitionResponseBodyWorkflowDefinition) SetOwner(v string) *GetWorkflowDefinitionResponseBodyWorkflowDefinition {
	s.Owner = &v
	return s
}

func (s *GetWorkflowDefinitionResponseBodyWorkflowDefinition) SetProjectId(v int64) *GetWorkflowDefinitionResponseBodyWorkflowDefinition {
	s.ProjectId = &v
	return s
}

func (s *GetWorkflowDefinitionResponseBodyWorkflowDefinition) SetSpec(v string) *GetWorkflowDefinitionResponseBodyWorkflowDefinition {
	s.Spec = &v
	return s
}

func (s *GetWorkflowDefinitionResponseBodyWorkflowDefinition) SetWorkflowId(v int64) *GetWorkflowDefinitionResponseBodyWorkflowDefinition {
	s.WorkflowId = &v
	return s
}

type GetWorkflowDefinitionResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkflowDefinitionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkflowDefinitionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowDefinitionResponse) GoString() string {
	return s.String()
}

func (s *GetWorkflowDefinitionResponse) SetHeaders(v map[string]*string) *GetWorkflowDefinitionResponse {
	s.Headers = v
	return s
}

func (s *GetWorkflowDefinitionResponse) SetStatusCode(v int32) *GetWorkflowDefinitionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkflowDefinitionResponse) SetBody(v *GetWorkflowDefinitionResponseBody) *GetWorkflowDefinitionResponse {
	s.Body = v
	return s
}

type GetWorkflowInstanceRequest struct {
	// The ID of the workflow instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetWorkflowInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowInstanceRequest) GoString() string {
	return s.String()
}

func (s *GetWorkflowInstanceRequest) SetId(v int64) *GetWorkflowInstanceRequest {
	s.Id = &v
	return s
}

type GetWorkflowInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the workflow instance.
	WorkflowInstance *GetWorkflowInstanceResponseBodyWorkflowInstance `json:"WorkflowInstance,omitempty" xml:"WorkflowInstance,omitempty" type:"Struct"`
}

func (s GetWorkflowInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkflowInstanceResponseBody) SetRequestId(v string) *GetWorkflowInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkflowInstanceResponseBody) SetWorkflowInstance(v *GetWorkflowInstanceResponseBodyWorkflowInstance) *GetWorkflowInstanceResponseBody {
	s.WorkflowInstance = v
	return s
}

type GetWorkflowInstanceResponseBodyWorkflowInstance struct {
	// The data timestamp.
	//
	// example:
	//
	// 1710239005403
	BizDate *int64 `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The time when the instance finished running.
	//
	// example:
	//
	// 1710239005403
	FinishedTime *int64 `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	// The ID of the workflow instance.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The name of the workflow instance.
	//
	// example:
	//
	// WorkInstance1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The time when the instance started to run.
	//
	// example:
	//
	// 1710239005403
	StartedTime *int64 `json:"StartedTime,omitempty" xml:"StartedTime,omitempty"`
	// The status of the workflow instance. Valid values:
	//
	// 	- NotRun: The instance is not run.
	//
	// 	- Running: The instance is running.
	//
	// 	- WaitTime: The instance is waiting for the scheduling time to arrive.
	//
	// 	- CheckingCondition: Branch conditions are being checked for the instance.
	//
	// 	- WaitResource: The instance is waiting for resources.
	//
	// 	- Failure: The instance fails to be run.
	//
	// 	- Success: The instance is successfully run.
	//
	// 	- Checking: Data quality is being checked for the instance.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the workflow instance. Valid values:
	//
	// 	- Normal
	//
	// 	- Manual
	//
	// 	- SmokeTest
	//
	// 	- SupplementData
	//
	// 	- ManualWorkflow
	//
	// example:
	//
	// Normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the workflow to which the instance belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s GetWorkflowInstanceResponseBodyWorkflowInstance) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowInstanceResponseBodyWorkflowInstance) GoString() string {
	return s.String()
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetBizDate(v int64) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.BizDate = &v
	return s
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetCreateTime(v int64) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.CreateTime = &v
	return s
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetCreateUser(v string) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.CreateUser = &v
	return s
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetEnvType(v string) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.EnvType = &v
	return s
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetFinishedTime(v int64) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.FinishedTime = &v
	return s
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetId(v int64) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.Id = &v
	return s
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetModifyTime(v int64) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.ModifyTime = &v
	return s
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetModifyUser(v string) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.ModifyUser = &v
	return s
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetName(v string) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.Name = &v
	return s
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetProjectId(v int64) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.ProjectId = &v
	return s
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetStartedTime(v int64) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.StartedTime = &v
	return s
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetStatus(v string) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.Status = &v
	return s
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetType(v string) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.Type = &v
	return s
}

func (s *GetWorkflowInstanceResponseBodyWorkflowInstance) SetWorkflowId(v int64) *GetWorkflowInstanceResponseBodyWorkflowInstance {
	s.WorkflowId = &v
	return s
}

type GetWorkflowInstanceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkflowInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkflowInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowInstanceResponse) GoString() string {
	return s.String()
}

func (s *GetWorkflowInstanceResponse) SetHeaders(v map[string]*string) *GetWorkflowInstanceResponse {
	s.Headers = v
	return s
}

func (s *GetWorkflowInstanceResponse) SetStatusCode(v int32) *GetWorkflowInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkflowInstanceResponse) SetBody(v *GetWorkflowInstanceResponseBody) *GetWorkflowInstanceResponse {
	s.Body = v
	return s
}

type GrantMemberProjectRolesRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 105149
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.
	//
	// You must configure this parameter to specify the roles that you want to assign to members in the workspace.
	//
	// This parameter is required.
	RoleCodes []*string `json:"RoleCodes,omitempty" xml:"RoleCodes,omitempty" type:"Repeated"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123422344899
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GrantMemberProjectRolesRequest) String() string {
	return tea.Prettify(s)
}

func (s GrantMemberProjectRolesRequest) GoString() string {
	return s.String()
}

func (s *GrantMemberProjectRolesRequest) SetProjectId(v int64) *GrantMemberProjectRolesRequest {
	s.ProjectId = &v
	return s
}

func (s *GrantMemberProjectRolesRequest) SetRoleCodes(v []*string) *GrantMemberProjectRolesRequest {
	s.RoleCodes = v
	return s
}

func (s *GrantMemberProjectRolesRequest) SetUserId(v string) *GrantMemberProjectRolesRequest {
	s.UserId = &v
	return s
}

type GrantMemberProjectRolesShrinkRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 105149
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.
	//
	// You must configure this parameter to specify the roles that you want to assign to members in the workspace.
	//
	// This parameter is required.
	RoleCodesShrink *string `json:"RoleCodes,omitempty" xml:"RoleCodes,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123422344899
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GrantMemberProjectRolesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GrantMemberProjectRolesShrinkRequest) GoString() string {
	return s.String()
}

func (s *GrantMemberProjectRolesShrinkRequest) SetProjectId(v int64) *GrantMemberProjectRolesShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *GrantMemberProjectRolesShrinkRequest) SetRoleCodesShrink(v string) *GrantMemberProjectRolesShrinkRequest {
	s.RoleCodesShrink = &v
	return s
}

func (s *GrantMemberProjectRolesShrinkRequest) SetUserId(v string) *GrantMemberProjectRolesShrinkRequest {
	s.UserId = &v
	return s
}

type GrantMemberProjectRolesResponseBody struct {
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 2d9ced66-38ef-4923-baf6-391dd3a7e656
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GrantMemberProjectRolesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GrantMemberProjectRolesResponseBody) GoString() string {
	return s.String()
}

func (s *GrantMemberProjectRolesResponseBody) SetRequestId(v string) *GrantMemberProjectRolesResponseBody {
	s.RequestId = &v
	return s
}

type GrantMemberProjectRolesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GrantMemberProjectRolesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GrantMemberProjectRolesResponse) String() string {
	return tea.Prettify(s)
}

func (s GrantMemberProjectRolesResponse) GoString() string {
	return s.String()
}

func (s *GrantMemberProjectRolesResponse) SetHeaders(v map[string]*string) *GrantMemberProjectRolesResponse {
	s.Headers = v
	return s
}

func (s *GrantMemberProjectRolesResponse) SetStatusCode(v int32) *GrantMemberProjectRolesResponse {
	s.StatusCode = &v
	return s
}

func (s *GrantMemberProjectRolesResponse) SetBody(v *GrantMemberProjectRolesResponseBody) *GrantMemberProjectRolesResponse {
	s.Body = v
	return s
}

type ImportCertificateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// -
	CertificateFile *string `json:"CertificateFile,omitempty" xml:"CertificateFile,omitempty"`
	// example:
	//
	// This is a file
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ca1.crt
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 106560
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ImportCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportCertificateRequest) GoString() string {
	return s.String()
}

func (s *ImportCertificateRequest) SetCertificateFile(v string) *ImportCertificateRequest {
	s.CertificateFile = &v
	return s
}

func (s *ImportCertificateRequest) SetDescription(v string) *ImportCertificateRequest {
	s.Description = &v
	return s
}

func (s *ImportCertificateRequest) SetName(v string) *ImportCertificateRequest {
	s.Name = &v
	return s
}

func (s *ImportCertificateRequest) SetProjectId(v int64) *ImportCertificateRequest {
	s.ProjectId = &v
	return s
}

type ImportCertificateAdvanceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// -
	CertificateFileObject io.Reader `json:"CertificateFile,omitempty" xml:"CertificateFile,omitempty"`
	// example:
	//
	// This is a file
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ca1.crt
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 106560
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ImportCertificateAdvanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportCertificateAdvanceRequest) GoString() string {
	return s.String()
}

func (s *ImportCertificateAdvanceRequest) SetCertificateFileObject(v io.Reader) *ImportCertificateAdvanceRequest {
	s.CertificateFileObject = v
	return s
}

func (s *ImportCertificateAdvanceRequest) SetDescription(v string) *ImportCertificateAdvanceRequest {
	s.Description = &v
	return s
}

func (s *ImportCertificateAdvanceRequest) SetName(v string) *ImportCertificateAdvanceRequest {
	s.Name = &v
	return s
}

func (s *ImportCertificateAdvanceRequest) SetProjectId(v int64) *ImportCertificateAdvanceRequest {
	s.ProjectId = &v
	return s
}

type ImportCertificateResponseBody struct {
	// example:
	//
	// 676303114031776
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 7C352CB7-CD88-50CF-9D0D-E81BDF020E7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *ImportCertificateResponseBody) SetId(v int64) *ImportCertificateResponseBody {
	s.Id = &v
	return s
}

func (s *ImportCertificateResponseBody) SetRequestId(v string) *ImportCertificateResponseBody {
	s.RequestId = &v
	return s
}

type ImportCertificateResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportCertificateResponse) GoString() string {
	return s.String()
}

func (s *ImportCertificateResponse) SetHeaders(v map[string]*string) *ImportCertificateResponse {
	s.Headers = v
	return s
}

func (s *ImportCertificateResponse) SetStatusCode(v int32) *ImportCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportCertificateResponse) SetBody(v *ImportCertificateResponseBody) *ImportCertificateResponse {
	s.Body = v
	return s
}

type ImportWorkflowDefinitionRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/alibabacloud-dataworks-tool-dflow/).
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//     "version": "1.1.0",
	//
	//     "kind": "CycleWorkflow",
	//
	//     "spec": {
	//
	//         "name": "Asynchronous_Workflow_Creation_Test",
	//
	//         "id": "632647691239009XXXX",
	//
	//         "type": "CycleWorkflow",
	//
	//         "workflows": [
	//
	//             {
	//
	//                 "script": {
	//
	//                     "path": "XX/OpenAPI_Test/Workflow_Test/Asynchronous_Workflow_Creation_Test",
	//
	//                     "runtime": {
	//
	//                         "command": "WORKFLOW"
	//
	//                     }
	//
	//                 },
	//
	//                 "id": "632647691239009XXXX",
	//
	//                 "trigger": {
	//
	//                     "type": "Scheduler",
	//
	//                     "cron": "00 03 00 	- 	- ?",
	//
	//                     "startTime": "1970-01-01 00:00:00",
	//
	//                     "endTime": "9999-01-01 00:00:00",
	//
	//                     "timezone": "Asia/Shanghai",
	//
	//                     "delaySeconds": 0
	//
	//                 },
	//
	//                 "strategy": {
	//
	//                     "timeout": 0,
	//
	//                     "instanceMode": "T+1",
	//
	//                     "rerunMode": "Allowed",
	//
	//                     "rerunTimes": 3,
	//
	//                     "rerunInterval": 180000,
	//
	//                     "failureStrategy": "Break"
	//
	//                 },
	//
	//                 "name": "Asynchronous_Workflow_Creation_Test",
	//
	//                 "inputs": {},
	//
	//                 "outputs": {
	//
	//                     "nodeOutputs": [
	//
	//                         {
	//
	//                             "data": "632647691239009XXXX",
	//
	//                             "artifactType": "NodeOutput",
	//
	//                             "refTableName": "Asynchronous_Workflow_Creation_Test"
	//
	//                         }
	//
	//                     ]
	//
	//                 },
	//
	//                 "nodes": [
	//
	//                     {
	//
	//                         "recurrence": "Normal",
	//
	//                         "id": "742981001612325XXXX",
	//
	//                         "timeout": 0,
	//
	//                         "instanceMode": "T+1",
	//
	//                         "rerunMode": "Allowed",
	//
	//                         "rerunTimes": 3,
	//
	//                         "rerunInterval": 180000,
	//
	//                         "script": {
	//
	//                             "path": "XX/OpenAPI_Test/Workflow_Test/Asynchronous_Workflow_Creation_Test/111",
	//
	//                             "runtime": {
	//
	//                                 "command": "ODPS_SQL"
	//
	//                             },
	//
	//                             "content": "select now();\\n"
	//
	//                         },
	//
	//                         "trigger": {
	//
	//                             "type": "Scheduler",
	//
	//                             "cron": "00 24 00 	- 	- ?",
	//
	//                             "startTime": "1970-01-01 00:00:00",
	//
	//                             "endTime": "9999-01-01 00:00:00",
	//
	//                             "timezone": "Asia/Shanghai",
	//
	//                             "delaySeconds": 0
	//
	//                         },
	//
	//                         "name": "111",
	//
	//                         "inputs": {},
	//
	//                         "outputs": {
	//
	//                             "nodeOutputs": [
	//
	//                                 {
	//
	//                                     "data": "742981001612325XXXX",
	//
	//                                     "artifactType": "NodeOutput",
	//
	//                                     "refTableName": "111"
	//
	//                                 }
	//
	//                             ]
	//
	//                         }
	//
	//                     },
	//
	//                     {
	//
	//                         "recurrence": "Normal",
	//
	//                         "id": "595182137303408XXXX",
	//
	//                         "timeout": 0,
	//
	//                         "instanceMode": "T+1",
	//
	//                         "rerunMode": "Allowed",
	//
	//                         "rerunTimes": 3,
	//
	//                         "rerunInterval": 180000,
	//
	//                         "script": {
	//
	//                             "path": "XX/OpenAPI_Test/Workflow_Test/Asynchronous_Workflow_Creation_Test/222",
	//
	//                             "runtime": {
	//
	//                                 "command": "ODPS_SQL"
	//
	//                             },
	//
	//                             "content": "select now();\\n select 1;"
	//
	//                         },
	//
	//                         "trigger": {
	//
	//                             "type": "Scheduler",
	//
	//                             "cron": "00 00 00 	- 	- ?",
	//
	//                             "startTime": "1970-01-01 00:00:00",
	//
	//                             "endTime": "9999-01-01 00:00:00",
	//
	//                             "timezone": "Asia/Shanghai",
	//
	//                             "delaySeconds": 0
	//
	//                         },
	//
	//                         "name": "222",
	//
	//                         "inputs": {},
	//
	//                         "outputs": {
	//
	//                             "nodeOutputs": [
	//
	//                                 {
	//
	//                                     "data": "595182137303408XXXX",
	//
	//                                     "artifactType": "NodeOutput",
	//
	//                                     "refTableName": "222"
	//
	//                                 }
	//
	//                             ]
	//
	//                         }
	//
	//                     }
	//
	//                 ],
	//
	//                 "dependencies": [
	//
	//                     {
	//
	//                         "nodeId": "595182137303408XXXX",
	//
	//                         "depends": [
	//
	//                             {
	//
	//                                 "type": "Normal",
	//
	//                                 "output": "742981001612325XXXX",
	//
	//                                 "refTableName": "111"
	//
	//                             }
	//
	//                         ]
	//
	//                     }
	//
	//                 ]
	//
	//             }
	//
	//         ]
	//
	//     }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s ImportWorkflowDefinitionRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportWorkflowDefinitionRequest) GoString() string {
	return s.String()
}

func (s *ImportWorkflowDefinitionRequest) SetProjectId(v int64) *ImportWorkflowDefinitionRequest {
	s.ProjectId = &v
	return s
}

func (s *ImportWorkflowDefinitionRequest) SetSpec(v string) *ImportWorkflowDefinitionRequest {
	s.Spec = &v
	return s
}

type ImportWorkflowDefinitionResponseBody struct {
	// The status information of the asynchronous task.
	AsyncJob *ImportWorkflowDefinitionResponseBodyAsyncJob `json:"AsyncJob,omitempty" xml:"AsyncJob,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 7C352CB7-CD88-50CF-9D0D-E81BDF020E7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportWorkflowDefinitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportWorkflowDefinitionResponseBody) GoString() string {
	return s.String()
}

func (s *ImportWorkflowDefinitionResponseBody) SetAsyncJob(v *ImportWorkflowDefinitionResponseBodyAsyncJob) *ImportWorkflowDefinitionResponseBody {
	s.AsyncJob = v
	return s
}

func (s *ImportWorkflowDefinitionResponseBody) SetRequestId(v string) *ImportWorkflowDefinitionResponseBody {
	s.RequestId = &v
	return s
}

type ImportWorkflowDefinitionResponseBodyAsyncJob struct {
	// Indicates whether the asynchronous task is complete.
	//
	// example:
	//
	// false
	Completed *bool `json:"Completed,omitempty" xml:"Completed,omitempty"`
	// The time when the asynchronous task was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1706581425000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The error message returned if the asynchronous task fails.
	//
	// example:
	//
	// target folder already exists: XXXX
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// The ID of the asynchronous task.
	//
	// example:
	//
	// 1234567691239009XXXX
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The progress of the asynchronous task. Valid values: 0 to 100.
	//
	// example:
	//
	// 0
	Progress *int32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The response.
	//
	// >  The workflow ID is returned.
	//
	// example:
	//
	// 632647691239009XXXX
	Response *string `json:"Response,omitempty" xml:"Response,omitempty"`
	// The status of the asynchronous task.
	//
	// Valid values:
	//
	// 	- Running: The asynchronous task is running.
	//
	// 	- Success: The asynchronous task is complete.
	//
	// 	- Fail: The asynchronous task fails.
	//
	// 	- Cancel: The asynchronous task is canceled.
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the asynchronous task.
	//
	// Valid values:
	//
	// 	- Create: The asynchronous task is used to create an object.
	//
	// 	- Cancel: The asynchronous task is used to cancel an operation.
	//
	// example:
	//
	// Create
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ImportWorkflowDefinitionResponseBodyAsyncJob) String() string {
	return tea.Prettify(s)
}

func (s ImportWorkflowDefinitionResponseBodyAsyncJob) GoString() string {
	return s.String()
}

func (s *ImportWorkflowDefinitionResponseBodyAsyncJob) SetCompleted(v bool) *ImportWorkflowDefinitionResponseBodyAsyncJob {
	s.Completed = &v
	return s
}

func (s *ImportWorkflowDefinitionResponseBodyAsyncJob) SetCreateTime(v int64) *ImportWorkflowDefinitionResponseBodyAsyncJob {
	s.CreateTime = &v
	return s
}

func (s *ImportWorkflowDefinitionResponseBodyAsyncJob) SetError(v string) *ImportWorkflowDefinitionResponseBodyAsyncJob {
	s.Error = &v
	return s
}

func (s *ImportWorkflowDefinitionResponseBodyAsyncJob) SetId(v string) *ImportWorkflowDefinitionResponseBodyAsyncJob {
	s.Id = &v
	return s
}

func (s *ImportWorkflowDefinitionResponseBodyAsyncJob) SetProgress(v int32) *ImportWorkflowDefinitionResponseBodyAsyncJob {
	s.Progress = &v
	return s
}

func (s *ImportWorkflowDefinitionResponseBodyAsyncJob) SetResponse(v string) *ImportWorkflowDefinitionResponseBodyAsyncJob {
	s.Response = &v
	return s
}

func (s *ImportWorkflowDefinitionResponseBodyAsyncJob) SetStatus(v string) *ImportWorkflowDefinitionResponseBodyAsyncJob {
	s.Status = &v
	return s
}

func (s *ImportWorkflowDefinitionResponseBodyAsyncJob) SetType(v string) *ImportWorkflowDefinitionResponseBodyAsyncJob {
	s.Type = &v
	return s
}

type ImportWorkflowDefinitionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportWorkflowDefinitionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportWorkflowDefinitionResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportWorkflowDefinitionResponse) GoString() string {
	return s.String()
}

func (s *ImportWorkflowDefinitionResponse) SetHeaders(v map[string]*string) *ImportWorkflowDefinitionResponse {
	s.Headers = v
	return s
}

func (s *ImportWorkflowDefinitionResponse) SetStatusCode(v int32) *ImportWorkflowDefinitionResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportWorkflowDefinitionResponse) SetBody(v *ImportWorkflowDefinitionResponseBody) *ImportWorkflowDefinitionResponse {
	s.Body = v
	return s
}

type ListAlertRulesRequest struct {
	// The name of the rule.
	//
	// example:
	//
	// error_rule
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the Alibaba Cloud account used by the owner of the rule.
	//
	// example:
	//
	// 1933790683****
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The page number. Pages start from page 1.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the Alibaba Cloud account used by the alert recipient.
	//
	// example:
	//
	// 1933790683****
	Receiver *string `json:"Receiver,omitempty" xml:"Receiver,omitempty"`
	// The IDs of the scheduling tasks.
	TaskIds []*int64 `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
	// The alert triggering condition.
	Types []*string `json:"Types,omitempty" xml:"Types,omitempty" type:"Repeated"`
}

func (s ListAlertRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesRequest) GoString() string {
	return s.String()
}

func (s *ListAlertRulesRequest) SetName(v string) *ListAlertRulesRequest {
	s.Name = &v
	return s
}

func (s *ListAlertRulesRequest) SetOwner(v string) *ListAlertRulesRequest {
	s.Owner = &v
	return s
}

func (s *ListAlertRulesRequest) SetPageNumber(v int32) *ListAlertRulesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAlertRulesRequest) SetPageSize(v int64) *ListAlertRulesRequest {
	s.PageSize = &v
	return s
}

func (s *ListAlertRulesRequest) SetReceiver(v string) *ListAlertRulesRequest {
	s.Receiver = &v
	return s
}

func (s *ListAlertRulesRequest) SetTaskIds(v []*int64) *ListAlertRulesRequest {
	s.TaskIds = v
	return s
}

func (s *ListAlertRulesRequest) SetTypes(v []*string) *ListAlertRulesRequest {
	s.Types = v
	return s
}

type ListAlertRulesShrinkRequest struct {
	// The name of the rule.
	//
	// example:
	//
	// error_rule
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the Alibaba Cloud account used by the owner of the rule.
	//
	// example:
	//
	// 1933790683****
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The page number. Pages start from page 1.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the Alibaba Cloud account used by the alert recipient.
	//
	// example:
	//
	// 1933790683****
	Receiver *string `json:"Receiver,omitempty" xml:"Receiver,omitempty"`
	// The IDs of the scheduling tasks.
	TaskIdsShrink *string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty"`
	// The alert triggering condition.
	TypesShrink *string `json:"Types,omitempty" xml:"Types,omitempty"`
}

func (s ListAlertRulesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListAlertRulesShrinkRequest) SetName(v string) *ListAlertRulesShrinkRequest {
	s.Name = &v
	return s
}

func (s *ListAlertRulesShrinkRequest) SetOwner(v string) *ListAlertRulesShrinkRequest {
	s.Owner = &v
	return s
}

func (s *ListAlertRulesShrinkRequest) SetPageNumber(v int32) *ListAlertRulesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAlertRulesShrinkRequest) SetPageSize(v int64) *ListAlertRulesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListAlertRulesShrinkRequest) SetReceiver(v string) *ListAlertRulesShrinkRequest {
	s.Receiver = &v
	return s
}

func (s *ListAlertRulesShrinkRequest) SetTaskIdsShrink(v string) *ListAlertRulesShrinkRequest {
	s.TaskIdsShrink = &v
	return s
}

func (s *ListAlertRulesShrinkRequest) SetTypesShrink(v string) *ListAlertRulesShrinkRequest {
	s.TypesShrink = &v
	return s
}

type ListAlertRulesResponseBody struct {
	// The pagination information.
	PagingInfo *ListAlertRulesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// A6C6B486-E3A2-5D52-9E76-D9380485D946
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAlertRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBody) SetPagingInfo(v *ListAlertRulesResponseBodyPagingInfo) *ListAlertRulesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListAlertRulesResponseBody) SetRequestId(v string) *ListAlertRulesResponseBody {
	s.RequestId = &v
	return s
}

type ListAlertRulesResponseBodyPagingInfo struct {
	// The rules.
	AlertRules []*ListAlertRulesResponseBodyPagingInfoAlertRules `json:"AlertRules,omitempty" xml:"AlertRules,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 5
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAlertRulesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBodyPagingInfo) SetAlertRules(v []*ListAlertRulesResponseBodyPagingInfoAlertRules) *ListAlertRulesResponseBodyPagingInfo {
	s.AlertRules = v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfo) SetPageNumber(v int32) *ListAlertRulesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfo) SetPageSize(v int32) *ListAlertRulesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfo) SetTotalCount(v int32) *ListAlertRulesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListAlertRulesResponseBodyPagingInfoAlertRules struct {
	// Indicates whether the rule is enabled.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The rule ID.
	//
	// example:
	//
	// 22125
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the rule.
	//
	// example:
	//
	// error_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the Alibaba Cloud account used by the owner of the rule.
	//
	// example:
	//
	// 1933790683****
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The alert triggering condition.
	TriggerCondition *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerCondition `json:"TriggerCondition,omitempty" xml:"TriggerCondition,omitempty" type:"Struct"`
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRules) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRules) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRules) SetEnabled(v bool) *ListAlertRulesResponseBodyPagingInfoAlertRules {
	s.Enabled = &v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRules) SetId(v int64) *ListAlertRulesResponseBodyPagingInfoAlertRules {
	s.Id = &v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRules) SetName(v string) *ListAlertRulesResponseBodyPagingInfoAlertRules {
	s.Name = &v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRules) SetOwner(v string) *ListAlertRulesResponseBodyPagingInfoAlertRules {
	s.Owner = &v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRules) SetTriggerCondition(v *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerCondition) *ListAlertRulesResponseBodyPagingInfoAlertRules {
	s.TriggerCondition = v
	return s
}

type ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerCondition struct {
	// The extended information about the rule. This parameter is required for specific types of alerts.
	Extension *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension `json:"Extension,omitempty" xml:"Extension,omitempty" type:"Struct"`
	// The monitored objects.
	Target *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The alert type. Valid values:
	//
	// 	- Finished: An instance is successfully run.
	//
	// 	- UnFinished: An instance does not finish running before a specified point in time.
	//
	// 	- Error: An error occurs on an instance.
	//
	// 	- CycleUnfinished: An instance does not finish running as expected within a specific cycle.
	//
	// 	- Timeout: An instance times out.
	//
	// 	- InstanceTransferComplete: An instance is generated by the auto triggered node.
	//
	// 	- InstanceTransferFluctuate: The number of generated instances fluctuates.
	//
	// 	- ExhaustedError: An error persists after an instance is automatically rerun.
	//
	// 	- InstanceKeyword: An instance with errors contains specified keywords.
	//
	// 	- InstanceErrorCount: The number of instances on which an error occurs reaches a specified threshold.
	//
	// 	- InstanceErrorPercentage: The proportion of instances on which an error occurs in the workspace to the total number of instances reaches a specified threshold.
	//
	// 	- ResourceGroupPercentage: The usage rate of the resource group reaches a specified threshold.
	//
	// 	- ResourceGroupWaitCount: The number of instances that are waiting for resources in the resource group reaches a specified threshold.
	//
	// example:
	//
	// Error
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerCondition) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerCondition) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerCondition) SetExtension(v *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerCondition {
	s.Extension = v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerCondition) SetTarget(v *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionTarget) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerCondition {
	s.Target = v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerCondition) SetType(v string) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerCondition {
	s.Type = &v
	return s
}

type ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension struct {
	// The configuration for an alert of the CycleUnfinished type.
	CycleUnfinished *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinished `json:"CycleUnfinished,omitempty" xml:"CycleUnfinished,omitempty" type:"Struct"`
	// The configuration for an alert of the Error type.
	Error *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionError `json:"Error,omitempty" xml:"Error,omitempty" type:"Struct"`
	// The configuration for an alert of the InstanceErrorCount type.
	InstanceErrorCount *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorCount `json:"InstanceErrorCount,omitempty" xml:"InstanceErrorCount,omitempty" type:"Struct"`
	// The configuration for an alert of the InstanceErrorPercentage type.
	InstanceErrorPercentage *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorPercentage `json:"InstanceErrorPercentage,omitempty" xml:"InstanceErrorPercentage,omitempty" type:"Struct"`
	// The configuration for an alert of the InstanceTransferFluctuate type.
	InstanceTransferFluctuate *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceTransferFluctuate `json:"InstanceTransferFluctuate,omitempty" xml:"InstanceTransferFluctuate,omitempty" type:"Struct"`
	// The configuration for an alert of the Timeout type.
	Timeout *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionTimeout `json:"Timeout,omitempty" xml:"Timeout,omitempty" type:"Struct"`
	// The configuration for an alert of the UnFinished type.
	UnFinished *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionUnFinished `json:"UnFinished,omitempty" xml:"UnFinished,omitempty" type:"Struct"`
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension) SetCycleUnfinished(v *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinished) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension {
	s.CycleUnfinished = v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension) SetError(v *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionError) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension {
	s.Error = v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension) SetInstanceErrorCount(v *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorCount) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension {
	s.InstanceErrorCount = v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension) SetInstanceErrorPercentage(v *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorPercentage) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension {
	s.InstanceErrorPercentage = v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension) SetInstanceTransferFluctuate(v *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceTransferFluctuate) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension {
	s.InstanceTransferFluctuate = v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension) SetTimeout(v *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionTimeout) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension {
	s.Timeout = v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension) SetUnFinished(v *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionUnFinished) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtension {
	s.UnFinished = v
	return s
}

type ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinished struct {
	// The configurations of the scheduling cycle and timeout period of the instance.
	CycleAndTime []*ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinishedCycleAndTime `json:"CycleAndTime,omitempty" xml:"CycleAndTime,omitempty" type:"Repeated"`
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinished) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinished) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinished) SetCycleAndTime(v []*ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinishedCycleAndTime) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinished {
	s.CycleAndTime = v
	return s
}

type ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinishedCycleAndTime struct {
	// The ID of the scheduling cycle of the instance. Valid values: [1,288].
	//
	// example:
	//
	// 1
	CycleId *int32 `json:"CycleId,omitempty" xml:"CycleId,omitempty"`
	// The latest completion time of the instance within the scheduling cycle. The time is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].
	//
	// example:
	//
	// 01:00
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinishedCycleAndTime) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinishedCycleAndTime) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinishedCycleAndTime) SetCycleId(v int32) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinishedCycleAndTime {
	s.CycleId = &v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinishedCycleAndTime) SetTime(v string) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionCycleUnfinishedCycleAndTime {
	s.Time = &v
	return s
}

type ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionError struct {
	// Indicates whether an alert is triggered if a batch synchronization task is automatically rerun upon a failure.
	//
	// example:
	//
	// false
	AutoRerunAlertEnabled *bool `json:"AutoRerunAlertEnabled,omitempty" xml:"AutoRerunAlertEnabled,omitempty"`
	// The IDs of the real-time computing tasks. This parameter is required when you monitor real-time computing tasks.
	StreamTaskIds []*int64 `json:"StreamTaskIds,omitempty" xml:"StreamTaskIds,omitempty" type:"Repeated"`
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionError) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionError) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionError) SetAutoRerunAlertEnabled(v bool) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionError {
	s.AutoRerunAlertEnabled = &v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionError) SetStreamTaskIds(v []*int64) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionError {
	s.StreamTaskIds = v
	return s
}

type ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorCount struct {
	// The maximum number of instances on which an error occurs. Valid values: [1,10000].
	//
	// example:
	//
	// 10
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorCount) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorCount) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorCount) SetCount(v int32) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorCount {
	s.Count = &v
	return s
}

type ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorPercentage struct {
	// The maximum percentage of instances on which an error occurs in the workspace to the total number of instances. Valid values: [1-100].
	//
	// example:
	//
	// 10
	Percentage *int32 `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorPercentage) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorPercentage) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorPercentage) SetPercentage(v int32) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceErrorPercentage {
	s.Percentage = &v
	return s
}

type ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceTransferFluctuate struct {
	// The maximum percentage of fluctuation in the number of auto triggered node instances that are generated in your workspace. Valid values: [1-100].
	//
	// example:
	//
	// 10
	Percentage *int32 `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	// The way in which the number of auto triggered node instances that are generated in your workspace fluctuates. Valid values:
	//
	// 	- abs: the absolute value. The number of instances increases or decreases.
	//
	// 	- increase: The number of instances increases.
	//
	// 	- decrease: The number of instances decreases.
	//
	// example:
	//
	// abs
	Trend *string `json:"Trend,omitempty" xml:"Trend,omitempty"`
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceTransferFluctuate) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceTransferFluctuate) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceTransferFluctuate) SetPercentage(v int32) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceTransferFluctuate {
	s.Percentage = &v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceTransferFluctuate) SetTrend(v string) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionInstanceTransferFluctuate {
	s.Trend = &v
	return s
}

type ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionTimeout struct {
	// The timeout period. Unit: minutes.
	//
	// example:
	//
	// 10
	TimeoutInMinutes *int32 `json:"TimeoutInMinutes,omitempty" xml:"TimeoutInMinutes,omitempty"`
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionTimeout) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionTimeout) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionTimeout) SetTimeoutInMinutes(v int32) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionTimeout {
	s.TimeoutInMinutes = &v
	return s
}

type ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionUnFinished struct {
	// The latest completion time of the instance. The period is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].
	//
	// example:
	//
	// 12:00
	UnFinishedTime *string `json:"UnFinishedTime,omitempty" xml:"UnFinishedTime,omitempty"`
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionUnFinished) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionUnFinished) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionUnFinished) SetUnFinishedTime(v string) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionExtensionUnFinished {
	s.UnFinishedTime = &v
	return s
}

type ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionTarget struct {
	// The nodes that are not to be monitored.
	AllowTasks []*int64 `json:"AllowTasks,omitempty" xml:"AllowTasks,omitempty" type:"Repeated"`
	// The IDs of monitored objects.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// The type of the monitored objects. Valid values:
	//
	// 	- Task: node
	//
	// 	- Baseline: baseline
	//
	// 	- Project: workspace
	//
	// 	- BizProcess: workflow
	//
	// example:
	//
	// Task
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionTarget) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionTarget) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionTarget) SetAllowTasks(v []*int64) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionTarget {
	s.AllowTasks = v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionTarget) SetIds(v []*int64) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionTarget {
	s.Ids = v
	return s
}

func (s *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionTarget) SetType(v string) *ListAlertRulesResponseBodyPagingInfoAlertRulesTriggerConditionTarget {
	s.Type = &v
	return s
}

type ListAlertRulesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAlertRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAlertRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAlertRulesResponse) GoString() string {
	return s.String()
}

func (s *ListAlertRulesResponse) SetHeaders(v map[string]*string) *ListAlertRulesResponse {
	s.Headers = v
	return s
}

func (s *ListAlertRulesResponse) SetStatusCode(v int32) *ListAlertRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAlertRulesResponse) SetBody(v *ListAlertRulesResponseBody) *ListAlertRulesResponse {
	s.Body = v
	return s
}

type ListBusinessRequest struct {
	// example:
	//
	// my
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s ListBusinessRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBusinessRequest) GoString() string {
	return s.String()
}

func (s *ListBusinessRequest) SetKeyword(v string) *ListBusinessRequest {
	s.Keyword = &v
	return s
}

func (s *ListBusinessRequest) SetPageNumber(v int32) *ListBusinessRequest {
	s.PageNumber = &v
	return s
}

func (s *ListBusinessRequest) SetPageSize(v int32) *ListBusinessRequest {
	s.PageSize = &v
	return s
}

func (s *ListBusinessRequest) SetProjectId(v int64) *ListBusinessRequest {
	s.ProjectId = &v
	return s
}

func (s *ListBusinessRequest) SetProjectIdentifier(v string) *ListBusinessRequest {
	s.ProjectIdentifier = &v
	return s
}

type ListBusinessResponseBody struct {
	Data *ListBusinessResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListBusinessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBusinessResponseBody) GoString() string {
	return s.String()
}

func (s *ListBusinessResponseBody) SetData(v *ListBusinessResponseBodyData) *ListBusinessResponseBody {
	s.Data = v
	return s
}

func (s *ListBusinessResponseBody) SetErrorCode(v string) *ListBusinessResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListBusinessResponseBody) SetErrorMessage(v string) *ListBusinessResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListBusinessResponseBody) SetHttpStatusCode(v int32) *ListBusinessResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListBusinessResponseBody) SetRequestId(v string) *ListBusinessResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListBusinessResponseBody) SetSuccess(v bool) *ListBusinessResponseBody {
	s.Success = &v
	return s
}

type ListBusinessResponseBodyData struct {
	Business []*ListBusinessResponseBodyDataBusiness `json:"Business,omitempty" xml:"Business,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 13
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListBusinessResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListBusinessResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListBusinessResponseBodyData) SetBusiness(v []*ListBusinessResponseBodyDataBusiness) *ListBusinessResponseBodyData {
	s.Business = v
	return s
}

func (s *ListBusinessResponseBodyData) SetPageNumber(v int32) *ListBusinessResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListBusinessResponseBodyData) SetPageSize(v int32) *ListBusinessResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListBusinessResponseBodyData) SetTotalCount(v int32) *ListBusinessResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListBusinessResponseBodyDataBusiness struct {
	// example:
	//
	// 3000001
	BusinessId   *int64  `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	BusinessName *string `json:"BusinessName,omitempty" xml:"BusinessName,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 34824327****
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// NORMAL
	UseType *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s ListBusinessResponseBodyDataBusiness) String() string {
	return tea.Prettify(s)
}

func (s ListBusinessResponseBodyDataBusiness) GoString() string {
	return s.String()
}

func (s *ListBusinessResponseBodyDataBusiness) SetBusinessId(v int64) *ListBusinessResponseBodyDataBusiness {
	s.BusinessId = &v
	return s
}

func (s *ListBusinessResponseBodyDataBusiness) SetBusinessName(v string) *ListBusinessResponseBodyDataBusiness {
	s.BusinessName = &v
	return s
}

func (s *ListBusinessResponseBodyDataBusiness) SetDescription(v string) *ListBusinessResponseBodyDataBusiness {
	s.Description = &v
	return s
}

func (s *ListBusinessResponseBodyDataBusiness) SetOwner(v string) *ListBusinessResponseBodyDataBusiness {
	s.Owner = &v
	return s
}

func (s *ListBusinessResponseBodyDataBusiness) SetProjectId(v int64) *ListBusinessResponseBodyDataBusiness {
	s.ProjectId = &v
	return s
}

func (s *ListBusinessResponseBodyDataBusiness) SetUseType(v string) *ListBusinessResponseBodyDataBusiness {
	s.UseType = &v
	return s
}

type ListBusinessResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListBusinessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListBusinessResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBusinessResponse) GoString() string {
	return s.String()
}

func (s *ListBusinessResponse) SetHeaders(v map[string]*string) *ListBusinessResponse {
	s.Headers = v
	return s
}

func (s *ListBusinessResponse) SetStatusCode(v int32) *ListBusinessResponse {
	s.StatusCode = &v
	return s
}

func (s *ListBusinessResponse) SetBody(v *ListBusinessResponseBody) *ListBusinessResponse {
	s.Body = v
	return s
}

type ListCatalogsRequest struct {
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// abc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// dlf
	//
	// starrocks:c-abc123xxx
	ParentMetaEntityId *string `json:"ParentMetaEntityId,omitempty" xml:"ParentMetaEntityId,omitempty"`
	// example:
	//
	// CreateTime
	SortBy *string   `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	Types  []*string `json:"Types,omitempty" xml:"Types,omitempty" type:"Repeated"`
}

func (s ListCatalogsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCatalogsRequest) GoString() string {
	return s.String()
}

func (s *ListCatalogsRequest) SetComment(v string) *ListCatalogsRequest {
	s.Comment = &v
	return s
}

func (s *ListCatalogsRequest) SetName(v string) *ListCatalogsRequest {
	s.Name = &v
	return s
}

func (s *ListCatalogsRequest) SetOrder(v string) *ListCatalogsRequest {
	s.Order = &v
	return s
}

func (s *ListCatalogsRequest) SetPageNumber(v int32) *ListCatalogsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCatalogsRequest) SetPageSize(v int32) *ListCatalogsRequest {
	s.PageSize = &v
	return s
}

func (s *ListCatalogsRequest) SetParentMetaEntityId(v string) *ListCatalogsRequest {
	s.ParentMetaEntityId = &v
	return s
}

func (s *ListCatalogsRequest) SetSortBy(v string) *ListCatalogsRequest {
	s.SortBy = &v
	return s
}

func (s *ListCatalogsRequest) SetTypes(v []*string) *ListCatalogsRequest {
	s.Types = v
	return s
}

type ListCatalogsShrinkRequest struct {
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// abc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// dlf
	//
	// starrocks:c-abc123xxx
	ParentMetaEntityId *string `json:"ParentMetaEntityId,omitempty" xml:"ParentMetaEntityId,omitempty"`
	// example:
	//
	// CreateTime
	SortBy      *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	TypesShrink *string `json:"Types,omitempty" xml:"Types,omitempty"`
}

func (s ListCatalogsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCatalogsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListCatalogsShrinkRequest) SetComment(v string) *ListCatalogsShrinkRequest {
	s.Comment = &v
	return s
}

func (s *ListCatalogsShrinkRequest) SetName(v string) *ListCatalogsShrinkRequest {
	s.Name = &v
	return s
}

func (s *ListCatalogsShrinkRequest) SetOrder(v string) *ListCatalogsShrinkRequest {
	s.Order = &v
	return s
}

func (s *ListCatalogsShrinkRequest) SetPageNumber(v int32) *ListCatalogsShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCatalogsShrinkRequest) SetPageSize(v int32) *ListCatalogsShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListCatalogsShrinkRequest) SetParentMetaEntityId(v string) *ListCatalogsShrinkRequest {
	s.ParentMetaEntityId = &v
	return s
}

func (s *ListCatalogsShrinkRequest) SetSortBy(v string) *ListCatalogsShrinkRequest {
	s.SortBy = &v
	return s
}

func (s *ListCatalogsShrinkRequest) SetTypesShrink(v string) *ListCatalogsShrinkRequest {
	s.TypesShrink = &v
	return s
}

type ListCatalogsResponseBody struct {
	PagingInfo *ListCatalogsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// example:
	//
	// 317CD7D0-AB36-XXXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListCatalogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCatalogsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCatalogsResponseBody) SetPagingInfo(v *ListCatalogsResponseBodyPagingInfo) *ListCatalogsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListCatalogsResponseBody) SetRequestId(v string) *ListCatalogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCatalogsResponseBody) SetSuccess(v bool) *ListCatalogsResponseBody {
	s.Success = &v
	return s
}

type ListCatalogsResponseBodyPagingInfo struct {
	Catalogs []*Catalog `json:"Catalogs,omitempty" xml:"Catalogs,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCatalogsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListCatalogsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListCatalogsResponseBodyPagingInfo) SetCatalogs(v []*Catalog) *ListCatalogsResponseBodyPagingInfo {
	s.Catalogs = v
	return s
}

func (s *ListCatalogsResponseBodyPagingInfo) SetPageNumber(v int32) *ListCatalogsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListCatalogsResponseBodyPagingInfo) SetPageSize(v int32) *ListCatalogsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListCatalogsResponseBodyPagingInfo) SetTotalCount(v int64) *ListCatalogsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListCatalogsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCatalogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCatalogsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCatalogsResponse) GoString() string {
	return s.String()
}

func (s *ListCatalogsResponse) SetHeaders(v map[string]*string) *ListCatalogsResponse {
	s.Headers = v
	return s
}

func (s *ListCatalogsResponse) SetStatusCode(v int32) *ListCatalogsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCatalogsResponse) SetBody(v *ListCatalogsResponseBody) *ListCatalogsResponse {
	s.Body = v
	return s
}

type ListCertificatesRequest struct {
	// The ID of the user who created the certificate files.
	//
	// example:
	//
	// 1107550004253538
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The time when the certificate file was created. You can call this operation to query the files that are created before the time. Unit: milliseconds.
	//
	// example:
	//
	// 1593877765000
	EndCreateTime *int64 `json:"EndCreateTime,omitempty" xml:"EndCreateTime,omitempty"`
	// The name of the certificate file. Fuzzy match by file name is supported.
	//
	// example:
	//
	// xm_create_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The order in which you want to sort the certificate files. Valid values: Desc: descending order ASC: ascending order Default value: Asc
	//
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the workspace to which the certificate file belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The field used to sort the certificate files. Valid values: CreateTime Id Name Default value: Id
	//
	// example:
	//
	// Id
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The time when the certificate file was created. You can call this operation to query the files that are created after the time. Unit: milliseconds.
	//
	// example:
	//
	// 1730217600000
	StartCreateTime *int64 `json:"StartCreateTime,omitempty" xml:"StartCreateTime,omitempty"`
}

func (s ListCertificatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCertificatesRequest) GoString() string {
	return s.String()
}

func (s *ListCertificatesRequest) SetCreateUser(v string) *ListCertificatesRequest {
	s.CreateUser = &v
	return s
}

func (s *ListCertificatesRequest) SetEndCreateTime(v int64) *ListCertificatesRequest {
	s.EndCreateTime = &v
	return s
}

func (s *ListCertificatesRequest) SetName(v string) *ListCertificatesRequest {
	s.Name = &v
	return s
}

func (s *ListCertificatesRequest) SetOrder(v string) *ListCertificatesRequest {
	s.Order = &v
	return s
}

func (s *ListCertificatesRequest) SetPageNumber(v int32) *ListCertificatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCertificatesRequest) SetPageSize(v int32) *ListCertificatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListCertificatesRequest) SetProjectId(v int64) *ListCertificatesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListCertificatesRequest) SetSortBy(v string) *ListCertificatesRequest {
	s.SortBy = &v
	return s
}

func (s *ListCertificatesRequest) SetStartCreateTime(v int64) *ListCertificatesRequest {
	s.StartCreateTime = &v
	return s
}

type ListCertificatesResponseBody struct {
	// The pagination information.
	PagingInfo *ListCertificatesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// ecb967ec-c137-48****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCertificatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCertificatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCertificatesResponseBody) SetPagingInfo(v *ListCertificatesResponseBodyPagingInfo) *ListCertificatesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListCertificatesResponseBody) SetRequestId(v string) *ListCertificatesResponseBody {
	s.RequestId = &v
	return s
}

type ListCertificatesResponseBodyPagingInfo struct {
	// The certificate files.
	Certificates []*ListCertificatesResponseBodyPagingInfoCertificates `json:"Certificates,omitempty" xml:"Certificates,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCertificatesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListCertificatesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListCertificatesResponseBodyPagingInfo) SetCertificates(v []*ListCertificatesResponseBodyPagingInfoCertificates) *ListCertificatesResponseBodyPagingInfo {
	s.Certificates = v
	return s
}

func (s *ListCertificatesResponseBodyPagingInfo) SetPageNumber(v int32) *ListCertificatesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListCertificatesResponseBodyPagingInfo) SetPageSize(v int32) *ListCertificatesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListCertificatesResponseBodyPagingInfo) SetTotalCount(v int32) *ListCertificatesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListCertificatesResponseBodyPagingInfoCertificates struct {
	// The time when the certificate file was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1730217600000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the user who created the certificate file.
	//
	// example:
	//
	// 1107550004253538
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The description.
	//
	// example:
	//
	// This is a file
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The size of the certificate file, in bytes.
	//
	// example:
	//
	// 1024
	FileSizeInBytes *int64 `json:"FileSizeInBytes,omitempty" xml:"FileSizeInBytes,omitempty"`
	// The ID of the certificate file.
	//
	// example:
	//
	// 676303114031776
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the certificate file.
	//
	// example:
	//
	// ca1.crt
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListCertificatesResponseBodyPagingInfoCertificates) String() string {
	return tea.Prettify(s)
}

func (s ListCertificatesResponseBodyPagingInfoCertificates) GoString() string {
	return s.String()
}

func (s *ListCertificatesResponseBodyPagingInfoCertificates) SetCreateTime(v int64) *ListCertificatesResponseBodyPagingInfoCertificates {
	s.CreateTime = &v
	return s
}

func (s *ListCertificatesResponseBodyPagingInfoCertificates) SetCreateUser(v string) *ListCertificatesResponseBodyPagingInfoCertificates {
	s.CreateUser = &v
	return s
}

func (s *ListCertificatesResponseBodyPagingInfoCertificates) SetDescription(v string) *ListCertificatesResponseBodyPagingInfoCertificates {
	s.Description = &v
	return s
}

func (s *ListCertificatesResponseBodyPagingInfoCertificates) SetFileSizeInBytes(v int64) *ListCertificatesResponseBodyPagingInfoCertificates {
	s.FileSizeInBytes = &v
	return s
}

func (s *ListCertificatesResponseBodyPagingInfoCertificates) SetId(v int64) *ListCertificatesResponseBodyPagingInfoCertificates {
	s.Id = &v
	return s
}

func (s *ListCertificatesResponseBodyPagingInfoCertificates) SetName(v string) *ListCertificatesResponseBodyPagingInfoCertificates {
	s.Name = &v
	return s
}

type ListCertificatesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCertificatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCertificatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCertificatesResponse) GoString() string {
	return s.String()
}

func (s *ListCertificatesResponse) SetHeaders(v map[string]*string) *ListCertificatesResponse {
	s.Headers = v
	return s
}

func (s *ListCertificatesResponse) SetStatusCode(v int32) *ListCertificatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCertificatesResponse) SetBody(v *ListCertificatesResponseBody) *ListCertificatesResponse {
	s.Body = v
	return s
}

type ListColumnsRequest struct {
	// example:
	//
	// test comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// test_table
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// Position
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-column:11075xxxx::test_project:test_schema:test_table
	TableId *string `json:"TableId,omitempty" xml:"TableId,omitempty"`
}

func (s ListColumnsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListColumnsRequest) GoString() string {
	return s.String()
}

func (s *ListColumnsRequest) SetComment(v string) *ListColumnsRequest {
	s.Comment = &v
	return s
}

func (s *ListColumnsRequest) SetName(v string) *ListColumnsRequest {
	s.Name = &v
	return s
}

func (s *ListColumnsRequest) SetOrder(v string) *ListColumnsRequest {
	s.Order = &v
	return s
}

func (s *ListColumnsRequest) SetPageNumber(v int32) *ListColumnsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListColumnsRequest) SetPageSize(v int32) *ListColumnsRequest {
	s.PageSize = &v
	return s
}

func (s *ListColumnsRequest) SetSortBy(v string) *ListColumnsRequest {
	s.SortBy = &v
	return s
}

func (s *ListColumnsRequest) SetTableId(v string) *ListColumnsRequest {
	s.TableId = &v
	return s
}

type ListColumnsResponseBody struct {
	PagingInfo *ListColumnsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// example:
	//
	// D1E2E5BC-xxxx-xxxx-xxxx-xxxxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListColumnsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListColumnsResponseBody) GoString() string {
	return s.String()
}

func (s *ListColumnsResponseBody) SetPagingInfo(v *ListColumnsResponseBodyPagingInfo) *ListColumnsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListColumnsResponseBody) SetRequestId(v string) *ListColumnsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListColumnsResponseBody) SetSuccess(v bool) *ListColumnsResponseBody {
	s.Success = &v
	return s
}

type ListColumnsResponseBodyPagingInfo struct {
	Columns []*Column `json:"Columns,omitempty" xml:"Columns,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListColumnsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListColumnsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListColumnsResponseBodyPagingInfo) SetColumns(v []*Column) *ListColumnsResponseBodyPagingInfo {
	s.Columns = v
	return s
}

func (s *ListColumnsResponseBodyPagingInfo) SetPageNumber(v int32) *ListColumnsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListColumnsResponseBodyPagingInfo) SetPageSize(v int32) *ListColumnsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListColumnsResponseBodyPagingInfo) SetTotalCount(v int64) *ListColumnsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListColumnsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListColumnsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListColumnsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListColumnsResponse) GoString() string {
	return s.String()
}

func (s *ListColumnsResponse) SetHeaders(v map[string]*string) *ListColumnsResponse {
	s.Headers = v
	return s
}

func (s *ListColumnsResponse) SetStatusCode(v int32) *ListColumnsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListColumnsResponse) SetBody(v *ListColumnsResponseBody) *ListColumnsResponse {
	s.Body = v
	return s
}

type ListCrawlerTypesResponseBody struct {
	CrawlerTypes []*CrawlerType `json:"CrawlerTypes,omitempty" xml:"CrawlerTypes,omitempty" type:"Repeated"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListCrawlerTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCrawlerTypesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCrawlerTypesResponseBody) SetCrawlerTypes(v []*CrawlerType) *ListCrawlerTypesResponseBody {
	s.CrawlerTypes = v
	return s
}

func (s *ListCrawlerTypesResponseBody) SetRequestId(v string) *ListCrawlerTypesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCrawlerTypesResponseBody) SetSuccess(v bool) *ListCrawlerTypesResponseBody {
	s.Success = &v
	return s
}

type ListCrawlerTypesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCrawlerTypesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCrawlerTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCrawlerTypesResponse) GoString() string {
	return s.String()
}

func (s *ListCrawlerTypesResponse) SetHeaders(v map[string]*string) *ListCrawlerTypesResponse {
	s.Headers = v
	return s
}

func (s *ListCrawlerTypesResponse) SetStatusCode(v int32) *ListCrawlerTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCrawlerTypesResponse) SetBody(v *ListCrawlerTypesResponseBody) *ListCrawlerTypesResponse {
	s.Body = v
	return s
}

type ListDIAlarmRulesRequest struct {
	// The ID of the alert rule. If you leave this parameter empty, all alert rules of the task are queried.
	//
	// example:
	//
	// 34988
	DIAlarmRuleId *int64 `json:"DIAlarmRuleId,omitempty" xml:"DIAlarmRuleId,omitempty"`
	// The ID of the task for which alert rules are configured.
	//
	// example:
	//
	// 1000001
	JobId *int64 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListDIAlarmRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDIAlarmRulesRequest) GoString() string {
	return s.String()
}

func (s *ListDIAlarmRulesRequest) SetDIAlarmRuleId(v int64) *ListDIAlarmRulesRequest {
	s.DIAlarmRuleId = &v
	return s
}

func (s *ListDIAlarmRulesRequest) SetJobId(v int64) *ListDIAlarmRulesRequest {
	s.JobId = &v
	return s
}

func (s *ListDIAlarmRulesRequest) SetPageNumber(v int32) *ListDIAlarmRulesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDIAlarmRulesRequest) SetPageSize(v int32) *ListDIAlarmRulesRequest {
	s.PageSize = &v
	return s
}

type ListDIAlarmRulesResponseBody struct {
	// The pagination information.
	PagingInfo *ListDIAlarmRulesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 74C2FECD-5B3A-554A-BCF5-351A36DE9815
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDIAlarmRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDIAlarmRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDIAlarmRulesResponseBody) SetPagingInfo(v *ListDIAlarmRulesResponseBodyPagingInfo) *ListDIAlarmRulesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDIAlarmRulesResponseBody) SetRequestId(v string) *ListDIAlarmRulesResponseBody {
	s.RequestId = &v
	return s
}

type ListDIAlarmRulesResponseBodyPagingInfo struct {
	// The alert rules.
	DIJobAlarmRules []*ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules `json:"DIJobAlarmRules,omitempty" xml:"DIJobAlarmRules,omitempty" type:"Repeated"`
	// The page number. Pages start from page 1.
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 90
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDIAlarmRulesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDIAlarmRulesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDIAlarmRulesResponseBodyPagingInfo) SetDIJobAlarmRules(v []*ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules) *ListDIAlarmRulesResponseBodyPagingInfo {
	s.DIJobAlarmRules = v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfo) SetPageNumber(v int64) *ListDIAlarmRulesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfo) SetPageSize(v int64) *ListDIAlarmRulesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfo) SetTotalCount(v int64) *ListDIAlarmRulesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules struct {
	// Deprecated
	//
	// This parameter is deprecated. Use the Id parameter instead.
	//
	// example:
	//
	// 72402
	DIAlarmRuleId *int64 `json:"DIAlarmRuleId,omitempty" xml:"DIAlarmRuleId,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 32594
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The description of the alert rule.
	//
	// example:
	//
	// rule descrition
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Indicates whether the alert rule is enabled. Valid values: True and False.
	//
	// example:
	//
	// True
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// 72402
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The metric type in the alert rule. Valid values:
	//
	// 	- Heartbeat
	//
	// 	- FailoverCount
	//
	// 	- Delay
	//
	// 	- DdlReport
	//
	// 	- ResourceUtilization
	//
	// example:
	//
	// Heartbeat
	MetricType *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// rule_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The alert notification method and recipient settings.
	NotificationSettings *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettings `json:"NotificationSettings,omitempty" xml:"NotificationSettings,omitempty" type:"Struct"`
	// The conditions that are used to trigger the alert rule.
	TriggerConditions []*ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions `json:"TriggerConditions,omitempty" xml:"TriggerConditions,omitempty" type:"Repeated"`
}

func (s ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules) String() string {
	return tea.Prettify(s)
}

func (s ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules) GoString() string {
	return s.String()
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules) SetDIAlarmRuleId(v int64) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules {
	s.DIAlarmRuleId = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules) SetDIJobId(v int64) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules {
	s.DIJobId = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules) SetDescription(v string) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules {
	s.Description = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules) SetEnabled(v bool) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules {
	s.Enabled = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules) SetId(v int64) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules {
	s.Id = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules) SetMetricType(v string) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules {
	s.MetricType = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules) SetName(v string) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules {
	s.Name = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules) SetNotificationSettings(v *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettings) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules {
	s.NotificationSettings = v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules) SetTriggerConditions(v []*ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRules {
	s.TriggerConditions = v
	return s
}

type ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettings struct {
	// Deprecated
	//
	// This parameter is deprecated and replaced by the MuteInterval parameter.
	//
	// example:
	//
	// 5
	InhibitionInterval *int64 `json:"InhibitionInterval,omitempty" xml:"InhibitionInterval,omitempty"`
	// The duration of the alert suppression interval. Unit: minutes.
	//
	// example:
	//
	// 5
	MuteInterval *int64 `json:"MuteInterval,omitempty" xml:"MuteInterval,omitempty"`
	// The alert notification methods.
	NotificationChannels []*ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationChannels `json:"NotificationChannels,omitempty" xml:"NotificationChannels,omitempty" type:"Repeated"`
	// The settings of alert notification recipients.
	NotificationReceivers []*ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationReceivers `json:"NotificationReceivers,omitempty" xml:"NotificationReceivers,omitempty" type:"Repeated"`
}

func (s ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettings) String() string {
	return tea.Prettify(s)
}

func (s ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettings) GoString() string {
	return s.String()
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettings) SetInhibitionInterval(v int64) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettings {
	s.InhibitionInterval = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettings) SetMuteInterval(v int64) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettings {
	s.MuteInterval = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettings) SetNotificationChannels(v []*ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationChannels) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettings {
	s.NotificationChannels = v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettings) SetNotificationReceivers(v []*ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationReceivers) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettings {
	s.NotificationReceivers = v
	return s
}

type ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationChannels struct {
	// The alert notification methods.
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
	// The severity level. Valid values:
	//
	// 	- Warning
	//
	// 	- Critical
	//
	// example:
	//
	// Critical
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
}

func (s ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationChannels) String() string {
	return tea.Prettify(s)
}

func (s ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationChannels) GoString() string {
	return s.String()
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationChannels) SetChannels(v []*string) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationChannels {
	s.Channels = v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationChannels) SetSeverity(v string) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationChannels {
	s.Severity = &v
	return s
}

type ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationReceivers struct {
	// The recipient type. Valid values: AliyunUid, DingToken, FeishuToken, and WebHookUrl.
	//
	// example:
	//
	// DingToken
	ReceiverType *string `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	// The recipient.
	//
	// 	- If the value of the ReceiverType parameter is AliyunUid, the value of this parameter is the Alibaba Cloud account ID of a user.
	//
	// 	- If the value of the ReceiverType parameter is DingToken, the value of this parameter is the token of a DingTalk chatbot.
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationReceivers) String() string {
	return tea.Prettify(s)
}

func (s ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationReceivers) GoString() string {
	return s.String()
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationReceivers) SetReceiverType(v string) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationReceivers) SetReceiverValues(v []*string) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesNotificationSettingsNotificationReceivers {
	s.ReceiverValues = v
	return s
}

type ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions struct {
	// Deprecated
	//
	// This parameter is deprecated and replaced by the DdlTypes parameter.
	DdlReportTags []*string `json:"DdlReportTags,omitempty" xml:"DdlReportTags,omitempty" type:"Repeated"`
	// The types of DDL operations for which the alert rule takes effect. This parameter is returned only if the MetricType parameter is set to DdlReport.
	DdlTypes []*string `json:"DdlTypes,omitempty" xml:"DdlTypes,omitempty" type:"Repeated"`
	// The time interval for alert calculation. Unit: minutes.
	//
	// example:
	//
	// 1
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The severity level. Valid values:
	//
	// 	- Warning
	//
	// 	- Critical
	//
	// example:
	//
	// Critical
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The alert threshold.
	//
	// 	- If the alert rule is for task status, no threshold is used.
	//
	// 	- If the alert rule is for failovers, the threshold is the number of failovers.
	//
	// 	- If the alert rule is for latency, the threshold is the latency duration, in seconds.
	//
	// example:
	//
	// 5
	Threshold *int64 `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
}

func (s ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions) String() string {
	return tea.Prettify(s)
}

func (s ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions) GoString() string {
	return s.String()
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions) SetDdlReportTags(v []*string) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions {
	s.DdlReportTags = v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions) SetDdlTypes(v []*string) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions {
	s.DdlTypes = v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions) SetDuration(v int64) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions {
	s.Duration = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions) SetSeverity(v string) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions {
	s.Severity = &v
	return s
}

func (s *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions) SetThreshold(v int64) *ListDIAlarmRulesResponseBodyPagingInfoDIJobAlarmRulesTriggerConditions {
	s.Threshold = &v
	return s
}

type ListDIAlarmRulesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDIAlarmRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDIAlarmRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDIAlarmRulesResponse) GoString() string {
	return s.String()
}

func (s *ListDIAlarmRulesResponse) SetHeaders(v map[string]*string) *ListDIAlarmRulesResponse {
	s.Headers = v
	return s
}

func (s *ListDIAlarmRulesResponse) SetStatusCode(v int32) *ListDIAlarmRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDIAlarmRulesResponse) SetBody(v *ListDIAlarmRulesResponseBody) *ListDIAlarmRulesResponse {
	s.Body = v
	return s
}

type ListDIJobEventsRequest struct {
	// The ID of the synchronization task.
	//
	// example:
	//
	// 11588
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The end of the time range to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1717971005
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The type of event that you want to query. Valid values: Failover, Alarm, and DDL.
	//
	// This parameter is required.
	//
	// example:
	//
	// Alarm
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1716971005
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListDIJobEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobEventsRequest) GoString() string {
	return s.String()
}

func (s *ListDIJobEventsRequest) SetDIJobId(v int64) *ListDIJobEventsRequest {
	s.DIJobId = &v
	return s
}

func (s *ListDIJobEventsRequest) SetEndTime(v int64) *ListDIJobEventsRequest {
	s.EndTime = &v
	return s
}

func (s *ListDIJobEventsRequest) SetEventType(v string) *ListDIJobEventsRequest {
	s.EventType = &v
	return s
}

func (s *ListDIJobEventsRequest) SetPageNumber(v int64) *ListDIJobEventsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDIJobEventsRequest) SetPageSize(v int64) *ListDIJobEventsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDIJobEventsRequest) SetStartTime(v int64) *ListDIJobEventsRequest {
	s.StartTime = &v
	return s
}

type ListDIJobEventsResponseBody struct {
	// The pagination information.
	PagingInfo *ListDIJobEventsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// 645F6D68-9C29-5961-80B1-BDD4B794C22D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDIJobEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobEventsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDIJobEventsResponseBody) SetPagingInfo(v *ListDIJobEventsResponseBodyPagingInfo) *ListDIJobEventsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDIJobEventsResponseBody) SetRequestId(v string) *ListDIJobEventsResponseBody {
	s.RequestId = &v
	return s
}

type ListDIJobEventsResponseBodyPagingInfo struct {
	// The events returned. The value of this parameter is an array.
	DIJobEvent []*ListDIJobEventsResponseBodyPagingInfoDIJobEvent `json:"DIJobEvent,omitempty" xml:"DIJobEvent,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2524
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDIJobEventsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobEventsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDIJobEventsResponseBodyPagingInfo) SetDIJobEvent(v []*ListDIJobEventsResponseBodyPagingInfoDIJobEvent) *ListDIJobEventsResponseBodyPagingInfo {
	s.DIJobEvent = v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfo) SetPageNumber(v int64) *ListDIJobEventsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfo) SetPageSize(v int64) *ListDIJobEventsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfo) SetTotalCount(v int64) *ListDIJobEventsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDIJobEventsResponseBodyPagingInfoDIJobEvent struct {
	// The processing result of the DDL event. Valid values: Critical, Ignore, Normal, and Warning.
	//
	// example:
	//
	// Ignore
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// The alert notification method. Valid values: Phone, Mail, Sms, Ding, and Webhook.
	//
	// example:
	//
	// Phone
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// The time when the event was created.
	//
	// example:
	//
	// 1663573162
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The alert details.
	//
	// example:
	//
	// aggregator:avg [**] for 5 minutes, service maybe abnormal
	Detail *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
	// The DDL statement of the destination table.
	//
	// example:
	//
	// alter table table2 ***
	DstSql *string `json:"DstSql,omitempty" xml:"DstSql,omitempty"`
	// The name of the destination table.
	//
	// example:
	//
	// table2
	DstTable *string `json:"DstTable,omitempty" xml:"DstTable,omitempty"`
	// The error logs for failovers.
	//
	// example:
	//
	// 2024-05-29 15:11:31,377 [main] INFO com.*.**.di.core.metrics.:21 []  {****}
	//
	// 2024-05-29 15:11:31,384 [main] INFO *.aliyun.*.di.*.*.metrics.*:27 [] - Open MarioDiReporter
	//
	// 2024-05-29 15:11:33,248 [flink-akka.*.*-dispatcher-17] INFO
	FailoverMessage *string `json:"FailoverMessage,omitempty" xml:"FailoverMessage,omitempty"`
	// The event ID.
	//
	// example:
	//
	// 1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The severity level of the alert. Valid values: Warning and Critical.
	//
	// example:
	//
	// Warning
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The DDL statement of the source table.
	//
	// example:
	//
	// alter table table1 ***
	SrcSql *string `json:"SrcSql,omitempty" xml:"SrcSql,omitempty"`
	// The name of the source table.
	//
	// example:
	//
	// table1
	SrcTable *string `json:"SrcTable,omitempty" xml:"SrcTable,omitempty"`
	// The sending status of an alert notification. Valid values: Success, Fail, and Silence.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the alert event.
	//
	// 	- Heartbeat
	//
	// 	- Delay
	//
	// 	- FailoverCount
	//
	// 	- DdlReport
	//
	// 	- ResourceUtilization
	//
	// example:
	//
	// Delay
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDIJobEventsResponseBodyPagingInfoDIJobEvent) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobEventsResponseBodyPagingInfoDIJobEvent) GoString() string {
	return s.String()
}

func (s *ListDIJobEventsResponseBodyPagingInfoDIJobEvent) SetAction(v string) *ListDIJobEventsResponseBodyPagingInfoDIJobEvent {
	s.Action = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfoDIJobEvent) SetChannels(v string) *ListDIJobEventsResponseBodyPagingInfoDIJobEvent {
	s.Channels = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfoDIJobEvent) SetCreateTime(v string) *ListDIJobEventsResponseBodyPagingInfoDIJobEvent {
	s.CreateTime = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfoDIJobEvent) SetDetail(v string) *ListDIJobEventsResponseBodyPagingInfoDIJobEvent {
	s.Detail = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfoDIJobEvent) SetDstSql(v string) *ListDIJobEventsResponseBodyPagingInfoDIJobEvent {
	s.DstSql = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfoDIJobEvent) SetDstTable(v string) *ListDIJobEventsResponseBodyPagingInfoDIJobEvent {
	s.DstTable = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfoDIJobEvent) SetFailoverMessage(v string) *ListDIJobEventsResponseBodyPagingInfoDIJobEvent {
	s.FailoverMessage = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfoDIJobEvent) SetId(v string) *ListDIJobEventsResponseBodyPagingInfoDIJobEvent {
	s.Id = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfoDIJobEvent) SetSeverity(v string) *ListDIJobEventsResponseBodyPagingInfoDIJobEvent {
	s.Severity = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfoDIJobEvent) SetSrcSql(v string) *ListDIJobEventsResponseBodyPagingInfoDIJobEvent {
	s.SrcSql = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfoDIJobEvent) SetSrcTable(v string) *ListDIJobEventsResponseBodyPagingInfoDIJobEvent {
	s.SrcTable = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfoDIJobEvent) SetStatus(v string) *ListDIJobEventsResponseBodyPagingInfoDIJobEvent {
	s.Status = &v
	return s
}

func (s *ListDIJobEventsResponseBodyPagingInfoDIJobEvent) SetType(v string) *ListDIJobEventsResponseBodyPagingInfoDIJobEvent {
	s.Type = &v
	return s
}

type ListDIJobEventsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDIJobEventsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDIJobEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobEventsResponse) GoString() string {
	return s.String()
}

func (s *ListDIJobEventsResponse) SetHeaders(v map[string]*string) *ListDIJobEventsResponse {
	s.Headers = v
	return s
}

func (s *ListDIJobEventsResponse) SetStatusCode(v int32) *ListDIJobEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDIJobEventsResponse) SetBody(v *ListDIJobEventsResponseBody) *ListDIJobEventsResponse {
	s.Body = v
	return s
}

type ListDIJobMetricsRequest struct {
	// The ID of the synchronization task.
	//
	// example:
	//
	// 11265
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The end of the time range to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1712205941
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The metrics that you want to query.
	//
	// This parameter is required.
	MetricName []*string `json:"MetricName,omitempty" xml:"MetricName,omitempty" type:"Repeated"`
	// The beginning of the time range to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1586509407
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListDIJobMetricsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobMetricsRequest) GoString() string {
	return s.String()
}

func (s *ListDIJobMetricsRequest) SetDIJobId(v int64) *ListDIJobMetricsRequest {
	s.DIJobId = &v
	return s
}

func (s *ListDIJobMetricsRequest) SetEndTime(v int64) *ListDIJobMetricsRequest {
	s.EndTime = &v
	return s
}

func (s *ListDIJobMetricsRequest) SetMetricName(v []*string) *ListDIJobMetricsRequest {
	s.MetricName = v
	return s
}

func (s *ListDIJobMetricsRequest) SetStartTime(v int64) *ListDIJobMetricsRequest {
	s.StartTime = &v
	return s
}

type ListDIJobMetricsShrinkRequest struct {
	// The ID of the synchronization task.
	//
	// example:
	//
	// 11265
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The end of the time range to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1712205941
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The metrics that you want to query.
	//
	// This parameter is required.
	MetricNameShrink *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The beginning of the time range to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1586509407
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListDIJobMetricsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobMetricsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListDIJobMetricsShrinkRequest) SetDIJobId(v int64) *ListDIJobMetricsShrinkRequest {
	s.DIJobId = &v
	return s
}

func (s *ListDIJobMetricsShrinkRequest) SetEndTime(v int64) *ListDIJobMetricsShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *ListDIJobMetricsShrinkRequest) SetMetricNameShrink(v string) *ListDIJobMetricsShrinkRequest {
	s.MetricNameShrink = &v
	return s
}

func (s *ListDIJobMetricsShrinkRequest) SetStartTime(v int64) *ListDIJobMetricsShrinkRequest {
	s.StartTime = &v
	return s
}

type ListDIJobMetricsResponseBody struct {
	// The pagination information.
	PagingInfo *ListDIJobMetricsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDIJobMetricsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobMetricsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDIJobMetricsResponseBody) SetPagingInfo(v *ListDIJobMetricsResponseBodyPagingInfo) *ListDIJobMetricsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDIJobMetricsResponseBody) SetRequestId(v string) *ListDIJobMetricsResponseBody {
	s.RequestId = &v
	return s
}

type ListDIJobMetricsResponseBodyPagingInfo struct {
	// The metrics returned.
	JobMetrics []*ListDIJobMetricsResponseBodyPagingInfoJobMetrics `json:"JobMetrics,omitempty" xml:"JobMetrics,omitempty" type:"Repeated"`
}

func (s ListDIJobMetricsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobMetricsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDIJobMetricsResponseBodyPagingInfo) SetJobMetrics(v []*ListDIJobMetricsResponseBodyPagingInfoJobMetrics) *ListDIJobMetricsResponseBodyPagingInfo {
	s.JobMetrics = v
	return s
}

type ListDIJobMetricsResponseBodyPagingInfoJobMetrics struct {
	// The name of the metric.
	//
	// example:
	//
	// JobDelay
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The metric data.
	SeriesList []*ListDIJobMetricsResponseBodyPagingInfoJobMetricsSeriesList `json:"SeriesList,omitempty" xml:"SeriesList,omitempty" type:"Repeated"`
}

func (s ListDIJobMetricsResponseBodyPagingInfoJobMetrics) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobMetricsResponseBodyPagingInfoJobMetrics) GoString() string {
	return s.String()
}

func (s *ListDIJobMetricsResponseBodyPagingInfoJobMetrics) SetName(v string) *ListDIJobMetricsResponseBodyPagingInfoJobMetrics {
	s.Name = &v
	return s
}

func (s *ListDIJobMetricsResponseBodyPagingInfoJobMetrics) SetSeriesList(v []*ListDIJobMetricsResponseBodyPagingInfoJobMetricsSeriesList) *ListDIJobMetricsResponseBodyPagingInfoJobMetrics {
	s.SeriesList = v
	return s
}

type ListDIJobMetricsResponseBodyPagingInfoJobMetricsSeriesList struct {
	// The point in time at which data is sampled based on the metric.
	//
	// example:
	//
	// 1716881141
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
	// The sample value.
	//
	// example:
	//
	// 10
	Value *float64 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListDIJobMetricsResponseBodyPagingInfoJobMetricsSeriesList) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobMetricsResponseBodyPagingInfoJobMetricsSeriesList) GoString() string {
	return s.String()
}

func (s *ListDIJobMetricsResponseBodyPagingInfoJobMetricsSeriesList) SetTime(v int64) *ListDIJobMetricsResponseBodyPagingInfoJobMetricsSeriesList {
	s.Time = &v
	return s
}

func (s *ListDIJobMetricsResponseBodyPagingInfoJobMetricsSeriesList) SetValue(v float64) *ListDIJobMetricsResponseBodyPagingInfoJobMetricsSeriesList {
	s.Value = &v
	return s
}

type ListDIJobMetricsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDIJobMetricsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDIJobMetricsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobMetricsResponse) GoString() string {
	return s.String()
}

func (s *ListDIJobMetricsResponse) SetHeaders(v map[string]*string) *ListDIJobMetricsResponse {
	s.Headers = v
	return s
}

func (s *ListDIJobMetricsResponse) SetStatusCode(v int32) *ListDIJobMetricsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDIJobMetricsResponse) SetBody(v *ListDIJobMetricsResponseBody) *ListDIJobMetricsResponse {
	s.Body = v
	return s
}

type ListDIJobRunDetailsRequest struct {
	// The ID of the synchronization task.
	//
	// This parameter is required.
	//
	// example:
	//
	// 11265
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// 1234
	InstanceId *int64 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The name of the source.
	//
	// example:
	//
	// ds_name
	SourceDataSourceName *string `json:"SourceDataSourceName,omitempty" xml:"SourceDataSourceName,omitempty"`
	// The name of the database in the source.
	//
	// example:
	//
	// db_name
	SourceDatabaseName *string `json:"SourceDatabaseName,omitempty" xml:"SourceDatabaseName,omitempty"`
	// The name of the schema of the source.
	//
	// example:
	//
	// schema_name
	SourceSchemaName *string `json:"SourceSchemaName,omitempty" xml:"SourceSchemaName,omitempty"`
	// The name of the table in the source.
	//
	// example:
	//
	// table_name
	SourceTableName *string `json:"SourceTableName,omitempty" xml:"SourceTableName,omitempty"`
}

func (s ListDIJobRunDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobRunDetailsRequest) GoString() string {
	return s.String()
}

func (s *ListDIJobRunDetailsRequest) SetDIJobId(v int64) *ListDIJobRunDetailsRequest {
	s.DIJobId = &v
	return s
}

func (s *ListDIJobRunDetailsRequest) SetInstanceId(v int64) *ListDIJobRunDetailsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDIJobRunDetailsRequest) SetPageNumber(v int64) *ListDIJobRunDetailsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDIJobRunDetailsRequest) SetPageSize(v int64) *ListDIJobRunDetailsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDIJobRunDetailsRequest) SetSourceDataSourceName(v string) *ListDIJobRunDetailsRequest {
	s.SourceDataSourceName = &v
	return s
}

func (s *ListDIJobRunDetailsRequest) SetSourceDatabaseName(v string) *ListDIJobRunDetailsRequest {
	s.SourceDatabaseName = &v
	return s
}

func (s *ListDIJobRunDetailsRequest) SetSourceSchemaName(v string) *ListDIJobRunDetailsRequest {
	s.SourceSchemaName = &v
	return s
}

func (s *ListDIJobRunDetailsRequest) SetSourceTableName(v string) *ListDIJobRunDetailsRequest {
	s.SourceTableName = &v
	return s
}

type ListDIJobRunDetailsResponseBody struct {
	// The pagination information.
	PagingInfo *ListDIJobRunDetailsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDIJobRunDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobRunDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDIJobRunDetailsResponseBody) SetPagingInfo(v *ListDIJobRunDetailsResponseBodyPagingInfo) *ListDIJobRunDetailsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDIJobRunDetailsResponseBody) SetRequestId(v string) *ListDIJobRunDetailsResponseBody {
	s.RequestId = &v
	return s
}

type ListDIJobRunDetailsResponseBodyPagingInfo struct {
	// The running information about the synchronization task.
	JobRunInfos []*ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos `json:"JobRunInfos,omitempty" xml:"JobRunInfos,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 131
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDIJobRunDetailsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobRunDetailsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfo) SetJobRunInfos(v []*ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) *ListDIJobRunDetailsResponseBodyPagingInfo {
	s.JobRunInfos = v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfo) SetPageNumber(v string) *ListDIJobRunDetailsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfo) SetPageSize(v string) *ListDIJobRunDetailsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfo) SetTotalCount(v string) *ListDIJobRunDetailsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos struct {
	// The name of the database in the destination.
	//
	// example:
	//
	// dst_db
	DestinationDatabaseName *string `json:"DestinationDatabaseName,omitempty" xml:"DestinationDatabaseName,omitempty"`
	// The name of the destination.
	//
	// example:
	//
	// dst_name
	DestinationDatasourceName *string `json:"DestinationDatasourceName,omitempty" xml:"DestinationDatasourceName,omitempty"`
	// The name of the schema of the destination.
	//
	// example:
	//
	// dst_schema
	DestinationSchemaName *string `json:"DestinationSchemaName,omitempty" xml:"DestinationSchemaName,omitempty"`
	// The name of the table in the destination.
	//
	// example:
	//
	// dst_name
	DestinationTableName *string `json:"DestinationTableName,omitempty" xml:"DestinationTableName,omitempty"`
	// The error message that is returned if an error occurs during full batch synchronization. If no error occurs, no value is returned for this parameter.
	//
	// example:
	//
	// sync table t1 fail.
	FullMigrationErrorMessage *string `json:"FullMigrationErrorMessage,omitempty" xml:"FullMigrationErrorMessage,omitempty"`
	// The status of full batch synchronization.
	//
	// example:
	//
	// Finished
	FullMigrationStatus *string `json:"FullMigrationStatus,omitempty" xml:"FullMigrationStatus,omitempty"`
	// The total number of errors that occur during full synchronization.
	//
	// example:
	//
	// 0
	OfflineErrorRecords *int64 `json:"OfflineErrorRecords,omitempty" xml:"OfflineErrorRecords,omitempty"`
	// The total number of bytes that are synchronized during full synchronization.
	//
	// example:
	//
	// 100
	OfflineTotalBytes *int64 `json:"OfflineTotalBytes,omitempty" xml:"OfflineTotalBytes,omitempty"`
	// The total number of data records that are synchronized during full synchronization.
	//
	// example:
	//
	// 10
	OfflineTotalRecords *int64 `json:"OfflineTotalRecords,omitempty" xml:"OfflineTotalRecords,omitempty"`
	// The error message that is returned if an error occurs during real-time synchronization. If no error occurs, no value is returned for this parameter.
	//
	// example:
	//
	// sync table t1 fail.
	RealtimeMigrationErrorMessage *string `json:"RealtimeMigrationErrorMessage,omitempty" xml:"RealtimeMigrationErrorMessage,omitempty"`
	// The status of real-time synchronization.
	//
	// example:
	//
	// Running
	RealtimeMigrationStatus *string `json:"RealtimeMigrationStatus,omitempty" xml:"RealtimeMigrationStatus,omitempty"`
	// The name of the database in the source.
	//
	// example:
	//
	// db_name
	SourceDatabaseName *string `json:"SourceDatabaseName,omitempty" xml:"SourceDatabaseName,omitempty"`
	// The name of the source.
	//
	// example:
	//
	// ds_name
	SourceDatasourceName *string `json:"SourceDatasourceName,omitempty" xml:"SourceDatasourceName,omitempty"`
	// The name of the schema of the source.
	//
	// example:
	//
	// schema_name
	SourceSchemaName *string `json:"SourceSchemaName,omitempty" xml:"SourceSchemaName,omitempty"`
	// The name of the table in the source.
	//
	// example:
	//
	// table_name
	SourceTableName *string `json:"SourceTableName,omitempty" xml:"SourceTableName,omitempty"`
	// The error message that is returned if an error occurs during schema synchronization. If no error occurs, no value is returned for this parameter.
	//
	// example:
	//
	// create table t1 fail.
	StructureMigrationErrorMessage *string `json:"StructureMigrationErrorMessage,omitempty" xml:"StructureMigrationErrorMessage,omitempty"`
	// The synchronization status of the schema.
	//
	// example:
	//
	// Finished
	StructureMigrationStatus *string `json:"StructureMigrationStatus,omitempty" xml:"StructureMigrationStatus,omitempty"`
}

func (s ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) GoString() string {
	return s.String()
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetDestinationDatabaseName(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.DestinationDatabaseName = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetDestinationDatasourceName(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.DestinationDatasourceName = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetDestinationSchemaName(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.DestinationSchemaName = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetDestinationTableName(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.DestinationTableName = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetFullMigrationErrorMessage(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.FullMigrationErrorMessage = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetFullMigrationStatus(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.FullMigrationStatus = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetOfflineErrorRecords(v int64) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.OfflineErrorRecords = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetOfflineTotalBytes(v int64) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.OfflineTotalBytes = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetOfflineTotalRecords(v int64) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.OfflineTotalRecords = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetRealtimeMigrationErrorMessage(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.RealtimeMigrationErrorMessage = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetRealtimeMigrationStatus(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.RealtimeMigrationStatus = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetSourceDatabaseName(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.SourceDatabaseName = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetSourceDatasourceName(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.SourceDatasourceName = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetSourceSchemaName(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.SourceSchemaName = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetSourceTableName(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.SourceTableName = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetStructureMigrationErrorMessage(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.StructureMigrationErrorMessage = &v
	return s
}

func (s *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos) SetStructureMigrationStatus(v string) *ListDIJobRunDetailsResponseBodyPagingInfoJobRunInfos {
	s.StructureMigrationStatus = &v
	return s
}

type ListDIJobRunDetailsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDIJobRunDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDIJobRunDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobRunDetailsResponse) GoString() string {
	return s.String()
}

func (s *ListDIJobRunDetailsResponse) SetHeaders(v map[string]*string) *ListDIJobRunDetailsResponse {
	s.Headers = v
	return s
}

func (s *ListDIJobRunDetailsResponse) SetStatusCode(v int32) *ListDIJobRunDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDIJobRunDetailsResponse) SetBody(v *ListDIJobRunDetailsResponseBody) *ListDIJobRunDetailsResponse {
	s.Body = v
	return s
}

type ListDIJobsRequest struct {
	// The destination type. Valid values: Hologres, OSS-HDFS, OSS, MaxCompute, Loghub, STARROCKS, Datahub, ANALYTICDB_FOR_MYSQL, Kafka, and Hive. If you do not configure this parameter, the API operation queries synchronization tasks that use all type of destinations.
	//
	// example:
	//
	// Hologres
	DestinationDataSourceType *string `json:"DestinationDataSourceType,omitempty" xml:"DestinationDataSourceType,omitempty"`
	// The synchronization type. Valid values:
	//
	// 	- FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
	//
	// 	- RealtimeIncremental: real-time incremental synchronization
	//
	// 	- Full: full synchronization
	//
	// 	- OfflineIncremental: batch incremental synchronization
	//
	// 	- FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization
	//
	// example:
	//
	// FullAndRealtimeIncremental
	MigrationType *string `json:"MigrationType,omitempty" xml:"MigrationType,omitempty"`
	// The name of the export task.
	//
	// The name of each export task must be unique. You must make sure that the names of the export tasks in the current workspace are unique.
	//
	// example:
	//
	// test_export_01
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1967
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The source type. Valid values: PolarDB, MySQL, Kafka, Loghub, Hologres, Oracle, OceanBase, MongoDB, RedShift, Hive, SqlServer, Doris, and ClickHouse. If you do not configure this parameter, the API operation queries synchronization tasks that use all types of sources.
	//
	// example:
	//
	// MySQL
	SourceDataSourceType *string `json:"SourceDataSourceType,omitempty" xml:"SourceDataSourceType,omitempty"`
}

func (s ListDIJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobsRequest) GoString() string {
	return s.String()
}

func (s *ListDIJobsRequest) SetDestinationDataSourceType(v string) *ListDIJobsRequest {
	s.DestinationDataSourceType = &v
	return s
}

func (s *ListDIJobsRequest) SetMigrationType(v string) *ListDIJobsRequest {
	s.MigrationType = &v
	return s
}

func (s *ListDIJobsRequest) SetName(v string) *ListDIJobsRequest {
	s.Name = &v
	return s
}

func (s *ListDIJobsRequest) SetPageNumber(v int64) *ListDIJobsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDIJobsRequest) SetPageSize(v int64) *ListDIJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDIJobsRequest) SetProjectId(v int64) *ListDIJobsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDIJobsRequest) SetSourceDataSourceType(v string) *ListDIJobsRequest {
	s.SourceDataSourceType = &v
	return s
}

type ListDIJobsResponseBody struct {
	// The pagination information.
	PagingInfo *ListDIJobsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 7263E4AC-9D2E-5B29-B8AF-7C5012E92A41
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDIJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDIJobsResponseBody) SetPagingInfo(v *ListDIJobsResponseBodyPagingInfo) *ListDIJobsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDIJobsResponseBody) SetRequestId(v string) *ListDIJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListDIJobsResponseBodyPagingInfo struct {
	// The synchronization tasks returned.
	DIJobs []*ListDIJobsResponseBodyPagingInfoDIJobs `json:"DIJobs,omitempty" xml:"DIJobs,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 12
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDIJobsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDIJobsResponseBodyPagingInfo) SetDIJobs(v []*ListDIJobsResponseBodyPagingInfoDIJobs) *ListDIJobsResponseBodyPagingInfo {
	s.DIJobs = v
	return s
}

func (s *ListDIJobsResponseBodyPagingInfo) SetPageNumber(v int64) *ListDIJobsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDIJobsResponseBodyPagingInfo) SetPageSize(v int64) *ListDIJobsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDIJobsResponseBodyPagingInfo) SetTotalCount(v int64) *ListDIJobsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDIJobsResponseBodyPagingInfoDIJobs struct {
	// Deprecated
	//
	// This parameter is deprecated. Use the Id parameter instead.
	//
	// example:
	//
	// 32599
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The destination type. Valid values: Hologres, OSS-HDFS, OSS, MaxCompute, Loghub, STARROCKS, DataHub, ANALYTICDB_FOR_MYSQL, Kafka, and Hive.
	//
	// example:
	//
	// Hologres
	DestinationDataSourceType *string `json:"DestinationDataSourceType,omitempty" xml:"DestinationDataSourceType,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 32599
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the synchronization task.
	//
	// example:
	//
	// mysql_to_holo_sync_35197
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The status of the synchronization task. Valid values:
	//
	// 	- Finished
	//
	// 	- Initialized
	//
	// 	- Stopped
	//
	// 	- Failed
	//
	// 	- Running
	//
	// 	- Stopping
	//
	// example:
	//
	// Running
	JobStatus *string `json:"JobStatus,omitempty" xml:"JobStatus,omitempty"`
	// The synchronization type. Valid values:
	//
	// 	- FullAndRealtimeIncremental: one-time full synchronization and real-time incremental synchronization
	//
	// 	- RealtimeIncremental: real-time incremental synchronization
	//
	// 	- Full: full synchronization
	//
	// 	- OfflineIncremental: batch incremental synchronization
	//
	// 	- FullAndOfflineIncremental: one-time full synchronization and batch incremental synchronization
	//
	// example:
	//
	// FullAndRealtimeIncremental
	MigrationType *string `json:"MigrationType,omitempty" xml:"MigrationType,omitempty"`
	// The ID of the DataWorks workspace to which the synchronization task belongs.
	//
	// example:
	//
	// 26442
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The source type. Valid values: PolarDB, MySQL, Kafka, Loghub, Hologres, Oracle, OceanBase, MongoDB, RedShift, Hive, SqlServer, Doris, and ClickHouse. If you do not configure this parameter, the API operation returns synchronization tasks that use all types of sources.
	//
	// example:
	//
	// Mysql
	SourceDataSourceType *string `json:"SourceDataSourceType,omitempty" xml:"SourceDataSourceType,omitempty"`
}

func (s ListDIJobsResponseBodyPagingInfoDIJobs) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobsResponseBodyPagingInfoDIJobs) GoString() string {
	return s.String()
}

func (s *ListDIJobsResponseBodyPagingInfoDIJobs) SetDIJobId(v int64) *ListDIJobsResponseBodyPagingInfoDIJobs {
	s.DIJobId = &v
	return s
}

func (s *ListDIJobsResponseBodyPagingInfoDIJobs) SetDestinationDataSourceType(v string) *ListDIJobsResponseBodyPagingInfoDIJobs {
	s.DestinationDataSourceType = &v
	return s
}

func (s *ListDIJobsResponseBodyPagingInfoDIJobs) SetId(v int64) *ListDIJobsResponseBodyPagingInfoDIJobs {
	s.Id = &v
	return s
}

func (s *ListDIJobsResponseBodyPagingInfoDIJobs) SetJobName(v string) *ListDIJobsResponseBodyPagingInfoDIJobs {
	s.JobName = &v
	return s
}

func (s *ListDIJobsResponseBodyPagingInfoDIJobs) SetJobStatus(v string) *ListDIJobsResponseBodyPagingInfoDIJobs {
	s.JobStatus = &v
	return s
}

func (s *ListDIJobsResponseBodyPagingInfoDIJobs) SetMigrationType(v string) *ListDIJobsResponseBodyPagingInfoDIJobs {
	s.MigrationType = &v
	return s
}

func (s *ListDIJobsResponseBodyPagingInfoDIJobs) SetProjectId(v int64) *ListDIJobsResponseBodyPagingInfoDIJobs {
	s.ProjectId = &v
	return s
}

func (s *ListDIJobsResponseBodyPagingInfoDIJobs) SetSourceDataSourceType(v string) *ListDIJobsResponseBodyPagingInfoDIJobs {
	s.SourceDataSourceType = &v
	return s
}

type ListDIJobsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDIJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDIJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDIJobsResponse) GoString() string {
	return s.String()
}

func (s *ListDIJobsResponse) SetHeaders(v map[string]*string) *ListDIJobsResponse {
	s.Headers = v
	return s
}

func (s *ListDIJobsResponse) SetStatusCode(v int32) *ListDIJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDIJobsResponse) SetBody(v *ListDIJobsResponseBody) *ListDIJobsResponse {
	s.Body = v
	return s
}

type ListDataAssetTagsRequest struct {
	// The type of the tag. Valid values:
	//
	// 	- Normal
	//
	// 	- System
	//
	// example:
	//
	// Normal
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The tag key.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListDataAssetTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataAssetTagsRequest) GoString() string {
	return s.String()
}

func (s *ListDataAssetTagsRequest) SetCategory(v string) *ListDataAssetTagsRequest {
	s.Category = &v
	return s
}

func (s *ListDataAssetTagsRequest) SetKey(v string) *ListDataAssetTagsRequest {
	s.Key = &v
	return s
}

func (s *ListDataAssetTagsRequest) SetPageNumber(v int32) *ListDataAssetTagsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataAssetTagsRequest) SetPageSize(v int32) *ListDataAssetTagsRequest {
	s.PageSize = &v
	return s
}

type ListDataAssetTagsResponseBody struct {
	// The pagination information.
	PagingInfo *ListDataAssetTagsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 0bc1ec92159376****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDataAssetTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataAssetTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataAssetTagsResponseBody) SetPagingInfo(v *ListDataAssetTagsResponseBodyPagingInfo) *ListDataAssetTagsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDataAssetTagsResponseBody) SetRequestId(v string) *ListDataAssetTagsResponseBody {
	s.RequestId = &v
	return s
}

type ListDataAssetTagsResponseBodyPagingInfo struct {
	// The tags.
	DataAssetTags []*ListDataAssetTagsResponseBodyPagingInfoDataAssetTags `json:"DataAssetTags,omitempty" xml:"DataAssetTags,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2524
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataAssetTagsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDataAssetTagsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDataAssetTagsResponseBodyPagingInfo) SetDataAssetTags(v []*ListDataAssetTagsResponseBodyPagingInfoDataAssetTags) *ListDataAssetTagsResponseBodyPagingInfo {
	s.DataAssetTags = v
	return s
}

func (s *ListDataAssetTagsResponseBodyPagingInfo) SetPageNumber(v int32) *ListDataAssetTagsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDataAssetTagsResponseBodyPagingInfo) SetPageSize(v int32) *ListDataAssetTagsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDataAssetTagsResponseBodyPagingInfo) SetTotalCount(v int32) *ListDataAssetTagsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDataAssetTagsResponseBodyPagingInfoDataAssetTags struct {
	// The type of the tag.
	//
	// Valid values:
	//
	// 	- Normal
	//
	// 	- System
	//
	// example:
	//
	// Normal
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The time when the tag was created.
	//
	// example:
	//
	// 1735890003000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The creator of the tag.
	//
	// example:
	//
	// 12345
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The description of the tag.
	//
	// example:
	//
	// This is a description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The tag key.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag administrators.
	Managers []*string `json:"Managers,omitempty" xml:"Managers,omitempty" type:"Repeated"`
	// The time when the tag was last modified.
	//
	// example:
	//
	// 1735890003000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The user who last modified the tag.
	//
	// example:
	//
	// 1234
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The type of the tag value.
	//
	// example:
	//
	// String
	ValueType *string `json:"ValueType,omitempty" xml:"ValueType,omitempty"`
	// The tag values.
	Values []*string `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s ListDataAssetTagsResponseBodyPagingInfoDataAssetTags) String() string {
	return tea.Prettify(s)
}

func (s ListDataAssetTagsResponseBodyPagingInfoDataAssetTags) GoString() string {
	return s.String()
}

func (s *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags) SetCategory(v string) *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags {
	s.Category = &v
	return s
}

func (s *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags) SetCreateTime(v int64) *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags {
	s.CreateTime = &v
	return s
}

func (s *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags) SetCreateUser(v string) *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags {
	s.CreateUser = &v
	return s
}

func (s *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags) SetDescription(v string) *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags {
	s.Description = &v
	return s
}

func (s *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags) SetKey(v string) *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags {
	s.Key = &v
	return s
}

func (s *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags) SetManagers(v []*string) *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags {
	s.Managers = v
	return s
}

func (s *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags) SetModifyTime(v int64) *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags {
	s.ModifyTime = &v
	return s
}

func (s *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags) SetModifyUser(v string) *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags {
	s.ModifyUser = &v
	return s
}

func (s *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags) SetValueType(v string) *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags {
	s.ValueType = &v
	return s
}

func (s *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags) SetValues(v []*string) *ListDataAssetTagsResponseBodyPagingInfoDataAssetTags {
	s.Values = v
	return s
}

type ListDataAssetTagsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDataAssetTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDataAssetTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataAssetTagsResponse) GoString() string {
	return s.String()
}

func (s *ListDataAssetTagsResponse) SetHeaders(v map[string]*string) *ListDataAssetTagsResponse {
	s.Headers = v
	return s
}

func (s *ListDataAssetTagsResponse) SetStatusCode(v int32) *ListDataAssetTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDataAssetTagsResponse) SetBody(v *ListDataAssetTagsResponseBody) *ListDataAssetTagsResponse {
	s.Body = v
	return s
}

type ListDataAssetsRequest struct {
	// The data asset IDs.
	DataAssetIds []*string `json:"DataAssetIds,omitempty" xml:"DataAssetIds,omitempty" type:"Repeated"`
	// The type of the data asset. Valid values:
	//
	// 	- ACS::DataWorks::Table
	//
	// 	- ACS::DataWorks::Task
	//
	// example:
	//
	// ACS::DataWorks::Task
	DataAssetType *string `json:"DataAssetType,omitempty" xml:"DataAssetType,omitempty"`
	// The environment of the workspace to which the data asset belongs. Valid values:
	//
	// 	- Dev: development environment
	//
	// 	- Prod: production environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The tags that are added to data assets. This parameter specifies a filter condition.
	//
	// 	- You can specify multiple tags, which are in the logical OR relation. For example, you can query the data assets that contain one of the following tags: `["key1:v1", "key2:v1", "key3:v1"]`.
	//
	// 	- If you do not configure this parameter, tag-based filtering is not performed.
	//
	// This parameter is required.
	Tags []*ListDataAssetsRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s ListDataAssetsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataAssetsRequest) GoString() string {
	return s.String()
}

func (s *ListDataAssetsRequest) SetDataAssetIds(v []*string) *ListDataAssetsRequest {
	s.DataAssetIds = v
	return s
}

func (s *ListDataAssetsRequest) SetDataAssetType(v string) *ListDataAssetsRequest {
	s.DataAssetType = &v
	return s
}

func (s *ListDataAssetsRequest) SetEnvType(v string) *ListDataAssetsRequest {
	s.EnvType = &v
	return s
}

func (s *ListDataAssetsRequest) SetPageNumber(v int32) *ListDataAssetsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataAssetsRequest) SetPageSize(v int32) *ListDataAssetsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataAssetsRequest) SetProjectId(v int64) *ListDataAssetsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataAssetsRequest) SetTags(v []*ListDataAssetsRequestTags) *ListDataAssetsRequest {
	s.Tags = v
	return s
}

type ListDataAssetsRequestTags struct {
	// The tag key.
	//
	// The tag key can be up to 64 characters in length and can contain letters, digits, and the following characters: `-@#*<>|[]()+=&%$!~`. It cannot start with `dw:`.
	//
	// This parameter is required.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListDataAssetsRequestTags) String() string {
	return tea.Prettify(s)
}

func (s ListDataAssetsRequestTags) GoString() string {
	return s.String()
}

func (s *ListDataAssetsRequestTags) SetKey(v string) *ListDataAssetsRequestTags {
	s.Key = &v
	return s
}

func (s *ListDataAssetsRequestTags) SetValue(v string) *ListDataAssetsRequestTags {
	s.Value = &v
	return s
}

type ListDataAssetsShrinkRequest struct {
	// The data asset IDs.
	DataAssetIdsShrink *string `json:"DataAssetIds,omitempty" xml:"DataAssetIds,omitempty"`
	// The type of the data asset. Valid values:
	//
	// 	- ACS::DataWorks::Table
	//
	// 	- ACS::DataWorks::Task
	//
	// example:
	//
	// ACS::DataWorks::Task
	DataAssetType *string `json:"DataAssetType,omitempty" xml:"DataAssetType,omitempty"`
	// The environment of the workspace to which the data asset belongs. Valid values:
	//
	// 	- Dev: development environment
	//
	// 	- Prod: production environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The tags that are added to data assets. This parameter specifies a filter condition.
	//
	// 	- You can specify multiple tags, which are in the logical OR relation. For example, you can query the data assets that contain one of the following tags: `["key1:v1", "key2:v1", "key3:v1"]`.
	//
	// 	- If you do not configure this parameter, tag-based filtering is not performed.
	//
	// This parameter is required.
	TagsShrink *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s ListDataAssetsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataAssetsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListDataAssetsShrinkRequest) SetDataAssetIdsShrink(v string) *ListDataAssetsShrinkRequest {
	s.DataAssetIdsShrink = &v
	return s
}

func (s *ListDataAssetsShrinkRequest) SetDataAssetType(v string) *ListDataAssetsShrinkRequest {
	s.DataAssetType = &v
	return s
}

func (s *ListDataAssetsShrinkRequest) SetEnvType(v string) *ListDataAssetsShrinkRequest {
	s.EnvType = &v
	return s
}

func (s *ListDataAssetsShrinkRequest) SetPageNumber(v int32) *ListDataAssetsShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataAssetsShrinkRequest) SetPageSize(v int32) *ListDataAssetsShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataAssetsShrinkRequest) SetProjectId(v int64) *ListDataAssetsShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataAssetsShrinkRequest) SetTagsShrink(v string) *ListDataAssetsShrinkRequest {
	s.TagsShrink = &v
	return s
}

type ListDataAssetsResponseBody struct {
	// The pagination information.
	PagingInfo *ListDataAssetsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 0bc1ec92159376
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDataAssetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataAssetsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataAssetsResponseBody) SetPagingInfo(v *ListDataAssetsResponseBodyPagingInfo) *ListDataAssetsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDataAssetsResponseBody) SetRequestId(v string) *ListDataAssetsResponseBody {
	s.RequestId = &v
	return s
}

type ListDataAssetsResponseBodyPagingInfo struct {
	// The data assets.
	DataAssets []*ListDataAssetsResponseBodyPagingInfoDataAssets `json:"DataAssets,omitempty" xml:"DataAssets,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataAssetsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDataAssetsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDataAssetsResponseBodyPagingInfo) SetDataAssets(v []*ListDataAssetsResponseBodyPagingInfoDataAssets) *ListDataAssetsResponseBodyPagingInfo {
	s.DataAssets = v
	return s
}

func (s *ListDataAssetsResponseBodyPagingInfo) SetPageNumber(v int32) *ListDataAssetsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDataAssetsResponseBodyPagingInfo) SetPageSize(v int32) *ListDataAssetsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDataAssetsResponseBodyPagingInfo) SetTotalCount(v int32) *ListDataAssetsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDataAssetsResponseBodyPagingInfoDataAssets struct {
	// The mappings between data assets and tags.
	DataAssetTagMappings []*ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings `json:"DataAssetTagMappings,omitempty" xml:"DataAssetTagMappings,omitempty" type:"Repeated"`
	// The environment of the workspace to which the data asset belongs. Valid values:
	//
	// 	- Dev: development environment
	//
	// 	- Prod: production environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The data asset ID.
	//
	// example:
	//
	// 7259557313
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the data asset.
	//
	// example:
	//
	// ali_cn_es_gfn
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 54275
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The type of the data asset. Valid values:
	//
	// 	- ACS::DataWorks::Table
	//
	// 	- ACS::DataWorks::Task
	//
	// example:
	//
	// ACS::DataWorks::Task
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataAssetsResponseBodyPagingInfoDataAssets) String() string {
	return tea.Prettify(s)
}

func (s ListDataAssetsResponseBodyPagingInfoDataAssets) GoString() string {
	return s.String()
}

func (s *ListDataAssetsResponseBodyPagingInfoDataAssets) SetDataAssetTagMappings(v []*ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings) *ListDataAssetsResponseBodyPagingInfoDataAssets {
	s.DataAssetTagMappings = v
	return s
}

func (s *ListDataAssetsResponseBodyPagingInfoDataAssets) SetEnvType(v string) *ListDataAssetsResponseBodyPagingInfoDataAssets {
	s.EnvType = &v
	return s
}

func (s *ListDataAssetsResponseBodyPagingInfoDataAssets) SetId(v string) *ListDataAssetsResponseBodyPagingInfoDataAssets {
	s.Id = &v
	return s
}

func (s *ListDataAssetsResponseBodyPagingInfoDataAssets) SetName(v string) *ListDataAssetsResponseBodyPagingInfoDataAssets {
	s.Name = &v
	return s
}

func (s *ListDataAssetsResponseBodyPagingInfoDataAssets) SetProjectId(v int64) *ListDataAssetsResponseBodyPagingInfoDataAssets {
	s.ProjectId = &v
	return s
}

func (s *ListDataAssetsResponseBodyPagingInfoDataAssets) SetType(v string) *ListDataAssetsResponseBodyPagingInfoDataAssets {
	s.Type = &v
	return s
}

type ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings struct {
	// Indicates whether the lineage-based automatic backtrack feature is enabled for the mapping.
	//
	// example:
	//
	// false
	AutoTraceEnabled *bool `json:"AutoTraceEnabled,omitempty" xml:"AutoTraceEnabled,omitempty"`
	// The creator of the mapping between the data asset and the tag.
	//
	// example:
	//
	// 12345
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// The data asset ID.
	//
	// example:
	//
	// 7259557313
	DataAssetId *string `json:"DataAssetId,omitempty" xml:"DataAssetId,omitempty"`
	// The tag key.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The way in which the mapping between the data asset and the tag is created. Valid values:
	//
	// 	- System
	//
	// 	- UserDefined
	//
	// example:
	//
	// UserDefined
	TagSource *string `json:"TagSource,omitempty" xml:"TagSource,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings) String() string {
	return tea.Prettify(s)
}

func (s ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings) GoString() string {
	return s.String()
}

func (s *ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings) SetAutoTraceEnabled(v bool) *ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings {
	s.AutoTraceEnabled = &v
	return s
}

func (s *ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings) SetCreator(v string) *ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings {
	s.Creator = &v
	return s
}

func (s *ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings) SetDataAssetId(v string) *ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings {
	s.DataAssetId = &v
	return s
}

func (s *ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings) SetKey(v string) *ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings {
	s.Key = &v
	return s
}

func (s *ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings) SetTagSource(v string) *ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings {
	s.TagSource = &v
	return s
}

func (s *ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings) SetValue(v string) *ListDataAssetsResponseBodyPagingInfoDataAssetsDataAssetTagMappings {
	s.Value = &v
	return s
}

type ListDataAssetsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDataAssetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDataAssetsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataAssetsResponse) GoString() string {
	return s.String()
}

func (s *ListDataAssetsResponse) SetHeaders(v map[string]*string) *ListDataAssetsResponse {
	s.Headers = v
	return s
}

func (s *ListDataAssetsResponse) SetStatusCode(v int32) *ListDataAssetsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDataAssetsResponse) SetBody(v *ListDataAssetsResponseBody) *ListDataAssetsResponse {
	s.Body = v
	return s
}

type ListDataQualityEvaluationTaskInstancesRequest struct {
	// The start time of the data quality monitoring task.
	//
	// example:
	//
	// 2024-04-01
	BizdateFrom *string `json:"BizdateFrom,omitempty" xml:"BizdateFrom,omitempty"`
	// The end time of the data quality monitoring task.
	//
	// example:
	//
	// 2024-05-01
	BizdateTo *string `json:"BizdateTo,omitempty" xml:"BizdateTo,omitempty"`
	// The earliest start time at which the instances are generated.
	//
	// example:
	//
	// 1710239005403
	CreateTimeFrom *int64 `json:"CreateTimeFrom,omitempty" xml:"CreateTimeFrom,omitempty"`
	// The latest start time at which the instances are generated.
	//
	// example:
	//
	// 1710239005403
	CreateTimeTo *int64 `json:"CreateTimeTo,omitempty" xml:"CreateTimeTo,omitempty"`
	// The ID of the data quality monitoring task.
	//
	// example:
	//
	// 10000
	DataQualityEvaluationTaskId *int64 `json:"DataQualityEvaluationTaskId,omitempty" xml:"DataQualityEvaluationTaskId,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The ID of the table in Data Map.
	//
	// example:
	//
	// odps.unit_test.tb_unit_test
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	// The name of the trigger module of the instance.
	//
	// example:
	//
	// CWF2
	TriggerClient *string `json:"TriggerClient,omitempty" xml:"TriggerClient,omitempty"`
	// The ID of the instance that is generated by the task.
	//
	// example:
	//
	// 1001
	TriggerClientId *string `json:"TriggerClientId,omitempty" xml:"TriggerClientId,omitempty"`
}

func (s ListDataQualityEvaluationTaskInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTaskInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTaskInstancesRequest) SetBizdateFrom(v string) *ListDataQualityEvaluationTaskInstancesRequest {
	s.BizdateFrom = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesRequest) SetBizdateTo(v string) *ListDataQualityEvaluationTaskInstancesRequest {
	s.BizdateTo = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesRequest) SetCreateTimeFrom(v int64) *ListDataQualityEvaluationTaskInstancesRequest {
	s.CreateTimeFrom = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesRequest) SetCreateTimeTo(v int64) *ListDataQualityEvaluationTaskInstancesRequest {
	s.CreateTimeTo = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesRequest) SetDataQualityEvaluationTaskId(v int64) *ListDataQualityEvaluationTaskInstancesRequest {
	s.DataQualityEvaluationTaskId = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesRequest) SetPageNumber(v int32) *ListDataQualityEvaluationTaskInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesRequest) SetPageSize(v int32) *ListDataQualityEvaluationTaskInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesRequest) SetProjectId(v int64) *ListDataQualityEvaluationTaskInstancesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesRequest) SetTableGuid(v string) *ListDataQualityEvaluationTaskInstancesRequest {
	s.TableGuid = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesRequest) SetTriggerClient(v string) *ListDataQualityEvaluationTaskInstancesRequest {
	s.TriggerClient = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesRequest) SetTriggerClientId(v string) *ListDataQualityEvaluationTaskInstancesRequest {
	s.TriggerClientId = &v
	return s
}

type ListDataQualityEvaluationTaskInstancesResponseBody struct {
	// The pagination information.
	PagingInfo *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDataQualityEvaluationTaskInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTaskInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBody) SetPagingInfo(v *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfo) *ListDataQualityEvaluationTaskInstancesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBody) SetRequestId(v string) *ListDataQualityEvaluationTaskInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfo struct {
	// The instances generated by the task.
	DataQualityEvaluationTaskInstances []*ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances `json:"DataQualityEvaluationTaskInstances,omitempty" xml:"DataQualityEvaluationTaskInstances,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 294
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfo) SetDataQualityEvaluationTaskInstances(v []*ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfo {
	s.DataQualityEvaluationTaskInstances = v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfo) SetPageNumber(v int32) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfo) SetPageSize(v int32) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfo) SetTotalCount(v int32) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances struct {
	// The time at which the instance was generated.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time at which the instance finished running.
	//
	// example:
	//
	// 1710239005403
	FinishTime *int64 `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// 10001
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The parameters configured for the instance.
	//
	// example:
	//
	// {
	//
	//   "bizdate": "20240517",
	//
	//   "triggerTime": "1710239005403"
	//
	// }
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The status of the instance. Valid values:
	//
	// 	- Running
	//
	// 	- Error
	//
	// 	- Passed
	//
	// 	- Warned
	//
	// 	- Critical
	//
	// example:
	//
	// Critical
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The snapshot of the configurations for the task when the task starts.
	Task *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask `json:"Task,omitempty" xml:"Task,omitempty" type:"Struct"`
	// The information about the trigger module of the instance.
	//
	// example:
	//
	// {
	//
	//   "TriggerClientId": 10001,
	//
	//   "TriggerClient": "CWF2"
	//
	// }
	TriggerContext *string `json:"TriggerContext,omitempty" xml:"TriggerContext,omitempty"`
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances) SetCreateTime(v int64) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances {
	s.CreateTime = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances) SetFinishTime(v int64) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances {
	s.FinishTime = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances) SetId(v int64) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances {
	s.Id = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances) SetParameters(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances {
	s.Parameters = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances) SetProjectId(v int64) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances {
	s.ProjectId = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances) SetStatus(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances {
	s.Status = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances) SetTask(v *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances {
	s.Task = v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances) SetTriggerContext(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstances {
	s.TriggerContext = &v
	return s
}

type ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask struct {
	// The description of the task.
	//
	// example:
	//
	// This is a daily run data quality evaluation plan.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The callback configurations of the task during the instance lifecycle. Blocking an auto triggered node is a type of callback event. Only this type is supported.
	Hooks []*ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskHooks `json:"Hooks,omitempty" xml:"Hooks,omitempty" type:"Repeated"`
	// The task ID.
	//
	// example:
	//
	// 10001
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the monitor.
	//
	// This parameter is required.
	//
	// example:
	//
	// Quality verification task
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configurations for alert notifications.
	Notifications *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Struct"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The configuration of the data source. The value of the queue field is default, and that of the sqlEngine field can be set to SPARK_SQL, KYUUBI, PRESTO_SQL, or HIVE_SQL. The value default indicates the YARN queue for E-MapReduce (EMR) tasks.
	//
	// example:
	//
	// { "queue": "default", "sqlEngine": "SPARK-SQL" }
	RuntimeConf *string `json:"RuntimeConf,omitempty" xml:"RuntimeConf,omitempty"`
	// The monitored object of the task.
	Target *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The trigger configuration of the task.
	Trigger *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask) SetDescription(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask {
	s.Description = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask) SetHooks(v []*ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskHooks) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask {
	s.Hooks = v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask) SetId(v int64) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask {
	s.Id = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask) SetName(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask {
	s.Name = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask) SetNotifications(v *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotifications) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask {
	s.Notifications = v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask) SetProjectId(v int64) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask {
	s.ProjectId = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask) SetRuntimeConf(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask {
	s.RuntimeConf = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask) SetTarget(v *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTarget) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask {
	s.Target = v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask) SetTrigger(v *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTrigger) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTask {
	s.Trigger = v
	return s
}

type ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskHooks struct {
	// The trigger configuration of the callback event.
	//
	// example:
	//
	// ${severity} == "High" AND ${status} == "Critical"
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// The type of the callback event. Valid values:
	//
	// 	- BlockTaskInstance. The value indicates that an auto triggered node is blocked.
	//
	// example:
	//
	// BlockTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskHooks) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskHooks) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskHooks) SetCondition(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskHooks {
	s.Condition = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskHooks) SetType(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskHooks {
	s.Type = &v
	return s
}

type ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotifications struct {
	// The trigger condition of the alert notification.
	//
	// example:
	//
	// ${severity} == "High"
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// The configurations for the alert notification.
	Notifications []*ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Repeated"`
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotifications) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotifications) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotifications) SetCondition(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotifications {
	s.Condition = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotifications) SetNotifications(v []*ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotifications) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotifications {
	s.Notifications = v
	return s
}

type ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotifications struct {
	// The alert recipients.
	NofiticationReceivers []*ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNofiticationReceivers `json:"NofiticationReceivers,omitempty" xml:"NofiticationReceivers,omitempty" type:"Repeated"`
	// The alert notification methods.
	NotificationChannels []*ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNotificationChannels `json:"NotificationChannels,omitempty" xml:"NotificationChannels,omitempty" type:"Repeated"`
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotifications) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotifications) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotifications) SetNofiticationReceivers(v []*ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNofiticationReceivers) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotifications {
	s.NofiticationReceivers = v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotifications) SetNotificationChannels(v []*ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNotificationChannels) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotifications {
	s.NotificationChannels = v
	return s
}

type ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNofiticationReceivers struct {
	// The extended information in the JSON format. For example, the DingTalk chatbot can remind all members in a DingTalk group by using the at sign (@).
	//
	// example:
	//
	// {"atAll":"true"}
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// The type of the alert recipient. Valid values:
	//
	// 	- AliUid: Alibaba Cloud account ID
	//
	// 	- WebhookUrl: URL of a custom webhook
	//
	// 	- DingdingUrl: DingTalk chatbot URL
	//
	// 	- FeishuUrl: Lark chatbot URL
	//
	// 	- WeixinUrl: WeCom chatbot URL
	//
	// example:
	//
	// AliUid
	ReceiverType *string `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	// The alert recipients.
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNofiticationReceivers) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNofiticationReceivers) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNofiticationReceivers) SetExtension(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNofiticationReceivers {
	s.Extension = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNofiticationReceivers) SetReceiverType(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNofiticationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNofiticationReceivers) SetReceiverValues(v []*string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNofiticationReceivers {
	s.ReceiverValues = v
	return s
}

type ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNotificationChannels struct {
	// The alert notification methods.
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNotificationChannels) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNotificationChannels) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNotificationChannels) SetChannels(v []*string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskNotificationsNotificationsNotificationChannels {
	s.Channels = v
	return s
}

type ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTarget struct {
	// The type of the database to which the table belongs. Valid values:
	//
	// 	- maxcompute
	//
	// 	- emr
	//
	// 	- cdh
	//
	// 	- hologres
	//
	// 	- analyticdb_for_postgresql
	//
	// 	- analyticdb_for_mysql
	//
	// 	- starrocks
	//
	// example:
	//
	// maxcompute
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The configuration of the partitioned table.
	//
	// example:
	//
	// ds=$[yyyymmdd-1]
	PartitionSpec *string `json:"PartitionSpec,omitempty" xml:"PartitionSpec,omitempty"`
	// The ID of the table in Data Map.
	//
	// example:
	//
	// odps.unit_test.tb_unit_test
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	// The type of the monitored object. Valid values:
	//
	// 	- Table
	//
	// example:
	//
	// Table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTarget) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTarget) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTarget) SetDatabaseType(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTarget {
	s.DatabaseType = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTarget) SetPartitionSpec(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTarget {
	s.PartitionSpec = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTarget) SetTableGuid(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTarget {
	s.TableGuid = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTarget) SetType(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTarget {
	s.Type = &v
	return s
}

type ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTrigger struct {
	// The IDs of the auto triggered nodes of which the instances are successfully run.
	TaskIds []*int64 `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
	// The trigger condition of the task. Valid values:
	//
	// 	- ByScheduledTaskInstance. The value indicates that the task is triggered when the instance of an auto triggered node is successfully run.
	//
	// example:
	//
	// ByScheduledTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTrigger) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTrigger) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTrigger) SetTaskIds(v []*int64) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTrigger {
	s.TaskIds = v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTrigger) SetType(v string) *ListDataQualityEvaluationTaskInstancesResponseBodyPagingInfoDataQualityEvaluationTaskInstancesTaskTrigger {
	s.Type = &v
	return s
}

type ListDataQualityEvaluationTaskInstancesResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDataQualityEvaluationTaskInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDataQualityEvaluationTaskInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTaskInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTaskInstancesResponse) SetHeaders(v map[string]*string) *ListDataQualityEvaluationTaskInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponse) SetStatusCode(v int32) *ListDataQualityEvaluationTaskInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDataQualityEvaluationTaskInstancesResponse) SetBody(v *ListDataQualityEvaluationTaskInstancesResponseBody) *ListDataQualityEvaluationTaskInstancesResponse {
	s.Body = v
	return s
}

type ListDataQualityEvaluationTasksRequest struct {
	// The name of the data quality monitoring task. Fuzzy match is supported.
	//
	// example:
	//
	// Test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The ID of the table in Data Map.
	//
	// example:
	//
	// odps.unit_test.tb_unit_test
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s ListDataQualityEvaluationTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTasksRequest) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTasksRequest) SetName(v string) *ListDataQualityEvaluationTasksRequest {
	s.Name = &v
	return s
}

func (s *ListDataQualityEvaluationTasksRequest) SetPageNumber(v int32) *ListDataQualityEvaluationTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataQualityEvaluationTasksRequest) SetPageSize(v int32) *ListDataQualityEvaluationTasksRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataQualityEvaluationTasksRequest) SetProjectId(v int64) *ListDataQualityEvaluationTasksRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataQualityEvaluationTasksRequest) SetTableGuid(v string) *ListDataQualityEvaluationTasksRequest {
	s.TableGuid = &v
	return s
}

type ListDataQualityEvaluationTasksResponseBody struct {
	// The pagination information.
	PagingInfo *ListDataQualityEvaluationTasksResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDataQualityEvaluationTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTasksResponseBody) SetPagingInfo(v *ListDataQualityEvaluationTasksResponseBodyPagingInfo) *ListDataQualityEvaluationTasksResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBody) SetRequestId(v string) *ListDataQualityEvaluationTasksResponseBody {
	s.RequestId = &v
	return s
}

type ListDataQualityEvaluationTasksResponseBodyPagingInfo struct {
	// The data quality monitoring tasks.
	DataQualityEvaluationTasks []*ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks `json:"DataQualityEvaluationTasks,omitempty" xml:"DataQualityEvaluationTasks,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 131
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfo) SetDataQualityEvaluationTasks(v []*ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks) *ListDataQualityEvaluationTasksResponseBodyPagingInfo {
	s.DataQualityEvaluationTasks = v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfo) SetPageNumber(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfo) SetPageSize(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfo) SetTotalCount(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks struct {
	DataSourceId *int64 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The description of the data quality monitoring task. The description can be up to 65,535 characters in length.
	//
	// example:
	//
	// This is a daily run data quality evaluation plan
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The callback configurations of the task during the instance lifecycle. Blocking an auto triggered node is a type of callback event. Only this type is supported.
	Hooks []*ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksHooks `json:"Hooks,omitempty" xml:"Hooks,omitempty" type:"Repeated"`
	// The ID of the data quality monitoring task.
	//
	// example:
	//
	// 10001
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the data quality monitoring task. The name can be up to 255 characters in length and can contain digits, letters, and punctuation marks.
	//
	// example:
	//
	// Data quality verification task
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configurations for alert notifications.
	Notifications *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Struct"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The configuration of the data source. The value of the queue field is default, and that of the sqlEngine field can be set to SPARK_SQL, KYUUBI, PRESTO_SQL, or HIVE_SQL. The value default indicates the YARN queue for E-MapReduce (EMR) tasks.
	//
	// example:
	//
	// { "queue": "default", "sqlEngine": "SPARK-SQL" }
	RuntimeConf *string `json:"RuntimeConf,omitempty" xml:"RuntimeConf,omitempty"`
	// The monitored object of the task.
	Target *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The trigger configuration of the task.
	Trigger *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks) SetDataSourceId(v int64) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks {
	s.DataSourceId = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks) SetDescription(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks {
	s.Description = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks) SetHooks(v []*ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksHooks) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks {
	s.Hooks = v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks) SetId(v int64) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks {
	s.Id = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks) SetName(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks {
	s.Name = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks) SetNotifications(v *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotifications) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks {
	s.Notifications = v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks) SetProjectId(v int64) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks {
	s.ProjectId = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks) SetRuntimeConf(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks {
	s.RuntimeConf = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks) SetTarget(v *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTarget) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks {
	s.Target = v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks) SetTrigger(v *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTrigger) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasks {
	s.Trigger = v
	return s
}

type ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksHooks struct {
	// The trigger configuration of the callback event.
	//
	// example:
	//
	// ${severity} == "High" AND ${status} == "Critical"
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// The type of the callback event. Valid values:
	//
	// 	- BlockTaskInstance. The value indicates that an auto triggered node is blocked.
	//
	// example:
	//
	// BlockTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksHooks) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksHooks) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksHooks) SetCondition(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksHooks {
	s.Condition = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksHooks) SetType(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksHooks {
	s.Type = &v
	return s
}

type ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotifications struct {
	// The trigger condition of the alert notification.
	//
	// example:
	//
	// ${severity} == "High"
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// The configurations for the alert notification.
	Notifications []*ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Repeated"`
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotifications) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotifications) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotifications) SetCondition(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotifications {
	s.Condition = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotifications) SetNotifications(v []*ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotifications) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotifications {
	s.Notifications = v
	return s
}

type ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotifications struct {
	// The alert notification methods.
	NotificationChannels []*ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationChannels `json:"NotificationChannels,omitempty" xml:"NotificationChannels,omitempty" type:"Repeated"`
	// The alert recipients.
	NotificationReceivers []*ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationReceivers `json:"NotificationReceivers,omitempty" xml:"NotificationReceivers,omitempty" type:"Repeated"`
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotifications) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotifications) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotifications) SetNotificationChannels(v []*ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationChannels) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotifications {
	s.NotificationChannels = v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotifications) SetNotificationReceivers(v []*ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationReceivers) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotifications {
	s.NotificationReceivers = v
	return s
}

type ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationChannels struct {
	// The alert notification methods.
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationChannels) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationChannels) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationChannels) SetChannels(v []*string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationChannels {
	s.Channels = v
	return s
}

type ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationReceivers struct {
	// The extended information in the JSON format. For example, the DingTalk chatbot can remind all members in a DingTalk group by using the at sign (@).
	//
	// example:
	//
	// {"atAll":"true"}
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// The type of the alert recipient. Valid values:
	//
	// 	- AliUid: Alibaba Cloud account ID
	//
	// 	- WebhookUrl: URL of a custom webhook
	//
	// 	- DingdingUrl: DingTalk chatbot URL
	//
	// 	- FeishuUrl: Lark chatbot URL
	//
	// 	- WeixinUrl: WeCom chatbot URL
	//
	// example:
	//
	// AliUid
	ReceiverType *string `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	// The alert recipients.
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationReceivers) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationReceivers) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationReceivers) SetExtension(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationReceivers {
	s.Extension = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationReceivers) SetReceiverType(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationReceivers) SetReceiverValues(v []*string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksNotificationsNotificationsNotificationReceivers {
	s.ReceiverValues = v
	return s
}

type ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTarget struct {
	// The type of the database to which the table belongs. Valid values:
	//
	// 	- maxcompute
	//
	// 	- emr
	//
	// 	- cdh
	//
	// 	- hologres
	//
	// 	- analyticdb_for_postgresql
	//
	// 	- analyticdb_for_mysql
	//
	// 	- starrocks
	//
	// example:
	//
	// maxcompute
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The configuration of the partitioned table.
	//
	// example:
	//
	// ds=$[yyyymmdd-1]
	PartitionSpec *string `json:"PartitionSpec,omitempty" xml:"PartitionSpec,omitempty"`
	// The ID of the table in Data Map.
	//
	// example:
	//
	// odps.unit_test.tb_unit_test
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	// The type of the monitored object. Valid values:
	//
	// 	- Table
	//
	// example:
	//
	// Table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTarget) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTarget) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTarget) SetDatabaseType(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTarget {
	s.DatabaseType = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTarget) SetPartitionSpec(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTarget {
	s.PartitionSpec = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTarget) SetTableGuid(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTarget {
	s.TableGuid = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTarget) SetType(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTarget {
	s.Type = &v
	return s
}

type ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTrigger struct {
	// The IDs of the auto triggered nodes of which the instances are successfully run. This parameter takes effect only if the Type parameter is set to ByScheduledTaskInstance.
	TaskIds []*int64 `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
	// The trigger condition of the task. Valid values:
	//
	// 	- ByScheduledTaskInstance. The value indicates that the task is triggered when the instance of an auto triggered node is successfully run.
	//
	// example:
	//
	// ByScheduledTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTrigger) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTrigger) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTrigger) SetTaskIds(v []*int64) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTrigger {
	s.TaskIds = v
	return s
}

func (s *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTrigger) SetType(v string) *ListDataQualityEvaluationTasksResponseBodyPagingInfoDataQualityEvaluationTasksTrigger {
	s.Type = &v
	return s
}

type ListDataQualityEvaluationTasksResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDataQualityEvaluationTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDataQualityEvaluationTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityEvaluationTasksResponse) GoString() string {
	return s.String()
}

func (s *ListDataQualityEvaluationTasksResponse) SetHeaders(v map[string]*string) *ListDataQualityEvaluationTasksResponse {
	s.Headers = v
	return s
}

func (s *ListDataQualityEvaluationTasksResponse) SetStatusCode(v int32) *ListDataQualityEvaluationTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDataQualityEvaluationTasksResponse) SetBody(v *ListDataQualityEvaluationTasksResponseBody) *ListDataQualityEvaluationTasksResponse {
	s.Body = v
	return s
}

type ListDataQualityResultsRequest struct {
	// The beginning of the time range to query.
	//
	// example:
	//
	// 2024-05-01
	BizdateFrom *string `json:"BizdateFrom,omitempty" xml:"BizdateFrom,omitempty"`
	// The end of the time range to query.
	//
	// example:
	//
	// 2024-05-04
	BizdateTo *string `json:"BizdateTo,omitempty" xml:"BizdateTo,omitempty"`
	// The earliest time when the data quality check result was generated.
	//
	// example:
	//
	// 1710239005403
	CreateTimeFrom *int64 `json:"CreateTimeFrom,omitempty" xml:"CreateTimeFrom,omitempty"`
	// The latest time when the data quality check result was generated.
	//
	// example:
	//
	// 1710239005403
	CreateTimeTo *int64 `json:"CreateTimeTo,omitempty" xml:"CreateTimeTo,omitempty"`
	// The ID of the data quality monitoring task.
	//
	// example:
	//
	// 200001
	DataQualityEvaluationTaskId *int64 `json:"DataQualityEvaluationTaskId,omitempty" xml:"DataQualityEvaluationTaskId,omitempty"`
	// The ID of the instance generated by the check.
	//
	// example:
	//
	// 10001
	DataQualityEvaluationTaskInstanceId *int64 `json:"DataQualityEvaluationTaskInstanceId,omitempty" xml:"DataQualityEvaluationTaskInstanceId,omitempty"`
	// The ID of the data quality monitoring rule.
	//
	// example:
	//
	// 100001
	DataQualityRuleId *int64 `json:"DataQualityRuleId,omitempty" xml:"DataQualityRuleId,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListDataQualityResultsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsRequest) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsRequest) SetBizdateFrom(v string) *ListDataQualityResultsRequest {
	s.BizdateFrom = &v
	return s
}

func (s *ListDataQualityResultsRequest) SetBizdateTo(v string) *ListDataQualityResultsRequest {
	s.BizdateTo = &v
	return s
}

func (s *ListDataQualityResultsRequest) SetCreateTimeFrom(v int64) *ListDataQualityResultsRequest {
	s.CreateTimeFrom = &v
	return s
}

func (s *ListDataQualityResultsRequest) SetCreateTimeTo(v int64) *ListDataQualityResultsRequest {
	s.CreateTimeTo = &v
	return s
}

func (s *ListDataQualityResultsRequest) SetDataQualityEvaluationTaskId(v int64) *ListDataQualityResultsRequest {
	s.DataQualityEvaluationTaskId = &v
	return s
}

func (s *ListDataQualityResultsRequest) SetDataQualityEvaluationTaskInstanceId(v int64) *ListDataQualityResultsRequest {
	s.DataQualityEvaluationTaskInstanceId = &v
	return s
}

func (s *ListDataQualityResultsRequest) SetDataQualityRuleId(v int64) *ListDataQualityResultsRequest {
	s.DataQualityRuleId = &v
	return s
}

func (s *ListDataQualityResultsRequest) SetPageNumber(v int32) *ListDataQualityResultsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataQualityResultsRequest) SetPageSize(v int32) *ListDataQualityResultsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataQualityResultsRequest) SetProjectId(v int64) *ListDataQualityResultsRequest {
	s.ProjectId = &v
	return s
}

type ListDataQualityResultsResponseBody struct {
	// The pagination information.
	PagingInfo *ListDataQualityResultsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDataQualityResultsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponseBody) SetPagingInfo(v *ListDataQualityResultsResponseBodyPagingInfo) *ListDataQualityResultsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDataQualityResultsResponseBody) SetRequestId(v string) *ListDataQualityResultsResponseBody {
	s.RequestId = &v
	return s
}

type ListDataQualityResultsResponseBodyPagingInfo struct {
	// The data quality check results.
	DataQualityResults []*ListDataQualityResultsResponseBodyPagingInfoDataQualityResults `json:"DataQualityResults,omitempty" xml:"DataQualityResults,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 219
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataQualityResultsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponseBodyPagingInfo) SetDataQualityResults(v []*ListDataQualityResultsResponseBodyPagingInfoDataQualityResults) *ListDataQualityResultsResponseBodyPagingInfo {
	s.DataQualityResults = v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfo) SetPageNumber(v int32) *ListDataQualityResultsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfo) SetPageSize(v int32) *ListDataQualityResultsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfo) SetTotalCount(v int32) *ListDataQualityResultsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDataQualityResultsResponseBodyPagingInfoDataQualityResults struct {
	// The time when the data quality check result was generated.
	//
	// example:
	//
	// 1708284916414
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The information about the data quality check.
	Details []*ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsDetails `json:"Details,omitempty" xml:"Details,omitempty" type:"Repeated"`
	// The ID of the check result.
	//
	// example:
	//
	// 16033
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The snapshot of the rule configuration when the check starts.
	Rule *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule `json:"Rule,omitempty" xml:"Rule,omitempty" type:"Struct"`
	// The sample values used for the check.
	//
	// example:
	//
	// [
	//
	//   {
	//
	//     "gender": "male",
	//
	//     "_count": 100
	//
	//   }, {
	//
	//     "gender": "female",
	//
	//     "_count": 100
	//
	//   }
	//
	// ]
	Sample *string `json:"Sample,omitempty" xml:"Sample,omitempty"`
	// The status of the check result. Valid values:
	//
	// 	- Running
	//
	// 	- Error
	//
	// 	- Passed
	//
	// 	- Warned
	//
	// 	- Critical
	//
	// example:
	//
	// PASSED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the instance generated by the check.
	//
	// example:
	//
	// 200001
	TaskInstanceId *int64 `json:"TaskInstanceId,omitempty" xml:"TaskInstanceId,omitempty"`
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResults) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResults) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults) SetCreateTime(v int64) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults {
	s.CreateTime = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults) SetDetails(v []*ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsDetails) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults {
	s.Details = v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults) SetId(v int64) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults {
	s.Id = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults) SetRule(v *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults {
	s.Rule = v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults) SetSample(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults {
	s.Sample = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults) SetStatus(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults {
	s.Status = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults) SetTaskInstanceId(v int64) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResults {
	s.TaskInstanceId = &v
	return s
}

type ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsDetails struct {
	// The value that is used for comparison with the threshold.
	//
	// example:
	//
	// 100.0
	CheckedValue *string `json:"CheckedValue,omitempty" xml:"CheckedValue,omitempty"`
	// The value that is calculated based on sample data. The value serves as a baseline value during the calculation of the value of the CheckedValue parameter.
	//
	// example:
	//
	// 0.0
	ReferencedValue *string `json:"ReferencedValue,omitempty" xml:"ReferencedValue,omitempty"`
	// The comparison result between the value of CheckedValue and the threshold. Valid values:
	//
	// 	- Error
	//
	// 	- Passed
	//
	// 	- Warned
	//
	// 	- Critical
	//
	// example:
	//
	// PASSED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsDetails) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsDetails) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsDetails) SetCheckedValue(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsDetails {
	s.CheckedValue = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsDetails) SetReferencedValue(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsDetails {
	s.ReferencedValue = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsDetails) SetStatus(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsDetails {
	s.Status = &v
	return s
}

type ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule struct {
	// The check settings for sample data.
	CheckingConfig *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	// The description of the rule. The description can be up to 500 characters in length.
	//
	// example:
	//
	// this is a odps _sql task
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Indicates whether the rule is enabled.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The operations that you can perform after the rule-based check fails.
	ErrorHandlers []*ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleErrorHandlers `json:"ErrorHandlers,omitempty" xml:"ErrorHandlers,omitempty" type:"Repeated"`
	// The rule ID.
	//
	// example:
	//
	// 100001
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the rule. The name can be up to 255 characters in length and can contain digits, letters, and punctuation marks.
	//
	// example:
	//
	// The table cannot be empty.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The sampling settings.
	SamplingConfig *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	// The strength of the rule. Valid values:
	//
	// 	- High
	//
	// 	- Normal
	//
	// example:
	//
	// NORMAL
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The monitored object of the rule.
	Target *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The code of the template that is referenced when you create a rule.
	//
	// example:
	//
	// system::user_defined
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) SetCheckingConfig(v *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfig) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule {
	s.CheckingConfig = v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) SetDescription(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule {
	s.Description = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) SetEnabled(v bool) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule {
	s.Enabled = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) SetErrorHandlers(v []*ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleErrorHandlers) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule {
	s.ErrorHandlers = v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) SetId(v int64) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule {
	s.Id = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) SetName(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule {
	s.Name = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) SetProjectId(v int64) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule {
	s.ProjectId = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) SetSamplingConfig(v *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleSamplingConfig) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule {
	s.SamplingConfig = v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) SetSeverity(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule {
	s.Severity = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) SetTarget(v *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleTarget) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule {
	s.Target = v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule) SetTemplateCode(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRule {
	s.TemplateCode = &v
	return s
}

type ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfig struct {
	// The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference samples and perform aggregate operations on the reference values. In this example, an expression is used to indicate the query method of referenced samples.
	//
	// example:
	//
	// { "bizdate": [ "-1", "-7", "-1m" ] }
	ReferencedSamplesFilter *string `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	// The threshold settings.
	Thresholds *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholds `json:"Thresholds,omitempty" xml:"Thresholds,omitempty" type:"Struct"`
	// The threshold calculation method. Valid values:
	//
	// 	- Fixed
	//
	// 	- Fluctation
	//
	// 	- FluctationDiscreate
	//
	// 	- Auto
	//
	// 	- Average
	//
	// 	- Variance
	//
	// example:
	//
	// FIXED
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfig) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfig) SetReferencedSamplesFilter(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfig) SetThresholds(v *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholds) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfig {
	s.Thresholds = v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfig) SetType(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfig {
	s.Type = &v
	return s
}

type ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholds struct {
	// The threshold settings for critical alerts.
	Critical *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	// The expected threshold setting.
	Expected *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsExpected `json:"Expected,omitempty" xml:"Expected,omitempty" type:"Struct"`
	// The threshold settings for normal alerts.
	Warned *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsWarned `json:"Warned,omitempty" xml:"Warned,omitempty" type:"Struct"`
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholds) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholds) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholds) SetCritical(v *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsCritical) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholds {
	s.Critical = v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholds) SetExpected(v *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsExpected) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholds {
	s.Expected = v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholds) SetWarned(v *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsWarned) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholds {
	s.Warned = v
	return s
}

type ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsCritical struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsCritical) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsCritical) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsCritical) SetExpression(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsCritical {
	s.Expression = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsCritical) SetOperator(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsCritical {
	s.Operator = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsCritical) SetValue(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsCritical {
	s.Value = &v
	return s
}

type ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsExpected struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsExpected) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsExpected) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsExpected) SetExpression(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsExpected {
	s.Expression = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsExpected) SetOperator(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsExpected {
	s.Operator = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsExpected) SetValue(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsExpected {
	s.Value = &v
	return s
}

type ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsWarned struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsWarned) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsWarned) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsWarned) SetExpression(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsWarned {
	s.Expression = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsWarned) SetOperator(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsWarned {
	s.Operator = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsWarned) SetValue(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleCheckingConfigThresholdsWarned {
	s.Value = &v
	return s
}

type ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleErrorHandlers struct {
	// The SQL statement that is used to filter failed tasks. If the rule is defined by custom SQL statements, you must specify an SQL statement to filter failed tasks.
	//
	// example:
	//
	// SELECT 	- FROM tb_api_log WHERE id IS NULL
	ErrorDataFilter *string `json:"ErrorDataFilter,omitempty" xml:"ErrorDataFilter,omitempty"`
	// The type of the operation. Valid values:
	//
	// 	- SaveErrorData
	//
	// example:
	//
	// SAVE_ERROR_DATA
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleErrorHandlers) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleErrorHandlers) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleErrorHandlers) SetErrorDataFilter(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleErrorHandlers {
	s.ErrorDataFilter = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleErrorHandlers) SetType(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleErrorHandlers {
	s.Type = &v
	return s
}

type ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleSamplingConfig struct {
	// The metrics used for sampling. Valid values:
	//
	// 	- Count: the number of rows in the table.
	//
	// 	- Min: the minimum value of the field.
	//
	// 	- Max: the maximum value of the field.
	//
	// 	- Avg: the average value of the field.
	//
	// 	- DistinctCount: the number of unique values of the field after deduplication.
	//
	// 	- DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
	//
	// 	- DuplicatedCount: the number of duplicated values of the field.
	//
	// 	- DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
	//
	// 	- TableSize: the table size.
	//
	// 	- NullValueCount: the number of rows in which the field value is null.
	//
	// 	- NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
	//
	// 	- GroupCount: the field value and the number of rows for each field value.
	//
	// 	- CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
	//
	// 	- CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
	//
	// 	- UserDefinedSql: indicates that data is sampled by executing custom SQL statements.
	//
	// example:
	//
	// COUNT
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The parameters required for sampling.
	//
	// example:
	//
	// { "columns": [ "id", "name" ] }
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.
	//
	// example:
	//
	// id IS NULL
	SamplingFilter *string `json:"SamplingFilter,omitempty" xml:"SamplingFilter,omitempty"`
	// The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.
	//
	// example:
	//
	// SET odps.sql.udf.timeout=600s;
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleSamplingConfig) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleSamplingConfig) SetMetric(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleSamplingConfig {
	s.Metric = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleSamplingConfig) SetMetricParameters(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleSamplingConfig) SetSamplingFilter(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleSamplingConfig {
	s.SamplingFilter = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleSamplingConfig) SetSettingConfig(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleSamplingConfig {
	s.SettingConfig = &v
	return s
}

type ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleTarget struct {
	// The type of the database to which the table belongs. Valid values:
	//
	// 	- maxcompute
	//
	// 	- emr
	//
	// 	- cdh
	//
	// 	- hologres
	//
	// 	- analyticdb_for_postgresql
	//
	// 	- analyticdb_for_mysql
	//
	// 	- starrocks
	//
	// example:
	//
	// MAX_COMPUTE
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The ID of the table in Data Map.
	//
	// example:
	//
	// odps.unit_test.tb_unit_test
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	// The type of the monitored object. Valid values:
	//
	// 	- Table
	//
	// example:
	//
	// TABLE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleTarget) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleTarget) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleTarget) SetDatabaseType(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleTarget {
	s.DatabaseType = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleTarget) SetTableGuid(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleTarget {
	s.TableGuid = &v
	return s
}

func (s *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleTarget) SetType(v string) *ListDataQualityResultsResponseBodyPagingInfoDataQualityResultsRuleTarget {
	s.Type = &v
	return s
}

type ListDataQualityResultsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDataQualityResultsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDataQualityResultsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityResultsResponse) GoString() string {
	return s.String()
}

func (s *ListDataQualityResultsResponse) SetHeaders(v map[string]*string) *ListDataQualityResultsResponse {
	s.Headers = v
	return s
}

func (s *ListDataQualityResultsResponse) SetStatusCode(v int32) *ListDataQualityResultsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDataQualityResultsResponse) SetBody(v *ListDataQualityResultsResponseBody) *ListDataQualityResultsResponse {
	s.Body = v
	return s
}

type ListDataQualityRuleTemplatesRequest struct {
	// The source of the template. This parameter is required. Valid values:
	//
	// 	- System
	//
	// 	- UserDefined
	//
	// example:
	//
	// System
	CreationSource *string `json:"CreationSource,omitempty" xml:"CreationSource,omitempty"`
	// The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).
	//
	// example:
	//
	// /ods/order_data
	DirectoryPath *string `json:"DirectoryPath,omitempty" xml:"DirectoryPath,omitempty"`
	// The name of the template. If you want to query a system template, set this parameter to the name of the system template. Fuzzy match is supported.
	//
	// example:
	//
	// Table rows
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListDataQualityRuleTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRuleTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListDataQualityRuleTemplatesRequest) SetCreationSource(v string) *ListDataQualityRuleTemplatesRequest {
	s.CreationSource = &v
	return s
}

func (s *ListDataQualityRuleTemplatesRequest) SetDirectoryPath(v string) *ListDataQualityRuleTemplatesRequest {
	s.DirectoryPath = &v
	return s
}

func (s *ListDataQualityRuleTemplatesRequest) SetName(v string) *ListDataQualityRuleTemplatesRequest {
	s.Name = &v
	return s
}

func (s *ListDataQualityRuleTemplatesRequest) SetPageNumber(v int32) *ListDataQualityRuleTemplatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataQualityRuleTemplatesRequest) SetPageSize(v int32) *ListDataQualityRuleTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataQualityRuleTemplatesRequest) SetProjectId(v int64) *ListDataQualityRuleTemplatesRequest {
	s.ProjectId = &v
	return s
}

type ListDataQualityRuleTemplatesResponseBody struct {
	// The pagination information.
	PagingInfo *ListDataQualityRuleTemplatesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDataQualityRuleTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRuleTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataQualityRuleTemplatesResponseBody) SetPagingInfo(v *ListDataQualityRuleTemplatesResponseBodyPagingInfo) *ListDataQualityRuleTemplatesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDataQualityRuleTemplatesResponseBody) SetRequestId(v string) *ListDataQualityRuleTemplatesResponseBody {
	s.RequestId = &v
	return s
}

type ListDataQualityRuleTemplatesResponseBodyPagingInfo struct {
	// The templates.
	DataQualityRuleTemplates []*ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates `json:"DataQualityRuleTemplates,omitempty" xml:"DataQualityRuleTemplates,omitempty" type:"Repeated"`
	// Page number
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// Page size
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Total number of entries
	//
	// example:
	//
	// 42
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataQualityRuleTemplatesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRuleTemplatesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfo) SetDataQualityRuleTemplates(v []*ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates) *ListDataQualityRuleTemplatesResponseBodyPagingInfo {
	s.DataQualityRuleTemplates = v
	return s
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfo) SetPageNumber(v int32) *ListDataQualityRuleTemplatesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfo) SetPageSize(v int32) *ListDataQualityRuleTemplatesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfo) SetTotalCount(v int32) *ListDataQualityRuleTemplatesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates struct {
	// Sample verification settings
	CheckingConfig *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	// Rule template Code
	//
	// example:
	//
	// USER_DEFINED:123
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).
	//
	// example:
	//
	// /ods/order_data
	DirectoryPath *string `json:"DirectoryPath,omitempty" xml:"DirectoryPath,omitempty"`
	// The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.
	//
	// example:
	//
	// Table row Count Verification
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// DataWorks workspace ID
	//
	// example:
	//
	// 2043
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Settings required for sample collection
	SamplingConfig *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	// Available range of templates:
	//
	// - Tenant: all tenants are available
	//
	// - Project: only available in the current Project
	//
	// example:
	//
	// Project
	VisibleScope *string `json:"VisibleScope,omitempty" xml:"VisibleScope,omitempty"`
}

func (s ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates) GoString() string {
	return s.String()
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates) SetCheckingConfig(v *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesCheckingConfig) *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates {
	s.CheckingConfig = v
	return s
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates) SetCode(v string) *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates {
	s.Code = &v
	return s
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates) SetDirectoryPath(v string) *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates {
	s.DirectoryPath = &v
	return s
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates) SetName(v string) *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates {
	s.Name = &v
	return s
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates) SetProjectId(v int64) *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates {
	s.ProjectId = &v
	return s
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates) SetSamplingConfig(v *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesSamplingConfig) *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates {
	s.SamplingConfig = v
	return s
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates) SetVisibleScope(v string) *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplates {
	s.VisibleScope = &v
	return s
}

type ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesCheckingConfig struct {
	// Some types of thresholds need to query some reference samples, and then summarize the values of the reference samples to obtain the threshold for comparison. Here, an expression is used to represent the query method of the reference samples.
	//
	// example:
	//
	// { "bizdate": [ "-1", "-7", "-1m" ] }
	ReferencedSamplesFilter *string `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	// Threshold Calculation method
	//
	// - Fixed
	//
	// - Fluctation
	//
	// - FluctationDiscreate
	//
	// - Auto
	//
	// - Average
	//
	// - Variance
	//
	// example:
	//
	// Fixed
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesCheckingConfig) GoString() string {
	return s.String()
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesCheckingConfig) SetReferencedSamplesFilter(v string) *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesCheckingConfig) SetType(v string) *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesCheckingConfig {
	s.Type = &v
	return s
}

type ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesSamplingConfig struct {
	// The name of the sampled metric.
	//
	// - Count: number of table rows
	//
	// - Min: minimum value of the field
	//
	// - Max: The maximum value of the field.
	//
	// - Avg: field mean
	//
	// - DistinctCount: number of unique field values
	//
	// - DistinctPercent: the ratio of the number of unique field values to the number of data rows.
	//
	// - DuplicatedCount: number of duplicate field values
	//
	// - DuplicatedPercent: the ratio of the number of duplicate field values to the number of data rows.
	//
	// - TableSize: table size
	//
	// - NullValueCount: number of rows with empty fields
	//
	// - NullValuePercent: the proportion of fields that are empty.
	//
	// - GroupCount: aggregate each value by field value and the corresponding number of data rows
	//
	// - CountNotIn: the enumerated value does not match the number of rows.
	//
	// - CountDistinctNotIn: the number of unique values that the enumerated values do not match.
	//
	// - UserDefinedSql: use custom SQL to collect samples
	//
	// example:
	//
	// Max
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// Parameters required for sample collection
	//
	// example:
	//
	// {"Sql": "select count(1) from table;"}
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// Before executing the sample statement, insert some runtime parameter setting statements, which can be up to 1000 characters in length. Currently, only MaxCompute are supported.
	//
	// example:
	//
	// SET odps.sql.udf.timeout=600s;
	//
	// SET odps.sql.python.version=cp27;
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesSamplingConfig) GoString() string {
	return s.String()
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesSamplingConfig) SetMetric(v string) *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesSamplingConfig {
	s.Metric = &v
	return s
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesSamplingConfig) SetMetricParameters(v string) *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesSamplingConfig) SetSettingConfig(v string) *ListDataQualityRuleTemplatesResponseBodyPagingInfoDataQualityRuleTemplatesSamplingConfig {
	s.SettingConfig = &v
	return s
}

type ListDataQualityRuleTemplatesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDataQualityRuleTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDataQualityRuleTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRuleTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListDataQualityRuleTemplatesResponse) SetHeaders(v map[string]*string) *ListDataQualityRuleTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListDataQualityRuleTemplatesResponse) SetStatusCode(v int32) *ListDataQualityRuleTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDataQualityRuleTemplatesResponse) SetBody(v *ListDataQualityRuleTemplatesResponseBody) *ListDataQualityRuleTemplatesResponse {
	s.Body = v
	return s
}

type ListDataQualityRulesRequest struct {
	// The ID of the data quality monitoring task that is associated with the rule.
	//
	// example:
	//
	// 10000
	DataQualityEvaluationTaskId *int64 `json:"DataQualityEvaluationTaskId,omitempty" xml:"DataQualityEvaluationTaskId,omitempty"`
	// The name of the rule. Fuzzy match is supported.
	//
	// example:
	//
	// unit_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 200.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 10002
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The ID of the table that is limited by the rule in Data Map.
	//
	// example:
	//
	// odps.unit_test.tb_unit_test
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s ListDataQualityRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRulesRequest) GoString() string {
	return s.String()
}

func (s *ListDataQualityRulesRequest) SetDataQualityEvaluationTaskId(v int64) *ListDataQualityRulesRequest {
	s.DataQualityEvaluationTaskId = &v
	return s
}

func (s *ListDataQualityRulesRequest) SetName(v string) *ListDataQualityRulesRequest {
	s.Name = &v
	return s
}

func (s *ListDataQualityRulesRequest) SetPageNumber(v int32) *ListDataQualityRulesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataQualityRulesRequest) SetPageSize(v int32) *ListDataQualityRulesRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataQualityRulesRequest) SetProjectId(v int64) *ListDataQualityRulesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataQualityRulesRequest) SetTableGuid(v string) *ListDataQualityRulesRequest {
	s.TableGuid = &v
	return s
}

type ListDataQualityRulesResponseBody struct {
	// The pagination information.
	PagingInfo *ListDataQualityRulesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDataQualityRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataQualityRulesResponseBody) SetPagingInfo(v *ListDataQualityRulesResponseBodyPagingInfo) *ListDataQualityRulesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDataQualityRulesResponseBody) SetRequestId(v string) *ListDataQualityRulesResponseBody {
	s.RequestId = &v
	return s
}

type ListDataQualityRulesResponseBodyPagingInfo struct {
	// The rules.
	DataQualityRules []*ListDataQualityRulesResponseBodyPagingInfoDataQualityRules `json:"DataQualityRules,omitempty" xml:"DataQualityRules,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 294
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataQualityRulesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRulesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDataQualityRulesResponseBodyPagingInfo) SetDataQualityRules(v []*ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) *ListDataQualityRulesResponseBodyPagingInfo {
	s.DataQualityRules = v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfo) SetPageNumber(v int32) *ListDataQualityRulesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfo) SetPageSize(v int32) *ListDataQualityRulesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfo) SetTotalCount(v int32) *ListDataQualityRulesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDataQualityRulesResponseBodyPagingInfoDataQualityRules struct {
	// The check settings for sample data.
	CheckingConfig *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	// The description of the rule. The description can be up to 500 characters in length.
	//
	// example:
	//
	// this is a odps _sql task
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Indicates whether the rule is enabled.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The operations that you can perform after the rule-based check fails.
	ErrorHandlers []*ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesErrorHandlers `json:"ErrorHandlers,omitempty" xml:"ErrorHandlers,omitempty" type:"Repeated"`
	// The rule ID.
	//
	// example:
	//
	// 22130
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The rule name.
	//
	// example:
	//
	// The table cannot be empty.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 100001
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The settings for sampling.
	SamplingConfig *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	// The strength of the rule. Valid values:
	//
	// 	- Normal
	//
	// 	- High
	//
	// example:
	//
	// High
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The monitored object of the rule.
	Target *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The ID of the template used by the rule.
	//
	// example:
	//
	// system::user_defined
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) GoString() string {
	return s.String()
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) SetCheckingConfig(v *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfig) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules {
	s.CheckingConfig = v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) SetDescription(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules {
	s.Description = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) SetEnabled(v bool) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules {
	s.Enabled = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) SetErrorHandlers(v []*ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesErrorHandlers) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules {
	s.ErrorHandlers = v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) SetId(v int64) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules {
	s.Id = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) SetName(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules {
	s.Name = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) SetProjectId(v int64) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules {
	s.ProjectId = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) SetSamplingConfig(v *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesSamplingConfig) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules {
	s.SamplingConfig = v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) SetSeverity(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules {
	s.Severity = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) SetTarget(v *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesTarget) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules {
	s.Target = v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules) SetTemplateCode(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRules {
	s.TemplateCode = &v
	return s
}

type ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfig struct {
	// The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference values. In this example, an expression is used to indicate the query method of referenced samples.
	//
	// example:
	//
	// { "bizdate": [ "-1", "-7", "-1m" ] }
	ReferencedSamplesFilter *string `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	// The threshold settings.
	Thresholds *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholds `json:"Thresholds,omitempty" xml:"Thresholds,omitempty" type:"Struct"`
	// The threshold calculation method. Valid values:
	//
	// 	- Fixed
	//
	// 	- Fluctation
	//
	// 	- FluctationDiscreate
	//
	// 	- Auto
	//
	// 	- Average
	//
	// 	- Variance
	//
	// example:
	//
	// Fixed
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfig) GoString() string {
	return s.String()
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfig) SetReferencedSamplesFilter(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfig) SetThresholds(v *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholds) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfig {
	s.Thresholds = v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfig) SetType(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfig {
	s.Type = &v
	return s
}

type ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholds struct {
	// The threshold settings for critical alerts.
	Critical *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	// The expected threshold setting.
	Expected *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsExpected `json:"Expected,omitempty" xml:"Expected,omitempty" type:"Struct"`
	// The threshold settings for normal alerts.
	Warned *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsWarned `json:"Warned,omitempty" xml:"Warned,omitempty" type:"Struct"`
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholds) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholds) GoString() string {
	return s.String()
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholds) SetCritical(v *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsCritical) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholds {
	s.Critical = v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholds) SetExpected(v *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsExpected) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholds {
	s.Expected = v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholds) SetWarned(v *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsWarned) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholds {
	s.Warned = v
	return s
}

type ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsCritical struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsCritical) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsCritical) GoString() string {
	return s.String()
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsCritical) SetExpression(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsCritical {
	s.Expression = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsCritical) SetOperator(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsCritical {
	s.Operator = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsCritical) SetValue(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsCritical {
	s.Value = &v
	return s
}

type ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsExpected struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsExpected) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsExpected) GoString() string {
	return s.String()
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsExpected) SetExpression(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsExpected {
	s.Expression = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsExpected) SetOperator(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsExpected {
	s.Operator = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsExpected) SetValue(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsExpected {
	s.Value = &v
	return s
}

type ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsWarned struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsWarned) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsWarned) GoString() string {
	return s.String()
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsWarned) SetExpression(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsWarned {
	s.Expression = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsWarned) SetOperator(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsWarned {
	s.Operator = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsWarned) SetValue(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesCheckingConfigThresholdsWarned {
	s.Value = &v
	return s
}

type ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesErrorHandlers struct {
	// The SQL statement that is used to filter failed tasks. If the rule is defined by custom SQL statements, you must specify an SQL statement to filter failed tasks.
	//
	// example:
	//
	// SELECT 	- FROM tb_api_log WHERE id IS NULL
	ErrorDataFilter *string `json:"ErrorDataFilter,omitempty" xml:"ErrorDataFilter,omitempty"`
	// The type of the operation. Valid values:
	//
	// 	- SaveErrorData
	//
	// example:
	//
	// SaveErrorData
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesErrorHandlers) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesErrorHandlers) GoString() string {
	return s.String()
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesErrorHandlers) SetErrorDataFilter(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesErrorHandlers {
	s.ErrorDataFilter = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesErrorHandlers) SetType(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesErrorHandlers {
	s.Type = &v
	return s
}

type ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesSamplingConfig struct {
	// The metrics used for sampling. Valid values:
	//
	// 	- Count: the number of rows in the table.
	//
	// 	- Min: the minimum value of the field.
	//
	// 	- Max: the maximum value of the field.
	//
	// 	- Avg: the average value of the field.
	//
	// 	- DistinctCount: the number of unique values of the field after deduplication.
	//
	// 	- DistinctPercent: the percentage of the number of unique values of the field after deduplication to the number of rows in the table.
	//
	// 	- DuplicatedCount: the number of duplicated values in the field.
	//
	// 	- DuplicatedPercent: the percentage of the number of duplicated values of the field to the number of rows in the table.
	//
	// 	- TableSize: the table size.
	//
	// 	- NullValueCount: the number of rows in which the field is set to null.
	//
	// 	- NullValuePercent: the percentage of the number of rows in which the field is set to null to the number of rows in the table.
	//
	// 	- GroupCount: the field value and the number of rows for each field value.
	//
	// 	- CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
	//
	// 	- CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
	//
	// 	- UserDefinedSql: indicates that the data is sampled by executing custom SQL statements.
	//
	// example:
	//
	// Max
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The parameters required for sampling.
	//
	// example:
	//
	// { "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.
	//
	// example:
	//
	// id IS NULL
	SamplingFilter *string `json:"SamplingFilter,omitempty" xml:"SamplingFilter,omitempty"`
	// The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.
	//
	// example:
	//
	// SET odps.sql.udf.timeout=600s;
	//
	// SET odps.sql.python.version=cp27;
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesSamplingConfig) GoString() string {
	return s.String()
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesSamplingConfig) SetMetric(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesSamplingConfig {
	s.Metric = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesSamplingConfig) SetMetricParameters(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesSamplingConfig) SetSamplingFilter(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesSamplingConfig {
	s.SamplingFilter = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesSamplingConfig) SetSettingConfig(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesSamplingConfig {
	s.SettingConfig = &v
	return s
}

type ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesTarget struct {
	// The type of the database to which the table belongs. Valid values:
	//
	// 	- maxcompute
	//
	// 	- emr
	//
	// 	- cdh
	//
	// 	- hologres
	//
	// 	- analyticdb_for_postgresql
	//
	// 	- analyticdb_for_mysql
	//
	// 	- starrocks
	//
	// example:
	//
	// maxcompute
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The ID of the table that is limited by the rule in Data Map.
	//
	// example:
	//
	// odps.unit_test.tb_unit_test
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
	// The type of the monitored object. Valid values:
	//
	// 	- Table
	//
	// example:
	//
	// Table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesTarget) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesTarget) GoString() string {
	return s.String()
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesTarget) SetDatabaseType(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesTarget {
	s.DatabaseType = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesTarget) SetTableGuid(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesTarget {
	s.TableGuid = &v
	return s
}

func (s *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesTarget) SetType(v string) *ListDataQualityRulesResponseBodyPagingInfoDataQualityRulesTarget {
	s.Type = &v
	return s
}

type ListDataQualityRulesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDataQualityRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDataQualityRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataQualityRulesResponse) GoString() string {
	return s.String()
}

func (s *ListDataQualityRulesResponse) SetHeaders(v map[string]*string) *ListDataQualityRulesResponse {
	s.Headers = v
	return s
}

func (s *ListDataQualityRulesResponse) SetStatusCode(v int32) *ListDataQualityRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDataQualityRulesResponse) SetBody(v *ListDataQualityRulesResponseBody) *ListDataQualityRulesResponse {
	s.Body = v
	return s
}

type ListDataSourceSharedRulesRequest struct {
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataSourceId *int64 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The ID of the workspace to which the data source is shared. You cannot share the data source to the workspace with which the data source is associated.
	//
	// example:
	//
	// 1
	TargetProjectId *int64 `json:"TargetProjectId,omitempty" xml:"TargetProjectId,omitempty"`
}

func (s ListDataSourceSharedRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceSharedRulesRequest) GoString() string {
	return s.String()
}

func (s *ListDataSourceSharedRulesRequest) SetDataSourceId(v int64) *ListDataSourceSharedRulesRequest {
	s.DataSourceId = &v
	return s
}

func (s *ListDataSourceSharedRulesRequest) SetTargetProjectId(v int64) *ListDataSourceSharedRulesRequest {
	s.TargetProjectId = &v
	return s
}

type ListDataSourceSharedRulesResponseBody struct {
	// The sharing rules of the data source.
	DataSourceSharedRules []*ListDataSourceSharedRulesResponseBodyDataSourceSharedRules `json:"DataSourceSharedRules,omitempty" xml:"DataSourceSharedRules,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDataSourceSharedRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceSharedRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataSourceSharedRulesResponseBody) SetDataSourceSharedRules(v []*ListDataSourceSharedRulesResponseBodyDataSourceSharedRules) *ListDataSourceSharedRulesResponseBody {
	s.DataSourceSharedRules = v
	return s
}

func (s *ListDataSourceSharedRulesResponseBody) SetRequestId(v string) *ListDataSourceSharedRulesResponseBody {
	s.RequestId = &v
	return s
}

type ListDataSourceSharedRulesResponseBodyDataSourceSharedRules struct {
	// The time when the rule was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1724379762000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the user who creates the rule.
	//
	// example:
	//
	// 1
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.
	//
	// example:
	//
	// 1
	DataSourceId *int64 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The environment to which the target data source belongs. The values are as follows:
	//
	// - Dev: the development environment.
	//
	// - Prod: the production environment.
	//
	// example:
	//
	// Dev
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The rule ID.
	//
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the data source in the destination workspace.
	//
	// example:
	//
	// targetProject.datasource
	SharedDataSourceName *string `json:"SharedDataSourceName,omitempty" xml:"SharedDataSourceName,omitempty"`
	// The user in the workspace to which the data source is shared. If the data source is shared to the entire workspace, this parameter is left empty.
	//
	// example:
	//
	// 1
	SharedUser *string `json:"SharedUser,omitempty" xml:"SharedUser,omitempty"`
	// The ID of the workspace with which the data source is associated.
	//
	// example:
	//
	// 1
	SourceProjectId *int64 `json:"SourceProjectId,omitempty" xml:"SourceProjectId,omitempty"`
	// The ID of the workspace to which the data source is shared.
	//
	// example:
	//
	// 1
	TargetProjectId *int64 `json:"TargetProjectId,omitempty" xml:"TargetProjectId,omitempty"`
}

func (s ListDataSourceSharedRulesResponseBodyDataSourceSharedRules) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceSharedRulesResponseBodyDataSourceSharedRules) GoString() string {
	return s.String()
}

func (s *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules) SetCreateTime(v int64) *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules {
	s.CreateTime = &v
	return s
}

func (s *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules) SetCreateUser(v string) *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules {
	s.CreateUser = &v
	return s
}

func (s *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules) SetDataSourceId(v int64) *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules {
	s.DataSourceId = &v
	return s
}

func (s *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules) SetEnvType(v string) *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules {
	s.EnvType = &v
	return s
}

func (s *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules) SetId(v int64) *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules {
	s.Id = &v
	return s
}

func (s *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules) SetSharedDataSourceName(v string) *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules {
	s.SharedDataSourceName = &v
	return s
}

func (s *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules) SetSharedUser(v string) *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules {
	s.SharedUser = &v
	return s
}

func (s *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules) SetSourceProjectId(v int64) *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules {
	s.SourceProjectId = &v
	return s
}

func (s *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules) SetTargetProjectId(v int64) *ListDataSourceSharedRulesResponseBodyDataSourceSharedRules {
	s.TargetProjectId = &v
	return s
}

type ListDataSourceSharedRulesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDataSourceSharedRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDataSourceSharedRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceSharedRulesResponse) GoString() string {
	return s.String()
}

func (s *ListDataSourceSharedRulesResponse) SetHeaders(v map[string]*string) *ListDataSourceSharedRulesResponse {
	s.Headers = v
	return s
}

func (s *ListDataSourceSharedRulesResponse) SetStatusCode(v int32) *ListDataSourceSharedRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDataSourceSharedRulesResponse) SetBody(v *ListDataSourceSharedRulesResponseBody) *ListDataSourceSharedRulesResponse {
	s.Body = v
	return s
}

type ListDataSourcesRequest struct {
	// The environment in which the data sources are used. Valid values:
	//
	// 	- Dev: development environment
	//
	// 	- Prod: production environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The name of the data source. Fuzzy match by data source name is supported.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The order in which you want to sort the data sources. Valid values:
	//
	// 	- Desc: descending order
	//
	// 	- Asc: ascending order
	//
	// Default value: Desc
	//
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 17820
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The field that you want to use to sort the data sources. Valid values:
	//
	// 	- CreateTime
	//
	// 	- Id
	//
	// 	- Name
	//
	// Default value: CreateTime
	//
	// example:
	//
	// Id
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The tag of the data source. This parameter specifies a filter condition.
	//
	// 	- You can specify multiple tags, which are in the logical AND relation. For example, you can query the data sources that contain the following tags: `["tag1", "tag2", "tag3"]`.
	//
	// 	- If you do not configure this parameter, tag-based filtering is not performed. You can specify up to 10 tags.
	//
	// example:
	//
	// ["tag1", "tag2", "tag3"]
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The data source types. This parameter specifies a filter condition. You can specify multiple data source types.
	Types []*string `json:"Types,omitempty" xml:"Types,omitempty" type:"Repeated"`
}

func (s ListDataSourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourcesRequest) GoString() string {
	return s.String()
}

func (s *ListDataSourcesRequest) SetEnvType(v string) *ListDataSourcesRequest {
	s.EnvType = &v
	return s
}

func (s *ListDataSourcesRequest) SetName(v string) *ListDataSourcesRequest {
	s.Name = &v
	return s
}

func (s *ListDataSourcesRequest) SetOrder(v string) *ListDataSourcesRequest {
	s.Order = &v
	return s
}

func (s *ListDataSourcesRequest) SetPageNumber(v int32) *ListDataSourcesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataSourcesRequest) SetPageSize(v int32) *ListDataSourcesRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataSourcesRequest) SetProjectId(v int64) *ListDataSourcesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataSourcesRequest) SetSortBy(v string) *ListDataSourcesRequest {
	s.SortBy = &v
	return s
}

func (s *ListDataSourcesRequest) SetTags(v string) *ListDataSourcesRequest {
	s.Tags = &v
	return s
}

func (s *ListDataSourcesRequest) SetTypes(v []*string) *ListDataSourcesRequest {
	s.Types = v
	return s
}

type ListDataSourcesShrinkRequest struct {
	// The environment in which the data sources are used. Valid values:
	//
	// 	- Dev: development environment
	//
	// 	- Prod: production environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The name of the data source. Fuzzy match by data source name is supported.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The order in which you want to sort the data sources. Valid values:
	//
	// 	- Desc: descending order
	//
	// 	- Asc: ascending order
	//
	// Default value: Desc
	//
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 17820
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The field that you want to use to sort the data sources. Valid values:
	//
	// 	- CreateTime
	//
	// 	- Id
	//
	// 	- Name
	//
	// Default value: CreateTime
	//
	// example:
	//
	// Id
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The tag of the data source. This parameter specifies a filter condition.
	//
	// 	- You can specify multiple tags, which are in the logical AND relation. For example, you can query the data sources that contain the following tags: `["tag1", "tag2", "tag3"]`.
	//
	// 	- If you do not configure this parameter, tag-based filtering is not performed. You can specify up to 10 tags.
	//
	// example:
	//
	// ["tag1", "tag2", "tag3"]
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The data source types. This parameter specifies a filter condition. You can specify multiple data source types.
	TypesShrink *string `json:"Types,omitempty" xml:"Types,omitempty"`
}

func (s ListDataSourcesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourcesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListDataSourcesShrinkRequest) SetEnvType(v string) *ListDataSourcesShrinkRequest {
	s.EnvType = &v
	return s
}

func (s *ListDataSourcesShrinkRequest) SetName(v string) *ListDataSourcesShrinkRequest {
	s.Name = &v
	return s
}

func (s *ListDataSourcesShrinkRequest) SetOrder(v string) *ListDataSourcesShrinkRequest {
	s.Order = &v
	return s
}

func (s *ListDataSourcesShrinkRequest) SetPageNumber(v int32) *ListDataSourcesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataSourcesShrinkRequest) SetPageSize(v int32) *ListDataSourcesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataSourcesShrinkRequest) SetProjectId(v int64) *ListDataSourcesShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataSourcesShrinkRequest) SetSortBy(v string) *ListDataSourcesShrinkRequest {
	s.SortBy = &v
	return s
}

func (s *ListDataSourcesShrinkRequest) SetTags(v string) *ListDataSourcesShrinkRequest {
	s.Tags = &v
	return s
}

func (s *ListDataSourcesShrinkRequest) SetTypesShrink(v string) *ListDataSourcesShrinkRequest {
	s.TypesShrink = &v
	return s
}

type ListDataSourcesResponseBody struct {
	// The pagination information.
	PagingInfo *ListDataSourcesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 7BE1433F-6D55-5D86-9344-CA6F7DD19B13
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDataSourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataSourcesResponseBody) SetPagingInfo(v *ListDataSourcesResponseBodyPagingInfo) *ListDataSourcesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDataSourcesResponseBody) SetRequestId(v string) *ListDataSourcesResponseBody {
	s.RequestId = &v
	return s
}

type ListDataSourcesResponseBodyPagingInfo struct {
	// The data source groups. Each element in the array indicates a data source group. Each data source group contains data sources in the development environment (if any) and the production environment.
	DataSources []*ListDataSourcesResponseBodyPagingInfoDataSources `json:"DataSources,omitempty" xml:"DataSources,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 131
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDataSourcesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourcesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDataSourcesResponseBodyPagingInfo) SetDataSources(v []*ListDataSourcesResponseBodyPagingInfoDataSources) *ListDataSourcesResponseBodyPagingInfo {
	s.DataSources = v
	return s
}

func (s *ListDataSourcesResponseBodyPagingInfo) SetPageNumber(v int64) *ListDataSourcesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDataSourcesResponseBodyPagingInfo) SetPageSize(v int64) *ListDataSourcesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDataSourcesResponseBodyPagingInfo) SetTotalCount(v int64) *ListDataSourcesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDataSourcesResponseBodyPagingInfoDataSources struct {
	// The data sources. Each element is the information of a single data source with a unique data source ID.
	DataSource []*ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Repeated"`
	// The name of the data source.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// mysql
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDataSourcesResponseBodyPagingInfoDataSources) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourcesResponseBodyPagingInfoDataSources) GoString() string {
	return s.String()
}

func (s *ListDataSourcesResponseBodyPagingInfoDataSources) SetDataSource(v []*ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource) *ListDataSourcesResponseBodyPagingInfoDataSources {
	s.DataSource = v
	return s
}

func (s *ListDataSourcesResponseBodyPagingInfoDataSources) SetName(v string) *ListDataSourcesResponseBodyPagingInfoDataSources {
	s.Name = &v
	return s
}

func (s *ListDataSourcesResponseBodyPagingInfoDataSources) SetType(v string) *ListDataSourcesResponseBodyPagingInfoDataSources {
	s.Type = &v
	return s
}

type ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource struct {
	// The connection configurations of the data source, including the connection address, access identity, and environment information. The envType parameter specifies the environment in which the data source is used. Valid values of the envType parameter:
	//
	// 	- Dev: development environment
	//
	// 	- Prod: production environment
	//
	// The parameters that you need to configure for the data source vary based on the mode in which the data source is added. For more information, see [Data source connection information (ConnectionProperties)](https://help.aliyun.com/document_detail/2852465.html).
	//
	// example:
	//
	// {
	//
	// 	"envType": "Prod",
	//
	// 	"regionId": "cn-beijing",
	//
	//     "instanceId": "hgprecn-cn-x0r3oun4k001",
	//
	//     "database": "testdb",
	//
	//     "securityProtocol": "authTypeNone",
	//
	//     "authType": "Executor",
	//
	//     "authIdentity": "1107550004253538"
	//
	// }
	ConnectionProperties interface{} `json:"ConnectionProperties,omitempty" xml:"ConnectionProperties,omitempty"`
	// The mode in which the data source is added. The mode varies based on the data source type. Valid values:
	//
	// 	- InstanceMode: instance mode
	//
	// 	- UrlMode: connection string mode
	//
	// example:
	//
	// UrlMode
	ConnectionPropertiesMode *string `json:"ConnectionPropertiesMode,omitempty" xml:"ConnectionPropertiesMode,omitempty"`
	// The time when the data source was added. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1648711113000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the user who adds the data source.
	//
	// example:
	//
	// 1624387842781448
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The description of the data source.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the data source.
	//
	// example:
	//
	// 16035
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The time when the data source was last modified. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1648711113000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The ID of the user who modifies the data source.
	//
	// example:
	//
	// 1624387842781448
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The unique business key of the data source. For example, the unique business key of a Hologres data source is in the `${tenantOwnerId}:${regionId}:${type}:${instanceId}:${database}` format.
	//
	// example:
	//
	// 1648711121000:cn-beijing:odps:yongxunQA_beijing_standard
	QualifiedName *string `json:"QualifiedName,omitempty" xml:"QualifiedName,omitempty"`
}

func (s ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource) GoString() string {
	return s.String()
}

func (s *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource) SetConnectionProperties(v interface{}) *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource {
	s.ConnectionProperties = v
	return s
}

func (s *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource) SetConnectionPropertiesMode(v string) *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource {
	s.ConnectionPropertiesMode = &v
	return s
}

func (s *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource) SetCreateTime(v int64) *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource {
	s.CreateTime = &v
	return s
}

func (s *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource) SetCreateUser(v string) *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource {
	s.CreateUser = &v
	return s
}

func (s *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource) SetDescription(v string) *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource {
	s.Description = &v
	return s
}

func (s *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource) SetId(v int64) *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource {
	s.Id = &v
	return s
}

func (s *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource) SetModifyTime(v int64) *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource {
	s.ModifyTime = &v
	return s
}

func (s *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource) SetModifyUser(v string) *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource {
	s.ModifyUser = &v
	return s
}

func (s *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource) SetQualifiedName(v string) *ListDataSourcesResponseBodyPagingInfoDataSourcesDataSource {
	s.QualifiedName = &v
	return s
}

type ListDataSourcesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDataSourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDataSourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourcesResponse) GoString() string {
	return s.String()
}

func (s *ListDataSourcesResponse) SetHeaders(v map[string]*string) *ListDataSourcesResponse {
	s.Headers = v
	return s
}

func (s *ListDataSourcesResponse) SetStatusCode(v int32) *ListDataSourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDataSourcesResponse) SetBody(v *ListDataSourcesResponseBody) *ListDataSourcesResponse {
	s.Body = v
	return s
}

type ListDatabasesRequest struct {
	// example:
	//
	// test comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// test_tbl
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mysql:rm-abc123xxx
	//
	// dlf-catalog:123456XXX:test_catalog
	ParentMetaEntityId *string `json:"ParentMetaEntityId,omitempty" xml:"ParentMetaEntityId,omitempty"`
	// example:
	//
	// CreateTime
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListDatabasesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesRequest) GoString() string {
	return s.String()
}

func (s *ListDatabasesRequest) SetComment(v string) *ListDatabasesRequest {
	s.Comment = &v
	return s
}

func (s *ListDatabasesRequest) SetName(v string) *ListDatabasesRequest {
	s.Name = &v
	return s
}

func (s *ListDatabasesRequest) SetOrder(v string) *ListDatabasesRequest {
	s.Order = &v
	return s
}

func (s *ListDatabasesRequest) SetPageNumber(v int32) *ListDatabasesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDatabasesRequest) SetPageSize(v int32) *ListDatabasesRequest {
	s.PageSize = &v
	return s
}

func (s *ListDatabasesRequest) SetParentMetaEntityId(v string) *ListDatabasesRequest {
	s.ParentMetaEntityId = &v
	return s
}

func (s *ListDatabasesRequest) SetSortBy(v string) *ListDatabasesRequest {
	s.SortBy = &v
	return s
}

type ListDatabasesResponseBody struct {
	PagingInfo *ListDatabasesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// example:
	//
	// 9DD08926-38B9-XXXXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListDatabasesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDatabasesResponseBody) SetPagingInfo(v *ListDatabasesResponseBodyPagingInfo) *ListDatabasesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDatabasesResponseBody) SetRequestId(v string) *ListDatabasesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDatabasesResponseBody) SetSuccess(v bool) *ListDatabasesResponseBody {
	s.Success = &v
	return s
}

type ListDatabasesResponseBodyPagingInfo struct {
	Databases []*Database `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDatabasesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDatabasesResponseBodyPagingInfo) SetDatabases(v []*Database) *ListDatabasesResponseBodyPagingInfo {
	s.Databases = v
	return s
}

func (s *ListDatabasesResponseBodyPagingInfo) SetPageNumber(v int32) *ListDatabasesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDatabasesResponseBodyPagingInfo) SetPageSize(v int32) *ListDatabasesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDatabasesResponseBodyPagingInfo) SetTotalCount(v int64) *ListDatabasesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDatabasesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDatabasesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDatabasesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDatabasesResponse) GoString() string {
	return s.String()
}

func (s *ListDatabasesResponse) SetHeaders(v map[string]*string) *ListDatabasesResponse {
	s.Headers = v
	return s
}

func (s *ListDatabasesResponse) SetStatusCode(v int32) *ListDatabasesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDatabasesResponse) SetBody(v *ListDatabasesResponseBody) *ListDatabasesResponse {
	s.Body = v
	return s
}

type ListDeploymentPackageFilesRequest struct {
	// The workflow ID. You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the workflow ID by name.
	//
	// example:
	//
	// 100001
	BusinessId *int64 `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	// The change type. Valid values:
	//
	// 	- 0: addition
	//
	// 	- 1: update
	//
	// 	- 2: deletion
	//
	// example:
	//
	// 0
	ChangeType *int32 `json:"ChangeType,omitempty" xml:"ChangeType,omitempty"`
	// The start date for committing. Specify the date in the yyyy-MM-dd format.
	//
	// example:
	//
	// 2025-01-01
	CommitFrom *string `json:"CommitFrom,omitempty" xml:"CommitFrom,omitempty"`
	// The end date (included) for committing. Specify the date in the yyyy-MM-dd format.
	//
	// example:
	//
	// 2025-01-31
	CommitTo *string `json:"CommitTo,omitempty" xml:"CommitTo,omitempty"`
	// The ID of the user who commits the file.
	//
	// example:
	//
	// 2003****
	CommitUserId *string `json:"CommitUserId,omitempty" xml:"CommitUserId,omitempty"`
	// The IDs of the files to be queried.
	FileIds []*string `json:"FileIds,omitempty" xml:"FileIds,omitempty" type:"Repeated"`
	// The name of the file.
	//
	// example:
	//
	// Filename
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The type of the code for the file.
	//
	// The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html). You can call the [ListFileType](https://help.aliyun.com/document_detail/212428.html) operation to query the type of the code for the file.
	//
	// example:
	//
	// 10
	FileType *int32 `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The solution ID.
	//
	// example:
	//
	// 8065
	SolutionId *int64 `json:"SolutionId,omitempty" xml:"SolutionId,omitempty"`
}

func (s ListDeploymentPackageFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentPackageFilesRequest) GoString() string {
	return s.String()
}

func (s *ListDeploymentPackageFilesRequest) SetBusinessId(v int64) *ListDeploymentPackageFilesRequest {
	s.BusinessId = &v
	return s
}

func (s *ListDeploymentPackageFilesRequest) SetChangeType(v int32) *ListDeploymentPackageFilesRequest {
	s.ChangeType = &v
	return s
}

func (s *ListDeploymentPackageFilesRequest) SetCommitFrom(v string) *ListDeploymentPackageFilesRequest {
	s.CommitFrom = &v
	return s
}

func (s *ListDeploymentPackageFilesRequest) SetCommitTo(v string) *ListDeploymentPackageFilesRequest {
	s.CommitTo = &v
	return s
}

func (s *ListDeploymentPackageFilesRequest) SetCommitUserId(v string) *ListDeploymentPackageFilesRequest {
	s.CommitUserId = &v
	return s
}

func (s *ListDeploymentPackageFilesRequest) SetFileIds(v []*string) *ListDeploymentPackageFilesRequest {
	s.FileIds = v
	return s
}

func (s *ListDeploymentPackageFilesRequest) SetFileName(v string) *ListDeploymentPackageFilesRequest {
	s.FileName = &v
	return s
}

func (s *ListDeploymentPackageFilesRequest) SetFileType(v int32) *ListDeploymentPackageFilesRequest {
	s.FileType = &v
	return s
}

func (s *ListDeploymentPackageFilesRequest) SetPageNumber(v int32) *ListDeploymentPackageFilesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDeploymentPackageFilesRequest) SetPageSize(v int32) *ListDeploymentPackageFilesRequest {
	s.PageSize = &v
	return s
}

func (s *ListDeploymentPackageFilesRequest) SetProjectId(v int64) *ListDeploymentPackageFilesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDeploymentPackageFilesRequest) SetSolutionId(v int64) *ListDeploymentPackageFilesRequest {
	s.SolutionId = &v
	return s
}

type ListDeploymentPackageFilesShrinkRequest struct {
	// The workflow ID. You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the workflow ID by name.
	//
	// example:
	//
	// 100001
	BusinessId *int64 `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	// The change type. Valid values:
	//
	// 	- 0: addition
	//
	// 	- 1: update
	//
	// 	- 2: deletion
	//
	// example:
	//
	// 0
	ChangeType *int32 `json:"ChangeType,omitempty" xml:"ChangeType,omitempty"`
	// The start date for committing. Specify the date in the yyyy-MM-dd format.
	//
	// example:
	//
	// 2025-01-01
	CommitFrom *string `json:"CommitFrom,omitempty" xml:"CommitFrom,omitempty"`
	// The end date (included) for committing. Specify the date in the yyyy-MM-dd format.
	//
	// example:
	//
	// 2025-01-31
	CommitTo *string `json:"CommitTo,omitempty" xml:"CommitTo,omitempty"`
	// The ID of the user who commits the file.
	//
	// example:
	//
	// 2003****
	CommitUserId *string `json:"CommitUserId,omitempty" xml:"CommitUserId,omitempty"`
	// The IDs of the files to be queried.
	FileIdsShrink *string `json:"FileIds,omitempty" xml:"FileIds,omitempty"`
	// The name of the file.
	//
	// example:
	//
	// Filename
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The type of the code for the file.
	//
	// The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html). You can call the [ListFileType](https://help.aliyun.com/document_detail/212428.html) operation to query the type of the code for the file.
	//
	// example:
	//
	// 10
	FileType *int32 `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The solution ID.
	//
	// example:
	//
	// 8065
	SolutionId *int64 `json:"SolutionId,omitempty" xml:"SolutionId,omitempty"`
}

func (s ListDeploymentPackageFilesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentPackageFilesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListDeploymentPackageFilesShrinkRequest) SetBusinessId(v int64) *ListDeploymentPackageFilesShrinkRequest {
	s.BusinessId = &v
	return s
}

func (s *ListDeploymentPackageFilesShrinkRequest) SetChangeType(v int32) *ListDeploymentPackageFilesShrinkRequest {
	s.ChangeType = &v
	return s
}

func (s *ListDeploymentPackageFilesShrinkRequest) SetCommitFrom(v string) *ListDeploymentPackageFilesShrinkRequest {
	s.CommitFrom = &v
	return s
}

func (s *ListDeploymentPackageFilesShrinkRequest) SetCommitTo(v string) *ListDeploymentPackageFilesShrinkRequest {
	s.CommitTo = &v
	return s
}

func (s *ListDeploymentPackageFilesShrinkRequest) SetCommitUserId(v string) *ListDeploymentPackageFilesShrinkRequest {
	s.CommitUserId = &v
	return s
}

func (s *ListDeploymentPackageFilesShrinkRequest) SetFileIdsShrink(v string) *ListDeploymentPackageFilesShrinkRequest {
	s.FileIdsShrink = &v
	return s
}

func (s *ListDeploymentPackageFilesShrinkRequest) SetFileName(v string) *ListDeploymentPackageFilesShrinkRequest {
	s.FileName = &v
	return s
}

func (s *ListDeploymentPackageFilesShrinkRequest) SetFileType(v int32) *ListDeploymentPackageFilesShrinkRequest {
	s.FileType = &v
	return s
}

func (s *ListDeploymentPackageFilesShrinkRequest) SetPageNumber(v int32) *ListDeploymentPackageFilesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDeploymentPackageFilesShrinkRequest) SetPageSize(v int32) *ListDeploymentPackageFilesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListDeploymentPackageFilesShrinkRequest) SetProjectId(v int64) *ListDeploymentPackageFilesShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDeploymentPackageFilesShrinkRequest) SetSolutionId(v int64) *ListDeploymentPackageFilesShrinkRequest {
	s.SolutionId = &v
	return s
}

type ListDeploymentPackageFilesResponseBody struct {
	// The pagination information.
	PagingInfo *ListDeploymentPackageFilesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDeploymentPackageFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentPackageFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDeploymentPackageFilesResponseBody) SetPagingInfo(v *ListDeploymentPackageFilesResponseBodyPagingInfo) *ListDeploymentPackageFilesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDeploymentPackageFilesResponseBody) SetRequestId(v string) *ListDeploymentPackageFilesResponseBody {
	s.RequestId = &v
	return s
}

type ListDeploymentPackageFilesResponseBodyPagingInfo struct {
	// The details of the versions of the files to be deployed.
	DeploymentPackageFiles []*ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles `json:"DeploymentPackageFiles,omitempty" xml:"DeploymentPackageFiles,omitempty" type:"Repeated"`
	// The page number. Pages start from page 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDeploymentPackageFilesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentPackageFilesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfo) SetDeploymentPackageFiles(v []*ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) *ListDeploymentPackageFilesResponseBodyPagingInfo {
	s.DeploymentPackageFiles = v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfo) SetPageNumber(v int32) *ListDeploymentPackageFilesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfo) SetPageSize(v int32) *ListDeploymentPackageFilesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfo) SetTotalCount(v int32) *ListDeploymentPackageFilesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles struct {
	// The change type, which is an integer. Valid values:
	//
	// 	- 0: addition
	//
	// 	- 1: update
	//
	// 	- 2: deletion
	//
	// example:
	//
	// 0
	ChangeType *int32 `json:"ChangeType,omitempty" xml:"ChangeType,omitempty"`
	// The comment for committing.
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The time for committing.
	//
	// example:
	//
	// 2025-04-10 15:55:47
	CommitTime *string `json:"CommitTime,omitempty" xml:"CommitTime,omitempty"`
	// The ID of the Alibaba Cloud account used by the user who committed the file.
	//
	// example:
	//
	// 446***
	CommitUser *string `json:"CommitUser,omitempty" xml:"CommitUser,omitempty"`
	// The name of the Alibaba Cloud account used by the user who committed the file.
	//
	// example:
	//
	// user***
	CommitUserName *string `json:"CommitUserName,omitempty" xml:"CommitUserName,omitempty"`
	// The file ID.
	//
	// example:
	//
	// 520246913
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The name of the file of the current version.
	//
	// example:
	//
	// bak_part_basc_person_relation_all_da
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file type. The code for files varies based on the file type. For more information, see [DataWorks nodes](https://help.aliyun.com/document_detail/600169.html).
	//
	// example:
	//
	// 13
	FileType *int32 `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The file version.
	//
	// example:
	//
	// 34
	FileVersion *int64 `json:"FileVersion,omitempty" xml:"FileVersion,omitempty"`
	// The unique ID.
	//
	// example:
	//
	// 650433503
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Indicates whether the version is a version in the production environment of the scheduling system.
	//
	// example:
	//
	// true
	IsSameAsProductionVersion *bool `json:"IsSameAsProductionVersion,omitempty" xml:"IsSameAsProductionVersion,omitempty"`
	// The scheduling property configurations of the node that corresponds to the file, which is a JSON string.
	//
	// example:
	//
	// {
	//
	// 	"tagList": [],
	//
	// 	"fileId": -1,
	//
	// 	"taskRerunTime": 0,
	//
	// 	"taskRerunInterval": 0,
	//
	// 	"reRunAble": 1,
	//
	// 	"nodeId": 125803000,
	//
	// 	"nodeName": "new",
	//
	// 	"nodeType": 0,
	//
	// 	"isStop": 0,
	//
	// 	"paraValue": "",
	//
	// 	"startEffectDate": "1970-01-01 00:00:00",
	//
	// 	"endEffectDate": "9999-01-01 00:00:00",
	//
	// 	"cronExpress": "00 26 00 	- 	- ?",
	//
	// 	"owner": "1107550004250000",
	//
	// 	"resgroupId": 6300000,
	//
	// 	"cu": "0.25",
	//
	// 	"appId": 170000,
	//
	// 	"tenantId": 524257424560000,
	//
	// 	"createTime": "2025-04-10 15:55:01",
	//
	// 	"createUser": "1107550004250000",
	//
	// 	"lastModifyTime": "2025-04-10 15:55:41",
	//
	// 	"cycleType": 0,
	//
	// 	"dependentType": 0,
	//
	// 	"dependentTypeList": [0],
	//
	// 	"lastModifyUser": "1107550004250000",
	//
	// 	"dependentDataNode": "",
	//
	// 	"input": "[{\\"regionId\\":\\"cn-hangzhou\\",\\"str\\":\\"root_input\\",\\"parseType\\":1}]",
	//
	// 	"output": "[{\\"str\\":\\"project_root.526586287_out\\",\\"parseType\\":2},{\\"str\\":\\"project_root.new\\",\\"parseType\\":1}]",
	//
	// 	"inputList": [{
	//
	// 		"regionId": "cn-hangzhou",
	//
	// 		"str": "root_input",
	//
	// 		"parseType": 1
	//
	// 	}],
	//
	// 	"outputList": [{
	//
	// 		"str": "project_root.526586287_out",
	//
	// 		"parseType": 2
	//
	// 	}, {
	//
	// 		"str": "project_root.new",
	//
	// 		"parseType": 1
	//
	// 	}],
	//
	// 	"isAutoParse": 1,
	//
	// 	"startRightNow": false,
	//
	// 	"extConfig": "{\\"openCustomCron\\":false,\\"formCron\\":\\"\\"}",
	//
	// 	"inputContextList": [],
	//
	// 	"outputContextList": []
	//
	// }
	NodeConfiguration *string `json:"NodeConfiguration,omitempty" xml:"NodeConfiguration,omitempty"`
	// The ID of the auto triggered node that corresponds to the file.
	//
	// example:
	//
	// 700005008419
	NodeId *int64 `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 27595
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The test status in the development environment.
	SmokeTestStatus *string `json:"SmokeTestStatus,omitempty" xml:"SmokeTestStatus,omitempty"`
	// The status of the code for the file of the current version. Valid values:
	//
	// 	- 10: committing
	//
	// 	- 11: committed to the development environment of the scheduling system
	//
	// 	- 20: review passed
	//
	// 	- 21: review failed
	//
	// 	- 80: deployment package creation succeeded
	//
	// 	- 100: deploying
	//
	// 	- 101: deployed to the production environment
	//
	// 	- 200: cancelled
	//
	// example:
	//
	// 100
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The DataWorks tenant ID.
	//
	// example:
	//
	// 639415964191360
	TenantId *int64 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The module to which the file belongs. Valid values:
	//
	// 	- NORMAL: The file is used for DataStudio.
	//
	// 	- MANUAL: The file is used for a manually triggered node.
	//
	// 	- MANUAL_BIZ: The file is used for a manually triggered workflow.
	//
	// 	- SKIP: The file is used for a dry-run node in DataStudio.
	//
	// 	- ADHOCQUERY: The file is used for an ad hoc query.
	//
	// 	- COMPONENT: The file is used for a script template.
	//
	// example:
	//
	// NORMAL
	UseType *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) GoString() string {
	return s.String()
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetChangeType(v int32) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.ChangeType = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetComment(v string) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.Comment = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetCommitTime(v string) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.CommitTime = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetCommitUser(v string) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.CommitUser = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetCommitUserName(v string) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.CommitUserName = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetFileId(v int64) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.FileId = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetFileName(v string) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.FileName = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetFileType(v int32) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.FileType = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetFileVersion(v int64) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.FileVersion = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetId(v int64) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.Id = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetIsSameAsProductionVersion(v bool) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.IsSameAsProductionVersion = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetNodeConfiguration(v string) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.NodeConfiguration = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetNodeId(v int64) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.NodeId = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetProjectId(v int64) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.ProjectId = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetSmokeTestStatus(v string) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.SmokeTestStatus = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetStatus(v int32) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.Status = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetTenantId(v int64) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.TenantId = &v
	return s
}

func (s *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles) SetUseType(v string) *ListDeploymentPackageFilesResponseBodyPagingInfoDeploymentPackageFiles {
	s.UseType = &v
	return s
}

type ListDeploymentPackageFilesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDeploymentPackageFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDeploymentPackageFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentPackageFilesResponse) GoString() string {
	return s.String()
}

func (s *ListDeploymentPackageFilesResponse) SetHeaders(v map[string]*string) *ListDeploymentPackageFilesResponse {
	s.Headers = v
	return s
}

func (s *ListDeploymentPackageFilesResponse) SetStatusCode(v int32) *ListDeploymentPackageFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDeploymentPackageFilesResponse) SetBody(v *ListDeploymentPackageFilesResponseBody) *ListDeploymentPackageFilesResponse {
	s.Body = v
	return s
}

type ListDeploymentPackagesRequest struct {
	// example:
	//
	// 110755000425****
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// example:
	//
	// 1593877765000
	EndCreateTime *int64 `json:"EndCreateTime,omitempty" xml:"EndCreateTime,omitempty"`
	// example:
	//
	// 1593877765000
	EndExecuteTime *int64 `json:"EndExecuteTime,omitempty" xml:"EndExecuteTime,omitempty"`
	// example:
	//
	// 2003****
	Executor *string `json:"Executor,omitempty" xml:"Executor,omitempty"`
	// example:
	//
	// abc
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10003
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDeploymentPackagesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentPackagesRequest) GoString() string {
	return s.String()
}

func (s *ListDeploymentPackagesRequest) SetCreator(v string) *ListDeploymentPackagesRequest {
	s.Creator = &v
	return s
}

func (s *ListDeploymentPackagesRequest) SetEndCreateTime(v int64) *ListDeploymentPackagesRequest {
	s.EndCreateTime = &v
	return s
}

func (s *ListDeploymentPackagesRequest) SetEndExecuteTime(v int64) *ListDeploymentPackagesRequest {
	s.EndExecuteTime = &v
	return s
}

func (s *ListDeploymentPackagesRequest) SetExecutor(v string) *ListDeploymentPackagesRequest {
	s.Executor = &v
	return s
}

func (s *ListDeploymentPackagesRequest) SetKeyword(v string) *ListDeploymentPackagesRequest {
	s.Keyword = &v
	return s
}

func (s *ListDeploymentPackagesRequest) SetPageNumber(v int32) *ListDeploymentPackagesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDeploymentPackagesRequest) SetPageSize(v int32) *ListDeploymentPackagesRequest {
	s.PageSize = &v
	return s
}

func (s *ListDeploymentPackagesRequest) SetProjectId(v int64) *ListDeploymentPackagesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDeploymentPackagesRequest) SetProjectIdentifier(v string) *ListDeploymentPackagesRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *ListDeploymentPackagesRequest) SetStatus(v int32) *ListDeploymentPackagesRequest {
	s.Status = &v
	return s
}

type ListDeploymentPackagesResponseBody struct {
	Data *ListDeploymentPackagesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 952795279527ab****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDeploymentPackagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentPackagesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDeploymentPackagesResponseBody) SetData(v *ListDeploymentPackagesResponseBodyData) *ListDeploymentPackagesResponseBody {
	s.Data = v
	return s
}

func (s *ListDeploymentPackagesResponseBody) SetRequestId(v string) *ListDeploymentPackagesResponseBody {
	s.RequestId = &v
	return s
}

type ListDeploymentPackagesResponseBodyData struct {
	Deployments []*ListDeploymentPackagesResponseBodyDataDeployments `json:"Deployments,omitempty" xml:"Deployments,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 20
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDeploymentPackagesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentPackagesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDeploymentPackagesResponseBodyData) SetDeployments(v []*ListDeploymentPackagesResponseBodyDataDeployments) *ListDeploymentPackagesResponseBodyData {
	s.Deployments = v
	return s
}

func (s *ListDeploymentPackagesResponseBodyData) SetPageNumber(v int64) *ListDeploymentPackagesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListDeploymentPackagesResponseBodyData) SetPageSize(v int64) *ListDeploymentPackagesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListDeploymentPackagesResponseBodyData) SetTotalCount(v int64) *ListDeploymentPackagesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListDeploymentPackagesResponseBodyDataDeployments struct {
	// example:
	//
	// 1593877765000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2003****
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// example:
	//
	// OK
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 1593877765000
	ExecuteTime *int64 `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	// example:
	//
	// 2003****
	Executor *string `json:"Executor,omitempty" xml:"Executor,omitempty"`
	// example:
	//
	// 11111
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// auto_created
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDeploymentPackagesResponseBodyDataDeployments) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentPackagesResponseBodyDataDeployments) GoString() string {
	return s.String()
}

func (s *ListDeploymentPackagesResponseBodyDataDeployments) SetCreateTime(v int64) *ListDeploymentPackagesResponseBodyDataDeployments {
	s.CreateTime = &v
	return s
}

func (s *ListDeploymentPackagesResponseBodyDataDeployments) SetCreator(v string) *ListDeploymentPackagesResponseBodyDataDeployments {
	s.Creator = &v
	return s
}

func (s *ListDeploymentPackagesResponseBodyDataDeployments) SetErrorMessage(v string) *ListDeploymentPackagesResponseBodyDataDeployments {
	s.ErrorMessage = &v
	return s
}

func (s *ListDeploymentPackagesResponseBodyDataDeployments) SetExecuteTime(v int64) *ListDeploymentPackagesResponseBodyDataDeployments {
	s.ExecuteTime = &v
	return s
}

func (s *ListDeploymentPackagesResponseBodyDataDeployments) SetExecutor(v string) *ListDeploymentPackagesResponseBodyDataDeployments {
	s.Executor = &v
	return s
}

func (s *ListDeploymentPackagesResponseBodyDataDeployments) SetId(v int64) *ListDeploymentPackagesResponseBodyDataDeployments {
	s.Id = &v
	return s
}

func (s *ListDeploymentPackagesResponseBodyDataDeployments) SetName(v string) *ListDeploymentPackagesResponseBodyDataDeployments {
	s.Name = &v
	return s
}

func (s *ListDeploymentPackagesResponseBodyDataDeployments) SetStatus(v int32) *ListDeploymentPackagesResponseBodyDataDeployments {
	s.Status = &v
	return s
}

type ListDeploymentPackagesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDeploymentPackagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDeploymentPackagesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDeploymentPackagesResponse) GoString() string {
	return s.String()
}

func (s *ListDeploymentPackagesResponse) SetHeaders(v map[string]*string) *ListDeploymentPackagesResponse {
	s.Headers = v
	return s
}

func (s *ListDeploymentPackagesResponse) SetStatusCode(v int32) *ListDeploymentPackagesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDeploymentPackagesResponse) SetBody(v *ListDeploymentPackagesResponseBody) *ListDeploymentPackagesResponse {
	s.Body = v
	return s
}

type ListDownstreamTaskInstancesRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListDownstreamTaskInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTaskInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListDownstreamTaskInstancesRequest) SetId(v int64) *ListDownstreamTaskInstancesRequest {
	s.Id = &v
	return s
}

func (s *ListDownstreamTaskInstancesRequest) SetPageNumber(v int32) *ListDownstreamTaskInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDownstreamTaskInstancesRequest) SetPageSize(v int32) *ListDownstreamTaskInstancesRequest {
	s.PageSize = &v
	return s
}

type ListDownstreamTaskInstancesResponseBody struct {
	// The pagination information.
	PagingInfo *ListDownstreamTaskInstancesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDownstreamTaskInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTaskInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDownstreamTaskInstancesResponseBody) SetPagingInfo(v *ListDownstreamTaskInstancesResponseBodyPagingInfo) *ListDownstreamTaskInstancesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBody) SetRequestId(v string) *ListDownstreamTaskInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ListDownstreamTaskInstancesResponseBodyPagingInfo struct {
	// The descendant instances.
	DownstreamTaskInstances []*ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstances `json:"DownstreamTaskInstances,omitempty" xml:"DownstreamTaskInstances,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The instances. This parameter is deprecated and replaced by the DownstreamTaskInstances parameter.
	TaskInstances []*ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances `json:"TaskInstances,omitempty" xml:"TaskInstances,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfo) SetDownstreamTaskInstances(v []*ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstances) *ListDownstreamTaskInstancesResponseBodyPagingInfo {
	s.DownstreamTaskInstances = v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfo) SetPageNumber(v int32) *ListDownstreamTaskInstancesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfo) SetPageSize(v int32) *ListDownstreamTaskInstancesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfo) SetTaskInstances(v []*ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) *ListDownstreamTaskInstancesResponseBodyPagingInfo {
	s.TaskInstances = v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfo) SetTotalCount(v int32) *ListDownstreamTaskInstancesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstances struct {
	// The scheduling dependency type. Valid values:
	//
	// 	- Normal
	//
	// 	- CrossCycle
	//
	// example:
	//
	// Normal
	DependencyType *string `json:"DependencyType,omitempty" xml:"DependencyType,omitempty"`
	// The information about a task instance.
	TaskInstance *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance `json:"TaskInstance,omitempty" xml:"TaskInstance,omitempty" type:"Struct"`
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstances) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstances) GoString() string {
	return s.String()
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstances) SetDependencyType(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstances {
	s.DependencyType = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstances) SetTaskInstance(v *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstances {
	s.TaskInstance = v
	return s
}

type ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The data timestamp.
	//
	// example:
	//
	// 1710239005403
	Bizdate *int64 `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment in which the data source is used. Valid values:
	//
	// 	- Dev
	//
	// 	- Prod
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The time when the instance finished running.
	//
	// example:
	//
	// 1710239005403
	FinishedTime *int64 `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The sequence number of the cycle. This parameter indicates the cycle of the task instance on the current day.
	//
	// example:
	//
	// 1
	PeriodNumber *int32 `json:"PeriodNumber,omitempty" xml:"PeriodNumber,omitempty"`
	// The priority of the task. Minimum value: 1. Maximum value: 8. A larger value indicates a higher priority. Default value: 1.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun mode.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times the instance is run. By default, the value starts from 1.
	//
	// example:
	//
	// 1
	RunNumber *int32 `json:"RunNumber,omitempty" xml:"RunNumber,omitempty"`
	// The runtime information about the instance.
	Runtime *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntime `json:"Runtime,omitempty" xml:"Runtime,omitempty" type:"Struct"`
	// The configurations of the runtime environment, such as the resource group information.
	RuntimeResource *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The time when the instance started to run.
	//
	// example:
	//
	// 1710239005403
	StartedTime *int64 `json:"StartedTime,omitempty" xml:"StartedTime,omitempty"`
	// The status of the instance. Valid values:
	//
	// 	- NotRun: The instance is not run.
	//
	// 	- Running: The instance is running.
	//
	// 	- WaitTime: The instance is waiting for the scheduling time to arrive.
	//
	// 	- CheckingCondition: Branch conditions are being checked for the instance.
	//
	// 	- WaitResource: The instance is waiting for resources.
	//
	// 	- Failure: The instance fails to be run.
	//
	// 	- Success: The instance is successfully run.
	//
	// 	- Checking: Data quality is being checked for the instance.
	//
	// 	- WaitTrigger: The instance is waiting to be triggered by external scheduling systems.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the task for which the instance is generated.
	//
	// example:
	//
	// 1234
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the task for which the instance is generated.
	//
	// example:
	//
	// SQL node
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The type of the task for which the instance is generated.
	//
	// example:
	//
	// ODPS_SQL
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The timeout period of task running. Unit: seconds.
	//
	// Note: The value of this parameter is rounded up by hour.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	TriggerRecurrence *string `json:"TriggerRecurrence,omitempty" xml:"TriggerRecurrence,omitempty"`
	// The scheduling time.
	//
	// example:
	//
	// 1710239005403
	TriggerTime *int64 `json:"TriggerTime,omitempty" xml:"TriggerTime,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	TriggerType *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
	// The ID of the workflow to which the instance belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
	// The workflow instance ID.
	//
	// example:
	//
	// 1234
	WorkflowInstanceId *int64 `json:"WorkflowInstanceId,omitempty" xml:"WorkflowInstanceId,omitempty"`
	// The type of the workflow instance. Valid values:
	//
	// 	- Normal
	//
	// 	- Manual
	//
	// 	- SmokeTest
	//
	// 	- SupplementData
	//
	// 	- ManualWorkflow
	//
	// example:
	//
	// Normal
	WorkflowInstanceType *string `json:"WorkflowInstanceType,omitempty" xml:"WorkflowInstanceType,omitempty"`
	// The name of the workflow to which the instance belongs.
	//
	// example:
	//
	// Test workflow
	WorkflowName *string `json:"WorkflowName,omitempty" xml:"WorkflowName,omitempty"`
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) GoString() string {
	return s.String()
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetBaselineId(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.BaselineId = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetBizdate(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.Bizdate = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetCreateTime(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.CreateTime = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetCreateUser(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.CreateUser = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetDataSource(v *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceDataSource) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.DataSource = v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetDescription(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.Description = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetEnvType(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.EnvType = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetFinishedTime(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.FinishedTime = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetId(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.Id = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetModifyTime(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.ModifyTime = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetModifyUser(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.ModifyUser = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetOwner(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.Owner = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetPeriodNumber(v int32) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.PeriodNumber = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetPriority(v int32) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.Priority = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetProjectId(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.ProjectId = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetRerunMode(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.RerunMode = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetRunNumber(v int32) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.RunNumber = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetRuntime(v *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntime) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.Runtime = v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetRuntimeResource(v *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntimeResource) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.RuntimeResource = v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetStartedTime(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.StartedTime = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetStatus(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.Status = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetTaskId(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.TaskId = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetTaskName(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.TaskName = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetTaskType(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.TaskType = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetTimeout(v int32) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.Timeout = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetTriggerRecurrence(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.TriggerRecurrence = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetTriggerTime(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.TriggerTime = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetTriggerType(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.TriggerType = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetWorkflowId(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.WorkflowId = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetWorkflowInstanceId(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.WorkflowInstanceId = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetWorkflowInstanceType(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.WorkflowInstanceType = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance) SetWorkflowName(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstance {
	s.WorkflowName = &v
	return s
}

type ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceDataSource) GoString() string {
	return s.String()
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceDataSource) SetName(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceDataSource {
	s.Name = &v
	return s
}

type ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntime struct {
	// The host for running.
	//
	// example:
	//
	// cn-shanghai.1.2
	Gateway *string `json:"Gateway,omitempty" xml:"Gateway,omitempty"`
	// The instance run ID.
	//
	// example:
	//
	// T3_123
	ProcessId *string `json:"ProcessId,omitempty" xml:"ProcessId,omitempty"`
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntime) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntime) GoString() string {
	return s.String()
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntime) SetGateway(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntime {
	s.Gateway = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntime) SetProcessId(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntime {
	s.ProcessId = &v
	return s
}

type ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntimeResource) GoString() string {
	return s.String()
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntimeResource) SetCu(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntimeResource {
	s.Cu = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntimeResource) SetImage(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntimeResource {
	s.Image = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntimeResource) SetResourceGroupId(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoDownstreamTaskInstancesTaskInstanceRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The data timestamp.
	//
	// example:
	//
	// 1710239005403
	Bizdate *int64 `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment in which the data source is used. Valid values:
	//
	// 	- Dev
	//
	// 	- Prod
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The time when the instance finished running.
	//
	// example:
	//
	// 1710239005403
	FinishedTime *int64 `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 100
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The sequence number of the cycle. This parameter indicates the cycle of the task instance on the current day.
	//
	// example:
	//
	// 1
	PeriodNumber *int32 `json:"PeriodNumber,omitempty" xml:"PeriodNumber,omitempty"`
	// The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// Deprecated
	//
	// The environment of the workspace. This parameter is deprecated and replaced by the EnvType parameter. Valid values:
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun mode.
	//
	// Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether it is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times the instance is run. By default, the value starts from 1.
	//
	// example:
	//
	// 1
	RunNumber *int32 `json:"RunNumber,omitempty" xml:"RunNumber,omitempty"`
	// The runtime information about the instance.
	Runtime *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime `json:"Runtime,omitempty" xml:"Runtime,omitempty" type:"Struct"`
	// The information about the resource group with which the instance is associated.
	RuntimeResource *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The time when the instance started to run.
	//
	// example:
	//
	// 1710239005403
	StartedTime *int64 `json:"StartedTime,omitempty" xml:"StartedTime,omitempty"`
	// The status of the instance. Valid values:
	//
	// 	- NotRun: The instance is not run.
	//
	// 	- Running: The instance is running.
	//
	// 	- WaitTime: The instance is waiting for the scheduling time to arrive.
	//
	// 	- CheckingCondition: Branch conditions are being checked for the instance.
	//
	// 	- WaitResource: The instance is waiting for resources.
	//
	// 	- Failure: The instance fails to be run.
	//
	// 	- Success: The instance is successfully run.
	//
	// 	- Checking: Data quality is being checked for the instance.
	//
	// 	- WaitTrigger: The instance is waiting to be triggered by external scheduling systems.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The scheduling dependency type. Valid values:
	//
	// 	- Normal: same-cycle scheduling dependency
	//
	// 	- CrossCycle: cross-cycle scheduling dependency
	//
	// example:
	//
	// Normal
	StepType *string `json:"StepType,omitempty" xml:"StepType,omitempty"`
	// The ID of the task for which the instance is generated.
	//
	// example:
	//
	// 1234
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the task for which the instance is generated.
	//
	// example:
	//
	// SQL node
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The type of the task for which the instance is generated.
	//
	// example:
	//
	// ODPS_SQL
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The timeout period of task running. Unit: seconds.
	//
	// Note: The value of this parameter is rounded up by hour.
	//
	// example:
	//
	// 1
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler.
	//
	// Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	TriggerRecurrence *string `json:"TriggerRecurrence,omitempty" xml:"TriggerRecurrence,omitempty"`
	// The scheduling time.
	//
	// example:
	//
	// 1710239005403
	TriggerTime *int64 `json:"TriggerTime,omitempty" xml:"TriggerTime,omitempty"`
	// The method to trigger instance scheduling.
	//
	// Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	TriggerType *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
	// The ID of the workflow to which the instance belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
	// The workflow instance ID.
	//
	// example:
	//
	// 1234
	WorkflowInstanceId *int64 `json:"WorkflowInstanceId,omitempty" xml:"WorkflowInstanceId,omitempty"`
	// The type of the workflow instance.
	//
	// Valid values:
	//
	// 	- SmokeTest
	//
	// 	- SupplementData
	//
	// 	- Manual
	//
	// 	- ManualWorkflow
	//
	// 	- Normal
	//
	// 	- ManualFlow
	//
	// example:
	//
	// Normal
	WorkflowInstanceType *string `json:"WorkflowInstanceType,omitempty" xml:"WorkflowInstanceType,omitempty"`
	// The name of the workflow to which the instance belongs.
	//
	// example:
	//
	// Test workflow
	WorkflowName *string `json:"WorkflowName,omitempty" xml:"WorkflowName,omitempty"`
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) GoString() string {
	return s.String()
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetBaselineId(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.BaselineId = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetBizdate(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Bizdate = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetCreateTime(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.CreateTime = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetCreateUser(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.CreateUser = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetDataSource(v *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.DataSource = v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetDescription(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Description = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetEnvType(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.EnvType = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetFinishedTime(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.FinishedTime = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetId(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Id = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetModifyTime(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.ModifyTime = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetModifyUser(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.ModifyUser = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetOwner(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Owner = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetPeriodNumber(v int32) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.PeriodNumber = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetPriority(v int32) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Priority = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetProjectEnv(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.ProjectEnv = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetProjectId(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.ProjectId = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetRerunMode(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.RerunMode = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetRunNumber(v int32) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.RunNumber = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetRuntime(v *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Runtime = v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetRuntimeResource(v *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.RuntimeResource = v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetStartedTime(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.StartedTime = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetStatus(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Status = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetStepType(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.StepType = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTaskId(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TaskId = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTaskName(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TaskName = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTaskType(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TaskType = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTimeout(v int32) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Timeout = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTriggerRecurrence(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TriggerRecurrence = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTriggerTime(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TriggerTime = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTriggerType(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TriggerType = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetWorkflowId(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WorkflowId = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetWorkflowInstanceId(v int64) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WorkflowInstanceId = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetWorkflowInstanceType(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WorkflowInstanceType = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetWorkflowName(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WorkflowName = &v
	return s
}

type ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource) GoString() string {
	return s.String()
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource) SetName(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource {
	s.Name = &v
	return s
}

type ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime struct {
	// The host for running.
	//
	// example:
	//
	// cn-shanghai.1.2
	Gateway *string `json:"Gateway,omitempty" xml:"Gateway,omitempty"`
	// The instance run ID.
	//
	// example:
	//
	// T3_123
	ProcessId *string `json:"ProcessId,omitempty" xml:"ProcessId,omitempty"`
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) GoString() string {
	return s.String()
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) SetGateway(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime {
	s.Gateway = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) SetProcessId(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime {
	s.ProcessId = &v
	return s
}

type ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) GoString() string {
	return s.String()
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) SetCu(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource {
	s.Cu = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) SetImage(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource {
	s.Image = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) SetResourceGroupId(v string) *ListDownstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ListDownstreamTaskInstancesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDownstreamTaskInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDownstreamTaskInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTaskInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListDownstreamTaskInstancesResponse) SetHeaders(v map[string]*string) *ListDownstreamTaskInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListDownstreamTaskInstancesResponse) SetStatusCode(v int32) *ListDownstreamTaskInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDownstreamTaskInstancesResponse) SetBody(v *ListDownstreamTaskInstancesResponseBody) *ListDownstreamTaskInstancesResponse {
	s.Body = v
	return s
}

type ListDownstreamTasksRequest struct {
	// The task ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The environment of the workspace.
	//
	// Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s ListDownstreamTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTasksRequest) GoString() string {
	return s.String()
}

func (s *ListDownstreamTasksRequest) SetId(v int64) *ListDownstreamTasksRequest {
	s.Id = &v
	return s
}

func (s *ListDownstreamTasksRequest) SetPageNumber(v int32) *ListDownstreamTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDownstreamTasksRequest) SetPageSize(v int32) *ListDownstreamTasksRequest {
	s.PageSize = &v
	return s
}

func (s *ListDownstreamTasksRequest) SetProjectEnv(v string) *ListDownstreamTasksRequest {
	s.ProjectEnv = &v
	return s
}

type ListDownstreamTasksResponseBody struct {
	// The pagination information.
	PagingInfo *ListDownstreamTasksResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDownstreamTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListDownstreamTasksResponseBody) SetPagingInfo(v *ListDownstreamTasksResponseBodyPagingInfo) *ListDownstreamTasksResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListDownstreamTasksResponseBody) SetRequestId(v string) *ListDownstreamTasksResponseBody {
	s.RequestId = &v
	return s
}

type ListDownstreamTasksResponseBodyPagingInfo struct {
	// The descendant tasks.
	DownstreamTasks []*ListDownstreamTasksResponseBodyPagingInfoDownstreamTasks `json:"DownstreamTasks,omitempty" xml:"DownstreamTasks,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The tasks. This parameter is deprecated and replaced by the DownstreamTasks parameter.
	Tasks []*ListDownstreamTasksResponseBodyPagingInfoTasks `json:"Tasks,omitempty" xml:"Tasks,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDownstreamTasksResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTasksResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListDownstreamTasksResponseBodyPagingInfo) SetDownstreamTasks(v []*ListDownstreamTasksResponseBodyPagingInfoDownstreamTasks) *ListDownstreamTasksResponseBodyPagingInfo {
	s.DownstreamTasks = v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfo) SetPageNumber(v int32) *ListDownstreamTasksResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfo) SetPageSize(v int32) *ListDownstreamTasksResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfo) SetTasks(v []*ListDownstreamTasksResponseBodyPagingInfoTasks) *ListDownstreamTasksResponseBodyPagingInfo {
	s.Tasks = v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfo) SetTotalCount(v int32) *ListDownstreamTasksResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListDownstreamTasksResponseBodyPagingInfoDownstreamTasks struct {
	// The scheduling dependency type. Valid values:
	//
	// 	- Normal: same-cycle scheduling dependency
	//
	// 	- CrossCycle: cross-cycle scheduling dependency
	//
	// example:
	//
	// Normal
	DependencyType *string `json:"DependencyType,omitempty" xml:"DependencyType,omitempty"`
	// The information about the task.
	Task *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask `json:"Task,omitempty" xml:"Task,omitempty" type:"Struct"`
}

func (s ListDownstreamTasksResponseBodyPagingInfoDownstreamTasks) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTasksResponseBodyPagingInfoDownstreamTasks) GoString() string {
	return s.String()
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasks) SetDependencyType(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasks {
	s.DependencyType = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasks) SetTask(v *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasks {
	s.Task = v
	return s
}

type ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The instance generation mode. Valid values:
	//
	// 	- T+1
	//
	// 	- Immediately
	//
	// example:
	//
	// T+1
	InstanceMode *string `json:"InstanceMode,omitempty" xml:"InstanceMode,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The name of the task.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The priority of the task. Valid values: 1 to 8.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun interval. Unit: seconds.
	//
	// example:
	//
	// 60
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode. Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The configurations of the runtime environment, such as the resource group information.
	RuntimeResource *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The trigger method.
	Trigger *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	// The type of the task.
	//
	// example:
	//
	// ODPS_SQL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the workflow to which the task belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) GoString() string {
	return s.String()
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetBaselineId(v int64) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.BaselineId = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetCreateTime(v int64) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.CreateTime = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetCreateUser(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.CreateUser = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetDataSource(v *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskDataSource) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.DataSource = v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetDescription(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.Description = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetEnvType(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.EnvType = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetId(v int64) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.Id = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetInstanceMode(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.InstanceMode = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetModifyTime(v int64) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.ModifyTime = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetModifyUser(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.ModifyUser = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetName(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.Name = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetOwner(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.Owner = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetPriority(v int32) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.Priority = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetProjectId(v int64) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.ProjectId = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetRerunInterval(v int32) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.RerunInterval = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetRerunMode(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.RerunMode = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetRerunTimes(v int32) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.RerunTimes = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetRuntimeResource(v *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskRuntimeResource) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.RuntimeResource = v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetTimeout(v int32) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.Timeout = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetTrigger(v *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.Trigger = v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetType(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.Type = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask) SetWorkflowId(v int64) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTask {
	s.WorkflowId = &v
	return s
}

type ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskDataSource) GoString() string {
	return s.String()
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskDataSource) SetName(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskDataSource {
	s.Name = &v
	return s
}

type ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskRuntimeResource) GoString() string {
	return s.String()
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskRuntimeResource) SetCu(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskRuntimeResource {
	s.Cu = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskRuntimeResource) SetImage(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskRuntimeResource {
	s.Image = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskRuntimeResource) SetResourceGroupId(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger struct {
	// The CRON expression. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 9999-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time zone.
	//
	// example:
	//
	// Asia/Shanghai
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger) GoString() string {
	return s.String()
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger) SetCron(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger {
	s.Cron = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger) SetEndTime(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger {
	s.EndTime = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger) SetRecurrence(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger {
	s.Recurrence = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger) SetStartTime(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger {
	s.StartTime = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger) SetTimezone(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger {
	s.Timezone = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger) SetType(v string) *ListDownstreamTasksResponseBodyPagingInfoDownstreamTasksTaskTrigger {
	s.Type = &v
	return s
}

type ListDownstreamTasksResponseBodyPagingInfoTasks struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *ListDownstreamTasksResponseBodyPagingInfoTasksDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description of the task.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The instance generation mode. Valid values:
	//
	// 	- T+1
	//
	// 	- Immediately
	//
	// example:
	//
	// T+1
	InstanceMode *string `json:"InstanceMode,omitempty" xml:"InstanceMode,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The name of the task.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// Deprecated
	//
	// The environment of the workspace. This parameter is deprecated and replaced by the EnvType parameter.
	//
	// Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun interval. Unit: seconds.
	//
	// example:
	//
	// 60
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode.
	//
	// Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether it is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The configurations of the runtime environment, such as the resource group information.
	RuntimeResource *ListDownstreamTasksResponseBodyPagingInfoTasksRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The scheduling dependency type. Valid values:
	//
	// 	- Normal: same-cycle scheduling dependency
	//
	// 	- CrossCycle: cross-cycle scheduling dependency
	//
	// example:
	//
	// Normal
	StepType *string `json:"StepType,omitempty" xml:"StepType,omitempty"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The method to trigger task scheduling.
	Trigger *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	// The type of the task.
	//
	// example:
	//
	// ODPS_SQL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the workflow to which the task belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s ListDownstreamTasksResponseBodyPagingInfoTasks) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTasksResponseBodyPagingInfoTasks) GoString() string {
	return s.String()
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetBaselineId(v int64) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.BaselineId = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetCreateTime(v int64) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.CreateTime = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetCreateUser(v string) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.CreateUser = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetDataSource(v *ListDownstreamTasksResponseBodyPagingInfoTasksDataSource) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.DataSource = v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetDescription(v string) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.Description = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetEnvType(v string) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.EnvType = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetId(v int64) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.Id = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetInstanceMode(v string) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.InstanceMode = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetModifyTime(v int64) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.ModifyTime = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetModifyUser(v string) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.ModifyUser = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetName(v string) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.Name = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetOwner(v string) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.Owner = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetPriority(v int32) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.Priority = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetProjectEnv(v string) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.ProjectEnv = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetProjectId(v int64) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.ProjectId = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetRerunInterval(v int32) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.RerunInterval = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetRerunMode(v string) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.RerunMode = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetRerunTimes(v int32) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.RerunTimes = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetRuntimeResource(v *ListDownstreamTasksResponseBodyPagingInfoTasksRuntimeResource) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.RuntimeResource = v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetStepType(v string) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.StepType = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetTimeout(v int32) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.Timeout = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetTrigger(v *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.Trigger = v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetType(v string) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.Type = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasks) SetWorkflowId(v int64) *ListDownstreamTasksResponseBodyPagingInfoTasks {
	s.WorkflowId = &v
	return s
}

type ListDownstreamTasksResponseBodyPagingInfoTasksDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListDownstreamTasksResponseBodyPagingInfoTasksDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTasksResponseBodyPagingInfoTasksDataSource) GoString() string {
	return s.String()
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasksDataSource) SetName(v string) *ListDownstreamTasksResponseBodyPagingInfoTasksDataSource {
	s.Name = &v
	return s
}

type ListDownstreamTasksResponseBodyPagingInfoTasksRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListDownstreamTasksResponseBodyPagingInfoTasksRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTasksResponseBodyPagingInfoTasksRuntimeResource) GoString() string {
	return s.String()
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasksRuntimeResource) SetCu(v string) *ListDownstreamTasksResponseBodyPagingInfoTasksRuntimeResource {
	s.Cu = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasksRuntimeResource) SetImage(v string) *ListDownstreamTasksResponseBodyPagingInfoTasksRuntimeResource {
	s.Image = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasksRuntimeResource) SetResourceGroupId(v string) *ListDownstreamTasksResponseBodyPagingInfoTasksRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ListDownstreamTasksResponseBodyPagingInfoTasksTrigger struct {
	// The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 9999-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time zone.
	//
	// example:
	//
	// Asia/Shanghai
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	// The trigger type.
	//
	// Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDownstreamTasksResponseBodyPagingInfoTasksTrigger) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTasksResponseBodyPagingInfoTasksTrigger) GoString() string {
	return s.String()
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger) SetCron(v string) *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger {
	s.Cron = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger) SetEndTime(v string) *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger {
	s.EndTime = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger) SetRecurrence(v string) *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger {
	s.Recurrence = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger) SetStartTime(v string) *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger {
	s.StartTime = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger) SetTimezone(v string) *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger {
	s.Timezone = &v
	return s
}

func (s *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger) SetType(v string) *ListDownstreamTasksResponseBodyPagingInfoTasksTrigger {
	s.Type = &v
	return s
}

type ListDownstreamTasksResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDownstreamTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDownstreamTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDownstreamTasksResponse) GoString() string {
	return s.String()
}

func (s *ListDownstreamTasksResponse) SetHeaders(v map[string]*string) *ListDownstreamTasksResponse {
	s.Headers = v
	return s
}

func (s *ListDownstreamTasksResponse) SetStatusCode(v int32) *ListDownstreamTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDownstreamTasksResponse) SetBody(v *ListDownstreamTasksResponseBody) *ListDownstreamTasksResponse {
	s.Body = v
	return s
}

type ListEntitiesInMetaCollectionRequest struct {
	EntityDescription *string `json:"EntityDescription,omitempty" xml:"EntityDescription,omitempty"`
	// example:
	//
	// test1
	EntityName *string `json:"EntityName,omitempty" xml:"EntityName,omitempty"`
	// example:
	//
	// dlf-table
	EntityType *string `json:"EntityType,omitempty" xml:"EntityType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// category.123
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// Name
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListEntitiesInMetaCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEntitiesInMetaCollectionRequest) GoString() string {
	return s.String()
}

func (s *ListEntitiesInMetaCollectionRequest) SetEntityDescription(v string) *ListEntitiesInMetaCollectionRequest {
	s.EntityDescription = &v
	return s
}

func (s *ListEntitiesInMetaCollectionRequest) SetEntityName(v string) *ListEntitiesInMetaCollectionRequest {
	s.EntityName = &v
	return s
}

func (s *ListEntitiesInMetaCollectionRequest) SetEntityType(v string) *ListEntitiesInMetaCollectionRequest {
	s.EntityType = &v
	return s
}

func (s *ListEntitiesInMetaCollectionRequest) SetId(v string) *ListEntitiesInMetaCollectionRequest {
	s.Id = &v
	return s
}

func (s *ListEntitiesInMetaCollectionRequest) SetOrder(v string) *ListEntitiesInMetaCollectionRequest {
	s.Order = &v
	return s
}

func (s *ListEntitiesInMetaCollectionRequest) SetPageNumber(v int32) *ListEntitiesInMetaCollectionRequest {
	s.PageNumber = &v
	return s
}

func (s *ListEntitiesInMetaCollectionRequest) SetPageSize(v int32) *ListEntitiesInMetaCollectionRequest {
	s.PageSize = &v
	return s
}

func (s *ListEntitiesInMetaCollectionRequest) SetSortBy(v string) *ListEntitiesInMetaCollectionRequest {
	s.SortBy = &v
	return s
}

type ListEntitiesInMetaCollectionResponseBody struct {
	PagingInfo *ListEntitiesInMetaCollectionResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// F05080B0-CCE6-5D22-B284-34A51C5D4E28
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListEntitiesInMetaCollectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEntitiesInMetaCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *ListEntitiesInMetaCollectionResponseBody) SetPagingInfo(v *ListEntitiesInMetaCollectionResponseBodyPagingInfo) *ListEntitiesInMetaCollectionResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListEntitiesInMetaCollectionResponseBody) SetRequestId(v string) *ListEntitiesInMetaCollectionResponseBody {
	s.RequestId = &v
	return s
}

type ListEntitiesInMetaCollectionResponseBodyPagingInfo struct {
	Entities []*ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities `json:"Entities,omitempty" xml:"Entities,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 1
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListEntitiesInMetaCollectionResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEntitiesInMetaCollectionResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListEntitiesInMetaCollectionResponseBodyPagingInfo) SetEntities(v []*ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities) *ListEntitiesInMetaCollectionResponseBodyPagingInfo {
	s.Entities = v
	return s
}

func (s *ListEntitiesInMetaCollectionResponseBodyPagingInfo) SetPageNumber(v int32) *ListEntitiesInMetaCollectionResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListEntitiesInMetaCollectionResponseBodyPagingInfo) SetPageSize(v int32) *ListEntitiesInMetaCollectionResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListEntitiesInMetaCollectionResponseBodyPagingInfo) SetTotalCount(v int32) *ListEntitiesInMetaCollectionResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities struct {
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// 1737078994080
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// dlf-table:123456789:test_catalog:test_database::test_table
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 1737078994080
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// example:
	//
	// test_table
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// dlf-table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities) String() string {
	return tea.Prettify(s)
}

func (s ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities) GoString() string {
	return s.String()
}

func (s *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities) SetComment(v string) *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities {
	s.Comment = &v
	return s
}

func (s *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities) SetCreateTime(v int64) *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities {
	s.CreateTime = &v
	return s
}

func (s *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities) SetDescription(v string) *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities {
	s.Description = &v
	return s
}

func (s *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities) SetId(v string) *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities {
	s.Id = &v
	return s
}

func (s *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities) SetModifyTime(v int64) *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities {
	s.ModifyTime = &v
	return s
}

func (s *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities) SetName(v string) *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities {
	s.Name = &v
	return s
}

func (s *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities) SetType(v string) *ListEntitiesInMetaCollectionResponseBodyPagingInfoEntities {
	s.Type = &v
	return s
}

type ListEntitiesInMetaCollectionResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEntitiesInMetaCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEntitiesInMetaCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEntitiesInMetaCollectionResponse) GoString() string {
	return s.String()
}

func (s *ListEntitiesInMetaCollectionResponse) SetHeaders(v map[string]*string) *ListEntitiesInMetaCollectionResponse {
	s.Headers = v
	return s
}

func (s *ListEntitiesInMetaCollectionResponse) SetStatusCode(v int32) *ListEntitiesInMetaCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEntitiesInMetaCollectionResponse) SetBody(v *ListEntitiesInMetaCollectionResponseBody) *ListEntitiesInMetaCollectionResponse {
	s.Body = v
	return s
}

type ListFileVersionsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 100000001
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 100001
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s ListFileVersionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFileVersionsRequest) GoString() string {
	return s.String()
}

func (s *ListFileVersionsRequest) SetFileId(v int64) *ListFileVersionsRequest {
	s.FileId = &v
	return s
}

func (s *ListFileVersionsRequest) SetPageNumber(v int32) *ListFileVersionsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFileVersionsRequest) SetPageSize(v int32) *ListFileVersionsRequest {
	s.PageSize = &v
	return s
}

func (s *ListFileVersionsRequest) SetProjectId(v int64) *ListFileVersionsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFileVersionsRequest) SetProjectIdentifier(v string) *ListFileVersionsRequest {
	s.ProjectIdentifier = &v
	return s
}

type ListFileVersionsResponseBody struct {
	Data *ListFileVersionsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListFileVersionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFileVersionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListFileVersionsResponseBody) SetData(v *ListFileVersionsResponseBodyData) *ListFileVersionsResponseBody {
	s.Data = v
	return s
}

func (s *ListFileVersionsResponseBody) SetErrorCode(v string) *ListFileVersionsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListFileVersionsResponseBody) SetErrorMessage(v string) *ListFileVersionsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListFileVersionsResponseBody) SetHttpStatusCode(v int32) *ListFileVersionsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListFileVersionsResponseBody) SetRequestId(v string) *ListFileVersionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFileVersionsResponseBody) SetSuccess(v bool) *ListFileVersionsResponseBody {
	s.Success = &v
	return s
}

type ListFileVersionsResponseBodyData struct {
	FileVersions []*ListFileVersionsResponseBodyDataFileVersions `json:"FileVersions,omitempty" xml:"FileVersions,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 13
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFileVersionsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListFileVersionsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListFileVersionsResponseBodyData) SetFileVersions(v []*ListFileVersionsResponseBodyDataFileVersions) *ListFileVersionsResponseBodyData {
	s.FileVersions = v
	return s
}

func (s *ListFileVersionsResponseBodyData) SetPageNumber(v int32) *ListFileVersionsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListFileVersionsResponseBodyData) SetPageSize(v int32) *ListFileVersionsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListFileVersionsResponseBodyData) SetTotalCount(v int32) *ListFileVersionsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListFileVersionsResponseBodyDataFileVersions struct {
	// example:
	//
	// UPDATE
	ChangeType *string `json:"ChangeType,omitempty" xml:"ChangeType,omitempty"`
	// example:
	//
	// Second version submission
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// 1593881265000
	CommitTime *int64 `json:"CommitTime,omitempty" xml:"CommitTime,omitempty"`
	// example:
	//
	// 73842342****
	CommitUser *string `json:"CommitUser,omitempty" xml:"CommitUser,omitempty"`
	// example:
	//
	// SHOW TABLES;
	FileContent *string `json:"FileContent,omitempty" xml:"FileContent,omitempty"`
	// example:
	//
	// ods_user_info_d
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// {"fileName":"ods_user_info_d","fileType":10}
	FilePropertyContent *string `json:"FilePropertyContent,omitempty" xml:"FilePropertyContent,omitempty"`
	// example:
	//
	// 2
	FileVersion *int32 `json:"FileVersion,omitempty" xml:"FileVersion,omitempty"`
	// example:
	//
	// false
	IsCurrentProd *bool `json:"IsCurrentProd,omitempty" xml:"IsCurrentProd,omitempty"`
	// example:
	//
	// {"cycleType":0,"cronExpress":"00 05 00 	- 	- ?"}
	NodeContent *string `json:"NodeContent,omitempty" xml:"NodeContent,omitempty"`
	// example:
	//
	// 1234
	NodeId *int64 `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// COMMITTED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// NORMAL
	UseType *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s ListFileVersionsResponseBodyDataFileVersions) String() string {
	return tea.Prettify(s)
}

func (s ListFileVersionsResponseBodyDataFileVersions) GoString() string {
	return s.String()
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetChangeType(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.ChangeType = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetComment(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.Comment = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetCommitTime(v int64) *ListFileVersionsResponseBodyDataFileVersions {
	s.CommitTime = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetCommitUser(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.CommitUser = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetFileContent(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.FileContent = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetFileName(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.FileName = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetFilePropertyContent(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.FilePropertyContent = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetFileVersion(v int32) *ListFileVersionsResponseBodyDataFileVersions {
	s.FileVersion = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetIsCurrentProd(v bool) *ListFileVersionsResponseBodyDataFileVersions {
	s.IsCurrentProd = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetNodeContent(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.NodeContent = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetNodeId(v int64) *ListFileVersionsResponseBodyDataFileVersions {
	s.NodeId = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetStatus(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.Status = &v
	return s
}

func (s *ListFileVersionsResponseBodyDataFileVersions) SetUseType(v string) *ListFileVersionsResponseBodyDataFileVersions {
	s.UseType = &v
	return s
}

type ListFileVersionsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFileVersionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFileVersionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFileVersionsResponse) GoString() string {
	return s.String()
}

func (s *ListFileVersionsResponse) SetHeaders(v map[string]*string) *ListFileVersionsResponse {
	s.Headers = v
	return s
}

func (s *ListFileVersionsResponse) SetStatusCode(v int32) *ListFileVersionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFileVersionsResponse) SetBody(v *ListFileVersionsResponseBody) *ListFileVersionsResponse {
	s.Body = v
	return s
}

type ListFilesRequest struct {
	// example:
	//
	// 1
	CommitStatus *int32 `json:"CommitStatus,omitempty" xml:"CommitStatus,omitempty"`
	// example:
	//
	// ods_create.sql
	ExactFileName *string `json:"ExactFileName,omitempty" xml:"ExactFileName,omitempty"`
	// example:
	//
	// Business_process/my_first_business_process/MaxCompute/ods_layer
	FileFolderPath *string `json:"FileFolderPath,omitempty" xml:"FileFolderPath,omitempty"`
	// example:
	//
	// 78237,816123
	FileIdIn *string `json:"FileIdIn,omitempty" xml:"FileIdIn,omitempty"`
	// example:
	//
	// 10,23
	FileTypes *string `json:"FileTypes,omitempty" xml:"FileTypes,omitempty"`
	// example:
	//
	// ods
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// 11233***
	LastEditUser *string `json:"LastEditUser,omitempty" xml:"LastEditUser,omitempty"`
	// example:
	//
	// false
	NeedAbsoluteFolderPath *bool `json:"NeedAbsoluteFolderPath,omitempty" xml:"NeedAbsoluteFolderPath,omitempty"`
	// example:
	//
	// false
	NeedContent *bool `json:"NeedContent,omitempty" xml:"NeedContent,omitempty"`
	// example:
	//
	// 123541234
	NodeId *int64 `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// 3726346****
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	// example:
	//
	// NORMAL
	UseType *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s ListFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFilesRequest) GoString() string {
	return s.String()
}

func (s *ListFilesRequest) SetCommitStatus(v int32) *ListFilesRequest {
	s.CommitStatus = &v
	return s
}

func (s *ListFilesRequest) SetExactFileName(v string) *ListFilesRequest {
	s.ExactFileName = &v
	return s
}

func (s *ListFilesRequest) SetFileFolderPath(v string) *ListFilesRequest {
	s.FileFolderPath = &v
	return s
}

func (s *ListFilesRequest) SetFileIdIn(v string) *ListFilesRequest {
	s.FileIdIn = &v
	return s
}

func (s *ListFilesRequest) SetFileTypes(v string) *ListFilesRequest {
	s.FileTypes = &v
	return s
}

func (s *ListFilesRequest) SetKeyword(v string) *ListFilesRequest {
	s.Keyword = &v
	return s
}

func (s *ListFilesRequest) SetLastEditUser(v string) *ListFilesRequest {
	s.LastEditUser = &v
	return s
}

func (s *ListFilesRequest) SetNeedAbsoluteFolderPath(v bool) *ListFilesRequest {
	s.NeedAbsoluteFolderPath = &v
	return s
}

func (s *ListFilesRequest) SetNeedContent(v bool) *ListFilesRequest {
	s.NeedContent = &v
	return s
}

func (s *ListFilesRequest) SetNodeId(v int64) *ListFilesRequest {
	s.NodeId = &v
	return s
}

func (s *ListFilesRequest) SetOwner(v string) *ListFilesRequest {
	s.Owner = &v
	return s
}

func (s *ListFilesRequest) SetPageNumber(v int32) *ListFilesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFilesRequest) SetPageSize(v int32) *ListFilesRequest {
	s.PageSize = &v
	return s
}

func (s *ListFilesRequest) SetProjectId(v int64) *ListFilesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFilesRequest) SetProjectIdentifier(v string) *ListFilesRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *ListFilesRequest) SetUseType(v string) *ListFilesRequest {
	s.UseType = &v
	return s
}

type ListFilesResponseBody struct {
	Data *ListFilesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListFilesResponseBody) SetData(v *ListFilesResponseBodyData) *ListFilesResponseBody {
	s.Data = v
	return s
}

func (s *ListFilesResponseBody) SetErrorCode(v string) *ListFilesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListFilesResponseBody) SetErrorMessage(v string) *ListFilesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListFilesResponseBody) SetHttpStatusCode(v int32) *ListFilesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListFilesResponseBody) SetRequestId(v string) *ListFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFilesResponseBody) SetSuccess(v bool) *ListFilesResponseBody {
	s.Success = &v
	return s
}

type ListFilesResponseBodyData struct {
	Files []*ListFilesResponseBodyDataFiles `json:"Files,omitempty" xml:"Files,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 13
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFilesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListFilesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListFilesResponseBodyData) SetFiles(v []*ListFilesResponseBodyDataFiles) *ListFilesResponseBodyData {
	s.Files = v
	return s
}

func (s *ListFilesResponseBodyData) SetPageNumber(v int32) *ListFilesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListFilesResponseBodyData) SetPageSize(v int32) *ListFilesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListFilesResponseBodyData) SetTotalCount(v int32) *ListFilesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListFilesResponseBodyDataFiles struct {
	// example:
	//
	// Business_process/my_first_business_process/MaxCompute/ods_layer
	AbsoluteFolderPath *string `json:"AbsoluteFolderPath,omitempty" xml:"AbsoluteFolderPath,omitempty"`
	// example:
	//
	// true
	AutoParsing *bool `json:"AutoParsing,omitempty" xml:"AutoParsing,omitempty"`
	// example:
	//
	// 300000
	BizId *int64 `json:"BizId,omitempty" xml:"BizId,omitempty"`
	// example:
	//
	// 300000
	BusinessId *int64 `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	// example:
	//
	// 1
	CommitStatus *int32 `json:"CommitStatus,omitempty" xml:"CommitStatus,omitempty"`
	// example:
	//
	// odps_source
	ConnectionName *string `json:"ConnectionName,omitempty" xml:"ConnectionName,omitempty"`
	// example:
	//
	// SHOW TABLES;
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1593950832000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 382762****
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// example:
	//
	// 2
	CurrentVersion *int32 `json:"CurrentVersion,omitempty" xml:"CurrentVersion,omitempty"`
	// example:
	//
	// my test datastudio file
	FileDescription *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	// example:
	//
	// 2735c2****
	FileFolderId *string `json:"FileFolderId,omitempty" xml:"FileFolderId,omitempty"`
	// example:
	//
	// 10000001
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// ods_user_info_d
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 10
	FileType *int32 `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// false
	IsMaxCompute *bool `json:"IsMaxCompute,omitempty" xml:"IsMaxCompute,omitempty"`
	// example:
	//
	// 1593950832000
	LastEditTime *int64 `json:"LastEditTime,omitempty" xml:"LastEditTime,omitempty"`
	// example:
	//
	// 382762****
	LastEditUser *string `json:"LastEditUser,omitempty" xml:"LastEditUser,omitempty"`
	// example:
	//
	// 300001
	NodeId *int64 `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// 3872572****
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// example:
	//
	// -1
	ParentId *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// NORMAL
	UseType *string `json:"UseType,omitempty" xml:"UseType,omitempty"`
}

func (s ListFilesResponseBodyDataFiles) String() string {
	return tea.Prettify(s)
}

func (s ListFilesResponseBodyDataFiles) GoString() string {
	return s.String()
}

func (s *ListFilesResponseBodyDataFiles) SetAbsoluteFolderPath(v string) *ListFilesResponseBodyDataFiles {
	s.AbsoluteFolderPath = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetAutoParsing(v bool) *ListFilesResponseBodyDataFiles {
	s.AutoParsing = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetBizId(v int64) *ListFilesResponseBodyDataFiles {
	s.BizId = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetBusinessId(v int64) *ListFilesResponseBodyDataFiles {
	s.BusinessId = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetCommitStatus(v int32) *ListFilesResponseBodyDataFiles {
	s.CommitStatus = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetConnectionName(v string) *ListFilesResponseBodyDataFiles {
	s.ConnectionName = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetContent(v string) *ListFilesResponseBodyDataFiles {
	s.Content = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetCreateTime(v int64) *ListFilesResponseBodyDataFiles {
	s.CreateTime = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetCreateUser(v string) *ListFilesResponseBodyDataFiles {
	s.CreateUser = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetCurrentVersion(v int32) *ListFilesResponseBodyDataFiles {
	s.CurrentVersion = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetFileDescription(v string) *ListFilesResponseBodyDataFiles {
	s.FileDescription = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetFileFolderId(v string) *ListFilesResponseBodyDataFiles {
	s.FileFolderId = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetFileId(v int64) *ListFilesResponseBodyDataFiles {
	s.FileId = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetFileName(v string) *ListFilesResponseBodyDataFiles {
	s.FileName = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetFileType(v int32) *ListFilesResponseBodyDataFiles {
	s.FileType = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetIsMaxCompute(v bool) *ListFilesResponseBodyDataFiles {
	s.IsMaxCompute = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetLastEditTime(v int64) *ListFilesResponseBodyDataFiles {
	s.LastEditTime = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetLastEditUser(v string) *ListFilesResponseBodyDataFiles {
	s.LastEditUser = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetNodeId(v int64) *ListFilesResponseBodyDataFiles {
	s.NodeId = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetOwner(v string) *ListFilesResponseBodyDataFiles {
	s.Owner = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetParentId(v int64) *ListFilesResponseBodyDataFiles {
	s.ParentId = &v
	return s
}

func (s *ListFilesResponseBodyDataFiles) SetUseType(v string) *ListFilesResponseBodyDataFiles {
	s.UseType = &v
	return s
}

type ListFilesResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFilesResponse) GoString() string {
	return s.String()
}

func (s *ListFilesResponse) SetHeaders(v map[string]*string) *ListFilesResponse {
	s.Headers = v
	return s
}

func (s *ListFilesResponse) SetStatusCode(v int32) *ListFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFilesResponse) SetBody(v *ListFilesResponseBody) *ListFilesResponse {
	s.Body = v
	return s
}

type ListFoldersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Business_process/my_first_business_process/MaxCompute
	ParentFolderPath *string `json:"ParentFolderPath,omitempty" xml:"ParentFolderPath,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s ListFoldersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFoldersRequest) GoString() string {
	return s.String()
}

func (s *ListFoldersRequest) SetPageNumber(v int32) *ListFoldersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFoldersRequest) SetPageSize(v int32) *ListFoldersRequest {
	s.PageSize = &v
	return s
}

func (s *ListFoldersRequest) SetParentFolderPath(v string) *ListFoldersRequest {
	s.ParentFolderPath = &v
	return s
}

func (s *ListFoldersRequest) SetProjectId(v int64) *ListFoldersRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFoldersRequest) SetProjectIdentifier(v string) *ListFoldersRequest {
	s.ProjectIdentifier = &v
	return s
}

type ListFoldersResponseBody struct {
	Data *ListFoldersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListFoldersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFoldersResponseBody) GoString() string {
	return s.String()
}

func (s *ListFoldersResponseBody) SetData(v *ListFoldersResponseBodyData) *ListFoldersResponseBody {
	s.Data = v
	return s
}

func (s *ListFoldersResponseBody) SetErrorCode(v string) *ListFoldersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListFoldersResponseBody) SetErrorMessage(v string) *ListFoldersResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListFoldersResponseBody) SetHttpStatusCode(v int32) *ListFoldersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListFoldersResponseBody) SetRequestId(v string) *ListFoldersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFoldersResponseBody) SetSuccess(v bool) *ListFoldersResponseBody {
	s.Success = &v
	return s
}

type ListFoldersResponseBodyData struct {
	Folders []*ListFoldersResponseBodyDataFolders `json:"Folders,omitempty" xml:"Folders,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 13
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFoldersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListFoldersResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListFoldersResponseBodyData) SetFolders(v []*ListFoldersResponseBodyDataFolders) *ListFoldersResponseBodyData {
	s.Folders = v
	return s
}

func (s *ListFoldersResponseBodyData) SetPageNumber(v int32) *ListFoldersResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListFoldersResponseBodyData) SetPageSize(v int32) *ListFoldersResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListFoldersResponseBodyData) SetTotalCount(v int32) *ListFoldersResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListFoldersResponseBodyDataFolders struct {
	// example:
	//
	// 2735c2****
	FolderId *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	// example:
	//
	// Business_process/my_first_business_process/MaxCompute/ods_layer
	FolderPath *string `json:"FolderPath,omitempty" xml:"FolderPath,omitempty"`
}

func (s ListFoldersResponseBodyDataFolders) String() string {
	return tea.Prettify(s)
}

func (s ListFoldersResponseBodyDataFolders) GoString() string {
	return s.String()
}

func (s *ListFoldersResponseBodyDataFolders) SetFolderId(v string) *ListFoldersResponseBodyDataFolders {
	s.FolderId = &v
	return s
}

func (s *ListFoldersResponseBodyDataFolders) SetFolderPath(v string) *ListFoldersResponseBodyDataFolders {
	s.FolderPath = &v
	return s
}

type ListFoldersResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFoldersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFoldersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFoldersResponse) GoString() string {
	return s.String()
}

func (s *ListFoldersResponse) SetHeaders(v map[string]*string) *ListFoldersResponse {
	s.Headers = v
	return s
}

func (s *ListFoldersResponse) SetStatusCode(v int32) *ListFoldersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFoldersResponse) SetBody(v *ListFoldersResponseBody) *ListFoldersResponse {
	s.Body = v
	return s
}

type ListFunctionsRequest struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the owner of the UDF. This parameter specifies a filter condition.
	//
	// example:
	//
	// 110755000425XXXX
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The page number. Default value: 1. Minimum value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The user-defined function (UDF) type. This parameter specifies a filter condition.
	//
	// Valid values:
	//
	// 	- Math: mathematical operation function
	//
	// 	- Aggregate: aggregate function
	//
	// 	- String: string processing function
	//
	// 	- Date: date function
	//
	// 	- Analytic: window function
	//
	// 	- Other: other functions
	//
	// example:
	//
	// MATH
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListFunctionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFunctionsRequest) GoString() string {
	return s.String()
}

func (s *ListFunctionsRequest) SetName(v string) *ListFunctionsRequest {
	s.Name = &v
	return s
}

func (s *ListFunctionsRequest) SetOwner(v string) *ListFunctionsRequest {
	s.Owner = &v
	return s
}

func (s *ListFunctionsRequest) SetPageNumber(v int32) *ListFunctionsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFunctionsRequest) SetPageSize(v int32) *ListFunctionsRequest {
	s.PageSize = &v
	return s
}

func (s *ListFunctionsRequest) SetProjectId(v int64) *ListFunctionsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFunctionsRequest) SetType(v string) *ListFunctionsRequest {
	s.Type = &v
	return s
}

type ListFunctionsResponseBody struct {
	// The pagination information.
	PagingInfo *ListFunctionsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 89FB2BF0-EB00-5D03-9C34-05931001XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListFunctionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFunctionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListFunctionsResponseBody) SetPagingInfo(v *ListFunctionsResponseBodyPagingInfo) *ListFunctionsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListFunctionsResponseBody) SetRequestId(v string) *ListFunctionsResponseBody {
	s.RequestId = &v
	return s
}

type ListFunctionsResponseBodyPagingInfo struct {
	// The UDFs.
	Functions []*ListFunctionsResponseBodyPagingInfoFunctions `json:"Functions,omitempty" xml:"Functions,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 294
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFunctionsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListFunctionsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListFunctionsResponseBodyPagingInfo) SetFunctions(v []*ListFunctionsResponseBodyPagingInfoFunctions) *ListFunctionsResponseBodyPagingInfo {
	s.Functions = v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfo) SetPageNumber(v int32) *ListFunctionsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfo) SetPageSize(v int32) *ListFunctionsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfo) SetTotalCount(v int32) *ListFunctionsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListFunctionsResponseBodyPagingInfoFunctions struct {
	// The file resources in an Advanced RISC Machines (ARM) cluster.
	//
	// example:
	//
	// xxx.jar,yyy.jar
	ArmResource *string `json:"ArmResource,omitempty" xml:"ArmResource,omitempty"`
	// The fully qualified class name of the UDF.
	//
	// example:
	//
	// com.demo.Main
	ClassName *string `json:"ClassName,omitempty" xml:"ClassName,omitempty"`
	// The description of the command.
	//
	// example:
	//
	// testUdf(xx,yy)
	CommandDescription *string `json:"CommandDescription,omitempty" xml:"CommandDescription,omitempty"`
	// The time when the UDF was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1655953028000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The data source information about the UDF.
	DataSource *ListFunctionsResponseBodyPagingInfoFunctionsDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The name of the database. This parameter is returned for E-MapReduce (EMR) functions.
	//
	// example:
	//
	// odps_first
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The overall description of the UDF.
	//
	// example:
	//
	// Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The code of the embedded UDF.
	//
	// example:
	//
	// print(\\"hello,world!\\")
	EmbeddedCode *string `json:"EmbeddedCode,omitempty" xml:"EmbeddedCode,omitempty"`
	// The type of the nested code.
	//
	// Valid values:
	//
	// 	- Python2
	//
	// 	- Python3
	//
	// 	- Java8
	//
	// 	- Java11
	//
	// 	- Java17
	//
	// example:
	//
	// Python2
	EmbeddedCodeType *string `json:"EmbeddedCodeType,omitempty" xml:"EmbeddedCodeType,omitempty"`
	// The type of the nested resource.
	//
	// Valid values:
	//
	// 	- File: general resources
	//
	// 	- Embedded: embedded resources
	//
	// example:
	//
	// File
	EmbeddedResourceType *string `json:"EmbeddedResourceType,omitempty" xml:"EmbeddedResourceType,omitempty"`
	// The description of the example.
	//
	// example:
	//
	// Example description >>> select tsetUdf(xx,yy);
	//
	// abc
	ExampleDescription *string `json:"ExampleDescription,omitempty" xml:"ExampleDescription,omitempty"`
	// The files resources.
	//
	// example:
	//
	// xxx.jar,yyy.jar
	FileResource *string `json:"FileResource,omitempty" xml:"FileResource,omitempty"`
	// The ID of the UDF.
	//
	// example:
	//
	// 580667964888595XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The time when the UDF was last modified. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1655953028000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The name of the UDF.
	//
	// example:
	//
	// Function name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The owner of the UDF.
	//
	// example:
	//
	// 110755000425XXXX
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The description of the parameter.
	//
	// example:
	//
	// xx: parameter information XXX
	//
	// yy: parameter information YYY
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	// The ID of the workspace to which the UDF belongs.
	//
	// example:
	//
	// 307XXX
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The description of the return value.
	//
	// example:
	//
	// The return value is a string.
	ReturnValueDescription *string `json:"ReturnValueDescription,omitempty" xml:"ReturnValueDescription,omitempty"`
	// The information about the resource group used when you run the UDF.
	RuntimeResource *ListFunctionsResponseBodyPagingInfoFunctionsRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The script information about the UDF.
	Script *ListFunctionsResponseBodyPagingInfoFunctionsScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	// The UDF type.
	//
	// Valid values:
	//
	// 	- Math: mathematical operation function
	//
	// 	- Aggregate: aggregate function
	//
	// 	- String: string processing function
	//
	// 	- Date: date function
	//
	// 	- Analytic: window function
	//
	// 	- Other: other functions
	//
	// example:
	//
	// MATH
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListFunctionsResponseBodyPagingInfoFunctions) String() string {
	return tea.Prettify(s)
}

func (s ListFunctionsResponseBodyPagingInfoFunctions) GoString() string {
	return s.String()
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetArmResource(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.ArmResource = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetClassName(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.ClassName = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetCommandDescription(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.CommandDescription = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetCreateTime(v int64) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.CreateTime = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetDataSource(v *ListFunctionsResponseBodyPagingInfoFunctionsDataSource) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.DataSource = v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetDatabaseName(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.DatabaseName = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetDescription(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.Description = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetEmbeddedCode(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.EmbeddedCode = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetEmbeddedCodeType(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.EmbeddedCodeType = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetEmbeddedResourceType(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.EmbeddedResourceType = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetExampleDescription(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.ExampleDescription = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetFileResource(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.FileResource = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetId(v int64) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.Id = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetModifyTime(v int64) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.ModifyTime = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetName(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.Name = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetOwner(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.Owner = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetParameterDescription(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.ParameterDescription = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetProjectId(v int64) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.ProjectId = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetReturnValueDescription(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.ReturnValueDescription = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetRuntimeResource(v *ListFunctionsResponseBodyPagingInfoFunctionsRuntimeResource) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.RuntimeResource = v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetScript(v *ListFunctionsResponseBodyPagingInfoFunctionsScript) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.Script = v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctions) SetType(v string) *ListFunctionsResponseBodyPagingInfoFunctions {
	s.Type = &v
	return s
}

type ListFunctionsResponseBodyPagingInfoFunctionsDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// odps_first
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// odps
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListFunctionsResponseBodyPagingInfoFunctionsDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListFunctionsResponseBodyPagingInfoFunctionsDataSource) GoString() string {
	return s.String()
}

func (s *ListFunctionsResponseBodyPagingInfoFunctionsDataSource) SetName(v string) *ListFunctionsResponseBodyPagingInfoFunctionsDataSource {
	s.Name = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctionsDataSource) SetType(v string) *ListFunctionsResponseBodyPagingInfoFunctionsDataSource {
	s.Type = &v
	return s
}

type ListFunctionsResponseBodyPagingInfoFunctionsRuntimeResource struct {
	// The ID of the resource group used when you run the UDF.
	//
	// example:
	//
	// S_resgrop_xxx
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListFunctionsResponseBodyPagingInfoFunctionsRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ListFunctionsResponseBodyPagingInfoFunctionsRuntimeResource) GoString() string {
	return s.String()
}

func (s *ListFunctionsResponseBodyPagingInfoFunctionsRuntimeResource) SetResourceGroupId(v string) *ListFunctionsResponseBodyPagingInfoFunctionsRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ListFunctionsResponseBodyPagingInfoFunctionsScript struct {
	// The script ID.
	//
	// example:
	//
	// 652567824470354XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The script path.
	//
	// example:
	//
	// XXX/OpenAPI/function/function_name
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The runtime.
	Runtime *ListFunctionsResponseBodyPagingInfoFunctionsScriptRuntime `json:"Runtime,omitempty" xml:"Runtime,omitempty" type:"Struct"`
}

func (s ListFunctionsResponseBodyPagingInfoFunctionsScript) String() string {
	return tea.Prettify(s)
}

func (s ListFunctionsResponseBodyPagingInfoFunctionsScript) GoString() string {
	return s.String()
}

func (s *ListFunctionsResponseBodyPagingInfoFunctionsScript) SetId(v int64) *ListFunctionsResponseBodyPagingInfoFunctionsScript {
	s.Id = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctionsScript) SetPath(v string) *ListFunctionsResponseBodyPagingInfoFunctionsScript {
	s.Path = &v
	return s
}

func (s *ListFunctionsResponseBodyPagingInfoFunctionsScript) SetRuntime(v *ListFunctionsResponseBodyPagingInfoFunctionsScriptRuntime) *ListFunctionsResponseBodyPagingInfoFunctionsScript {
	s.Runtime = v
	return s
}

type ListFunctionsResponseBodyPagingInfoFunctionsScriptRuntime struct {
	// The command.
	//
	// example:
	//
	// ODPS_FUNCTION
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
}

func (s ListFunctionsResponseBodyPagingInfoFunctionsScriptRuntime) String() string {
	return tea.Prettify(s)
}

func (s ListFunctionsResponseBodyPagingInfoFunctionsScriptRuntime) GoString() string {
	return s.String()
}

func (s *ListFunctionsResponseBodyPagingInfoFunctionsScriptRuntime) SetCommand(v string) *ListFunctionsResponseBodyPagingInfoFunctionsScriptRuntime {
	s.Command = &v
	return s
}

type ListFunctionsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFunctionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFunctionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFunctionsResponse) GoString() string {
	return s.String()
}

func (s *ListFunctionsResponse) SetHeaders(v map[string]*string) *ListFunctionsResponse {
	s.Headers = v
	return s
}

func (s *ListFunctionsResponse) SetStatusCode(v int32) *ListFunctionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFunctionsResponse) SetBody(v *ListFunctionsResponseBody) *ListFunctionsResponse {
	s.Body = v
	return s
}

type ListLineageRelationshipsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-table:123456XXX::test_project::test_tbl
	//
	// dlf-table:123456XXX:test_catalog:test_db::test_tbl
	//
	// hms-table:c-abc123xxx::test_db::test_tbl
	//
	// holo-table:h-abc123xxx::test_db:test_schema:test_tbl
	//
	// custom-api:api123
	//
	// custom-table:table456
	DstEntityId *string `json:"DstEntityId,omitempty" xml:"DstEntityId,omitempty"`
	// example:
	//
	// dstName
	DstEntityName *string `json:"DstEntityName,omitempty" xml:"DstEntityName,omitempty"`
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// Name
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-table:123456XXX::test_project::test_tbl
	//
	// dlf-table:123456XXX:test_catalog:test_db::test_tbl
	//
	// hms-table:c-abc123xxx::test_db::test_tbl
	//
	// holo-table:h-abc123xxx::test_db:test_schema:test_tbl
	//
	// custom-api:api123
	//
	// custom-table:table456
	SrcEntityId *string `json:"SrcEntityId,omitempty" xml:"SrcEntityId,omitempty"`
	// example:
	//
	// srcName
	SrcEntityName *string `json:"SrcEntityName,omitempty" xml:"SrcEntityName,omitempty"`
}

func (s ListLineageRelationshipsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLineageRelationshipsRequest) GoString() string {
	return s.String()
}

func (s *ListLineageRelationshipsRequest) SetDstEntityId(v string) *ListLineageRelationshipsRequest {
	s.DstEntityId = &v
	return s
}

func (s *ListLineageRelationshipsRequest) SetDstEntityName(v string) *ListLineageRelationshipsRequest {
	s.DstEntityName = &v
	return s
}

func (s *ListLineageRelationshipsRequest) SetOrder(v string) *ListLineageRelationshipsRequest {
	s.Order = &v
	return s
}

func (s *ListLineageRelationshipsRequest) SetPageNumber(v int32) *ListLineageRelationshipsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListLineageRelationshipsRequest) SetPageSize(v int32) *ListLineageRelationshipsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLineageRelationshipsRequest) SetSortBy(v string) *ListLineageRelationshipsRequest {
	s.SortBy = &v
	return s
}

func (s *ListLineageRelationshipsRequest) SetSrcEntityId(v string) *ListLineageRelationshipsRequest {
	s.SrcEntityId = &v
	return s
}

func (s *ListLineageRelationshipsRequest) SetSrcEntityName(v string) *ListLineageRelationshipsRequest {
	s.SrcEntityName = &v
	return s
}

type ListLineageRelationshipsResponseBody struct {
	PagingInfo *ListLineageRelationshipsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// example:
	//
	// SDFSDFSDF-SDFSDF-SDFDSF-SDFSDF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListLineageRelationshipsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLineageRelationshipsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLineageRelationshipsResponseBody) SetPagingInfo(v *ListLineageRelationshipsResponseBodyPagingInfo) *ListLineageRelationshipsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListLineageRelationshipsResponseBody) SetRequestId(v string) *ListLineageRelationshipsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLineageRelationshipsResponseBody) SetSuccess(v bool) *ListLineageRelationshipsResponseBody {
	s.Success = &v
	return s
}

type ListLineageRelationshipsResponseBodyPagingInfo struct {
	LineageRelationships []*LineageRelationship `json:"LineageRelationships,omitempty" xml:"LineageRelationships,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 123
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLineageRelationshipsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListLineageRelationshipsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListLineageRelationshipsResponseBodyPagingInfo) SetLineageRelationships(v []*LineageRelationship) *ListLineageRelationshipsResponseBodyPagingInfo {
	s.LineageRelationships = v
	return s
}

func (s *ListLineageRelationshipsResponseBodyPagingInfo) SetPageNumber(v int32) *ListLineageRelationshipsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListLineageRelationshipsResponseBodyPagingInfo) SetPageSize(v int32) *ListLineageRelationshipsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListLineageRelationshipsResponseBodyPagingInfo) SetTotalCount(v int64) *ListLineageRelationshipsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListLineageRelationshipsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLineageRelationshipsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLineageRelationshipsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLineageRelationshipsResponse) GoString() string {
	return s.String()
}

func (s *ListLineageRelationshipsResponse) SetHeaders(v map[string]*string) *ListLineageRelationshipsResponse {
	s.Headers = v
	return s
}

func (s *ListLineageRelationshipsResponse) SetStatusCode(v int32) *ListLineageRelationshipsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLineageRelationshipsResponse) SetBody(v *ListLineageRelationshipsResponseBody) *ListLineageRelationshipsResponse {
	s.Body = v
	return s
}

type ListLineagesRequest struct {
	// example:
	//
	// maxcompute-table:123456XXX::test_project::test_tbl
	//
	// dlf-table:123456XXX:test_catalog:test_db::test_tbl
	//
	// hms-table:c-abc123xxx::test_db::test_tbl
	//
	// holo-table:h-abc123xxx::test_db:test_schema:test_tbl
	//
	// custom-api:api123
	//
	// custom-table:table456
	DstEntityId *string `json:"DstEntityId,omitempty" xml:"DstEntityId,omitempty"`
	// example:
	//
	// dstName1
	DstEntityName *string `json:"DstEntityName,omitempty" xml:"DstEntityName,omitempty"`
	// example:
	//
	// false
	NeedAttachRelationship *bool `json:"NeedAttachRelationship,omitempty" xml:"NeedAttachRelationship,omitempty"`
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// Name
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// maxcompute-table:123456XXX::test_project::test_tbl
	//
	// dlf-table:123456XXX:test_catalog:test_db::test_tbl
	//
	// hms-table:c-abc123xxx::test_db::test_tbl
	//
	// holo-table:h-abc123xxx::test_db:test_schema:test_tbl
	//
	// custom-api:api123
	//
	// custom-table:table456
	SrcEntityId *string `json:"SrcEntityId,omitempty" xml:"SrcEntityId,omitempty"`
	// example:
	//
	// srcName1
	SrcEntityName *string `json:"SrcEntityName,omitempty" xml:"SrcEntityName,omitempty"`
}

func (s ListLineagesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLineagesRequest) GoString() string {
	return s.String()
}

func (s *ListLineagesRequest) SetDstEntityId(v string) *ListLineagesRequest {
	s.DstEntityId = &v
	return s
}

func (s *ListLineagesRequest) SetDstEntityName(v string) *ListLineagesRequest {
	s.DstEntityName = &v
	return s
}

func (s *ListLineagesRequest) SetNeedAttachRelationship(v bool) *ListLineagesRequest {
	s.NeedAttachRelationship = &v
	return s
}

func (s *ListLineagesRequest) SetOrder(v string) *ListLineagesRequest {
	s.Order = &v
	return s
}

func (s *ListLineagesRequest) SetPageNumber(v int32) *ListLineagesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListLineagesRequest) SetPageSize(v int32) *ListLineagesRequest {
	s.PageSize = &v
	return s
}

func (s *ListLineagesRequest) SetSortBy(v string) *ListLineagesRequest {
	s.SortBy = &v
	return s
}

func (s *ListLineagesRequest) SetSrcEntityId(v string) *ListLineagesRequest {
	s.SrcEntityId = &v
	return s
}

func (s *ListLineagesRequest) SetSrcEntityName(v string) *ListLineagesRequest {
	s.SrcEntityName = &v
	return s
}

type ListLineagesResponseBody struct {
	PagingInfo *ListLineagesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListLineagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLineagesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLineagesResponseBody) SetPagingInfo(v *ListLineagesResponseBodyPagingInfo) *ListLineagesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListLineagesResponseBody) SetRequestId(v string) *ListLineagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLineagesResponseBody) SetSuccess(v bool) *ListLineagesResponseBody {
	s.Success = &v
	return s
}

type ListLineagesResponseBodyPagingInfo struct {
	Lineages []*ListLineagesResponseBodyPagingInfoLineages `json:"Lineages,omitempty" xml:"Lineages,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 12
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLineagesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListLineagesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListLineagesResponseBodyPagingInfo) SetLineages(v []*ListLineagesResponseBodyPagingInfoLineages) *ListLineagesResponseBodyPagingInfo {
	s.Lineages = v
	return s
}

func (s *ListLineagesResponseBodyPagingInfo) SetPageNumber(v int32) *ListLineagesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListLineagesResponseBodyPagingInfo) SetPageSize(v int32) *ListLineagesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListLineagesResponseBodyPagingInfo) SetTotalCount(v int64) *ListLineagesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListLineagesResponseBodyPagingInfoLineages struct {
	DstEntity     *LineageEntity         `json:"DstEntity,omitempty" xml:"DstEntity,omitempty"`
	Relationships []*LineageRelationship `json:"Relationships,omitempty" xml:"Relationships,omitempty" type:"Repeated"`
	SrcEntity     *LineageEntity         `json:"SrcEntity,omitempty" xml:"SrcEntity,omitempty"`
}

func (s ListLineagesResponseBodyPagingInfoLineages) String() string {
	return tea.Prettify(s)
}

func (s ListLineagesResponseBodyPagingInfoLineages) GoString() string {
	return s.String()
}

func (s *ListLineagesResponseBodyPagingInfoLineages) SetDstEntity(v *LineageEntity) *ListLineagesResponseBodyPagingInfoLineages {
	s.DstEntity = v
	return s
}

func (s *ListLineagesResponseBodyPagingInfoLineages) SetRelationships(v []*LineageRelationship) *ListLineagesResponseBodyPagingInfoLineages {
	s.Relationships = v
	return s
}

func (s *ListLineagesResponseBodyPagingInfoLineages) SetSrcEntity(v *LineageEntity) *ListLineagesResponseBodyPagingInfoLineages {
	s.SrcEntity = v
	return s
}

type ListLineagesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLineagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLineagesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLineagesResponse) GoString() string {
	return s.String()
}

func (s *ListLineagesResponse) SetHeaders(v map[string]*string) *ListLineagesResponse {
	s.Headers = v
	return s
}

func (s *ListLineagesResponse) SetStatusCode(v int32) *ListLineagesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLineagesResponse) SetBody(v *ListLineagesResponseBody) *ListLineagesResponse {
	s.Body = v
	return s
}

type ListMetaCollectionsRequest struct {
	// example:
	//
	// 12345
	Administrator *string `json:"Administrator,omitempty" xml:"Administrator,omitempty"`
	// example:
	//
	// 123456
	CreateUser  *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// category.123
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// Name
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Category
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListMetaCollectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMetaCollectionsRequest) GoString() string {
	return s.String()
}

func (s *ListMetaCollectionsRequest) SetAdministrator(v string) *ListMetaCollectionsRequest {
	s.Administrator = &v
	return s
}

func (s *ListMetaCollectionsRequest) SetCreateUser(v string) *ListMetaCollectionsRequest {
	s.CreateUser = &v
	return s
}

func (s *ListMetaCollectionsRequest) SetDescription(v string) *ListMetaCollectionsRequest {
	s.Description = &v
	return s
}

func (s *ListMetaCollectionsRequest) SetName(v string) *ListMetaCollectionsRequest {
	s.Name = &v
	return s
}

func (s *ListMetaCollectionsRequest) SetOrder(v string) *ListMetaCollectionsRequest {
	s.Order = &v
	return s
}

func (s *ListMetaCollectionsRequest) SetPageNumber(v int32) *ListMetaCollectionsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListMetaCollectionsRequest) SetPageSize(v int32) *ListMetaCollectionsRequest {
	s.PageSize = &v
	return s
}

func (s *ListMetaCollectionsRequest) SetParentId(v string) *ListMetaCollectionsRequest {
	s.ParentId = &v
	return s
}

func (s *ListMetaCollectionsRequest) SetSortBy(v string) *ListMetaCollectionsRequest {
	s.SortBy = &v
	return s
}

func (s *ListMetaCollectionsRequest) SetType(v string) *ListMetaCollectionsRequest {
	s.Type = &v
	return s
}

type ListMetaCollectionsResponseBody struct {
	Data *ListMetaCollectionsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// E25887B7-579C-54A5-9C4F-83A0DE367DDE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMetaCollectionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMetaCollectionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMetaCollectionsResponseBody) SetData(v *ListMetaCollectionsResponseBodyData) *ListMetaCollectionsResponseBody {
	s.Data = v
	return s
}

func (s *ListMetaCollectionsResponseBody) SetRequestId(v string) *ListMetaCollectionsResponseBody {
	s.RequestId = &v
	return s
}

type ListMetaCollectionsResponseBodyData struct {
	MetaCollections []*ListMetaCollectionsResponseBodyDataMetaCollections `json:"MetaCollections,omitempty" xml:"MetaCollections,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMetaCollectionsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListMetaCollectionsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListMetaCollectionsResponseBodyData) SetMetaCollections(v []*ListMetaCollectionsResponseBodyDataMetaCollections) *ListMetaCollectionsResponseBodyData {
	s.MetaCollections = v
	return s
}

func (s *ListMetaCollectionsResponseBodyData) SetPageNumber(v int32) *ListMetaCollectionsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListMetaCollectionsResponseBodyData) SetPageSize(v int32) *ListMetaCollectionsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListMetaCollectionsResponseBodyData) SetTotalCount(v int32) *ListMetaCollectionsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListMetaCollectionsResponseBodyDataMetaCollections struct {
	Administrators []*string `json:"Administrators,omitempty" xml:"Administrators,omitempty" type:"Repeated"`
	// example:
	//
	// 1668568601000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 456789
	CreateUser  *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// category.123
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 1668568601000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// example:
	//
	// test_category
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// category.1
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// Category
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListMetaCollectionsResponseBodyDataMetaCollections) String() string {
	return tea.Prettify(s)
}

func (s ListMetaCollectionsResponseBodyDataMetaCollections) GoString() string {
	return s.String()
}

func (s *ListMetaCollectionsResponseBodyDataMetaCollections) SetAdministrators(v []*string) *ListMetaCollectionsResponseBodyDataMetaCollections {
	s.Administrators = v
	return s
}

func (s *ListMetaCollectionsResponseBodyDataMetaCollections) SetCreateTime(v int64) *ListMetaCollectionsResponseBodyDataMetaCollections {
	s.CreateTime = &v
	return s
}

func (s *ListMetaCollectionsResponseBodyDataMetaCollections) SetCreateUser(v string) *ListMetaCollectionsResponseBodyDataMetaCollections {
	s.CreateUser = &v
	return s
}

func (s *ListMetaCollectionsResponseBodyDataMetaCollections) SetDescription(v string) *ListMetaCollectionsResponseBodyDataMetaCollections {
	s.Description = &v
	return s
}

func (s *ListMetaCollectionsResponseBodyDataMetaCollections) SetId(v string) *ListMetaCollectionsResponseBodyDataMetaCollections {
	s.Id = &v
	return s
}

func (s *ListMetaCollectionsResponseBodyDataMetaCollections) SetModifyTime(v int64) *ListMetaCollectionsResponseBodyDataMetaCollections {
	s.ModifyTime = &v
	return s
}

func (s *ListMetaCollectionsResponseBodyDataMetaCollections) SetName(v string) *ListMetaCollectionsResponseBodyDataMetaCollections {
	s.Name = &v
	return s
}

func (s *ListMetaCollectionsResponseBodyDataMetaCollections) SetParentId(v string) *ListMetaCollectionsResponseBodyDataMetaCollections {
	s.ParentId = &v
	return s
}

func (s *ListMetaCollectionsResponseBodyDataMetaCollections) SetType(v string) *ListMetaCollectionsResponseBodyDataMetaCollections {
	s.Type = &v
	return s
}

type ListMetaCollectionsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMetaCollectionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMetaCollectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMetaCollectionsResponse) GoString() string {
	return s.String()
}

func (s *ListMetaCollectionsResponse) SetHeaders(v map[string]*string) *ListMetaCollectionsResponse {
	s.Headers = v
	return s
}

func (s *ListMetaCollectionsResponse) SetStatusCode(v int32) *ListMetaCollectionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMetaCollectionsResponse) SetBody(v *ListMetaCollectionsResponseBody) *ListMetaCollectionsResponse {
	s.Body = v
	return s
}

type ListNetworksRequest struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The fields used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:
	//
	// 	- Id (Desc/Asc): the network ID
	//
	// 	- Status (Desc/Asc): the network status
	//
	// 	- CreateUser (Desc/Asc): the user who created the network
	//
	// 	- CreateTime (Desc/Asc): the time when the network was created
	//
	// Default value: CreateTime Asc.
	//
	// example:
	//
	// CreateTime Asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListNetworksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNetworksRequest) GoString() string {
	return s.String()
}

func (s *ListNetworksRequest) SetPageNumber(v int32) *ListNetworksRequest {
	s.PageNumber = &v
	return s
}

func (s *ListNetworksRequest) SetPageSize(v int32) *ListNetworksRequest {
	s.PageSize = &v
	return s
}

func (s *ListNetworksRequest) SetResourceGroupId(v string) *ListNetworksRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListNetworksRequest) SetSortBy(v string) *ListNetworksRequest {
	s.SortBy = &v
	return s
}

type ListNetworksResponseBody struct {
	// The pagination information.
	PagingInfo *ListNetworksResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The ID of the request. It is used to locate logs and troubleshoot problems.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListNetworksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNetworksResponseBody) GoString() string {
	return s.String()
}

func (s *ListNetworksResponseBody) SetPagingInfo(v *ListNetworksResponseBodyPagingInfo) *ListNetworksResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListNetworksResponseBody) SetRequestId(v string) *ListNetworksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNetworksResponseBody) SetSuccess(v bool) *ListNetworksResponseBody {
	s.Success = &v
	return s
}

type ListNetworksResponseBodyPagingInfo struct {
	// The network resources of the serverless resource group.
	NetworkList []*ListNetworksResponseBodyPagingInfoNetworkList `json:"NetworkList,omitempty" xml:"NetworkList,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListNetworksResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListNetworksResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListNetworksResponseBodyPagingInfo) SetNetworkList(v []*ListNetworksResponseBodyPagingInfoNetworkList) *ListNetworksResponseBodyPagingInfo {
	s.NetworkList = v
	return s
}

func (s *ListNetworksResponseBodyPagingInfo) SetPageNumber(v int32) *ListNetworksResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListNetworksResponseBodyPagingInfo) SetPageSize(v int32) *ListNetworksResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListNetworksResponseBodyPagingInfo) SetTotalCount(v int32) *ListNetworksResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListNetworksResponseBodyPagingInfoNetworkList struct {
	// The time when the network resource was created. The value is a 64-bit timestamp.
	//
	// example:
	//
	// 1727055811000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the user who creates the network resource.
	//
	// example:
	//
	// 11075500042XXXXX
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The network ID.
	//
	// example:
	//
	// 1000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the serverless resource group.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The security group ID.
	//
	// example:
	//
	// sg-2ze13vamugr7jenXXXXX
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The status of the network resource. Valid values: Pending, Creating, Running, Deleting, and Deleted.
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the virtual private cloud (VPC).
	//
	// example:
	//
	// vpc-m2et4f3oc8msfbccXXXXX
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The VSwitch ID.
	//
	// example:
	//
	// vsw-uf8usrhs7hjd9amsXXXXX
	VswitchId *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s ListNetworksResponseBodyPagingInfoNetworkList) String() string {
	return tea.Prettify(s)
}

func (s ListNetworksResponseBodyPagingInfoNetworkList) GoString() string {
	return s.String()
}

func (s *ListNetworksResponseBodyPagingInfoNetworkList) SetCreateTime(v int64) *ListNetworksResponseBodyPagingInfoNetworkList {
	s.CreateTime = &v
	return s
}

func (s *ListNetworksResponseBodyPagingInfoNetworkList) SetCreateUser(v string) *ListNetworksResponseBodyPagingInfoNetworkList {
	s.CreateUser = &v
	return s
}

func (s *ListNetworksResponseBodyPagingInfoNetworkList) SetId(v int64) *ListNetworksResponseBodyPagingInfoNetworkList {
	s.Id = &v
	return s
}

func (s *ListNetworksResponseBodyPagingInfoNetworkList) SetResourceGroupId(v string) *ListNetworksResponseBodyPagingInfoNetworkList {
	s.ResourceGroupId = &v
	return s
}

func (s *ListNetworksResponseBodyPagingInfoNetworkList) SetSecurityGroupId(v string) *ListNetworksResponseBodyPagingInfoNetworkList {
	s.SecurityGroupId = &v
	return s
}

func (s *ListNetworksResponseBodyPagingInfoNetworkList) SetStatus(v string) *ListNetworksResponseBodyPagingInfoNetworkList {
	s.Status = &v
	return s
}

func (s *ListNetworksResponseBodyPagingInfoNetworkList) SetVpcId(v string) *ListNetworksResponseBodyPagingInfoNetworkList {
	s.VpcId = &v
	return s
}

func (s *ListNetworksResponseBodyPagingInfoNetworkList) SetVswitchId(v string) *ListNetworksResponseBodyPagingInfoNetworkList {
	s.VswitchId = &v
	return s
}

type ListNetworksResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListNetworksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListNetworksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNetworksResponse) GoString() string {
	return s.String()
}

func (s *ListNetworksResponse) SetHeaders(v map[string]*string) *ListNetworksResponse {
	s.Headers = v
	return s
}

func (s *ListNetworksResponse) SetStatusCode(v int32) *ListNetworksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNetworksResponse) SetBody(v *ListNetworksResponseBody) *ListNetworksResponse {
	s.Body = v
	return s
}

type ListNodeDependenciesRequest struct {
	// The ID of the node.
	//
	// This parameter is required.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10001
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListNodeDependenciesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesRequest) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesRequest) SetId(v int64) *ListNodeDependenciesRequest {
	s.Id = &v
	return s
}

func (s *ListNodeDependenciesRequest) SetPageNumber(v int32) *ListNodeDependenciesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListNodeDependenciesRequest) SetPageSize(v int32) *ListNodeDependenciesRequest {
	s.PageSize = &v
	return s
}

func (s *ListNodeDependenciesRequest) SetProjectId(v int64) *ListNodeDependenciesRequest {
	s.ProjectId = &v
	return s
}

type ListNodeDependenciesResponseBody struct {
	// The pagination information.
	PagingInfo *ListNodeDependenciesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 204EAF68-CCE3-5112-8DA0-E7A60F02XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListNodeDependenciesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBody) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBody) SetPagingInfo(v *ListNodeDependenciesResponseBodyPagingInfo) *ListNodeDependenciesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListNodeDependenciesResponseBody) SetRequestId(v string) *ListNodeDependenciesResponseBody {
	s.RequestId = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfo struct {
	// The descendant nodes.
	Nodes []*ListNodeDependenciesResponseBodyPagingInfoNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 90
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfo) SetNodes(v []*ListNodeDependenciesResponseBodyPagingInfoNodes) *ListNodeDependenciesResponseBodyPagingInfo {
	s.Nodes = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfo) SetPageNumber(v string) *ListNodeDependenciesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfo) SetPageSize(v string) *ListNodeDependenciesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfo) SetTotalCount(v string) *ListNodeDependenciesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodes struct {
	// The time when the node was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1724505917000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The information about the data source.
	DataSource *ListNodeDependenciesResponseBodyPagingInfoNodesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description of the node.
	//
	// example:
	//
	// Node description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the node.
	//
	// example:
	//
	// 723932906364267XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The input of the node.
	Inputs *ListNodeDependenciesResponseBodyPagingInfoNodesInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Struct"`
	// The time when the node was last modified. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1724505917000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The name of the node.
	//
	// example:
	//
	// Node name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output of the node.
	Outputs *ListNodeDependenciesResponseBodyPagingInfoNodesOutputs `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Struct"`
	// The owner of the node.
	//
	// example:
	//
	// 110755000425XXXX
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The ID of the workspace to which the node belongs.
	//
	// example:
	//
	// 65133
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The scheduling type.
	//
	// Valid values:
	//
	// 	- Normal: Nodes are scheduled as expected.
	//
	// 	- Pause: Nodes are paused, and the running of their descendant nodes is blocked.
	//
	// 	- Skip: Nodes are dry run. The system does not actually run the nodes but directly prompts that the nodes are successfully run. The running duration of the nodes is 0 seconds. In addition, the nodes do not occupy resources or block the running of their descendant nodes.
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The information about the resource group.
	RuntimeResource *ListNodeDependenciesResponseBodyPagingInfoNodesRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The script information.
	Script *ListNodeDependenciesResponseBodyPagingInfoNodesScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	// The scheduling policy.
	Strategy *ListNodeDependenciesResponseBodyPagingInfoNodesStrategy `json:"Strategy,omitempty" xml:"Strategy,omitempty" type:"Struct"`
	// The tags. This parameter is not in use.
	Tags []*ListNodeDependenciesResponseBodyPagingInfoNodesTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The scheduling task ID.
	//
	// example:
	//
	// 580667964888595XXXX
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The trigger.
	Trigger *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodes) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodes) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetCreateTime(v int64) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.CreateTime = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetDataSource(v *ListNodeDependenciesResponseBodyPagingInfoNodesDataSource) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.DataSource = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetDescription(v string) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.Description = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetId(v int64) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.Id = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetInputs(v *ListNodeDependenciesResponseBodyPagingInfoNodesInputs) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.Inputs = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetModifyTime(v int64) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.ModifyTime = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetName(v string) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.Name = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetOutputs(v *ListNodeDependenciesResponseBodyPagingInfoNodesOutputs) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.Outputs = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetOwner(v string) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.Owner = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetProjectId(v int64) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.ProjectId = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetRecurrence(v string) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.Recurrence = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetRuntimeResource(v *ListNodeDependenciesResponseBodyPagingInfoNodesRuntimeResource) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.RuntimeResource = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetScript(v *ListNodeDependenciesResponseBodyPagingInfoNodesScript) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.Script = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetStrategy(v *ListNodeDependenciesResponseBodyPagingInfoNodesStrategy) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.Strategy = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetTags(v []*ListNodeDependenciesResponseBodyPagingInfoNodesTags) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.Tags = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetTaskId(v int64) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.TaskId = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodes) SetTrigger(v *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger) *ListNodeDependenciesResponseBodyPagingInfoNodes {
	s.Trigger = v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// odps_first
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// odps
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesDataSource) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesDataSource) SetName(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesDataSource {
	s.Name = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesDataSource) SetType(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesDataSource {
	s.Type = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesInputs struct {
	// The node outputs.
	NodeOutputs []*ListNodeDependenciesResponseBodyPagingInfoNodesInputsNodeOutputs `json:"NodeOutputs,omitempty" xml:"NodeOutputs,omitempty" type:"Repeated"`
	// The tables.
	Tables []*ListNodeDependenciesResponseBodyPagingInfoNodesInputsTables `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	// The variables.
	Variables []*ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesInputs) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesInputs) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesInputs) SetNodeOutputs(v []*ListNodeDependenciesResponseBodyPagingInfoNodesInputsNodeOutputs) *ListNodeDependenciesResponseBodyPagingInfoNodesInputs {
	s.NodeOutputs = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesInputs) SetTables(v []*ListNodeDependenciesResponseBodyPagingInfoNodesInputsTables) *ListNodeDependenciesResponseBodyPagingInfoNodesInputs {
	s.Tables = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesInputs) SetVariables(v []*ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables) *ListNodeDependenciesResponseBodyPagingInfoNodesInputs {
	s.Variables = v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesInputsNodeOutputs struct {
	// The node output.
	//
	// example:
	//
	// 860438872620113XXXX
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesInputsNodeOutputs) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesInputsNodeOutputs) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesInputsNodeOutputs) SetData(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesInputsNodeOutputs {
	s.Data = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesInputsTables struct {
	// The table ID.
	//
	// example:
	//
	// odps.autotest.test_output_table_1
	Guid *string `json:"Guid,omitempty" xml:"Guid,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesInputsTables) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesInputsTables) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesInputsTables) SetGuid(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesInputsTables {
	s.Guid = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables struct {
	// The artifact type.
	//
	// example:
	//
	// Variable
	ArtifactType *string `json:"ArtifactType,omitempty" xml:"ArtifactType,omitempty"`
	// The variable ID.
	//
	// example:
	//
	// 543218872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the variable.
	//
	// example:
	//
	// input
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The node to which the variable belongs.
	Node *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariablesNode `json:"Node,omitempty" xml:"Node,omitempty" type:"Struct"`
	// The scope of the variable. Valid values:
	//
	// 	- NodeParameter
	//
	// 	- NodeContext
	//
	// 	- Workflow
	//
	// 	- Workspace
	//
	// example:
	//
	// NodeParameter
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	// The type of the variable. Valid values:
	//
	// 	- NoKvVariableExpression
	//
	// 	- Constant
	//
	// 	- PassThrough
	//
	// 	- System
	//
	// 	- NodeOutput
	//
	// example:
	//
	// Constant
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// 111
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables) SetArtifactType(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables {
	s.ArtifactType = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables) SetId(v int64) *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables {
	s.Id = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables) SetName(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables {
	s.Name = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables) SetNode(v *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariablesNode) *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables {
	s.Node = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables) SetScope(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables {
	s.Scope = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables) SetType(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables {
	s.Type = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables) SetValue(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariables {
	s.Value = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariablesNode struct {
	// The output of the node.
	//
	// example:
	//
	// 860438872620113XXXX
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariablesNode) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariablesNode) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariablesNode) SetOutput(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesInputsVariablesNode {
	s.Output = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesOutputs struct {
	// The node outputs.
	NodeOutputs []*ListNodeDependenciesResponseBodyPagingInfoNodesOutputsNodeOutputs `json:"NodeOutputs,omitempty" xml:"NodeOutputs,omitempty" type:"Repeated"`
	// The tables.
	Tables []*ListNodeDependenciesResponseBodyPagingInfoNodesOutputsTables `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	// The variables.
	Variables []*ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesOutputs) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesOutputs) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesOutputs) SetNodeOutputs(v []*ListNodeDependenciesResponseBodyPagingInfoNodesOutputsNodeOutputs) *ListNodeDependenciesResponseBodyPagingInfoNodesOutputs {
	s.NodeOutputs = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesOutputs) SetTables(v []*ListNodeDependenciesResponseBodyPagingInfoNodesOutputsTables) *ListNodeDependenciesResponseBodyPagingInfoNodesOutputs {
	s.Tables = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesOutputs) SetVariables(v []*ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables) *ListNodeDependenciesResponseBodyPagingInfoNodesOutputs {
	s.Variables = v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesOutputsNodeOutputs struct {
	// The node output.
	//
	// example:
	//
	// 463497880880954XXXX
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesOutputsNodeOutputs) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesOutputsNodeOutputs) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsNodeOutputs) SetData(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsNodeOutputs {
	s.Data = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesOutputsTables struct {
	// The table ID.
	//
	// example:
	//
	// odps.autotest.test_output_table_1
	Guid *string `json:"Guid,omitempty" xml:"Guid,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesOutputsTables) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesOutputsTables) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsTables) SetGuid(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsTables {
	s.Guid = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables struct {
	// The artifact type.
	//
	// example:
	//
	// Variable
	ArtifactType *string `json:"ArtifactType,omitempty" xml:"ArtifactType,omitempty"`
	// The variable ID.
	//
	// example:
	//
	// 543217824470354XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the variable.
	//
	// example:
	//
	// output
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The node to which the variable belongs.
	Node *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariablesNode `json:"Node,omitempty" xml:"Node,omitempty" type:"Struct"`
	// The scope of the variable. Valid values:
	//
	// 	- NodeParameter
	//
	// 	- NodeContext
	//
	// 	- Workflow
	//
	// 	- Workspace
	//
	// example:
	//
	// NodeParameter
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	// The type of the variable. Valid values:
	//
	// 	- NoKvVariableExpression
	//
	// 	- Constant
	//
	// 	- PassThrough
	//
	// 	- System
	//
	// 	- NodeOutput
	//
	// example:
	//
	// Constant
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// 111
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables) SetArtifactType(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables {
	s.ArtifactType = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables) SetId(v int64) *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables {
	s.Id = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables) SetName(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables {
	s.Name = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables) SetNode(v *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariablesNode) *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables {
	s.Node = v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables) SetScope(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables {
	s.Scope = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables) SetType(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables {
	s.Type = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables) SetValue(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariables {
	s.Value = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariablesNode struct {
	// The output of the node to which the variable belongs.
	//
	// example:
	//
	// 463497880880954XXXX
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariablesNode) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariablesNode) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariablesNode) SetOutput(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesOutputsVariablesNode {
	s.Output = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesRuntimeResource struct {
	// The resource group ID.
	//
	// example:
	//
	// S_res_group_XXXX_XXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesRuntimeResource) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesRuntimeResource) SetResourceGroupId(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesScript struct {
	// The script ID.
	//
	// example:
	//
	// 853573334108680XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The script path.
	//
	// example:
	//
	// root/demo
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The runtime.
	Runtime *ListNodeDependenciesResponseBodyPagingInfoNodesScriptRuntime `json:"Runtime,omitempty" xml:"Runtime,omitempty" type:"Struct"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesScript) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesScript) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesScript) SetId(v int64) *ListNodeDependenciesResponseBodyPagingInfoNodesScript {
	s.Id = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesScript) SetPath(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesScript {
	s.Path = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesScript) SetRuntime(v *ListNodeDependenciesResponseBodyPagingInfoNodesScriptRuntime) *ListNodeDependenciesResponseBodyPagingInfoNodesScript {
	s.Runtime = v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesScriptRuntime struct {
	// The command used to distinguish node types.
	//
	// example:
	//
	// ODPS_SQL
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesScriptRuntime) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesScriptRuntime) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesScriptRuntime) SetCommand(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesScriptRuntime {
	s.Command = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesStrategy struct {
	// The instance generation mode. Valid values:
	//
	// 	- T+1
	//
	// 	- Immediately
	//
	// example:
	//
	// T+1
	InstanceMode *string `json:"InstanceMode,omitempty" xml:"InstanceMode,omitempty"`
	// The rerun interval after a failure. Unit: milliseconds.
	//
	// example:
	//
	// 180000
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode. Valid values:
	//
	// 	- Allowed
	//
	// 	- Denied
	//
	// 	- FailureAllowed
	//
	// example:
	//
	// Allowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of reruns after a failure.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The timeout period. Unit: milliseconds.
	//
	// example:
	//
	// 0
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesStrategy) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesStrategy) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesStrategy) SetInstanceMode(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesStrategy {
	s.InstanceMode = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesStrategy) SetRerunInterval(v int32) *ListNodeDependenciesResponseBodyPagingInfoNodesStrategy {
	s.RerunInterval = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesStrategy) SetRerunMode(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesStrategy {
	s.RerunMode = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesStrategy) SetRerunTimes(v int32) *ListNodeDependenciesResponseBodyPagingInfoNodesStrategy {
	s.RerunTimes = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesStrategy) SetTimeout(v int32) *ListNodeDependenciesResponseBodyPagingInfoNodesStrategy {
	s.Timeout = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesTags struct {
	// The tag key.
	//
	// example:
	//
	// null
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// null
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesTags) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesTags) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesTags) SetKey(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesTags {
	s.Key = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesTags) SetValue(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesTags {
	s.Value = &v
	return s
}

type ListNodeDependenciesResponseBodyPagingInfoNodesTrigger struct {
	// The CRON expression for scheduling.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the validity period of the scheduling. The time is in the yyyy-MM-dd HH:mm:ss format.
	//
	// example:
	//
	// 9999-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The trigger ID.
	//
	// example:
	//
	// 543680677872062XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The start time of the validity period of the scheduling. The time is in the yyyy-MM-dd HH:mm:ss format.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time zone.
	//
	// example:
	//
	// Asia/Shanghai
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	// The type of the trigger.
	//
	// Valid values:
	//
	// 	- Scheduler
	//
	// 	- Manual
	//
	// 	- Streaming
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesTrigger) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponseBodyPagingInfoNodesTrigger) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger) SetCron(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger {
	s.Cron = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger) SetEndTime(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger {
	s.EndTime = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger) SetId(v int64) *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger {
	s.Id = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger) SetStartTime(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger {
	s.StartTime = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger) SetTimezone(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger {
	s.Timezone = &v
	return s
}

func (s *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger) SetType(v string) *ListNodeDependenciesResponseBodyPagingInfoNodesTrigger {
	s.Type = &v
	return s
}

type ListNodeDependenciesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListNodeDependenciesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListNodeDependenciesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNodeDependenciesResponse) GoString() string {
	return s.String()
}

func (s *ListNodeDependenciesResponse) SetHeaders(v map[string]*string) *ListNodeDependenciesResponse {
	s.Headers = v
	return s
}

func (s *ListNodeDependenciesResponse) SetStatusCode(v int32) *ListNodeDependenciesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNodeDependenciesResponse) SetBody(v *ListNodeDependenciesResponseBody) *ListNodeDependenciesResponse {
	s.Body = v
	return s
}

type ListNodesRequest struct {
	// The container ID, which is a filter condition. If you do not want to use this condition for filtering, you do not need to configure this parameter. The container ID that you specify is unrelated to the resource group ID indicated by the ResourceGroupId parameter.
	//
	// example:
	//
	// 860438872620113XXXX
	ContainerId *int64  `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The scheduling type, which is a filter condition. Valid values:
	//
	// 	- Normal: The nodes are scheduled as expected.
	//
	// 	- Pause: The nodes are paused, and the running of their descendant nodes is blocked.
	//
	// 	- Skip: The nodes are dry run. The system does not actually run the nodes, but directly returns a success response. The running duration of the nodes is 0 seconds. In addition, the nodes do not occupy resources or block the running of their descendant nodes.
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The rerun property, which is a filter condition. If you do not want to use this condition for filtering, you do not need to configure this parameter. Valid values:
	//
	// 	- Allowed: The nodes can be rerun regardless of whether they are successfully run or fail to run.
	//
	// 	- FailureAllowed: The nodes can be rerun only after they fail to run.
	//
	// 	- Denied: The nodes cannot be rerun regardless of whether they are successfully run or fail to run.
	//
	// example:
	//
	// Allowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The location of the nodes in the left-side navigation pane of the Data Studio page, which is a filter condition. If you do not want to use this condition for filtering, you do not need to configure this parameter. Valid values:
	//
	// 	- DataworksProject
	//
	// 	- DataworksManualWorkflow
	//
	// 	- DataworksManualTask
	//
	// example:
	//
	// DATAWORKS_PROJECT
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
}

func (s ListNodesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNodesRequest) GoString() string {
	return s.String()
}

func (s *ListNodesRequest) SetContainerId(v int64) *ListNodesRequest {
	s.ContainerId = &v
	return s
}

func (s *ListNodesRequest) SetName(v string) *ListNodesRequest {
	s.Name = &v
	return s
}

func (s *ListNodesRequest) SetPageNumber(v int32) *ListNodesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListNodesRequest) SetPageSize(v int32) *ListNodesRequest {
	s.PageSize = &v
	return s
}

func (s *ListNodesRequest) SetProjectId(v int64) *ListNodesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListNodesRequest) SetRecurrence(v string) *ListNodesRequest {
	s.Recurrence = &v
	return s
}

func (s *ListNodesRequest) SetRerunMode(v string) *ListNodesRequest {
	s.RerunMode = &v
	return s
}

func (s *ListNodesRequest) SetScene(v string) *ListNodesRequest {
	s.Scene = &v
	return s
}

type ListNodesResponseBody struct {
	// The pagination information.
	PagingInfo *ListNodesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 2197B9C4-39CE-55EA-8EEA-FDBAE52DXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListNodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBody) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBody) SetPagingInfo(v *ListNodesResponseBodyPagingInfo) *ListNodesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListNodesResponseBody) SetRequestId(v string) *ListNodesResponseBody {
	s.RequestId = &v
	return s
}

type ListNodesResponseBodyPagingInfo struct {
	// The nodes.
	Nodes []*ListNodesResponseBodyPagingInfoNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 42
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListNodesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfo) SetNodes(v []*ListNodesResponseBodyPagingInfoNodes) *ListNodesResponseBodyPagingInfo {
	s.Nodes = v
	return s
}

func (s *ListNodesResponseBodyPagingInfo) SetPageNumber(v string) *ListNodesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfo) SetPageSize(v string) *ListNodesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfo) SetTotalCount(v string) *ListNodesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodes struct {
	// The time when the node was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1722910655000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The information about the data source.
	DataSource *ListNodesResponseBodyPagingInfoNodesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description of the node.
	//
	// example:
	//
	// Node description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the node.
	//
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The input of the node.
	Inputs *ListNodesResponseBodyPagingInfoNodesInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Struct"`
	// The time when the node was last modified. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1722910655000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The name of the node.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output of the node.
	Outputs *ListNodesResponseBodyPagingInfoNodesOutputs `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Struct"`
	// The owner of the node.
	//
	// example:
	//
	// 110755000425XXXX
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// example:
	//
	// 33233
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The scheduling type.
	//
	// Valid values:
	//
	// 	- Normal: The node is scheduled as expected.
	//
	// 	- Pause: The node is paused, and the running of its descendant nodes is blocked.
	//
	// 	- Skip: The node is dry run. The system does not actually run the node but directly prompts that the node is successfully run. The running duration of the node is 0 seconds. In addition, the node does not occupy resources or block the running of its descendant nodes.
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The information about the resource group.
	RuntimeResource *ListNodesResponseBodyPagingInfoNodesRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The script information.
	Script *ListNodesResponseBodyPagingInfoNodesScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	// The scheduling policy.
	Strategy *ListNodesResponseBodyPagingInfoNodesStrategy `json:"Strategy,omitempty" xml:"Strategy,omitempty" type:"Struct"`
	// The tags. This parameter is not in use.
	Tags []*ListNodesResponseBodyPagingInfoNodesTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The scheduling task ID.
	//
	// example:
	//
	// 88888888888
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The trigger.
	Trigger *ListNodesResponseBodyPagingInfoNodesTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s ListNodesResponseBodyPagingInfoNodes) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodes) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetCreateTime(v int64) *ListNodesResponseBodyPagingInfoNodes {
	s.CreateTime = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetDataSource(v *ListNodesResponseBodyPagingInfoNodesDataSource) *ListNodesResponseBodyPagingInfoNodes {
	s.DataSource = v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetDescription(v string) *ListNodesResponseBodyPagingInfoNodes {
	s.Description = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetId(v int64) *ListNodesResponseBodyPagingInfoNodes {
	s.Id = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetInputs(v *ListNodesResponseBodyPagingInfoNodesInputs) *ListNodesResponseBodyPagingInfoNodes {
	s.Inputs = v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetModifyTime(v int64) *ListNodesResponseBodyPagingInfoNodes {
	s.ModifyTime = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetName(v string) *ListNodesResponseBodyPagingInfoNodes {
	s.Name = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetOutputs(v *ListNodesResponseBodyPagingInfoNodesOutputs) *ListNodesResponseBodyPagingInfoNodes {
	s.Outputs = v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetOwner(v string) *ListNodesResponseBodyPagingInfoNodes {
	s.Owner = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetProjectId(v int64) *ListNodesResponseBodyPagingInfoNodes {
	s.ProjectId = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetRecurrence(v string) *ListNodesResponseBodyPagingInfoNodes {
	s.Recurrence = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetRuntimeResource(v *ListNodesResponseBodyPagingInfoNodesRuntimeResource) *ListNodesResponseBodyPagingInfoNodes {
	s.RuntimeResource = v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetScript(v *ListNodesResponseBodyPagingInfoNodesScript) *ListNodesResponseBodyPagingInfoNodes {
	s.Script = v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetStrategy(v *ListNodesResponseBodyPagingInfoNodesStrategy) *ListNodesResponseBodyPagingInfoNodes {
	s.Strategy = v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetTags(v []*ListNodesResponseBodyPagingInfoNodesTags) *ListNodesResponseBodyPagingInfoNodes {
	s.Tags = v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetTaskId(v int64) *ListNodesResponseBodyPagingInfoNodes {
	s.TaskId = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodes) SetTrigger(v *ListNodesResponseBodyPagingInfoNodesTrigger) *ListNodesResponseBodyPagingInfoNodes {
	s.Trigger = v
	return s
}

type ListNodesResponseBodyPagingInfoNodesDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// odps_first
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// odps
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesDataSource) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesDataSource) SetName(v string) *ListNodesResponseBodyPagingInfoNodesDataSource {
	s.Name = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesDataSource) SetType(v string) *ListNodesResponseBodyPagingInfoNodesDataSource {
	s.Type = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodesInputs struct {
	// The node outputs.
	NodeOutputs []*ListNodesResponseBodyPagingInfoNodesInputsNodeOutputs `json:"NodeOutputs,omitempty" xml:"NodeOutputs,omitempty" type:"Repeated"`
	// The tables.
	Tables []*ListNodesResponseBodyPagingInfoNodesInputsTables `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	// The variables.
	Variables []*ListNodesResponseBodyPagingInfoNodesInputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s ListNodesResponseBodyPagingInfoNodesInputs) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesInputs) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesInputs) SetNodeOutputs(v []*ListNodesResponseBodyPagingInfoNodesInputsNodeOutputs) *ListNodesResponseBodyPagingInfoNodesInputs {
	s.NodeOutputs = v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesInputs) SetTables(v []*ListNodesResponseBodyPagingInfoNodesInputsTables) *ListNodesResponseBodyPagingInfoNodesInputs {
	s.Tables = v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesInputs) SetVariables(v []*ListNodesResponseBodyPagingInfoNodesInputsVariables) *ListNodesResponseBodyPagingInfoNodesInputs {
	s.Variables = v
	return s
}

type ListNodesResponseBodyPagingInfoNodesInputsNodeOutputs struct {
	// The node output.
	//
	// example:
	//
	// 623731286945488XXXX
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesInputsNodeOutputs) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesInputsNodeOutputs) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesInputsNodeOutputs) SetData(v string) *ListNodesResponseBodyPagingInfoNodesInputsNodeOutputs {
	s.Data = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodesInputsTables struct {
	// The table ID.
	//
	// example:
	//
	// odps.autotest.test_output_table_1
	Guid *string `json:"Guid,omitempty" xml:"Guid,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesInputsTables) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesInputsTables) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesInputsTables) SetGuid(v string) *ListNodesResponseBodyPagingInfoNodesInputsTables {
	s.Guid = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodesInputsVariables struct {
	// The artifact type.
	//
	// example:
	//
	// Variable
	ArtifactType *string `json:"ArtifactType,omitempty" xml:"ArtifactType,omitempty"`
	// The variable ID.
	//
	// example:
	//
	// 543211286945488XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the variable.
	//
	// example:
	//
	// input
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The node to which the variable belongs.
	Node *ListNodesResponseBodyPagingInfoNodesInputsVariablesNode `json:"Node,omitempty" xml:"Node,omitempty" type:"Struct"`
	// The scope of the variable. Valid values:
	//
	// 	- WorkSpace
	//
	// 	- NodeParameter
	//
	// 	- NodeContext
	//
	// 	- Workflow
	//
	// example:
	//
	// NodeParameter
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	// The type of the variable. Valid values:
	//
	// 	- NoKvVariableExpression
	//
	// 	- Constant
	//
	// 	- PassThrough
	//
	// 	- System
	//
	// 	- NodeOutput
	//
	// example:
	//
	// Constant
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// 222
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesInputsVariables) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesInputsVariables) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesInputsVariables) SetArtifactType(v string) *ListNodesResponseBodyPagingInfoNodesInputsVariables {
	s.ArtifactType = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesInputsVariables) SetId(v int64) *ListNodesResponseBodyPagingInfoNodesInputsVariables {
	s.Id = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesInputsVariables) SetName(v string) *ListNodesResponseBodyPagingInfoNodesInputsVariables {
	s.Name = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesInputsVariables) SetNode(v *ListNodesResponseBodyPagingInfoNodesInputsVariablesNode) *ListNodesResponseBodyPagingInfoNodesInputsVariables {
	s.Node = v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesInputsVariables) SetScope(v string) *ListNodesResponseBodyPagingInfoNodesInputsVariables {
	s.Scope = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesInputsVariables) SetType(v string) *ListNodesResponseBodyPagingInfoNodesInputsVariables {
	s.Type = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesInputsVariables) SetValue(v string) *ListNodesResponseBodyPagingInfoNodesInputsVariables {
	s.Value = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodesInputsVariablesNode struct {
	// The output of the node.
	//
	// example:
	//
	// 623731286945488XXXX
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesInputsVariablesNode) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesInputsVariablesNode) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesInputsVariablesNode) SetOutput(v string) *ListNodesResponseBodyPagingInfoNodesInputsVariablesNode {
	s.Output = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodesOutputs struct {
	// The node outputs.
	NodeOutputs []*ListNodesResponseBodyPagingInfoNodesOutputsNodeOutputs `json:"NodeOutputs,omitempty" xml:"NodeOutputs,omitempty" type:"Repeated"`
	// The tables.
	Tables []*ListNodesResponseBodyPagingInfoNodesOutputsTables `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	// The variables.
	Variables []*ListNodesResponseBodyPagingInfoNodesOutputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s ListNodesResponseBodyPagingInfoNodesOutputs) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesOutputs) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesOutputs) SetNodeOutputs(v []*ListNodesResponseBodyPagingInfoNodesOutputsNodeOutputs) *ListNodesResponseBodyPagingInfoNodesOutputs {
	s.NodeOutputs = v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesOutputs) SetTables(v []*ListNodesResponseBodyPagingInfoNodesOutputsTables) *ListNodesResponseBodyPagingInfoNodesOutputs {
	s.Tables = v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesOutputs) SetVariables(v []*ListNodesResponseBodyPagingInfoNodesOutputsVariables) *ListNodesResponseBodyPagingInfoNodesOutputs {
	s.Variables = v
	return s
}

type ListNodesResponseBodyPagingInfoNodesOutputsNodeOutputs struct {
	// The node output.
	//
	// example:
	//
	// 860438872620113XXXX
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesOutputsNodeOutputs) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesOutputsNodeOutputs) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesOutputsNodeOutputs) SetData(v string) *ListNodesResponseBodyPagingInfoNodesOutputsNodeOutputs {
	s.Data = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodesOutputsTables struct {
	// The table ID.
	//
	// example:
	//
	// odps.autotest.test_output_table_1
	Guid *string `json:"Guid,omitempty" xml:"Guid,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesOutputsTables) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesOutputsTables) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesOutputsTables) SetGuid(v string) *ListNodesResponseBodyPagingInfoNodesOutputsTables {
	s.Guid = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodesOutputsVariables struct {
	// The artifact type.
	//
	// example:
	//
	// Variable
	ArtifactType *string `json:"ArtifactType,omitempty" xml:"ArtifactType,omitempty"`
	// The variable ID.
	//
	// example:
	//
	// 623731286945488XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the variable.
	//
	// example:
	//
	// output
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The node to which the variable belongs.
	Node *ListNodesResponseBodyPagingInfoNodesOutputsVariablesNode `json:"Node,omitempty" xml:"Node,omitempty" type:"Struct"`
	// The scope of the variable. Valid values:
	//
	// 	- NodeParameter
	//
	// 	- NodeContext
	//
	// 	- Workflow
	//
	// 	- Workspace
	//
	// example:
	//
	// NodeParameter
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	// The type of the variable. Valid values:
	//
	// 	- NoKvVariableExpression
	//
	// 	- Constant
	//
	// 	- PassThrough
	//
	// 	- System
	//
	// 	- NodeOutput
	//
	// example:
	//
	// Constant
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// 111
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesOutputsVariables) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesOutputsVariables) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesOutputsVariables) SetArtifactType(v string) *ListNodesResponseBodyPagingInfoNodesOutputsVariables {
	s.ArtifactType = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesOutputsVariables) SetId(v int64) *ListNodesResponseBodyPagingInfoNodesOutputsVariables {
	s.Id = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesOutputsVariables) SetName(v string) *ListNodesResponseBodyPagingInfoNodesOutputsVariables {
	s.Name = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesOutputsVariables) SetNode(v *ListNodesResponseBodyPagingInfoNodesOutputsVariablesNode) *ListNodesResponseBodyPagingInfoNodesOutputsVariables {
	s.Node = v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesOutputsVariables) SetScope(v string) *ListNodesResponseBodyPagingInfoNodesOutputsVariables {
	s.Scope = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesOutputsVariables) SetType(v string) *ListNodesResponseBodyPagingInfoNodesOutputsVariables {
	s.Type = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesOutputsVariables) SetValue(v string) *ListNodesResponseBodyPagingInfoNodesOutputsVariables {
	s.Value = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodesOutputsVariablesNode struct {
	// The output of the node.
	//
	// example:
	//
	// 860438872620113XXXX
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesOutputsVariablesNode) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesOutputsVariablesNode) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesOutputsVariablesNode) SetOutput(v string) *ListNodesResponseBodyPagingInfoNodesOutputsVariablesNode {
	s.Output = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodesRuntimeResource struct {
	ResourceGroup *string `json:"ResourceGroup,omitempty" xml:"ResourceGroup,omitempty"`
	// The resource group ID.
	//
	// example:
	//
	// S_resgrop_xxx
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesRuntimeResource) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesRuntimeResource) SetResourceGroup(v string) *ListNodesResponseBodyPagingInfoNodesRuntimeResource {
	s.ResourceGroup = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesRuntimeResource) SetResourceGroupId(v string) *ListNodesResponseBodyPagingInfoNodesRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodesScript struct {
	// The script ID.
	//
	// example:
	//
	// 853573334108680XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The script path.
	//
	// example:
	//
	// root/demo
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The runtime.
	Runtime *ListNodesResponseBodyPagingInfoNodesScriptRuntime `json:"Runtime,omitempty" xml:"Runtime,omitempty" type:"Struct"`
}

func (s ListNodesResponseBodyPagingInfoNodesScript) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesScript) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesScript) SetId(v int64) *ListNodesResponseBodyPagingInfoNodesScript {
	s.Id = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesScript) SetPath(v string) *ListNodesResponseBodyPagingInfoNodesScript {
	s.Path = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesScript) SetRuntime(v *ListNodesResponseBodyPagingInfoNodesScriptRuntime) *ListNodesResponseBodyPagingInfoNodesScript {
	s.Runtime = v
	return s
}

type ListNodesResponseBodyPagingInfoNodesScriptRuntime struct {
	// The command used to distinguish node types.
	//
	// example:
	//
	// ODPS_SQL
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesScriptRuntime) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesScriptRuntime) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesScriptRuntime) SetCommand(v string) *ListNodesResponseBodyPagingInfoNodesScriptRuntime {
	s.Command = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodesStrategy struct {
	// The instance generation mode. Valid values:
	//
	// 	- T+1
	//
	// 	- Immediately
	//
	// example:
	//
	// T+1
	InstanceMode *string `json:"InstanceMode,omitempty" xml:"InstanceMode,omitempty"`
	// The rerun interval. Unit: milliseconds.
	//
	// example:
	//
	// 180000
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode. Valid values:
	//
	// 	- Allowed
	//
	// 	- Denied
	//
	// 	- FailureAllowed
	//
	// example:
	//
	// Allowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of reruns.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The timeout period.
	//
	// example:
	//
	// 0
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesStrategy) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesStrategy) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesStrategy) SetInstanceMode(v string) *ListNodesResponseBodyPagingInfoNodesStrategy {
	s.InstanceMode = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesStrategy) SetRerunInterval(v int32) *ListNodesResponseBodyPagingInfoNodesStrategy {
	s.RerunInterval = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesStrategy) SetRerunMode(v string) *ListNodesResponseBodyPagingInfoNodesStrategy {
	s.RerunMode = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesStrategy) SetRerunTimes(v int32) *ListNodesResponseBodyPagingInfoNodesStrategy {
	s.RerunTimes = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesStrategy) SetTimeout(v int32) *ListNodesResponseBodyPagingInfoNodesStrategy {
	s.Timeout = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodesTags struct {
	// The tag key.
	//
	// example:
	//
	// null
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value
	//
	// example:
	//
	// null
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesTags) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesTags) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesTags) SetKey(v string) *ListNodesResponseBodyPagingInfoNodesTags {
	s.Key = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesTags) SetValue(v string) *ListNodesResponseBodyPagingInfoNodesTags {
	s.Value = &v
	return s
}

type ListNodesResponseBodyPagingInfoNodesTrigger struct {
	// The CRON expression for scheduling.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the validity period of the trigger.
	//
	// example:
	//
	// 9999-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The trigger ID.
	//
	// example:
	//
	// 543680677872062XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The start time of the validity period of the trigger.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time zone.
	//
	// example:
	//
	// Asia/Shanghai
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	// The type of the trigger.
	//
	// Valid values:
	//
	// 	- Scheduler
	//
	// 	- Manual
	//
	// 	- Steaming
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListNodesResponseBodyPagingInfoNodesTrigger) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyPagingInfoNodesTrigger) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyPagingInfoNodesTrigger) SetCron(v string) *ListNodesResponseBodyPagingInfoNodesTrigger {
	s.Cron = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesTrigger) SetEndTime(v string) *ListNodesResponseBodyPagingInfoNodesTrigger {
	s.EndTime = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesTrigger) SetId(v int64) *ListNodesResponseBodyPagingInfoNodesTrigger {
	s.Id = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesTrigger) SetStartTime(v string) *ListNodesResponseBodyPagingInfoNodesTrigger {
	s.StartTime = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesTrigger) SetTimezone(v string) *ListNodesResponseBodyPagingInfoNodesTrigger {
	s.Timezone = &v
	return s
}

func (s *ListNodesResponseBodyPagingInfoNodesTrigger) SetType(v string) *ListNodesResponseBodyPagingInfoNodesTrigger {
	s.Type = &v
	return s
}

type ListNodesResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListNodesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListNodesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponse) GoString() string {
	return s.String()
}

func (s *ListNodesResponse) SetHeaders(v map[string]*string) *ListNodesResponse {
	s.Headers = v
	return s
}

func (s *ListNodesResponse) SetStatusCode(v int32) *ListNodesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNodesResponse) SetBody(v *ListNodesResponseBody) *ListNodesResponse {
	s.Body = v
	return s
}

type ListPartitionsRequest struct {
	// example:
	//
	// ds=20250101
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// CreateTime
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-column:11075xxxx::test_project:test_schema:test_table
	TableId *string `json:"TableId,omitempty" xml:"TableId,omitempty"`
}

func (s ListPartitionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPartitionsRequest) GoString() string {
	return s.String()
}

func (s *ListPartitionsRequest) SetName(v string) *ListPartitionsRequest {
	s.Name = &v
	return s
}

func (s *ListPartitionsRequest) SetOrder(v string) *ListPartitionsRequest {
	s.Order = &v
	return s
}

func (s *ListPartitionsRequest) SetPageNumber(v int32) *ListPartitionsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListPartitionsRequest) SetPageSize(v int32) *ListPartitionsRequest {
	s.PageSize = &v
	return s
}

func (s *ListPartitionsRequest) SetSortBy(v string) *ListPartitionsRequest {
	s.SortBy = &v
	return s
}

func (s *ListPartitionsRequest) SetTableId(v string) *ListPartitionsRequest {
	s.TableId = &v
	return s
}

type ListPartitionsResponseBody struct {
	PagingInfo *ListPartitionsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// example:
	//
	// D1E2E5BC-xxxx-xxxx-xxxx-xxxxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListPartitionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPartitionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPartitionsResponseBody) SetPagingInfo(v *ListPartitionsResponseBodyPagingInfo) *ListPartitionsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListPartitionsResponseBody) SetRequestId(v string) *ListPartitionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPartitionsResponseBody) SetSuccess(v bool) *ListPartitionsResponseBody {
	s.Success = &v
	return s
}

type ListPartitionsResponseBodyPagingInfo struct {
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize      *int32       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PartitionList []*Partition `json:"PartitionList,omitempty" xml:"PartitionList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPartitionsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListPartitionsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListPartitionsResponseBodyPagingInfo) SetPageNumber(v int32) *ListPartitionsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListPartitionsResponseBodyPagingInfo) SetPageSize(v int32) *ListPartitionsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListPartitionsResponseBodyPagingInfo) SetPartitionList(v []*Partition) *ListPartitionsResponseBodyPagingInfo {
	s.PartitionList = v
	return s
}

func (s *ListPartitionsResponseBodyPagingInfo) SetTotalCount(v int64) *ListPartitionsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListPartitionsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPartitionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPartitionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPartitionsResponse) GoString() string {
	return s.String()
}

func (s *ListPartitionsResponse) SetHeaders(v map[string]*string) *ListPartitionsResponse {
	s.Headers = v
	return s
}

func (s *ListPartitionsResponse) SetStatusCode(v int32) *ListPartitionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPartitionsResponse) SetBody(v *ListPartitionsResponseBody) *ListPartitionsResponse {
	s.Body = v
	return s
}

type ListPipelineRunItemsRequest struct {
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 097c73fe-ed6e-4fb1-b109-a5d59e46cd58
	PipelineRunId *string `json:"PipelineRunId,omitempty" xml:"PipelineRunId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10001
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s ListPipelineRunItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunItemsRequest) GoString() string {
	return s.String()
}

func (s *ListPipelineRunItemsRequest) SetPageNumber(v int32) *ListPipelineRunItemsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListPipelineRunItemsRequest) SetPageSize(v int32) *ListPipelineRunItemsRequest {
	s.PageSize = &v
	return s
}

func (s *ListPipelineRunItemsRequest) SetPipelineRunId(v string) *ListPipelineRunItemsRequest {
	s.PipelineRunId = &v
	return s
}

func (s *ListPipelineRunItemsRequest) SetProjectId(v int64) *ListPipelineRunItemsRequest {
	s.ProjectId = &v
	return s
}

type ListPipelineRunItemsResponseBody struct {
	PagingInfo *ListPipelineRunItemsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// example:
	//
	// C99E2BE6-9DEA-5C2E-8F51-1DDCFEADE490
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPipelineRunItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunItemsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPipelineRunItemsResponseBody) SetPagingInfo(v *ListPipelineRunItemsResponseBodyPagingInfo) *ListPipelineRunItemsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListPipelineRunItemsResponseBody) SetRequestId(v string) *ListPipelineRunItemsResponseBody {
	s.RequestId = &v
	return s
}

type ListPipelineRunItemsResponseBodyPagingInfo struct {
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize         *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PipelineRunItems []*ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems `json:"PipelineRunItems,omitempty" xml:"PipelineRunItems,omitempty" type:"Repeated"`
	// example:
	//
	// 12
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPipelineRunItemsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunItemsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListPipelineRunItemsResponseBodyPagingInfo) SetPageNumber(v int32) *ListPipelineRunItemsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListPipelineRunItemsResponseBodyPagingInfo) SetPageSize(v int32) *ListPipelineRunItemsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListPipelineRunItemsResponseBodyPagingInfo) SetPipelineRunItems(v []*ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems) *ListPipelineRunItemsResponseBodyPagingInfo {
	s.PipelineRunItems = v
	return s
}

func (s *ListPipelineRunItemsResponseBodyPagingInfo) SetTotalCount(v int32) *ListPipelineRunItemsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems struct {
	// 发布包创建时间戳
	//
	// example:
	//
	// 1724984066000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 860438872620113XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// 创建人
	//
	// example:
	//
	// Error Message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// 修改时间
	//
	// example:
	//
	// 1724984066000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// { "version": "1.1.0", "kind": "Node", "spec": { "nodes": [ { "recurrence": "Normal", "id": "860438872620113XXXX", "timeout": 0, "instanceMode": "T+1", "rerunMode": "Allowed", "rerunTimes": 3, "rerunInterval": 180000, "datasource": { "name": "odps_test", "type": "odps" }, "script": { "language": "odps-sql", "path": "XX/OpenAPI_Test/ODPS_SQL_Test", "runtime": { "command": "ODPS_SQL", "commandTypeId": 10 }, "content": "select now();", "id": "853573334108680XXXX" }, "trigger": { "type": "Scheduler", "id": "543680677872062XXXX", "cron": "00 00 00 	- 	- ?", "startTime": "1970-01-01 00:00:00", "endTime": "9999-01-01 00:00:00", "timezone": "Asia/Shanghai", "delaySeconds": 0 }, "runtimeResource": { "resourceGroup": "S_res_group_XXXX_XXXX", "id": "623731286945488XXXX", "resourceGroupId": "7201XXXX" }, "name": "ODPS_SQL_Test", "owner": "110755000425XXXX", "metadata": { "owner": "110755000425XXXX", "ownerName": "XXXXX@test.XXX.com", "projectId": "307XXX" }, "inputs": { "nodeOutputs": [ { "data": "lwttest_standard_root", "artifactType": "NodeOutput" } ] }, "outputs": { "nodeOutputs": [ { "data": "860438872620113XXXX", "artifactType": "NodeOutput", "refTableName": "ODPS_SQL_Test", "isDefault": true } ] } } ], "flow": [ { "nodeId": "860438872620113XXXX", "depends": [ { "type": "Normal", "output": "lwttest_standard_root" } ] } ] }, "metadata": { "uuid": "860438872620113XXXX" } }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	// 发布流程状态
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// Node
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// 项目Id
	//
	// example:
	//
	// 1
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems) GoString() string {
	return s.String()
}

func (s *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems) SetCreateTime(v int64) *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems {
	s.CreateTime = &v
	return s
}

func (s *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems) SetId(v int64) *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems {
	s.Id = &v
	return s
}

func (s *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems) SetMessage(v string) *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems {
	s.Message = &v
	return s
}

func (s *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems) SetModifyTime(v int64) *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems {
	s.ModifyTime = &v
	return s
}

func (s *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems) SetName(v string) *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems {
	s.Name = &v
	return s
}

func (s *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems) SetSpec(v string) *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems {
	s.Spec = &v
	return s
}

func (s *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems) SetStatus(v string) *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems {
	s.Status = &v
	return s
}

func (s *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems) SetType(v string) *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems {
	s.Type = &v
	return s
}

func (s *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems) SetVersion(v int64) *ListPipelineRunItemsResponseBodyPagingInfoPipelineRunItems {
	s.Version = &v
	return s
}

type ListPipelineRunItemsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPipelineRunItemsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPipelineRunItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunItemsResponse) GoString() string {
	return s.String()
}

func (s *ListPipelineRunItemsResponse) SetHeaders(v map[string]*string) *ListPipelineRunItemsResponse {
	s.Headers = v
	return s
}

func (s *ListPipelineRunItemsResponse) SetStatusCode(v int32) *ListPipelineRunItemsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPipelineRunItemsResponse) SetBody(v *ListPipelineRunItemsResponseBody) *ListPipelineRunItemsResponse {
	s.Body = v
	return s
}

type ListPipelineRunsRequest struct {
	// The ID of the user who creates the processes. This parameter specifies a filter condition.
	//
	// example:
	//
	// 110755000425****
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The status of the processes. This parameter specifies a filter condition.
	//
	// Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Success
	//
	// 	- Fail
	//
	// 	- Termination
	//
	// 	- Cancel
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListPipelineRunsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunsRequest) GoString() string {
	return s.String()
}

func (s *ListPipelineRunsRequest) SetCreator(v string) *ListPipelineRunsRequest {
	s.Creator = &v
	return s
}

func (s *ListPipelineRunsRequest) SetPageNumber(v int32) *ListPipelineRunsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListPipelineRunsRequest) SetPageSize(v int32) *ListPipelineRunsRequest {
	s.PageSize = &v
	return s
}

func (s *ListPipelineRunsRequest) SetProjectId(v int64) *ListPipelineRunsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListPipelineRunsRequest) SetStatus(v string) *ListPipelineRunsRequest {
	s.Status = &v
	return s
}

type ListPipelineRunsResponseBody struct {
	// The pagination information.
	PagingInfo *ListPipelineRunsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 7C352CB7-CD88-50CF-9D0D-E81BDF02XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPipelineRunsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPipelineRunsResponseBody) SetPagingInfo(v *ListPipelineRunsResponseBodyPagingInfo) *ListPipelineRunsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListPipelineRunsResponseBody) SetRequestId(v string) *ListPipelineRunsResponseBody {
	s.RequestId = &v
	return s
}

type ListPipelineRunsResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The processes.
	PipelineRuns []*ListPipelineRunsResponseBodyPagingInfoPipelineRuns `json:"PipelineRuns,omitempty" xml:"PipelineRuns,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2524
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPipelineRunsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListPipelineRunsResponseBodyPagingInfo) SetPageNumber(v int32) *ListPipelineRunsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfo) SetPageSize(v int32) *ListPipelineRunsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfo) SetPipelineRuns(v []*ListPipelineRunsResponseBodyPagingInfoPipelineRuns) *ListPipelineRunsResponseBodyPagingInfo {
	s.PipelineRuns = v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfo) SetTotalCount(v int32) *ListPipelineRunsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListPipelineRunsResponseBodyPagingInfoPipelineRuns struct {
	// The time when the process was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1702736654000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The creator of the process.
	//
	// example:
	//
	// 110755000425XXXX
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// The process ID.
	//
	// example:
	//
	// 097c73fe-ed6e-4fb1-b109-a5d59e46cd58
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The error message returned during the stage.
	//
	// example:
	//
	// Error message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The time when the process was modified. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1702736654000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 70199
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The stages of the process.
	Stages []*ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages `json:"Stages,omitempty" xml:"Stages,omitempty" type:"Repeated"`
	// The status of the process.
	//
	// Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Success
	//
	// 	- Fail
	//
	// 	- Termination
	//
	// 	- Cancel
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListPipelineRunsResponseBodyPagingInfoPipelineRuns) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunsResponseBodyPagingInfoPipelineRuns) GoString() string {
	return s.String()
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRuns) SetCreateTime(v int64) *ListPipelineRunsResponseBodyPagingInfoPipelineRuns {
	s.CreateTime = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRuns) SetCreator(v string) *ListPipelineRunsResponseBodyPagingInfoPipelineRuns {
	s.Creator = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRuns) SetId(v string) *ListPipelineRunsResponseBodyPagingInfoPipelineRuns {
	s.Id = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRuns) SetMessage(v string) *ListPipelineRunsResponseBodyPagingInfoPipelineRuns {
	s.Message = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRuns) SetModifyTime(v int64) *ListPipelineRunsResponseBodyPagingInfoPipelineRuns {
	s.ModifyTime = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRuns) SetProjectId(v int64) *ListPipelineRunsResponseBodyPagingInfoPipelineRuns {
	s.ProjectId = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRuns) SetStages(v []*ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages) *ListPipelineRunsResponseBodyPagingInfoPipelineRuns {
	s.Stages = v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRuns) SetStatus(v string) *ListPipelineRunsResponseBodyPagingInfoPipelineRuns {
	s.Status = &v
	return s
}

type ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages struct {
	// The code of the stage.
	//
	// example:
	//
	// DEV_CHECK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The description of the stage.
	//
	// example:
	//
	// Check before going online to development
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The additional information about the stage.
	Detail map[string]interface{} `json:"Detail,omitempty" xml:"Detail,omitempty"`
	// The error message returned during the stage.
	//
	// example:
	//
	// Error message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The name of the stage.
	//
	// example:
	//
	// Check before going online to development
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The status of the stage.
	//
	// Valid values:
	//
	// 	- Init
	//
	// 	- Running
	//
	// 	- Success
	//
	// 	- Fail
	//
	// 	- Termination
	//
	// 	- Cancel
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The step number of the stage.
	//
	// example:
	//
	// 1
	Step *int32 `json:"Step,omitempty" xml:"Step,omitempty"`
	// The type of the stage. This parameter indicates the operation type in the stage.
	//
	// Valid values:
	//
	// 	- Deploy
	//
	// 	- Check
	//
	// 	- Offline
	//
	// 	- Build
	//
	// 	- Delete
	//
	// example:
	//
	// Check
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages) GoString() string {
	return s.String()
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages) SetCode(v string) *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages {
	s.Code = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages) SetDescription(v string) *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages {
	s.Description = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages) SetDetail(v map[string]interface{}) *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages {
	s.Detail = v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages) SetMessage(v string) *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages {
	s.Message = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages) SetName(v string) *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages {
	s.Name = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages) SetStatus(v string) *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages {
	s.Status = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages) SetStep(v int32) *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages {
	s.Step = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages) SetType(v string) *ListPipelineRunsResponseBodyPagingInfoPipelineRunsStages {
	s.Type = &v
	return s
}

type ListPipelineRunsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPipelineRunsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPipelineRunsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunsResponse) GoString() string {
	return s.String()
}

func (s *ListPipelineRunsResponse) SetHeaders(v map[string]*string) *ListPipelineRunsResponse {
	s.Headers = v
	return s
}

func (s *ListPipelineRunsResponse) SetStatusCode(v int32) *ListPipelineRunsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPipelineRunsResponse) SetBody(v *ListPipelineRunsResponseBody) *ListPipelineRunsResponse {
	s.Body = v
	return s
}

type ListProjectMembersRequest struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 62136
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.
	RoleCodes []*string `json:"RoleCodes,omitempty" xml:"RoleCodes,omitempty" type:"Repeated"`
	// The IDs of the accounts used by the members in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.
	UserIds []*string `json:"UserIds,omitempty" xml:"UserIds,omitempty" type:"Repeated"`
}

func (s ListProjectMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersRequest) GoString() string {
	return s.String()
}

func (s *ListProjectMembersRequest) SetPageNumber(v int32) *ListProjectMembersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListProjectMembersRequest) SetPageSize(v int32) *ListProjectMembersRequest {
	s.PageSize = &v
	return s
}

func (s *ListProjectMembersRequest) SetProjectId(v int64) *ListProjectMembersRequest {
	s.ProjectId = &v
	return s
}

func (s *ListProjectMembersRequest) SetRoleCodes(v []*string) *ListProjectMembersRequest {
	s.RoleCodes = v
	return s
}

func (s *ListProjectMembersRequest) SetUserIds(v []*string) *ListProjectMembersRequest {
	s.UserIds = v
	return s
}

type ListProjectMembersShrinkRequest struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 62136
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.
	RoleCodesShrink *string `json:"RoleCodes,omitempty" xml:"RoleCodes,omitempty"`
	// The IDs of the accounts used by the members in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the IDs of the accounts used by the members in the workspace.
	UserIdsShrink *string `json:"UserIds,omitempty" xml:"UserIds,omitempty"`
}

func (s ListProjectMembersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListProjectMembersShrinkRequest) SetPageNumber(v int32) *ListProjectMembersShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListProjectMembersShrinkRequest) SetPageSize(v int32) *ListProjectMembersShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListProjectMembersShrinkRequest) SetProjectId(v int64) *ListProjectMembersShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *ListProjectMembersShrinkRequest) SetRoleCodesShrink(v string) *ListProjectMembersShrinkRequest {
	s.RoleCodesShrink = &v
	return s
}

func (s *ListProjectMembersShrinkRequest) SetUserIdsShrink(v string) *ListProjectMembersShrinkRequest {
	s.UserIdsShrink = &v
	return s
}

type ListProjectMembersResponseBody struct {
	// The pagination information.
	PagingInfo *ListProjectMembersResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 9FBBBB1F-DD5E-5D8E-8F50-37F77460F056
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListProjectMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponseBody) SetPagingInfo(v *ListProjectMembersResponseBodyPagingInfo) *ListProjectMembersResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListProjectMembersResponseBody) SetRequestId(v string) *ListProjectMembersResponseBody {
	s.RequestId = &v
	return s
}

type ListProjectMembersResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The members in the workspace.
	ProjectMembers []*ListProjectMembersResponseBodyPagingInfoProjectMembers `json:"ProjectMembers,omitempty" xml:"ProjectMembers,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 12
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListProjectMembersResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponseBodyPagingInfo) SetPageNumber(v int32) *ListProjectMembersResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListProjectMembersResponseBodyPagingInfo) SetPageSize(v int32) *ListProjectMembersResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListProjectMembersResponseBodyPagingInfo) SetProjectMembers(v []*ListProjectMembersResponseBodyPagingInfoProjectMembers) *ListProjectMembersResponseBodyPagingInfo {
	s.ProjectMembers = v
	return s
}

func (s *ListProjectMembersResponseBodyPagingInfo) SetTotalCount(v int32) *ListProjectMembersResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListProjectMembersResponseBodyPagingInfoProjectMembers struct {
	// The ID of the DataWorks workspace.
	//
	// example:
	//
	// 62136
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The roles that are assigned to the member.
	Roles []*ListProjectMembersResponseBodyPagingInfoProjectMembersRoles `json:"Roles,omitempty" xml:"Roles,omitempty" type:"Repeated"`
	// The status of the member. Valid values:
	//
	// 	- Normal
	//
	// 	- Forbidden
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the account used by the member.
	//
	// example:
	//
	// 123422344899
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListProjectMembersResponseBodyPagingInfoProjectMembers) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponseBodyPagingInfoProjectMembers) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponseBodyPagingInfoProjectMembers) SetProjectId(v int64) *ListProjectMembersResponseBodyPagingInfoProjectMembers {
	s.ProjectId = &v
	return s
}

func (s *ListProjectMembersResponseBodyPagingInfoProjectMembers) SetRoles(v []*ListProjectMembersResponseBodyPagingInfoProjectMembersRoles) *ListProjectMembersResponseBodyPagingInfoProjectMembers {
	s.Roles = v
	return s
}

func (s *ListProjectMembersResponseBodyPagingInfoProjectMembers) SetStatus(v string) *ListProjectMembersResponseBodyPagingInfoProjectMembers {
	s.Status = &v
	return s
}

func (s *ListProjectMembersResponseBodyPagingInfoProjectMembers) SetUserId(v string) *ListProjectMembersResponseBodyPagingInfoProjectMembers {
	s.UserId = &v
	return s
}

type ListProjectMembersResponseBodyPagingInfoProjectMembersRoles struct {
	// The code of the role.
	//
	// example:
	//
	// role_project_guest
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the role.
	//
	// example:
	//
	// Visitors
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the role. Valid values:
	//
	// 	- UserCustom: user-defined role
	//
	// 	- System: system role
	//
	// example:
	//
	// System
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListProjectMembersResponseBodyPagingInfoProjectMembersRoles) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponseBodyPagingInfoProjectMembersRoles) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponseBodyPagingInfoProjectMembersRoles) SetCode(v string) *ListProjectMembersResponseBodyPagingInfoProjectMembersRoles {
	s.Code = &v
	return s
}

func (s *ListProjectMembersResponseBodyPagingInfoProjectMembersRoles) SetName(v string) *ListProjectMembersResponseBodyPagingInfoProjectMembersRoles {
	s.Name = &v
	return s
}

func (s *ListProjectMembersResponseBodyPagingInfoProjectMembersRoles) SetType(v string) *ListProjectMembersResponseBodyPagingInfoProjectMembersRoles {
	s.Type = &v
	return s
}

type ListProjectMembersResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProjectMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProjectMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponse) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponse) SetHeaders(v map[string]*string) *ListProjectMembersResponse {
	s.Headers = v
	return s
}

func (s *ListProjectMembersResponse) SetStatusCode(v int32) *ListProjectMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProjectMembersResponse) SetBody(v *ListProjectMembersResponseBody) *ListProjectMembersResponse {
	s.Body = v
	return s
}

type ListProjectRolesRequest struct {
	// The codes of roles in the DataWorks workspace.
	Codes []*string `json:"Codes,omitempty" xml:"Codes,omitempty" type:"Repeated"`
	// The names of roles in the DataWorks workspace.
	Names []*string `json:"Names,omitempty" xml:"Names,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 21229
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The type of the role. Valid values:
	//
	// 	- UserCustom: user-defined role
	//
	// 	- System: system role
	//
	// example:
	//
	// System
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListProjectRolesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectRolesRequest) GoString() string {
	return s.String()
}

func (s *ListProjectRolesRequest) SetCodes(v []*string) *ListProjectRolesRequest {
	s.Codes = v
	return s
}

func (s *ListProjectRolesRequest) SetNames(v []*string) *ListProjectRolesRequest {
	s.Names = v
	return s
}

func (s *ListProjectRolesRequest) SetPageNumber(v int32) *ListProjectRolesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListProjectRolesRequest) SetPageSize(v int32) *ListProjectRolesRequest {
	s.PageSize = &v
	return s
}

func (s *ListProjectRolesRequest) SetProjectId(v int64) *ListProjectRolesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListProjectRolesRequest) SetType(v string) *ListProjectRolesRequest {
	s.Type = &v
	return s
}

type ListProjectRolesShrinkRequest struct {
	// The codes of roles in the DataWorks workspace.
	CodesShrink *string `json:"Codes,omitempty" xml:"Codes,omitempty"`
	// The names of roles in the DataWorks workspace.
	NamesShrink *string `json:"Names,omitempty" xml:"Names,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 21229
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The type of the role. Valid values:
	//
	// 	- UserCustom: user-defined role
	//
	// 	- System: system role
	//
	// example:
	//
	// System
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListProjectRolesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectRolesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListProjectRolesShrinkRequest) SetCodesShrink(v string) *ListProjectRolesShrinkRequest {
	s.CodesShrink = &v
	return s
}

func (s *ListProjectRolesShrinkRequest) SetNamesShrink(v string) *ListProjectRolesShrinkRequest {
	s.NamesShrink = &v
	return s
}

func (s *ListProjectRolesShrinkRequest) SetPageNumber(v int32) *ListProjectRolesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListProjectRolesShrinkRequest) SetPageSize(v int32) *ListProjectRolesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListProjectRolesShrinkRequest) SetProjectId(v int64) *ListProjectRolesShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *ListProjectRolesShrinkRequest) SetType(v string) *ListProjectRolesShrinkRequest {
	s.Type = &v
	return s
}

type ListProjectRolesResponseBody struct {
	// The pagination information.
	PagingInfo *ListProjectRolesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 61649187-0BCF-5E75-8D4B-64FDBEBBB447
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListProjectRolesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectRolesResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectRolesResponseBody) SetPagingInfo(v *ListProjectRolesResponseBodyPagingInfo) *ListProjectRolesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListProjectRolesResponseBody) SetRequestId(v string) *ListProjectRolesResponseBody {
	s.RequestId = &v
	return s
}

type ListProjectRolesResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The roles in the DataWorks workspace.
	ProjectRoles []*ListProjectRolesResponseBodyPagingInfoProjectRoles `json:"ProjectRoles,omitempty" xml:"ProjectRoles,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 42
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListProjectRolesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListProjectRolesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListProjectRolesResponseBodyPagingInfo) SetPageNumber(v string) *ListProjectRolesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListProjectRolesResponseBodyPagingInfo) SetPageSize(v string) *ListProjectRolesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListProjectRolesResponseBodyPagingInfo) SetProjectRoles(v []*ListProjectRolesResponseBodyPagingInfoProjectRoles) *ListProjectRolesResponseBodyPagingInfo {
	s.ProjectRoles = v
	return s
}

func (s *ListProjectRolesResponseBodyPagingInfo) SetTotalCount(v string) *ListProjectRolesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListProjectRolesResponseBodyPagingInfoProjectRoles struct {
	// The code of the role in the DataWorks workspace.
	//
	// example:
	//
	// role_project_guest
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the role.
	//
	// example:
	//
	// Visitors
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 21229
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The type of the role in the DataWorks workspace.
	//
	// example:
	//
	// System
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListProjectRolesResponseBodyPagingInfoProjectRoles) String() string {
	return tea.Prettify(s)
}

func (s ListProjectRolesResponseBodyPagingInfoProjectRoles) GoString() string {
	return s.String()
}

func (s *ListProjectRolesResponseBodyPagingInfoProjectRoles) SetCode(v string) *ListProjectRolesResponseBodyPagingInfoProjectRoles {
	s.Code = &v
	return s
}

func (s *ListProjectRolesResponseBodyPagingInfoProjectRoles) SetName(v string) *ListProjectRolesResponseBodyPagingInfoProjectRoles {
	s.Name = &v
	return s
}

func (s *ListProjectRolesResponseBodyPagingInfoProjectRoles) SetProjectId(v int64) *ListProjectRolesResponseBodyPagingInfoProjectRoles {
	s.ProjectId = &v
	return s
}

func (s *ListProjectRolesResponseBodyPagingInfoProjectRoles) SetType(v string) *ListProjectRolesResponseBodyPagingInfoProjectRoles {
	s.Type = &v
	return s
}

type ListProjectRolesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProjectRolesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProjectRolesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectRolesResponse) GoString() string {
	return s.String()
}

func (s *ListProjectRolesResponse) SetHeaders(v map[string]*string) *ListProjectRolesResponse {
	s.Headers = v
	return s
}

func (s *ListProjectRolesResponse) SetStatusCode(v int32) *ListProjectRolesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProjectRolesResponse) SetBody(v *ListProjectRolesResponseBody) *ListProjectRolesResponse {
	s.Body = v
	return s
}

type ListProjectsRequest struct {
	// The ID of the Alibaba Cloud resource group to which the workspaces belong. You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) and go to the Resource Group page to query the ID.
	//
	// This parameter is used to query the information about workspaces that belong to a specific resource group.
	//
	// example:
	//
	// rg-acfmzbn7pti3zff
	AliyunResourceGroupId *string `json:"AliyunResourceGroupId,omitempty" xml:"AliyunResourceGroupId,omitempty"`
	// The tags.
	AliyunResourceTags []*ListProjectsRequestAliyunResourceTags `json:"AliyunResourceTags,omitempty" xml:"AliyunResourceTags,omitempty" type:"Repeated"`
	// Specifies whether the development environment is enabled. Valid values:
	//
	// 	- true: The development environment is enabled. In this case, the development environment is isolated from the production environment in a workspace.
	//
	// 	- false: The development environment is disabled. In this case, only the production environment is used in a workspace.
	//
	// example:
	//
	// true
	DevEnvironmentEnabled *bool `json:"DevEnvironmentEnabled,omitempty" xml:"DevEnvironmentEnabled,omitempty"`
	// Specifies whether the Develop role is disabled. Valid values:
	//
	// 	- false (default)
	//
	// 	- true
	//
	// example:
	//
	// false
	DevRoleDisabled *bool `json:"DevRoleDisabled,omitempty" xml:"DevRoleDisabled,omitempty"`
	// The IDs of the DataWorks workspaces.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// The names of the DataWorks workspaces.
	Names []*string `json:"Names,omitempty" xml:"Names,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Specifies whether scheduling of Platform for AI (PAI) tasks is enabled. Valid values:
	//
	// 	- true: Scheduling of PAI tasks is enabled. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
	//
	// 	- false: Scheduling of PAI tasks is disabled.
	//
	// example:
	//
	// true
	PaiTaskEnabled *bool `json:"PaiTaskEnabled,omitempty" xml:"PaiTaskEnabled,omitempty"`
	// The status of the workspaces. Valid values:
	//
	// 	- Available
	//
	// 	- Initializing
	//
	// 	- InitFailed
	//
	// 	- Forbidden
	//
	// 	- Deleting
	//
	// 	- DeleteFailed
	//
	// 	- Frozen
	//
	// 	- Updating
	//
	// 	- UpdateFailed
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListProjectsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsRequest) GoString() string {
	return s.String()
}

func (s *ListProjectsRequest) SetAliyunResourceGroupId(v string) *ListProjectsRequest {
	s.AliyunResourceGroupId = &v
	return s
}

func (s *ListProjectsRequest) SetAliyunResourceTags(v []*ListProjectsRequestAliyunResourceTags) *ListProjectsRequest {
	s.AliyunResourceTags = v
	return s
}

func (s *ListProjectsRequest) SetDevEnvironmentEnabled(v bool) *ListProjectsRequest {
	s.DevEnvironmentEnabled = &v
	return s
}

func (s *ListProjectsRequest) SetDevRoleDisabled(v bool) *ListProjectsRequest {
	s.DevRoleDisabled = &v
	return s
}

func (s *ListProjectsRequest) SetIds(v []*int64) *ListProjectsRequest {
	s.Ids = v
	return s
}

func (s *ListProjectsRequest) SetNames(v []*string) *ListProjectsRequest {
	s.Names = v
	return s
}

func (s *ListProjectsRequest) SetPageNumber(v int32) *ListProjectsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListProjectsRequest) SetPageSize(v int32) *ListProjectsRequest {
	s.PageSize = &v
	return s
}

func (s *ListProjectsRequest) SetPaiTaskEnabled(v bool) *ListProjectsRequest {
	s.PaiTaskEnabled = &v
	return s
}

func (s *ListProjectsRequest) SetStatus(v string) *ListProjectsRequest {
	s.Status = &v
	return s
}

type ListProjectsRequestAliyunResourceTags struct {
	// The tag key.
	//
	// example:
	//
	// batch
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// blue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListProjectsRequestAliyunResourceTags) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsRequestAliyunResourceTags) GoString() string {
	return s.String()
}

func (s *ListProjectsRequestAliyunResourceTags) SetKey(v string) *ListProjectsRequestAliyunResourceTags {
	s.Key = &v
	return s
}

func (s *ListProjectsRequestAliyunResourceTags) SetValue(v string) *ListProjectsRequestAliyunResourceTags {
	s.Value = &v
	return s
}

type ListProjectsShrinkRequest struct {
	// The ID of the Alibaba Cloud resource group to which the workspaces belong. You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) and go to the Resource Group page to query the ID.
	//
	// This parameter is used to query the information about workspaces that belong to a specific resource group.
	//
	// example:
	//
	// rg-acfmzbn7pti3zff
	AliyunResourceGroupId *string `json:"AliyunResourceGroupId,omitempty" xml:"AliyunResourceGroupId,omitempty"`
	// The tags.
	AliyunResourceTagsShrink *string `json:"AliyunResourceTags,omitempty" xml:"AliyunResourceTags,omitempty"`
	// Specifies whether the development environment is enabled. Valid values:
	//
	// 	- true: The development environment is enabled. In this case, the development environment is isolated from the production environment in a workspace.
	//
	// 	- false: The development environment is disabled. In this case, only the production environment is used in a workspace.
	//
	// example:
	//
	// true
	DevEnvironmentEnabled *bool `json:"DevEnvironmentEnabled,omitempty" xml:"DevEnvironmentEnabled,omitempty"`
	// Specifies whether the Develop role is disabled. Valid values:
	//
	// 	- false (default)
	//
	// 	- true
	//
	// example:
	//
	// false
	DevRoleDisabled *bool `json:"DevRoleDisabled,omitempty" xml:"DevRoleDisabled,omitempty"`
	// The IDs of the DataWorks workspaces.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	// The names of the DataWorks workspaces.
	NamesShrink *string `json:"Names,omitempty" xml:"Names,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Specifies whether scheduling of Platform for AI (PAI) tasks is enabled. Valid values:
	//
	// 	- true: Scheduling of PAI tasks is enabled. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
	//
	// 	- false: Scheduling of PAI tasks is disabled.
	//
	// example:
	//
	// true
	PaiTaskEnabled *bool `json:"PaiTaskEnabled,omitempty" xml:"PaiTaskEnabled,omitempty"`
	// The status of the workspaces. Valid values:
	//
	// 	- Available
	//
	// 	- Initializing
	//
	// 	- InitFailed
	//
	// 	- Forbidden
	//
	// 	- Deleting
	//
	// 	- DeleteFailed
	//
	// 	- Frozen
	//
	// 	- Updating
	//
	// 	- UpdateFailed
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListProjectsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListProjectsShrinkRequest) SetAliyunResourceGroupId(v string) *ListProjectsShrinkRequest {
	s.AliyunResourceGroupId = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetAliyunResourceTagsShrink(v string) *ListProjectsShrinkRequest {
	s.AliyunResourceTagsShrink = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetDevEnvironmentEnabled(v bool) *ListProjectsShrinkRequest {
	s.DevEnvironmentEnabled = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetDevRoleDisabled(v bool) *ListProjectsShrinkRequest {
	s.DevRoleDisabled = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetIdsShrink(v string) *ListProjectsShrinkRequest {
	s.IdsShrink = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetNamesShrink(v string) *ListProjectsShrinkRequest {
	s.NamesShrink = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetPageNumber(v int32) *ListProjectsShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetPageSize(v int32) *ListProjectsShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetPaiTaskEnabled(v bool) *ListProjectsShrinkRequest {
	s.PaiTaskEnabled = &v
	return s
}

func (s *ListProjectsShrinkRequest) SetStatus(v string) *ListProjectsShrinkRequest {
	s.Status = &v
	return s
}

type ListProjectsResponseBody struct {
	// The pagination information.
	PagingInfo *ListProjectsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 6D24AD9A-652F-59E2-AC1F-05029300F8A4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListProjectsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBody) SetPagingInfo(v *ListProjectsResponseBodyPagingInfo) *ListProjectsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListProjectsResponseBody) SetRequestId(v string) *ListProjectsResponseBody {
	s.RequestId = &v
	return s
}

type ListProjectsResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 10
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 1
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The workspaces.
	Projects []*ListProjectsResponseBodyPagingInfoProjects `json:"Projects,omitempty" xml:"Projects,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListProjectsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyPagingInfo) SetPageNumber(v int32) *ListProjectsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListProjectsResponseBodyPagingInfo) SetPageSize(v int32) *ListProjectsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListProjectsResponseBodyPagingInfo) SetProjects(v []*ListProjectsResponseBodyPagingInfoProjects) *ListProjectsResponseBodyPagingInfo {
	s.Projects = v
	return s
}

func (s *ListProjectsResponseBodyPagingInfo) SetTotalCount(v int32) *ListProjectsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListProjectsResponseBodyPagingInfoProjects struct {
	// The ID of the Alibaba Cloud resource group to which the workspace belongs.
	//
	// example:
	//
	// rg-acfmzbn7pti3zfa
	AliyunResourceGroupId *string `json:"AliyunResourceGroupId,omitempty" xml:"AliyunResourceGroupId,omitempty"`
	// The tags.
	AliyunResourceTags []*ListProjectsResponseBodyPagingInfoProjectsAliyunResourceTags `json:"AliyunResourceTags,omitempty" xml:"AliyunResourceTags,omitempty" type:"Repeated"`
	// The description of the workspace.
	//
	// example:
	//
	// Financial analysis group project data development
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Indicates whether the development environment is enabled. Valid values:
	//
	// 	- true: The development environment is enabled. In this case, the development environment is isolated from the production environment in the workspace.
	//
	// 	- false: The development environment is disabled. In this case, only the production environment is used in the workspace.
	//
	// example:
	//
	// true
	DevEnvironmentEnabled *bool `json:"DevEnvironmentEnabled,omitempty" xml:"DevEnvironmentEnabled,omitempty"`
	// Indicates whether the Develop role is disabled. Valid values:
	//
	// 	- false (default)
	//
	// 	- true
	//
	// example:
	//
	// false
	DevRoleDisabled *bool `json:"DevRoleDisabled,omitempty" xml:"DevRoleDisabled,omitempty"`
	// The display name of the workspace.
	//
	// example:
	//
	// Sora financial analysis
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 123456
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the workspace.
	//
	// example:
	//
	// sora_finance
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the Alibaba Cloud account to which the workspace belongs.
	//
	// example:
	//
	// 123532153125
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// Indicates whether scheduling of PAI tasks is enabled. Valid values:
	//
	// 	- true: Scheduling of PAI tasks is enabled. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
	//
	// 	- false: Scheduling of PAI tasks is disabled.
	//
	// example:
	//
	// true
	PaiTaskEnabled *bool `json:"PaiTaskEnabled,omitempty" xml:"PaiTaskEnabled,omitempty"`
	// The status of the workspace. Valid values:
	//
	// 	- Available
	//
	// 	- Initializing
	//
	// 	- InitFailed
	//
	// 	- Forbidden
	//
	// 	- Deleting
	//
	// 	- DeleteFailed
	//
	// 	- Frozen
	//
	// 	- Updating
	//
	// 	- UpdateFailed
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListProjectsResponseBodyPagingInfoProjects) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyPagingInfoProjects) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyPagingInfoProjects) SetAliyunResourceGroupId(v string) *ListProjectsResponseBodyPagingInfoProjects {
	s.AliyunResourceGroupId = &v
	return s
}

func (s *ListProjectsResponseBodyPagingInfoProjects) SetAliyunResourceTags(v []*ListProjectsResponseBodyPagingInfoProjectsAliyunResourceTags) *ListProjectsResponseBodyPagingInfoProjects {
	s.AliyunResourceTags = v
	return s
}

func (s *ListProjectsResponseBodyPagingInfoProjects) SetDescription(v string) *ListProjectsResponseBodyPagingInfoProjects {
	s.Description = &v
	return s
}

func (s *ListProjectsResponseBodyPagingInfoProjects) SetDevEnvironmentEnabled(v bool) *ListProjectsResponseBodyPagingInfoProjects {
	s.DevEnvironmentEnabled = &v
	return s
}

func (s *ListProjectsResponseBodyPagingInfoProjects) SetDevRoleDisabled(v bool) *ListProjectsResponseBodyPagingInfoProjects {
	s.DevRoleDisabled = &v
	return s
}

func (s *ListProjectsResponseBodyPagingInfoProjects) SetDisplayName(v string) *ListProjectsResponseBodyPagingInfoProjects {
	s.DisplayName = &v
	return s
}

func (s *ListProjectsResponseBodyPagingInfoProjects) SetId(v int64) *ListProjectsResponseBodyPagingInfoProjects {
	s.Id = &v
	return s
}

func (s *ListProjectsResponseBodyPagingInfoProjects) SetName(v string) *ListProjectsResponseBodyPagingInfoProjects {
	s.Name = &v
	return s
}

func (s *ListProjectsResponseBodyPagingInfoProjects) SetOwner(v string) *ListProjectsResponseBodyPagingInfoProjects {
	s.Owner = &v
	return s
}

func (s *ListProjectsResponseBodyPagingInfoProjects) SetPaiTaskEnabled(v bool) *ListProjectsResponseBodyPagingInfoProjects {
	s.PaiTaskEnabled = &v
	return s
}

func (s *ListProjectsResponseBodyPagingInfoProjects) SetStatus(v string) *ListProjectsResponseBodyPagingInfoProjects {
	s.Status = &v
	return s
}

type ListProjectsResponseBodyPagingInfoProjectsAliyunResourceTags struct {
	// The tag key.
	//
	// example:
	//
	// batch
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// blue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListProjectsResponseBodyPagingInfoProjectsAliyunResourceTags) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyPagingInfoProjectsAliyunResourceTags) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyPagingInfoProjectsAliyunResourceTags) SetKey(v string) *ListProjectsResponseBodyPagingInfoProjectsAliyunResourceTags {
	s.Key = &v
	return s
}

func (s *ListProjectsResponseBodyPagingInfoProjectsAliyunResourceTags) SetValue(v string) *ListProjectsResponseBodyPagingInfoProjectsAliyunResourceTags {
	s.Value = &v
	return s
}

type ListProjectsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProjectsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProjectsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponse) GoString() string {
	return s.String()
}

func (s *ListProjectsResponse) SetHeaders(v map[string]*string) *ListProjectsResponse {
	s.Headers = v
	return s
}

func (s *ListProjectsResponse) SetStatusCode(v int32) *ListProjectsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProjectsResponse) SetBody(v *ListProjectsResponseBody) *ListProjectsResponse {
	s.Body = v
	return s
}

type ListResourceGroupsRequest struct {
	// Alibaba Cloud Resource Group ID
	//
	// example:
	//
	// rg-aek2kqofrgXXXXX
	AliyunResourceGroupId *string `json:"AliyunResourceGroupId,omitempty" xml:"AliyunResourceGroupId,omitempty"`
	// Alibaba Cloud tag list
	AliyunResourceTags []*ListResourceGroupsRequestAliyunResourceTags `json:"AliyunResourceTags,omitempty" xml:"AliyunResourceTags,omitempty" type:"Repeated"`
	// The name of a resource group, which is used for fuzzy match.
	//
	// example:
	//
	// Resource
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The billing method of resource groups. Valid values:
	//
	// 	- PrePaid
	//
	// 	- PostPaid
	//
	// example:
	//
	// PrePaid
	PaymentType *string `json:"PaymentType,omitempty" xml:"PaymentType,omitempty"`
	// The ID of the DataWorks workspace.
	//
	// example:
	//
	// 1000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The types of resource groups to query. If you do not configure this parameter, only serverless resource groups are returned by default.
	ResourceGroupTypes []*string `json:"ResourceGroupTypes,omitempty" xml:"ResourceGroupTypes,omitempty" type:"Repeated"`
	// The fields used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:
	//
	// 	- Id (Desc/Asc): the resource group ID
	//
	// 	- Name (Desc/Asc): the name of the resource group
	//
	// 	- Remark (Desc/Asc): the remarks of the resource group
	//
	// 	- Type (Desc/Asc): the type of the resource group
	//
	// 	- Status (Desc/Asc): the status of the resource group
	//
	// 	- Spec (Desc/Asc): the specifications of the resource group
	//
	// 	- CreateUser (Desc/Asc): the creator of the resource group
	//
	// 	- CreateTime (Desc/Asc): the time when the resource group is created
	//
	// Default value: CreateTime Asc
	//
	// example:
	//
	// CreateTime Asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The statuses of resource groups.
	Statuses []*string `json:"Statuses,omitempty" xml:"Statuses,omitempty" type:"Repeated"`
}

func (s ListResourceGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListResourceGroupsRequest) SetAliyunResourceGroupId(v string) *ListResourceGroupsRequest {
	s.AliyunResourceGroupId = &v
	return s
}

func (s *ListResourceGroupsRequest) SetAliyunResourceTags(v []*ListResourceGroupsRequestAliyunResourceTags) *ListResourceGroupsRequest {
	s.AliyunResourceTags = v
	return s
}

func (s *ListResourceGroupsRequest) SetName(v string) *ListResourceGroupsRequest {
	s.Name = &v
	return s
}

func (s *ListResourceGroupsRequest) SetPageNumber(v int32) *ListResourceGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListResourceGroupsRequest) SetPageSize(v int32) *ListResourceGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *ListResourceGroupsRequest) SetPaymentType(v string) *ListResourceGroupsRequest {
	s.PaymentType = &v
	return s
}

func (s *ListResourceGroupsRequest) SetProjectId(v int64) *ListResourceGroupsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListResourceGroupsRequest) SetResourceGroupTypes(v []*string) *ListResourceGroupsRequest {
	s.ResourceGroupTypes = v
	return s
}

func (s *ListResourceGroupsRequest) SetSortBy(v string) *ListResourceGroupsRequest {
	s.SortBy = &v
	return s
}

func (s *ListResourceGroupsRequest) SetStatuses(v []*string) *ListResourceGroupsRequest {
	s.Statuses = v
	return s
}

type ListResourceGroupsRequestAliyunResourceTags struct {
	// Tag Key
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// Tag Value
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListResourceGroupsRequestAliyunResourceTags) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupsRequestAliyunResourceTags) GoString() string {
	return s.String()
}

func (s *ListResourceGroupsRequestAliyunResourceTags) SetKey(v string) *ListResourceGroupsRequestAliyunResourceTags {
	s.Key = &v
	return s
}

func (s *ListResourceGroupsRequestAliyunResourceTags) SetValue(v string) *ListResourceGroupsRequestAliyunResourceTags {
	s.Value = &v
	return s
}

type ListResourceGroupsShrinkRequest struct {
	// Alibaba Cloud Resource Group ID
	//
	// example:
	//
	// rg-aek2kqofrgXXXXX
	AliyunResourceGroupId *string `json:"AliyunResourceGroupId,omitempty" xml:"AliyunResourceGroupId,omitempty"`
	// Alibaba Cloud tag list
	AliyunResourceTagsShrink *string `json:"AliyunResourceTags,omitempty" xml:"AliyunResourceTags,omitempty"`
	// The name of a resource group, which is used for fuzzy match.
	//
	// example:
	//
	// Resource
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The billing method of resource groups. Valid values:
	//
	// 	- PrePaid
	//
	// 	- PostPaid
	//
	// example:
	//
	// PrePaid
	PaymentType *string `json:"PaymentType,omitempty" xml:"PaymentType,omitempty"`
	// The ID of the DataWorks workspace.
	//
	// example:
	//
	// 1000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The types of resource groups to query. If you do not configure this parameter, only serverless resource groups are returned by default.
	ResourceGroupTypesShrink *string `json:"ResourceGroupTypes,omitempty" xml:"ResourceGroupTypes,omitempty"`
	// The fields used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:
	//
	// 	- Id (Desc/Asc): the resource group ID
	//
	// 	- Name (Desc/Asc): the name of the resource group
	//
	// 	- Remark (Desc/Asc): the remarks of the resource group
	//
	// 	- Type (Desc/Asc): the type of the resource group
	//
	// 	- Status (Desc/Asc): the status of the resource group
	//
	// 	- Spec (Desc/Asc): the specifications of the resource group
	//
	// 	- CreateUser (Desc/Asc): the creator of the resource group
	//
	// 	- CreateTime (Desc/Asc): the time when the resource group is created
	//
	// Default value: CreateTime Asc
	//
	// example:
	//
	// CreateTime Asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The statuses of resource groups.
	StatusesShrink *string `json:"Statuses,omitempty" xml:"Statuses,omitempty"`
}

func (s ListResourceGroupsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListResourceGroupsShrinkRequest) SetAliyunResourceGroupId(v string) *ListResourceGroupsShrinkRequest {
	s.AliyunResourceGroupId = &v
	return s
}

func (s *ListResourceGroupsShrinkRequest) SetAliyunResourceTagsShrink(v string) *ListResourceGroupsShrinkRequest {
	s.AliyunResourceTagsShrink = &v
	return s
}

func (s *ListResourceGroupsShrinkRequest) SetName(v string) *ListResourceGroupsShrinkRequest {
	s.Name = &v
	return s
}

func (s *ListResourceGroupsShrinkRequest) SetPageNumber(v int32) *ListResourceGroupsShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListResourceGroupsShrinkRequest) SetPageSize(v int32) *ListResourceGroupsShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListResourceGroupsShrinkRequest) SetPaymentType(v string) *ListResourceGroupsShrinkRequest {
	s.PaymentType = &v
	return s
}

func (s *ListResourceGroupsShrinkRequest) SetProjectId(v int64) *ListResourceGroupsShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *ListResourceGroupsShrinkRequest) SetResourceGroupTypesShrink(v string) *ListResourceGroupsShrinkRequest {
	s.ResourceGroupTypesShrink = &v
	return s
}

func (s *ListResourceGroupsShrinkRequest) SetSortBy(v string) *ListResourceGroupsShrinkRequest {
	s.SortBy = &v
	return s
}

func (s *ListResourceGroupsShrinkRequest) SetStatusesShrink(v string) *ListResourceGroupsShrinkRequest {
	s.StatusesShrink = &v
	return s
}

type ListResourceGroupsResponseBody struct {
	// The pagination information.
	PagingInfo *ListResourceGroupsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true and false.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListResourceGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListResourceGroupsResponseBody) SetPagingInfo(v *ListResourceGroupsResponseBodyPagingInfo) *ListResourceGroupsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListResourceGroupsResponseBody) SetRequestId(v string) *ListResourceGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListResourceGroupsResponseBody) SetSuccess(v bool) *ListResourceGroupsResponseBody {
	s.Success = &v
	return s
}

type ListResourceGroupsResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The resource groups returned.
	ResourceGroupList []*ListResourceGroupsResponseBodyPagingInfoResourceGroupList `json:"ResourceGroupList,omitempty" xml:"ResourceGroupList,omitempty" type:"Repeated"`
	// All data entries
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListResourceGroupsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListResourceGroupsResponseBodyPagingInfo) SetPageNumber(v int32) *ListResourceGroupsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfo) SetPageSize(v int32) *ListResourceGroupsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfo) SetResourceGroupList(v []*ListResourceGroupsResponseBodyPagingInfoResourceGroupList) *ListResourceGroupsResponseBodyPagingInfo {
	s.ResourceGroupList = v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfo) SetTotalCount(v int32) *ListResourceGroupsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListResourceGroupsResponseBodyPagingInfoResourceGroupList struct {
	// Alibaba Cloud Resource Group ID
	//
	// example:
	//
	// rg-aek2kqofrgXXXXX
	AliyunResourceGroupId *string `json:"AliyunResourceGroupId,omitempty" xml:"AliyunResourceGroupId,omitempty"`
	// Alibaba Cloud tag list
	AliyunResourceTags []*ListResourceGroupsResponseBodyPagingInfoResourceGroupListAliyunResourceTags `json:"AliyunResourceTags,omitempty" xml:"AliyunResourceTags,omitempty" type:"Repeated"`
	// The creation time, which is a 64-bit timestamp.
	//
	// example:
	//
	// 1727055811000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the user who created the resource group.
	//
	// example:
	//
	// 11075500042XXXXX
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// Default VPC ID bound to a common resource group
	//
	// example:
	//
	// vpc-m2et4f3oc8msfbccXXXXX
	DefaultVpcId *string `json:"DefaultVpcId,omitempty" xml:"DefaultVpcId,omitempty"`
	// The default switch ID bound to the common resource group.
	//
	// example:
	//
	// vsw-uf8usrhs7hjd9amsXXXXX
	DefaultVswicthId *string `json:"DefaultVswicthId,omitempty" xml:"DefaultVswicthId,omitempty"`
	// Unique identifier of a resource group
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the resource group.
	//
	// example:
	//
	// common_resource_group
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The order instance ID of the resource group.
	//
	// example:
	//
	// c442b330-3b10-4584-959e-736e4edXXXXX
	OrderInstanceId *string `json:"OrderInstanceId,omitempty" xml:"OrderInstanceId,omitempty"`
	// The billing method of the resource group. Valid values: PrePaid and PostPaid. The value PrePaid indicates the subscription billing method, and the value PostPaid indicates the pay-as-you-go billing method.
	//
	// example:
	//
	// PrePaid
	PaymentType *string `json:"PaymentType,omitempty" xml:"PaymentType,omitempty"`
	// Remarks for resource groups
	//
	// example:
	//
	// Create a common resource group for common tasks
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The type of the resource group. Valid values:
	//
	// 	- CommonV2: serverless resource group
	//
	// 	- ExclusiveDataIntegration: exclusive resource group for Data Integration
	//
	// 	- ExclusiveScheduler: exclusive resource group for scheduling
	//
	// 	- ExclusiveDataService: exclusive resource group for DataService Studio
	//
	// example:
	//
	// CommonV2
	ResourceGroupType *string `json:"ResourceGroupType,omitempty" xml:"ResourceGroupType,omitempty"`
	// Resource Group specifications
	Spec *ListResourceGroupsResponseBodyPagingInfoResourceGroupListSpec `json:"Spec,omitempty" xml:"Spec,omitempty" type:"Struct"`
	// The status of the resource group. Valid values:
	//
	// 	- Normal: The resource group is running or in use.
	//
	// 	- Stop: The resource group is expired.
	//
	// 	- Deleted: The resource group is released or destroyed.
	//
	// 	- Creating: The resource group is being created.
	//
	// 	- CreateFailed: The resource group fails to be created.
	//
	// 	- Updating: The resource group is being scaled in or out, or the configurations of the resource group are being changed.
	//
	// 	- UpdateFailed: The resource group fails to be scaled out or upgraded.
	//
	// 	- Deleting: The resource group is being released or destroyed.
	//
	// 	- DeleteFailed: The resource group fails to be released or destroyed.
	//
	// 	- Timeout: The operations that are performed on the resource group time out.
	//
	// 	- Freezed: The resource group is frozen.
	//
	// 	- Starting: The resource group is being started.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListResourceGroupsResponseBodyPagingInfoResourceGroupList) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupsResponseBodyPagingInfoResourceGroupList) GoString() string {
	return s.String()
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetAliyunResourceGroupId(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.AliyunResourceGroupId = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetAliyunResourceTags(v []*ListResourceGroupsResponseBodyPagingInfoResourceGroupListAliyunResourceTags) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.AliyunResourceTags = v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetCreateTime(v int64) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.CreateTime = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetCreateUser(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.CreateUser = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetDefaultVpcId(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.DefaultVpcId = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetDefaultVswicthId(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.DefaultVswicthId = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetId(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.Id = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetName(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.Name = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetOrderInstanceId(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.OrderInstanceId = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetPaymentType(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.PaymentType = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetRemark(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.Remark = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetResourceGroupType(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.ResourceGroupType = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetSpec(v *ListResourceGroupsResponseBodyPagingInfoResourceGroupListSpec) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.Spec = v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupList) SetStatus(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupList {
	s.Status = &v
	return s
}

type ListResourceGroupsResponseBodyPagingInfoResourceGroupListAliyunResourceTags struct {
	// Tag Key
	//
	// example:
	//
	// Key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// Tag Value
	//
	// example:
	//
	// Value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListResourceGroupsResponseBodyPagingInfoResourceGroupListAliyunResourceTags) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupsResponseBodyPagingInfoResourceGroupListAliyunResourceTags) GoString() string {
	return s.String()
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupListAliyunResourceTags) SetKey(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupListAliyunResourceTags {
	s.Key = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupListAliyunResourceTags) SetValue(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupListAliyunResourceTags {
	s.Value = &v
	return s
}

type ListResourceGroupsResponseBodyPagingInfoResourceGroupListSpec struct {
	// Quantity
	//
	// example:
	//
	// 1
	Amount *int32 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Specification details
	//
	// example:
	//
	// 2CU
	Standard *string `json:"Standard,omitempty" xml:"Standard,omitempty"`
}

func (s ListResourceGroupsResponseBodyPagingInfoResourceGroupListSpec) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupsResponseBodyPagingInfoResourceGroupListSpec) GoString() string {
	return s.String()
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupListSpec) SetAmount(v int32) *ListResourceGroupsResponseBodyPagingInfoResourceGroupListSpec {
	s.Amount = &v
	return s
}

func (s *ListResourceGroupsResponseBodyPagingInfoResourceGroupListSpec) SetStandard(v string) *ListResourceGroupsResponseBodyPagingInfoResourceGroupListSpec {
	s.Standard = &v
	return s
}

type ListResourceGroupsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListResourceGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListResourceGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListResourceGroupsResponse) SetHeaders(v map[string]*string) *ListResourceGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListResourceGroupsResponse) SetStatusCode(v int32) *ListResourceGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListResourceGroupsResponse) SetBody(v *ListResourceGroupsResponseBody) *ListResourceGroupsResponse {
	s.Body = v
	return s
}

type ListResourcesRequest struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the Alibaba Cloud account used by the workspace administrator. You can log on to the Alibaba Cloud Management Console and view the ID on the Security Settings page.
	//
	// example:
	//
	// 110755000425XXXX
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values: 1 to 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10002
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The resource type. This parameter specifies a filter condition.
	//
	// Valid values:
	//
	// 	- Python
	//
	// 	- Jar
	//
	// 	- Archive
	//
	// 	- File
	//
	// example:
	//
	// python
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListResourcesRequest) SetName(v string) *ListResourcesRequest {
	s.Name = &v
	return s
}

func (s *ListResourcesRequest) SetOwner(v string) *ListResourcesRequest {
	s.Owner = &v
	return s
}

func (s *ListResourcesRequest) SetPageNumber(v int32) *ListResourcesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListResourcesRequest) SetPageSize(v int32) *ListResourcesRequest {
	s.PageSize = &v
	return s
}

func (s *ListResourcesRequest) SetProjectId(v int64) *ListResourcesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListResourcesRequest) SetType(v string) *ListResourcesRequest {
	s.Type = &v
	return s
}

type ListResourcesResponseBody struct {
	// The pagination information.
	PagingInfo *ListResourcesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 99EBE7CF-69C0-5089-BE3E-79563C31XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListResourcesResponseBody) SetPagingInfo(v *ListResourcesResponseBodyPagingInfo) *ListResourcesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListResourcesResponseBody) SetRequestId(v string) *ListResourcesResponseBody {
	s.RequestId = &v
	return s
}

type ListResourcesResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The queried file resources.
	Resources []*ListResourcesResponseBodyPagingInfoResources `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 131
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListResourcesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListResourcesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListResourcesResponseBodyPagingInfo) SetPageNumber(v int32) *ListResourcesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfo) SetPageSize(v int32) *ListResourcesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfo) SetResources(v []*ListResourcesResponseBodyPagingInfoResources) *ListResourcesResponseBodyPagingInfo {
	s.Resources = v
	return s
}

func (s *ListResourcesResponseBodyPagingInfo) SetTotalCount(v int32) *ListResourcesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListResourcesResponseBodyPagingInfoResources struct {
	// The time when the file resource was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1724505917000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The information about the data source.
	DataSource *ListResourcesResponseBodyPagingInfoResourcesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The ID of the file resource.
	//
	// example:
	//
	// 631478864897630XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The times when the file resource was last modified. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1724505917000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The name of the file resource.
	//
	// example:
	//
	// math.py
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The owner of the file resource.
	//
	// example:
	//
	// 110755000425XXXX
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.
	//
	// example:
	//
	// 344247
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The script information.
	Script *ListResourcesResponseBodyPagingInfoResourcesScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	// The path of the source of the file resource. If the SourecType parameter is set to Local, this parameter is left empty.
	//
	// example:
	//
	// XXX/unknown/ide/1/XXX/20240820200851_963a9da676de44ef8d06a6576a8c4d6a.py
	SourcePath *string `json:"SourcePath,omitempty" xml:"SourcePath,omitempty"`
	// The storage type of the source of the file resource.
	//
	// Valid values:
	//
	// 	- Local
	//
	// 	- Oss
	//
	// example:
	//
	// local
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	// The storage path of the destination of the file resource.
	//
	// example:
	//
	// XXX/unknown/ide/1/XXX/20240820200851_963a9da676de44ef8d06a6576a8c4d6a.py
	TargetPath *string `json:"TargetPath,omitempty" xml:"TargetPath,omitempty"`
	// The storage type of the destination of the file resource.
	//
	// Valid values:
	//
	// 	- Gateway
	//
	// 	- Oss
	//
	// 	- Hdfs
	//
	// example:
	//
	// oss
	TargetType *string `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	// The type of the file resource.
	//
	// Valid values:
	//
	// 	- Python
	//
	// 	- Jar
	//
	// 	- Archive
	//
	// 	- File
	//
	// example:
	//
	// jar
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListResourcesResponseBodyPagingInfoResources) String() string {
	return tea.Prettify(s)
}

func (s ListResourcesResponseBodyPagingInfoResources) GoString() string {
	return s.String()
}

func (s *ListResourcesResponseBodyPagingInfoResources) SetCreateTime(v int64) *ListResourcesResponseBodyPagingInfoResources {
	s.CreateTime = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResources) SetDataSource(v *ListResourcesResponseBodyPagingInfoResourcesDataSource) *ListResourcesResponseBodyPagingInfoResources {
	s.DataSource = v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResources) SetId(v int64) *ListResourcesResponseBodyPagingInfoResources {
	s.Id = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResources) SetModifyTime(v int64) *ListResourcesResponseBodyPagingInfoResources {
	s.ModifyTime = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResources) SetName(v string) *ListResourcesResponseBodyPagingInfoResources {
	s.Name = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResources) SetOwner(v string) *ListResourcesResponseBodyPagingInfoResources {
	s.Owner = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResources) SetProjectId(v int64) *ListResourcesResponseBodyPagingInfoResources {
	s.ProjectId = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResources) SetScript(v *ListResourcesResponseBodyPagingInfoResourcesScript) *ListResourcesResponseBodyPagingInfoResources {
	s.Script = v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResources) SetSourcePath(v string) *ListResourcesResponseBodyPagingInfoResources {
	s.SourcePath = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResources) SetSourceType(v string) *ListResourcesResponseBodyPagingInfoResources {
	s.SourceType = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResources) SetTargetPath(v string) *ListResourcesResponseBodyPagingInfoResources {
	s.TargetPath = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResources) SetTargetType(v string) *ListResourcesResponseBodyPagingInfoResources {
	s.TargetType = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResources) SetType(v string) *ListResourcesResponseBodyPagingInfoResources {
	s.Type = &v
	return s
}

type ListResourcesResponseBodyPagingInfoResourcesDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// odps_first
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the data source.
	//
	// example:
	//
	// odps
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListResourcesResponseBodyPagingInfoResourcesDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListResourcesResponseBodyPagingInfoResourcesDataSource) GoString() string {
	return s.String()
}

func (s *ListResourcesResponseBodyPagingInfoResourcesDataSource) SetName(v string) *ListResourcesResponseBodyPagingInfoResourcesDataSource {
	s.Name = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResourcesDataSource) SetType(v string) *ListResourcesResponseBodyPagingInfoResourcesDataSource {
	s.Type = &v
	return s
}

type ListResourcesResponseBodyPagingInfoResourcesScript struct {
	// The script ID.
	//
	// example:
	//
	// 123348864897630XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The script path.
	//
	// example:
	//
	// root/demo
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The runtime.
	Runtime *ListResourcesResponseBodyPagingInfoResourcesScriptRuntime `json:"Runtime,omitempty" xml:"Runtime,omitempty" type:"Struct"`
}

func (s ListResourcesResponseBodyPagingInfoResourcesScript) String() string {
	return tea.Prettify(s)
}

func (s ListResourcesResponseBodyPagingInfoResourcesScript) GoString() string {
	return s.String()
}

func (s *ListResourcesResponseBodyPagingInfoResourcesScript) SetId(v int64) *ListResourcesResponseBodyPagingInfoResourcesScript {
	s.Id = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResourcesScript) SetPath(v string) *ListResourcesResponseBodyPagingInfoResourcesScript {
	s.Path = &v
	return s
}

func (s *ListResourcesResponseBodyPagingInfoResourcesScript) SetRuntime(v *ListResourcesResponseBodyPagingInfoResourcesScriptRuntime) *ListResourcesResponseBodyPagingInfoResourcesScript {
	s.Runtime = v
	return s
}

type ListResourcesResponseBodyPagingInfoResourcesScriptRuntime struct {
	// The command used to distinguish file resource types.
	//
	// example:
	//
	// ODPS_PYTHON
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
}

func (s ListResourcesResponseBodyPagingInfoResourcesScriptRuntime) String() string {
	return tea.Prettify(s)
}

func (s ListResourcesResponseBodyPagingInfoResourcesScriptRuntime) GoString() string {
	return s.String()
}

func (s *ListResourcesResponseBodyPagingInfoResourcesScriptRuntime) SetCommand(v string) *ListResourcesResponseBodyPagingInfoResourcesScriptRuntime {
	s.Command = &v
	return s
}

type ListResourcesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListResourcesResponse) SetHeaders(v map[string]*string) *ListResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListResourcesResponse) SetStatusCode(v int32) *ListResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListResourcesResponse) SetBody(v *ListResourcesResponseBody) *ListResourcesResponse {
	s.Body = v
	return s
}

type ListRoutesRequest struct {
	// The network ID.
	//
	// example:
	//
	// 1000
	NetworkId *int64 `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The fields used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:
	//
	// 	- Id (Desc/Asc): the route ID
	//
	// 	- DestinationCidr (Desc/Asc): the destination CIDR block of the route
	//
	// 	- CreateTime (Desc/Asc): the time when the route is created
	//
	// Default value: CreateTime Asc.
	//
	// example:
	//
	// CreateTime Asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListRoutesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRoutesRequest) GoString() string {
	return s.String()
}

func (s *ListRoutesRequest) SetNetworkId(v int64) *ListRoutesRequest {
	s.NetworkId = &v
	return s
}

func (s *ListRoutesRequest) SetPageNumber(v int32) *ListRoutesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRoutesRequest) SetPageSize(v int32) *ListRoutesRequest {
	s.PageSize = &v
	return s
}

func (s *ListRoutesRequest) SetResourceGroupId(v string) *ListRoutesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListRoutesRequest) SetSortBy(v string) *ListRoutesRequest {
	s.SortBy = &v
	return s
}

type ListRoutesResponseBody struct {
	// The pagination information.
	PagingInfo *ListRoutesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The ID of the request. It is used to locate logs and troubleshoot problems.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListRoutesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRoutesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRoutesResponseBody) SetPagingInfo(v *ListRoutesResponseBodyPagingInfo) *ListRoutesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListRoutesResponseBody) SetRequestId(v string) *ListRoutesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRoutesResponseBody) SetSuccess(v bool) *ListRoutesResponseBody {
	s.Success = &v
	return s
}

type ListRoutesResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The list of network resource routing information obtained.
	RouteList []*ListRoutesResponseBodyPagingInfoRouteList `json:"RouteList,omitempty" xml:"RouteList,omitempty" type:"Repeated"`
	// All data entries
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRoutesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListRoutesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListRoutesResponseBodyPagingInfo) SetPageNumber(v int32) *ListRoutesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListRoutesResponseBodyPagingInfo) SetPageSize(v int32) *ListRoutesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListRoutesResponseBodyPagingInfo) SetRouteList(v []*ListRoutesResponseBodyPagingInfoRouteList) *ListRoutesResponseBodyPagingInfo {
	s.RouteList = v
	return s
}

func (s *ListRoutesResponseBodyPagingInfo) SetTotalCount(v int32) *ListRoutesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListRoutesResponseBodyPagingInfoRouteList struct {
	// The creation time, which is a 64-bit timestamp.
	//
	// example:
	//
	// 1727055811000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// Route destination CIDR
	//
	// example:
	//
	// 192.168.0.0/16
	DestinationCidr *string `json:"DestinationCidr,omitempty" xml:"DestinationCidr,omitempty"`
	// Route ID
	//
	// example:
	//
	// 1000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Network Resource ID
	//
	// example:
	//
	// 1000
	NetworkId *int64 `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// Unique identifier of the resource group to which it belongs
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// Unique identifier of network resource
	//
	// example:
	//
	// ns-679XXXXXX
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s ListRoutesResponseBodyPagingInfoRouteList) String() string {
	return tea.Prettify(s)
}

func (s ListRoutesResponseBodyPagingInfoRouteList) GoString() string {
	return s.String()
}

func (s *ListRoutesResponseBodyPagingInfoRouteList) SetCreateTime(v int64) *ListRoutesResponseBodyPagingInfoRouteList {
	s.CreateTime = &v
	return s
}

func (s *ListRoutesResponseBodyPagingInfoRouteList) SetDestinationCidr(v string) *ListRoutesResponseBodyPagingInfoRouteList {
	s.DestinationCidr = &v
	return s
}

func (s *ListRoutesResponseBodyPagingInfoRouteList) SetId(v int64) *ListRoutesResponseBodyPagingInfoRouteList {
	s.Id = &v
	return s
}

func (s *ListRoutesResponseBodyPagingInfoRouteList) SetNetworkId(v int64) *ListRoutesResponseBodyPagingInfoRouteList {
	s.NetworkId = &v
	return s
}

func (s *ListRoutesResponseBodyPagingInfoRouteList) SetResourceGroupId(v string) *ListRoutesResponseBodyPagingInfoRouteList {
	s.ResourceGroupId = &v
	return s
}

func (s *ListRoutesResponseBodyPagingInfoRouteList) SetResourceId(v string) *ListRoutesResponseBodyPagingInfoRouteList {
	s.ResourceId = &v
	return s
}

type ListRoutesResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRoutesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRoutesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRoutesResponse) GoString() string {
	return s.String()
}

func (s *ListRoutesResponse) SetHeaders(v map[string]*string) *ListRoutesResponse {
	s.Headers = v
	return s
}

func (s *ListRoutesResponse) SetStatusCode(v int32) *ListRoutesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRoutesResponse) SetBody(v *ListRoutesResponseBody) *ListRoutesResponse {
	s.Body = v
	return s
}

type ListSchemasRequest struct {
	// example:
	//
	// test comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// abc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-project:123456XXX::test_project
	//
	// holo-database:h-abc123xxx::test_db
	ParentMetaEntityId *string `json:"ParentMetaEntityId,omitempty" xml:"ParentMetaEntityId,omitempty"`
	// example:
	//
	// CreateTime
	SortBy *string   `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	Types  []*string `json:"Types,omitempty" xml:"Types,omitempty" type:"Repeated"`
}

func (s ListSchemasRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSchemasRequest) GoString() string {
	return s.String()
}

func (s *ListSchemasRequest) SetComment(v string) *ListSchemasRequest {
	s.Comment = &v
	return s
}

func (s *ListSchemasRequest) SetName(v string) *ListSchemasRequest {
	s.Name = &v
	return s
}

func (s *ListSchemasRequest) SetOrder(v string) *ListSchemasRequest {
	s.Order = &v
	return s
}

func (s *ListSchemasRequest) SetPageNumber(v int32) *ListSchemasRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSchemasRequest) SetPageSize(v int32) *ListSchemasRequest {
	s.PageSize = &v
	return s
}

func (s *ListSchemasRequest) SetParentMetaEntityId(v string) *ListSchemasRequest {
	s.ParentMetaEntityId = &v
	return s
}

func (s *ListSchemasRequest) SetSortBy(v string) *ListSchemasRequest {
	s.SortBy = &v
	return s
}

func (s *ListSchemasRequest) SetTypes(v []*string) *ListSchemasRequest {
	s.Types = v
	return s
}

type ListSchemasShrinkRequest struct {
	// example:
	//
	// test comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// abc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-project:123456XXX::test_project
	//
	// holo-database:h-abc123xxx::test_db
	ParentMetaEntityId *string `json:"ParentMetaEntityId,omitempty" xml:"ParentMetaEntityId,omitempty"`
	// example:
	//
	// CreateTime
	SortBy      *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	TypesShrink *string `json:"Types,omitempty" xml:"Types,omitempty"`
}

func (s ListSchemasShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSchemasShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListSchemasShrinkRequest) SetComment(v string) *ListSchemasShrinkRequest {
	s.Comment = &v
	return s
}

func (s *ListSchemasShrinkRequest) SetName(v string) *ListSchemasShrinkRequest {
	s.Name = &v
	return s
}

func (s *ListSchemasShrinkRequest) SetOrder(v string) *ListSchemasShrinkRequest {
	s.Order = &v
	return s
}

func (s *ListSchemasShrinkRequest) SetPageNumber(v int32) *ListSchemasShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSchemasShrinkRequest) SetPageSize(v int32) *ListSchemasShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListSchemasShrinkRequest) SetParentMetaEntityId(v string) *ListSchemasShrinkRequest {
	s.ParentMetaEntityId = &v
	return s
}

func (s *ListSchemasShrinkRequest) SetSortBy(v string) *ListSchemasShrinkRequest {
	s.SortBy = &v
	return s
}

func (s *ListSchemasShrinkRequest) SetTypesShrink(v string) *ListSchemasShrinkRequest {
	s.TypesShrink = &v
	return s
}

type ListSchemasResponseBody struct {
	PagingInfo *ListSchemasResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// example:
	//
	// 235BBA5E-3428-XXXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListSchemasResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSchemasResponseBody) GoString() string {
	return s.String()
}

func (s *ListSchemasResponseBody) SetPagingInfo(v *ListSchemasResponseBodyPagingInfo) *ListSchemasResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListSchemasResponseBody) SetRequestId(v string) *ListSchemasResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSchemasResponseBody) SetSuccess(v bool) *ListSchemasResponseBody {
	s.Success = &v
	return s
}

type ListSchemasResponseBodyPagingInfo struct {
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Schemas  []*Schema `json:"Schemas,omitempty" xml:"Schemas,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSchemasResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListSchemasResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListSchemasResponseBodyPagingInfo) SetPageNumber(v int32) *ListSchemasResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListSchemasResponseBodyPagingInfo) SetPageSize(v int32) *ListSchemasResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListSchemasResponseBodyPagingInfo) SetSchemas(v []*Schema) *ListSchemasResponseBodyPagingInfo {
	s.Schemas = v
	return s
}

func (s *ListSchemasResponseBodyPagingInfo) SetTotalCount(v int64) *ListSchemasResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListSchemasResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSchemasResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSchemasResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSchemasResponse) GoString() string {
	return s.String()
}

func (s *ListSchemasResponse) SetHeaders(v map[string]*string) *ListSchemasResponse {
	s.Headers = v
	return s
}

func (s *ListSchemasResponse) SetStatusCode(v int32) *ListSchemasResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSchemasResponse) SetBody(v *ListSchemasResponseBody) *ListSchemasResponse {
	s.Body = v
	return s
}

type ListTablesRequest struct {
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// abc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-schema:123456XXX::test_project_with_schema:default
	//
	// maxcompute-project:123456XXX::test_project_without_schema
	//
	// dlf-database:123456XXX:test_catalog:test_db
	//
	// hms-database:c-abc123xxx::test_db
	//
	// holo-schema:h-abc123xxx::test_db:test_schema
	//
	// mysql-database:jdbc%3Amysql%3A%2F%2F127.0.0.1%3A3306%2Ftest_db::test_db
	ParentMetaEntityId *string `json:"ParentMetaEntityId,omitempty" xml:"ParentMetaEntityId,omitempty"`
	// example:
	//
	// CreateTime
	SortBy     *string   `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	TableTypes []*string `json:"TableTypes,omitempty" xml:"TableTypes,omitempty" type:"Repeated"`
}

func (s ListTablesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTablesRequest) GoString() string {
	return s.String()
}

func (s *ListTablesRequest) SetComment(v string) *ListTablesRequest {
	s.Comment = &v
	return s
}

func (s *ListTablesRequest) SetName(v string) *ListTablesRequest {
	s.Name = &v
	return s
}

func (s *ListTablesRequest) SetOrder(v string) *ListTablesRequest {
	s.Order = &v
	return s
}

func (s *ListTablesRequest) SetPageNumber(v int32) *ListTablesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTablesRequest) SetPageSize(v int32) *ListTablesRequest {
	s.PageSize = &v
	return s
}

func (s *ListTablesRequest) SetParentMetaEntityId(v string) *ListTablesRequest {
	s.ParentMetaEntityId = &v
	return s
}

func (s *ListTablesRequest) SetSortBy(v string) *ListTablesRequest {
	s.SortBy = &v
	return s
}

func (s *ListTablesRequest) SetTableTypes(v []*string) *ListTablesRequest {
	s.TableTypes = v
	return s
}

type ListTablesShrinkRequest struct {
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// abc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Asc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-schema:123456XXX::test_project_with_schema:default
	//
	// maxcompute-project:123456XXX::test_project_without_schema
	//
	// dlf-database:123456XXX:test_catalog:test_db
	//
	// hms-database:c-abc123xxx::test_db
	//
	// holo-schema:h-abc123xxx::test_db:test_schema
	//
	// mysql-database:jdbc%3Amysql%3A%2F%2F127.0.0.1%3A3306%2Ftest_db::test_db
	ParentMetaEntityId *string `json:"ParentMetaEntityId,omitempty" xml:"ParentMetaEntityId,omitempty"`
	// example:
	//
	// CreateTime
	SortBy           *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	TableTypesShrink *string `json:"TableTypes,omitempty" xml:"TableTypes,omitempty"`
}

func (s ListTablesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTablesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListTablesShrinkRequest) SetComment(v string) *ListTablesShrinkRequest {
	s.Comment = &v
	return s
}

func (s *ListTablesShrinkRequest) SetName(v string) *ListTablesShrinkRequest {
	s.Name = &v
	return s
}

func (s *ListTablesShrinkRequest) SetOrder(v string) *ListTablesShrinkRequest {
	s.Order = &v
	return s
}

func (s *ListTablesShrinkRequest) SetPageNumber(v int32) *ListTablesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTablesShrinkRequest) SetPageSize(v int32) *ListTablesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListTablesShrinkRequest) SetParentMetaEntityId(v string) *ListTablesShrinkRequest {
	s.ParentMetaEntityId = &v
	return s
}

func (s *ListTablesShrinkRequest) SetSortBy(v string) *ListTablesShrinkRequest {
	s.SortBy = &v
	return s
}

func (s *ListTablesShrinkRequest) SetTableTypesShrink(v string) *ListTablesShrinkRequest {
	s.TableTypesShrink = &v
	return s
}

type ListTablesResponseBody struct {
	PagingInfo *ListTablesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// example:
	//
	// E25887B7-579C-54A5-9C4F-83A****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListTablesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTablesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTablesResponseBody) SetPagingInfo(v *ListTablesResponseBodyPagingInfo) *ListTablesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListTablesResponseBody) SetRequestId(v string) *ListTablesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTablesResponseBody) SetSuccess(v bool) *ListTablesResponseBody {
	s.Success = &v
	return s
}

type ListTablesResponseBodyPagingInfo struct {
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Tables   []*Table `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTablesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListTablesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListTablesResponseBodyPagingInfo) SetPageNumber(v int32) *ListTablesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListTablesResponseBodyPagingInfo) SetPageSize(v int32) *ListTablesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListTablesResponseBodyPagingInfo) SetTables(v []*Table) *ListTablesResponseBodyPagingInfo {
	s.Tables = v
	return s
}

func (s *ListTablesResponseBodyPagingInfo) SetTotalCount(v int64) *ListTablesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListTablesResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTablesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTablesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTablesResponse) GoString() string {
	return s.String()
}

func (s *ListTablesResponse) SetHeaders(v map[string]*string) *ListTablesResponse {
	s.Headers = v
	return s
}

func (s *ListTablesResponse) SetStatusCode(v int32) *ListTablesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTablesResponse) SetBody(v *ListTablesResponseBody) *ListTablesResponse {
	s.Body = v
	return s
}

type ListTaskInstanceOperationLogsRequest struct {
	// The operation date, accurate to the day. The default value is the current day. You can query only the operation logs generated within the previous 31 days. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1710239005403
	Date *int64 `json:"Date,omitempty" xml:"Date,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListTaskInstanceOperationLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstanceOperationLogsRequest) GoString() string {
	return s.String()
}

func (s *ListTaskInstanceOperationLogsRequest) SetDate(v int64) *ListTaskInstanceOperationLogsRequest {
	s.Date = &v
	return s
}

func (s *ListTaskInstanceOperationLogsRequest) SetId(v int64) *ListTaskInstanceOperationLogsRequest {
	s.Id = &v
	return s
}

func (s *ListTaskInstanceOperationLogsRequest) SetPageNumber(v int32) *ListTaskInstanceOperationLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTaskInstanceOperationLogsRequest) SetPageSize(v int32) *ListTaskInstanceOperationLogsRequest {
	s.PageSize = &v
	return s
}

type ListTaskInstanceOperationLogsResponseBody struct {
	// The pagination information.
	PagingInfo *ListTaskInstanceOperationLogsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListTaskInstanceOperationLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstanceOperationLogsResponseBody) GoString() string {
	return s.String()
}

func (s *ListTaskInstanceOperationLogsResponseBody) SetPagingInfo(v *ListTaskInstanceOperationLogsResponseBodyPagingInfo) *ListTaskInstanceOperationLogsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListTaskInstanceOperationLogsResponseBody) SetRequestId(v string) *ListTaskInstanceOperationLogsResponseBody {
	s.RequestId = &v
	return s
}

type ListTaskInstanceOperationLogsResponseBodyPagingInfo struct {
	// The operation logs.
	OperationLogs []*ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs `json:"OperationLogs,omitempty" xml:"OperationLogs,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTaskInstanceOperationLogsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstanceOperationLogsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListTaskInstanceOperationLogsResponseBodyPagingInfo) SetOperationLogs(v []*ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs) *ListTaskInstanceOperationLogsResponseBodyPagingInfo {
	s.OperationLogs = v
	return s
}

func (s *ListTaskInstanceOperationLogsResponseBodyPagingInfo) SetPageNumber(v int32) *ListTaskInstanceOperationLogsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListTaskInstanceOperationLogsResponseBodyPagingInfo) SetPageSize(v int32) *ListTaskInstanceOperationLogsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListTaskInstanceOperationLogsResponseBodyPagingInfo) SetTotalCount(v int32) *ListTaskInstanceOperationLogsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs struct {
	// The time when the operation log was generated.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The operation content.
	//
	// example:
	//
	// Freeze tasks
	OperationContent *string `json:"OperationContent,omitempty" xml:"OperationContent,omitempty"`
	// The serial number of the operation.
	//
	// example:
	//
	// 1111
	OperationSeq *int64 `json:"OperationSeq,omitempty" xml:"OperationSeq,omitempty"`
	// The ID of the instance on which the operation was performed.
	//
	// example:
	//
	// 1234
	TaskInstanceId *int64 `json:"TaskInstanceId,omitempty" xml:"TaskInstanceId,omitempty"`
	// The account ID of the operator.
	//
	// example:
	//
	// 1000
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs) GoString() string {
	return s.String()
}

func (s *ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs) SetCreateTime(v int64) *ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs {
	s.CreateTime = &v
	return s
}

func (s *ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs) SetOperationContent(v string) *ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs {
	s.OperationContent = &v
	return s
}

func (s *ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs) SetOperationSeq(v int64) *ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs {
	s.OperationSeq = &v
	return s
}

func (s *ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs) SetTaskInstanceId(v int64) *ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs {
	s.TaskInstanceId = &v
	return s
}

func (s *ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs) SetUser(v string) *ListTaskInstanceOperationLogsResponseBodyPagingInfoOperationLogs {
	s.User = &v
	return s
}

type ListTaskInstanceOperationLogsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTaskInstanceOperationLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTaskInstanceOperationLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstanceOperationLogsResponse) GoString() string {
	return s.String()
}

func (s *ListTaskInstanceOperationLogsResponse) SetHeaders(v map[string]*string) *ListTaskInstanceOperationLogsResponse {
	s.Headers = v
	return s
}

func (s *ListTaskInstanceOperationLogsResponse) SetStatusCode(v int32) *ListTaskInstanceOperationLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTaskInstanceOperationLogsResponse) SetBody(v *ListTaskInstanceOperationLogsResponseBody) *ListTaskInstanceOperationLogsResponse {
	s.Body = v
	return s
}

type ListTaskInstancesRequest struct {
	// The data timestamp. The value of this parameter is 00:00:00 of the day before the scheduling time of the instance. The value is a UNIX timestamp. Unit: milliseconds. Example: 1743350400000.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1710239005403
	Bizdate *int64 `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	// The ID of the instance. The instance may be rerun. If the instance is rerun and you configure this parameter, the system returns the historical information of the instance, including the rerun information. You can use the RunNumber parameter to distinguish each entry in the historical information.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The IDs of the instances. You can query multiple instances at a time by instance ID.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	// The DataWorks workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The information about the resource group. Set this parameter to the identifier of a resource group for scheduling.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	RuntimeResource *string `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty"`
	// The field used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:
	//
	// 	- `TriggerTime (Desc/Asc)`
	//
	// 	- `StartedTime (Desc/Asc)`
	//
	// 	- `FinishedTime (Desc/Asc)`
	//
	// 	- `CreateTime (Desc/Asc)`
	//
	// 	- `Id (Desc/Asc)`
	//
	//     Default value: `Id Desc`.
	//
	// example:
	//
	// Id Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the task for which the instance is generated.
	//
	// example:
	//
	// 1234
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The IDs of the tasks. You can query multiple instances at a time by task ID.
	TaskIds []*int64 `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
	// The name of the task. Fuzzy match is supported.
	//
	// example:
	//
	// SQL node
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The type of the task for which the instance is generated.
	//
	// example:
	//
	// ODPS_SQL
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	TriggerRecurrence *string `json:"TriggerRecurrence,omitempty" xml:"TriggerRecurrence,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Normal
	TriggerType *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
	// The ID of the workflow to which the instance belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
	// The workflow instance ID.
	//
	// example:
	//
	// 1234
	WorkflowInstanceId *int64 `json:"WorkflowInstanceId,omitempty" xml:"WorkflowInstanceId,omitempty"`
	// The type of the workflow instance. Valid values:
	//
	// 	- SmokeTest
	//
	// 	- Manual
	//
	// 	- SupplementData
	//
	// 	- ManualWorkflow
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	WorkflowInstanceType *string `json:"WorkflowInstanceType,omitempty" xml:"WorkflowInstanceType,omitempty"`
}

func (s ListTaskInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListTaskInstancesRequest) SetBizdate(v int64) *ListTaskInstancesRequest {
	s.Bizdate = &v
	return s
}

func (s *ListTaskInstancesRequest) SetId(v int64) *ListTaskInstancesRequest {
	s.Id = &v
	return s
}

func (s *ListTaskInstancesRequest) SetIds(v []*int64) *ListTaskInstancesRequest {
	s.Ids = v
	return s
}

func (s *ListTaskInstancesRequest) SetOwner(v string) *ListTaskInstancesRequest {
	s.Owner = &v
	return s
}

func (s *ListTaskInstancesRequest) SetPageNumber(v int32) *ListTaskInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTaskInstancesRequest) SetPageSize(v int32) *ListTaskInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *ListTaskInstancesRequest) SetProjectEnv(v string) *ListTaskInstancesRequest {
	s.ProjectEnv = &v
	return s
}

func (s *ListTaskInstancesRequest) SetProjectId(v int64) *ListTaskInstancesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListTaskInstancesRequest) SetRuntimeResource(v string) *ListTaskInstancesRequest {
	s.RuntimeResource = &v
	return s
}

func (s *ListTaskInstancesRequest) SetSortBy(v string) *ListTaskInstancesRequest {
	s.SortBy = &v
	return s
}

func (s *ListTaskInstancesRequest) SetStatus(v string) *ListTaskInstancesRequest {
	s.Status = &v
	return s
}

func (s *ListTaskInstancesRequest) SetTaskId(v int64) *ListTaskInstancesRequest {
	s.TaskId = &v
	return s
}

func (s *ListTaskInstancesRequest) SetTaskIds(v []*int64) *ListTaskInstancesRequest {
	s.TaskIds = v
	return s
}

func (s *ListTaskInstancesRequest) SetTaskName(v string) *ListTaskInstancesRequest {
	s.TaskName = &v
	return s
}

func (s *ListTaskInstancesRequest) SetTaskType(v string) *ListTaskInstancesRequest {
	s.TaskType = &v
	return s
}

func (s *ListTaskInstancesRequest) SetTriggerRecurrence(v string) *ListTaskInstancesRequest {
	s.TriggerRecurrence = &v
	return s
}

func (s *ListTaskInstancesRequest) SetTriggerType(v string) *ListTaskInstancesRequest {
	s.TriggerType = &v
	return s
}

func (s *ListTaskInstancesRequest) SetWorkflowId(v int64) *ListTaskInstancesRequest {
	s.WorkflowId = &v
	return s
}

func (s *ListTaskInstancesRequest) SetWorkflowInstanceId(v int64) *ListTaskInstancesRequest {
	s.WorkflowInstanceId = &v
	return s
}

func (s *ListTaskInstancesRequest) SetWorkflowInstanceType(v string) *ListTaskInstancesRequest {
	s.WorkflowInstanceType = &v
	return s
}

type ListTaskInstancesShrinkRequest struct {
	// The data timestamp. The value of this parameter is 00:00:00 of the day before the scheduling time of the instance. The value is a UNIX timestamp. Unit: milliseconds. Example: 1743350400000.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1710239005403
	Bizdate *int64 `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	// The ID of the instance. The instance may be rerun. If the instance is rerun and you configure this parameter, the system returns the historical information of the instance, including the rerun information. You can use the RunNumber parameter to distinguish each entry in the historical information.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The IDs of the instances. You can query multiple instances at a time by instance ID.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	// The DataWorks workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The information about the resource group. Set this parameter to the identifier of a resource group for scheduling.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	RuntimeResource *string `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty"`
	// The field used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:
	//
	// 	- `TriggerTime (Desc/Asc)`
	//
	// 	- `StartedTime (Desc/Asc)`
	//
	// 	- `FinishedTime (Desc/Asc)`
	//
	// 	- `CreateTime (Desc/Asc)`
	//
	// 	- `Id (Desc/Asc)`
	//
	//     Default value: `Id Desc`.
	//
	// example:
	//
	// Id Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the task for which the instance is generated.
	//
	// example:
	//
	// 1234
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The IDs of the tasks. You can query multiple instances at a time by task ID.
	TaskIdsShrink *string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty"`
	// The name of the task. Fuzzy match is supported.
	//
	// example:
	//
	// SQL node
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The type of the task for which the instance is generated.
	//
	// example:
	//
	// ODPS_SQL
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	TriggerRecurrence *string `json:"TriggerRecurrence,omitempty" xml:"TriggerRecurrence,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Normal
	TriggerType *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
	// The ID of the workflow to which the instance belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
	// The workflow instance ID.
	//
	// example:
	//
	// 1234
	WorkflowInstanceId *int64 `json:"WorkflowInstanceId,omitempty" xml:"WorkflowInstanceId,omitempty"`
	// The type of the workflow instance. Valid values:
	//
	// 	- SmokeTest
	//
	// 	- Manual
	//
	// 	- SupplementData
	//
	// 	- ManualWorkflow
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	WorkflowInstanceType *string `json:"WorkflowInstanceType,omitempty" xml:"WorkflowInstanceType,omitempty"`
}

func (s ListTaskInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListTaskInstancesShrinkRequest) SetBizdate(v int64) *ListTaskInstancesShrinkRequest {
	s.Bizdate = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetId(v int64) *ListTaskInstancesShrinkRequest {
	s.Id = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetIdsShrink(v string) *ListTaskInstancesShrinkRequest {
	s.IdsShrink = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetOwner(v string) *ListTaskInstancesShrinkRequest {
	s.Owner = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetPageNumber(v int32) *ListTaskInstancesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetPageSize(v int32) *ListTaskInstancesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetProjectEnv(v string) *ListTaskInstancesShrinkRequest {
	s.ProjectEnv = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetProjectId(v int64) *ListTaskInstancesShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetRuntimeResource(v string) *ListTaskInstancesShrinkRequest {
	s.RuntimeResource = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetSortBy(v string) *ListTaskInstancesShrinkRequest {
	s.SortBy = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetStatus(v string) *ListTaskInstancesShrinkRequest {
	s.Status = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetTaskId(v int64) *ListTaskInstancesShrinkRequest {
	s.TaskId = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetTaskIdsShrink(v string) *ListTaskInstancesShrinkRequest {
	s.TaskIdsShrink = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetTaskName(v string) *ListTaskInstancesShrinkRequest {
	s.TaskName = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetTaskType(v string) *ListTaskInstancesShrinkRequest {
	s.TaskType = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetTriggerRecurrence(v string) *ListTaskInstancesShrinkRequest {
	s.TriggerRecurrence = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetTriggerType(v string) *ListTaskInstancesShrinkRequest {
	s.TriggerType = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetWorkflowId(v int64) *ListTaskInstancesShrinkRequest {
	s.WorkflowId = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetWorkflowInstanceId(v int64) *ListTaskInstancesShrinkRequest {
	s.WorkflowInstanceId = &v
	return s
}

func (s *ListTaskInstancesShrinkRequest) SetWorkflowInstanceType(v string) *ListTaskInstancesShrinkRequest {
	s.WorkflowInstanceType = &v
	return s
}

type ListTaskInstancesResponseBody struct {
	// The pagination information.
	PagingInfo *ListTaskInstancesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListTaskInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTaskInstancesResponseBody) SetPagingInfo(v *ListTaskInstancesResponseBodyPagingInfo) *ListTaskInstancesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListTaskInstancesResponseBody) SetRequestId(v string) *ListTaskInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ListTaskInstancesResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The instances.
	TaskInstances []*ListTaskInstancesResponseBodyPagingInfoTaskInstances `json:"TaskInstances,omitempty" xml:"TaskInstances,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTaskInstancesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstancesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListTaskInstancesResponseBodyPagingInfo) SetPageNumber(v int32) *ListTaskInstancesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfo) SetPageSize(v int32) *ListTaskInstancesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfo) SetTaskInstances(v []*ListTaskInstancesResponseBodyPagingInfoTaskInstances) *ListTaskInstancesResponseBodyPagingInfo {
	s.TaskInstances = v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfo) SetTotalCount(v int32) *ListTaskInstancesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListTaskInstancesResponseBodyPagingInfoTaskInstances struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The data timestamp.
	//
	// example:
	//
	// 1710239005403
	Bizdate *int64 `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the user who creates the instance.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *ListTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time when the instance finished running.
	//
	// example:
	//
	// 1710239005403
	FinishedTime *int64 `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the user who modifies the instance.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The sequence number of the cycle. This parameter indicates the cycle of the task instance on the current day.
	//
	// example:
	//
	// 1
	PeriodNumber *int32 `json:"PeriodNumber,omitempty" xml:"PeriodNumber,omitempty"`
	// The priority of the task. Minimum value: 1. Maximum value: 8. A larger value indicates a higher priority. Default value: 1.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The environment of the workspace.
	//
	// Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun mode
	//
	// Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times the task is run. By default, the value starts from 1.
	//
	// example:
	//
	// 1
	RunNumber *int32 `json:"RunNumber,omitempty" xml:"RunNumber,omitempty"`
	// The runtime information about the instance.
	Runtime *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime `json:"Runtime,omitempty" xml:"Runtime,omitempty" type:"Struct"`
	// The information about the resource group with which the instance is associated.
	RuntimeResource  *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	ScriptParameters *string                                                              `json:"ScriptParameters,omitempty" xml:"ScriptParameters,omitempty"`
	// The time when the instance started to run.
	//
	// example:
	//
	// 1710239005403
	StartedTime *int64 `json:"StartedTime,omitempty" xml:"StartedTime,omitempty"`
	// The status of the instance.
	//
	// Valid values:
	//
	// 	- NotRun: The instance is not run.
	//
	// 	- Running: The instance is running.
	//
	// 	- WaitTime: The instance is waiting for the scheduling time to arrive.
	//
	// 	- CheckingCondition: Branch conditions are being checked for the instance.
	//
	// 	- WaitResource: The instance is waiting for resources.
	//
	// 	- Failure: The instance fails to be run.
	//
	// 	- Success: The instance is successfully run.
	//
	// 	- Checking: Data quality is being checked for the instance.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the task for which the instance is generated.
	//
	// example:
	//
	// 1234
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the task for which the instance is generated.
	//
	// example:
	//
	// SQL node
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The type of the task for which the instance is generated.
	//
	// example:
	//
	// ODPS_SQL
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The timeout period of task running. Unit: seconds.
	//
	// Note: The value of this parameter is rounded up by hour.
	//
	// example:
	//
	// 1
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler.
	//
	// Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	TriggerRecurrence *string `json:"TriggerRecurrence,omitempty" xml:"TriggerRecurrence,omitempty"`
	// The scheduling time.
	//
	// example:
	//
	// 1710239005403
	TriggerTime *int64 `json:"TriggerTime,omitempty" xml:"TriggerTime,omitempty"`
	// The trigger type.
	//
	// Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	TriggerType         *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
	WaitingResourceTime *int64  `json:"WaitingResourceTime,omitempty" xml:"WaitingResourceTime,omitempty"`
	WaitingTriggerTime  *int64  `json:"WaitingTriggerTime,omitempty" xml:"WaitingTriggerTime,omitempty"`
	// The ID of the workflow to which the instance belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
	// The workflow instance ID.
	//
	// example:
	//
	// 1234
	WorkflowInstanceId *int64 `json:"WorkflowInstanceId,omitempty" xml:"WorkflowInstanceId,omitempty"`
	// The type of the workflow instance.
	//
	// Valid values:
	//
	// 	- SmokeTest
	//
	// 	- SupplementData
	//
	// 	- Manual
	//
	// 	- ManualWorkflow
	//
	// 	- Normal
	//
	// 	- ManualFlow
	//
	// example:
	//
	// Normal
	WorkflowInstanceType *string `json:"WorkflowInstanceType,omitempty" xml:"WorkflowInstanceType,omitempty"`
	// The name of the workflow to which the instance belongs.
	//
	// example:
	//
	// Test workflow
	WorkflowName *string `json:"WorkflowName,omitempty" xml:"WorkflowName,omitempty"`
}

func (s ListTaskInstancesResponseBodyPagingInfoTaskInstances) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstancesResponseBodyPagingInfoTaskInstances) GoString() string {
	return s.String()
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetBaselineId(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.BaselineId = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetBizdate(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Bizdate = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetCreateTime(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.CreateTime = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetCreateUser(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.CreateUser = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetDataSource(v *ListTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.DataSource = v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetDescription(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Description = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetFinishedTime(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.FinishedTime = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetId(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Id = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetModifyTime(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.ModifyTime = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetModifyUser(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.ModifyUser = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetOwner(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Owner = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetPeriodNumber(v int32) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.PeriodNumber = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetPriority(v int32) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Priority = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetProjectEnv(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.ProjectEnv = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetProjectId(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.ProjectId = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetRerunMode(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.RerunMode = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetRunNumber(v int32) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.RunNumber = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetRuntime(v *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Runtime = v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetRuntimeResource(v *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.RuntimeResource = v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetScriptParameters(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.ScriptParameters = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetStartedTime(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.StartedTime = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetStatus(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Status = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetTaskId(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TaskId = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetTaskName(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TaskName = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetTaskType(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TaskType = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetTimeout(v int32) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Timeout = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetTriggerRecurrence(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TriggerRecurrence = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetTriggerTime(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TriggerTime = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetTriggerType(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TriggerType = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetWaitingResourceTime(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WaitingResourceTime = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetWaitingTriggerTime(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WaitingTriggerTime = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetWorkflowId(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WorkflowId = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetWorkflowInstanceId(v int64) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WorkflowInstanceId = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetWorkflowInstanceType(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WorkflowInstanceType = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstances) SetWorkflowName(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WorkflowName = &v
	return s
}

type ListTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource) GoString() string {
	return s.String()
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource) SetName(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource {
	s.Name = &v
	return s
}

type ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime struct {
	// The host for running.
	//
	// example:
	//
	// cn-shanghai.1.2
	Gateway *string `json:"Gateway,omitempty" xml:"Gateway,omitempty"`
	// The instance run ID.
	//
	// example:
	//
	// T3_123
	ProcessId *string `json:"ProcessId,omitempty" xml:"ProcessId,omitempty"`
}

func (s ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) GoString() string {
	return s.String()
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) SetGateway(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime {
	s.Gateway = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) SetProcessId(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime {
	s.ProcessId = &v
	return s
}

type ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource struct {
	// The default number of CUs configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) GoString() string {
	return s.String()
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) SetCu(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource {
	s.Cu = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) SetImage(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource {
	s.Image = &v
	return s
}

func (s *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) SetResourceGroupId(v string) *ListTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ListTaskInstancesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTaskInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTaskInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTaskInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListTaskInstancesResponse) SetHeaders(v map[string]*string) *ListTaskInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListTaskInstancesResponse) SetStatusCode(v int32) *ListTaskInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTaskInstancesResponse) SetBody(v *ListTaskInstancesResponseBody) *ListTaskInstancesResponse {
	s.Body = v
	return s
}

type ListTaskOperationLogsRequest struct {
	// The operation date, accurate to the day. The default value is the current day. You can query only the operation logs generated within the previous 31 days.
	//
	// example:
	//
	// 1710239005403
	Date *int64 `json:"Date,omitempty" xml:"Date,omitempty"`
	// The task ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s ListTaskOperationLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTaskOperationLogsRequest) GoString() string {
	return s.String()
}

func (s *ListTaskOperationLogsRequest) SetDate(v int64) *ListTaskOperationLogsRequest {
	s.Date = &v
	return s
}

func (s *ListTaskOperationLogsRequest) SetId(v int64) *ListTaskOperationLogsRequest {
	s.Id = &v
	return s
}

func (s *ListTaskOperationLogsRequest) SetPageNumber(v int32) *ListTaskOperationLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTaskOperationLogsRequest) SetPageSize(v int32) *ListTaskOperationLogsRequest {
	s.PageSize = &v
	return s
}

func (s *ListTaskOperationLogsRequest) SetProjectEnv(v string) *ListTaskOperationLogsRequest {
	s.ProjectEnv = &v
	return s
}

type ListTaskOperationLogsResponseBody struct {
	// The pagination information.
	PagingInfo *ListTaskOperationLogsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListTaskOperationLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTaskOperationLogsResponseBody) GoString() string {
	return s.String()
}

func (s *ListTaskOperationLogsResponseBody) SetPagingInfo(v *ListTaskOperationLogsResponseBodyPagingInfo) *ListTaskOperationLogsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListTaskOperationLogsResponseBody) SetRequestId(v string) *ListTaskOperationLogsResponseBody {
	s.RequestId = &v
	return s
}

type ListTaskOperationLogsResponseBodyPagingInfo struct {
	// The operation logs.
	OperationLogs []*ListTaskOperationLogsResponseBodyPagingInfoOperationLogs `json:"OperationLogs,omitempty" xml:"OperationLogs,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTaskOperationLogsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListTaskOperationLogsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListTaskOperationLogsResponseBodyPagingInfo) SetOperationLogs(v []*ListTaskOperationLogsResponseBodyPagingInfoOperationLogs) *ListTaskOperationLogsResponseBodyPagingInfo {
	s.OperationLogs = v
	return s
}

func (s *ListTaskOperationLogsResponseBodyPagingInfo) SetPageNumber(v int32) *ListTaskOperationLogsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListTaskOperationLogsResponseBodyPagingInfo) SetPageSize(v int32) *ListTaskOperationLogsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListTaskOperationLogsResponseBodyPagingInfo) SetTotalCount(v int32) *ListTaskOperationLogsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListTaskOperationLogsResponseBodyPagingInfoOperationLogs struct {
	// The time when the operation log was generated.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The operation content.
	//
	// example:
	//
	// Freeze tasks
	OperationContent *string `json:"OperationContent,omitempty" xml:"OperationContent,omitempty"`
	// The serial number of the operation.
	//
	// example:
	//
	// 1111
	OperationSeq *int64 `json:"OperationSeq,omitempty" xml:"OperationSeq,omitempty"`
	// The ID of the task on which the operation was performed.
	//
	// example:
	//
	// 1234
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The account ID of the operator.
	//
	// example:
	//
	// 1000
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s ListTaskOperationLogsResponseBodyPagingInfoOperationLogs) String() string {
	return tea.Prettify(s)
}

func (s ListTaskOperationLogsResponseBodyPagingInfoOperationLogs) GoString() string {
	return s.String()
}

func (s *ListTaskOperationLogsResponseBodyPagingInfoOperationLogs) SetCreateTime(v int64) *ListTaskOperationLogsResponseBodyPagingInfoOperationLogs {
	s.CreateTime = &v
	return s
}

func (s *ListTaskOperationLogsResponseBodyPagingInfoOperationLogs) SetOperationContent(v string) *ListTaskOperationLogsResponseBodyPagingInfoOperationLogs {
	s.OperationContent = &v
	return s
}

func (s *ListTaskOperationLogsResponseBodyPagingInfoOperationLogs) SetOperationSeq(v int64) *ListTaskOperationLogsResponseBodyPagingInfoOperationLogs {
	s.OperationSeq = &v
	return s
}

func (s *ListTaskOperationLogsResponseBodyPagingInfoOperationLogs) SetTaskId(v int64) *ListTaskOperationLogsResponseBodyPagingInfoOperationLogs {
	s.TaskId = &v
	return s
}

func (s *ListTaskOperationLogsResponseBodyPagingInfoOperationLogs) SetUser(v string) *ListTaskOperationLogsResponseBodyPagingInfoOperationLogs {
	s.User = &v
	return s
}

type ListTaskOperationLogsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTaskOperationLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTaskOperationLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTaskOperationLogsResponse) GoString() string {
	return s.String()
}

func (s *ListTaskOperationLogsResponse) SetHeaders(v map[string]*string) *ListTaskOperationLogsResponse {
	s.Headers = v
	return s
}

func (s *ListTaskOperationLogsResponse) SetStatusCode(v int32) *ListTaskOperationLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTaskOperationLogsResponse) SetBody(v *ListTaskOperationLogsResponseBody) *ListTaskOperationLogsResponse {
	s.Body = v
	return s
}

type ListTasksRequest struct {
	// The ID of the task.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// The name of the task. Fuzzy match is supported.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The environment of the workspace.
	//
	// Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	// The workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The information about the resource group. Set this parameter to the ID of a resource group for scheduling.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	RuntimeResource *string `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty"`
	// The field that is used to sort tasks. This parameter is configured in the format of "Sorting field Sorting order". You can set the sorting order to Desc or Asc. If you do not specify the sorting order, Asc is used by default. Valid values:
	//
	// 	- `ModifyTime (Desc/Asc)`
	//
	// 	- `CreateTime (Desc/Asc)`
	//
	// 	- `Id (Desc/Asc)`
	//
	//     Default value: `Id Desc`.
	//
	// example:
	//
	// Id Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The type of the task. Valid values:
	//
	// 	- ODPS_SQL
	//
	// 	- SPARK
	//
	// 	- PY_ODPS
	//
	// 	- PY_ODPS3
	//
	// 	- ODPS_SCRIPT
	//
	// 	- ODPS_MR
	//
	// 	- COMPONENT_SQL
	//
	// 	- EMR_HIVE
	//
	// 	- EMR_MR
	//
	// 	- EMR_SPARK_SQL
	//
	// 	- EMR_SPARK
	//
	// 	- EMR_SHELL
	//
	// 	- EMR_PRESTO
	//
	// 	- EMR_IMPALA
	//
	// 	- SPARK_STREAMING
	//
	// 	- EMR_KYUUBI
	//
	// 	- EMR_TRINO
	//
	// 	- HOLOGRES_SQL
	//
	// 	- HOLOGRES_SYNC_DDL
	//
	// 	- HOLOGRES_SYNC_DATA
	//
	// example:
	//
	// ODPS_SQL
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The running mode of the task after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler.
	//
	// Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	TriggerRecurrence *string `json:"TriggerRecurrence,omitempty" xml:"TriggerRecurrence,omitempty"`
	// The trigger type.
	//
	// Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	TriggerType *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
	// The ID of the workflow to which the task belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s ListTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTasksRequest) GoString() string {
	return s.String()
}

func (s *ListTasksRequest) SetIds(v []*int64) *ListTasksRequest {
	s.Ids = v
	return s
}

func (s *ListTasksRequest) SetName(v string) *ListTasksRequest {
	s.Name = &v
	return s
}

func (s *ListTasksRequest) SetOwner(v string) *ListTasksRequest {
	s.Owner = &v
	return s
}

func (s *ListTasksRequest) SetPageNumber(v int32) *ListTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTasksRequest) SetPageSize(v int32) *ListTasksRequest {
	s.PageSize = &v
	return s
}

func (s *ListTasksRequest) SetProjectEnv(v string) *ListTasksRequest {
	s.ProjectEnv = &v
	return s
}

func (s *ListTasksRequest) SetProjectId(v int64) *ListTasksRequest {
	s.ProjectId = &v
	return s
}

func (s *ListTasksRequest) SetRuntimeResource(v string) *ListTasksRequest {
	s.RuntimeResource = &v
	return s
}

func (s *ListTasksRequest) SetSortBy(v string) *ListTasksRequest {
	s.SortBy = &v
	return s
}

func (s *ListTasksRequest) SetTaskType(v string) *ListTasksRequest {
	s.TaskType = &v
	return s
}

func (s *ListTasksRequest) SetTriggerRecurrence(v string) *ListTasksRequest {
	s.TriggerRecurrence = &v
	return s
}

func (s *ListTasksRequest) SetTriggerType(v string) *ListTasksRequest {
	s.TriggerType = &v
	return s
}

func (s *ListTasksRequest) SetWorkflowId(v int64) *ListTasksRequest {
	s.WorkflowId = &v
	return s
}

type ListTasksShrinkRequest struct {
	// The ID of the task.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	// The name of the task. Fuzzy match is supported.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The environment of the workspace.
	//
	// Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	// The workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The information about the resource group. Set this parameter to the ID of a resource group for scheduling.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	RuntimeResource *string `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty"`
	// The field that is used to sort tasks. This parameter is configured in the format of "Sorting field Sorting order". You can set the sorting order to Desc or Asc. If you do not specify the sorting order, Asc is used by default. Valid values:
	//
	// 	- `ModifyTime (Desc/Asc)`
	//
	// 	- `CreateTime (Desc/Asc)`
	//
	// 	- `Id (Desc/Asc)`
	//
	//     Default value: `Id Desc`.
	//
	// example:
	//
	// Id Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The type of the task. Valid values:
	//
	// 	- ODPS_SQL
	//
	// 	- SPARK
	//
	// 	- PY_ODPS
	//
	// 	- PY_ODPS3
	//
	// 	- ODPS_SCRIPT
	//
	// 	- ODPS_MR
	//
	// 	- COMPONENT_SQL
	//
	// 	- EMR_HIVE
	//
	// 	- EMR_MR
	//
	// 	- EMR_SPARK_SQL
	//
	// 	- EMR_SPARK
	//
	// 	- EMR_SHELL
	//
	// 	- EMR_PRESTO
	//
	// 	- EMR_IMPALA
	//
	// 	- SPARK_STREAMING
	//
	// 	- EMR_KYUUBI
	//
	// 	- EMR_TRINO
	//
	// 	- HOLOGRES_SQL
	//
	// 	- HOLOGRES_SYNC_DDL
	//
	// 	- HOLOGRES_SYNC_DATA
	//
	// example:
	//
	// ODPS_SQL
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The running mode of the task after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler.
	//
	// Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	TriggerRecurrence *string `json:"TriggerRecurrence,omitempty" xml:"TriggerRecurrence,omitempty"`
	// The trigger type.
	//
	// Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	TriggerType *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
	// The ID of the workflow to which the task belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s ListTasksShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTasksShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListTasksShrinkRequest) SetIdsShrink(v string) *ListTasksShrinkRequest {
	s.IdsShrink = &v
	return s
}

func (s *ListTasksShrinkRequest) SetName(v string) *ListTasksShrinkRequest {
	s.Name = &v
	return s
}

func (s *ListTasksShrinkRequest) SetOwner(v string) *ListTasksShrinkRequest {
	s.Owner = &v
	return s
}

func (s *ListTasksShrinkRequest) SetPageNumber(v int32) *ListTasksShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTasksShrinkRequest) SetPageSize(v int32) *ListTasksShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListTasksShrinkRequest) SetProjectEnv(v string) *ListTasksShrinkRequest {
	s.ProjectEnv = &v
	return s
}

func (s *ListTasksShrinkRequest) SetProjectId(v int64) *ListTasksShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *ListTasksShrinkRequest) SetRuntimeResource(v string) *ListTasksShrinkRequest {
	s.RuntimeResource = &v
	return s
}

func (s *ListTasksShrinkRequest) SetSortBy(v string) *ListTasksShrinkRequest {
	s.SortBy = &v
	return s
}

func (s *ListTasksShrinkRequest) SetTaskType(v string) *ListTasksShrinkRequest {
	s.TaskType = &v
	return s
}

func (s *ListTasksShrinkRequest) SetTriggerRecurrence(v string) *ListTasksShrinkRequest {
	s.TriggerRecurrence = &v
	return s
}

func (s *ListTasksShrinkRequest) SetTriggerType(v string) *ListTasksShrinkRequest {
	s.TriggerType = &v
	return s
}

func (s *ListTasksShrinkRequest) SetWorkflowId(v int64) *ListTasksShrinkRequest {
	s.WorkflowId = &v
	return s
}

type ListTasksResponseBody struct {
	// The pagination information.
	PagingInfo *ListTasksResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListTasksResponseBody) SetPagingInfo(v *ListTasksResponseBodyPagingInfo) *ListTasksResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListTasksResponseBody) SetRequestId(v string) *ListTasksResponseBody {
	s.RequestId = &v
	return s
}

type ListTasksResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The tasks.
	Tasks []*ListTasksResponseBodyPagingInfoTasks `json:"Tasks,omitempty" xml:"Tasks,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTasksResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListTasksResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListTasksResponseBodyPagingInfo) SetPageNumber(v int32) *ListTasksResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfo) SetPageSize(v int32) *ListTasksResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfo) SetTasks(v []*ListTasksResponseBodyPagingInfoTasks) *ListTasksResponseBodyPagingInfo {
	s.Tasks = v
	return s
}

func (s *ListTasksResponseBodyPagingInfo) SetTotalCount(v int32) *ListTasksResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

type ListTasksResponseBodyPagingInfoTasks struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *ListTasksResponseBodyPagingInfoTasksDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description of the task.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The instance generation mode. Valid values:
	//
	// 	- T+1
	//
	// 	- Immediately
	//
	// example:
	//
	// T+1
	InstanceMode *string `json:"InstanceMode,omitempty" xml:"InstanceMode,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The name of the task.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The environment of the workspace.
	//
	// Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun interval. Unit: seconds.
	//
	// example:
	//
	// 60
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode.
	//
	// Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The configurations of the runtime environment, such as the resource group information.
	RuntimeResource *ListTasksResponseBodyPagingInfoTasksRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The list of script parameters.
	//
	// example:
	//
	// para1=$bizdate para2=$[yyyymmdd]
	ScriptParameters *string `json:"ScriptParameters,omitempty" xml:"ScriptParameters,omitempty"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The method to trigger task scheduling.
	Trigger *ListTasksResponseBodyPagingInfoTasksTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	// The type of the task.
	//
	// example:
	//
	// ODPS_SQL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the workflow to which the task belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s ListTasksResponseBodyPagingInfoTasks) String() string {
	return tea.Prettify(s)
}

func (s ListTasksResponseBodyPagingInfoTasks) GoString() string {
	return s.String()
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetBaselineId(v int64) *ListTasksResponseBodyPagingInfoTasks {
	s.BaselineId = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetCreateTime(v int64) *ListTasksResponseBodyPagingInfoTasks {
	s.CreateTime = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetCreateUser(v string) *ListTasksResponseBodyPagingInfoTasks {
	s.CreateUser = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetDataSource(v *ListTasksResponseBodyPagingInfoTasksDataSource) *ListTasksResponseBodyPagingInfoTasks {
	s.DataSource = v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetDescription(v string) *ListTasksResponseBodyPagingInfoTasks {
	s.Description = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetId(v int64) *ListTasksResponseBodyPagingInfoTasks {
	s.Id = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetInstanceMode(v string) *ListTasksResponseBodyPagingInfoTasks {
	s.InstanceMode = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetModifyTime(v int64) *ListTasksResponseBodyPagingInfoTasks {
	s.ModifyTime = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetModifyUser(v string) *ListTasksResponseBodyPagingInfoTasks {
	s.ModifyUser = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetName(v string) *ListTasksResponseBodyPagingInfoTasks {
	s.Name = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetOwner(v string) *ListTasksResponseBodyPagingInfoTasks {
	s.Owner = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetPriority(v int32) *ListTasksResponseBodyPagingInfoTasks {
	s.Priority = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetProjectEnv(v string) *ListTasksResponseBodyPagingInfoTasks {
	s.ProjectEnv = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetProjectId(v int64) *ListTasksResponseBodyPagingInfoTasks {
	s.ProjectId = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetRerunInterval(v int32) *ListTasksResponseBodyPagingInfoTasks {
	s.RerunInterval = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetRerunMode(v string) *ListTasksResponseBodyPagingInfoTasks {
	s.RerunMode = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetRerunTimes(v int32) *ListTasksResponseBodyPagingInfoTasks {
	s.RerunTimes = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetRuntimeResource(v *ListTasksResponseBodyPagingInfoTasksRuntimeResource) *ListTasksResponseBodyPagingInfoTasks {
	s.RuntimeResource = v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetScriptParameters(v string) *ListTasksResponseBodyPagingInfoTasks {
	s.ScriptParameters = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetTimeout(v int32) *ListTasksResponseBodyPagingInfoTasks {
	s.Timeout = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetTrigger(v *ListTasksResponseBodyPagingInfoTasksTrigger) *ListTasksResponseBodyPagingInfoTasks {
	s.Trigger = v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetType(v string) *ListTasksResponseBodyPagingInfoTasks {
	s.Type = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasks) SetWorkflowId(v int64) *ListTasksResponseBodyPagingInfoTasks {
	s.WorkflowId = &v
	return s
}

type ListTasksResponseBodyPagingInfoTasksDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListTasksResponseBodyPagingInfoTasksDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListTasksResponseBodyPagingInfoTasksDataSource) GoString() string {
	return s.String()
}

func (s *ListTasksResponseBodyPagingInfoTasksDataSource) SetName(v string) *ListTasksResponseBodyPagingInfoTasksDataSource {
	s.Name = &v
	return s
}

type ListTasksResponseBodyPagingInfoTasksRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListTasksResponseBodyPagingInfoTasksRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ListTasksResponseBodyPagingInfoTasksRuntimeResource) GoString() string {
	return s.String()
}

func (s *ListTasksResponseBodyPagingInfoTasksRuntimeResource) SetCu(v string) *ListTasksResponseBodyPagingInfoTasksRuntimeResource {
	s.Cu = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasksRuntimeResource) SetImage(v string) *ListTasksResponseBodyPagingInfoTasksRuntimeResource {
	s.Image = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasksRuntimeResource) SetResourceGroupId(v string) *ListTasksResponseBodyPagingInfoTasksRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ListTasksResponseBodyPagingInfoTasksTrigger struct {
	// The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 9999-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The trigger type.
	//
	// Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTasksResponseBodyPagingInfoTasksTrigger) String() string {
	return tea.Prettify(s)
}

func (s ListTasksResponseBodyPagingInfoTasksTrigger) GoString() string {
	return s.String()
}

func (s *ListTasksResponseBodyPagingInfoTasksTrigger) SetCron(v string) *ListTasksResponseBodyPagingInfoTasksTrigger {
	s.Cron = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasksTrigger) SetEndTime(v string) *ListTasksResponseBodyPagingInfoTasksTrigger {
	s.EndTime = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasksTrigger) SetRecurrence(v string) *ListTasksResponseBodyPagingInfoTasksTrigger {
	s.Recurrence = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasksTrigger) SetStartTime(v string) *ListTasksResponseBodyPagingInfoTasksTrigger {
	s.StartTime = &v
	return s
}

func (s *ListTasksResponseBodyPagingInfoTasksTrigger) SetType(v string) *ListTasksResponseBodyPagingInfoTasksTrigger {
	s.Type = &v
	return s
}

type ListTasksResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTasksResponse) GoString() string {
	return s.String()
}

func (s *ListTasksResponse) SetHeaders(v map[string]*string) *ListTasksResponse {
	s.Headers = v
	return s
}

func (s *ListTasksResponse) SetStatusCode(v int32) *ListTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTasksResponse) SetBody(v *ListTasksResponseBody) *ListTasksResponse {
	s.Body = v
	return s
}

type ListUpstreamTaskInstancesRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListUpstreamTaskInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTaskInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListUpstreamTaskInstancesRequest) SetId(v int64) *ListUpstreamTaskInstancesRequest {
	s.Id = &v
	return s
}

func (s *ListUpstreamTaskInstancesRequest) SetPageNumber(v int32) *ListUpstreamTaskInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListUpstreamTaskInstancesRequest) SetPageSize(v int32) *ListUpstreamTaskInstancesRequest {
	s.PageSize = &v
	return s
}

type ListUpstreamTaskInstancesResponseBody struct {
	// The pagination information.
	PagingInfo *ListUpstreamTaskInstancesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListUpstreamTaskInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTaskInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListUpstreamTaskInstancesResponseBody) SetPagingInfo(v *ListUpstreamTaskInstancesResponseBodyPagingInfo) *ListUpstreamTaskInstancesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBody) SetRequestId(v string) *ListUpstreamTaskInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ListUpstreamTaskInstancesResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The instances. This parameter is deprecated and replaced by the UpstreamTaskInstances parameter.
	TaskInstances []*ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances `json:"TaskInstances,omitempty" xml:"TaskInstances,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The ancestor instances.
	UpstreamTaskInstances []*ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstances `json:"UpstreamTaskInstances,omitempty" xml:"UpstreamTaskInstances,omitempty" type:"Repeated"`
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfo) SetPageNumber(v int32) *ListUpstreamTaskInstancesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfo) SetPageSize(v int32) *ListUpstreamTaskInstancesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfo) SetTaskInstances(v []*ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) *ListUpstreamTaskInstancesResponseBodyPagingInfo {
	s.TaskInstances = v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfo) SetTotalCount(v int32) *ListUpstreamTaskInstancesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfo) SetUpstreamTaskInstances(v []*ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstances) *ListUpstreamTaskInstancesResponseBodyPagingInfo {
	s.UpstreamTaskInstances = v
	return s
}

type ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The data timestamp.
	//
	// example:
	//
	// 1710239005403
	Bizdate *int64 `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The time when the instance finished running.
	//
	// example:
	//
	// 1710239005403
	FinishedTime *int64 `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The sequence number of the period. Indicates which cycle of the day the task instance is in.
	//
	// example:
	//
	// 1
	PeriodNumber *int32 `json:"PeriodNumber,omitempty" xml:"PeriodNumber,omitempty"`
	// The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// Deprecated
	//
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun mode. Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times the instance is run. By default, the value starts from 1.
	//
	// example:
	//
	// 1
	RunNumber *int32 `json:"RunNumber,omitempty" xml:"RunNumber,omitempty"`
	// The runtime information about the instance.
	Runtime *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime `json:"Runtime,omitempty" xml:"Runtime,omitempty" type:"Struct"`
	// The configurations of the runtime environment, such as the resource group information.
	RuntimeResource *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The time when the instance started to run.
	//
	// example:
	//
	// 1710239005403
	StartedTime *int64 `json:"StartedTime,omitempty" xml:"StartedTime,omitempty"`
	// The status of the instance. Valid values:
	//
	// 	- NotRun: The instance is not run.
	//
	// 	- Running: The instance is running.
	//
	// 	- WaitTime: The instance is waiting for the scheduling time to arrive.
	//
	// 	- CheckingCondition: Branch conditions are being checked for the instance.
	//
	// 	- WaitResource: The instance is waiting for resources.
	//
	// 	- Failure: The instance fails to be run.
	//
	// 	- Success: The instance is successfully run.
	//
	// 	- Checking: Data quality is being checked for the instance.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The scheduling dependency type. Valid values:
	//
	// 	- Normal: same-cycle scheduling dependency
	//
	// 	- CrossCycle: cross-cycle scheduling dependency
	//
	// example:
	//
	// Normal
	StepType *string `json:"StepType,omitempty" xml:"StepType,omitempty"`
	// The ID of the task for which the instance is generated.
	//
	// example:
	//
	// 1234
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the task for which the instance is generated.
	//
	// example:
	//
	// SQL node
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The type of the task for which the instance is generated.
	//
	// example:
	//
	// ODPS_SQL
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 1
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	TriggerRecurrence *string `json:"TriggerRecurrence,omitempty" xml:"TriggerRecurrence,omitempty"`
	// The scheduling time.
	//
	// example:
	//
	// 1710239005403
	TriggerTime *int64 `json:"TriggerTime,omitempty" xml:"TriggerTime,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	TriggerType *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
	// The ID of the workflow to which the instance belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
	// The workflow instance ID.
	//
	// example:
	//
	// 1234
	WorkflowInstanceId *int64 `json:"WorkflowInstanceId,omitempty" xml:"WorkflowInstanceId,omitempty"`
	// The type of the workflow instance. Valid values:
	//
	// 	- SmokeTest
	//
	// 	- SupplementData
	//
	// 	- Manual
	//
	// 	- ManualWorkflow
	//
	// 	- Normal
	//
	// 	- ManualFlow
	//
	// example:
	//
	// Normal
	WorkflowInstanceType *string `json:"WorkflowInstanceType,omitempty" xml:"WorkflowInstanceType,omitempty"`
	// The name of the workflow to which the instance belongs.
	//
	// example:
	//
	// Test workflow
	WorkflowName *string `json:"WorkflowName,omitempty" xml:"WorkflowName,omitempty"`
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) GoString() string {
	return s.String()
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetBaselineId(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.BaselineId = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetBizdate(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Bizdate = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetCreateTime(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.CreateTime = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetCreateUser(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.CreateUser = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetDataSource(v *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.DataSource = v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetDescription(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Description = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetEnvType(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.EnvType = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetFinishedTime(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.FinishedTime = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetId(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Id = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetModifyTime(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.ModifyTime = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetModifyUser(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.ModifyUser = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetOwner(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Owner = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetPeriodNumber(v int32) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.PeriodNumber = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetPriority(v int32) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Priority = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetProjectEnv(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.ProjectEnv = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetProjectId(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.ProjectId = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetRerunMode(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.RerunMode = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetRunNumber(v int32) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.RunNumber = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetRuntime(v *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Runtime = v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetRuntimeResource(v *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.RuntimeResource = v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetStartedTime(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.StartedTime = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetStatus(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Status = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetStepType(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.StepType = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTaskId(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TaskId = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTaskName(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TaskName = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTaskType(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TaskType = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTimeout(v int32) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.Timeout = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTriggerRecurrence(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TriggerRecurrence = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTriggerTime(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TriggerTime = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetTriggerType(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.TriggerType = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetWorkflowId(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WorkflowId = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetWorkflowInstanceId(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WorkflowInstanceId = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetWorkflowInstanceType(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WorkflowInstanceType = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances) SetWorkflowName(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstances {
	s.WorkflowName = &v
	return s
}

type ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource) GoString() string {
	return s.String()
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource) SetName(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesDataSource {
	s.Name = &v
	return s
}

type ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime struct {
	// The host for running.
	//
	// example:
	//
	// cn-shanghai.1.2
	Gateway *string `json:"Gateway,omitempty" xml:"Gateway,omitempty"`
	// The instance run ID.
	//
	// example:
	//
	// T3_123
	ProcessId *string `json:"ProcessId,omitempty" xml:"ProcessId,omitempty"`
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) GoString() string {
	return s.String()
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) SetGateway(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime {
	s.Gateway = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime) SetProcessId(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntime {
	s.ProcessId = &v
	return s
}

type ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) GoString() string {
	return s.String()
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) SetCu(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource {
	s.Cu = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) SetImage(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource {
	s.Image = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource) SetResourceGroupId(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoTaskInstancesRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstances struct {
	// The scheduling dependency type. Valid values:
	//
	// 	- Normal
	//
	// 	- CrossCycle
	//
	// example:
	//
	// Normal
	DependencyType *string `json:"DependencyType,omitempty" xml:"DependencyType,omitempty"`
	// The information about a task instance.
	TaskInstance *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance `json:"TaskInstance,omitempty" xml:"TaskInstance,omitempty" type:"Struct"`
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstances) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstances) GoString() string {
	return s.String()
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstances) SetDependencyType(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstances {
	s.DependencyType = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstances) SetTaskInstance(v *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstances {
	s.TaskInstance = v
	return s
}

type ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The data timestamp.
	//
	// example:
	//
	// 1710239005403
	Bizdate *int64 `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment in which the data source is used. Valid values:
	//
	// 	- Dev
	//
	// 	- Prod
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The time when the instance finished running.
	//
	// example:
	//
	// 1710239005403
	FinishedTime *int64 `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The sequence number of the cycle. This parameter indicates the cycle of the task instance on the current day.
	//
	// example:
	//
	// 1
	PeriodNumber *int32 `json:"PeriodNumber,omitempty" xml:"PeriodNumber,omitempty"`
	// The priority of the task. Minimum value: 1. Maximum value: 8. A larger value indicates a higher priority. Default value: 1.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun mode.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times the instance is run. By default, the value starts from 1.
	//
	// example:
	//
	// 1
	RunNumber *int32 `json:"RunNumber,omitempty" xml:"RunNumber,omitempty"`
	// The runtime information about the instance.
	Runtime *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntime `json:"Runtime,omitempty" xml:"Runtime,omitempty" type:"Struct"`
	// The configurations of the runtime environment, such as the resource group information.
	RuntimeResource *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The time when the instance started to run.
	//
	// example:
	//
	// 1710239005403
	StartedTime *int64 `json:"StartedTime,omitempty" xml:"StartedTime,omitempty"`
	// The status of the instance. Valid values:
	//
	// 	- NotRun: The instance is not run.
	//
	// 	- Running: The instance is running.
	//
	// 	- WaitTime: The instance is waiting for the scheduling time to arrive.
	//
	// 	- CheckingCondition: Branch conditions are being checked for the instance.
	//
	// 	- WaitResource: The instance is waiting for resources.
	//
	// 	- Failure: The instance fails to be run.
	//
	// 	- Success: The instance is successfully run.
	//
	// 	- Checking: Data quality is being checked for the instance.
	//
	// 	- WaitTrigger: The instance is waiting to be triggered by external scheduling systems.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the task for which the instance is generated.
	//
	// example:
	//
	// 1234
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the task for which the instance is generated.
	//
	// example:
	//
	// SQL node
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The type of the task for which the instance is generated.
	//
	// example:
	//
	// ODPS_SQL
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The timeout period of task running. Unit: seconds.
	//
	// Note: The value of this parameter is rounded up by hour.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The running mode of the instance after it is triggered. This parameter takes effect only if the TriggerType parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	TriggerRecurrence *string `json:"TriggerRecurrence,omitempty" xml:"TriggerRecurrence,omitempty"`
	// The scheduling time.
	//
	// example:
	//
	// 1710239005403
	TriggerTime *int64 `json:"TriggerTime,omitempty" xml:"TriggerTime,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	TriggerType *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
	// The ID of the workflow to which the instance belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
	// The workflow instance ID.
	//
	// example:
	//
	// 1234
	WorkflowInstanceId *int64 `json:"WorkflowInstanceId,omitempty" xml:"WorkflowInstanceId,omitempty"`
	// The type of the workflow instance. Valid values:
	//
	// 	- Normal
	//
	// 	- Manual
	//
	// 	- SmokeTest
	//
	// 	- SupplementData
	//
	// 	- ManualWorkflow
	//
	// example:
	//
	// Normal
	WorkflowInstanceType *string `json:"WorkflowInstanceType,omitempty" xml:"WorkflowInstanceType,omitempty"`
	// The name of the workflow to which the instance belongs.
	//
	// example:
	//
	// Test workflow
	WorkflowName *string `json:"WorkflowName,omitempty" xml:"WorkflowName,omitempty"`
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) GoString() string {
	return s.String()
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetBaselineId(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.BaselineId = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetBizdate(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.Bizdate = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetCreateTime(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.CreateTime = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetCreateUser(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.CreateUser = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetDataSource(v *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceDataSource) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.DataSource = v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetDescription(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.Description = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetEnvType(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.EnvType = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetFinishedTime(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.FinishedTime = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetId(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.Id = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetModifyTime(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.ModifyTime = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetModifyUser(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.ModifyUser = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetOwner(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.Owner = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetPeriodNumber(v int32) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.PeriodNumber = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetPriority(v int32) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.Priority = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetProjectId(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.ProjectId = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetRerunMode(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.RerunMode = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetRunNumber(v int32) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.RunNumber = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetRuntime(v *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntime) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.Runtime = v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetRuntimeResource(v *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntimeResource) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.RuntimeResource = v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetStartedTime(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.StartedTime = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetStatus(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.Status = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetTaskId(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.TaskId = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetTaskName(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.TaskName = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetTaskType(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.TaskType = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetTimeout(v int32) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.Timeout = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetTriggerRecurrence(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.TriggerRecurrence = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetTriggerTime(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.TriggerTime = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetTriggerType(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.TriggerType = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetWorkflowId(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.WorkflowId = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetWorkflowInstanceId(v int64) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.WorkflowInstanceId = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetWorkflowInstanceType(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.WorkflowInstanceType = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance) SetWorkflowName(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstance {
	s.WorkflowName = &v
	return s
}

type ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceDataSource) GoString() string {
	return s.String()
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceDataSource) SetName(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceDataSource {
	s.Name = &v
	return s
}

type ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntime struct {
	// The host for running.
	//
	// example:
	//
	// cn-shanghai.1.2
	Gateway *string `json:"Gateway,omitempty" xml:"Gateway,omitempty"`
	// The instance run ID.
	//
	// example:
	//
	// T3_123
	ProcessId *string `json:"ProcessId,omitempty" xml:"ProcessId,omitempty"`
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntime) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntime) GoString() string {
	return s.String()
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntime) SetGateway(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntime {
	s.Gateway = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntime) SetProcessId(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntime {
	s.ProcessId = &v
	return s
}

type ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntimeResource) GoString() string {
	return s.String()
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntimeResource) SetCu(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntimeResource {
	s.Cu = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntimeResource) SetImage(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntimeResource {
	s.Image = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntimeResource) SetResourceGroupId(v string) *ListUpstreamTaskInstancesResponseBodyPagingInfoUpstreamTaskInstancesTaskInstanceRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ListUpstreamTaskInstancesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListUpstreamTaskInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListUpstreamTaskInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTaskInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListUpstreamTaskInstancesResponse) SetHeaders(v map[string]*string) *ListUpstreamTaskInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListUpstreamTaskInstancesResponse) SetStatusCode(v int32) *ListUpstreamTaskInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUpstreamTaskInstancesResponse) SetBody(v *ListUpstreamTaskInstancesResponseBody) *ListUpstreamTaskInstancesResponse {
	s.Body = v
	return s
}

type ListUpstreamTasksRequest struct {
	// The task ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
}

func (s ListUpstreamTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTasksRequest) GoString() string {
	return s.String()
}

func (s *ListUpstreamTasksRequest) SetId(v int64) *ListUpstreamTasksRequest {
	s.Id = &v
	return s
}

func (s *ListUpstreamTasksRequest) SetPageNumber(v int32) *ListUpstreamTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *ListUpstreamTasksRequest) SetPageSize(v int32) *ListUpstreamTasksRequest {
	s.PageSize = &v
	return s
}

func (s *ListUpstreamTasksRequest) SetProjectEnv(v string) *ListUpstreamTasksRequest {
	s.ProjectEnv = &v
	return s
}

type ListUpstreamTasksResponseBody struct {
	// The pagination information.
	PagingInfo *ListUpstreamTasksResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListUpstreamTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListUpstreamTasksResponseBody) SetPagingInfo(v *ListUpstreamTasksResponseBodyPagingInfo) *ListUpstreamTasksResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListUpstreamTasksResponseBody) SetRequestId(v string) *ListUpstreamTasksResponseBody {
	s.RequestId = &v
	return s
}

type ListUpstreamTasksResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The tasks. This parameter is deprecated and replaced by the UpstreamTasks parameter.
	Tasks []*ListUpstreamTasksResponseBodyPagingInfoTasks `json:"Tasks,omitempty" xml:"Tasks,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The ancestor tasks.
	UpstreamTasks []*ListUpstreamTasksResponseBodyPagingInfoUpstreamTasks `json:"UpstreamTasks,omitempty" xml:"UpstreamTasks,omitempty" type:"Repeated"`
}

func (s ListUpstreamTasksResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTasksResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListUpstreamTasksResponseBodyPagingInfo) SetPageNumber(v int32) *ListUpstreamTasksResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfo) SetPageSize(v int32) *ListUpstreamTasksResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfo) SetTasks(v []*ListUpstreamTasksResponseBodyPagingInfoTasks) *ListUpstreamTasksResponseBodyPagingInfo {
	s.Tasks = v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfo) SetTotalCount(v int32) *ListUpstreamTasksResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfo) SetUpstreamTasks(v []*ListUpstreamTasksResponseBodyPagingInfoUpstreamTasks) *ListUpstreamTasksResponseBodyPagingInfo {
	s.UpstreamTasks = v
	return s
}

type ListUpstreamTasksResponseBodyPagingInfoTasks struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *ListUpstreamTasksResponseBodyPagingInfoTasksDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description of the task.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The instance generation mode. Valid values:
	//
	// 	- T+1
	//
	// 	- Immediately
	//
	// example:
	//
	// T+1
	InstanceMode *string `json:"InstanceMode,omitempty" xml:"InstanceMode,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The name of the task.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The priority of the task. Valid values: 1 to 8. A larger value indicates a higher priority. Default value: 1.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// Deprecated
	//
	// The environment of the workspace. This parameter is deprecated and replaced by the EnvType parameter.
	//
	// Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	ProjectEnv *string `json:"ProjectEnv,omitempty" xml:"ProjectEnv,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun interval. Unit: seconds.
	//
	// example:
	//
	// 60
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode.
	//
	// Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether it is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether it is successfully run or fails to run.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The configurations of the runtime environment, such as the resource group information.
	RuntimeResource *ListUpstreamTasksResponseBodyPagingInfoTasksRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The scheduling dependency type. Valid values:
	//
	// 	- Normal: same-cycle scheduling dependency
	//
	// 	- CrossCycle: cross-cycle scheduling dependency
	//
	// example:
	//
	// Normal
	StepType *string `json:"StepType,omitempty" xml:"StepType,omitempty"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The method to trigger task scheduling.
	Trigger *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	// The type of the task.
	//
	// example:
	//
	// ODPS_SQL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the workflow to which the task belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s ListUpstreamTasksResponseBodyPagingInfoTasks) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTasksResponseBodyPagingInfoTasks) GoString() string {
	return s.String()
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetBaselineId(v int64) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.BaselineId = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetCreateTime(v int64) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.CreateTime = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetCreateUser(v string) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.CreateUser = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetDataSource(v *ListUpstreamTasksResponseBodyPagingInfoTasksDataSource) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.DataSource = v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetDescription(v string) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.Description = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetEnvType(v string) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.EnvType = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetId(v int64) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.Id = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetInstanceMode(v string) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.InstanceMode = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetModifyTime(v int64) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.ModifyTime = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetModifyUser(v string) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.ModifyUser = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetName(v string) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.Name = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetOwner(v string) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.Owner = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetPriority(v int32) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.Priority = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetProjectEnv(v string) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.ProjectEnv = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetProjectId(v int64) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.ProjectId = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetRerunInterval(v int32) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.RerunInterval = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetRerunMode(v string) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.RerunMode = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetRerunTimes(v int32) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.RerunTimes = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetRuntimeResource(v *ListUpstreamTasksResponseBodyPagingInfoTasksRuntimeResource) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.RuntimeResource = v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetStepType(v string) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.StepType = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetTimeout(v int32) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.Timeout = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetTrigger(v *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.Trigger = v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetType(v string) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.Type = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasks) SetWorkflowId(v int64) *ListUpstreamTasksResponseBodyPagingInfoTasks {
	s.WorkflowId = &v
	return s
}

type ListUpstreamTasksResponseBodyPagingInfoTasksDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListUpstreamTasksResponseBodyPagingInfoTasksDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTasksResponseBodyPagingInfoTasksDataSource) GoString() string {
	return s.String()
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasksDataSource) SetName(v string) *ListUpstreamTasksResponseBodyPagingInfoTasksDataSource {
	s.Name = &v
	return s
}

type ListUpstreamTasksResponseBodyPagingInfoTasksRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListUpstreamTasksResponseBodyPagingInfoTasksRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTasksResponseBodyPagingInfoTasksRuntimeResource) GoString() string {
	return s.String()
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasksRuntimeResource) SetCu(v string) *ListUpstreamTasksResponseBodyPagingInfoTasksRuntimeResource {
	s.Cu = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasksRuntimeResource) SetImage(v string) *ListUpstreamTasksResponseBodyPagingInfoTasksRuntimeResource {
	s.Image = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasksRuntimeResource) SetResourceGroupId(v string) *ListUpstreamTasksResponseBodyPagingInfoTasksRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ListUpstreamTasksResponseBodyPagingInfoTasksTrigger struct {
	// The CRON expression of the task. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 9999-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time zone.
	//
	// example:
	//
	// Asia/Shanghai
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	// The trigger type.
	//
	// Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListUpstreamTasksResponseBodyPagingInfoTasksTrigger) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTasksResponseBodyPagingInfoTasksTrigger) GoString() string {
	return s.String()
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger) SetCron(v string) *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger {
	s.Cron = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger) SetEndTime(v string) *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger {
	s.EndTime = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger) SetRecurrence(v string) *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger {
	s.Recurrence = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger) SetStartTime(v string) *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger {
	s.StartTime = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger) SetTimezone(v string) *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger {
	s.Timezone = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger) SetType(v string) *ListUpstreamTasksResponseBodyPagingInfoTasksTrigger {
	s.Type = &v
	return s
}

type ListUpstreamTasksResponseBodyPagingInfoUpstreamTasks struct {
	// The scheduling dependency type. Valid values:
	//
	// 	- Normal: same-cycle scheduling dependency
	//
	// 	- CrossCycle: cross-cycle scheduling dependency
	//
	// example:
	//
	// Normal
	DependencyType *string `json:"DependencyType,omitempty" xml:"DependencyType,omitempty"`
	// The information about the task.
	Task *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask `json:"Task,omitempty" xml:"Task,omitempty" type:"Struct"`
}

func (s ListUpstreamTasksResponseBodyPagingInfoUpstreamTasks) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTasksResponseBodyPagingInfoUpstreamTasks) GoString() string {
	return s.String()
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasks) SetDependencyType(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasks {
	s.DependencyType = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasks) SetTask(v *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasks {
	s.Task = v
	return s
}

type ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaselineId *int64 `json:"BaselineId,omitempty" xml:"BaselineId,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The information about the associated data source.
	DataSource *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The description of the task.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The task ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The instance generation mode. Valid values:
	//
	// 	- T+1
	//
	// 	- Immediately
	//
	// example:
	//
	// T+1
	InstanceMode *string `json:"InstanceMode,omitempty" xml:"InstanceMode,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The name of the task.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the task owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The priority of the task. Valid values: 1 to 8.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The rerun interval. Unit: seconds.
	//
	// example:
	//
	// 60
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode. Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The configurations of the runtime environment, such as the resource group information.
	RuntimeResource *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The trigger method.
	Trigger *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	// The type of the task.
	//
	// example:
	//
	// ODPS_SQL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the workflow to which the task belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) GoString() string {
	return s.String()
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetBaselineId(v int64) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.BaselineId = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetCreateTime(v int64) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.CreateTime = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetCreateUser(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.CreateUser = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetDataSource(v *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskDataSource) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.DataSource = v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetDescription(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.Description = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetEnvType(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.EnvType = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetId(v int64) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.Id = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetInstanceMode(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.InstanceMode = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetModifyTime(v int64) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.ModifyTime = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetModifyUser(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.ModifyUser = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetName(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.Name = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetOwner(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.Owner = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetPriority(v int32) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.Priority = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetProjectId(v int64) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.ProjectId = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetRerunInterval(v int32) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.RerunInterval = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetRerunMode(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.RerunMode = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetRerunTimes(v int32) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.RerunTimes = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetRuntimeResource(v *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskRuntimeResource) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.RuntimeResource = v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetTimeout(v int32) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.Timeout = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetTrigger(v *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.Trigger = v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetType(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.Type = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask) SetWorkflowId(v int64) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTask {
	s.WorkflowId = &v
	return s
}

type ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskDataSource) GoString() string {
	return s.String()
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskDataSource) SetName(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskDataSource {
	s.Name = &v
	return s
}

type ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskRuntimeResource) GoString() string {
	return s.String()
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskRuntimeResource) SetCu(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskRuntimeResource {
	s.Cu = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskRuntimeResource) SetImage(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskRuntimeResource {
	s.Image = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskRuntimeResource) SetResourceGroupId(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger struct {
	// The CRON expression. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 9999-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time zone.
	//
	// example:
	//
	// Asia/Shanghai
	Timezone *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger) GoString() string {
	return s.String()
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger) SetCron(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger {
	s.Cron = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger) SetEndTime(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger {
	s.EndTime = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger) SetRecurrence(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger {
	s.Recurrence = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger) SetStartTime(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger {
	s.StartTime = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger) SetTimezone(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger {
	s.Timezone = &v
	return s
}

func (s *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger) SetType(v string) *ListUpstreamTasksResponseBodyPagingInfoUpstreamTasksTaskTrigger {
	s.Type = &v
	return s
}

type ListUpstreamTasksResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListUpstreamTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListUpstreamTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUpstreamTasksResponse) GoString() string {
	return s.String()
}

func (s *ListUpstreamTasksResponse) SetHeaders(v map[string]*string) *ListUpstreamTasksResponse {
	s.Headers = v
	return s
}

func (s *ListUpstreamTasksResponse) SetStatusCode(v int32) *ListUpstreamTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUpstreamTasksResponse) SetBody(v *ListUpstreamTasksResponseBody) *ListUpstreamTasksResponse {
	s.Body = v
	return s
}

type ListWorkflowDefinitionsRequest struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the Alibaba Cloud account used by the workspace administrator. You can log on to the Alibaba Cloud Management Console and view the ID on the Security Settings page.
	//
	// example:
	//
	// 110755000425XXXX
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Maximum value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The workflow type. This parameter specifies a filter condition.
	//
	// Valid values:
	//
	// 	- CycleWorkflow
	//
	// 	- ManualWorkflow
	//
	// example:
	//
	// CycleWorkflow
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListWorkflowDefinitionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowDefinitionsRequest) GoString() string {
	return s.String()
}

func (s *ListWorkflowDefinitionsRequest) SetName(v string) *ListWorkflowDefinitionsRequest {
	s.Name = &v
	return s
}

func (s *ListWorkflowDefinitionsRequest) SetOwner(v string) *ListWorkflowDefinitionsRequest {
	s.Owner = &v
	return s
}

func (s *ListWorkflowDefinitionsRequest) SetPageNumber(v int32) *ListWorkflowDefinitionsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListWorkflowDefinitionsRequest) SetPageSize(v int32) *ListWorkflowDefinitionsRequest {
	s.PageSize = &v
	return s
}

func (s *ListWorkflowDefinitionsRequest) SetProjectId(v int64) *ListWorkflowDefinitionsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListWorkflowDefinitionsRequest) SetType(v string) *ListWorkflowDefinitionsRequest {
	s.Type = &v
	return s
}

type ListWorkflowDefinitionsResponseBody struct {
	// The pagination information.
	PagingInfo *ListWorkflowDefinitionsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 8C3ED0C5-ABAB-55E1-854B-DAC02B11XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListWorkflowDefinitionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowDefinitionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListWorkflowDefinitionsResponseBody) SetPagingInfo(v *ListWorkflowDefinitionsResponseBodyPagingInfo) *ListWorkflowDefinitionsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListWorkflowDefinitionsResponseBody) SetRequestId(v string) *ListWorkflowDefinitionsResponseBody {
	s.RequestId = &v
	return s
}

type ListWorkflowDefinitionsResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 227
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The workflows.
	WorkflowDefinitions []*ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions `json:"WorkflowDefinitions,omitempty" xml:"WorkflowDefinitions,omitempty" type:"Repeated"`
}

func (s ListWorkflowDefinitionsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowDefinitionsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfo) SetPageNumber(v int32) *ListWorkflowDefinitionsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfo) SetPageSize(v int32) *ListWorkflowDefinitionsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfo) SetTotalCount(v int32) *ListWorkflowDefinitionsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfo) SetWorkflowDefinitions(v []*ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions) *ListWorkflowDefinitionsResponseBodyPagingInfo {
	s.WorkflowDefinitions = v
	return s
}

type ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions struct {
	// The time when the workflow was created. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1698057323000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the workflow.
	//
	// example:
	//
	// Workflow description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the workflow.
	//
	// example:
	//
	// 463497880880954XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The time when the workflow was last modified. This value is a UNIX timestamp.
	//
	// example:
	//
	// 1698057323000
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The name of the workflow.
	//
	// example:
	//
	// OpenAPI test workflow Demo
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The owner.
	//
	// example:
	//
	// 110755000425XXXX
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The ID of the DataWorks workspace to which the workflow belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 4710
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The script information.
	Script *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	// The type of the workflow.
	//
	// Valid values:
	//
	// 	- CycleWorkflow
	//
	// 	- ManualWorkflow
	//
	// example:
	//
	// CycleWorkflow
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions) GoString() string {
	return s.String()
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions) SetCreateTime(v int64) *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions {
	s.CreateTime = &v
	return s
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions) SetDescription(v string) *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions {
	s.Description = &v
	return s
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions) SetId(v int64) *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions {
	s.Id = &v
	return s
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions) SetModifyTime(v int64) *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions {
	s.ModifyTime = &v
	return s
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions) SetName(v string) *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions {
	s.Name = &v
	return s
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions) SetOwner(v string) *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions {
	s.Owner = &v
	return s
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions) SetProjectId(v int64) *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions {
	s.ProjectId = &v
	return s
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions) SetScript(v *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScript) *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions {
	s.Script = v
	return s
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions) SetType(v string) *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitions {
	s.Type = &v
	return s
}

type ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScript struct {
	// The script ID.
	//
	// example:
	//
	// 698002781368644XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The script path.
	//
	// example:
	//
	// XX/OpenAPI_test/workflow_test/OpenAPI_test_workflow_Demo
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The runtime.
	Runtime *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScriptRuntime `json:"Runtime,omitempty" xml:"Runtime,omitempty" type:"Struct"`
}

func (s ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScript) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScript) GoString() string {
	return s.String()
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScript) SetId(v int64) *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScript {
	s.Id = &v
	return s
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScript) SetPath(v string) *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScript {
	s.Path = &v
	return s
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScript) SetRuntime(v *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScriptRuntime) *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScript {
	s.Runtime = v
	return s
}

type ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScriptRuntime struct {
	// The command.
	//
	// example:
	//
	// WORKFLOW
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
}

func (s ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScriptRuntime) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScriptRuntime) GoString() string {
	return s.String()
}

func (s *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScriptRuntime) SetCommand(v string) *ListWorkflowDefinitionsResponseBodyPagingInfoWorkflowDefinitionsScriptRuntime {
	s.Command = &v
	return s
}

type ListWorkflowDefinitionsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWorkflowDefinitionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWorkflowDefinitionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowDefinitionsResponse) GoString() string {
	return s.String()
}

func (s *ListWorkflowDefinitionsResponse) SetHeaders(v map[string]*string) *ListWorkflowDefinitionsResponse {
	s.Headers = v
	return s
}

func (s *ListWorkflowDefinitionsResponse) SetStatusCode(v int32) *ListWorkflowDefinitionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWorkflowDefinitionsResponse) SetBody(v *ListWorkflowDefinitionsResponseBody) *ListWorkflowDefinitionsResponse {
	s.Body = v
	return s
}

type ListWorkflowInstancesRequest struct {
	// The data timestamp. The value of this parameter is 00:00:00 of the day before the scheduling time of the instance. The value is a UNIX timestamp. Unit: milliseconds. Example: 1743350400000.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1710239005403
	BizDate *int64 `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	// The IDs of the workflow instances. You can query multiple instances at a time by instance ID.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// The instance name. Fuzzy match is supported.
	//
	// example:
	//
	// WorkflowInstance1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the workflow instance owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The fields used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:
	//
	// 	- TriggerTime (Desc/Asc)
	//
	// 	- StartedTime (Desc/Asc)
	//
	// 	- FinishedTime (Desc/Asc)
	//
	// 	- CreateTime (Desc/Asc)
	//
	// 	- Id (Desc/Asc)
	//
	// Default value: Id Desc.
	//
	// example:
	//
	// Id Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The type of the workflow instance. Valid values:
	//
	// 	- Normal
	//
	// 	- Manual
	//
	// 	- SmokeTest
	//
	// 	- SupplementData
	//
	// 	- ManualWorkflow
	//
	// example:
	//
	// Normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the workflow to which the instance belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s ListWorkflowInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListWorkflowInstancesRequest) SetBizDate(v int64) *ListWorkflowInstancesRequest {
	s.BizDate = &v
	return s
}

func (s *ListWorkflowInstancesRequest) SetIds(v []*int64) *ListWorkflowInstancesRequest {
	s.Ids = v
	return s
}

func (s *ListWorkflowInstancesRequest) SetName(v string) *ListWorkflowInstancesRequest {
	s.Name = &v
	return s
}

func (s *ListWorkflowInstancesRequest) SetOwner(v string) *ListWorkflowInstancesRequest {
	s.Owner = &v
	return s
}

func (s *ListWorkflowInstancesRequest) SetPageNumber(v int32) *ListWorkflowInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListWorkflowInstancesRequest) SetPageSize(v int32) *ListWorkflowInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *ListWorkflowInstancesRequest) SetProjectId(v int64) *ListWorkflowInstancesRequest {
	s.ProjectId = &v
	return s
}

func (s *ListWorkflowInstancesRequest) SetSortBy(v string) *ListWorkflowInstancesRequest {
	s.SortBy = &v
	return s
}

func (s *ListWorkflowInstancesRequest) SetType(v string) *ListWorkflowInstancesRequest {
	s.Type = &v
	return s
}

func (s *ListWorkflowInstancesRequest) SetWorkflowId(v int64) *ListWorkflowInstancesRequest {
	s.WorkflowId = &v
	return s
}

type ListWorkflowInstancesShrinkRequest struct {
	// The data timestamp. The value of this parameter is 00:00:00 of the day before the scheduling time of the instance. The value is a UNIX timestamp. Unit: milliseconds. Example: 1743350400000.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1710239005403
	BizDate *int64 `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	// The IDs of the workflow instances. You can query multiple instances at a time by instance ID.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	// The instance name. Fuzzy match is supported.
	//
	// example:
	//
	// WorkflowInstance1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the workflow instance owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The fields used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:
	//
	// 	- TriggerTime (Desc/Asc)
	//
	// 	- StartedTime (Desc/Asc)
	//
	// 	- FinishedTime (Desc/Asc)
	//
	// 	- CreateTime (Desc/Asc)
	//
	// 	- Id (Desc/Asc)
	//
	// Default value: Id Desc.
	//
	// example:
	//
	// Id Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The type of the workflow instance. Valid values:
	//
	// 	- Normal
	//
	// 	- Manual
	//
	// 	- SmokeTest
	//
	// 	- SupplementData
	//
	// 	- ManualWorkflow
	//
	// example:
	//
	// Normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the workflow to which the instance belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s ListWorkflowInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListWorkflowInstancesShrinkRequest) SetBizDate(v int64) *ListWorkflowInstancesShrinkRequest {
	s.BizDate = &v
	return s
}

func (s *ListWorkflowInstancesShrinkRequest) SetIdsShrink(v string) *ListWorkflowInstancesShrinkRequest {
	s.IdsShrink = &v
	return s
}

func (s *ListWorkflowInstancesShrinkRequest) SetName(v string) *ListWorkflowInstancesShrinkRequest {
	s.Name = &v
	return s
}

func (s *ListWorkflowInstancesShrinkRequest) SetOwner(v string) *ListWorkflowInstancesShrinkRequest {
	s.Owner = &v
	return s
}

func (s *ListWorkflowInstancesShrinkRequest) SetPageNumber(v int32) *ListWorkflowInstancesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListWorkflowInstancesShrinkRequest) SetPageSize(v int32) *ListWorkflowInstancesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListWorkflowInstancesShrinkRequest) SetProjectId(v int64) *ListWorkflowInstancesShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *ListWorkflowInstancesShrinkRequest) SetSortBy(v string) *ListWorkflowInstancesShrinkRequest {
	s.SortBy = &v
	return s
}

func (s *ListWorkflowInstancesShrinkRequest) SetType(v string) *ListWorkflowInstancesShrinkRequest {
	s.Type = &v
	return s
}

func (s *ListWorkflowInstancesShrinkRequest) SetWorkflowId(v int64) *ListWorkflowInstancesShrinkRequest {
	s.WorkflowId = &v
	return s
}

type ListWorkflowInstancesResponseBody struct {
	// The pagination information.
	PagingInfo *ListWorkflowInstancesResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListWorkflowInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListWorkflowInstancesResponseBody) SetPagingInfo(v *ListWorkflowInstancesResponseBodyPagingInfo) *ListWorkflowInstancesResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListWorkflowInstancesResponseBody) SetRequestId(v string) *ListWorkflowInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ListWorkflowInstancesResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The workflow instances.
	WorkflowInstances []*ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances `json:"WorkflowInstances,omitempty" xml:"WorkflowInstances,omitempty" type:"Repeated"`
}

func (s ListWorkflowInstancesResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowInstancesResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListWorkflowInstancesResponseBodyPagingInfo) SetPageNumber(v int32) *ListWorkflowInstancesResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfo) SetPageSize(v int32) *ListWorkflowInstancesResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfo) SetTotalCount(v int32) *ListWorkflowInstancesResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfo) SetWorkflowInstances(v []*ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) *ListWorkflowInstancesResponseBodyPagingInfo {
	s.WorkflowInstances = v
	return s
}

type ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances struct {
	// example:
	//
	// 1710239005403
	BizDate *int64 `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 100
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The time when the instance finished running.
	//
	// example:
	//
	// 1710239005403
	FinishedTime *int64 `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	// The workflow instance ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 100
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The name of the workflow instance.
	//
	// example:
	//
	// WorkflowInstance1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The time when the instance started to run.
	//
	// example:
	//
	// 1710239005403
	StartedTime *int64 `json:"StartedTime,omitempty" xml:"StartedTime,omitempty"`
	// The status of the workflow instance. Valid values:
	//
	// 	- NotRun: The instance is not run.
	//
	// 	- Running: The instance is running.
	//
	// 	- WaitTime: The instance is waiting for the scheduling time to arrive.
	//
	// 	- CheckingCondition: Branch conditions are being checked for the instance.
	//
	// 	- WaitResource: The instance is waiting for resources.
	//
	// 	- Failure: The instance fails to be run.
	//
	// 	- Success: The instance is successfully run.
	//
	// 	- Checking: Data quality is being checked for the instance.
	//
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// Normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the workflow to which the instance belongs.
	//
	// example:
	//
	// 1234
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) GoString() string {
	return s.String()
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetBizDate(v int64) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.BizDate = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetCreateTime(v int64) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.CreateTime = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetCreateUser(v string) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.CreateUser = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetEnvType(v string) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.EnvType = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetFinishedTime(v int64) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.FinishedTime = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetId(v int64) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.Id = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetModifyTime(v int64) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.ModifyTime = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetModifyUser(v string) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.ModifyUser = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetName(v string) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.Name = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetProjectId(v int64) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.ProjectId = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetStartedTime(v int64) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.StartedTime = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetStatus(v string) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.Status = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetType(v string) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.Type = &v
	return s
}

func (s *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances) SetWorkflowId(v int64) *ListWorkflowInstancesResponseBodyPagingInfoWorkflowInstances {
	s.WorkflowId = &v
	return s
}

type ListWorkflowInstancesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWorkflowInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWorkflowInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListWorkflowInstancesResponse) SetHeaders(v map[string]*string) *ListWorkflowInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListWorkflowInstancesResponse) SetStatusCode(v int32) *ListWorkflowInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWorkflowInstancesResponse) SetBody(v *ListWorkflowInstancesResponseBody) *ListWorkflowInstancesResponse {
	s.Body = v
	return s
}

type ListWorkflowsRequest struct {
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The IDs of the workflows. You can query multiple workflows at a time by workflow ID.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// The name of the workflow. Fuzzy match is supported.
	//
	// example:
	//
	// Workflow1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the workflow owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The field used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:
	//
	// 	- ModifyTime (Desc/Asc)
	//
	// 	- CreateTime (Desc/Asc)
	//
	// 	- Id (Desc/Asc)
	//
	// Default value: Id Desc.
	//
	// example:
	//
	// Id Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler
	//
	// 	- Manual
	//
	// example:
	//
	// Scheduler
	TriggerType *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
}

func (s ListWorkflowsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowsRequest) GoString() string {
	return s.String()
}

func (s *ListWorkflowsRequest) SetEnvType(v string) *ListWorkflowsRequest {
	s.EnvType = &v
	return s
}

func (s *ListWorkflowsRequest) SetIds(v []*int64) *ListWorkflowsRequest {
	s.Ids = v
	return s
}

func (s *ListWorkflowsRequest) SetName(v string) *ListWorkflowsRequest {
	s.Name = &v
	return s
}

func (s *ListWorkflowsRequest) SetOwner(v string) *ListWorkflowsRequest {
	s.Owner = &v
	return s
}

func (s *ListWorkflowsRequest) SetPageNumber(v int32) *ListWorkflowsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListWorkflowsRequest) SetPageSize(v int32) *ListWorkflowsRequest {
	s.PageSize = &v
	return s
}

func (s *ListWorkflowsRequest) SetProjectId(v int64) *ListWorkflowsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListWorkflowsRequest) SetSortBy(v string) *ListWorkflowsRequest {
	s.SortBy = &v
	return s
}

func (s *ListWorkflowsRequest) SetTriggerType(v string) *ListWorkflowsRequest {
	s.TriggerType = &v
	return s
}

type ListWorkflowsShrinkRequest struct {
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The IDs of the workflows. You can query multiple workflows at a time by workflow ID.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	// The name of the workflow. Fuzzy match is supported.
	//
	// example:
	//
	// Workflow1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the workflow owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The field used for sorting. Fields such as TriggerTime and StartedTime are supported. The value of this parameter is in the Sort field + Sort by (Desc/Asc) format. By default, results are sorted in ascending order. Valid values:
	//
	// 	- ModifyTime (Desc/Asc)
	//
	// 	- CreateTime (Desc/Asc)
	//
	// 	- Id (Desc/Asc)
	//
	// Default value: Id Desc.
	//
	// example:
	//
	// Id Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler
	//
	// 	- Manual
	//
	// example:
	//
	// Scheduler
	TriggerType *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
}

func (s ListWorkflowsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListWorkflowsShrinkRequest) SetEnvType(v string) *ListWorkflowsShrinkRequest {
	s.EnvType = &v
	return s
}

func (s *ListWorkflowsShrinkRequest) SetIdsShrink(v string) *ListWorkflowsShrinkRequest {
	s.IdsShrink = &v
	return s
}

func (s *ListWorkflowsShrinkRequest) SetName(v string) *ListWorkflowsShrinkRequest {
	s.Name = &v
	return s
}

func (s *ListWorkflowsShrinkRequest) SetOwner(v string) *ListWorkflowsShrinkRequest {
	s.Owner = &v
	return s
}

func (s *ListWorkflowsShrinkRequest) SetPageNumber(v int32) *ListWorkflowsShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *ListWorkflowsShrinkRequest) SetPageSize(v int32) *ListWorkflowsShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListWorkflowsShrinkRequest) SetProjectId(v int64) *ListWorkflowsShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *ListWorkflowsShrinkRequest) SetSortBy(v string) *ListWorkflowsShrinkRequest {
	s.SortBy = &v
	return s
}

func (s *ListWorkflowsShrinkRequest) SetTriggerType(v string) *ListWorkflowsShrinkRequest {
	s.TriggerType = &v
	return s
}

type ListWorkflowsResponseBody struct {
	// The pagination information.
	PagingInfo *ListWorkflowsResponseBodyPagingInfo `json:"PagingInfo,omitempty" xml:"PagingInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListWorkflowsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowsResponseBody) GoString() string {
	return s.String()
}

func (s *ListWorkflowsResponseBody) SetPagingInfo(v *ListWorkflowsResponseBodyPagingInfo) *ListWorkflowsResponseBody {
	s.PagingInfo = v
	return s
}

func (s *ListWorkflowsResponseBody) SetRequestId(v string) *ListWorkflowsResponseBody {
	s.RequestId = &v
	return s
}

type ListWorkflowsResponseBodyPagingInfo struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The workflows.
	Workflows []*ListWorkflowsResponseBodyPagingInfoWorkflows `json:"Workflows,omitempty" xml:"Workflows,omitempty" type:"Repeated"`
}

func (s ListWorkflowsResponseBodyPagingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowsResponseBodyPagingInfo) GoString() string {
	return s.String()
}

func (s *ListWorkflowsResponseBodyPagingInfo) SetPageNumber(v int32) *ListWorkflowsResponseBodyPagingInfo {
	s.PageNumber = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfo) SetPageSize(v int32) *ListWorkflowsResponseBodyPagingInfo {
	s.PageSize = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfo) SetTotalCount(v int32) *ListWorkflowsResponseBodyPagingInfo {
	s.TotalCount = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfo) SetWorkflows(v []*ListWorkflowsResponseBodyPagingInfoWorkflows) *ListWorkflowsResponseBodyPagingInfo {
	s.Workflows = v
	return s
}

type ListWorkflowsResponseBodyPagingInfoWorkflows struct {
	// The unique code of the client. This parameter is used to create a workflow asynchronously and implement the idempotence of the workflow. If you do not specify this parameter when you create the workflow, the system automatically generates a unique code. The unique code is uniquely associated with the workflow ID. If you specify this parameter when you update or delete the workflow, the value of this parameter must be the unique code that is used to create the workflow.
	//
	// example:
	//
	// Workflow_0bc5213917368545132902xxxxxxxx
	ClientUniqueCode *string `json:"ClientUniqueCode,omitempty" xml:"ClientUniqueCode,omitempty"`
	// The creation time.
	//
	// example:
	//
	// 1710239005403
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The account ID of the creator.
	//
	// example:
	//
	// 1000
	CreateUser *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	// The description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The workflow ID.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The modification time.
	//
	// example:
	//
	// 1710239005403
	ModifyTime *int64 `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The account ID of the modifier.
	//
	// example:
	//
	// 1000
	ModifyUser *string `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty"`
	// The name.
	//
	// example:
	//
	// Workflow1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The account ID of the owner.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The parameters.
	//
	// example:
	//
	// para1=$bizdate para2=$[yyyymmdd]
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// 100
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The trigger method.
	Trigger *ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s ListWorkflowsResponseBodyPagingInfoWorkflows) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowsResponseBodyPagingInfoWorkflows) GoString() string {
	return s.String()
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflows) SetClientUniqueCode(v string) *ListWorkflowsResponseBodyPagingInfoWorkflows {
	s.ClientUniqueCode = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflows) SetCreateTime(v int64) *ListWorkflowsResponseBodyPagingInfoWorkflows {
	s.CreateTime = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflows) SetCreateUser(v string) *ListWorkflowsResponseBodyPagingInfoWorkflows {
	s.CreateUser = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflows) SetDescription(v string) *ListWorkflowsResponseBodyPagingInfoWorkflows {
	s.Description = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflows) SetEnvType(v string) *ListWorkflowsResponseBodyPagingInfoWorkflows {
	s.EnvType = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflows) SetId(v int64) *ListWorkflowsResponseBodyPagingInfoWorkflows {
	s.Id = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflows) SetModifyTime(v int64) *ListWorkflowsResponseBodyPagingInfoWorkflows {
	s.ModifyTime = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflows) SetModifyUser(v string) *ListWorkflowsResponseBodyPagingInfoWorkflows {
	s.ModifyUser = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflows) SetName(v string) *ListWorkflowsResponseBodyPagingInfoWorkflows {
	s.Name = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflows) SetOwner(v string) *ListWorkflowsResponseBodyPagingInfoWorkflows {
	s.Owner = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflows) SetParameters(v string) *ListWorkflowsResponseBodyPagingInfoWorkflows {
	s.Parameters = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflows) SetProjectId(v int64) *ListWorkflowsResponseBodyPagingInfoWorkflows {
	s.ProjectId = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflows) SetTrigger(v *ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger) *ListWorkflowsResponseBodyPagingInfoWorkflows {
	s.Trigger = v
	return s
}

type ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger struct {
	// The CRON expression. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the time range during which the workflow is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 9999-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The running mode of the workflow after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The start time of the time range during which the workflow is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger) GoString() string {
	return s.String()
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger) SetCron(v string) *ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger {
	s.Cron = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger) SetEndTime(v string) *ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger {
	s.EndTime = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger) SetRecurrence(v string) *ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger {
	s.Recurrence = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger) SetStartTime(v string) *ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger {
	s.StartTime = &v
	return s
}

func (s *ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger) SetType(v string) *ListWorkflowsResponseBodyPagingInfoWorkflowsTrigger {
	s.Type = &v
	return s
}

type ListWorkflowsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWorkflowsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWorkflowsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkflowsResponse) GoString() string {
	return s.String()
}

func (s *ListWorkflowsResponse) SetHeaders(v map[string]*string) *ListWorkflowsResponse {
	s.Headers = v
	return s
}

func (s *ListWorkflowsResponse) SetStatusCode(v int32) *ListWorkflowsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWorkflowsResponse) SetBody(v *ListWorkflowsResponseBody) *ListWorkflowsResponse {
	s.Body = v
	return s
}

type MoveFunctionRequest struct {
	// The ID of the UDF.
	//
	// This parameter is required.
	//
	// example:
	//
	// 543217824470354XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The path to which you want to move the UDF. You do not need to specify a UDF name in the path.
	//
	// For example, if you want to move the test UDF to root/demo/test, you must set this parameter to root/demo.
	//
	// This parameter is required.
	//
	// example:
	//
	// root/demo
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.
	//
	// This parameter indicates the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s MoveFunctionRequest) String() string {
	return tea.Prettify(s)
}

func (s MoveFunctionRequest) GoString() string {
	return s.String()
}

func (s *MoveFunctionRequest) SetId(v int64) *MoveFunctionRequest {
	s.Id = &v
	return s
}

func (s *MoveFunctionRequest) SetPath(v string) *MoveFunctionRequest {
	s.Path = &v
	return s
}

func (s *MoveFunctionRequest) SetProjectId(v int64) *MoveFunctionRequest {
	s.ProjectId = &v
	return s
}

type MoveFunctionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 48C0E2F0-52BA-5888-BDFA-28F1B9AFXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s MoveFunctionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MoveFunctionResponseBody) GoString() string {
	return s.String()
}

func (s *MoveFunctionResponseBody) SetRequestId(v string) *MoveFunctionResponseBody {
	s.RequestId = &v
	return s
}

func (s *MoveFunctionResponseBody) SetSuccess(v bool) *MoveFunctionResponseBody {
	s.Success = &v
	return s
}

type MoveFunctionResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MoveFunctionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MoveFunctionResponse) String() string {
	return tea.Prettify(s)
}

func (s MoveFunctionResponse) GoString() string {
	return s.String()
}

func (s *MoveFunctionResponse) SetHeaders(v map[string]*string) *MoveFunctionResponse {
	s.Headers = v
	return s
}

func (s *MoveFunctionResponse) SetStatusCode(v int32) *MoveFunctionResponse {
	s.StatusCode = &v
	return s
}

func (s *MoveFunctionResponse) SetBody(v *MoveFunctionResponseBody) *MoveFunctionResponse {
	s.Body = v
	return s
}

type MoveNodeRequest struct {
	// The ID of the node.
	//
	// This parameter is required.
	//
	// example:
	//
	// 652567824470354XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The path to which you want to move the node. You do not need to specify a node name in the path.
	//
	// For example, if you want to move the test node to root/demo/test, you must set this parameter to root/demo.
	//
	// This parameter is required.
	//
	// example:
	//
	// root/demo
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s MoveNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s MoveNodeRequest) GoString() string {
	return s.String()
}

func (s *MoveNodeRequest) SetId(v int64) *MoveNodeRequest {
	s.Id = &v
	return s
}

func (s *MoveNodeRequest) SetPath(v string) *MoveNodeRequest {
	s.Path = &v
	return s
}

func (s *MoveNodeRequest) SetProjectId(v int64) *MoveNodeRequest {
	s.ProjectId = &v
	return s
}

type MoveNodeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// C99E2BE6-9DEA-5C2E-8F51-1DDCFEADXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s MoveNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MoveNodeResponseBody) GoString() string {
	return s.String()
}

func (s *MoveNodeResponseBody) SetRequestId(v string) *MoveNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *MoveNodeResponseBody) SetSuccess(v bool) *MoveNodeResponseBody {
	s.Success = &v
	return s
}

type MoveNodeResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MoveNodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MoveNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s MoveNodeResponse) GoString() string {
	return s.String()
}

func (s *MoveNodeResponse) SetHeaders(v map[string]*string) *MoveNodeResponse {
	s.Headers = v
	return s
}

func (s *MoveNodeResponse) SetStatusCode(v int32) *MoveNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *MoveNodeResponse) SetBody(v *MoveNodeResponseBody) *MoveNodeResponse {
	s.Body = v
	return s
}

type MoveResourceRequest struct {
	// The ID of the file resource.
	//
	// This parameter is required.
	//
	// example:
	//
	// 652567824470354XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The path to which you want to move the file resource. You do not need to specify a file resource name in the path.
	//
	// For example, if you want to move the test file resource to root/demo/test, you must set this parameter to root/demo.
	//
	// This parameter is required.
	//
	// example:
	//
	// root/demo
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID.
	//
	// You can use this parameter to specify the DataWorks workspace on which you want to perform the API operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s MoveResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s MoveResourceRequest) GoString() string {
	return s.String()
}

func (s *MoveResourceRequest) SetId(v int64) *MoveResourceRequest {
	s.Id = &v
	return s
}

func (s *MoveResourceRequest) SetPath(v string) *MoveResourceRequest {
	s.Path = &v
	return s
}

func (s *MoveResourceRequest) SetProjectId(v int64) *MoveResourceRequest {
	s.ProjectId = &v
	return s
}

type MoveResourceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// F332BED4-DD73-5972-A9C2-642BA6CFXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s MoveResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MoveResourceResponseBody) GoString() string {
	return s.String()
}

func (s *MoveResourceResponseBody) SetRequestId(v string) *MoveResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *MoveResourceResponseBody) SetSuccess(v bool) *MoveResourceResponseBody {
	s.Success = &v
	return s
}

type MoveResourceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MoveResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MoveResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s MoveResourceResponse) GoString() string {
	return s.String()
}

func (s *MoveResourceResponse) SetHeaders(v map[string]*string) *MoveResourceResponse {
	s.Headers = v
	return s
}

func (s *MoveResourceResponse) SetStatusCode(v int32) *MoveResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *MoveResourceResponse) SetBody(v *MoveResourceResponseBody) *MoveResourceResponse {
	s.Body = v
	return s
}

type MoveWorkflowDefinitionRequest struct {
	// The ID of the workflow.
	//
	// This parameter is required.
	//
	// example:
	//
	// 543217824470354XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The path to which you want to move the workflow. You do not need to specify a workflow name in the path.
	//
	// For example, if you want to move the test workflow to root/demo/test, you must set this parameter to root/demo.
	//
	// This parameter is required.
	//
	// example:
	//
	// root/demo
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the ID. This parameter indicates the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10001
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s MoveWorkflowDefinitionRequest) String() string {
	return tea.Prettify(s)
}

func (s MoveWorkflowDefinitionRequest) GoString() string {
	return s.String()
}

func (s *MoveWorkflowDefinitionRequest) SetId(v int64) *MoveWorkflowDefinitionRequest {
	s.Id = &v
	return s
}

func (s *MoveWorkflowDefinitionRequest) SetPath(v string) *MoveWorkflowDefinitionRequest {
	s.Path = &v
	return s
}

func (s *MoveWorkflowDefinitionRequest) SetProjectId(v int64) *MoveWorkflowDefinitionRequest {
	s.ProjectId = &v
	return s
}

type MoveWorkflowDefinitionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 05ADAF4F-7709-5FB1-B606-3513483FXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s MoveWorkflowDefinitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MoveWorkflowDefinitionResponseBody) GoString() string {
	return s.String()
}

func (s *MoveWorkflowDefinitionResponseBody) SetRequestId(v string) *MoveWorkflowDefinitionResponseBody {
	s.RequestId = &v
	return s
}

func (s *MoveWorkflowDefinitionResponseBody) SetSuccess(v bool) *MoveWorkflowDefinitionResponseBody {
	s.Success = &v
	return s
}

type MoveWorkflowDefinitionResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MoveWorkflowDefinitionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MoveWorkflowDefinitionResponse) String() string {
	return tea.Prettify(s)
}

func (s MoveWorkflowDefinitionResponse) GoString() string {
	return s.String()
}

func (s *MoveWorkflowDefinitionResponse) SetHeaders(v map[string]*string) *MoveWorkflowDefinitionResponse {
	s.Headers = v
	return s
}

func (s *MoveWorkflowDefinitionResponse) SetStatusCode(v int32) *MoveWorkflowDefinitionResponse {
	s.StatusCode = &v
	return s
}

func (s *MoveWorkflowDefinitionResponse) SetBody(v *MoveWorkflowDefinitionResponseBody) *MoveWorkflowDefinitionResponse {
	s.Body = v
	return s
}

type RemoveEntityFromMetaCollectionRequest struct {
	// example:
	//
	// dlf-table:123456789:test_catalog:test_database::test_table
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// category.123
	MetaCollectionId *string `json:"MetaCollectionId,omitempty" xml:"MetaCollectionId,omitempty"`
}

func (s RemoveEntityFromMetaCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveEntityFromMetaCollectionRequest) GoString() string {
	return s.String()
}

func (s *RemoveEntityFromMetaCollectionRequest) SetId(v string) *RemoveEntityFromMetaCollectionRequest {
	s.Id = &v
	return s
}

func (s *RemoveEntityFromMetaCollectionRequest) SetMetaCollectionId(v string) *RemoveEntityFromMetaCollectionRequest {
	s.MetaCollectionId = &v
	return s
}

type RemoveEntityFromMetaCollectionResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// 6D6CD444-DFA0-5180-9763-4A8730F2B382
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveEntityFromMetaCollectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveEntityFromMetaCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveEntityFromMetaCollectionResponseBody) SetRequestId(v string) *RemoveEntityFromMetaCollectionResponseBody {
	s.RequestId = &v
	return s
}

type RemoveEntityFromMetaCollectionResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveEntityFromMetaCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveEntityFromMetaCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveEntityFromMetaCollectionResponse) GoString() string {
	return s.String()
}

func (s *RemoveEntityFromMetaCollectionResponse) SetHeaders(v map[string]*string) *RemoveEntityFromMetaCollectionResponse {
	s.Headers = v
	return s
}

func (s *RemoveEntityFromMetaCollectionResponse) SetStatusCode(v int32) *RemoveEntityFromMetaCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveEntityFromMetaCollectionResponse) SetBody(v *RemoveEntityFromMetaCollectionResponseBody) *RemoveEntityFromMetaCollectionResponse {
	s.Body = v
	return s
}

type RemoveTaskInstanceDependenciesRequest struct {
	// The remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The IDs of ancestor instances of the instance
	UpstreamTaskInstanceIds []*int64 `json:"UpstreamTaskInstanceIds,omitempty" xml:"UpstreamTaskInstanceIds,omitempty" type:"Repeated"`
}

func (s RemoveTaskInstanceDependenciesRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveTaskInstanceDependenciesRequest) GoString() string {
	return s.String()
}

func (s *RemoveTaskInstanceDependenciesRequest) SetComment(v string) *RemoveTaskInstanceDependenciesRequest {
	s.Comment = &v
	return s
}

func (s *RemoveTaskInstanceDependenciesRequest) SetId(v int64) *RemoveTaskInstanceDependenciesRequest {
	s.Id = &v
	return s
}

func (s *RemoveTaskInstanceDependenciesRequest) SetUpstreamTaskInstanceIds(v []*int64) *RemoveTaskInstanceDependenciesRequest {
	s.UpstreamTaskInstanceIds = v
	return s
}

type RemoveTaskInstanceDependenciesShrinkRequest struct {
	// The remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The IDs of ancestor instances of the instance
	UpstreamTaskInstanceIdsShrink *string `json:"UpstreamTaskInstanceIds,omitempty" xml:"UpstreamTaskInstanceIds,omitempty"`
}

func (s RemoveTaskInstanceDependenciesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveTaskInstanceDependenciesShrinkRequest) GoString() string {
	return s.String()
}

func (s *RemoveTaskInstanceDependenciesShrinkRequest) SetComment(v string) *RemoveTaskInstanceDependenciesShrinkRequest {
	s.Comment = &v
	return s
}

func (s *RemoveTaskInstanceDependenciesShrinkRequest) SetId(v int64) *RemoveTaskInstanceDependenciesShrinkRequest {
	s.Id = &v
	return s
}

func (s *RemoveTaskInstanceDependenciesShrinkRequest) SetUpstreamTaskInstanceIdsShrink(v string) *RemoveTaskInstanceDependenciesShrinkRequest {
	s.UpstreamTaskInstanceIdsShrink = &v
	return s
}

type RemoveTaskInstanceDependenciesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RemoveTaskInstanceDependenciesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveTaskInstanceDependenciesResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveTaskInstanceDependenciesResponseBody) SetRequestId(v string) *RemoveTaskInstanceDependenciesResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveTaskInstanceDependenciesResponseBody) SetSuccess(v bool) *RemoveTaskInstanceDependenciesResponseBody {
	s.Success = &v
	return s
}

type RemoveTaskInstanceDependenciesResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveTaskInstanceDependenciesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveTaskInstanceDependenciesResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveTaskInstanceDependenciesResponse) GoString() string {
	return s.String()
}

func (s *RemoveTaskInstanceDependenciesResponse) SetHeaders(v map[string]*string) *RemoveTaskInstanceDependenciesResponse {
	s.Headers = v
	return s
}

func (s *RemoveTaskInstanceDependenciesResponse) SetStatusCode(v int32) *RemoveTaskInstanceDependenciesResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveTaskInstanceDependenciesResponse) SetBody(v *RemoveTaskInstanceDependenciesResponseBody) *RemoveTaskInstanceDependenciesResponse {
	s.Body = v
	return s
}

type RenameFunctionRequest struct {
	// The ID of the UDF.
	//
	// This parameter is required.
	//
	// example:
	//
	// 543217824470354XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The new name.
	//
	// This parameter is required.
	//
	// example:
	//
	// Rename
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10002
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s RenameFunctionRequest) String() string {
	return tea.Prettify(s)
}

func (s RenameFunctionRequest) GoString() string {
	return s.String()
}

func (s *RenameFunctionRequest) SetId(v int64) *RenameFunctionRequest {
	s.Id = &v
	return s
}

func (s *RenameFunctionRequest) SetName(v string) *RenameFunctionRequest {
	s.Name = &v
	return s
}

func (s *RenameFunctionRequest) SetProjectId(v int64) *RenameFunctionRequest {
	s.ProjectId = &v
	return s
}

type RenameFunctionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1ED4C97F-BA2A-57C5-BA7C-8853627EXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RenameFunctionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenameFunctionResponseBody) GoString() string {
	return s.String()
}

func (s *RenameFunctionResponseBody) SetRequestId(v string) *RenameFunctionResponseBody {
	s.RequestId = &v
	return s
}

func (s *RenameFunctionResponseBody) SetSuccess(v string) *RenameFunctionResponseBody {
	s.Success = &v
	return s
}

type RenameFunctionResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenameFunctionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenameFunctionResponse) String() string {
	return tea.Prettify(s)
}

func (s RenameFunctionResponse) GoString() string {
	return s.String()
}

func (s *RenameFunctionResponse) SetHeaders(v map[string]*string) *RenameFunctionResponse {
	s.Headers = v
	return s
}

func (s *RenameFunctionResponse) SetStatusCode(v int32) *RenameFunctionResponse {
	s.StatusCode = &v
	return s
}

func (s *RenameFunctionResponse) SetBody(v *RenameFunctionResponseBody) *RenameFunctionResponse {
	s.Body = v
	return s
}

type RenameNodeRequest struct {
	// The ID of the node.
	//
	// This parameter is required.
	//
	// example:
	//
	// 652567824470354XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The new name.
	//
	// This parameter is required.
	//
	// example:
	//
	// Rename
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s RenameNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s RenameNodeRequest) GoString() string {
	return s.String()
}

func (s *RenameNodeRequest) SetId(v int64) *RenameNodeRequest {
	s.Id = &v
	return s
}

func (s *RenameNodeRequest) SetName(v string) *RenameNodeRequest {
	s.Name = &v
	return s
}

func (s *RenameNodeRequest) SetProjectId(v int64) *RenameNodeRequest {
	s.ProjectId = &v
	return s
}

type RenameNodeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 4CDF7B72-020B-542A-8465-21CFFA81XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RenameNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenameNodeResponseBody) GoString() string {
	return s.String()
}

func (s *RenameNodeResponseBody) SetRequestId(v string) *RenameNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *RenameNodeResponseBody) SetSuccess(v bool) *RenameNodeResponseBody {
	s.Success = &v
	return s
}

type RenameNodeResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenameNodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenameNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s RenameNodeResponse) GoString() string {
	return s.String()
}

func (s *RenameNodeResponse) SetHeaders(v map[string]*string) *RenameNodeResponse {
	s.Headers = v
	return s
}

func (s *RenameNodeResponse) SetStatusCode(v int32) *RenameNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *RenameNodeResponse) SetBody(v *RenameNodeResponseBody) *RenameNodeResponse {
	s.Body = v
	return s
}

type RenameResourceRequest struct {
	// The ID of the file resource.
	//
	// This parameter is required.
	//
	// example:
	//
	// 543217824470354XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The new name.
	//
	// This parameter is required.
	//
	// example:
	//
	// Rename
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s RenameResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenameResourceRequest) GoString() string {
	return s.String()
}

func (s *RenameResourceRequest) SetId(v int64) *RenameResourceRequest {
	s.Id = &v
	return s
}

func (s *RenameResourceRequest) SetName(v string) *RenameResourceRequest {
	s.Name = &v
	return s
}

func (s *RenameResourceRequest) SetProjectId(v int64) *RenameResourceRequest {
	s.ProjectId = &v
	return s
}

type RenameResourceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 4CDF7B72-020B-542A-8465-21CFFA8XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RenameResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenameResourceResponseBody) GoString() string {
	return s.String()
}

func (s *RenameResourceResponseBody) SetRequestId(v string) *RenameResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RenameResourceResponseBody) SetSuccess(v bool) *RenameResourceResponseBody {
	s.Success = &v
	return s
}

type RenameResourceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenameResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenameResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenameResourceResponse) GoString() string {
	return s.String()
}

func (s *RenameResourceResponse) SetHeaders(v map[string]*string) *RenameResourceResponse {
	s.Headers = v
	return s
}

func (s *RenameResourceResponse) SetStatusCode(v int32) *RenameResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *RenameResourceResponse) SetBody(v *RenameResourceResponseBody) *RenameResourceResponse {
	s.Body = v
	return s
}

type RenameWorkflowDefinitionRequest struct {
	// The ID of the workflow.
	//
	// This parameter is required.
	//
	// example:
	//
	// 463497880880954XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The new name.
	//
	// This parameter is required.
	//
	// example:
	//
	// Rename
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID. You must configure this parameter to specify the DataWorks workspace to which the API operation is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s RenameWorkflowDefinitionRequest) String() string {
	return tea.Prettify(s)
}

func (s RenameWorkflowDefinitionRequest) GoString() string {
	return s.String()
}

func (s *RenameWorkflowDefinitionRequest) SetId(v int64) *RenameWorkflowDefinitionRequest {
	s.Id = &v
	return s
}

func (s *RenameWorkflowDefinitionRequest) SetName(v string) *RenameWorkflowDefinitionRequest {
	s.Name = &v
	return s
}

func (s *RenameWorkflowDefinitionRequest) SetProjectId(v int64) *RenameWorkflowDefinitionRequest {
	s.ProjectId = &v
	return s
}

type RenameWorkflowDefinitionResponseBody struct {
	// The request ID. You can troubleshoot issues based on the ID.
	//
	// example:
	//
	// 975BD43D-C421-595C-A29C-565A8AD5XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RenameWorkflowDefinitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenameWorkflowDefinitionResponseBody) GoString() string {
	return s.String()
}

func (s *RenameWorkflowDefinitionResponseBody) SetRequestId(v string) *RenameWorkflowDefinitionResponseBody {
	s.RequestId = &v
	return s
}

func (s *RenameWorkflowDefinitionResponseBody) SetSuccess(v bool) *RenameWorkflowDefinitionResponseBody {
	s.Success = &v
	return s
}

type RenameWorkflowDefinitionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenameWorkflowDefinitionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenameWorkflowDefinitionResponse) String() string {
	return tea.Prettify(s)
}

func (s RenameWorkflowDefinitionResponse) GoString() string {
	return s.String()
}

func (s *RenameWorkflowDefinitionResponse) SetHeaders(v map[string]*string) *RenameWorkflowDefinitionResponse {
	s.Headers = v
	return s
}

func (s *RenameWorkflowDefinitionResponse) SetStatusCode(v int32) *RenameWorkflowDefinitionResponse {
	s.StatusCode = &v
	return s
}

func (s *RenameWorkflowDefinitionResponse) SetBody(v *RenameWorkflowDefinitionResponseBody) *RenameWorkflowDefinitionResponse {
	s.Body = v
	return s
}

type RerunTaskInstancesRequest struct {
	// Remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID list of the task instance.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
}

func (s RerunTaskInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s RerunTaskInstancesRequest) GoString() string {
	return s.String()
}

func (s *RerunTaskInstancesRequest) SetComment(v string) *RerunTaskInstancesRequest {
	s.Comment = &v
	return s
}

func (s *RerunTaskInstancesRequest) SetIds(v []*int64) *RerunTaskInstancesRequest {
	s.Ids = v
	return s
}

type RerunTaskInstancesShrinkRequest struct {
	// Remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID list of the task instance.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
}

func (s RerunTaskInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RerunTaskInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *RerunTaskInstancesShrinkRequest) SetComment(v string) *RerunTaskInstancesShrinkRequest {
	s.Comment = &v
	return s
}

func (s *RerunTaskInstancesShrinkRequest) SetIdsShrink(v string) *RerunTaskInstancesShrinkRequest {
	s.IdsShrink = &v
	return s
}

type RerunTaskInstancesResponseBody struct {
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.
	SuccessInfo map[string]*SuccessInfoValue `json:"SuccessInfo,omitempty" xml:"SuccessInfo,omitempty"`
}

func (s RerunTaskInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RerunTaskInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *RerunTaskInstancesResponseBody) SetRequestId(v string) *RerunTaskInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *RerunTaskInstancesResponseBody) SetSuccessInfo(v map[string]*SuccessInfoValue) *RerunTaskInstancesResponseBody {
	s.SuccessInfo = v
	return s
}

type RerunTaskInstancesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RerunTaskInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RerunTaskInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s RerunTaskInstancesResponse) GoString() string {
	return s.String()
}

func (s *RerunTaskInstancesResponse) SetHeaders(v map[string]*string) *RerunTaskInstancesResponse {
	s.Headers = v
	return s
}

func (s *RerunTaskInstancesResponse) SetStatusCode(v int32) *RerunTaskInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *RerunTaskInstancesResponse) SetBody(v *RerunTaskInstancesResponseBody) *RerunTaskInstancesResponse {
	s.Body = v
	return s
}

type RerunWorkflowInstancesRequest struct {
	// example:
	//
	// 1710239005403
	Bizdate *int64 `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	// example:
	//
	// 1710239005403
	EndTriggerTime *int64 `json:"EndTriggerTime,omitempty" xml:"EndTriggerTime,omitempty"`
	// example:
	//
	// Prod
	EnvType *string                              `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	Filter  *RerunWorkflowInstancesRequestFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Struct"`
	Ids     []*int64                             `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// 1710239005403
	StartTriggerTime *int64 `json:"StartTriggerTime,omitempty" xml:"StartTriggerTime,omitempty"`
	// example:
	//
	// Failure
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ManualWorkflow
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s RerunWorkflowInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s RerunWorkflowInstancesRequest) GoString() string {
	return s.String()
}

func (s *RerunWorkflowInstancesRequest) SetBizdate(v int64) *RerunWorkflowInstancesRequest {
	s.Bizdate = &v
	return s
}

func (s *RerunWorkflowInstancesRequest) SetEndTriggerTime(v int64) *RerunWorkflowInstancesRequest {
	s.EndTriggerTime = &v
	return s
}

func (s *RerunWorkflowInstancesRequest) SetEnvType(v string) *RerunWorkflowInstancesRequest {
	s.EnvType = &v
	return s
}

func (s *RerunWorkflowInstancesRequest) SetFilter(v *RerunWorkflowInstancesRequestFilter) *RerunWorkflowInstancesRequest {
	s.Filter = v
	return s
}

func (s *RerunWorkflowInstancesRequest) SetIds(v []*int64) *RerunWorkflowInstancesRequest {
	s.Ids = v
	return s
}

func (s *RerunWorkflowInstancesRequest) SetName(v string) *RerunWorkflowInstancesRequest {
	s.Name = &v
	return s
}

func (s *RerunWorkflowInstancesRequest) SetProjectId(v int64) *RerunWorkflowInstancesRequest {
	s.ProjectId = &v
	return s
}

func (s *RerunWorkflowInstancesRequest) SetStartTriggerTime(v int64) *RerunWorkflowInstancesRequest {
	s.StartTriggerTime = &v
	return s
}

func (s *RerunWorkflowInstancesRequest) SetStatus(v string) *RerunWorkflowInstancesRequest {
	s.Status = &v
	return s
}

func (s *RerunWorkflowInstancesRequest) SetType(v string) *RerunWorkflowInstancesRequest {
	s.Type = &v
	return s
}

func (s *RerunWorkflowInstancesRequest) SetWorkflowId(v int64) *RerunWorkflowInstancesRequest {
	s.WorkflowId = &v
	return s
}

type RerunWorkflowInstancesRequestFilter struct {
	// example:
	//
	// false
	RerunDownstreamEnabled *bool     `json:"RerunDownstreamEnabled,omitempty" xml:"RerunDownstreamEnabled,omitempty"`
	TaskIds                []*int64  `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
	TaskInstanceStatuses   []*string `json:"TaskInstanceStatuses,omitempty" xml:"TaskInstanceStatuses,omitempty" type:"Repeated"`
	// example:
	//
	// test
	TaskName  *string   `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskTypes []*string `json:"TaskTypes,omitempty" xml:"TaskTypes,omitempty" type:"Repeated"`
}

func (s RerunWorkflowInstancesRequestFilter) String() string {
	return tea.Prettify(s)
}

func (s RerunWorkflowInstancesRequestFilter) GoString() string {
	return s.String()
}

func (s *RerunWorkflowInstancesRequestFilter) SetRerunDownstreamEnabled(v bool) *RerunWorkflowInstancesRequestFilter {
	s.RerunDownstreamEnabled = &v
	return s
}

func (s *RerunWorkflowInstancesRequestFilter) SetTaskIds(v []*int64) *RerunWorkflowInstancesRequestFilter {
	s.TaskIds = v
	return s
}

func (s *RerunWorkflowInstancesRequestFilter) SetTaskInstanceStatuses(v []*string) *RerunWorkflowInstancesRequestFilter {
	s.TaskInstanceStatuses = v
	return s
}

func (s *RerunWorkflowInstancesRequestFilter) SetTaskName(v string) *RerunWorkflowInstancesRequestFilter {
	s.TaskName = &v
	return s
}

func (s *RerunWorkflowInstancesRequestFilter) SetTaskTypes(v []*string) *RerunWorkflowInstancesRequestFilter {
	s.TaskTypes = v
	return s
}

type RerunWorkflowInstancesShrinkRequest struct {
	// example:
	//
	// 1710239005403
	Bizdate *int64 `json:"Bizdate,omitempty" xml:"Bizdate,omitempty"`
	// example:
	//
	// 1710239005403
	EndTriggerTime *int64 `json:"EndTriggerTime,omitempty" xml:"EndTriggerTime,omitempty"`
	// example:
	//
	// Prod
	EnvType      *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	FilterShrink *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	IdsShrink    *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// 1710239005403
	StartTriggerTime *int64 `json:"StartTriggerTime,omitempty" xml:"StartTriggerTime,omitempty"`
	// example:
	//
	// Failure
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ManualWorkflow
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123
	WorkflowId *int64 `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s RerunWorkflowInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RerunWorkflowInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *RerunWorkflowInstancesShrinkRequest) SetBizdate(v int64) *RerunWorkflowInstancesShrinkRequest {
	s.Bizdate = &v
	return s
}

func (s *RerunWorkflowInstancesShrinkRequest) SetEndTriggerTime(v int64) *RerunWorkflowInstancesShrinkRequest {
	s.EndTriggerTime = &v
	return s
}

func (s *RerunWorkflowInstancesShrinkRequest) SetEnvType(v string) *RerunWorkflowInstancesShrinkRequest {
	s.EnvType = &v
	return s
}

func (s *RerunWorkflowInstancesShrinkRequest) SetFilterShrink(v string) *RerunWorkflowInstancesShrinkRequest {
	s.FilterShrink = &v
	return s
}

func (s *RerunWorkflowInstancesShrinkRequest) SetIdsShrink(v string) *RerunWorkflowInstancesShrinkRequest {
	s.IdsShrink = &v
	return s
}

func (s *RerunWorkflowInstancesShrinkRequest) SetName(v string) *RerunWorkflowInstancesShrinkRequest {
	s.Name = &v
	return s
}

func (s *RerunWorkflowInstancesShrinkRequest) SetProjectId(v int64) *RerunWorkflowInstancesShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *RerunWorkflowInstancesShrinkRequest) SetStartTriggerTime(v int64) *RerunWorkflowInstancesShrinkRequest {
	s.StartTriggerTime = &v
	return s
}

func (s *RerunWorkflowInstancesShrinkRequest) SetStatus(v string) *RerunWorkflowInstancesShrinkRequest {
	s.Status = &v
	return s
}

func (s *RerunWorkflowInstancesShrinkRequest) SetType(v string) *RerunWorkflowInstancesShrinkRequest {
	s.Type = &v
	return s
}

func (s *RerunWorkflowInstancesShrinkRequest) SetWorkflowId(v int64) *RerunWorkflowInstancesShrinkRequest {
	s.WorkflowId = &v
	return s
}

type RerunWorkflowInstancesResponseBody struct {
	// example:
	//
	// e15ad21c-b0e9-4792-8f55-b037xxxxxxxx
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RerunWorkflowInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RerunWorkflowInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *RerunWorkflowInstancesResponseBody) SetOperationId(v string) *RerunWorkflowInstancesResponseBody {
	s.OperationId = &v
	return s
}

func (s *RerunWorkflowInstancesResponseBody) SetRequestId(v string) *RerunWorkflowInstancesResponseBody {
	s.RequestId = &v
	return s
}

type RerunWorkflowInstancesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RerunWorkflowInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RerunWorkflowInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s RerunWorkflowInstancesResponse) GoString() string {
	return s.String()
}

func (s *RerunWorkflowInstancesResponse) SetHeaders(v map[string]*string) *RerunWorkflowInstancesResponse {
	s.Headers = v
	return s
}

func (s *RerunWorkflowInstancesResponse) SetStatusCode(v int32) *RerunWorkflowInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *RerunWorkflowInstancesResponse) SetBody(v *RerunWorkflowInstancesResponseBody) *RerunWorkflowInstancesResponse {
	s.Body = v
	return s
}

type ResumeTaskInstancesRequest struct {
	// Remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID list of the task instance.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
}

func (s ResumeTaskInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeTaskInstancesRequest) GoString() string {
	return s.String()
}

func (s *ResumeTaskInstancesRequest) SetComment(v string) *ResumeTaskInstancesRequest {
	s.Comment = &v
	return s
}

func (s *ResumeTaskInstancesRequest) SetIds(v []*int64) *ResumeTaskInstancesRequest {
	s.Ids = v
	return s
}

type ResumeTaskInstancesShrinkRequest struct {
	// Remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID list of the task instance.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
}

func (s ResumeTaskInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeTaskInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ResumeTaskInstancesShrinkRequest) SetComment(v string) *ResumeTaskInstancesShrinkRequest {
	s.Comment = &v
	return s
}

func (s *ResumeTaskInstancesShrinkRequest) SetIdsShrink(v string) *ResumeTaskInstancesShrinkRequest {
	s.IdsShrink = &v
	return s
}

type ResumeTaskInstancesResponseBody struct {
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.
	SuccessInfo map[string]*SuccessInfoValue `json:"SuccessInfo,omitempty" xml:"SuccessInfo,omitempty"`
}

func (s ResumeTaskInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeTaskInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeTaskInstancesResponseBody) SetRequestId(v string) *ResumeTaskInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResumeTaskInstancesResponseBody) SetSuccessInfo(v map[string]*SuccessInfoValue) *ResumeTaskInstancesResponseBody {
	s.SuccessInfo = v
	return s
}

type ResumeTaskInstancesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResumeTaskInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResumeTaskInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeTaskInstancesResponse) GoString() string {
	return s.String()
}

func (s *ResumeTaskInstancesResponse) SetHeaders(v map[string]*string) *ResumeTaskInstancesResponse {
	s.Headers = v
	return s
}

func (s *ResumeTaskInstancesResponse) SetStatusCode(v int32) *ResumeTaskInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ResumeTaskInstancesResponse) SetBody(v *ResumeTaskInstancesResponseBody) *ResumeTaskInstancesResponse {
	s.Body = v
	return s
}

type RevokeMemberProjectRolesRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 105149
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.
	//
	// You must configure this parameter to specify the roles that you want to revoke from the member in the workspace.
	//
	// This parameter is required.
	RoleCodes []*string `json:"RoleCodes,omitempty" xml:"RoleCodes,omitempty" type:"Repeated"`
	// The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the ID of the account used by the member in the workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123422344899
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s RevokeMemberProjectRolesRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeMemberProjectRolesRequest) GoString() string {
	return s.String()
}

func (s *RevokeMemberProjectRolesRequest) SetProjectId(v int64) *RevokeMemberProjectRolesRequest {
	s.ProjectId = &v
	return s
}

func (s *RevokeMemberProjectRolesRequest) SetRoleCodes(v []*string) *RevokeMemberProjectRolesRequest {
	s.RoleCodes = v
	return s
}

func (s *RevokeMemberProjectRolesRequest) SetUserId(v string) *RevokeMemberProjectRolesRequest {
	s.UserId = &v
	return s
}

type RevokeMemberProjectRolesShrinkRequest struct {
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 105149
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The codes of the roles in the workspace. You can call the [ListProjectRoles](https://help.aliyun.com/document_detail/2853930.html) operation to query the codes of all roles in the workspace.
	//
	// You must configure this parameter to specify the roles that you want to revoke from the member in the workspace.
	//
	// This parameter is required.
	RoleCodesShrink *string `json:"RoleCodes,omitempty" xml:"RoleCodes,omitempty"`
	// The ID of the account used by the member in the workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/product/ms_menu), choose More > Management Center in the left-side navigation pane, select the desired workspace on the Management Center page, and then click Go to Management Center. In the left-side navigation pane of the SettingCenter page, click Tenant Members and Roles. On the Tenant Members and Roles page, view the ID of the account used by the member in the workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123422344899
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s RevokeMemberProjectRolesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeMemberProjectRolesShrinkRequest) GoString() string {
	return s.String()
}

func (s *RevokeMemberProjectRolesShrinkRequest) SetProjectId(v int64) *RevokeMemberProjectRolesShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *RevokeMemberProjectRolesShrinkRequest) SetRoleCodesShrink(v string) *RevokeMemberProjectRolesShrinkRequest {
	s.RoleCodesShrink = &v
	return s
}

func (s *RevokeMemberProjectRolesShrinkRequest) SetUserId(v string) *RevokeMemberProjectRolesShrinkRequest {
	s.UserId = &v
	return s
}

type RevokeMemberProjectRolesResponseBody struct {
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 676271D6-53B4-57BE-89FA-72F7AE1418DF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RevokeMemberProjectRolesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeMemberProjectRolesResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeMemberProjectRolesResponseBody) SetRequestId(v string) *RevokeMemberProjectRolesResponseBody {
	s.RequestId = &v
	return s
}

type RevokeMemberProjectRolesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RevokeMemberProjectRolesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RevokeMemberProjectRolesResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeMemberProjectRolesResponse) GoString() string {
	return s.String()
}

func (s *RevokeMemberProjectRolesResponse) SetHeaders(v map[string]*string) *RevokeMemberProjectRolesResponse {
	s.Headers = v
	return s
}

func (s *RevokeMemberProjectRolesResponse) SetStatusCode(v int32) *RevokeMemberProjectRolesResponse {
	s.StatusCode = &v
	return s
}

func (s *RevokeMemberProjectRolesResponse) SetBody(v *RevokeMemberProjectRolesResponseBody) *RevokeMemberProjectRolesResponse {
	s.Body = v
	return s
}

type SetSuccessTaskInstancesRequest struct {
	// Remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID list of the task instance.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
}

func (s SetSuccessTaskInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s SetSuccessTaskInstancesRequest) GoString() string {
	return s.String()
}

func (s *SetSuccessTaskInstancesRequest) SetComment(v string) *SetSuccessTaskInstancesRequest {
	s.Comment = &v
	return s
}

func (s *SetSuccessTaskInstancesRequest) SetIds(v []*int64) *SetSuccessTaskInstancesRequest {
	s.Ids = v
	return s
}

type SetSuccessTaskInstancesShrinkRequest struct {
	// Remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID list of the task instance.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
}

func (s SetSuccessTaskInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetSuccessTaskInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetSuccessTaskInstancesShrinkRequest) SetComment(v string) *SetSuccessTaskInstancesShrinkRequest {
	s.Comment = &v
	return s
}

func (s *SetSuccessTaskInstancesShrinkRequest) SetIdsShrink(v string) *SetSuccessTaskInstancesShrinkRequest {
	s.IdsShrink = &v
	return s
}

type SetSuccessTaskInstancesResponseBody struct {
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.
	SuccessInfo map[string]*SuccessInfoValue `json:"SuccessInfo,omitempty" xml:"SuccessInfo,omitempty"`
}

func (s SetSuccessTaskInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetSuccessTaskInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *SetSuccessTaskInstancesResponseBody) SetRequestId(v string) *SetSuccessTaskInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetSuccessTaskInstancesResponseBody) SetSuccessInfo(v map[string]*SuccessInfoValue) *SetSuccessTaskInstancesResponseBody {
	s.SuccessInfo = v
	return s
}

type SetSuccessTaskInstancesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetSuccessTaskInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetSuccessTaskInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s SetSuccessTaskInstancesResponse) GoString() string {
	return s.String()
}

func (s *SetSuccessTaskInstancesResponse) SetHeaders(v map[string]*string) *SetSuccessTaskInstancesResponse {
	s.Headers = v
	return s
}

func (s *SetSuccessTaskInstancesResponse) SetStatusCode(v int32) *SetSuccessTaskInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *SetSuccessTaskInstancesResponse) SetBody(v *SetSuccessTaskInstancesResponseBody) *SetSuccessTaskInstancesResponse {
	s.Body = v
	return s
}

type StartDIJobRequest struct {
	// Deprecated
	//
	// This parameter is deprecated. Use the Id parameter instead.
	//
	// example:
	//
	// 10000
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// Specifies whether to forcefully rerun all synchronization steps. If you do not configure this parameter, the system does not perform the forcible rerun operation.
	//
	// 	- If the system does not perform the forcible rerun operation, only the steps that are not run start to run.
	//
	// 	- If the system performs the forcible rerun operation, all steps start to rerun.
	//
	// example:
	//
	// false
	ForceToRerun *bool `json:"ForceToRerun,omitempty" xml:"ForceToRerun,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 10000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The settings for starting real-time synchronization.
	//
	//     {
	//
	//       "StartTime":1663765058
	//
	//     }
	RealtimeStartSettings *StartDIJobRequestRealtimeStartSettings `json:"RealtimeStartSettings,omitempty" xml:"RealtimeStartSettings,omitempty" type:"Struct"`
}

func (s StartDIJobRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDIJobRequest) GoString() string {
	return s.String()
}

func (s *StartDIJobRequest) SetDIJobId(v int64) *StartDIJobRequest {
	s.DIJobId = &v
	return s
}

func (s *StartDIJobRequest) SetForceToRerun(v bool) *StartDIJobRequest {
	s.ForceToRerun = &v
	return s
}

func (s *StartDIJobRequest) SetId(v int64) *StartDIJobRequest {
	s.Id = &v
	return s
}

func (s *StartDIJobRequest) SetRealtimeStartSettings(v *StartDIJobRequestRealtimeStartSettings) *StartDIJobRequest {
	s.RealtimeStartSettings = v
	return s
}

type StartDIJobRequestRealtimeStartSettings struct {
	// Deprecated
	//
	// This parameter is deprecated. Use advanced parameters for failover settings when you create a task.
	FailoverSettings *StartDIJobRequestRealtimeStartSettingsFailoverSettings `json:"FailoverSettings,omitempty" xml:"FailoverSettings,omitempty" type:"Struct"`
	// The start time.
	//
	// example:
	//
	// 1671516776
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s StartDIJobRequestRealtimeStartSettings) String() string {
	return tea.Prettify(s)
}

func (s StartDIJobRequestRealtimeStartSettings) GoString() string {
	return s.String()
}

func (s *StartDIJobRequestRealtimeStartSettings) SetFailoverSettings(v *StartDIJobRequestRealtimeStartSettingsFailoverSettings) *StartDIJobRequestRealtimeStartSettings {
	s.FailoverSettings = v
	return s
}

func (s *StartDIJobRequestRealtimeStartSettings) SetStartTime(v int64) *StartDIJobRequestRealtimeStartSettings {
	s.StartTime = &v
	return s
}

type StartDIJobRequestRealtimeStartSettingsFailoverSettings struct {
	// Deprecated
	//
	// This parameter is deprecated. Use advanced parameters for failover settings when you create a task.
	//
	// example:
	//
	// 10
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// Deprecated
	//
	// This parameter is deprecated. Use advanced parameters for failover settings when you create a task.
	//
	// example:
	//
	// 30
	UpperLimit *int64 `json:"UpperLimit,omitempty" xml:"UpperLimit,omitempty"`
}

func (s StartDIJobRequestRealtimeStartSettingsFailoverSettings) String() string {
	return tea.Prettify(s)
}

func (s StartDIJobRequestRealtimeStartSettingsFailoverSettings) GoString() string {
	return s.String()
}

func (s *StartDIJobRequestRealtimeStartSettingsFailoverSettings) SetInterval(v int64) *StartDIJobRequestRealtimeStartSettingsFailoverSettings {
	s.Interval = &v
	return s
}

func (s *StartDIJobRequestRealtimeStartSettingsFailoverSettings) SetUpperLimit(v int64) *StartDIJobRequestRealtimeStartSettingsFailoverSettings {
	s.UpperLimit = &v
	return s
}

type StartDIJobShrinkRequest struct {
	// Deprecated
	//
	// This parameter is deprecated. Use the Id parameter instead.
	//
	// example:
	//
	// 10000
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// Specifies whether to forcefully rerun all synchronization steps. If you do not configure this parameter, the system does not perform the forcible rerun operation.
	//
	// 	- If the system does not perform the forcible rerun operation, only the steps that are not run start to run.
	//
	// 	- If the system performs the forcible rerun operation, all steps start to rerun.
	//
	// example:
	//
	// false
	ForceToRerun *bool `json:"ForceToRerun,omitempty" xml:"ForceToRerun,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 10000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The settings for starting real-time synchronization.
	//
	//     {
	//
	//       "StartTime":1663765058
	//
	//     }
	RealtimeStartSettingsShrink *string `json:"RealtimeStartSettings,omitempty" xml:"RealtimeStartSettings,omitempty"`
}

func (s StartDIJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDIJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *StartDIJobShrinkRequest) SetDIJobId(v int64) *StartDIJobShrinkRequest {
	s.DIJobId = &v
	return s
}

func (s *StartDIJobShrinkRequest) SetForceToRerun(v bool) *StartDIJobShrinkRequest {
	s.ForceToRerun = &v
	return s
}

func (s *StartDIJobShrinkRequest) SetId(v int64) *StartDIJobShrinkRequest {
	s.Id = &v
	return s
}

func (s *StartDIJobShrinkRequest) SetRealtimeStartSettingsShrink(v string) *StartDIJobShrinkRequest {
	s.RealtimeStartSettingsShrink = &v
	return s
}

type StartDIJobResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 999431B2-6013-577F-B684-36F7433C753B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StartDIJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartDIJobResponseBody) GoString() string {
	return s.String()
}

func (s *StartDIJobResponseBody) SetRequestId(v string) *StartDIJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartDIJobResponseBody) SetSuccess(v bool) *StartDIJobResponseBody {
	s.Success = &v
	return s
}

type StartDIJobResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartDIJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartDIJobResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDIJobResponse) GoString() string {
	return s.String()
}

func (s *StartDIJobResponse) SetHeaders(v map[string]*string) *StartDIJobResponse {
	s.Headers = v
	return s
}

func (s *StartDIJobResponse) SetStatusCode(v int32) *StartDIJobResponse {
	s.StatusCode = &v
	return s
}

func (s *StartDIJobResponse) SetBody(v *StartDIJobResponseBody) *StartDIJobResponse {
	s.Body = v
	return s
}

type StartWorkflowInstancesRequest struct {
	// The remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The IDs of workflow instances.
	//
	// This parameter is required.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
}

func (s StartWorkflowInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s StartWorkflowInstancesRequest) GoString() string {
	return s.String()
}

func (s *StartWorkflowInstancesRequest) SetComment(v string) *StartWorkflowInstancesRequest {
	s.Comment = &v
	return s
}

func (s *StartWorkflowInstancesRequest) SetIds(v []*int64) *StartWorkflowInstancesRequest {
	s.Ids = v
	return s
}

type StartWorkflowInstancesShrinkRequest struct {
	// The remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The IDs of workflow instances.
	//
	// This parameter is required.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
}

func (s StartWorkflowInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StartWorkflowInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *StartWorkflowInstancesShrinkRequest) SetComment(v string) *StartWorkflowInstancesShrinkRequest {
	s.Comment = &v
	return s
}

func (s *StartWorkflowInstancesShrinkRequest) SetIdsShrink(v string) *StartWorkflowInstancesShrinkRequest {
	s.IdsShrink = &v
	return s
}

type StartWorkflowInstancesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the batch operation, which is in the MAP structure. The workflow instance ID serves as a key, and the result serves as a value.
	SuccessInfo map[string]*SuccessInfoValue `json:"SuccessInfo,omitempty" xml:"SuccessInfo,omitempty"`
}

func (s StartWorkflowInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartWorkflowInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *StartWorkflowInstancesResponseBody) SetRequestId(v string) *StartWorkflowInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartWorkflowInstancesResponseBody) SetSuccessInfo(v map[string]*SuccessInfoValue) *StartWorkflowInstancesResponseBody {
	s.SuccessInfo = v
	return s
}

type StartWorkflowInstancesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartWorkflowInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartWorkflowInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s StartWorkflowInstancesResponse) GoString() string {
	return s.String()
}

func (s *StartWorkflowInstancesResponse) SetHeaders(v map[string]*string) *StartWorkflowInstancesResponse {
	s.Headers = v
	return s
}

func (s *StartWorkflowInstancesResponse) SetStatusCode(v int32) *StartWorkflowInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *StartWorkflowInstancesResponse) SetBody(v *StartWorkflowInstancesResponseBody) *StartWorkflowInstancesResponse {
	s.Body = v
	return s
}

type StopDIJobRequest struct {
	// Deprecated
	//
	// This parameter is deprecated and is replaced by the Id parameter.
	//
	// example:
	//
	// 11668
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 11668
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// 1234
	InstanceId *int64 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s StopDIJobRequest) String() string {
	return tea.Prettify(s)
}

func (s StopDIJobRequest) GoString() string {
	return s.String()
}

func (s *StopDIJobRequest) SetDIJobId(v int64) *StopDIJobRequest {
	s.DIJobId = &v
	return s
}

func (s *StopDIJobRequest) SetId(v int64) *StopDIJobRequest {
	s.Id = &v
	return s
}

func (s *StopDIJobRequest) SetInstanceId(v int64) *StopDIJobRequest {
	s.InstanceId = &v
	return s
}

type StopDIJobResponseBody struct {
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 92F778C7-8F00-53B1-AE1A-B3B17101247D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StopDIJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopDIJobResponseBody) GoString() string {
	return s.String()
}

func (s *StopDIJobResponseBody) SetRequestId(v string) *StopDIJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopDIJobResponseBody) SetSuccess(v bool) *StopDIJobResponseBody {
	s.Success = &v
	return s
}

type StopDIJobResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopDIJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopDIJobResponse) String() string {
	return tea.Prettify(s)
}

func (s StopDIJobResponse) GoString() string {
	return s.String()
}

func (s *StopDIJobResponse) SetHeaders(v map[string]*string) *StopDIJobResponse {
	s.Headers = v
	return s
}

func (s *StopDIJobResponse) SetStatusCode(v int32) *StopDIJobResponse {
	s.StatusCode = &v
	return s
}

func (s *StopDIJobResponse) SetBody(v *StopDIJobResponseBody) *StopDIJobResponse {
	s.Body = v
	return s
}

type StopTaskInstancesRequest struct {
	// Remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID list of the task instance.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
}

func (s StopTaskInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s StopTaskInstancesRequest) GoString() string {
	return s.String()
}

func (s *StopTaskInstancesRequest) SetComment(v string) *StopTaskInstancesRequest {
	s.Comment = &v
	return s
}

func (s *StopTaskInstancesRequest) SetIds(v []*int64) *StopTaskInstancesRequest {
	s.Ids = v
	return s
}

type StopTaskInstancesShrinkRequest struct {
	// Remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID list of the task instance.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
}

func (s StopTaskInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StopTaskInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *StopTaskInstancesShrinkRequest) SetComment(v string) *StopTaskInstancesShrinkRequest {
	s.Comment = &v
	return s
}

func (s *StopTaskInstancesShrinkRequest) SetIdsShrink(v string) *StopTaskInstancesShrinkRequest {
	s.IdsShrink = &v
	return s
}

type StopTaskInstancesResponseBody struct {
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.
	SuccessInfo map[string]*SuccessInfoValue `json:"SuccessInfo,omitempty" xml:"SuccessInfo,omitempty"`
}

func (s StopTaskInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopTaskInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *StopTaskInstancesResponseBody) SetRequestId(v string) *StopTaskInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopTaskInstancesResponseBody) SetSuccessInfo(v map[string]*SuccessInfoValue) *StopTaskInstancesResponseBody {
	s.SuccessInfo = v
	return s
}

type StopTaskInstancesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopTaskInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopTaskInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s StopTaskInstancesResponse) GoString() string {
	return s.String()
}

func (s *StopTaskInstancesResponse) SetHeaders(v map[string]*string) *StopTaskInstancesResponse {
	s.Headers = v
	return s
}

func (s *StopTaskInstancesResponse) SetStatusCode(v int32) *StopTaskInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *StopTaskInstancesResponse) SetBody(v *StopTaskInstancesResponseBody) *StopTaskInstancesResponse {
	s.Body = v
	return s
}

type StopWorkflowInstancesRequest struct {
	// The remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The workflow instance IDs.
	//
	// This parameter is required.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
}

func (s StopWorkflowInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s StopWorkflowInstancesRequest) GoString() string {
	return s.String()
}

func (s *StopWorkflowInstancesRequest) SetComment(v string) *StopWorkflowInstancesRequest {
	s.Comment = &v
	return s
}

func (s *StopWorkflowInstancesRequest) SetIds(v []*int64) *StopWorkflowInstancesRequest {
	s.Ids = v
	return s
}

type StopWorkflowInstancesShrinkRequest struct {
	// The remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The workflow instance IDs.
	//
	// This parameter is required.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
}

func (s StopWorkflowInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StopWorkflowInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *StopWorkflowInstancesShrinkRequest) SetComment(v string) *StopWorkflowInstancesShrinkRequest {
	s.Comment = &v
	return s
}

func (s *StopWorkflowInstancesShrinkRequest) SetIdsShrink(v string) *StopWorkflowInstancesShrinkRequest {
	s.IdsShrink = &v
	return s
}

type StopWorkflowInstancesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the batch operation, which is in the MAP structure. The workflow instance ID serves as a key, and the result serves as a value.
	SuccessInfo map[string]*SuccessInfoValue `json:"SuccessInfo,omitempty" xml:"SuccessInfo,omitempty"`
}

func (s StopWorkflowInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopWorkflowInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *StopWorkflowInstancesResponseBody) SetRequestId(v string) *StopWorkflowInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopWorkflowInstancesResponseBody) SetSuccessInfo(v map[string]*SuccessInfoValue) *StopWorkflowInstancesResponseBody {
	s.SuccessInfo = v
	return s
}

type StopWorkflowInstancesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopWorkflowInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopWorkflowInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s StopWorkflowInstancesResponse) GoString() string {
	return s.String()
}

func (s *StopWorkflowInstancesResponse) SetHeaders(v map[string]*string) *StopWorkflowInstancesResponse {
	s.Headers = v
	return s
}

func (s *StopWorkflowInstancesResponse) SetStatusCode(v int32) *StopWorkflowInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *StopWorkflowInstancesResponse) SetBody(v *StopWorkflowInstancesResponseBody) *StopWorkflowInstancesResponse {
	s.Body = v
	return s
}

type SubmitFileRequest struct {
	// example:
	//
	// Submit a task for the first time
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1000000
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// 100001
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	// example:
	//
	// false
	SkipAllDeployFileExtensions *bool `json:"SkipAllDeployFileExtensions,omitempty" xml:"SkipAllDeployFileExtensions,omitempty"`
}

func (s SubmitFileRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitFileRequest) GoString() string {
	return s.String()
}

func (s *SubmitFileRequest) SetComment(v string) *SubmitFileRequest {
	s.Comment = &v
	return s
}

func (s *SubmitFileRequest) SetFileId(v int64) *SubmitFileRequest {
	s.FileId = &v
	return s
}

func (s *SubmitFileRequest) SetProjectId(v int64) *SubmitFileRequest {
	s.ProjectId = &v
	return s
}

func (s *SubmitFileRequest) SetProjectIdentifier(v string) *SubmitFileRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *SubmitFileRequest) SetSkipAllDeployFileExtensions(v bool) *SubmitFileRequest {
	s.SkipAllDeployFileExtensions = &v
	return s
}

type SubmitFileResponseBody struct {
	// example:
	//
	// 3000001
	Data *int64 `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitFileResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitFileResponseBody) SetData(v int64) *SubmitFileResponseBody {
	s.Data = &v
	return s
}

func (s *SubmitFileResponseBody) SetErrorCode(v string) *SubmitFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SubmitFileResponseBody) SetErrorMessage(v string) *SubmitFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitFileResponseBody) SetHttpStatusCode(v int32) *SubmitFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SubmitFileResponseBody) SetRequestId(v string) *SubmitFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitFileResponseBody) SetSuccess(v bool) *SubmitFileResponseBody {
	s.Success = &v
	return s
}

type SubmitFileResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitFileResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitFileResponse) GoString() string {
	return s.String()
}

func (s *SubmitFileResponse) SetHeaders(v map[string]*string) *SubmitFileResponse {
	s.Headers = v
	return s
}

func (s *SubmitFileResponse) SetStatusCode(v int32) *SubmitFileResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitFileResponse) SetBody(v *SubmitFileResponseBody) *SubmitFileResponse {
	s.Body = v
	return s
}

type SuspendTaskInstancesRequest struct {
	// Remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID list of the task instance.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
}

func (s SuspendTaskInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendTaskInstancesRequest) GoString() string {
	return s.String()
}

func (s *SuspendTaskInstancesRequest) SetComment(v string) *SuspendTaskInstancesRequest {
	s.Comment = &v
	return s
}

func (s *SuspendTaskInstancesRequest) SetIds(v []*int64) *SuspendTaskInstancesRequest {
	s.Ids = v
	return s
}

type SuspendTaskInstancesShrinkRequest struct {
	// Remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The ID list of the task instance.
	IdsShrink *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
}

func (s SuspendTaskInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendTaskInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *SuspendTaskInstancesShrinkRequest) SetComment(v string) *SuspendTaskInstancesShrinkRequest {
	s.Comment = &v
	return s
}

func (s *SuspendTaskInstancesShrinkRequest) SetIdsShrink(v string) *SuspendTaskInstancesShrinkRequest {
	s.IdsShrink = &v
	return s
}

type SuspendTaskInstancesResponseBody struct {
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.
	SuccessInfo map[string]*SuccessInfoValue `json:"SuccessInfo,omitempty" xml:"SuccessInfo,omitempty"`
}

func (s SuspendTaskInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SuspendTaskInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *SuspendTaskInstancesResponseBody) SetRequestId(v string) *SuspendTaskInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *SuspendTaskInstancesResponseBody) SetSuccessInfo(v map[string]*SuccessInfoValue) *SuspendTaskInstancesResponseBody {
	s.SuccessInfo = v
	return s
}

type SuspendTaskInstancesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SuspendTaskInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SuspendTaskInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s SuspendTaskInstancesResponse) GoString() string {
	return s.String()
}

func (s *SuspendTaskInstancesResponse) SetHeaders(v map[string]*string) *SuspendTaskInstancesResponse {
	s.Headers = v
	return s
}

func (s *SuspendTaskInstancesResponse) SetStatusCode(v int32) *SuspendTaskInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *SuspendTaskInstancesResponse) SetBody(v *SuspendTaskInstancesResponseBody) *SuspendTaskInstancesResponse {
	s.Body = v
	return s
}

type TagDataAssetsRequest struct {
	// Specifies whether to enable lineage-based automatic backtracking.
	//
	// example:
	//
	// false
	AutoTraceEnabled *bool `json:"AutoTraceEnabled,omitempty" xml:"AutoTraceEnabled,omitempty"`
	// The data asset IDs.
	//
	// This parameter is required.
	DataAssetIds []*string `json:"DataAssetIds,omitempty" xml:"DataAssetIds,omitempty" type:"Repeated"`
	// The type of the data asset. Valid values:
	//
	// 	- ACS::DataWorks::Table
	//
	// 	- ACS::DataWorks::Task
	//
	// This parameter is required.
	//
	// example:
	//
	// ACS::DataWorks::Task
	DataAssetType *string `json:"DataAssetType,omitempty" xml:"DataAssetType,omitempty"`
	// The environment of the workspace to which the data asset belongs. Valid values:
	//
	// 	- Dev: development environment
	//
	// 	- Prod: production environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The tags that you want to add to data assets.
	//
	// This parameter is required.
	Tags []*TagDataAssetsRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s TagDataAssetsRequest) String() string {
	return tea.Prettify(s)
}

func (s TagDataAssetsRequest) GoString() string {
	return s.String()
}

func (s *TagDataAssetsRequest) SetAutoTraceEnabled(v bool) *TagDataAssetsRequest {
	s.AutoTraceEnabled = &v
	return s
}

func (s *TagDataAssetsRequest) SetDataAssetIds(v []*string) *TagDataAssetsRequest {
	s.DataAssetIds = v
	return s
}

func (s *TagDataAssetsRequest) SetDataAssetType(v string) *TagDataAssetsRequest {
	s.DataAssetType = &v
	return s
}

func (s *TagDataAssetsRequest) SetEnvType(v string) *TagDataAssetsRequest {
	s.EnvType = &v
	return s
}

func (s *TagDataAssetsRequest) SetProjectId(v int64) *TagDataAssetsRequest {
	s.ProjectId = &v
	return s
}

func (s *TagDataAssetsRequest) SetTags(v []*TagDataAssetsRequestTags) *TagDataAssetsRequest {
	s.Tags = v
	return s
}

type TagDataAssetsRequestTags struct {
	// The tag key.
	//
	// This parameter is required.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagDataAssetsRequestTags) String() string {
	return tea.Prettify(s)
}

func (s TagDataAssetsRequestTags) GoString() string {
	return s.String()
}

func (s *TagDataAssetsRequestTags) SetKey(v string) *TagDataAssetsRequestTags {
	s.Key = &v
	return s
}

func (s *TagDataAssetsRequestTags) SetValue(v string) *TagDataAssetsRequestTags {
	s.Value = &v
	return s
}

type TagDataAssetsShrinkRequest struct {
	// Specifies whether to enable lineage-based automatic backtracking.
	//
	// example:
	//
	// false
	AutoTraceEnabled *bool `json:"AutoTraceEnabled,omitempty" xml:"AutoTraceEnabled,omitempty"`
	// The data asset IDs.
	//
	// This parameter is required.
	DataAssetIdsShrink *string `json:"DataAssetIds,omitempty" xml:"DataAssetIds,omitempty"`
	// The type of the data asset. Valid values:
	//
	// 	- ACS::DataWorks::Table
	//
	// 	- ACS::DataWorks::Task
	//
	// This parameter is required.
	//
	// example:
	//
	// ACS::DataWorks::Task
	DataAssetType *string `json:"DataAssetType,omitempty" xml:"DataAssetType,omitempty"`
	// The environment of the workspace to which the data asset belongs. Valid values:
	//
	// 	- Dev: development environment
	//
	// 	- Prod: production environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The tags that you want to add to data assets.
	//
	// This parameter is required.
	TagsShrink *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s TagDataAssetsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s TagDataAssetsShrinkRequest) GoString() string {
	return s.String()
}

func (s *TagDataAssetsShrinkRequest) SetAutoTraceEnabled(v bool) *TagDataAssetsShrinkRequest {
	s.AutoTraceEnabled = &v
	return s
}

func (s *TagDataAssetsShrinkRequest) SetDataAssetIdsShrink(v string) *TagDataAssetsShrinkRequest {
	s.DataAssetIdsShrink = &v
	return s
}

func (s *TagDataAssetsShrinkRequest) SetDataAssetType(v string) *TagDataAssetsShrinkRequest {
	s.DataAssetType = &v
	return s
}

func (s *TagDataAssetsShrinkRequest) SetEnvType(v string) *TagDataAssetsShrinkRequest {
	s.EnvType = &v
	return s
}

func (s *TagDataAssetsShrinkRequest) SetProjectId(v int64) *TagDataAssetsShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *TagDataAssetsShrinkRequest) SetTagsShrink(v string) *TagDataAssetsShrinkRequest {
	s.TagsShrink = &v
	return s
}

type TagDataAssetsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 0bc1ec92159376
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s TagDataAssetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagDataAssetsResponseBody) GoString() string {
	return s.String()
}

func (s *TagDataAssetsResponseBody) SetRequestId(v string) *TagDataAssetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *TagDataAssetsResponseBody) SetSuccess(v string) *TagDataAssetsResponseBody {
	s.Success = &v
	return s
}

type TagDataAssetsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagDataAssetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagDataAssetsResponse) String() string {
	return tea.Prettify(s)
}

func (s TagDataAssetsResponse) GoString() string {
	return s.String()
}

func (s *TagDataAssetsResponse) SetHeaders(v map[string]*string) *TagDataAssetsResponse {
	s.Headers = v
	return s
}

func (s *TagDataAssetsResponse) SetStatusCode(v int32) *TagDataAssetsResponse {
	s.StatusCode = &v
	return s
}

func (s *TagDataAssetsResponse) SetBody(v *TagDataAssetsResponseBody) *TagDataAssetsResponse {
	s.Body = v
	return s
}

type TestDataSourceConnectivityRequest struct {
	// The ID of the data source for which you want to test the network connectivity.
	//
	// This parameter is required.
	//
	// example:
	//
	// 144544
	DataSourceId *int64 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The DataWorks workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10001
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The resource group ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s TestDataSourceConnectivityRequest) String() string {
	return tea.Prettify(s)
}

func (s TestDataSourceConnectivityRequest) GoString() string {
	return s.String()
}

func (s *TestDataSourceConnectivityRequest) SetDataSourceId(v int64) *TestDataSourceConnectivityRequest {
	s.DataSourceId = &v
	return s
}

func (s *TestDataSourceConnectivityRequest) SetProjectId(v int64) *TestDataSourceConnectivityRequest {
	s.ProjectId = &v
	return s
}

func (s *TestDataSourceConnectivityRequest) SetResourceGroupId(v string) *TestDataSourceConnectivityRequest {
	s.ResourceGroupId = &v
	return s
}

type TestDataSourceConnectivityResponseBody struct {
	// The details of the connectivity test.
	Connectivity *TestDataSourceConnectivityResponseBodyConnectivity `json:"Connectivity,omitempty" xml:"Connectivity,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 4CDF7B72-020B-542A-8465-21CFFA81****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TestDataSourceConnectivityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TestDataSourceConnectivityResponseBody) GoString() string {
	return s.String()
}

func (s *TestDataSourceConnectivityResponseBody) SetConnectivity(v *TestDataSourceConnectivityResponseBodyConnectivity) *TestDataSourceConnectivityResponseBody {
	s.Connectivity = v
	return s
}

func (s *TestDataSourceConnectivityResponseBody) SetRequestId(v string) *TestDataSourceConnectivityResponseBody {
	s.RequestId = &v
	return s
}

type TestDataSourceConnectivityResponseBodyConnectivity struct {
	// The error message returned if the connectivity test fails. No such a message is returned if the connectivity test is successful.
	ConnectMessage *string `json:"ConnectMessage,omitempty" xml:"ConnectMessage,omitempty"`
	// The result of the connectivity test. Valid values: Connectable: The network can be connected. ConfigError: The network can be connected, but the configurations are incorrect. Unreachable: The network cannot be connected. Unsupport: An error is reported due to other causes. For example, the desired resource group is being initialized.
	//
	// example:
	//
	// Connectable
	ConnectState *string `json:"ConnectState,omitempty" xml:"ConnectState,omitempty"`
	// The detailed logs of each step in the connectivity test.
	DetailLogs []*TestDataSourceConnectivityResponseBodyConnectivityDetailLogs `json:"DetailLogs,omitempty" xml:"DetailLogs,omitempty" type:"Repeated"`
}

func (s TestDataSourceConnectivityResponseBodyConnectivity) String() string {
	return tea.Prettify(s)
}

func (s TestDataSourceConnectivityResponseBodyConnectivity) GoString() string {
	return s.String()
}

func (s *TestDataSourceConnectivityResponseBodyConnectivity) SetConnectMessage(v string) *TestDataSourceConnectivityResponseBodyConnectivity {
	s.ConnectMessage = &v
	return s
}

func (s *TestDataSourceConnectivityResponseBodyConnectivity) SetConnectState(v string) *TestDataSourceConnectivityResponseBodyConnectivity {
	s.ConnectState = &v
	return s
}

func (s *TestDataSourceConnectivityResponseBodyConnectivity) SetDetailLogs(v []*TestDataSourceConnectivityResponseBodyConnectivityDetailLogs) *TestDataSourceConnectivityResponseBodyConnectivity {
	s.DetailLogs = v
	return s
}

type TestDataSourceConnectivityResponseBodyConnectivityDetailLogs struct {
	// The code of the test item.
	//
	// example:
	//
	// validate_input_parameters
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The end time of a step.
	//
	// example:
	//
	// 1730217604002
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The name of the step.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The start time of a step.
	//
	// example:
	//
	// 1730217600001
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s TestDataSourceConnectivityResponseBodyConnectivityDetailLogs) String() string {
	return tea.Prettify(s)
}

func (s TestDataSourceConnectivityResponseBodyConnectivityDetailLogs) GoString() string {
	return s.String()
}

func (s *TestDataSourceConnectivityResponseBodyConnectivityDetailLogs) SetCode(v string) *TestDataSourceConnectivityResponseBodyConnectivityDetailLogs {
	s.Code = &v
	return s
}

func (s *TestDataSourceConnectivityResponseBodyConnectivityDetailLogs) SetEndTime(v int64) *TestDataSourceConnectivityResponseBodyConnectivityDetailLogs {
	s.EndTime = &v
	return s
}

func (s *TestDataSourceConnectivityResponseBodyConnectivityDetailLogs) SetMessage(v string) *TestDataSourceConnectivityResponseBodyConnectivityDetailLogs {
	s.Message = &v
	return s
}

func (s *TestDataSourceConnectivityResponseBodyConnectivityDetailLogs) SetStartTime(v int64) *TestDataSourceConnectivityResponseBodyConnectivityDetailLogs {
	s.StartTime = &v
	return s
}

type TestDataSourceConnectivityResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TestDataSourceConnectivityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TestDataSourceConnectivityResponse) String() string {
	return tea.Prettify(s)
}

func (s TestDataSourceConnectivityResponse) GoString() string {
	return s.String()
}

func (s *TestDataSourceConnectivityResponse) SetHeaders(v map[string]*string) *TestDataSourceConnectivityResponse {
	s.Headers = v
	return s
}

func (s *TestDataSourceConnectivityResponse) SetStatusCode(v int32) *TestDataSourceConnectivityResponse {
	s.StatusCode = &v
	return s
}

func (s *TestDataSourceConnectivityResponse) SetBody(v *TestDataSourceConnectivityResponseBody) *TestDataSourceConnectivityResponse {
	s.Body = v
	return s
}

type TriggerSchedulerTaskInstanceRequest struct {
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The task ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The time defined by the HTTP Trigger node. This value is a UNIX timestamp.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1710239005403
	TriggerTime *int64 `json:"TriggerTime,omitempty" xml:"TriggerTime,omitempty"`
}

func (s TriggerSchedulerTaskInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s TriggerSchedulerTaskInstanceRequest) GoString() string {
	return s.String()
}

func (s *TriggerSchedulerTaskInstanceRequest) SetEnvType(v string) *TriggerSchedulerTaskInstanceRequest {
	s.EnvType = &v
	return s
}

func (s *TriggerSchedulerTaskInstanceRequest) SetTaskId(v int64) *TriggerSchedulerTaskInstanceRequest {
	s.TaskId = &v
	return s
}

func (s *TriggerSchedulerTaskInstanceRequest) SetTriggerTime(v int64) *TriggerSchedulerTaskInstanceRequest {
	s.TriggerTime = &v
	return s
}

type TriggerSchedulerTaskInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s TriggerSchedulerTaskInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TriggerSchedulerTaskInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *TriggerSchedulerTaskInstanceResponseBody) SetRequestId(v string) *TriggerSchedulerTaskInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *TriggerSchedulerTaskInstanceResponseBody) SetSuccess(v bool) *TriggerSchedulerTaskInstanceResponseBody {
	s.Success = &v
	return s
}

type TriggerSchedulerTaskInstanceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TriggerSchedulerTaskInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TriggerSchedulerTaskInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s TriggerSchedulerTaskInstanceResponse) GoString() string {
	return s.String()
}

func (s *TriggerSchedulerTaskInstanceResponse) SetHeaders(v map[string]*string) *TriggerSchedulerTaskInstanceResponse {
	s.Headers = v
	return s
}

func (s *TriggerSchedulerTaskInstanceResponse) SetStatusCode(v int32) *TriggerSchedulerTaskInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *TriggerSchedulerTaskInstanceResponse) SetBody(v *TriggerSchedulerTaskInstanceResponseBody) *TriggerSchedulerTaskInstanceResponse {
	s.Body = v
	return s
}

type UnTagDataAssetsRequest struct {
	// The data asset IDs.
	//
	// This parameter is required.
	DataAssetIds []*string `json:"DataAssetIds,omitempty" xml:"DataAssetIds,omitempty" type:"Repeated"`
	// The type of the data asset. Valid values:
	//
	// 	- ACS::DataWorks::Table
	//
	// 	- ACS::DataWorks::Task
	//
	// This parameter is required.
	//
	// example:
	//
	// ACS::DataWorks::Task
	DataAssetType *string `json:"DataAssetType,omitempty" xml:"DataAssetType,omitempty"`
	// The environment of the workspace to which the data asset belongs. Valid values:
	//
	// 	- Dev: development environment
	//
	// 	- Prod: production environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 123
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The tags that you want to remove.
	//
	// This parameter is required.
	Tags []*UnTagDataAssetsRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s UnTagDataAssetsRequest) String() string {
	return tea.Prettify(s)
}

func (s UnTagDataAssetsRequest) GoString() string {
	return s.String()
}

func (s *UnTagDataAssetsRequest) SetDataAssetIds(v []*string) *UnTagDataAssetsRequest {
	s.DataAssetIds = v
	return s
}

func (s *UnTagDataAssetsRequest) SetDataAssetType(v string) *UnTagDataAssetsRequest {
	s.DataAssetType = &v
	return s
}

func (s *UnTagDataAssetsRequest) SetEnvType(v string) *UnTagDataAssetsRequest {
	s.EnvType = &v
	return s
}

func (s *UnTagDataAssetsRequest) SetProjectId(v int64) *UnTagDataAssetsRequest {
	s.ProjectId = &v
	return s
}

func (s *UnTagDataAssetsRequest) SetTags(v []*UnTagDataAssetsRequestTags) *UnTagDataAssetsRequest {
	s.Tags = v
	return s
}

type UnTagDataAssetsRequestTags struct {
	// The tag key.
	//
	// This parameter is required.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UnTagDataAssetsRequestTags) String() string {
	return tea.Prettify(s)
}

func (s UnTagDataAssetsRequestTags) GoString() string {
	return s.String()
}

func (s *UnTagDataAssetsRequestTags) SetKey(v string) *UnTagDataAssetsRequestTags {
	s.Key = &v
	return s
}

func (s *UnTagDataAssetsRequestTags) SetValue(v string) *UnTagDataAssetsRequestTags {
	s.Value = &v
	return s
}

type UnTagDataAssetsShrinkRequest struct {
	// The data asset IDs.
	//
	// This parameter is required.
	DataAssetIdsShrink *string `json:"DataAssetIds,omitempty" xml:"DataAssetIds,omitempty"`
	// The type of the data asset. Valid values:
	//
	// 	- ACS::DataWorks::Table
	//
	// 	- ACS::DataWorks::Task
	//
	// This parameter is required.
	//
	// example:
	//
	// ACS::DataWorks::Task
	DataAssetType *string `json:"DataAssetType,omitempty" xml:"DataAssetType,omitempty"`
	// The environment of the workspace to which the data asset belongs. Valid values:
	//
	// 	- Dev: development environment
	//
	// 	- Prod: production environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The DataWorks workspace ID.
	//
	// example:
	//
	// 123
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The tags that you want to remove.
	//
	// This parameter is required.
	TagsShrink *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s UnTagDataAssetsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UnTagDataAssetsShrinkRequest) GoString() string {
	return s.String()
}

func (s *UnTagDataAssetsShrinkRequest) SetDataAssetIdsShrink(v string) *UnTagDataAssetsShrinkRequest {
	s.DataAssetIdsShrink = &v
	return s
}

func (s *UnTagDataAssetsShrinkRequest) SetDataAssetType(v string) *UnTagDataAssetsShrinkRequest {
	s.DataAssetType = &v
	return s
}

func (s *UnTagDataAssetsShrinkRequest) SetEnvType(v string) *UnTagDataAssetsShrinkRequest {
	s.EnvType = &v
	return s
}

func (s *UnTagDataAssetsShrinkRequest) SetProjectId(v int64) *UnTagDataAssetsShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *UnTagDataAssetsShrinkRequest) SetTagsShrink(v string) *UnTagDataAssetsShrinkRequest {
	s.TagsShrink = &v
	return s
}

type UnTagDataAssetsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 8754EE08-4AA2-5F77-ADD7-754DBBDA9F75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UnTagDataAssetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnTagDataAssetsResponseBody) GoString() string {
	return s.String()
}

func (s *UnTagDataAssetsResponseBody) SetRequestId(v string) *UnTagDataAssetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnTagDataAssetsResponseBody) SetSuccess(v string) *UnTagDataAssetsResponseBody {
	s.Success = &v
	return s
}

type UnTagDataAssetsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnTagDataAssetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnTagDataAssetsResponse) String() string {
	return tea.Prettify(s)
}

func (s UnTagDataAssetsResponse) GoString() string {
	return s.String()
}

func (s *UnTagDataAssetsResponse) SetHeaders(v map[string]*string) *UnTagDataAssetsResponse {
	s.Headers = v
	return s
}

func (s *UnTagDataAssetsResponse) SetStatusCode(v int32) *UnTagDataAssetsResponse {
	s.StatusCode = &v
	return s
}

func (s *UnTagDataAssetsResponse) SetBody(v *UnTagDataAssetsResponseBody) *UnTagDataAssetsResponse {
	s.Body = v
	return s
}

type UpdateAlertRuleRequest struct {
	// Specifies whether to enable the rule.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The rule ID.
	//
	// example:
	//
	// 105412
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the rule.
	//
	// example:
	//
	// collection_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configuration for the alert notification.
	Notification *UpdateAlertRuleRequestNotification `json:"Notification,omitempty" xml:"Notification,omitempty" type:"Struct"`
	// The ID of the Alibaba Cloud account used by the owner of the rule.
	//
	// example:
	//
	// 193379****
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The alert triggering condition.
	TriggerCondition *UpdateAlertRuleRequestTriggerCondition `json:"TriggerCondition,omitempty" xml:"TriggerCondition,omitempty" type:"Struct"`
}

func (s UpdateAlertRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequest) SetEnabled(v bool) *UpdateAlertRuleRequest {
	s.Enabled = &v
	return s
}

func (s *UpdateAlertRuleRequest) SetId(v int64) *UpdateAlertRuleRequest {
	s.Id = &v
	return s
}

func (s *UpdateAlertRuleRequest) SetName(v string) *UpdateAlertRuleRequest {
	s.Name = &v
	return s
}

func (s *UpdateAlertRuleRequest) SetNotification(v *UpdateAlertRuleRequestNotification) *UpdateAlertRuleRequest {
	s.Notification = v
	return s
}

func (s *UpdateAlertRuleRequest) SetOwner(v string) *UpdateAlertRuleRequest {
	s.Owner = &v
	return s
}

func (s *UpdateAlertRuleRequest) SetTriggerCondition(v *UpdateAlertRuleRequestTriggerCondition) *UpdateAlertRuleRequest {
	s.TriggerCondition = v
	return s
}

type UpdateAlertRuleRequestNotification struct {
	// The alert notification channels.
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
	// The interval at which an alert notification is sent. Unit: minutes. Valid values: [5,10000].
	//
	// example:
	//
	// 30
	IntervalInMinutes *int32 `json:"IntervalInMinutes,omitempty" xml:"IntervalInMinutes,omitempty"`
	// The maximum number of times an alert notification can be sent within a calendar day. Valid values: [1, 10000].
	//
	// example:
	//
	// 3
	Maximum *int32 `json:"Maximum,omitempty" xml:"Maximum,omitempty"`
	// The alert recipients.
	Receivers []*UpdateAlertRuleRequestNotificationReceivers `json:"Receivers,omitempty" xml:"Receivers,omitempty" type:"Repeated"`
	// The end time for silence. The time is in the HH:mm:ss format.
	//
	// example:
	//
	// 00:00:00
	SilenceEndTime *string `json:"SilenceEndTime,omitempty" xml:"SilenceEndTime,omitempty"`
	// The start time for silence. The time is in the HH:mm:ss format.
	//
	// example:
	//
	// 00:00:00
	SilenceStartTime *string `json:"SilenceStartTime,omitempty" xml:"SilenceStartTime,omitempty"`
}

func (s UpdateAlertRuleRequestNotification) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequestNotification) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequestNotification) SetChannels(v []*string) *UpdateAlertRuleRequestNotification {
	s.Channels = v
	return s
}

func (s *UpdateAlertRuleRequestNotification) SetIntervalInMinutes(v int32) *UpdateAlertRuleRequestNotification {
	s.IntervalInMinutes = &v
	return s
}

func (s *UpdateAlertRuleRequestNotification) SetMaximum(v int32) *UpdateAlertRuleRequestNotification {
	s.Maximum = &v
	return s
}

func (s *UpdateAlertRuleRequestNotification) SetReceivers(v []*UpdateAlertRuleRequestNotificationReceivers) *UpdateAlertRuleRequestNotification {
	s.Receivers = v
	return s
}

func (s *UpdateAlertRuleRequestNotification) SetSilenceEndTime(v string) *UpdateAlertRuleRequestNotification {
	s.SilenceEndTime = &v
	return s
}

func (s *UpdateAlertRuleRequestNotification) SetSilenceStartTime(v string) *UpdateAlertRuleRequestNotification {
	s.SilenceStartTime = &v
	return s
}

type UpdateAlertRuleRequestNotificationReceivers struct {
	// The additional configuration of the alert recipient. If the ReceiverType parameter is set to DingdingUrl, you can set this parameter to {"atAll":true} to remind all members in a DingTalk group.
	//
	// example:
	//
	// {"atAll":true}
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// The type of the alert recipient. Valid valves:
	//
	// 	- AliUid: Alibaba Cloud account ID.
	//
	// 	- Shift Schedules: the personnel in a shift schedule.
	//
	// 	- TaskOwner: the task owner. The task owner can receive custom alerts and event alerts.
	//
	// 	- Owner: the baseline owner. The baseline owner can receive baseline alerts.
	//
	// 	- WebhookUrl: URL of a custom webhook.
	//
	// 	- DingdingUrl: DingTalk webhook URL.
	//
	// 	- FeishuUrl: Lark webhook URL.
	//
	// 	- WeixinUrl: WeCom webhook URL.
	//
	// example:
	//
	// TaskOwner
	ReceiverType *string `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	// The alert recipients.
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s UpdateAlertRuleRequestNotificationReceivers) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequestNotificationReceivers) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequestNotificationReceivers) SetExtension(v string) *UpdateAlertRuleRequestNotificationReceivers {
	s.Extension = &v
	return s
}

func (s *UpdateAlertRuleRequestNotificationReceivers) SetReceiverType(v string) *UpdateAlertRuleRequestNotificationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *UpdateAlertRuleRequestNotificationReceivers) SetReceiverValues(v []*string) *UpdateAlertRuleRequestNotificationReceivers {
	s.ReceiverValues = v
	return s
}

type UpdateAlertRuleRequestTriggerCondition struct {
	// The extended information about the rule. This parameter is required for specific types of alerts.
	Extension *UpdateAlertRuleRequestTriggerConditionExtension `json:"Extension,omitempty" xml:"Extension,omitempty" type:"Struct"`
	// The monitored objects.
	Target *UpdateAlertRuleRequestTriggerConditionTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The alert type. Valid values:
	//
	// 	- Finished: An instance is successfully run.
	//
	// 	- UnFinished: An instance does not finish running before a specified point in time.
	//
	// 	- Error: An error occurs on an instance.
	//
	// 	- CycleUnfinished: An instance does not finish running as expected within a specific cycle.
	//
	// 	- Timeout: An instance times out.
	//
	// 	- InstanceTransferComplete: An instance is generated by the auto triggered node.
	//
	// 	- InstanceTransferFluctuate: The number of generated instances fluctuates.
	//
	// 	- ExhaustedError: An error persists after an instance is automatically rerun.
	//
	// 	- InstanceKeyword: An instance with errors contains specified keywords.
	//
	// 	- InstanceErrorCount: The number of instances on which an error occurs reaches a specified threshold.
	//
	// 	- InstanceErrorPercentage: The proportion of instances on which an error occurs in the workspace to the total number of instances reaches a specified threshold.
	//
	// 	- ResourceGroupPercentage: The usage rate of the resource group reaches a specified threshold.
	//
	// 	- ResourceGroupWaitCount: The number of instances that are waiting for resources in the resource group reaches a specified threshold.
	//
	// example:
	//
	// ERROR
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateAlertRuleRequestTriggerCondition) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequestTriggerCondition) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequestTriggerCondition) SetExtension(v *UpdateAlertRuleRequestTriggerConditionExtension) *UpdateAlertRuleRequestTriggerCondition {
	s.Extension = v
	return s
}

func (s *UpdateAlertRuleRequestTriggerCondition) SetTarget(v *UpdateAlertRuleRequestTriggerConditionTarget) *UpdateAlertRuleRequestTriggerCondition {
	s.Target = v
	return s
}

func (s *UpdateAlertRuleRequestTriggerCondition) SetType(v string) *UpdateAlertRuleRequestTriggerCondition {
	s.Type = &v
	return s
}

type UpdateAlertRuleRequestTriggerConditionExtension struct {
	// The configuration for an alert of the CycleUnfinished type.
	CycleUnfinished *UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinished `json:"CycleUnfinished,omitempty" xml:"CycleUnfinished,omitempty" type:"Struct"`
	// The configuration for an alert of the Error type.
	Error *UpdateAlertRuleRequestTriggerConditionExtensionError `json:"Error,omitempty" xml:"Error,omitempty" type:"Struct"`
	// The configuration for an alert of the InstanceErrorCount type.
	InstanceErrorCount *UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount `json:"InstanceErrorCount,omitempty" xml:"InstanceErrorCount,omitempty" type:"Struct"`
	// The configuration for an alert of the InstanceErrorPercentage type.
	InstanceErrorPercentage *UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage `json:"InstanceErrorPercentage,omitempty" xml:"InstanceErrorPercentage,omitempty" type:"Struct"`
	// The configuration for an alert of the InstanceTransferFluctuate type.
	InstanceTransferFluctuate *UpdateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate `json:"InstanceTransferFluctuate,omitempty" xml:"InstanceTransferFluctuate,omitempty" type:"Struct"`
	// The configuration for an alert of the Timeout type.
	Timeout *UpdateAlertRuleRequestTriggerConditionExtensionTimeout `json:"Timeout,omitempty" xml:"Timeout,omitempty" type:"Struct"`
	// The configuration for an alert of the UnFinished type.
	UnFinished *UpdateAlertRuleRequestTriggerConditionExtensionUnFinished `json:"UnFinished,omitempty" xml:"UnFinished,omitempty" type:"Struct"`
}

func (s UpdateAlertRuleRequestTriggerConditionExtension) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequestTriggerConditionExtension) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequestTriggerConditionExtension) SetCycleUnfinished(v *UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinished) *UpdateAlertRuleRequestTriggerConditionExtension {
	s.CycleUnfinished = v
	return s
}

func (s *UpdateAlertRuleRequestTriggerConditionExtension) SetError(v *UpdateAlertRuleRequestTriggerConditionExtensionError) *UpdateAlertRuleRequestTriggerConditionExtension {
	s.Error = v
	return s
}

func (s *UpdateAlertRuleRequestTriggerConditionExtension) SetInstanceErrorCount(v *UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount) *UpdateAlertRuleRequestTriggerConditionExtension {
	s.InstanceErrorCount = v
	return s
}

func (s *UpdateAlertRuleRequestTriggerConditionExtension) SetInstanceErrorPercentage(v *UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage) *UpdateAlertRuleRequestTriggerConditionExtension {
	s.InstanceErrorPercentage = v
	return s
}

func (s *UpdateAlertRuleRequestTriggerConditionExtension) SetInstanceTransferFluctuate(v *UpdateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate) *UpdateAlertRuleRequestTriggerConditionExtension {
	s.InstanceTransferFluctuate = v
	return s
}

func (s *UpdateAlertRuleRequestTriggerConditionExtension) SetTimeout(v *UpdateAlertRuleRequestTriggerConditionExtensionTimeout) *UpdateAlertRuleRequestTriggerConditionExtension {
	s.Timeout = v
	return s
}

func (s *UpdateAlertRuleRequestTriggerConditionExtension) SetUnFinished(v *UpdateAlertRuleRequestTriggerConditionExtensionUnFinished) *UpdateAlertRuleRequestTriggerConditionExtension {
	s.UnFinished = v
	return s
}

type UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinished struct {
	// The configurations of the scheduling cycle and timeout period of the instance.
	CycleAndTime []*UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime `json:"CycleAndTime,omitempty" xml:"CycleAndTime,omitempty" type:"Repeated"`
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinished) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinished) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinished) SetCycleAndTime(v []*UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime) *UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinished {
	s.CycleAndTime = v
	return s
}

type UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime struct {
	// The ID of the scheduling cycle of the instance. Valid values: [1,288].
	//
	// example:
	//
	// 1
	CycleId *int32 `json:"CycleId,omitempty" xml:"CycleId,omitempty"`
	// The latest completion time of the instance within the scheduling cycle. The time is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].
	//
	// example:
	//
	// 01:00
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime) SetCycleId(v int32) *UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime {
	s.CycleId = &v
	return s
}

func (s *UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime) SetTime(v string) *UpdateAlertRuleRequestTriggerConditionExtensionCycleUnfinishedCycleAndTime {
	s.Time = &v
	return s
}

type UpdateAlertRuleRequestTriggerConditionExtensionError struct {
	// Specifies whether to trigger an alert if a batch synchronization task is automatically rerun upon a failure.
	//
	// example:
	//
	// false
	AutoRerunAlertEnabled *bool `json:"AutoRerunAlertEnabled,omitempty" xml:"AutoRerunAlertEnabled,omitempty"`
	// The IDs of the real-time computing tasks. This parameter is required when you monitor real-time computing tasks.
	StreamTaskIds []*int64 `json:"StreamTaskIds,omitempty" xml:"StreamTaskIds,omitempty" type:"Repeated"`
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionError) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionError) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequestTriggerConditionExtensionError) SetAutoRerunAlertEnabled(v bool) *UpdateAlertRuleRequestTriggerConditionExtensionError {
	s.AutoRerunAlertEnabled = &v
	return s
}

func (s *UpdateAlertRuleRequestTriggerConditionExtensionError) SetStreamTaskIds(v []*int64) *UpdateAlertRuleRequestTriggerConditionExtensionError {
	s.StreamTaskIds = v
	return s
}

type UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount struct {
	// The maximum number of instances on which an error occurs. Valid values: [1,10000].
	//
	// example:
	//
	// 10
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount) SetCount(v int32) *UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorCount {
	s.Count = &v
	return s
}

type UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage struct {
	// The maximum percentage of instances on which an error occurs in the workspace to the total number of instances. Valid values: [1-100].
	//
	// example:
	//
	// 10
	Percentage *int32 `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage) SetPercentage(v int32) *UpdateAlertRuleRequestTriggerConditionExtensionInstanceErrorPercentage {
	s.Percentage = &v
	return s
}

type UpdateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate struct {
	// The maximum percentage of fluctuation in the number of auto triggered node instances that are generated in your workspace. Valid values: [1-100].
	//
	// example:
	//
	// 10
	Percentage *int32 `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	// The way in which the number of auto triggered node instances that are generated in your workspace fluctuates. Valid values:
	//
	// 	- abs: the absolute value. The number of instances increases or decreases.
	//
	// 	- increase: The number of instances increases.
	//
	// 	- decrease: The number of instances decreases.
	//
	// example:
	//
	// abs
	Trend *string `json:"Trend,omitempty" xml:"Trend,omitempty"`
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate) SetPercentage(v int32) *UpdateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate {
	s.Percentage = &v
	return s
}

func (s *UpdateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate) SetTrend(v string) *UpdateAlertRuleRequestTriggerConditionExtensionInstanceTransferFluctuate {
	s.Trend = &v
	return s
}

type UpdateAlertRuleRequestTriggerConditionExtensionTimeout struct {
	// The timeout period. Unit: minutes.
	//
	// example:
	//
	// 10
	TimeoutInMinutes *int32 `json:"TimeoutInMinutes,omitempty" xml:"TimeoutInMinutes,omitempty"`
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionTimeout) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionTimeout) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequestTriggerConditionExtensionTimeout) SetTimeoutInMinutes(v int32) *UpdateAlertRuleRequestTriggerConditionExtensionTimeout {
	s.TimeoutInMinutes = &v
	return s
}

type UpdateAlertRuleRequestTriggerConditionExtensionUnFinished struct {
	// The latest completion time of the instance. The period is in the hh:mm format. Valid values of hh: [0,47]. Valid values of mm: [0,59].
	//
	// example:
	//
	// 12:00
	UnFinishedTime *string `json:"UnFinishedTime,omitempty" xml:"UnFinishedTime,omitempty"`
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionUnFinished) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequestTriggerConditionExtensionUnFinished) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequestTriggerConditionExtensionUnFinished) SetUnFinishedTime(v string) *UpdateAlertRuleRequestTriggerConditionExtensionUnFinished {
	s.UnFinishedTime = &v
	return s
}

type UpdateAlertRuleRequestTriggerConditionTarget struct {
	// The nodes that are not to be monitored.
	AllowTasks []*int64 `json:"AllowTasks,omitempty" xml:"AllowTasks,omitempty" type:"Repeated"`
	// The IDs of monitored objects.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// The type of the monitored objects. Valid values:
	//
	// 	- Task: node
	//
	// 	- Baseline: baseline
	//
	// 	- project: workspace
	//
	// 	- BizProcess: workflow
	//
	// example:
	//
	// Task
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateAlertRuleRequestTriggerConditionTarget) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleRequestTriggerConditionTarget) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleRequestTriggerConditionTarget) SetAllowTasks(v []*int64) *UpdateAlertRuleRequestTriggerConditionTarget {
	s.AllowTasks = v
	return s
}

func (s *UpdateAlertRuleRequestTriggerConditionTarget) SetIds(v []*int64) *UpdateAlertRuleRequestTriggerConditionTarget {
	s.Ids = v
	return s
}

func (s *UpdateAlertRuleRequestTriggerConditionTarget) SetType(v string) *UpdateAlertRuleRequestTriggerConditionTarget {
	s.Type = &v
	return s
}

type UpdateAlertRuleShrinkRequest struct {
	// Specifies whether to enable the rule.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The rule ID.
	//
	// example:
	//
	// 105412
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the rule.
	//
	// example:
	//
	// collection_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configuration for the alert notification.
	NotificationShrink *string `json:"Notification,omitempty" xml:"Notification,omitempty"`
	// The ID of the Alibaba Cloud account used by the owner of the rule.
	//
	// example:
	//
	// 193379****
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The alert triggering condition.
	TriggerConditionShrink *string `json:"TriggerCondition,omitempty" xml:"TriggerCondition,omitempty"`
}

func (s UpdateAlertRuleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleShrinkRequest) SetEnabled(v bool) *UpdateAlertRuleShrinkRequest {
	s.Enabled = &v
	return s
}

func (s *UpdateAlertRuleShrinkRequest) SetId(v int64) *UpdateAlertRuleShrinkRequest {
	s.Id = &v
	return s
}

func (s *UpdateAlertRuleShrinkRequest) SetName(v string) *UpdateAlertRuleShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateAlertRuleShrinkRequest) SetNotificationShrink(v string) *UpdateAlertRuleShrinkRequest {
	s.NotificationShrink = &v
	return s
}

func (s *UpdateAlertRuleShrinkRequest) SetOwner(v string) *UpdateAlertRuleShrinkRequest {
	s.Owner = &v
	return s
}

func (s *UpdateAlertRuleShrinkRequest) SetTriggerConditionShrink(v string) *UpdateAlertRuleShrinkRequest {
	s.TriggerConditionShrink = &v
	return s
}

type UpdateAlertRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// D85FEE2B-6174-5817-AF9E-FDD02FEDA5BC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateAlertRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleResponseBody) SetRequestId(v string) *UpdateAlertRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAlertRuleResponseBody) SetSuccess(v bool) *UpdateAlertRuleResponseBody {
	s.Success = &v
	return s
}

type UpdateAlertRuleResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAlertRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAlertRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAlertRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateAlertRuleResponse) SetHeaders(v map[string]*string) *UpdateAlertRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateAlertRuleResponse) SetStatusCode(v int32) *UpdateAlertRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAlertRuleResponse) SetBody(v *UpdateAlertRuleResponseBody) *UpdateAlertRuleResponse {
	s.Body = v
	return s
}

type UpdateBusinessRequest struct {
	// The workflow ID.
	//
	// You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 300000
	BusinessId *int64 `json:"BusinessId,omitempty" xml:"BusinessId,omitempty"`
	// The name of the workflow.
	//
	// You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the name.
	//
	// example:
	//
	// MyBusiness
	BusinessName *string `json:"BusinessName,omitempty" xml:"BusinessName,omitempty"`
	// The description of the workflow.
	//
	// example:
	//
	// modified from my first business
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The owner of the workflow.
	//
	// You can call the [ListBusiness](https://help.aliyun.com/document_detail/173945.html) operation to query the owner.
	//
	// example:
	//
	// 348428****
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to obtain the workspace ID. You must configure either this parameter or the `ProjectIdentifier` parameter to determine the DataWorks workspace to which the operation is applied.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The name of the DataWorks workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the Workspace page to obtain the name. You must configure either this parameter or the `ProjectId` parameter to determine the DataWorks workspace to which the operation is applied.
	//
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s UpdateBusinessRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessRequest) GoString() string {
	return s.String()
}

func (s *UpdateBusinessRequest) SetBusinessId(v int64) *UpdateBusinessRequest {
	s.BusinessId = &v
	return s
}

func (s *UpdateBusinessRequest) SetBusinessName(v string) *UpdateBusinessRequest {
	s.BusinessName = &v
	return s
}

func (s *UpdateBusinessRequest) SetDescription(v string) *UpdateBusinessRequest {
	s.Description = &v
	return s
}

func (s *UpdateBusinessRequest) SetOwner(v string) *UpdateBusinessRequest {
	s.Owner = &v
	return s
}

func (s *UpdateBusinessRequest) SetProjectId(v int64) *UpdateBusinessRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateBusinessRequest) SetProjectIdentifier(v string) *UpdateBusinessRequest {
	s.ProjectIdentifier = &v
	return s
}

type UpdateBusinessResponseBody struct {
	// The error code.
	//
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message.
	//
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The HTTP status code.
	//
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateBusinessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateBusinessResponseBody) SetErrorCode(v string) *UpdateBusinessResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateBusinessResponseBody) SetErrorMessage(v string) *UpdateBusinessResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateBusinessResponseBody) SetHttpStatusCode(v int32) *UpdateBusinessResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateBusinessResponseBody) SetRequestId(v string) *UpdateBusinessResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateBusinessResponseBody) SetSuccess(v bool) *UpdateBusinessResponseBody {
	s.Success = &v
	return s
}

type UpdateBusinessResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateBusinessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateBusinessResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessResponse) GoString() string {
	return s.String()
}

func (s *UpdateBusinessResponse) SetHeaders(v map[string]*string) *UpdateBusinessResponse {
	s.Headers = v
	return s
}

func (s *UpdateBusinessResponse) SetStatusCode(v int32) *UpdateBusinessResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateBusinessResponse) SetBody(v *UpdateBusinessResponseBody) *UpdateBusinessResponse {
	s.Body = v
	return s
}

type UpdateColumnBusinessMetadataRequest struct {
	// example:
	//
	// test description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-column:11075xxxx::test_project:test_schema:test_table:test_column
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s UpdateColumnBusinessMetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateColumnBusinessMetadataRequest) GoString() string {
	return s.String()
}

func (s *UpdateColumnBusinessMetadataRequest) SetDescription(v string) *UpdateColumnBusinessMetadataRequest {
	s.Description = &v
	return s
}

func (s *UpdateColumnBusinessMetadataRequest) SetId(v string) *UpdateColumnBusinessMetadataRequest {
	s.Id = &v
	return s
}

type UpdateColumnBusinessMetadataResponseBody struct {
	// example:
	//
	// D1E2E5BC-xxxx-xxxx-xxxx-xxxxxx
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateColumnBusinessMetadataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateColumnBusinessMetadataResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateColumnBusinessMetadataResponseBody) SetRequestId(v string) *UpdateColumnBusinessMetadataResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateColumnBusinessMetadataResponseBody) SetSuccess(v bool) *UpdateColumnBusinessMetadataResponseBody {
	s.Success = &v
	return s
}

type UpdateColumnBusinessMetadataResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateColumnBusinessMetadataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateColumnBusinessMetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateColumnBusinessMetadataResponse) GoString() string {
	return s.String()
}

func (s *UpdateColumnBusinessMetadataResponse) SetHeaders(v map[string]*string) *UpdateColumnBusinessMetadataResponse {
	s.Headers = v
	return s
}

func (s *UpdateColumnBusinessMetadataResponse) SetStatusCode(v int32) *UpdateColumnBusinessMetadataResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateColumnBusinessMetadataResponse) SetBody(v *UpdateColumnBusinessMetadataResponseBody) *UpdateColumnBusinessMetadataResponse {
	s.Body = v
	return s
}

type UpdateDIAlarmRuleRequest struct {
	// Deprecated
	//
	// This parameter is deprecated. Use the Id parameter instead.
	//
	// example:
	//
	// 34982
	DIAlarmRuleId *int64 `json:"DIAlarmRuleId,omitempty" xml:"DIAlarmRuleId,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 1
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The description of the alert rule.
	//
	// example:
	//
	// The description of the alert rule.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the alert rule. By default, the alert rule is disabled.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The alert rule Id
	//
	// example:
	//
	// 34982
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The metric type in the alert rule. Valid values:
	//
	// 	- Heartbeat
	//
	// 	- FailoverCount
	//
	// 	- Delay
	//
	// 	- DdlReport
	//
	// 	- ResourceUtilization
	//
	// example:
	//
	// Heartbeat
	MetricType *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// alarm_rule_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The alert notification settings.
	NotificationSettings *UpdateDIAlarmRuleRequestNotificationSettings `json:"NotificationSettings,omitempty" xml:"NotificationSettings,omitempty" type:"Struct"`
	// The conditions that can trigger the alert rule.
	TriggerConditions []*UpdateDIAlarmRuleRequestTriggerConditions `json:"TriggerConditions,omitempty" xml:"TriggerConditions,omitempty" type:"Repeated"`
}

func (s UpdateDIAlarmRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIAlarmRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateDIAlarmRuleRequest) SetDIAlarmRuleId(v int64) *UpdateDIAlarmRuleRequest {
	s.DIAlarmRuleId = &v
	return s
}

func (s *UpdateDIAlarmRuleRequest) SetDIJobId(v int64) *UpdateDIAlarmRuleRequest {
	s.DIJobId = &v
	return s
}

func (s *UpdateDIAlarmRuleRequest) SetDescription(v string) *UpdateDIAlarmRuleRequest {
	s.Description = &v
	return s
}

func (s *UpdateDIAlarmRuleRequest) SetEnabled(v bool) *UpdateDIAlarmRuleRequest {
	s.Enabled = &v
	return s
}

func (s *UpdateDIAlarmRuleRequest) SetId(v int64) *UpdateDIAlarmRuleRequest {
	s.Id = &v
	return s
}

func (s *UpdateDIAlarmRuleRequest) SetMetricType(v string) *UpdateDIAlarmRuleRequest {
	s.MetricType = &v
	return s
}

func (s *UpdateDIAlarmRuleRequest) SetName(v string) *UpdateDIAlarmRuleRequest {
	s.Name = &v
	return s
}

func (s *UpdateDIAlarmRuleRequest) SetNotificationSettings(v *UpdateDIAlarmRuleRequestNotificationSettings) *UpdateDIAlarmRuleRequest {
	s.NotificationSettings = v
	return s
}

func (s *UpdateDIAlarmRuleRequest) SetTriggerConditions(v []*UpdateDIAlarmRuleRequestTriggerConditions) *UpdateDIAlarmRuleRequest {
	s.TriggerConditions = v
	return s
}

type UpdateDIAlarmRuleRequestNotificationSettings struct {
	// Deprecated
	//
	// This parameter is deprecated and replaced by the MuteInterval parameter.
	//
	// example:
	//
	// 5
	InhibitionInterval *int64 `json:"InhibitionInterval,omitempty" xml:"InhibitionInterval,omitempty"`
	// The duration of the alert suppression interval. Default value: 5. Unit: minutes.
	//
	// example:
	//
	// 5
	MuteInterval *int64 `json:"MuteInterval,omitempty" xml:"MuteInterval,omitempty"`
	// The alert notification methods.
	NotificationChannels []*UpdateDIAlarmRuleRequestNotificationSettingsNotificationChannels `json:"NotificationChannels,omitempty" xml:"NotificationChannels,omitempty" type:"Repeated"`
	// The settings of alert notification recipients.
	NotificationReceivers []*UpdateDIAlarmRuleRequestNotificationSettingsNotificationReceivers `json:"NotificationReceivers,omitempty" xml:"NotificationReceivers,omitempty" type:"Repeated"`
}

func (s UpdateDIAlarmRuleRequestNotificationSettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIAlarmRuleRequestNotificationSettings) GoString() string {
	return s.String()
}

func (s *UpdateDIAlarmRuleRequestNotificationSettings) SetInhibitionInterval(v int64) *UpdateDIAlarmRuleRequestNotificationSettings {
	s.InhibitionInterval = &v
	return s
}

func (s *UpdateDIAlarmRuleRequestNotificationSettings) SetMuteInterval(v int64) *UpdateDIAlarmRuleRequestNotificationSettings {
	s.MuteInterval = &v
	return s
}

func (s *UpdateDIAlarmRuleRequestNotificationSettings) SetNotificationChannels(v []*UpdateDIAlarmRuleRequestNotificationSettingsNotificationChannels) *UpdateDIAlarmRuleRequestNotificationSettings {
	s.NotificationChannels = v
	return s
}

func (s *UpdateDIAlarmRuleRequestNotificationSettings) SetNotificationReceivers(v []*UpdateDIAlarmRuleRequestNotificationSettingsNotificationReceivers) *UpdateDIAlarmRuleRequestNotificationSettings {
	s.NotificationReceivers = v
	return s
}

type UpdateDIAlarmRuleRequestNotificationSettingsNotificationChannels struct {
	// The alert notification method. Valid values:
	//
	// 	- Mail
	//
	// 	- Phone
	//
	// 	- Sms
	//
	// 	- Ding
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
	// The severity level. Valid values:
	//
	// 	- Warning
	//
	// 	- Critical
	//
	// example:
	//
	// Warning
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
}

func (s UpdateDIAlarmRuleRequestNotificationSettingsNotificationChannels) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIAlarmRuleRequestNotificationSettingsNotificationChannels) GoString() string {
	return s.String()
}

func (s *UpdateDIAlarmRuleRequestNotificationSettingsNotificationChannels) SetChannels(v []*string) *UpdateDIAlarmRuleRequestNotificationSettingsNotificationChannels {
	s.Channels = v
	return s
}

func (s *UpdateDIAlarmRuleRequestNotificationSettingsNotificationChannels) SetSeverity(v string) *UpdateDIAlarmRuleRequestNotificationSettingsNotificationChannels {
	s.Severity = &v
	return s
}

type UpdateDIAlarmRuleRequestNotificationSettingsNotificationReceivers struct {
	// The recipient type. Valid values: AliyunUid, DingToken, FeishuToken, and WebHookUrl.
	//
	// example:
	//
	// DingToken
	ReceiverType *string `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	// The recipient.
	//
	// 	- If the ReceiverType parameter is set to AliyunUid, set this parameter to the Alibaba Cloud account ID of a user.
	//
	// 	- If the ReceiverType parameter is set to DingToken, set this parameter to the token of a DingTalk chatbot.
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s UpdateDIAlarmRuleRequestNotificationSettingsNotificationReceivers) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIAlarmRuleRequestNotificationSettingsNotificationReceivers) GoString() string {
	return s.String()
}

func (s *UpdateDIAlarmRuleRequestNotificationSettingsNotificationReceivers) SetReceiverType(v string) *UpdateDIAlarmRuleRequestNotificationSettingsNotificationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *UpdateDIAlarmRuleRequestNotificationSettingsNotificationReceivers) SetReceiverValues(v []*string) *UpdateDIAlarmRuleRequestNotificationSettingsNotificationReceivers {
	s.ReceiverValues = v
	return s
}

type UpdateDIAlarmRuleRequestTriggerConditions struct {
	// Deprecated
	//
	// This parameter is deprecated and replaced by the DdlTypes parameter.
	DdlReportTags []*string `json:"DdlReportTags,omitempty" xml:"DdlReportTags,omitempty" type:"Repeated"`
	// The types of DDL operations for which the alert rule takes effect.
	DdlTypes []*string `json:"DdlTypes,omitempty" xml:"DdlTypes,omitempty" type:"Repeated"`
	// The time interval for alert calculation. Unit: minutes.
	//
	// example:
	//
	// 15
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The severity level. Valid values:
	//
	// 	- Warning
	//
	// 	- Critical
	//
	// example:
	//
	// Warning
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The alert threshold.
	//
	// 	- If the alert rule is for task status, you do not need to specify a threshold.
	//
	// 	- If the alert rule is for failovers, you must specify the number of failovers.
	//
	// 	- If the alert rule is for latency, you must specify the latency duration, in seconds.
	//
	// example:
	//
	// 5
	Threshold *int64 `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
}

func (s UpdateDIAlarmRuleRequestTriggerConditions) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIAlarmRuleRequestTriggerConditions) GoString() string {
	return s.String()
}

func (s *UpdateDIAlarmRuleRequestTriggerConditions) SetDdlReportTags(v []*string) *UpdateDIAlarmRuleRequestTriggerConditions {
	s.DdlReportTags = v
	return s
}

func (s *UpdateDIAlarmRuleRequestTriggerConditions) SetDdlTypes(v []*string) *UpdateDIAlarmRuleRequestTriggerConditions {
	s.DdlTypes = v
	return s
}

func (s *UpdateDIAlarmRuleRequestTriggerConditions) SetDuration(v int64) *UpdateDIAlarmRuleRequestTriggerConditions {
	s.Duration = &v
	return s
}

func (s *UpdateDIAlarmRuleRequestTriggerConditions) SetSeverity(v string) *UpdateDIAlarmRuleRequestTriggerConditions {
	s.Severity = &v
	return s
}

func (s *UpdateDIAlarmRuleRequestTriggerConditions) SetThreshold(v int64) *UpdateDIAlarmRuleRequestTriggerConditions {
	s.Threshold = &v
	return s
}

type UpdateDIAlarmRuleShrinkRequest struct {
	// Deprecated
	//
	// This parameter is deprecated. Use the Id parameter instead.
	//
	// example:
	//
	// 34982
	DIAlarmRuleId *int64 `json:"DIAlarmRuleId,omitempty" xml:"DIAlarmRuleId,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 1
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The description of the alert rule.
	//
	// example:
	//
	// The description of the alert rule.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the alert rule. By default, the alert rule is disabled.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The alert rule Id
	//
	// example:
	//
	// 34982
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The metric type in the alert rule. Valid values:
	//
	// 	- Heartbeat
	//
	// 	- FailoverCount
	//
	// 	- Delay
	//
	// 	- DdlReport
	//
	// 	- ResourceUtilization
	//
	// example:
	//
	// Heartbeat
	MetricType *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// alarm_rule_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The alert notification settings.
	NotificationSettingsShrink *string `json:"NotificationSettings,omitempty" xml:"NotificationSettings,omitempty"`
	// The conditions that can trigger the alert rule.
	TriggerConditionsShrink *string `json:"TriggerConditions,omitempty" xml:"TriggerConditions,omitempty"`
}

func (s UpdateDIAlarmRuleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIAlarmRuleShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateDIAlarmRuleShrinkRequest) SetDIAlarmRuleId(v int64) *UpdateDIAlarmRuleShrinkRequest {
	s.DIAlarmRuleId = &v
	return s
}

func (s *UpdateDIAlarmRuleShrinkRequest) SetDIJobId(v int64) *UpdateDIAlarmRuleShrinkRequest {
	s.DIJobId = &v
	return s
}

func (s *UpdateDIAlarmRuleShrinkRequest) SetDescription(v string) *UpdateDIAlarmRuleShrinkRequest {
	s.Description = &v
	return s
}

func (s *UpdateDIAlarmRuleShrinkRequest) SetEnabled(v bool) *UpdateDIAlarmRuleShrinkRequest {
	s.Enabled = &v
	return s
}

func (s *UpdateDIAlarmRuleShrinkRequest) SetId(v int64) *UpdateDIAlarmRuleShrinkRequest {
	s.Id = &v
	return s
}

func (s *UpdateDIAlarmRuleShrinkRequest) SetMetricType(v string) *UpdateDIAlarmRuleShrinkRequest {
	s.MetricType = &v
	return s
}

func (s *UpdateDIAlarmRuleShrinkRequest) SetName(v string) *UpdateDIAlarmRuleShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateDIAlarmRuleShrinkRequest) SetNotificationSettingsShrink(v string) *UpdateDIAlarmRuleShrinkRequest {
	s.NotificationSettingsShrink = &v
	return s
}

func (s *UpdateDIAlarmRuleShrinkRequest) SetTriggerConditionsShrink(v string) *UpdateDIAlarmRuleShrinkRequest {
	s.TriggerConditionsShrink = &v
	return s
}

type UpdateDIAlarmRuleResponseBody struct {
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// A6C6B486-E3A2-5D52-9E76-D9380485D946
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDIAlarmRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIAlarmRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDIAlarmRuleResponseBody) SetRequestId(v string) *UpdateDIAlarmRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDIAlarmRuleResponseBody) SetSuccess(v bool) *UpdateDIAlarmRuleResponseBody {
	s.Success = &v
	return s
}

type UpdateDIAlarmRuleResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDIAlarmRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDIAlarmRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIAlarmRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateDIAlarmRuleResponse) SetHeaders(v map[string]*string) *UpdateDIAlarmRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateDIAlarmRuleResponse) SetStatusCode(v int32) *UpdateDIAlarmRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDIAlarmRuleResponse) SetBody(v *UpdateDIAlarmRuleResponseBody) *UpdateDIAlarmRuleResponse {
	s.Body = v
	return s
}

type UpdateDIJobRequest struct {
	// Deprecated
	//
	// This parameter is deprecated. Use the Id parameter instead.
	//
	// example:
	//
	// 11588
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The description of the synchronization task.
	//
	// example:
	//
	// The description of the synchronization task.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 11588
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The settings for the dimension of the synchronization task. The settings include processing policies for DDL messages, policies for data type mappings between source fields and destination fields, and runtime parameters of the synchronization task.
	JobSettings *UpdateDIJobRequestJobSettings `json:"JobSettings,omitempty" xml:"JobSettings,omitempty" type:"Struct"`
	// The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the operation is applied.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The resource settings.
	ResourceSettings *UpdateDIJobRequestResourceSettings `json:"ResourceSettings,omitempty" xml:"ResourceSettings,omitempty" type:"Struct"`
	// The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.
	//
	// >  [ { "SourceObjectSelectionRules":[ { "ObjectType":"Database", "Action":"Include", "ExpressionType":"Exact", "Expression":"biz_db" }, { "ObjectType":"Schema", "Action":"Include", "ExpressionType":"Exact", "Expression":"s1" }, { "ObjectType":"Table", "Action":"Include", "ExpressionType":"Exact", "Expression":"table1" } ], "TransformationRuleNames":[ { "RuleName":"my_database_rename_rule", "RuleActionType":"Rename", "RuleTargetType":"Schema" } ] } ]
	TableMappings []*UpdateDIJobRequestTableMappings `json:"TableMappings,omitempty" xml:"TableMappings,omitempty" type:"Repeated"`
	// The list of transformation rules for objects involved in the synchronization task.
	//
	// >  [ { "RuleName":"my_database_rename_rule", "RuleActionType":"Rename", "RuleTargetType":"Schema", "RuleExpression":"{"expression":"${srcDatasoureName}_${srcDatabaseName}"}" } ]
	TransformationRules []*UpdateDIJobRequestTransformationRules `json:"TransformationRules,omitempty" xml:"TransformationRules,omitempty" type:"Repeated"`
}

func (s UpdateDIJobRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequest) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequest) SetDIJobId(v int64) *UpdateDIJobRequest {
	s.DIJobId = &v
	return s
}

func (s *UpdateDIJobRequest) SetDescription(v string) *UpdateDIJobRequest {
	s.Description = &v
	return s
}

func (s *UpdateDIJobRequest) SetId(v int64) *UpdateDIJobRequest {
	s.Id = &v
	return s
}

func (s *UpdateDIJobRequest) SetJobSettings(v *UpdateDIJobRequestJobSettings) *UpdateDIJobRequest {
	s.JobSettings = v
	return s
}

func (s *UpdateDIJobRequest) SetProjectId(v int64) *UpdateDIJobRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateDIJobRequest) SetResourceSettings(v *UpdateDIJobRequestResourceSettings) *UpdateDIJobRequest {
	s.ResourceSettings = v
	return s
}

func (s *UpdateDIJobRequest) SetTableMappings(v []*UpdateDIJobRequestTableMappings) *UpdateDIJobRequest {
	s.TableMappings = v
	return s
}

func (s *UpdateDIJobRequest) SetTransformationRules(v []*UpdateDIJobRequestTransformationRules) *UpdateDIJobRequest {
	s.TransformationRules = v
	return s
}

type UpdateDIJobRequestJobSettings struct {
	// The channel control settings for the synchronization task. You can configure special channel control settings for the following synchronization links: data synchronization between Hologres data sources and data synchronization from Hologres to Kafka.
	//
	// 1.  Holo2Kafka
	//
	// 	- Example: {"destinationChannelSettings":{"kafkaClientProperties":[{"key":"linger.ms","value":"100"}],"keyColumns":["col3"],"writeMode":"canal"}}
	//
	// 	- kafkaClientProperties: the parameters related to a Kafka producer, which are used when you read data from a Kafka data source.
	//
	// 	- keyColumns: the names of Kafka columns to which you want to write data.
	//
	// 	- writeMode: the writing format. Valid values: json and canal.
	//
	// 2.  Holo2Holo
	//
	// 	- Example: {"destinationChannelSettings":{"conflictMode":"replace","dynamicColumnAction":"replay","writeMode":"replay"}}
	//
	// 	- conflictMode: the policy used to handle a conflict that occurs during data writing to Hologres. Valid values: replace and ignore.
	//
	// 	- writeMode: the mode in which you want to write data to Hologres. Valid values: replay and insert.
	//
	// 	- dynamicColumnAction: the mode in which you want to write data to dynamic columns in a Hologres table. Valid values: replay, insert, and ignore.
	//
	// example:
	//
	// {"structInfo":"MANAGED","storageType":"TEXTFILE","writeMode":"APPEND","partitionColumns":[{"columnName":"pt","columnType":"STRING","comment":""}],"fieldDelimiter":""}
	ChannelSettings *string `json:"ChannelSettings,omitempty" xml:"ChannelSettings,omitempty"`
	// The data type mappings between source fields and destination fields.
	//
	// >  "ColumnDataTypeSettings":[ { "SourceDataType":"Bigint", "DestinationDataType":"Text" } ]
	ColumnDataTypeSettings []*UpdateDIJobRequestJobSettingsColumnDataTypeSettings `json:"ColumnDataTypeSettings,omitempty" xml:"ColumnDataTypeSettings,omitempty" type:"Repeated"`
	// The settings for periodic scheduling.
	CycleScheduleSettings *UpdateDIJobRequestJobSettingsCycleScheduleSettings `json:"CycleScheduleSettings,omitempty" xml:"CycleScheduleSettings,omitempty" type:"Struct"`
	// The processing settings for DDL messages.
	//
	// >  "DDLHandlingSettings":[ { "Type":"Insert", "Action":"Normal" } ]
	DdlHandlingSettings []*UpdateDIJobRequestJobSettingsDdlHandlingSettings `json:"DdlHandlingSettings,omitempty" xml:"DdlHandlingSettings,omitempty" type:"Repeated"`
	// The runtime settings.
	RuntimeSettings []*UpdateDIJobRequestJobSettingsRuntimeSettings `json:"RuntimeSettings,omitempty" xml:"RuntimeSettings,omitempty" type:"Repeated"`
}

func (s UpdateDIJobRequestJobSettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequestJobSettings) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequestJobSettings) SetChannelSettings(v string) *UpdateDIJobRequestJobSettings {
	s.ChannelSettings = &v
	return s
}

func (s *UpdateDIJobRequestJobSettings) SetColumnDataTypeSettings(v []*UpdateDIJobRequestJobSettingsColumnDataTypeSettings) *UpdateDIJobRequestJobSettings {
	s.ColumnDataTypeSettings = v
	return s
}

func (s *UpdateDIJobRequestJobSettings) SetCycleScheduleSettings(v *UpdateDIJobRequestJobSettingsCycleScheduleSettings) *UpdateDIJobRequestJobSettings {
	s.CycleScheduleSettings = v
	return s
}

func (s *UpdateDIJobRequestJobSettings) SetDdlHandlingSettings(v []*UpdateDIJobRequestJobSettingsDdlHandlingSettings) *UpdateDIJobRequestJobSettings {
	s.DdlHandlingSettings = v
	return s
}

func (s *UpdateDIJobRequestJobSettings) SetRuntimeSettings(v []*UpdateDIJobRequestJobSettingsRuntimeSettings) *UpdateDIJobRequestJobSettings {
	s.RuntimeSettings = v
	return s
}

type UpdateDIJobRequestJobSettingsColumnDataTypeSettings struct {
	// The data type of the destination field. Valid values: bigint, boolean, string, text, datetime, timestamp, decimal, and binary. Different types of data sources support different data types.
	//
	// example:
	//
	// text
	DestinationDataType *string `json:"DestinationDataType,omitempty" xml:"DestinationDataType,omitempty"`
	// The data type of the source field. Valid values: Valid values: bigint, boolean, string, text, datetime, timestamp, decimal, and binary. Different types of data sources support different data types.
	//
	// example:
	//
	// bigint
	SourceDataType *string `json:"SourceDataType,omitempty" xml:"SourceDataType,omitempty"`
}

func (s UpdateDIJobRequestJobSettingsColumnDataTypeSettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequestJobSettingsColumnDataTypeSettings) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequestJobSettingsColumnDataTypeSettings) SetDestinationDataType(v string) *UpdateDIJobRequestJobSettingsColumnDataTypeSettings {
	s.DestinationDataType = &v
	return s
}

func (s *UpdateDIJobRequestJobSettingsColumnDataTypeSettings) SetSourceDataType(v string) *UpdateDIJobRequestJobSettingsColumnDataTypeSettings {
	s.SourceDataType = &v
	return s
}

type UpdateDIJobRequestJobSettingsCycleScheduleSettings struct {
	// The scheduling parameters.
	//
	// example:
	//
	// bizdate=$bizdate
	ScheduleParameters *string `json:"ScheduleParameters,omitempty" xml:"ScheduleParameters,omitempty"`
}

func (s UpdateDIJobRequestJobSettingsCycleScheduleSettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequestJobSettingsCycleScheduleSettings) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequestJobSettingsCycleScheduleSettings) SetScheduleParameters(v string) *UpdateDIJobRequestJobSettingsCycleScheduleSettings {
	s.ScheduleParameters = &v
	return s
}

type UpdateDIJobRequestJobSettingsDdlHandlingSettings struct {
	// The processing policy. Valid values:
	//
	// 	- Ignore: ignores a DDL message.
	//
	// 	- Critical: reports an error for a DDL message.
	//
	// 	- Normal: normally processes a DDL message.
	//
	// example:
	//
	// Critical
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// The type of the DDL operation. Valid values:
	//
	// 	- RenameColumn
	//
	// 	- ModifyColumn
	//
	// 	- CreateTable
	//
	// 	- TruncateTable
	//
	// 	- DropTable
	//
	// 	- DropColumn
	//
	// 	- AddColumn
	//
	// example:
	//
	// AddColumn
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateDIJobRequestJobSettingsDdlHandlingSettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequestJobSettingsDdlHandlingSettings) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequestJobSettingsDdlHandlingSettings) SetAction(v string) *UpdateDIJobRequestJobSettingsDdlHandlingSettings {
	s.Action = &v
	return s
}

func (s *UpdateDIJobRequestJobSettingsDdlHandlingSettings) SetType(v string) *UpdateDIJobRequestJobSettingsDdlHandlingSettings {
	s.Type = &v
	return s
}

type UpdateDIJobRequestJobSettingsRuntimeSettings struct {
	// The name of the configuration item. Valid values:
	//
	// 	- src.offline.datasource.max.connection: specifies the maximum number of connections that are allowed for reading data from the source of a batch synchronization task.
	//
	// 	- dst.offline.truncate: specifies whether to clear the destination table before data writing.
	//
	// 	- runtime.offline.speed.limit.enable: specifies whether throttling is enabled for a batch synchronization task.
	//
	// 	- runtime.offline.concurrent: specifies the maximum number of parallel threads that are allowed for a batch synchronization task.
	//
	// 	- runtime.enable.auto.create.schema: specifies whether schemas are automatically created in the destination of a synchronization task.
	//
	// 	- runtime.realtime.concurrent: specifies the maximum number of parallel threads that are allowed for a real-time synchronization task.
	//
	// 	- runtime.realtime.failover.minute.dataxcdc: specifies the maximum waiting duration before a synchronization task retries the next restart if the previous restart fails after failover occurs. Unit: minutes.
	//
	// 	- runtime.realtime.failover.times.dataxcdc: specifies the maximum number of failures that are allowed for restarting a synchronization task after failovers occur.
	//
	// example:
	//
	// runtime.offline.concurrent
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the configuration item.
	//
	// example:
	//
	// 1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateDIJobRequestJobSettingsRuntimeSettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequestJobSettingsRuntimeSettings) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequestJobSettingsRuntimeSettings) SetName(v string) *UpdateDIJobRequestJobSettingsRuntimeSettings {
	s.Name = &v
	return s
}

func (s *UpdateDIJobRequestJobSettingsRuntimeSettings) SetValue(v string) *UpdateDIJobRequestJobSettingsRuntimeSettings {
	s.Value = &v
	return s
}

type UpdateDIJobRequestResourceSettings struct {
	// The resource used for batch synchronization.
	OfflineResourceSettings *UpdateDIJobRequestResourceSettingsOfflineResourceSettings `json:"OfflineResourceSettings,omitempty" xml:"OfflineResourceSettings,omitempty" type:"Struct"`
	// The resource used for real-time synchronization.
	RealtimeResourceSettings *UpdateDIJobRequestResourceSettingsRealtimeResourceSettings `json:"RealtimeResourceSettings,omitempty" xml:"RealtimeResourceSettings,omitempty" type:"Struct"`
	// The resource used for scheduling.
	ScheduleResourceSettings *UpdateDIJobRequestResourceSettingsScheduleResourceSettings `json:"ScheduleResourceSettings,omitempty" xml:"ScheduleResourceSettings,omitempty" type:"Struct"`
}

func (s UpdateDIJobRequestResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequestResourceSettings) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequestResourceSettings) SetOfflineResourceSettings(v *UpdateDIJobRequestResourceSettingsOfflineResourceSettings) *UpdateDIJobRequestResourceSettings {
	s.OfflineResourceSettings = v
	return s
}

func (s *UpdateDIJobRequestResourceSettings) SetRealtimeResourceSettings(v *UpdateDIJobRequestResourceSettingsRealtimeResourceSettings) *UpdateDIJobRequestResourceSettings {
	s.RealtimeResourceSettings = v
	return s
}

func (s *UpdateDIJobRequestResourceSettings) SetScheduleResourceSettings(v *UpdateDIJobRequestResourceSettingsScheduleResourceSettings) *UpdateDIJobRequestResourceSettings {
	s.ScheduleResourceSettings = v
	return s
}

type UpdateDIJobRequestResourceSettingsOfflineResourceSettings struct {
	// The number of compute units (CUs) in the resource group for Data Integration that are used for batch synchronization.
	//
	// example:
	//
	// 2.0
	RequestedCu *float64 `json:"RequestedCu,omitempty" xml:"RequestedCu,omitempty"`
	// The name of the resource group for Data Integration used for batch synchronization.
	//
	// example:
	//
	// S_res_group_111_222
	ResourceGroupIdentifier *string `json:"ResourceGroupIdentifier,omitempty" xml:"ResourceGroupIdentifier,omitempty"`
}

func (s UpdateDIJobRequestResourceSettingsOfflineResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequestResourceSettingsOfflineResourceSettings) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequestResourceSettingsOfflineResourceSettings) SetRequestedCu(v float64) *UpdateDIJobRequestResourceSettingsOfflineResourceSettings {
	s.RequestedCu = &v
	return s
}

func (s *UpdateDIJobRequestResourceSettingsOfflineResourceSettings) SetResourceGroupIdentifier(v string) *UpdateDIJobRequestResourceSettingsOfflineResourceSettings {
	s.ResourceGroupIdentifier = &v
	return s
}

type UpdateDIJobRequestResourceSettingsRealtimeResourceSettings struct {
	// The number of CUs in the resource group for Data Integration that are used for real-time synchronization.
	//
	// example:
	//
	// 2.0
	RequestedCu *float64 `json:"RequestedCu,omitempty" xml:"RequestedCu,omitempty"`
	// The name of the resource group for Data Integration used for real-time synchronization.
	//
	// example:
	//
	// S_res_group_111_222
	ResourceGroupIdentifier *string `json:"ResourceGroupIdentifier,omitempty" xml:"ResourceGroupIdentifier,omitempty"`
}

func (s UpdateDIJobRequestResourceSettingsRealtimeResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequestResourceSettingsRealtimeResourceSettings) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequestResourceSettingsRealtimeResourceSettings) SetRequestedCu(v float64) *UpdateDIJobRequestResourceSettingsRealtimeResourceSettings {
	s.RequestedCu = &v
	return s
}

func (s *UpdateDIJobRequestResourceSettingsRealtimeResourceSettings) SetResourceGroupIdentifier(v string) *UpdateDIJobRequestResourceSettingsRealtimeResourceSettings {
	s.ResourceGroupIdentifier = &v
	return s
}

type UpdateDIJobRequestResourceSettingsScheduleResourceSettings struct {
	// The number of CUs in the resource group for scheduling that are used for batch synchronization.
	//
	// example:
	//
	// 2.0
	RequestedCu *float64 `json:"RequestedCu,omitempty" xml:"RequestedCu,omitempty"`
	// The name of the resource group for scheduling used for batch synchronization.
	//
	// example:
	//
	// S_res_group_235454102432001_1721021993437
	ResourceGroupIdentifier *string `json:"ResourceGroupIdentifier,omitempty" xml:"ResourceGroupIdentifier,omitempty"`
}

func (s UpdateDIJobRequestResourceSettingsScheduleResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequestResourceSettingsScheduleResourceSettings) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequestResourceSettingsScheduleResourceSettings) SetRequestedCu(v float64) *UpdateDIJobRequestResourceSettingsScheduleResourceSettings {
	s.RequestedCu = &v
	return s
}

func (s *UpdateDIJobRequestResourceSettingsScheduleResourceSettings) SetResourceGroupIdentifier(v string) *UpdateDIJobRequestResourceSettingsScheduleResourceSettings {
	s.ResourceGroupIdentifier = &v
	return s
}

type UpdateDIJobRequestTableMappings struct {
	// The list of rules that you want to use to select synchronization objects in the source.
	SourceObjectSelectionRules []*UpdateDIJobRequestTableMappingsSourceObjectSelectionRules `json:"SourceObjectSelectionRules,omitempty" xml:"SourceObjectSelectionRules,omitempty" type:"Repeated"`
	// The transformation rules that you want to apply to the synchronization objects selected from the source.
	TransformationRules []*UpdateDIJobRequestTableMappingsTransformationRules `json:"TransformationRules,omitempty" xml:"TransformationRules,omitempty" type:"Repeated"`
}

func (s UpdateDIJobRequestTableMappings) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequestTableMappings) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequestTableMappings) SetSourceObjectSelectionRules(v []*UpdateDIJobRequestTableMappingsSourceObjectSelectionRules) *UpdateDIJobRequestTableMappings {
	s.SourceObjectSelectionRules = v
	return s
}

func (s *UpdateDIJobRequestTableMappings) SetTransformationRules(v []*UpdateDIJobRequestTableMappingsTransformationRules) *UpdateDIJobRequestTableMappings {
	s.TransformationRules = v
	return s
}

type UpdateDIJobRequestTableMappingsSourceObjectSelectionRules struct {
	// The operation that is performed to select objects. Valid values: Include and Exclude.
	//
	// example:
	//
	// Include
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// The expression.
	//
	// example:
	//
	// mysql_table_1
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The expression type. Valid values: Exact and Regex.
	//
	// example:
	//
	// Exact
	ExpressionType *string `json:"ExpressionType,omitempty" xml:"ExpressionType,omitempty"`
	// The object type. Valid values:
	//
	// 	- Table
	//
	// 	- Schema
	//
	// 	- Database
	//
	// example:
	//
	// Table
	ObjectType *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
}

func (s UpdateDIJobRequestTableMappingsSourceObjectSelectionRules) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequestTableMappingsSourceObjectSelectionRules) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequestTableMappingsSourceObjectSelectionRules) SetAction(v string) *UpdateDIJobRequestTableMappingsSourceObjectSelectionRules {
	s.Action = &v
	return s
}

func (s *UpdateDIJobRequestTableMappingsSourceObjectSelectionRules) SetExpression(v string) *UpdateDIJobRequestTableMappingsSourceObjectSelectionRules {
	s.Expression = &v
	return s
}

func (s *UpdateDIJobRequestTableMappingsSourceObjectSelectionRules) SetExpressionType(v string) *UpdateDIJobRequestTableMappingsSourceObjectSelectionRules {
	s.ExpressionType = &v
	return s
}

func (s *UpdateDIJobRequestTableMappingsSourceObjectSelectionRules) SetObjectType(v string) *UpdateDIJobRequestTableMappingsSourceObjectSelectionRules {
	s.ObjectType = &v
	return s
}

type UpdateDIJobRequestTableMappingsTransformationRules struct {
	// The action type. Valid values:
	//
	// 	- DefinePrimaryKey
	//
	// 	- Rename
	//
	// 	- AddColumn
	//
	// 	- HandleDml
	//
	// example:
	//
	// Rename
	RuleActionType *string `json:"RuleActionType,omitempty" xml:"RuleActionType,omitempty"`
	// The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.
	//
	// example:
	//
	// rename_rule_1
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The type of the object on which you want to perform the action. Valid values:
	//
	// 	- Table
	//
	// 	- Schema
	//
	// 	- Database
	//
	// example:
	//
	// Table
	RuleTargetType *string `json:"RuleTargetType,omitempty" xml:"RuleTargetType,omitempty"`
}

func (s UpdateDIJobRequestTableMappingsTransformationRules) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequestTableMappingsTransformationRules) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequestTableMappingsTransformationRules) SetRuleActionType(v string) *UpdateDIJobRequestTableMappingsTransformationRules {
	s.RuleActionType = &v
	return s
}

func (s *UpdateDIJobRequestTableMappingsTransformationRules) SetRuleName(v string) *UpdateDIJobRequestTableMappingsTransformationRules {
	s.RuleName = &v
	return s
}

func (s *UpdateDIJobRequestTableMappingsTransformationRules) SetRuleTargetType(v string) *UpdateDIJobRequestTableMappingsTransformationRules {
	s.RuleTargetType = &v
	return s
}

type UpdateDIJobRequestTransformationRules struct {
	// The action type. Valid values:
	//
	// 	- DefinePrimaryKey
	//
	// 	- Rename
	//
	// 	- AddColumn
	//
	// 	- HandleDml
	//
	// 	- DefineIncrementalCondition
	//
	// 	- DefineCycleScheduleSettings
	//
	// 	- DefinePartitionKey
	//
	// example:
	//
	// Rename
	RuleActionType *string `json:"RuleActionType,omitempty" xml:"RuleActionType,omitempty"`
	// The expression of the rule. The expression must be a JSON string.
	//
	// 1.  Example of a renaming rule
	//
	// 	- Example: {"expression":"${srcDatasourceName}_${srcDatabaseName}_0922" }
	//
	// 	- expression: the expression of the renaming rule. You can use the following variables in an expression: ${srcDatasourceName}, ${srcDatabaseName}, and ${srcTableName}. ${srcDatasourceName} specifies the name of the source. ${srcDatabaseName} specifies the name of a source database. ${srcTableName} specifies the name of a source table.
	//
	// 2.  Example of a column addition rule
	//
	// 	- Example: {"columns":[{"columnName":"my_add_column","columnValueType":"Constant","columnValue":"123"}]}
	//
	// 	- If you do not configure such a rule, no fields are added to the destination and no values are assigned by default.
	//
	// 	- columnName: the name of the field that is added.
	//
	// 	- columnValueType: the value type of the field. Valid values: Constant and Variable.
	//
	// 	- columnValue: the value of the field. If the columnValueType parameter is set to Constant, set the columnValue parameter to a constant of the STRING data type. If the columnValueType parameter is set to Variable, set the columnValue parameter to a built-in variable. The following built-in variables are supported: EXECUTE_TIME (LONG data type), DB_NAME_SRC (STRING data type), DATASOURCE_NAME_SRC (STRING data type), TABLE_NAME_SRC (STRING data type), DB_NAME_DEST (STRING data type), DATASOURCE_NAME_DEST (STRING data type), TABLE_NAME_DEST (STRING data type), and DB_NAME_SRC_TRANSED (STRING data type). EXECUTE_TIME specifies the execution time. DB_NAME_SRC specifies the name of a source database. DATASOURCE_NAME_SRC specifies the name of the source. TABLE_NAME_SRC specifies the name of a source table. DB_NAME_DEST specifies the name of a destination database. DATASOURCE_NAME_DEST specifies the name of the destination. TABLE_NAME_DEST specifies the name of a destination table. DB_NAME_SRC_TRANSED specifies the database name obtained after a transformation.
	//
	// 3.  Example of a rule used to specify primary key fields for a destination table
	//
	// 	- Example: {"columns":["ukcolumn1","ukcolumn2"]}
	//
	// 	- If you do not configure such a rule, the primary key fields in the mapped source table are used for the destination table by default.
	//
	// 	- If the destination table is an existing table, Data Integration does not modify the schema of the destination table. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.
	//
	// 	- If the destination table is automatically created by the system, Data Integration automatically creates the schema of the destination table. The schema contains the primary key fields that you specify. If the specified primary key fields do not exist in the destination table, an error is reported when the synchronization task starts to run.
	//
	// 4.  Example of a rule used to process DML messages
	//
	// 	- Example: {"dmlPolicies":[{"dmlType":"Delete","dmlAction":"Filter","filterCondition":"id > 1"}]}
	//
	// 	- If you do not configure such a rule, the default processing policy for messages generated for insert, update, and delete operations is Normal.
	//
	// 	- dmlType: the DML operation. Valid values: Insert, Update, and Delete.
	//
	// 	- dmlAction: the processing policy for DML messages. Valid values: Normal, Ignore, Filter, and LogicalDelete. Filter indicates conditional processing. You can set the dmlAction parameter to Filter only when the dmlType parameter is set to Update or Delete.
	//
	// 	- filterCondition: the condition used to filter DML messages. This parameter is required only when the dmlAction parameter is set to Filter.
	//
	// 5.  Example of a rule used to perform incremental synchronization
	//
	// 	- Example: {"where":"id > 0"}
	//
	// 	- You can configure such a rule to perform incremental synchronization.
	//
	// 6.  Example of a rule used to configure scheduling parameters for an auto triggered task
	//
	// 	- Example: {"cronExpress":" \\	- \\	- \\	- \\	- \\	- \\*", "cycleType":"1"}
	//
	// 	- You can configure such a rule to configure scheduling parameters for an auto triggered task.
	//
	// 7.  Example of a rule used to specify a partition key
	//
	// 	- Example: {"columns":["id"]}
	//
	// 	- You can configure such a rule to specify a partition key.
	//
	// example:
	//
	// {"expression":"${srcDatasoureName}_${srcDatabaseName}"}
	RuleExpression *string `json:"RuleExpression,omitempty" xml:"RuleExpression,omitempty"`
	// The name of the rule. If the values of the RuleActionType parameter and the RuleTargetType parameter are the same for multiple transformation rules, you must make sure that the transformation rule names are unique.
	//
	// example:
	//
	// rename_rule_1
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The type of the object on which you want to perform the action. Valid values:
	//
	// 	- Table
	//
	// 	- Schema
	//
	// 	- Database
	//
	// example:
	//
	// Table
	RuleTargetType *string `json:"RuleTargetType,omitempty" xml:"RuleTargetType,omitempty"`
}

func (s UpdateDIJobRequestTransformationRules) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobRequestTransformationRules) GoString() string {
	return s.String()
}

func (s *UpdateDIJobRequestTransformationRules) SetRuleActionType(v string) *UpdateDIJobRequestTransformationRules {
	s.RuleActionType = &v
	return s
}

func (s *UpdateDIJobRequestTransformationRules) SetRuleExpression(v string) *UpdateDIJobRequestTransformationRules {
	s.RuleExpression = &v
	return s
}

func (s *UpdateDIJobRequestTransformationRules) SetRuleName(v string) *UpdateDIJobRequestTransformationRules {
	s.RuleName = &v
	return s
}

func (s *UpdateDIJobRequestTransformationRules) SetRuleTargetType(v string) *UpdateDIJobRequestTransformationRules {
	s.RuleTargetType = &v
	return s
}

type UpdateDIJobShrinkRequest struct {
	// Deprecated
	//
	// This parameter is deprecated. Use the Id parameter instead.
	//
	// example:
	//
	// 11588
	DIJobId *int64 `json:"DIJobId,omitempty" xml:"DIJobId,omitempty"`
	// The description of the synchronization task.
	//
	// example:
	//
	// The description of the synchronization task.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the synchronization task.
	//
	// example:
	//
	// 11588
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The settings for the dimension of the synchronization task. The settings include processing policies for DDL messages, policies for data type mappings between source fields and destination fields, and runtime parameters of the synchronization task.
	JobSettingsShrink *string `json:"JobSettings,omitempty" xml:"JobSettings,omitempty"`
	// The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to obtain the workspace ID.
	//
	// You must configure this parameter to specify the DataWorks workspace to which the operation is applied.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The resource settings.
	ResourceSettingsShrink *string `json:"ResourceSettings,omitempty" xml:"ResourceSettings,omitempty"`
	// The list of mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. Each entry in the list displays a mapping between a rule used to select synchronization objects and a transformation rule applied to the selected synchronization objects.
	//
	// >  [ { "SourceObjectSelectionRules":[ { "ObjectType":"Database", "Action":"Include", "ExpressionType":"Exact", "Expression":"biz_db" }, { "ObjectType":"Schema", "Action":"Include", "ExpressionType":"Exact", "Expression":"s1" }, { "ObjectType":"Table", "Action":"Include", "ExpressionType":"Exact", "Expression":"table1" } ], "TransformationRuleNames":[ { "RuleName":"my_database_rename_rule", "RuleActionType":"Rename", "RuleTargetType":"Schema" } ] } ]
	TableMappingsShrink *string `json:"TableMappings,omitempty" xml:"TableMappings,omitempty"`
	// The list of transformation rules for objects involved in the synchronization task.
	//
	// >  [ { "RuleName":"my_database_rename_rule", "RuleActionType":"Rename", "RuleTargetType":"Schema", "RuleExpression":"{"expression":"${srcDatasoureName}_${srcDatabaseName}"}" } ]
	TransformationRulesShrink *string `json:"TransformationRules,omitempty" xml:"TransformationRules,omitempty"`
}

func (s UpdateDIJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateDIJobShrinkRequest) SetDIJobId(v int64) *UpdateDIJobShrinkRequest {
	s.DIJobId = &v
	return s
}

func (s *UpdateDIJobShrinkRequest) SetDescription(v string) *UpdateDIJobShrinkRequest {
	s.Description = &v
	return s
}

func (s *UpdateDIJobShrinkRequest) SetId(v int64) *UpdateDIJobShrinkRequest {
	s.Id = &v
	return s
}

func (s *UpdateDIJobShrinkRequest) SetJobSettingsShrink(v string) *UpdateDIJobShrinkRequest {
	s.JobSettingsShrink = &v
	return s
}

func (s *UpdateDIJobShrinkRequest) SetProjectId(v int64) *UpdateDIJobShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateDIJobShrinkRequest) SetResourceSettingsShrink(v string) *UpdateDIJobShrinkRequest {
	s.ResourceSettingsShrink = &v
	return s
}

func (s *UpdateDIJobShrinkRequest) SetTableMappingsShrink(v string) *UpdateDIJobShrinkRequest {
	s.TableMappingsShrink = &v
	return s
}

func (s *UpdateDIJobShrinkRequest) SetTransformationRulesShrink(v string) *UpdateDIJobShrinkRequest {
	s.TransformationRulesShrink = &v
	return s
}

type UpdateDIJobResponseBody struct {
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// AAC30B35-820D-5F3E-A42C-E96BB6379325
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDIJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDIJobResponseBody) SetRequestId(v string) *UpdateDIJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDIJobResponseBody) SetSuccess(v bool) *UpdateDIJobResponseBody {
	s.Success = &v
	return s
}

type UpdateDIJobResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDIJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDIJobResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDIJobResponse) GoString() string {
	return s.String()
}

func (s *UpdateDIJobResponse) SetHeaders(v map[string]*string) *UpdateDIJobResponse {
	s.Headers = v
	return s
}

func (s *UpdateDIJobResponse) SetStatusCode(v int32) *UpdateDIJobResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDIJobResponse) SetBody(v *UpdateDIJobResponseBody) *UpdateDIJobResponse {
	s.Body = v
	return s
}

type UpdateDataAssetTagRequest struct {
	// The description of the tag.
	//
	// example:
	//
	// This is a description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The tag key.
	//
	// This parameter is required.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag administrators.
	Managers []*string `json:"Managers,omitempty" xml:"Managers,omitempty" type:"Repeated"`
	// The tag values.
	Values []*string `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s UpdateDataAssetTagRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataAssetTagRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataAssetTagRequest) SetDescription(v string) *UpdateDataAssetTagRequest {
	s.Description = &v
	return s
}

func (s *UpdateDataAssetTagRequest) SetKey(v string) *UpdateDataAssetTagRequest {
	s.Key = &v
	return s
}

func (s *UpdateDataAssetTagRequest) SetManagers(v []*string) *UpdateDataAssetTagRequest {
	s.Managers = v
	return s
}

func (s *UpdateDataAssetTagRequest) SetValues(v []*string) *UpdateDataAssetTagRequest {
	s.Values = v
	return s
}

type UpdateDataAssetTagShrinkRequest struct {
	// The description of the tag.
	//
	// example:
	//
	// This is a description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The tag key.
	//
	// This parameter is required.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag administrators.
	ManagersShrink *string `json:"Managers,omitempty" xml:"Managers,omitempty"`
	// The tag values.
	ValuesShrink *string `json:"Values,omitempty" xml:"Values,omitempty"`
}

func (s UpdateDataAssetTagShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataAssetTagShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataAssetTagShrinkRequest) SetDescription(v string) *UpdateDataAssetTagShrinkRequest {
	s.Description = &v
	return s
}

func (s *UpdateDataAssetTagShrinkRequest) SetKey(v string) *UpdateDataAssetTagShrinkRequest {
	s.Key = &v
	return s
}

func (s *UpdateDataAssetTagShrinkRequest) SetManagersShrink(v string) *UpdateDataAssetTagShrinkRequest {
	s.ManagersShrink = &v
	return s
}

func (s *UpdateDataAssetTagShrinkRequest) SetValuesShrink(v string) *UpdateDataAssetTagShrinkRequest {
	s.ValuesShrink = &v
	return s
}

type UpdateDataAssetTagResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 0bc1ec92159376
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDataAssetTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataAssetTagResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDataAssetTagResponseBody) SetRequestId(v string) *UpdateDataAssetTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDataAssetTagResponseBody) SetSuccess(v bool) *UpdateDataAssetTagResponseBody {
	s.Success = &v
	return s
}

type UpdateDataAssetTagResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDataAssetTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDataAssetTagResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataAssetTagResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataAssetTagResponse) SetHeaders(v map[string]*string) *UpdateDataAssetTagResponse {
	s.Headers = v
	return s
}

func (s *UpdateDataAssetTagResponse) SetStatusCode(v int32) *UpdateDataAssetTagResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDataAssetTagResponse) SetBody(v *UpdateDataAssetTagResponseBody) *UpdateDataAssetTagResponse {
	s.Body = v
	return s
}

type UpdateDataQualityEvaluationTaskRequest struct {
	// The list of monitoring rules that are associated with the monitor.
	DataQualityRules []*UpdateDataQualityEvaluationTaskRequestDataQualityRules `json:"DataQualityRules,omitempty" xml:"DataQualityRules,omitempty" type:"Repeated"`
	// The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.
	//
	// example:
	//
	// 358750
	DataSourceId *int64 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The description of the monitor.
	//
	// example:
	//
	// OpenAPI data quality monitoring test.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The hook.
	Hooks []*UpdateDataQualityEvaluationTaskRequestHooks `json:"Hooks,omitempty" xml:"Hooks,omitempty" type:"Repeated"`
	// The ID of the monitor.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7227061794
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the monitor.
	//
	// example:
	//
	// OpenAPI data quality monitoring test.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configurations of alert notifications.
	Notifications *UpdateDataQualityEvaluationTaskRequestNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Struct"`
	// The ID of the DataWorks workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The extended configurations in JSON-formatted strings. You can use this parameter only for monitors that are used to monitor the quality of E-MapReduce (EMR) data.
	//
	// 	- queue: The Yarn queue used when a monitor checks the quality of EMR data. By default, the queue configured for the current workspace is used.
	//
	// 	- sqlEngine: The SQL engine used when a monitor checks the quality of EMR data.
	//
	//     	- HIVE_SQL
	//
	//     	- SPARK_SQL
	//
	// example:
	//
	// { "queue": "default", "sqlEngine": "SPARK_SQL" }
	RuntimeConf *string `json:"RuntimeConf,omitempty" xml:"RuntimeConf,omitempty"`
	// The monitored object of the data quality monitoring task.
	Target *UpdateDataQualityEvaluationTaskRequestTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Struct"`
	// The trigger configuration of the monitor.
	Trigger *UpdateDataQualityEvaluationTaskRequestTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s UpdateDataQualityEvaluationTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequest) SetDataQualityRules(v []*UpdateDataQualityEvaluationTaskRequestDataQualityRules) *UpdateDataQualityEvaluationTaskRequest {
	s.DataQualityRules = v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequest) SetDataSourceId(v int64) *UpdateDataQualityEvaluationTaskRequest {
	s.DataSourceId = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequest) SetDescription(v string) *UpdateDataQualityEvaluationTaskRequest {
	s.Description = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequest) SetHooks(v []*UpdateDataQualityEvaluationTaskRequestHooks) *UpdateDataQualityEvaluationTaskRequest {
	s.Hooks = v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequest) SetId(v int64) *UpdateDataQualityEvaluationTaskRequest {
	s.Id = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequest) SetName(v string) *UpdateDataQualityEvaluationTaskRequest {
	s.Name = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequest) SetNotifications(v *UpdateDataQualityEvaluationTaskRequestNotifications) *UpdateDataQualityEvaluationTaskRequest {
	s.Notifications = v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequest) SetProjectId(v int64) *UpdateDataQualityEvaluationTaskRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequest) SetRuntimeConf(v string) *UpdateDataQualityEvaluationTaskRequest {
	s.RuntimeConf = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequest) SetTarget(v *UpdateDataQualityEvaluationTaskRequestTarget) *UpdateDataQualityEvaluationTaskRequest {
	s.Target = v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequest) SetTrigger(v *UpdateDataQualityEvaluationTaskRequestTrigger) *UpdateDataQualityEvaluationTaskRequest {
	s.Trigger = v
	return s
}

type UpdateDataQualityEvaluationTaskRequestDataQualityRules struct {
	// The check settings for sample data.
	CheckingConfig *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	// The description of the rule.
	//
	// example:
	//
	// OpenAPI test rules
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the rule.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The operations that you can perform after the rule-based check fails.
	ErrorHandlers []*UpdateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers `json:"ErrorHandlers,omitempty" xml:"ErrorHandlers,omitempty" type:"Repeated"`
	// The rule ID. You can call the [ListQualityRules](https://help.aliyun.com/document_detail/173995.html) operation to query the ID of the monitoring rule.
	//
	// example:
	//
	// 1022171560
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the monitoring rule.
	//
	// example:
	//
	// OpenAPI test rules
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The parameters required for sampling.
	SamplingConfig *UpdateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	// The strength of the rule. Valid values:
	//
	// 	- Normal
	//
	// 	- High
	//
	// example:
	//
	// Normal
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The ID of the template used by the rule.
	//
	// example:
	//
	// SYSTEM:field:null_value:fixed:0
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRules) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRules) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRules) SetCheckingConfig(v *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig) *UpdateDataQualityEvaluationTaskRequestDataQualityRules {
	s.CheckingConfig = v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRules) SetDescription(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRules {
	s.Description = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRules) SetEnabled(v bool) *UpdateDataQualityEvaluationTaskRequestDataQualityRules {
	s.Enabled = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRules) SetErrorHandlers(v []*UpdateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers) *UpdateDataQualityEvaluationTaskRequestDataQualityRules {
	s.ErrorHandlers = v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRules) SetId(v int64) *UpdateDataQualityEvaluationTaskRequestDataQualityRules {
	s.Id = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRules) SetName(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRules {
	s.Name = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRules) SetSamplingConfig(v *UpdateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) *UpdateDataQualityEvaluationTaskRequestDataQualityRules {
	s.SamplingConfig = v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRules) SetSeverity(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRules {
	s.Severity = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRules) SetTemplateCode(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRules {
	s.TemplateCode = &v
	return s
}

type UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig struct {
	// The method that is used to query the referenced samples. To obtain specific types of thresholds, you must query reference values. In this example, an expression is used to specify the query method of referenced samples.
	//
	// example:
	//
	// {"bizdate": ["-1"]}
	ReferencedSamplesFilter *string `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	// The threshold settings.
	Thresholds *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds `json:"Thresholds,omitempty" xml:"Thresholds,omitempty" type:"Struct"`
	// The threshold calculation method. Valid values:
	//
	// 	- Fluctation
	//
	// 	- Auto
	//
	// 	- FluctationDiscreate
	//
	// 	- Average
	//
	// 	- Fixed
	//
	// example:
	//
	// Fixed
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig) SetReferencedSamplesFilter(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig) SetThresholds(v *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig {
	s.Thresholds = v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig) SetType(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfig {
	s.Type = &v
	return s
}

type UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds struct {
	// The threshold settings for critical alerts.
	Critical *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	// The expected threshold setting.
	Expected *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected `json:"Expected,omitempty" xml:"Expected,omitempty" type:"Struct"`
	// The threshold settings for normal alerts.
	Warned *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned `json:"Warned,omitempty" xml:"Warned,omitempty" type:"Struct"`
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds) SetCritical(v *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds {
	s.Critical = v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds) SetExpected(v *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds {
	s.Expected = v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds) SetWarned(v *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholds {
	s.Warned = v
	return s
}

type UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 0.01
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical) SetExpression(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical {
	s.Expression = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical) SetOperator(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical {
	s.Operator = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical) SetValue(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsCritical {
	s.Value = &v
	return s
}

type UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// =
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected) SetExpression(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected {
	s.Expression = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected) SetOperator(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected {
	s.Operator = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected) SetValue(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsExpected {
	s.Value = &v
	return s
}

type UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned struct {
	// The threshold expression.
	//
	// If the template specified by the TemplateCode parameter is about fluctuation, you must use an expression to represent the threshold for fluctuation. Examples:
	//
	// 	- $checkValue > 0.01
	//
	// 	- $checkValue < -0.01
	//
	// 	- abs($checkValue) > 0.01
	//
	// If the template specified by the TemplateCode parameter is about fixed value, you can also use an expression to represent the threshold. If you configure the Expression, Operator, and Value parameters for the threshold at the same time, the Expression parameter takes precedence over the Operator and Value parameters.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 0.001
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned) SetExpression(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned {
	s.Expression = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned) SetOperator(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned {
	s.Operator = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned) SetValue(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesCheckingConfigThresholdsWarned {
	s.Value = &v
	return s
}

type UpdateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers struct {
	// The SQL statement that is used to filter failed tasks. If you define the rule by using custom SQL statements, you must specify an SQL statement to filter failed tasks.
	//
	// example:
	//
	// SELECT 	- FROM ods_d_openapi_log WHERE status = \\"Error\\"
	ErrorDataFilter *string `json:"ErrorDataFilter,omitempty" xml:"ErrorDataFilter,omitempty"`
	// The type of the operation. Valid values:
	//
	// 	- SaveErrorData
	//
	// example:
	//
	// SaveErrorData
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers) SetErrorDataFilter(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers {
	s.ErrorDataFilter = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers) SetType(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesErrorHandlers {
	s.Type = &v
	return s
}

type UpdateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig struct {
	// The metrics used for sampling. Valid values:
	//
	// 	- Count: the number of rows in the table.
	//
	// 	- Min: the minimum value of the field.
	//
	// 	- Max: the maximum value of the field.
	//
	// 	- Avg: the average value of the field.
	//
	// 	- DistinctCount: the number of unique values of the field after deduplication.
	//
	// 	- DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
	//
	// 	- DuplicatedCount: the number of duplicated values of the field.
	//
	// 	- DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
	//
	// 	- TableSize: the table size.
	//
	// 	- NullValueCount: the number of rows in which the field value is null.
	//
	// 	- NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
	//
	// 	- GroupCount: the field value and the number of rows for each field value.
	//
	// 	- CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
	//
	// 	- CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
	//
	// 	- UserDefinedSql: specifies that data is sampled by executing custom SQL statements.
	//
	// example:
	//
	// CountNotIn
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The parameters required for sampling.
	//
	// example:
	//
	// { "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.
	//
	// example:
	//
	// status != \\"Succeeded\\"
	SamplingFilter *string `json:"SamplingFilter,omitempty" xml:"SamplingFilter,omitempty"`
	// The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.
	//
	// example:
	//
	// odps.sql.type.system.odps2=True,odps.sql.hive.compatible=True
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) SetMetric(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig {
	s.Metric = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) SetMetricParameters(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) SetSamplingFilter(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig {
	s.SamplingFilter = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig) SetSettingConfig(v string) *UpdateDataQualityEvaluationTaskRequestDataQualityRulesSamplingConfig {
	s.SettingConfig = &v
	return s
}

type UpdateDataQualityEvaluationTaskRequestHooks struct {
	// The hook trigger condition. When this condition is met, the hook action is triggered. Only two conditional expressions are supported:
	//
	// 	- Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
	//
	// 	- Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.
	//
	// example:
	//
	// ${severity} == "High" AND ${status} == "Critical"
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// The hook type. Valid values:
	//
	// 	- BlockTaskInstance: Blocks the running of scheduling tasks.
	//
	// example:
	//
	// ByScheduledTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateDataQualityEvaluationTaskRequestHooks) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestHooks) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestHooks) SetCondition(v string) *UpdateDataQualityEvaluationTaskRequestHooks {
	s.Condition = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestHooks) SetType(v string) *UpdateDataQualityEvaluationTaskRequestHooks {
	s.Type = &v
	return s
}

type UpdateDataQualityEvaluationTaskRequestNotifications struct {
	// The notification trigger condition. When this condition is met, the alert notification is triggered. Only two conditional expressions are supported:
	//
	// 	- Specify only one group of rule strength type and rule check status, such as `${severity} == "High" AND ${status} == "Critical"`. In this expression, the hook trigger condition is met if severity is High and status is Critical.
	//
	// 	- Specify multiple groups of rule strength types and rule check status, such as `(${severity} == "High" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Critical") OR (${severity} == "Normal" AND ${status} == "Error")`. In this expression, the hook trigger condition is met if severity is High and status is Critical, severity is Normal and status is Critical, or severity is Normal and status is Error. The enumeration of severity in a conditional expression is the same as the enumeration of severity in DataQualityRule. The enumeration of status in a conditional expression is the same as the enumeration of status in DataQualityResult.
	//
	// example:
	//
	// ${severity} == "High" AND ${status} == "Critical"
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	// The configurations of the alert notification.
	Notifications []*UpdateDataQualityEvaluationTaskRequestNotificationsNotifications `json:"Notifications,omitempty" xml:"Notifications,omitempty" type:"Repeated"`
}

func (s UpdateDataQualityEvaluationTaskRequestNotifications) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestNotifications) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestNotifications) SetCondition(v string) *UpdateDataQualityEvaluationTaskRequestNotifications {
	s.Condition = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestNotifications) SetNotifications(v []*UpdateDataQualityEvaluationTaskRequestNotificationsNotifications) *UpdateDataQualityEvaluationTaskRequestNotifications {
	s.Notifications = v
	return s
}

type UpdateDataQualityEvaluationTaskRequestNotificationsNotifications struct {
	// The alert notification methods.
	NotificationChannels []*UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels `json:"NotificationChannels,omitempty" xml:"NotificationChannels,omitempty" type:"Repeated"`
	// The configurations of alert recipients.
	NotificationReceivers []*UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers `json:"NotificationReceivers,omitempty" xml:"NotificationReceivers,omitempty" type:"Repeated"`
}

func (s UpdateDataQualityEvaluationTaskRequestNotificationsNotifications) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestNotificationsNotifications) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestNotificationsNotifications) SetNotificationChannels(v []*UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels) *UpdateDataQualityEvaluationTaskRequestNotificationsNotifications {
	s.NotificationChannels = v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestNotificationsNotifications) SetNotificationReceivers(v []*UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers) *UpdateDataQualityEvaluationTaskRequestNotificationsNotifications {
	s.NotificationReceivers = v
	return s
}

type UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels struct {
	// The alert notification methods.
	Channels []*string `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
}

func (s UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels) SetChannels(v []*string) *UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationChannels {
	s.Channels = v
	return s
}

type UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers struct {
	// The additional parameters that are required when alerts are sent. The parameters are JSON-formatted strings. The following keys are supported:
	//
	// 	- atAll: specifies that all members in a group are mentioned when alerts are sent by using DingTalk. This parameter is valid only if you set ReceiverType to DingdingUrl.
	//
	// example:
	//
	// {  "atAll": true }
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// The type of the alert recipient.
	//
	// Valid values:
	//
	// 	- WebhookUrl
	//
	// 	- FeishuUrl
	//
	// 	- DingdingUrl
	//
	// 	- WeixinUrl
	//
	// 	- AliUid
	//
	// example:
	//
	// DingdingUrl
	ReceiverType *string `json:"ReceiverType,omitempty" xml:"ReceiverType,omitempty"`
	// The alert recipient.
	ReceiverValues []*string `json:"ReceiverValues,omitempty" xml:"ReceiverValues,omitempty" type:"Repeated"`
}

func (s UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers) SetExtension(v string) *UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers {
	s.Extension = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers) SetReceiverType(v string) *UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers {
	s.ReceiverType = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers) SetReceiverValues(v []*string) *UpdateDataQualityEvaluationTaskRequestNotificationsNotificationsNotificationReceivers {
	s.ReceiverValues = v
	return s
}

type UpdateDataQualityEvaluationTaskRequestTarget struct {
	// The type of the database to which the table belongs. Valid values:
	//
	// 	- maxcompute
	//
	// 	- hologres
	//
	// 	- cdh
	//
	// 	- analyticdb_for_mysql
	//
	// 	- starrocks
	//
	// 	- emr
	//
	// 	- analyticdb_for_postgresql
	//
	// example:
	//
	// maxcompute
	DatabaseType *string `json:"DatabaseType,omitempty" xml:"DatabaseType,omitempty"`
	// The configuration of the partitioned table.
	//
	// example:
	//
	// dt=$[yyyymmdd-1]
	PartitionSpec *string `json:"PartitionSpec,omitempty" xml:"PartitionSpec,omitempty"`
	// The ID of the table in Data Map.
	//
	// example:
	//
	// odsp.openapi.ods_d_openapi_log
	TableGuid *string `json:"TableGuid,omitempty" xml:"TableGuid,omitempty"`
}

func (s UpdateDataQualityEvaluationTaskRequestTarget) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestTarget) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestTarget) SetDatabaseType(v string) *UpdateDataQualityEvaluationTaskRequestTarget {
	s.DatabaseType = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestTarget) SetPartitionSpec(v string) *UpdateDataQualityEvaluationTaskRequestTarget {
	s.PartitionSpec = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestTarget) SetTableGuid(v string) *UpdateDataQualityEvaluationTaskRequestTarget {
	s.TableGuid = &v
	return s
}

type UpdateDataQualityEvaluationTaskRequestTrigger struct {
	// The IDs of scheduling tasks. This parameter is valid only if you set Type to ByScheduledTaskInstance.
	TaskIds []*int64 `json:"TaskIds,omitempty" xml:"TaskIds,omitempty" type:"Repeated"`
	// The trigger type of the monitor. Valid values:
	//
	// 	- ByScheduledTaskInstance: The monitor is triggered by the associated scheduling tasks.
	//
	// 	- ByManual: The monitor is manually triggered.
	//
	// example:
	//
	// ByScheduledTaskInstance
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateDataQualityEvaluationTaskRequestTrigger) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskRequestTrigger) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskRequestTrigger) SetTaskIds(v []*int64) *UpdateDataQualityEvaluationTaskRequestTrigger {
	s.TaskIds = v
	return s
}

func (s *UpdateDataQualityEvaluationTaskRequestTrigger) SetType(v string) *UpdateDataQualityEvaluationTaskRequestTrigger {
	s.Type = &v
	return s
}

type UpdateDataQualityEvaluationTaskShrinkRequest struct {
	// The list of monitoring rules that are associated with the monitor.
	DataQualityRulesShrink *string `json:"DataQualityRules,omitempty" xml:"DataQualityRules,omitempty"`
	// The data source ID. You can call the [ListDataSources](https://help.aliyun.com/document_detail/211431.html) operation to query the ID.
	//
	// example:
	//
	// 358750
	DataSourceId *int64 `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	// The description of the monitor.
	//
	// example:
	//
	// OpenAPI data quality monitoring test.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The hook.
	HooksShrink *string `json:"Hooks,omitempty" xml:"Hooks,omitempty"`
	// The ID of the monitor.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7227061794
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the monitor.
	//
	// example:
	//
	// OpenAPI data quality monitoring test.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The configurations of alert notifications.
	NotificationsShrink *string `json:"Notifications,omitempty" xml:"Notifications,omitempty"`
	// The ID of the DataWorks workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The extended configurations in JSON-formatted strings. You can use this parameter only for monitors that are used to monitor the quality of E-MapReduce (EMR) data.
	//
	// 	- queue: The Yarn queue used when a monitor checks the quality of EMR data. By default, the queue configured for the current workspace is used.
	//
	// 	- sqlEngine: The SQL engine used when a monitor checks the quality of EMR data.
	//
	//     	- HIVE_SQL
	//
	//     	- SPARK_SQL
	//
	// example:
	//
	// { "queue": "default", "sqlEngine": "SPARK_SQL" }
	RuntimeConf *string `json:"RuntimeConf,omitempty" xml:"RuntimeConf,omitempty"`
	// The monitored object of the data quality monitoring task.
	TargetShrink *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// The trigger configuration of the monitor.
	TriggerShrink *string `json:"Trigger,omitempty" xml:"Trigger,omitempty"`
}

func (s UpdateDataQualityEvaluationTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskShrinkRequest) SetDataQualityRulesShrink(v string) *UpdateDataQualityEvaluationTaskShrinkRequest {
	s.DataQualityRulesShrink = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskShrinkRequest) SetDataSourceId(v int64) *UpdateDataQualityEvaluationTaskShrinkRequest {
	s.DataSourceId = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskShrinkRequest) SetDescription(v string) *UpdateDataQualityEvaluationTaskShrinkRequest {
	s.Description = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskShrinkRequest) SetHooksShrink(v string) *UpdateDataQualityEvaluationTaskShrinkRequest {
	s.HooksShrink = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskShrinkRequest) SetId(v int64) *UpdateDataQualityEvaluationTaskShrinkRequest {
	s.Id = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskShrinkRequest) SetName(v string) *UpdateDataQualityEvaluationTaskShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskShrinkRequest) SetNotificationsShrink(v string) *UpdateDataQualityEvaluationTaskShrinkRequest {
	s.NotificationsShrink = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskShrinkRequest) SetProjectId(v int64) *UpdateDataQualityEvaluationTaskShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskShrinkRequest) SetRuntimeConf(v string) *UpdateDataQualityEvaluationTaskShrinkRequest {
	s.RuntimeConf = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskShrinkRequest) SetTargetShrink(v string) *UpdateDataQualityEvaluationTaskShrinkRequest {
	s.TargetShrink = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskShrinkRequest) SetTriggerShrink(v string) *UpdateDataQualityEvaluationTaskShrinkRequest {
	s.TriggerShrink = &v
	return s
}

type UpdateDataQualityEvaluationTaskResponseBody struct {
	// The request ID. You can use the ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 8abcb91f-d266-4073-b907-2ed670378ed1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDataQualityEvaluationTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskResponseBody) SetRequestId(v string) *UpdateDataQualityEvaluationTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskResponseBody) SetSuccess(v bool) *UpdateDataQualityEvaluationTaskResponseBody {
	s.Success = &v
	return s
}

type UpdateDataQualityEvaluationTaskResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDataQualityEvaluationTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDataQualityEvaluationTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityEvaluationTaskResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityEvaluationTaskResponse) SetHeaders(v map[string]*string) *UpdateDataQualityEvaluationTaskResponse {
	s.Headers = v
	return s
}

func (s *UpdateDataQualityEvaluationTaskResponse) SetStatusCode(v int32) *UpdateDataQualityEvaluationTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDataQualityEvaluationTaskResponse) SetBody(v *UpdateDataQualityEvaluationTaskResponseBody) *UpdateDataQualityEvaluationTaskResponse {
	s.Body = v
	return s
}

type UpdateDataQualityRuleRequest struct {
	// The check settings for sample data.
	CheckingConfig *UpdateDataQualityRuleRequestCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	// The description of the rule. The description can be up to 500 characters in length.
	//
	// example:
	//
	// this is a odps _sql task
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the rule.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The operations that you can perform after the rule-based check fails.
	ErrorHandlers []*UpdateDataQualityRuleRequestErrorHandlers `json:"ErrorHandlers,omitempty" xml:"ErrorHandlers,omitempty" type:"Repeated"`
	// The rule ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100001
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the rule. The name can be up to 255 characters in length and can contain digits, letters, and punctuation marks.
	//
	// example:
	//
	// The table cannot be empty.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The sampling settings.
	SamplingConfig *UpdateDataQualityRuleRequestSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
	// The strength of the rule. Valid values:
	//
	// 	- Normal
	//
	// 	- High
	//
	// example:
	//
	// High
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The ID of the template used by the rule.
	//
	// example:
	//
	// system::user_defined
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s UpdateDataQualityRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleRequest) SetCheckingConfig(v *UpdateDataQualityRuleRequestCheckingConfig) *UpdateDataQualityRuleRequest {
	s.CheckingConfig = v
	return s
}

func (s *UpdateDataQualityRuleRequest) SetDescription(v string) *UpdateDataQualityRuleRequest {
	s.Description = &v
	return s
}

func (s *UpdateDataQualityRuleRequest) SetEnabled(v bool) *UpdateDataQualityRuleRequest {
	s.Enabled = &v
	return s
}

func (s *UpdateDataQualityRuleRequest) SetErrorHandlers(v []*UpdateDataQualityRuleRequestErrorHandlers) *UpdateDataQualityRuleRequest {
	s.ErrorHandlers = v
	return s
}

func (s *UpdateDataQualityRuleRequest) SetId(v int64) *UpdateDataQualityRuleRequest {
	s.Id = &v
	return s
}

func (s *UpdateDataQualityRuleRequest) SetName(v string) *UpdateDataQualityRuleRequest {
	s.Name = &v
	return s
}

func (s *UpdateDataQualityRuleRequest) SetProjectId(v int64) *UpdateDataQualityRuleRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateDataQualityRuleRequest) SetSamplingConfig(v *UpdateDataQualityRuleRequestSamplingConfig) *UpdateDataQualityRuleRequest {
	s.SamplingConfig = v
	return s
}

func (s *UpdateDataQualityRuleRequest) SetSeverity(v string) *UpdateDataQualityRuleRequest {
	s.Severity = &v
	return s
}

func (s *UpdateDataQualityRuleRequest) SetTemplateCode(v string) *UpdateDataQualityRuleRequest {
	s.TemplateCode = &v
	return s
}

type UpdateDataQualityRuleRequestCheckingConfig struct {
	// The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference values. In this example, an expression is used to specify the query method of referenced samples.
	//
	// example:
	//
	// { "bizdate": [ "-1", "-7", "-1m" ] }
	ReferencedSamplesFilter *string `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	// The threshold settings.
	Thresholds *UpdateDataQualityRuleRequestCheckingConfigThresholds `json:"Thresholds,omitempty" xml:"Thresholds,omitempty" type:"Struct"`
	// The threshold calculation method. Valid values:
	//
	// 	- Fixed
	//
	// 	- Fluctation
	//
	// 	- FluctationDiscreate
	//
	// 	- Auto
	//
	// 	- Average
	//
	// 	- Variance
	//
	// example:
	//
	// Fixed
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateDataQualityRuleRequestCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleRequestCheckingConfig) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleRequestCheckingConfig) SetReferencedSamplesFilter(v string) *UpdateDataQualityRuleRequestCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *UpdateDataQualityRuleRequestCheckingConfig) SetThresholds(v *UpdateDataQualityRuleRequestCheckingConfigThresholds) *UpdateDataQualityRuleRequestCheckingConfig {
	s.Thresholds = v
	return s
}

func (s *UpdateDataQualityRuleRequestCheckingConfig) SetType(v string) *UpdateDataQualityRuleRequestCheckingConfig {
	s.Type = &v
	return s
}

type UpdateDataQualityRuleRequestCheckingConfigThresholds struct {
	// The threshold settings for critical alerts.
	Critical *UpdateDataQualityRuleRequestCheckingConfigThresholdsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	// The expected threshold setting.
	Expected *UpdateDataQualityRuleRequestCheckingConfigThresholdsExpected `json:"Expected,omitempty" xml:"Expected,omitempty" type:"Struct"`
	// The threshold settings for normal alerts.
	Warned *UpdateDataQualityRuleRequestCheckingConfigThresholdsWarned `json:"Warned,omitempty" xml:"Warned,omitempty" type:"Struct"`
}

func (s UpdateDataQualityRuleRequestCheckingConfigThresholds) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleRequestCheckingConfigThresholds) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleRequestCheckingConfigThresholds) SetCritical(v *UpdateDataQualityRuleRequestCheckingConfigThresholdsCritical) *UpdateDataQualityRuleRequestCheckingConfigThresholds {
	s.Critical = v
	return s
}

func (s *UpdateDataQualityRuleRequestCheckingConfigThresholds) SetExpected(v *UpdateDataQualityRuleRequestCheckingConfigThresholdsExpected) *UpdateDataQualityRuleRequestCheckingConfigThresholds {
	s.Expected = v
	return s
}

func (s *UpdateDataQualityRuleRequestCheckingConfigThresholds) SetWarned(v *UpdateDataQualityRuleRequestCheckingConfigThresholdsWarned) *UpdateDataQualityRuleRequestCheckingConfigThresholds {
	s.Warned = v
	return s
}

type UpdateDataQualityRuleRequestCheckingConfigThresholdsCritical struct {
	// The threshold expression.
	//
	// The volatility type rule must use an expression to represent the volatility threshold. For example:
	//
	// - Fluctuation rise greater than 0.01: $checkValue > 0.01
	//
	// - Fluctuation drop greater than 0.01:$checkValue < -0.01
	//
	// - Absolute volatility: abs($checkValue) > 0.01
	//
	// You can also use expressions to configure thresholds for fixed-Value rules. If you configure them at the same time, the expression priority is higher than Operator and Value.
	//
	// example:
	//
	// $checkValue > 0.05
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateDataQualityRuleRequestCheckingConfigThresholdsCritical) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleRequestCheckingConfigThresholdsCritical) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleRequestCheckingConfigThresholdsCritical) SetExpression(v string) *UpdateDataQualityRuleRequestCheckingConfigThresholdsCritical {
	s.Expression = &v
	return s
}

func (s *UpdateDataQualityRuleRequestCheckingConfigThresholdsCritical) SetOperator(v string) *UpdateDataQualityRuleRequestCheckingConfigThresholdsCritical {
	s.Operator = &v
	return s
}

func (s *UpdateDataQualityRuleRequestCheckingConfigThresholdsCritical) SetValue(v string) *UpdateDataQualityRuleRequestCheckingConfigThresholdsCritical {
	s.Value = &v
	return s
}

type UpdateDataQualityRuleRequestCheckingConfigThresholdsExpected struct {
	// The threshold expression.
	//
	// The volatility type rule must use an expression to represent the volatility threshold. For example:
	//
	// - Fluctuation rise greater than 0.01: $checkValue > 0.01
	//
	// - Fluctuation drop greater than 0.01:$checkValue < -0.01
	//
	// - Absolute volatility: abs($checkValue) > 0.01
	//
	// You can also use expressions to configure thresholds for fixed-Value rules. If you configure them at the same time, the expression priority is higher than Operator and Value.
	//
	// example:
	//
	// $checkValue <= 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateDataQualityRuleRequestCheckingConfigThresholdsExpected) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleRequestCheckingConfigThresholdsExpected) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleRequestCheckingConfigThresholdsExpected) SetExpression(v string) *UpdateDataQualityRuleRequestCheckingConfigThresholdsExpected {
	s.Expression = &v
	return s
}

func (s *UpdateDataQualityRuleRequestCheckingConfigThresholdsExpected) SetOperator(v string) *UpdateDataQualityRuleRequestCheckingConfigThresholdsExpected {
	s.Operator = &v
	return s
}

func (s *UpdateDataQualityRuleRequestCheckingConfigThresholdsExpected) SetValue(v string) *UpdateDataQualityRuleRequestCheckingConfigThresholdsExpected {
	s.Value = &v
	return s
}

type UpdateDataQualityRuleRequestCheckingConfigThresholdsWarned struct {
	// The threshold expression.
	//
	// The volatility type rule must use an expression to represent the volatility threshold. For example:
	//
	// - Fluctuation rise greater than 0.01: $checkValue > 0.01
	//
	// - Fluctuation drop greater than 0.01:$checkValue < -0.01
	//
	// - Absolute volatility: abs($checkValue) > 0.01
	//
	// You can also use expressions to configure thresholds for fixed-Value rules. If you configure them at the same time, the expression priority is higher than Operator and Value.
	//
	// example:
	//
	// $checkValue > 0.01
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The comparison operator. Valid values:
	//
	// 	- \\>
	//
	// 	- \\>=
	//
	// 	- <
	//
	// 	- <=
	//
	// 	- !=
	//
	// 	- \\=
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The threshold value.
	//
	// example:
	//
	// 100.0
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateDataQualityRuleRequestCheckingConfigThresholdsWarned) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleRequestCheckingConfigThresholdsWarned) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleRequestCheckingConfigThresholdsWarned) SetExpression(v string) *UpdateDataQualityRuleRequestCheckingConfigThresholdsWarned {
	s.Expression = &v
	return s
}

func (s *UpdateDataQualityRuleRequestCheckingConfigThresholdsWarned) SetOperator(v string) *UpdateDataQualityRuleRequestCheckingConfigThresholdsWarned {
	s.Operator = &v
	return s
}

func (s *UpdateDataQualityRuleRequestCheckingConfigThresholdsWarned) SetValue(v string) *UpdateDataQualityRuleRequestCheckingConfigThresholdsWarned {
	s.Value = &v
	return s
}

type UpdateDataQualityRuleRequestErrorHandlers struct {
	// The SQL statement that is used to filter failed tasks. If the rule is defined by custom SQL statements, you must specify an SQL statement to filter failed tasks.
	//
	// example:
	//
	// SELECT 	- FROM tb_api_log WHERE id IS NULL
	ErrorDataFilter *string `json:"ErrorDataFilter,omitempty" xml:"ErrorDataFilter,omitempty"`
	// The type of the operation. Valid values:
	//
	// 	- SaveErrorData
	//
	// example:
	//
	// SaveErrorData
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateDataQualityRuleRequestErrorHandlers) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleRequestErrorHandlers) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleRequestErrorHandlers) SetErrorDataFilter(v string) *UpdateDataQualityRuleRequestErrorHandlers {
	s.ErrorDataFilter = &v
	return s
}

func (s *UpdateDataQualityRuleRequestErrorHandlers) SetType(v string) *UpdateDataQualityRuleRequestErrorHandlers {
	s.Type = &v
	return s
}

type UpdateDataQualityRuleRequestSamplingConfig struct {
	// The metrics used for sampling. You can leave this parameter empty if you use a rule template. Valid values:
	//
	// 	- Count: the number of rows in the table.
	//
	// 	- Min: the minimum value of the field.
	//
	// 	- Max: the maximum value of the field.
	//
	// 	- Avg: the average value of the field.
	//
	// 	- DistinctCount: the number of unique values of the field after deduplication.
	//
	// 	- DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
	//
	// 	- DuplicatedCount: the number of duplicated values of the field.
	//
	// 	- DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
	//
	// 	- TableSize: the table size.
	//
	// 	- NullValueCount: the number of rows in which the field value is null.
	//
	// 	- NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
	//
	// 	- GroupCount: the field value and the number of rows for each field value.
	//
	// 	- CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
	//
	// 	- CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
	//
	// 	- UserDefinedSql: indicates that data is sampled by executing custom SQL statements.
	//
	// example:
	//
	// Min
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The parameters required for sampling.
	//
	// example:
	//
	// { "Columns": [ "id", "name" ] , "SQL": "select count(1) from table;"}
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// The statements that are used to filter unnecessary data during sampling. The statements can be up to 16,777,215 characters in length.
	//
	// example:
	//
	// id IS NULL
	SamplingFilter *string `json:"SamplingFilter,omitempty" xml:"SamplingFilter,omitempty"`
	// The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.
	//
	// example:
	//
	// SET odps.sql.udf.timeout=600s;
	//
	// SET odps.sql.python.version=cp27;
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s UpdateDataQualityRuleRequestSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleRequestSamplingConfig) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleRequestSamplingConfig) SetMetric(v string) *UpdateDataQualityRuleRequestSamplingConfig {
	s.Metric = &v
	return s
}

func (s *UpdateDataQualityRuleRequestSamplingConfig) SetMetricParameters(v string) *UpdateDataQualityRuleRequestSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *UpdateDataQualityRuleRequestSamplingConfig) SetSamplingFilter(v string) *UpdateDataQualityRuleRequestSamplingConfig {
	s.SamplingFilter = &v
	return s
}

func (s *UpdateDataQualityRuleRequestSamplingConfig) SetSettingConfig(v string) *UpdateDataQualityRuleRequestSamplingConfig {
	s.SettingConfig = &v
	return s
}

type UpdateDataQualityRuleShrinkRequest struct {
	// The check settings for sample data.
	CheckingConfigShrink *string `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty"`
	// The description of the rule. The description can be up to 500 characters in length.
	//
	// example:
	//
	// this is a odps _sql task
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the rule.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The operations that you can perform after the rule-based check fails.
	ErrorHandlersShrink *string `json:"ErrorHandlers,omitempty" xml:"ErrorHandlers,omitempty"`
	// The rule ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100001
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the rule. The name can be up to 255 characters in length and can contain digits, letters, and punctuation marks.
	//
	// example:
	//
	// The table cannot be empty.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The sampling settings.
	SamplingConfigShrink *string `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty"`
	// The strength of the rule. Valid values:
	//
	// 	- Normal
	//
	// 	- High
	//
	// example:
	//
	// High
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	// The ID of the template used by the rule.
	//
	// example:
	//
	// system::user_defined
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s UpdateDataQualityRuleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleShrinkRequest) SetCheckingConfigShrink(v string) *UpdateDataQualityRuleShrinkRequest {
	s.CheckingConfigShrink = &v
	return s
}

func (s *UpdateDataQualityRuleShrinkRequest) SetDescription(v string) *UpdateDataQualityRuleShrinkRequest {
	s.Description = &v
	return s
}

func (s *UpdateDataQualityRuleShrinkRequest) SetEnabled(v bool) *UpdateDataQualityRuleShrinkRequest {
	s.Enabled = &v
	return s
}

func (s *UpdateDataQualityRuleShrinkRequest) SetErrorHandlersShrink(v string) *UpdateDataQualityRuleShrinkRequest {
	s.ErrorHandlersShrink = &v
	return s
}

func (s *UpdateDataQualityRuleShrinkRequest) SetId(v int64) *UpdateDataQualityRuleShrinkRequest {
	s.Id = &v
	return s
}

func (s *UpdateDataQualityRuleShrinkRequest) SetName(v string) *UpdateDataQualityRuleShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateDataQualityRuleShrinkRequest) SetProjectId(v int64) *UpdateDataQualityRuleShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateDataQualityRuleShrinkRequest) SetSamplingConfigShrink(v string) *UpdateDataQualityRuleShrinkRequest {
	s.SamplingConfigShrink = &v
	return s
}

func (s *UpdateDataQualityRuleShrinkRequest) SetSeverity(v string) *UpdateDataQualityRuleShrinkRequest {
	s.Severity = &v
	return s
}

func (s *UpdateDataQualityRuleShrinkRequest) SetTemplateCode(v string) *UpdateDataQualityRuleShrinkRequest {
	s.TemplateCode = &v
	return s
}

type UpdateDataQualityRuleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDataQualityRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleResponseBody) SetRequestId(v string) *UpdateDataQualityRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDataQualityRuleResponseBody) SetSuccess(v bool) *UpdateDataQualityRuleResponseBody {
	s.Success = &v
	return s
}

type UpdateDataQualityRuleResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDataQualityRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDataQualityRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleResponse) SetHeaders(v map[string]*string) *UpdateDataQualityRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateDataQualityRuleResponse) SetStatusCode(v int32) *UpdateDataQualityRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDataQualityRuleResponse) SetBody(v *UpdateDataQualityRuleResponseBody) *UpdateDataQualityRuleResponse {
	s.Body = v
	return s
}

type UpdateDataQualityRuleTemplateRequest struct {
	// The check settings for sample data.
	CheckingConfig *UpdateDataQualityRuleTemplateRequestCheckingConfig `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty" type:"Struct"`
	// The code for the template.
	//
	// This parameter is required.
	//
	// example:
	//
	// USER_DEFINED:123
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).
	//
	// example:
	//
	// /ods/order_data
	DirectoryPath *string `json:"DirectoryPath,omitempty" xml:"DirectoryPath,omitempty"`
	// The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.
	//
	// example:
	//
	// Table row Count Verification
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The sampling settings.
	SamplingConfig *UpdateDataQualityRuleTemplateRequestSamplingConfig `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty" type:"Struct"`
}

func (s UpdateDataQualityRuleTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleTemplateRequest) SetCheckingConfig(v *UpdateDataQualityRuleTemplateRequestCheckingConfig) *UpdateDataQualityRuleTemplateRequest {
	s.CheckingConfig = v
	return s
}

func (s *UpdateDataQualityRuleTemplateRequest) SetCode(v string) *UpdateDataQualityRuleTemplateRequest {
	s.Code = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateRequest) SetDirectoryPath(v string) *UpdateDataQualityRuleTemplateRequest {
	s.DirectoryPath = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateRequest) SetName(v string) *UpdateDataQualityRuleTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateRequest) SetProjectId(v int64) *UpdateDataQualityRuleTemplateRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateRequest) SetSamplingConfig(v *UpdateDataQualityRuleTemplateRequestSamplingConfig) *UpdateDataQualityRuleTemplateRequest {
	s.SamplingConfig = v
	return s
}

type UpdateDataQualityRuleTemplateRequestCheckingConfig struct {
	// The method that is used to query the referenced samples. To obtain some types of thresholds, you need to query reference samples and perform aggregate operations on the reference values. In this example, an expression is used to specify the query method of referenced samples.
	//
	// example:
	//
	// { "bizdate": [ "-1", "-7", "-1m" ] }
	ReferencedSamplesFilter *string `json:"ReferencedSamplesFilter,omitempty" xml:"ReferencedSamplesFilter,omitempty"`
	// The type of the monitored object. Valid values:
	//
	// 	- Table
	//
	// example:
	//
	// Table
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateDataQualityRuleTemplateRequestCheckingConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleTemplateRequestCheckingConfig) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleTemplateRequestCheckingConfig) SetReferencedSamplesFilter(v string) *UpdateDataQualityRuleTemplateRequestCheckingConfig {
	s.ReferencedSamplesFilter = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateRequestCheckingConfig) SetType(v string) *UpdateDataQualityRuleTemplateRequestCheckingConfig {
	s.Type = &v
	return s
}

type UpdateDataQualityRuleTemplateRequestSamplingConfig struct {
	// The metrics used for sampling. Valid values:
	//
	// 	- Count: the number of rows in the table.
	//
	// 	- Min: the minimum value of the field.
	//
	// 	- Max: the maximum value of the field.
	//
	// 	- Avg: the average value of the field.
	//
	// 	- DistinctCount: the number of unique values of the field after deduplication.
	//
	// 	- DistinctPercent: the proportion of the number of unique values of the field after deduplication to the number of rows in the table.
	//
	// 	- DuplicatedCount: the number of duplicated values of the field.
	//
	// 	- DuplicatedPercent: the proportion of the number of duplicated values of the field to the number of rows in the table.
	//
	// 	- TableSize: the table size.
	//
	// 	- NullValueCount: the number of rows in which the field value is null.
	//
	// 	- NullValuePercent: the proportion of the number of rows in which the field value is null to the number of rows in the table.
	//
	// 	- GroupCount: the field value and the number of rows for each field value.
	//
	// 	- CountNotIn: the number of rows in which the field values are different from the referenced values that you specified in the rule.
	//
	// 	- CountDistinctNotIn: the number of unique values that are different from the referenced values that you specified in the rule after deduplication.
	//
	// 	- UserDefinedSql: indicates that data is sampled by executing custom SQL statements.
	//
	// example:
	//
	// Max
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The parameters required for sampling.
	//
	// example:
	//
	// {"SQL": "select count(1) from table;"}
	MetricParameters *string `json:"MetricParameters,omitempty" xml:"MetricParameters,omitempty"`
	// The statements that are used to configure the parameters required for sampling before you execute the sampling statements. The statements can be up to 1,000 characters in length. Only the MaxCompute database is supported.
	//
	// example:
	//
	// SET odps.sql.udf.timeout=600s;
	//
	// SET odps.sql.python.version=cp27;
	SettingConfig *string `json:"SettingConfig,omitempty" xml:"SettingConfig,omitempty"`
}

func (s UpdateDataQualityRuleTemplateRequestSamplingConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleTemplateRequestSamplingConfig) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleTemplateRequestSamplingConfig) SetMetric(v string) *UpdateDataQualityRuleTemplateRequestSamplingConfig {
	s.Metric = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateRequestSamplingConfig) SetMetricParameters(v string) *UpdateDataQualityRuleTemplateRequestSamplingConfig {
	s.MetricParameters = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateRequestSamplingConfig) SetSettingConfig(v string) *UpdateDataQualityRuleTemplateRequestSamplingConfig {
	s.SettingConfig = &v
	return s
}

type UpdateDataQualityRuleTemplateShrinkRequest struct {
	// The check settings for sample data.
	CheckingConfigShrink *string `json:"CheckingConfig,omitempty" xml:"CheckingConfig,omitempty"`
	// The code for the template.
	//
	// This parameter is required.
	//
	// example:
	//
	// USER_DEFINED:123
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The directory in which the template is stored. Slashes (/) are used to separate directory levels. The name of each directory level can be up to 1,024 characters in length. It cannot contain whitespace characters or slashes (/).
	//
	// example:
	//
	// /ods/order_data
	DirectoryPath *string `json:"DirectoryPath,omitempty" xml:"DirectoryPath,omitempty"`
	// The name of the template. The name can be up to 512 characters in length and can contain digits, letters, and punctuation marks.
	//
	// example:
	//
	// Table row Count Verification
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The sampling settings.
	SamplingConfigShrink *string `json:"SamplingConfig,omitempty" xml:"SamplingConfig,omitempty"`
}

func (s UpdateDataQualityRuleTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleTemplateShrinkRequest) SetCheckingConfigShrink(v string) *UpdateDataQualityRuleTemplateShrinkRequest {
	s.CheckingConfigShrink = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateShrinkRequest) SetCode(v string) *UpdateDataQualityRuleTemplateShrinkRequest {
	s.Code = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateShrinkRequest) SetDirectoryPath(v string) *UpdateDataQualityRuleTemplateShrinkRequest {
	s.DirectoryPath = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateShrinkRequest) SetName(v string) *UpdateDataQualityRuleTemplateShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateShrinkRequest) SetProjectId(v int64) *UpdateDataQualityRuleTemplateShrinkRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateShrinkRequest) SetSamplingConfigShrink(v string) *UpdateDataQualityRuleTemplateShrinkRequest {
	s.SamplingConfigShrink = &v
	return s
}

type UpdateDataQualityRuleTemplateResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// 691CA452-D37A-4ED0-9441
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDataQualityRuleTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleTemplateResponseBody) SetRequestId(v string) *UpdateDataQualityRuleTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateResponseBody) SetSuccess(v bool) *UpdateDataQualityRuleTemplateResponseBody {
	s.Success = &v
	return s
}

type UpdateDataQualityRuleTemplateResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDataQualityRuleTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDataQualityRuleTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataQualityRuleTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataQualityRuleTemplateResponse) SetHeaders(v map[string]*string) *UpdateDataQualityRuleTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateDataQualityRuleTemplateResponse) SetStatusCode(v int32) *UpdateDataQualityRuleTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDataQualityRuleTemplateResponse) SetBody(v *UpdateDataQualityRuleTemplateResponseBody) *UpdateDataQualityRuleTemplateResponse {
	s.Body = v
	return s
}

type UpdateDataSourceRequest struct {
	// The connection configurations of the data source, including the connection address, access identity, and environment information. The envType parameter specifies the environment in which the data source is used. Valid values of the envType parameter:
	//
	// 	- Dev: development environment
	//
	// 	- Prod: production environment
	//
	// The parameters that you need to configure for the data source vary based on the mode in which the data source is added. For more information, see [Data source connection information (ConnectionProperties)](https://help.aliyun.com/document_detail/2852465.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	// 	"envType": "Prod",
	//
	// 	"regionId": "cn-beijing",
	//
	//     "instanceId": "hgprecn-cn-x0r3oun4k001",
	//
	//     "database": "testdb",
	//
	//     "securityProtocol": "authTypeNone",
	//
	//     "authType": "Executor",
	//
	//     "authIdentity": "1107550004253538"
	//
	// }
	ConnectionProperties *string `json:"ConnectionProperties,omitempty" xml:"ConnectionProperties,omitempty"`
	// The mode in which the data source is added. The mode varies based on the data source type. Valid values:
	//
	// 	- InstanceMode: instance mode
	//
	// 	- UrlMode: connection string mode
	//
	// example:
	//
	// UrlMode
	ConnectionPropertiesMode *string `json:"ConnectionPropertiesMode,omitempty" xml:"ConnectionPropertiesMode,omitempty"`
	// The description of the data source. The description cannot exceed 3,000 characters in length.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The data source ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 16033
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 5678
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s UpdateDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceRequest) SetConnectionProperties(v string) *UpdateDataSourceRequest {
	s.ConnectionProperties = &v
	return s
}

func (s *UpdateDataSourceRequest) SetConnectionPropertiesMode(v string) *UpdateDataSourceRequest {
	s.ConnectionPropertiesMode = &v
	return s
}

func (s *UpdateDataSourceRequest) SetDescription(v string) *UpdateDataSourceRequest {
	s.Description = &v
	return s
}

func (s *UpdateDataSourceRequest) SetId(v int64) *UpdateDataSourceRequest {
	s.Id = &v
	return s
}

func (s *UpdateDataSourceRequest) SetProjectId(v int64) *UpdateDataSourceRequest {
	s.ProjectId = &v
	return s
}

type UpdateDataSourceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 102E8E24-0387-531D-8A75-1C0AE7DD03E5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Whether the data source has been modified:
	//
	// - true: Yes
	//
	// - false: no
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceResponseBody) SetRequestId(v string) *UpdateDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDataSourceResponseBody) SetSuccess(v bool) *UpdateDataSourceResponseBody {
	s.Success = &v
	return s
}

type UpdateDataSourceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceResponse) SetHeaders(v map[string]*string) *UpdateDataSourceResponse {
	s.Headers = v
	return s
}

func (s *UpdateDataSourceResponse) SetStatusCode(v int32) *UpdateDataSourceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDataSourceResponse) SetBody(v *UpdateDataSourceResponseBody) *UpdateDataSourceResponse {
	s.Body = v
	return s
}

type UpdateFileRequest struct {
	// example:
	//
	// {"queue":"default","SPARK_CONF":"--conf spark.driver.memory=2g"}
	AdvancedSettings *string `json:"AdvancedSettings,omitempty" xml:"AdvancedSettings,omitempty"`
	// example:
	//
	// true
	ApplyScheduleImmediately *bool `json:"ApplyScheduleImmediately,omitempty" xml:"ApplyScheduleImmediately,omitempty"`
	// example:
	//
	// true
	AutoParsing *bool `json:"AutoParsing,omitempty" xml:"AutoParsing,omitempty"`
	// example:
	//
	// 120000
	AutoRerunIntervalMillis *int32 `json:"AutoRerunIntervalMillis,omitempty" xml:"AutoRerunIntervalMillis,omitempty"`
	// example:
	//
	// 3
	AutoRerunTimes *int32 `json:"AutoRerunTimes,omitempty" xml:"AutoRerunTimes,omitempty"`
	// example:
	//
	// odps_source
	ConnectionName *string `json:"ConnectionName,omitempty" xml:"ConnectionName,omitempty"`
	// example:
	//
	// SELECT "1";
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 00 00-59/5 1-23 	- 	- ?
	CronExpress *string `json:"CronExpress,omitempty" xml:"CronExpress,omitempty"`
	// example:
	//
	// NOT_DAY
	CycleType *string `json:"CycleType,omitempty" xml:"CycleType,omitempty"`
	// example:
	//
	// 5,10,15,20
	DependentNodeIdList *string `json:"DependentNodeIdList,omitempty" xml:"DependentNodeIdList,omitempty"`
	// example:
	//
	// USER_DEFINE
	DependentType *string `json:"DependentType,omitempty" xml:"DependentType,omitempty"`
	// example:
	//
	// 4155787800000
	EndEffectDate *int64 `json:"EndEffectDate,omitempty" xml:"EndEffectDate,omitempty"`
	// example:
	//
	// Here is the file description
	FileDescription *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	// example:
	//
	// Business_process/First_Business_Process/data_integration/Folder_1/Folder_2
	FileFolderPath *string `json:"FileFolderPath,omitempty" xml:"FileFolderPath,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 100000001
	FileId *int64 `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// ods_user_info_d
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// true
	IgnoreParentSkipRunningProperty *bool `json:"IgnoreParentSkipRunningProperty,omitempty" xml:"IgnoreParentSkipRunningProperty,omitempty"`
	// example:
	//
	// m-uf6d7npxk1hhek8ng0cb
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// example:
	//
	// project_root,project.file1,project.001_out
	InputList *string `json:"InputList,omitempty" xml:"InputList,omitempty"`
	// example:
	//
	// [{"ValueSource": "project_001.first_node:bizdate_param","ParameterName": "bizdate_input"}]
	InputParameters *string `json:"InputParameters,omitempty" xml:"InputParameters,omitempty"`
	// example:
	//
	// dw_project.ods_user_info_d
	OutputList *string `json:"OutputList,omitempty" xml:"OutputList,omitempty"`
	// example:
	//
	// [{"Type": 1,"Value": "${bizdate}","ParameterName": "bizdate_param"}]
	OutputParameters *string `json:"OutputParameters,omitempty" xml:"OutputParameters,omitempty"`
	// example:
	//
	// 18023848927592
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// example:
	//
	// x=a y=b z=c
	ParaValue *string `json:"ParaValue,omitempty" xml:"ParaValue,omitempty"`
	// example:
	//
	// 100001
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	// example:
	//
	// ALL_ALLOWED
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// example:
	//
	// default_group
	ResourceGroupIdentifier *string `json:"ResourceGroupIdentifier,omitempty" xml:"ResourceGroupIdentifier,omitempty"`
	// example:
	//
	// NORMAL
	SchedulerType *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
	// example:
	//
	// 936923400000
	StartEffectDate *int64 `json:"StartEffectDate,omitempty" xml:"StartEffectDate,omitempty"`
	// example:
	//
	// true
	StartImmediately *bool `json:"StartImmediately,omitempty" xml:"StartImmediately,omitempty"`
	// example:
	//
	// false
	Stop *bool `json:"Stop,omitempty" xml:"Stop,omitempty"`
	// example:
	//
	// 1
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s UpdateFileRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFileRequest) GoString() string {
	return s.String()
}

func (s *UpdateFileRequest) SetAdvancedSettings(v string) *UpdateFileRequest {
	s.AdvancedSettings = &v
	return s
}

func (s *UpdateFileRequest) SetApplyScheduleImmediately(v bool) *UpdateFileRequest {
	s.ApplyScheduleImmediately = &v
	return s
}

func (s *UpdateFileRequest) SetAutoParsing(v bool) *UpdateFileRequest {
	s.AutoParsing = &v
	return s
}

func (s *UpdateFileRequest) SetAutoRerunIntervalMillis(v int32) *UpdateFileRequest {
	s.AutoRerunIntervalMillis = &v
	return s
}

func (s *UpdateFileRequest) SetAutoRerunTimes(v int32) *UpdateFileRequest {
	s.AutoRerunTimes = &v
	return s
}

func (s *UpdateFileRequest) SetConnectionName(v string) *UpdateFileRequest {
	s.ConnectionName = &v
	return s
}

func (s *UpdateFileRequest) SetContent(v string) *UpdateFileRequest {
	s.Content = &v
	return s
}

func (s *UpdateFileRequest) SetCronExpress(v string) *UpdateFileRequest {
	s.CronExpress = &v
	return s
}

func (s *UpdateFileRequest) SetCycleType(v string) *UpdateFileRequest {
	s.CycleType = &v
	return s
}

func (s *UpdateFileRequest) SetDependentNodeIdList(v string) *UpdateFileRequest {
	s.DependentNodeIdList = &v
	return s
}

func (s *UpdateFileRequest) SetDependentType(v string) *UpdateFileRequest {
	s.DependentType = &v
	return s
}

func (s *UpdateFileRequest) SetEndEffectDate(v int64) *UpdateFileRequest {
	s.EndEffectDate = &v
	return s
}

func (s *UpdateFileRequest) SetFileDescription(v string) *UpdateFileRequest {
	s.FileDescription = &v
	return s
}

func (s *UpdateFileRequest) SetFileFolderPath(v string) *UpdateFileRequest {
	s.FileFolderPath = &v
	return s
}

func (s *UpdateFileRequest) SetFileId(v int64) *UpdateFileRequest {
	s.FileId = &v
	return s
}

func (s *UpdateFileRequest) SetFileName(v string) *UpdateFileRequest {
	s.FileName = &v
	return s
}

func (s *UpdateFileRequest) SetIgnoreParentSkipRunningProperty(v bool) *UpdateFileRequest {
	s.IgnoreParentSkipRunningProperty = &v
	return s
}

func (s *UpdateFileRequest) SetImageId(v string) *UpdateFileRequest {
	s.ImageId = &v
	return s
}

func (s *UpdateFileRequest) SetInputList(v string) *UpdateFileRequest {
	s.InputList = &v
	return s
}

func (s *UpdateFileRequest) SetInputParameters(v string) *UpdateFileRequest {
	s.InputParameters = &v
	return s
}

func (s *UpdateFileRequest) SetOutputList(v string) *UpdateFileRequest {
	s.OutputList = &v
	return s
}

func (s *UpdateFileRequest) SetOutputParameters(v string) *UpdateFileRequest {
	s.OutputParameters = &v
	return s
}

func (s *UpdateFileRequest) SetOwner(v string) *UpdateFileRequest {
	s.Owner = &v
	return s
}

func (s *UpdateFileRequest) SetParaValue(v string) *UpdateFileRequest {
	s.ParaValue = &v
	return s
}

func (s *UpdateFileRequest) SetProjectId(v int64) *UpdateFileRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateFileRequest) SetProjectIdentifier(v string) *UpdateFileRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *UpdateFileRequest) SetRerunMode(v string) *UpdateFileRequest {
	s.RerunMode = &v
	return s
}

func (s *UpdateFileRequest) SetResourceGroupIdentifier(v string) *UpdateFileRequest {
	s.ResourceGroupIdentifier = &v
	return s
}

func (s *UpdateFileRequest) SetSchedulerType(v string) *UpdateFileRequest {
	s.SchedulerType = &v
	return s
}

func (s *UpdateFileRequest) SetStartEffectDate(v int64) *UpdateFileRequest {
	s.StartEffectDate = &v
	return s
}

func (s *UpdateFileRequest) SetStartImmediately(v bool) *UpdateFileRequest {
	s.StartImmediately = &v
	return s
}

func (s *UpdateFileRequest) SetStop(v bool) *UpdateFileRequest {
	s.Stop = &v
	return s
}

func (s *UpdateFileRequest) SetTimeout(v int32) *UpdateFileRequest {
	s.Timeout = &v
	return s
}

type UpdateFileResponseBody struct {
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFGH-IJKLMNOPQ
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateFileResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateFileResponseBody) SetErrorCode(v string) *UpdateFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateFileResponseBody) SetErrorMessage(v string) *UpdateFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateFileResponseBody) SetHttpStatusCode(v int32) *UpdateFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateFileResponseBody) SetRequestId(v string) *UpdateFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateFileResponseBody) SetSuccess(v bool) *UpdateFileResponseBody {
	s.Success = &v
	return s
}

type UpdateFileResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateFileResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFileResponse) GoString() string {
	return s.String()
}

func (s *UpdateFileResponse) SetHeaders(v map[string]*string) *UpdateFileResponse {
	s.Headers = v
	return s
}

func (s *UpdateFileResponse) SetStatusCode(v int32) *UpdateFileResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateFileResponse) SetBody(v *UpdateFileResponseBody) *UpdateFileResponse {
	s.Body = v
	return s
}

type UpdateFolderRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2735c2c19d58
	FolderId *string `json:"FolderId,omitempty" xml:"FolderId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// MySecondFolder
	FolderName *string `json:"FolderName,omitempty" xml:"FolderName,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
}

func (s UpdateFolderRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFolderRequest) GoString() string {
	return s.String()
}

func (s *UpdateFolderRequest) SetFolderId(v string) *UpdateFolderRequest {
	s.FolderId = &v
	return s
}

func (s *UpdateFolderRequest) SetFolderName(v string) *UpdateFolderRequest {
	s.FolderName = &v
	return s
}

func (s *UpdateFolderRequest) SetProjectId(v int64) *UpdateFolderRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateFolderRequest) SetProjectIdentifier(v string) *UpdateFolderRequest {
	s.ProjectIdentifier = &v
	return s
}

type UpdateFolderResponseBody struct {
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateFolderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateFolderResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateFolderResponseBody) SetErrorCode(v string) *UpdateFolderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateFolderResponseBody) SetErrorMessage(v string) *UpdateFolderResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateFolderResponseBody) SetHttpStatusCode(v int32) *UpdateFolderResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateFolderResponseBody) SetRequestId(v string) *UpdateFolderResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateFolderResponseBody) SetSuccess(v bool) *UpdateFolderResponseBody {
	s.Success = &v
	return s
}

type UpdateFolderResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateFolderResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateFolderResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFolderResponse) GoString() string {
	return s.String()
}

func (s *UpdateFolderResponse) SetHeaders(v map[string]*string) *UpdateFolderResponse {
	s.Headers = v
	return s
}

func (s *UpdateFolderResponse) SetStatusCode(v int32) *UpdateFolderResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateFolderResponse) SetBody(v *UpdateFolderResponseBody) *UpdateFolderResponse {
	s.Body = v
	return s
}

type UpdateFunctionRequest struct {
	// The ID of the UDF.
	//
	// This parameter is required.
	//
	// example:
	//
	// 463497880880954XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The FlowSpec field information about the UDF. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//     "version": "1.1.0",
	//
	//     "kind": "Function",
	//
	//     "spec": {
	//
	//         "functions": [
	//
	//             {
	//
	//                 "name": "FunctionName",
	//
	//                 "script": {
	//
	//                     "content": "{\\"name\\": \\"FunctionName\\", \\"datasource\\": {\\"type\\": \\"odps\\", \\"name\\": \\"odps_first\\"}, \\"runtimeResource\\": {\\"resourceGroup\\": \\"S_res_group_XXXX_XXXX\\"}}",
	//
	//                     "path": "XXX/OpenAPI/Function/FunctionName",
	//
	//                     "runtime": {
	//
	//                         "command": "ODPS_FUNCTION"
	//
	//                     }
	//
	//                 },
	//
	//                 "datasource": {
	//
	//                     "name": "odps_first",
	//
	//                     "type": "odps"
	//
	//                 },
	//
	//                 "runtimeResource": {
	//
	//                     "resourceGroup": "S_res_group_XXXX_XXXX"
	//
	//                 }
	//
	//             }
	//
	//         ]
	//
	//     }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s UpdateFunctionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFunctionRequest) GoString() string {
	return s.String()
}

func (s *UpdateFunctionRequest) SetId(v int64) *UpdateFunctionRequest {
	s.Id = &v
	return s
}

func (s *UpdateFunctionRequest) SetProjectId(v int64) *UpdateFunctionRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateFunctionRequest) SetSpec(v string) *UpdateFunctionRequest {
	s.Spec = &v
	return s
}

type UpdateFunctionResponseBody struct {
	// The request ID. You can troubleshoot issues based on the ID.
	//
	// example:
	//
	// 12123960-CB2C-5086-868E-C6C1D024XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// true
	//
	// false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateFunctionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateFunctionResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateFunctionResponseBody) SetRequestId(v string) *UpdateFunctionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateFunctionResponseBody) SetSuccess(v bool) *UpdateFunctionResponseBody {
	s.Success = &v
	return s
}

type UpdateFunctionResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateFunctionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateFunctionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFunctionResponse) GoString() string {
	return s.String()
}

func (s *UpdateFunctionResponse) SetHeaders(v map[string]*string) *UpdateFunctionResponse {
	s.Headers = v
	return s
}

func (s *UpdateFunctionResponse) SetStatusCode(v int32) *UpdateFunctionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateFunctionResponse) SetBody(v *UpdateFunctionResponseBody) *UpdateFunctionResponse {
	s.Body = v
	return s
}

type UpdateIDEEventResultRequest struct {
	// example:
	//
	// OK
	CheckResult *string `json:"CheckResult,omitempty" xml:"CheckResult,omitempty"`
	// example:
	//
	// Succeeded
	CheckResultTip *string `json:"CheckResultTip,omitempty" xml:"CheckResultTip,omitempty"`
	// example:
	//
	// 8abcb91f-d266-4073-b907-2ed670378ed1
	ExtensionCode *string `json:"ExtensionCode,omitempty" xml:"ExtensionCode,omitempty"`
	// 扩展点消息UUID
	//
	// example:
	//
	// 8abcb91f-d266-4073-b907-2ed670378ed1
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s UpdateIDEEventResultRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIDEEventResultRequest) GoString() string {
	return s.String()
}

func (s *UpdateIDEEventResultRequest) SetCheckResult(v string) *UpdateIDEEventResultRequest {
	s.CheckResult = &v
	return s
}

func (s *UpdateIDEEventResultRequest) SetCheckResultTip(v string) *UpdateIDEEventResultRequest {
	s.CheckResultTip = &v
	return s
}

func (s *UpdateIDEEventResultRequest) SetExtensionCode(v string) *UpdateIDEEventResultRequest {
	s.ExtensionCode = &v
	return s
}

func (s *UpdateIDEEventResultRequest) SetMessageId(v string) *UpdateIDEEventResultRequest {
	s.MessageId = &v
	return s
}

type UpdateIDEEventResultResponseBody struct {
	// example:
	//
	// 8abcb91f-d266-4073-b907-2ed670378ed1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateIDEEventResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateIDEEventResultResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateIDEEventResultResponseBody) SetRequestId(v string) *UpdateIDEEventResultResponseBody {
	s.RequestId = &v
	return s
}

type UpdateIDEEventResultResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateIDEEventResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateIDEEventResultResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIDEEventResultResponse) GoString() string {
	return s.String()
}

func (s *UpdateIDEEventResultResponse) SetHeaders(v map[string]*string) *UpdateIDEEventResultResponse {
	s.Headers = v
	return s
}

func (s *UpdateIDEEventResultResponse) SetStatusCode(v int32) *UpdateIDEEventResultResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateIDEEventResultResponse) SetBody(v *UpdateIDEEventResultResponseBody) *UpdateIDEEventResultResponse {
	s.Body = v
	return s
}

type UpdateMetaCollectionRequest struct {
	Administrators []*string `json:"Administrators,omitempty" xml:"Administrators,omitempty" type:"Repeated"`
	// example:
	//
	// new comment
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// category.123
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// new_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateMetaCollectionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaCollectionRequest) GoString() string {
	return s.String()
}

func (s *UpdateMetaCollectionRequest) SetAdministrators(v []*string) *UpdateMetaCollectionRequest {
	s.Administrators = v
	return s
}

func (s *UpdateMetaCollectionRequest) SetDescription(v string) *UpdateMetaCollectionRequest {
	s.Description = &v
	return s
}

func (s *UpdateMetaCollectionRequest) SetId(v string) *UpdateMetaCollectionRequest {
	s.Id = &v
	return s
}

func (s *UpdateMetaCollectionRequest) SetName(v string) *UpdateMetaCollectionRequest {
	s.Name = &v
	return s
}

type UpdateMetaCollectionShrinkRequest struct {
	AdministratorsShrink *string `json:"Administrators,omitempty" xml:"Administrators,omitempty"`
	// example:
	//
	// new comment
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// category.123
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// new_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateMetaCollectionShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaCollectionShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateMetaCollectionShrinkRequest) SetAdministratorsShrink(v string) *UpdateMetaCollectionShrinkRequest {
	s.AdministratorsShrink = &v
	return s
}

func (s *UpdateMetaCollectionShrinkRequest) SetDescription(v string) *UpdateMetaCollectionShrinkRequest {
	s.Description = &v
	return s
}

func (s *UpdateMetaCollectionShrinkRequest) SetId(v string) *UpdateMetaCollectionShrinkRequest {
	s.Id = &v
	return s
}

func (s *UpdateMetaCollectionShrinkRequest) SetName(v string) *UpdateMetaCollectionShrinkRequest {
	s.Name = &v
	return s
}

type UpdateMetaCollectionResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// 0E1C0122-F79F-5C26-B546-47A321691868
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMetaCollectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaCollectionResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMetaCollectionResponseBody) SetRequestId(v string) *UpdateMetaCollectionResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMetaCollectionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMetaCollectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMetaCollectionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMetaCollectionResponse) GoString() string {
	return s.String()
}

func (s *UpdateMetaCollectionResponse) SetHeaders(v map[string]*string) *UpdateMetaCollectionResponse {
	s.Headers = v
	return s
}

func (s *UpdateMetaCollectionResponse) SetStatusCode(v int32) *UpdateMetaCollectionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMetaCollectionResponse) SetBody(v *UpdateMetaCollectionResponseBody) *UpdateMetaCollectionResponse {
	s.Body = v
	return s
}

type UpdateNodeRequest struct {
	// The ID of the node.
	//
	// This parameter is required.
	//
	// example:
	//
	// 652567824470354XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// { "title": "CycleWorkflow Schema", "description": "the JSON schema that is used to configure the auto triggered workflow and nodes in the workflow", "type": "object", "required": [ "version", "kind", "spec" ], "properties": { "version": { "type": "string", "const": "1.1.0", "description": "the schema version. The value is fixed to 1.1.0" }, "kind": { "type": "string", "enum": [ "Workflow", "Node" ], "description": "the resource type" }, "spec": { "type": "object", "description": "the key configurations of the workflow", "required": [ "nodes" ], "properties": { "nodes": { "type": "array", "description": "the nodes in the workflow", "items": { "type": "object", "required": [ "name", "script" ], "properties": { "recurrence": { "type": "string", "enum": [ "Normal", "Pause", "Skip", "NoneAuto" ], "description": "the running mode of the node. Valid values: Normal, Pause, Skip, and NoneAuto" }, "id": { "type": "string", "description": "the node ID" }, "timeout": { "type": "integer", "minimum": 0, "description": "the timeout period. Unit: seconds" }, "instanceMode": { "type": "string", "enum": [ "T+1", "Immediately" ], "description": "the instance generation mode. Valid values: T+1 and Immediately" }, "rerunMode": { "type": "string", "enum": [ "Allowed", "Denied", "FailureAllowed" ], "description": "the rerun mode. Valid values: AllAllowed, Denied, and FailureAllowed" }, "rerunTimes": { "type": "integer", "minimum": 0, "description": "the maximum number of reruns allowed after a failure" }, "rerunInterval": { "type": "integer", "minimum": 0, "description": "the rerun interval. Unit: seconds" }, "datasource": { "type": "object", "description": "the configurations of the data source", "required": [ "name", "type" ], "properties": { "name": { "type": "string", "description": "the name of the data source" }, "type": { "type": "string", "enum": [ "odps" ], "description": "the type of the data source. Only MaxCompute data sources are supported" } } }, "script": { "type": "object", "description": "the script configurations of the node", "required": [ "path", "runtime" ], "properties": { "language": { "type": "string", "description": "the programming language of the script" }, "path": { "type": "string", "description": "the storage path of the script file. The storage path ends with the node name and does not require a file extension" }, "runtime": { "type": "object", "description": "the configurations of the runtime environment", "required": [ "command" ], "properties": { "command": { "type": "string", "enum": [ "ODPS_SQL" ], "Description": "the command" }, "cu": { "type": "string", "description": "the unit of the computing resource" } } } } }, "trigger": { "type": "object", "description": "the configurations of the node trigger", "required": [ "type" ], "properties": { "type": { "type": "string", "enum": [ "Scheduler", "Manual", "Streaming", "None" ], "description": "the trigger type. Valid values: Scheduler, Manual, Streaming, and None" }, "cron": { "type": "string", "description": "the cron expression, which is suitable for only auto triggered nodes" }, "startTime": { "type": "string", "format": "yyyy-MM-dd hh:mm:ss", "description": "the start time for scheduling" }, "endTime": { "type": "string", "format": "yyyy-MM-dd hh:mm:ss", "description": "the end time for scheduling" } } }, "runtimeResource": { "type": "object", "description": "the resource configurations for running", "required": [ "resourceGroup" ], "properties": { "resourceGroup": { "type": "string", "description": "the name of the resource group" } } }, "name": { "type": "string", "description": "the name of the node" }, "owner": { "type": "string", "description": "the node owner" }, "inputs": { "type": "object", "description": "the node input parameters", "properties": { "nodeOutputs": { "type": "array", "description": "the node dependencies", "items": { "type": "object", "required": [ "data" ], "properties": { "data": { "type": "string", "description": "the identifier of the node dependency" }, "refTableName": { "type": "string", "description": "the name of the table that is associated with the node. You must configure this parameter if the artifactType parameter is set to Table" }, "isDefault": { "type": "boolean", "description": "specifies whether the table is the default input table“ } } } } } }, "outputs": { "type": "object", "description": "the node output parameters", "properties": { "nodeOutputs": { "type": "array", "description": "the node dependencies", "items": { "type": "object", "required": [ "data" ], "properties": { "data": { "type": "string", "description": "the identifier of the node dependency" }, "refTableName": { "type": "string", "description": "the name of the table that is associated with the node. You must configure this parameter if the artifactType parameter is set to Table" }, "isDefault": { "type": "boolean", "description": "specifies whether the table is the default output table“ } } } } } } } } } } } } }
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//     "version": "1.1.0",
	//
	//     "kind": "Node",
	//
	//     "spec": {
	//
	//         "nodes": [
	//
	//             {
	//
	//                 "id": "860438872620113XXXX",
	//
	//                 "recurrence": "Normal",
	//
	//                 "timeout": 0,
	//
	//                 "instanceMode": "T+1",
	//
	//                 "rerunMode": "Allowed",
	//
	//                 "rerunTimes": 3,
	//
	//                 "rerunInterval": 180000,
	//
	//                 "datasource": {
	//
	//                     "name": "odps_test",
	//
	//                     "type": "odps"
	//
	//                 },
	//
	//                 "script": {
	//
	//                     "path": "XX/OpenAPI_Test/odpsSQL_Test",
	//
	//                     "runtime": {
	//
	//                         "command": "ODPS_SQL"
	//
	//                     },
	//
	//                     "content": "select now();"
	//
	//                 },
	//
	//                 "trigger": {
	//
	//                     "type": "Scheduler",
	//
	//                     "cron": "00 00 00 	- 	- ?",
	//
	//                     "startTime": "1970-01-01 00:00:00",
	//
	//                     "endTime": "9999-01-01 00:00:00",
	//
	//                     "timezone": "Asia/Shanghai",
	//
	//                     "delaySeconds": 0
	//
	//                 },
	//
	//                 "runtimeResource": {
	//
	//                     "resourceGroup": "S_res_group_XXXX_XXXX"
	//
	//                 },
	//
	//                 "name": "odpsSQL_Test",
	//
	//                 "inputs": {
	//
	//                     "nodeOutputs": [
	//
	//                         {
	//
	//                             "data": "lwttest_standard_root",
	//
	//                             "artifactType": "NodeOutput"
	//
	//                         }
	//
	//                     ]
	//
	//                 },
	//
	//                 "outputs": {
	//
	//                     "nodeOutputs": [
	//
	//                         {
	//
	//                             "data": "output_data",
	//
	//                             "artifactType": "NodeOutput",
	//
	//                             "refTableName": "odpsSQL_Test"
	//
	//                         }
	//
	//                     ]
	//
	//                 }
	//
	//             }
	//
	//         ],
	//
	//         "flow": [
	//
	//             {
	//
	//                 "nodeId": "860438872620113XXXX",
	//
	//                 "depends": [
	//
	//                     {
	//
	//                         "type": "Normal",
	//
	//                         "output": "project_root"
	//
	//                     }
	//
	//                 ]
	//
	//             }
	//
	//         ]
	//
	//     }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s UpdateNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateNodeRequest) GoString() string {
	return s.String()
}

func (s *UpdateNodeRequest) SetId(v int64) *UpdateNodeRequest {
	s.Id = &v
	return s
}

func (s *UpdateNodeRequest) SetProjectId(v int64) *UpdateNodeRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateNodeRequest) SetSpec(v string) *UpdateNodeRequest {
	s.Spec = &v
	return s
}

type UpdateNodeResponseBody struct {
	// The request ID. You can troubleshoot issues based on the ID.
	//
	// example:
	//
	// 99EBE7CF-69C0-5089-BE3E-79563C31XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateNodeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateNodeResponseBody) SetRequestId(v string) *UpdateNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateNodeResponseBody) SetSuccess(v bool) *UpdateNodeResponseBody {
	s.Success = &v
	return s
}

type UpdateNodeResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateNodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateNodeResponse) GoString() string {
	return s.String()
}

func (s *UpdateNodeResponse) SetHeaders(v map[string]*string) *UpdateNodeResponse {
	s.Headers = v
	return s
}

func (s *UpdateNodeResponse) SetStatusCode(v int32) *UpdateNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateNodeResponse) SetBody(v *UpdateNodeResponseBody) *UpdateNodeResponse {
	s.Body = v
	return s
}

type UpdateProjectRequest struct {
	// The description of the workspace.
	//
	// example:
	//
	// Financial analysis group project data development
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the development environment. Valid values:
	//
	// 	- true: enables the development environment. In this case, the development environment is isolated from the production environment in the workspace.
	//
	// 	- false: disables the development environment. In this case, only the production environment is used in the workspace.
	//
	// example:
	//
	// true
	DevEnvironmentEnabled *bool `json:"DevEnvironmentEnabled,omitempty" xml:"DevEnvironmentEnabled,omitempty"`
	// Specifies whether to disable the Develop role. Valid values:
	//
	// 	- false (default)
	//
	// 	- true
	//
	// Note: If you disable the Develop role, you cannot assume the Develop role to develop nodes in workflows and edit node code. The Develop role cannot be enabled again after it is disabled.
	//
	// example:
	//
	// true
	DevRoleDisabled *bool `json:"DevRoleDisabled,omitempty" xml:"DevRoleDisabled,omitempty"`
	// The display name of the workspace.
	//
	// example:
	//
	// Sora financial analysis Space
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The ID of the DataWorks workspace. You can log on to the [DataWorks console](https://dataworks.console.aliyun.com/workspace/list) and go to the workspace management page to obtain the ID.
	//
	// This parameter is used to determine the DataWorks workspaces used for this API call.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// Specifies whether to enable scheduling of Platform for AI (PAI) tasks. Valid values:
	//
	// 	- true: enables scheduling of PAI tasks. In this case, you can create a PAI node in a DataWorks workspace and configure scheduling properties for the node to implement periodic scheduling of PAI tasks.
	//
	// 	- false: disables scheduling of PAI tasks.
	//
	// example:
	//
	// true
	PaiTaskEnabled *bool `json:"PaiTaskEnabled,omitempty" xml:"PaiTaskEnabled,omitempty"`
	// Specifies whether to disable or enable the workspace. Valid values:
	//
	// 	- Available: enables the workspace.
	//
	// 	- Forbidden: disables the workspace.
	//
	// example:
	//
	// Forbidden
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectRequest) GoString() string {
	return s.String()
}

func (s *UpdateProjectRequest) SetDescription(v string) *UpdateProjectRequest {
	s.Description = &v
	return s
}

func (s *UpdateProjectRequest) SetDevEnvironmentEnabled(v bool) *UpdateProjectRequest {
	s.DevEnvironmentEnabled = &v
	return s
}

func (s *UpdateProjectRequest) SetDevRoleDisabled(v bool) *UpdateProjectRequest {
	s.DevRoleDisabled = &v
	return s
}

func (s *UpdateProjectRequest) SetDisplayName(v string) *UpdateProjectRequest {
	s.DisplayName = &v
	return s
}

func (s *UpdateProjectRequest) SetId(v int64) *UpdateProjectRequest {
	s.Id = &v
	return s
}

func (s *UpdateProjectRequest) SetPaiTaskEnabled(v bool) *UpdateProjectRequest {
	s.PaiTaskEnabled = &v
	return s
}

func (s *UpdateProjectRequest) SetStatus(v string) *UpdateProjectRequest {
	s.Status = &v
	return s
}

type UpdateProjectResponseBody struct {
	// The ID of the request. It is used to locate logs and troubleshoot problems.
	//
	// example:
	//
	// AFBB799F-8578-51C5-A766-E922EDB8XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProjectResponseBody) SetRequestId(v string) *UpdateProjectResponseBody {
	s.RequestId = &v
	return s
}

type UpdateProjectResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectResponse) GoString() string {
	return s.String()
}

func (s *UpdateProjectResponse) SetHeaders(v map[string]*string) *UpdateProjectResponse {
	s.Headers = v
	return s
}

func (s *UpdateProjectResponse) SetStatusCode(v int32) *UpdateProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateProjectResponse) SetBody(v *UpdateProjectResponseBody) *UpdateProjectResponse {
	s.Body = v
	return s
}

type UpdateResourceRequest struct {
	// The ID of the file resource.
	//
	// This parameter is required.
	//
	// example:
	//
	// 543217824470354XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId    *int64  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ResourceFile *string `json:"ResourceFile,omitempty" xml:"ResourceFile,omitempty"`
	// The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//     "version": "1.1.0",
	//
	//     "kind": "Resource",
	//
	//     "spec": {
	//
	//         "fileResources": [
	//
	//             {
	//
	//                 "name": "OpenAPI_Test_Resource.py",
	//
	//                 "script": {
	//
	//                     "content": "",
	//
	//                     "path": "XX/OpenAPI_Test/Resources_Test/OpenAPI_Test_Resource.py",
	//
	//                     "runtime": {
	//
	//                         "command": "ODPS_PYTHON"
	//
	//                     }
	//
	//                 },
	//
	//                 "type": "python",
	//
	//                 "file": {
	//
	//                     "storage": {}
	//
	//                 },
	//
	//                 "datasource": {
	//
	//                     "name": "odps_first",
	//
	//                     "type": "odps"
	//
	//                 }
	//
	//             }
	//
	//         ]
	//
	//     }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s UpdateResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateResourceRequest) GoString() string {
	return s.String()
}

func (s *UpdateResourceRequest) SetId(v int64) *UpdateResourceRequest {
	s.Id = &v
	return s
}

func (s *UpdateResourceRequest) SetProjectId(v int64) *UpdateResourceRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateResourceRequest) SetResourceFile(v string) *UpdateResourceRequest {
	s.ResourceFile = &v
	return s
}

func (s *UpdateResourceRequest) SetSpec(v string) *UpdateResourceRequest {
	s.Spec = &v
	return s
}

type UpdateResourceAdvanceRequest struct {
	// The ID of the file resource.
	//
	// This parameter is required.
	//
	// example:
	//
	// 543217824470354XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ProjectId          *int64    `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ResourceFileObject io.Reader `json:"ResourceFile,omitempty" xml:"ResourceFile,omitempty"`
	// The FlowSpec field information about the file resource. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//     "version": "1.1.0",
	//
	//     "kind": "Resource",
	//
	//     "spec": {
	//
	//         "fileResources": [
	//
	//             {
	//
	//                 "name": "OpenAPI_Test_Resource.py",
	//
	//                 "script": {
	//
	//                     "content": "",
	//
	//                     "path": "XX/OpenAPI_Test/Resources_Test/OpenAPI_Test_Resource.py",
	//
	//                     "runtime": {
	//
	//                         "command": "ODPS_PYTHON"
	//
	//                     }
	//
	//                 },
	//
	//                 "type": "python",
	//
	//                 "file": {
	//
	//                     "storage": {}
	//
	//                 },
	//
	//                 "datasource": {
	//
	//                     "name": "odps_first",
	//
	//                     "type": "odps"
	//
	//                 }
	//
	//             }
	//
	//         ]
	//
	//     }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s UpdateResourceAdvanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateResourceAdvanceRequest) GoString() string {
	return s.String()
}

func (s *UpdateResourceAdvanceRequest) SetId(v int64) *UpdateResourceAdvanceRequest {
	s.Id = &v
	return s
}

func (s *UpdateResourceAdvanceRequest) SetProjectId(v int64) *UpdateResourceAdvanceRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateResourceAdvanceRequest) SetResourceFileObject(v io.Reader) *UpdateResourceAdvanceRequest {
	s.ResourceFileObject = v
	return s
}

func (s *UpdateResourceAdvanceRequest) SetSpec(v string) *UpdateResourceAdvanceRequest {
	s.Spec = &v
	return s
}

type UpdateResourceResponseBody struct {
	// The request ID. You can troubleshoot issues based on the ID.
	//
	// example:
	//
	// 4CDF7B72-020B-542A-8465-21CFFA81XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateResourceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateResourceResponseBody) SetRequestId(v string) *UpdateResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateResourceResponseBody) SetSuccess(v bool) *UpdateResourceResponseBody {
	s.Success = &v
	return s
}

type UpdateResourceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateResourceResponse) GoString() string {
	return s.String()
}

func (s *UpdateResourceResponse) SetHeaders(v map[string]*string) *UpdateResourceResponse {
	s.Headers = v
	return s
}

func (s *UpdateResourceResponse) SetStatusCode(v int32) *UpdateResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateResourceResponse) SetBody(v *UpdateResourceResponseBody) *UpdateResourceResponse {
	s.Body = v
	return s
}

type UpdateResourceGroupRequest struct {
	// The ID of the new Alibaba Cloud resource group.
	//
	// example:
	//
	// rg-aek2kqofrgXXXXX
	AliyunResourceGroupId *string `json:"AliyunResourceGroupId,omitempty" xml:"AliyunResourceGroupId,omitempty"`
	// The ID of the resource group.
	//
	// This parameter is required.
	//
	// example:
	//
	// Serverless_res_group_524257424564736_6831777003XXXXX
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The new name that you want to change for the resource group.
	//
	// example:
	//
	// common_resource_group
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The new remarks that you want to modify for the resource group.
	//
	// example:
	//
	// Create a common resource group for common tasks
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
}

func (s UpdateResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateResourceGroupRequest) SetAliyunResourceGroupId(v string) *UpdateResourceGroupRequest {
	s.AliyunResourceGroupId = &v
	return s
}

func (s *UpdateResourceGroupRequest) SetId(v string) *UpdateResourceGroupRequest {
	s.Id = &v
	return s
}

func (s *UpdateResourceGroupRequest) SetName(v string) *UpdateResourceGroupRequest {
	s.Name = &v
	return s
}

func (s *UpdateResourceGroupRequest) SetRemark(v string) *UpdateResourceGroupRequest {
	s.Remark = &v
	return s
}

type UpdateResourceGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateResourceGroupResponseBody) SetRequestId(v string) *UpdateResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateResourceGroupResponseBody) SetSuccess(v bool) *UpdateResourceGroupResponseBody {
	s.Success = &v
	return s
}

type UpdateResourceGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateResourceGroupResponse) SetHeaders(v map[string]*string) *UpdateResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateResourceGroupResponse) SetStatusCode(v int32) *UpdateResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateResourceGroupResponse) SetBody(v *UpdateResourceGroupResponseBody) *UpdateResourceGroupResponse {
	s.Body = v
	return s
}

type UpdateRouteRequest struct {
	// The destination CIDR block of the route that you want to update.
	//
	// This parameter is required.
	//
	// example:
	//
	// 192.168.0.0/16
	DestinationCidr *string `json:"DestinationCidr,omitempty" xml:"DestinationCidr,omitempty"`
	// The route ID of the network resource.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s UpdateRouteRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRouteRequest) GoString() string {
	return s.String()
}

func (s *UpdateRouteRequest) SetDestinationCidr(v string) *UpdateRouteRequest {
	s.DestinationCidr = &v
	return s
}

func (s *UpdateRouteRequest) SetId(v int64) *UpdateRouteRequest {
	s.Id = &v
	return s
}

type UpdateRouteResponseBody struct {
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// 6A6CBE87-9F91-1323-B680-E7A7065XXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateRouteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRouteResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRouteResponseBody) SetRequestId(v string) *UpdateRouteResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateRouteResponseBody) SetSuccess(v bool) *UpdateRouteResponseBody {
	s.Success = &v
	return s
}

type UpdateRouteResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateRouteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateRouteResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRouteResponse) GoString() string {
	return s.String()
}

func (s *UpdateRouteResponse) SetHeaders(v map[string]*string) *UpdateRouteResponse {
	s.Headers = v
	return s
}

func (s *UpdateRouteResponse) SetStatusCode(v int32) *UpdateRouteResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateRouteResponse) SetBody(v *UpdateRouteResponseBody) *UpdateRouteResponse {
	s.Body = v
	return s
}

type UpdateTableBusinessMetadataRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// maxcompute-table:123456XXX::test_project::test_tbl
	//
	// dlf-table:123456XXX:test_catalog:test_db::test_tbl
	//
	// hms-table:c-abc123xxx::test_db::test_tbl
	//
	// holo-table:h-abc123xxx::test_db:test_schema:test_tbl
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// ## introduction
	Readme *string `json:"Readme,omitempty" xml:"Readme,omitempty"`
}

func (s UpdateTableBusinessMetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableBusinessMetadataRequest) GoString() string {
	return s.String()
}

func (s *UpdateTableBusinessMetadataRequest) SetId(v string) *UpdateTableBusinessMetadataRequest {
	s.Id = &v
	return s
}

func (s *UpdateTableBusinessMetadataRequest) SetReadme(v string) *UpdateTableBusinessMetadataRequest {
	s.Readme = &v
	return s
}

type UpdateTableBusinessMetadataResponseBody struct {
	// example:
	//
	// 7C352CB7-CD88-XXXXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateTableBusinessMetadataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableBusinessMetadataResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTableBusinessMetadataResponseBody) SetRequestId(v string) *UpdateTableBusinessMetadataResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTableBusinessMetadataResponseBody) SetSuccess(v bool) *UpdateTableBusinessMetadataResponseBody {
	s.Success = &v
	return s
}

type UpdateTableBusinessMetadataResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateTableBusinessMetadataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateTableBusinessMetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTableBusinessMetadataResponse) GoString() string {
	return s.String()
}

func (s *UpdateTableBusinessMetadataResponse) SetHeaders(v map[string]*string) *UpdateTableBusinessMetadataResponse {
	s.Headers = v
	return s
}

func (s *UpdateTableBusinessMetadataResponse) SetStatusCode(v int32) *UpdateTableBusinessMetadataResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTableBusinessMetadataResponse) SetBody(v *UpdateTableBusinessMetadataResponseBody) *UpdateTableBusinessMetadataResponse {
	s.Body = v
	return s
}

type UpdateTaskRequest struct {
	// The unique code of the client. This code uniquely identifies a task. This parameter is used to create a task asynchronously and implement the idempotence of the task. If you do not specify this parameter when you create the task, the system automatically generates a unique code. The unique code is uniquely associated with the task ID. If you specify this parameter when you update or delete the task, the value of this parameter must be the unique code that is used to create the task.
	//
	// example:
	//
	// Task_0bc5213917368545132902xxxxxxxx
	ClientUniqueCode *string `json:"ClientUniqueCode,omitempty" xml:"ClientUniqueCode,omitempty"`
	// The information about the associated data source.
	DataSource *UpdateTaskRequestDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The dependency information.
	Dependencies []*UpdateTaskRequestDependencies `json:"Dependencies,omitempty" xml:"Dependencies,omitempty" type:"Repeated"`
	// The description of the task.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The task ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The input information.
	Inputs *UpdateTaskRequestInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Struct"`
	// The instance generation mode. Valid values:
	//
	// 	- T+1
	//
	// 	- Immediately
	//
	// example:
	//
	// T+1
	InstanceMode *string `json:"InstanceMode,omitempty" xml:"InstanceMode,omitempty"`
	// The name.
	//
	// This parameter is required.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output information.
	Outputs *UpdateTaskRequestOutputs `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Struct"`
	// The account ID of the task owner.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The rerun interval. Unit: seconds.
	//
	// example:
	//
	// 60
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode. Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.
	//
	// This parameter is required.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The configurations of the runtime environment, such as the resource group information.
	//
	// This parameter is required.
	RuntimeResource *UpdateTaskRequestRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The script information.
	Script *UpdateTaskRequestScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	// The tags.
	Tags []*UpdateTaskRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The trigger method.
	//
	// This parameter is required.
	Trigger *UpdateTaskRequestTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s UpdateTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskRequest) GoString() string {
	return s.String()
}

func (s *UpdateTaskRequest) SetClientUniqueCode(v string) *UpdateTaskRequest {
	s.ClientUniqueCode = &v
	return s
}

func (s *UpdateTaskRequest) SetDataSource(v *UpdateTaskRequestDataSource) *UpdateTaskRequest {
	s.DataSource = v
	return s
}

func (s *UpdateTaskRequest) SetDependencies(v []*UpdateTaskRequestDependencies) *UpdateTaskRequest {
	s.Dependencies = v
	return s
}

func (s *UpdateTaskRequest) SetDescription(v string) *UpdateTaskRequest {
	s.Description = &v
	return s
}

func (s *UpdateTaskRequest) SetEnvType(v string) *UpdateTaskRequest {
	s.EnvType = &v
	return s
}

func (s *UpdateTaskRequest) SetId(v int64) *UpdateTaskRequest {
	s.Id = &v
	return s
}

func (s *UpdateTaskRequest) SetInputs(v *UpdateTaskRequestInputs) *UpdateTaskRequest {
	s.Inputs = v
	return s
}

func (s *UpdateTaskRequest) SetInstanceMode(v string) *UpdateTaskRequest {
	s.InstanceMode = &v
	return s
}

func (s *UpdateTaskRequest) SetName(v string) *UpdateTaskRequest {
	s.Name = &v
	return s
}

func (s *UpdateTaskRequest) SetOutputs(v *UpdateTaskRequestOutputs) *UpdateTaskRequest {
	s.Outputs = v
	return s
}

func (s *UpdateTaskRequest) SetOwner(v string) *UpdateTaskRequest {
	s.Owner = &v
	return s
}

func (s *UpdateTaskRequest) SetRerunInterval(v int32) *UpdateTaskRequest {
	s.RerunInterval = &v
	return s
}

func (s *UpdateTaskRequest) SetRerunMode(v string) *UpdateTaskRequest {
	s.RerunMode = &v
	return s
}

func (s *UpdateTaskRequest) SetRerunTimes(v int32) *UpdateTaskRequest {
	s.RerunTimes = &v
	return s
}

func (s *UpdateTaskRequest) SetRuntimeResource(v *UpdateTaskRequestRuntimeResource) *UpdateTaskRequest {
	s.RuntimeResource = v
	return s
}

func (s *UpdateTaskRequest) SetScript(v *UpdateTaskRequestScript) *UpdateTaskRequest {
	s.Script = v
	return s
}

func (s *UpdateTaskRequest) SetTags(v []*UpdateTaskRequestTags) *UpdateTaskRequest {
	s.Tags = v
	return s
}

func (s *UpdateTaskRequest) SetTimeout(v int32) *UpdateTaskRequest {
	s.Timeout = &v
	return s
}

func (s *UpdateTaskRequest) SetTrigger(v *UpdateTaskRequestTrigger) *UpdateTaskRequest {
	s.Trigger = v
	return s
}

type UpdateTaskRequestDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// odps_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateTaskRequestDataSource) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskRequestDataSource) GoString() string {
	return s.String()
}

func (s *UpdateTaskRequestDataSource) SetName(v string) *UpdateTaskRequestDataSource {
	s.Name = &v
	return s
}

type UpdateTaskRequestDependencies struct {
	// The dependency type. Valid values:
	//
	// 	- CrossCycleDependsOnChildren: cross-cycle dependency on level-1 descendant nodes
	//
	// 	- CrossCycleDependsOnSelf: cross-cycle dependency on the current node
	//
	// 	- CrossCycleDependsOnOtherNode: cross-cycle dependency on other nodes
	//
	// 	- Normal: same-cycle scheduling dependency
	//
	// This parameter is required.
	//
	// example:
	//
	// Normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The identifier of the output of the ancestor task. This parameter is returned only if `same-cycle scheduling dependencies` and the node input are configured.
	//
	// example:
	//
	// pre.odps_sql_demo_0
	UpstreamOutput *string `json:"UpstreamOutput,omitempty" xml:"UpstreamOutput,omitempty"`
	// The ancestor task ID. This parameter is returned only if `cross-cycle scheduling dependencies` or `same-cycle scheduling dependencies` and the node input are not configured.
	//
	// example:
	//
	// 1234
	UpstreamTaskId *int64 `json:"UpstreamTaskId,omitempty" xml:"UpstreamTaskId,omitempty"`
}

func (s UpdateTaskRequestDependencies) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskRequestDependencies) GoString() string {
	return s.String()
}

func (s *UpdateTaskRequestDependencies) SetType(v string) *UpdateTaskRequestDependencies {
	s.Type = &v
	return s
}

func (s *UpdateTaskRequestDependencies) SetUpstreamOutput(v string) *UpdateTaskRequestDependencies {
	s.UpstreamOutput = &v
	return s
}

func (s *UpdateTaskRequestDependencies) SetUpstreamTaskId(v int64) *UpdateTaskRequestDependencies {
	s.UpstreamTaskId = &v
	return s
}

type UpdateTaskRequestInputs struct {
	// The variables.
	Variables []*UpdateTaskRequestInputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s UpdateTaskRequestInputs) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskRequestInputs) GoString() string {
	return s.String()
}

func (s *UpdateTaskRequestInputs) SetVariables(v []*UpdateTaskRequestInputsVariables) *UpdateTaskRequestInputs {
	s.Variables = v
	return s
}

type UpdateTaskRequestInputsVariables struct {
	// The name of the variable.
	//
	// example:
	//
	// key1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type. Valid values:
	//
	// 	- Constant: constant
	//
	// 	- PassThrough: node output
	//
	// 	- System: variable
	//
	// 	- NodeOutput: script output
	//
	// This parameter is required.
	//
	// example:
	//
	// Constant
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateTaskRequestInputsVariables) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskRequestInputsVariables) GoString() string {
	return s.String()
}

func (s *UpdateTaskRequestInputsVariables) SetName(v string) *UpdateTaskRequestInputsVariables {
	s.Name = &v
	return s
}

func (s *UpdateTaskRequestInputsVariables) SetType(v string) *UpdateTaskRequestInputsVariables {
	s.Type = &v
	return s
}

func (s *UpdateTaskRequestInputsVariables) SetValue(v string) *UpdateTaskRequestInputsVariables {
	s.Value = &v
	return s
}

type UpdateTaskRequestOutputs struct {
	// The task outputs.
	TaskOutputs []*UpdateTaskRequestOutputsTaskOutputs `json:"TaskOutputs,omitempty" xml:"TaskOutputs,omitempty" type:"Repeated"`
	// The variables.
	Variables []*UpdateTaskRequestOutputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s UpdateTaskRequestOutputs) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskRequestOutputs) GoString() string {
	return s.String()
}

func (s *UpdateTaskRequestOutputs) SetTaskOutputs(v []*UpdateTaskRequestOutputsTaskOutputs) *UpdateTaskRequestOutputs {
	s.TaskOutputs = v
	return s
}

func (s *UpdateTaskRequestOutputs) SetVariables(v []*UpdateTaskRequestOutputsVariables) *UpdateTaskRequestOutputs {
	s.Variables = v
	return s
}

type UpdateTaskRequestOutputsTaskOutputs struct {
	// The identifier of the output.
	//
	// example:
	//
	// pre.odps_sql_demo_0
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s UpdateTaskRequestOutputsTaskOutputs) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskRequestOutputsTaskOutputs) GoString() string {
	return s.String()
}

func (s *UpdateTaskRequestOutputsTaskOutputs) SetOutput(v string) *UpdateTaskRequestOutputsTaskOutputs {
	s.Output = &v
	return s
}

type UpdateTaskRequestOutputsVariables struct {
	// The name of the variable.
	//
	// example:
	//
	// key1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type. Valid values:
	//
	// 	- Constant: constant
	//
	// 	- PassThrough: node output
	//
	// 	- System: variable
	//
	// 	- NodeOutput: script output
	//
	// This parameter is required.
	//
	// example:
	//
	// Constant
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateTaskRequestOutputsVariables) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskRequestOutputsVariables) GoString() string {
	return s.String()
}

func (s *UpdateTaskRequestOutputsVariables) SetName(v string) *UpdateTaskRequestOutputsVariables {
	s.Name = &v
	return s
}

func (s *UpdateTaskRequestOutputsVariables) SetType(v string) *UpdateTaskRequestOutputsVariables {
	s.Type = &v
	return s
}

func (s *UpdateTaskRequestOutputsVariables) SetValue(v string) *UpdateTaskRequestOutputsVariables {
	s.Value = &v
	return s
}

type UpdateTaskRequestRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// This parameter is required.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s UpdateTaskRequestRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskRequestRuntimeResource) GoString() string {
	return s.String()
}

func (s *UpdateTaskRequestRuntimeResource) SetCu(v string) *UpdateTaskRequestRuntimeResource {
	s.Cu = &v
	return s
}

func (s *UpdateTaskRequestRuntimeResource) SetImage(v string) *UpdateTaskRequestRuntimeResource {
	s.Image = &v
	return s
}

func (s *UpdateTaskRequestRuntimeResource) SetResourceGroupId(v string) *UpdateTaskRequestRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type UpdateTaskRequestScript struct {
	// The script content.
	//
	// example:
	//
	// echo "helloWorld"
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The script parameters.
	//
	// example:
	//
	// para1=$bizdate
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
}

func (s UpdateTaskRequestScript) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskRequestScript) GoString() string {
	return s.String()
}

func (s *UpdateTaskRequestScript) SetContent(v string) *UpdateTaskRequestScript {
	s.Content = &v
	return s
}

func (s *UpdateTaskRequestScript) SetParameters(v string) *UpdateTaskRequestScript {
	s.Parameters = &v
	return s
}

type UpdateTaskRequestTags struct {
	// The tag key.
	//
	// This parameter is required.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateTaskRequestTags) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskRequestTags) GoString() string {
	return s.String()
}

func (s *UpdateTaskRequestTags) SetKey(v string) *UpdateTaskRequestTags {
	s.Key = &v
	return s
}

func (s *UpdateTaskRequestTags) SetValue(v string) *UpdateTaskRequestTags {
	s.Value = &v
	return s
}

type UpdateTaskRequestTrigger struct {
	// The CRON expression. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler. The value of this parameter is in the`yyyy-mm-dd hh:mm:ss` format.
	//
	// example:
	//
	// 9999-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The start time of the time range during which the task is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler. The value of this parameter is in the`yyyy-mm-dd hh:mm:ss` format.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// This parameter is required.
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateTaskRequestTrigger) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskRequestTrigger) GoString() string {
	return s.String()
}

func (s *UpdateTaskRequestTrigger) SetCron(v string) *UpdateTaskRequestTrigger {
	s.Cron = &v
	return s
}

func (s *UpdateTaskRequestTrigger) SetEndTime(v string) *UpdateTaskRequestTrigger {
	s.EndTime = &v
	return s
}

func (s *UpdateTaskRequestTrigger) SetRecurrence(v string) *UpdateTaskRequestTrigger {
	s.Recurrence = &v
	return s
}

func (s *UpdateTaskRequestTrigger) SetStartTime(v string) *UpdateTaskRequestTrigger {
	s.StartTime = &v
	return s
}

func (s *UpdateTaskRequestTrigger) SetType(v string) *UpdateTaskRequestTrigger {
	s.Type = &v
	return s
}

type UpdateTaskShrinkRequest struct {
	// The unique code of the client. This code uniquely identifies a task. This parameter is used to create a task asynchronously and implement the idempotence of the task. If you do not specify this parameter when you create the task, the system automatically generates a unique code. The unique code is uniquely associated with the task ID. If you specify this parameter when you update or delete the task, the value of this parameter must be the unique code that is used to create the task.
	//
	// example:
	//
	// Task_0bc5213917368545132902xxxxxxxx
	ClientUniqueCode *string `json:"ClientUniqueCode,omitempty" xml:"ClientUniqueCode,omitempty"`
	// The information about the associated data source.
	DataSourceShrink *string `json:"DataSource,omitempty" xml:"DataSource,omitempty"`
	// The dependency information.
	DependenciesShrink *string `json:"Dependencies,omitempty" xml:"Dependencies,omitempty"`
	// The description of the task.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The task ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The input information.
	InputsShrink *string `json:"Inputs,omitempty" xml:"Inputs,omitempty"`
	// The instance generation mode. Valid values:
	//
	// 	- T+1
	//
	// 	- Immediately
	//
	// example:
	//
	// T+1
	InstanceMode *string `json:"InstanceMode,omitempty" xml:"InstanceMode,omitempty"`
	// The name.
	//
	// This parameter is required.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output information.
	OutputsShrink *string `json:"Outputs,omitempty" xml:"Outputs,omitempty"`
	// The account ID of the task owner.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The rerun interval. Unit: seconds.
	//
	// example:
	//
	// 60
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode. Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.
	//
	// This parameter is required.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The configurations of the runtime environment, such as the resource group information.
	//
	// This parameter is required.
	RuntimeResourceShrink *string `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty"`
	// The script information.
	ScriptShrink *string `json:"Script,omitempty" xml:"Script,omitempty"`
	// The tags.
	TagsShrink *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The trigger method.
	//
	// This parameter is required.
	TriggerShrink *string `json:"Trigger,omitempty" xml:"Trigger,omitempty"`
}

func (s UpdateTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateTaskShrinkRequest) SetClientUniqueCode(v string) *UpdateTaskShrinkRequest {
	s.ClientUniqueCode = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetDataSourceShrink(v string) *UpdateTaskShrinkRequest {
	s.DataSourceShrink = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetDependenciesShrink(v string) *UpdateTaskShrinkRequest {
	s.DependenciesShrink = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetDescription(v string) *UpdateTaskShrinkRequest {
	s.Description = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetEnvType(v string) *UpdateTaskShrinkRequest {
	s.EnvType = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetId(v int64) *UpdateTaskShrinkRequest {
	s.Id = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetInputsShrink(v string) *UpdateTaskShrinkRequest {
	s.InputsShrink = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetInstanceMode(v string) *UpdateTaskShrinkRequest {
	s.InstanceMode = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetName(v string) *UpdateTaskShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetOutputsShrink(v string) *UpdateTaskShrinkRequest {
	s.OutputsShrink = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetOwner(v string) *UpdateTaskShrinkRequest {
	s.Owner = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetRerunInterval(v int32) *UpdateTaskShrinkRequest {
	s.RerunInterval = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetRerunMode(v string) *UpdateTaskShrinkRequest {
	s.RerunMode = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetRerunTimes(v int32) *UpdateTaskShrinkRequest {
	s.RerunTimes = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetRuntimeResourceShrink(v string) *UpdateTaskShrinkRequest {
	s.RuntimeResourceShrink = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetScriptShrink(v string) *UpdateTaskShrinkRequest {
	s.ScriptShrink = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetTagsShrink(v string) *UpdateTaskShrinkRequest {
	s.TagsShrink = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetTimeout(v int32) *UpdateTaskShrinkRequest {
	s.Timeout = &v
	return s
}

func (s *UpdateTaskShrinkRequest) SetTriggerShrink(v string) *UpdateTaskShrinkRequest {
	s.TriggerShrink = &v
	return s
}

type UpdateTaskResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTaskResponseBody) SetRequestId(v string) *UpdateTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTaskResponseBody) SetSuccess(v bool) *UpdateTaskResponseBody {
	s.Success = &v
	return s
}

type UpdateTaskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskResponse) GoString() string {
	return s.String()
}

func (s *UpdateTaskResponse) SetHeaders(v map[string]*string) *UpdateTaskResponse {
	s.Headers = v
	return s
}

func (s *UpdateTaskResponse) SetStatusCode(v int32) *UpdateTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTaskResponse) SetBody(v *UpdateTaskResponseBody) *UpdateTaskResponse {
	s.Body = v
	return s
}

type UpdateTaskInstancesRequest struct {
	// The remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The instances.
	TaskInstances []*UpdateTaskInstancesRequestTaskInstances `json:"TaskInstances,omitempty" xml:"TaskInstances,omitempty" type:"Repeated"`
}

func (s UpdateTaskInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskInstancesRequest) GoString() string {
	return s.String()
}

func (s *UpdateTaskInstancesRequest) SetComment(v string) *UpdateTaskInstancesRequest {
	s.Comment = &v
	return s
}

func (s *UpdateTaskInstancesRequest) SetTaskInstances(v []*UpdateTaskInstancesRequestTaskInstances) *UpdateTaskInstancesRequest {
	s.TaskInstances = v
	return s
}

type UpdateTaskInstancesRequestTaskInstances struct {
	// The information about the associated data source.
	DataSource *UpdateTaskInstancesRequestTaskInstancesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The priority of the instance. Valid values: 1, 3, 5, 7, and 8.
	//
	// A larger value indicates a higher priority. Default value: 1.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The resource group information. Set this parameter to the ID of a resource group for scheduling.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	RuntimeResource *string `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty"`
}

func (s UpdateTaskInstancesRequestTaskInstances) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskInstancesRequestTaskInstances) GoString() string {
	return s.String()
}

func (s *UpdateTaskInstancesRequestTaskInstances) SetDataSource(v *UpdateTaskInstancesRequestTaskInstancesDataSource) *UpdateTaskInstancesRequestTaskInstances {
	s.DataSource = v
	return s
}

func (s *UpdateTaskInstancesRequestTaskInstances) SetId(v int64) *UpdateTaskInstancesRequestTaskInstances {
	s.Id = &v
	return s
}

func (s *UpdateTaskInstancesRequestTaskInstances) SetPriority(v int32) *UpdateTaskInstancesRequestTaskInstances {
	s.Priority = &v
	return s
}

func (s *UpdateTaskInstancesRequestTaskInstances) SetRuntimeResource(v string) *UpdateTaskInstancesRequestTaskInstances {
	s.RuntimeResource = &v
	return s
}

type UpdateTaskInstancesRequestTaskInstancesDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// mysql_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateTaskInstancesRequestTaskInstancesDataSource) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskInstancesRequestTaskInstancesDataSource) GoString() string {
	return s.String()
}

func (s *UpdateTaskInstancesRequestTaskInstancesDataSource) SetName(v string) *UpdateTaskInstancesRequestTaskInstancesDataSource {
	s.Name = &v
	return s
}

type UpdateTaskInstancesShrinkRequest struct {
	// The remarks.
	//
	// example:
	//
	// this is a comment
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The instances.
	TaskInstancesShrink *string `json:"TaskInstances,omitempty" xml:"TaskInstances,omitempty"`
}

func (s UpdateTaskInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateTaskInstancesShrinkRequest) SetComment(v string) *UpdateTaskInstancesShrinkRequest {
	s.Comment = &v
	return s
}

func (s *UpdateTaskInstancesShrinkRequest) SetTaskInstancesShrink(v string) *UpdateTaskInstancesShrinkRequest {
	s.TaskInstancesShrink = &v
	return s
}

type UpdateTaskInstancesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the batch operation, which is in the MAP structure. The instance ID serves as a key, and the result serves as a value.
	SuccessInfo map[string]*SuccessInfoValue `json:"SuccessInfo,omitempty" xml:"SuccessInfo,omitempty"`
}

func (s UpdateTaskInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTaskInstancesResponseBody) SetRequestId(v string) *UpdateTaskInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTaskInstancesResponseBody) SetSuccessInfo(v map[string]*SuccessInfoValue) *UpdateTaskInstancesResponseBody {
	s.SuccessInfo = v
	return s
}

type UpdateTaskInstancesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateTaskInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateTaskInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTaskInstancesResponse) GoString() string {
	return s.String()
}

func (s *UpdateTaskInstancesResponse) SetHeaders(v map[string]*string) *UpdateTaskInstancesResponse {
	s.Headers = v
	return s
}

func (s *UpdateTaskInstancesResponse) SetStatusCode(v int32) *UpdateTaskInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTaskInstancesResponse) SetBody(v *UpdateTaskInstancesResponseBody) *UpdateTaskInstancesResponse {
	s.Body = v
	return s
}

type UpdateUdfFileRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// com.alibaba.DataWorks.api.udf.StringConcat
	ClassName *string `json:"ClassName,omitempty" xml:"ClassName,omitempty"`
	// example:
	//
	// StringConcat(String... substrs)
	CmdDescription *string `json:"CmdDescription,omitempty" xml:"CmdDescription,omitempty"`
	// example:
	//
	// StringConcat(\\"a\\", \\"b\\", \\"c\\")
	Example *string `json:"Example,omitempty" xml:"Example,omitempty"`
	// example:
	//
	// Business_process/First_Business_Process/function/string_processing_function
	FileFolderPath *string `json:"FileFolderPath,omitempty" xml:"FileFolderPath,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10000001
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// STRING
	FunctionType *string `json:"FunctionType,omitempty" xml:"FunctionType,omitempty"`
	// example:
	//
	// List of strings to be connected
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	// example:
	//
	// 10000
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// dw_project
	ProjectIdentifier *string `json:"ProjectIdentifier,omitempty" xml:"ProjectIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// string-concat-1.0.0.jar,commons-lang-2.6.jar
	Resources *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	// example:
	//
	// New strings generated by concatenating all strings before and after the input order
	ReturnValue *string `json:"ReturnValue,omitempty" xml:"ReturnValue,omitempty"`
	// example:
	//
	// Concatenate several strings to generate a new string
	UdfDescription *string `json:"UdfDescription,omitempty" xml:"UdfDescription,omitempty"`
}

func (s UpdateUdfFileRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUdfFileRequest) GoString() string {
	return s.String()
}

func (s *UpdateUdfFileRequest) SetClassName(v string) *UpdateUdfFileRequest {
	s.ClassName = &v
	return s
}

func (s *UpdateUdfFileRequest) SetCmdDescription(v string) *UpdateUdfFileRequest {
	s.CmdDescription = &v
	return s
}

func (s *UpdateUdfFileRequest) SetExample(v string) *UpdateUdfFileRequest {
	s.Example = &v
	return s
}

func (s *UpdateUdfFileRequest) SetFileFolderPath(v string) *UpdateUdfFileRequest {
	s.FileFolderPath = &v
	return s
}

func (s *UpdateUdfFileRequest) SetFileId(v string) *UpdateUdfFileRequest {
	s.FileId = &v
	return s
}

func (s *UpdateUdfFileRequest) SetFunctionType(v string) *UpdateUdfFileRequest {
	s.FunctionType = &v
	return s
}

func (s *UpdateUdfFileRequest) SetParameterDescription(v string) *UpdateUdfFileRequest {
	s.ParameterDescription = &v
	return s
}

func (s *UpdateUdfFileRequest) SetProjectId(v int64) *UpdateUdfFileRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateUdfFileRequest) SetProjectIdentifier(v string) *UpdateUdfFileRequest {
	s.ProjectIdentifier = &v
	return s
}

func (s *UpdateUdfFileRequest) SetResources(v string) *UpdateUdfFileRequest {
	s.Resources = &v
	return s
}

func (s *UpdateUdfFileRequest) SetReturnValue(v string) *UpdateUdfFileRequest {
	s.ReturnValue = &v
	return s
}

func (s *UpdateUdfFileRequest) SetUdfDescription(v string) *UpdateUdfFileRequest {
	s.UdfDescription = &v
	return s
}

type UpdateUdfFileResponseBody struct {
	// example:
	//
	// Invalid.Tenant.ConnectionNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The connection does not exist.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 0000-ABCD-EFG****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateUdfFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateUdfFileResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateUdfFileResponseBody) SetErrorCode(v string) *UpdateUdfFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateUdfFileResponseBody) SetErrorMessage(v string) *UpdateUdfFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateUdfFileResponseBody) SetHttpStatusCode(v int32) *UpdateUdfFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateUdfFileResponseBody) SetRequestId(v string) *UpdateUdfFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateUdfFileResponseBody) SetSuccess(v bool) *UpdateUdfFileResponseBody {
	s.Success = &v
	return s
}

type UpdateUdfFileResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateUdfFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateUdfFileResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUdfFileResponse) GoString() string {
	return s.String()
}

func (s *UpdateUdfFileResponse) SetHeaders(v map[string]*string) *UpdateUdfFileResponse {
	s.Headers = v
	return s
}

func (s *UpdateUdfFileResponse) SetStatusCode(v int32) *UpdateUdfFileResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateUdfFileResponse) SetBody(v *UpdateUdfFileResponseBody) *UpdateUdfFileResponse {
	s.Body = v
	return s
}

type UpdateWorkflowRequest struct {
	// The unique code of the client. This parameter is used to create a workflow asynchronously and implement the idempotence of the workflow. If you do not specify this parameter when you create the workflow, the system automatically generates a unique code. The unique code is uniquely associated with the workflow ID. If you specify this parameter when you update or delete the workflow, the value of this parameter must be the unique code that is used to create the workflow.
	//
	// example:
	//
	// Workflow_0bc5213917368545132902xxxxxxxx
	ClientUniqueCode *string `json:"ClientUniqueCode,omitempty" xml:"ClientUniqueCode,omitempty"`
	// The dependency information.
	Dependencies []*UpdateWorkflowRequestDependencies `json:"Dependencies,omitempty" xml:"Dependencies,omitempty" type:"Repeated"`
	// The description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The workflow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	InstanceMode *string `json:"InstanceMode,omitempty" xml:"InstanceMode,omitempty"`
	// The name of the workflow.
	//
	// This parameter is required.
	//
	// example:
	//
	// My Workflow
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output information.
	Outputs *UpdateWorkflowRequestOutputs `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Struct"`
	// The account ID of the owner.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The parameters.
	//
	// example:
	//
	// para1=$bizdate para2=$[yyyymmdd]
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The tags.
	Tags []*UpdateWorkflowRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The tasks.
	Tasks []*UpdateWorkflowRequestTasks `json:"Tasks,omitempty" xml:"Tasks,omitempty" type:"Repeated"`
	// The trigger method.
	//
	// This parameter is required.
	Trigger *UpdateWorkflowRequestTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
}

func (s UpdateWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequest) SetClientUniqueCode(v string) *UpdateWorkflowRequest {
	s.ClientUniqueCode = &v
	return s
}

func (s *UpdateWorkflowRequest) SetDependencies(v []*UpdateWorkflowRequestDependencies) *UpdateWorkflowRequest {
	s.Dependencies = v
	return s
}

func (s *UpdateWorkflowRequest) SetDescription(v string) *UpdateWorkflowRequest {
	s.Description = &v
	return s
}

func (s *UpdateWorkflowRequest) SetEnvType(v string) *UpdateWorkflowRequest {
	s.EnvType = &v
	return s
}

func (s *UpdateWorkflowRequest) SetId(v int64) *UpdateWorkflowRequest {
	s.Id = &v
	return s
}

func (s *UpdateWorkflowRequest) SetInstanceMode(v string) *UpdateWorkflowRequest {
	s.InstanceMode = &v
	return s
}

func (s *UpdateWorkflowRequest) SetName(v string) *UpdateWorkflowRequest {
	s.Name = &v
	return s
}

func (s *UpdateWorkflowRequest) SetOutputs(v *UpdateWorkflowRequestOutputs) *UpdateWorkflowRequest {
	s.Outputs = v
	return s
}

func (s *UpdateWorkflowRequest) SetOwner(v string) *UpdateWorkflowRequest {
	s.Owner = &v
	return s
}

func (s *UpdateWorkflowRequest) SetParameters(v string) *UpdateWorkflowRequest {
	s.Parameters = &v
	return s
}

func (s *UpdateWorkflowRequest) SetTags(v []*UpdateWorkflowRequestTags) *UpdateWorkflowRequest {
	s.Tags = v
	return s
}

func (s *UpdateWorkflowRequest) SetTasks(v []*UpdateWorkflowRequestTasks) *UpdateWorkflowRequest {
	s.Tasks = v
	return s
}

func (s *UpdateWorkflowRequest) SetTrigger(v *UpdateWorkflowRequestTrigger) *UpdateWorkflowRequest {
	s.Trigger = v
	return s
}

type UpdateWorkflowRequestDependencies struct {
	// The dependency type. Valid values:
	//
	// 	- CrossCycleDependsOnChildren: cross-cycle dependency on level-1 descendant nodes
	//
	// 	- CrossCycleDependsOnSelf: cross-cycle dependency on the current node
	//
	// 	- CrossCycleDependsOnOtherNode: cross-cycle dependency on other nodes
	//
	// 	- Normal: same-cycle scheduling dependency
	//
	// This parameter is required.
	//
	// example:
	//
	// Normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The identifier of the output of the ancestor task. This parameter is returned only if `same-cycle scheduling dependencies` and the node input are configured.
	//
	// example:
	//
	// pre.odps_sql_demo_0
	UpstreamOutput *string `json:"UpstreamOutput,omitempty" xml:"UpstreamOutput,omitempty"`
	// The ancestor task ID. This parameter is returned only if `cross-cycle scheduling dependencies` or `same-cycle scheduling dependencies` and the node input are not configured.
	//
	// example:
	//
	// 1234
	UpstreamTaskId *int64 `json:"UpstreamTaskId,omitempty" xml:"UpstreamTaskId,omitempty"`
}

func (s UpdateWorkflowRequestDependencies) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestDependencies) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestDependencies) SetType(v string) *UpdateWorkflowRequestDependencies {
	s.Type = &v
	return s
}

func (s *UpdateWorkflowRequestDependencies) SetUpstreamOutput(v string) *UpdateWorkflowRequestDependencies {
	s.UpstreamOutput = &v
	return s
}

func (s *UpdateWorkflowRequestDependencies) SetUpstreamTaskId(v int64) *UpdateWorkflowRequestDependencies {
	s.UpstreamTaskId = &v
	return s
}

type UpdateWorkflowRequestOutputs struct {
	// The task outputs.
	TaskOutputs []*UpdateWorkflowRequestOutputsTaskOutputs `json:"TaskOutputs,omitempty" xml:"TaskOutputs,omitempty" type:"Repeated"`
}

func (s UpdateWorkflowRequestOutputs) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestOutputs) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestOutputs) SetTaskOutputs(v []*UpdateWorkflowRequestOutputsTaskOutputs) *UpdateWorkflowRequestOutputs {
	s.TaskOutputs = v
	return s
}

type UpdateWorkflowRequestOutputsTaskOutputs struct {
	// The identifier of the output.
	//
	// example:
	//
	// pre.odps_sql_demo_0
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s UpdateWorkflowRequestOutputsTaskOutputs) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestOutputsTaskOutputs) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestOutputsTaskOutputs) SetOutput(v string) *UpdateWorkflowRequestOutputsTaskOutputs {
	s.Output = &v
	return s
}

type UpdateWorkflowRequestTags struct {
	// The tag key.
	//
	// This parameter is required.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateWorkflowRequestTags) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTags) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTags) SetKey(v string) *UpdateWorkflowRequestTags {
	s.Key = &v
	return s
}

func (s *UpdateWorkflowRequestTags) SetValue(v string) *UpdateWorkflowRequestTags {
	s.Value = &v
	return s
}

type UpdateWorkflowRequestTasks struct {
	// The baseline ID.
	//
	// example:
	//
	// 1234
	BaseLineId *int64 `json:"BaseLineId,omitempty" xml:"BaseLineId,omitempty"`
	// The unique code of the client. This parameter is used to create a task asynchronously and implement the idempotence of the task. If you do not specify this parameter when you create the workflow, the system automatically generates a unique code. The unique code is uniquely associated with the workflow ID. If you specify this parameter when you update or delete the workflow, the value of this parameter must be the unique code that is used to create the workflow.
	//
	// example:
	//
	// Task_0bc5213917368545132902xxxxxxxx
	ClientUniqueCode *string `json:"ClientUniqueCode,omitempty" xml:"ClientUniqueCode,omitempty"`
	// The information about the associated data source.
	DataSource *UpdateWorkflowRequestTasksDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Struct"`
	// The dependency information.
	Dependencies []*UpdateWorkflowRequestTasksDependencies `json:"Dependencies,omitempty" xml:"Dependencies,omitempty" type:"Repeated"`
	// The description.
	//
	// example:
	//
	// Test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod
	//
	// 	- Dev
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The task ID. If you configure this parameter, full update is performed on the task. If you do not configure this parameter, another task is created.
	//
	// example:
	//
	// 1234
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The input information.
	Inputs *UpdateWorkflowRequestTasksInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Struct"`
	// The name of the task.
	//
	// This parameter is required.
	//
	// example:
	//
	// SQL node
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output information.
	Outputs *UpdateWorkflowRequestTasksOutputs `json:"Outputs,omitempty" xml:"Outputs,omitempty" type:"Struct"`
	// The account ID of the owner.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The rerun interval. Unit: seconds.
	//
	// example:
	//
	// 60
	RerunInterval *int32 `json:"RerunInterval,omitempty" xml:"RerunInterval,omitempty"`
	// The rerun mode. Valid values:
	//
	// 	- AllDenied: The task cannot be rerun regardless of whether the task is successfully run or fails to run.
	//
	// 	- FailureAllowed: The task can be rerun only after it fails to run.
	//
	// 	- AllAllowed: The task can be rerun regardless of whether the task is successfully run or fails to run.
	//
	// This parameter is required.
	//
	// example:
	//
	// AllAllowed
	RerunMode *string `json:"RerunMode,omitempty" xml:"RerunMode,omitempty"`
	// The number of times that the task is rerun. This parameter takes effect only if the RerunMode parameter is set to AllAllowed or FailureAllowed.
	//
	// example:
	//
	// 3
	RerunTimes *int32 `json:"RerunTimes,omitempty" xml:"RerunTimes,omitempty"`
	// The configurations of the runtime environment, such as the resource group information.
	//
	// This parameter is required.
	RuntimeResource *UpdateWorkflowRequestTasksRuntimeResource `json:"RuntimeResource,omitempty" xml:"RuntimeResource,omitempty" type:"Struct"`
	// The script information.
	Script *UpdateWorkflowRequestTasksScript `json:"Script,omitempty" xml:"Script,omitempty" type:"Struct"`
	// The tags.
	Tags []*UpdateWorkflowRequestTasksTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The timeout period of task running. Unit: seconds.
	//
	// example:
	//
	// 3600
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The trigger method.
	//
	// This parameter is required.
	Trigger *UpdateWorkflowRequestTasksTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" type:"Struct"`
	// The type of the task.
	//
	// This parameter is required.
	//
	// example:
	//
	// ODPS_SQL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateWorkflowRequestTasks) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTasks) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTasks) SetBaseLineId(v int64) *UpdateWorkflowRequestTasks {
	s.BaseLineId = &v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetClientUniqueCode(v string) *UpdateWorkflowRequestTasks {
	s.ClientUniqueCode = &v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetDataSource(v *UpdateWorkflowRequestTasksDataSource) *UpdateWorkflowRequestTasks {
	s.DataSource = v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetDependencies(v []*UpdateWorkflowRequestTasksDependencies) *UpdateWorkflowRequestTasks {
	s.Dependencies = v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetDescription(v string) *UpdateWorkflowRequestTasks {
	s.Description = &v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetEnvType(v string) *UpdateWorkflowRequestTasks {
	s.EnvType = &v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetId(v int64) *UpdateWorkflowRequestTasks {
	s.Id = &v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetInputs(v *UpdateWorkflowRequestTasksInputs) *UpdateWorkflowRequestTasks {
	s.Inputs = v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetName(v string) *UpdateWorkflowRequestTasks {
	s.Name = &v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetOutputs(v *UpdateWorkflowRequestTasksOutputs) *UpdateWorkflowRequestTasks {
	s.Outputs = v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetOwner(v string) *UpdateWorkflowRequestTasks {
	s.Owner = &v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetRerunInterval(v int32) *UpdateWorkflowRequestTasks {
	s.RerunInterval = &v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetRerunMode(v string) *UpdateWorkflowRequestTasks {
	s.RerunMode = &v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetRerunTimes(v int32) *UpdateWorkflowRequestTasks {
	s.RerunTimes = &v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetRuntimeResource(v *UpdateWorkflowRequestTasksRuntimeResource) *UpdateWorkflowRequestTasks {
	s.RuntimeResource = v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetScript(v *UpdateWorkflowRequestTasksScript) *UpdateWorkflowRequestTasks {
	s.Script = v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetTags(v []*UpdateWorkflowRequestTasksTags) *UpdateWorkflowRequestTasks {
	s.Tags = v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetTimeout(v int32) *UpdateWorkflowRequestTasks {
	s.Timeout = &v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetTrigger(v *UpdateWorkflowRequestTasksTrigger) *UpdateWorkflowRequestTasks {
	s.Trigger = v
	return s
}

func (s *UpdateWorkflowRequestTasks) SetType(v string) *UpdateWorkflowRequestTasks {
	s.Type = &v
	return s
}

type UpdateWorkflowRequestTasksDataSource struct {
	// The name of the data source.
	//
	// example:
	//
	// odps_test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateWorkflowRequestTasksDataSource) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTasksDataSource) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTasksDataSource) SetName(v string) *UpdateWorkflowRequestTasksDataSource {
	s.Name = &v
	return s
}

type UpdateWorkflowRequestTasksDependencies struct {
	// The dependency type. Valid values:
	//
	// 	- CrossCycleDependsOnChildren: cross-cycle dependency on level-1 descendant nodes
	//
	// 	- CrossCycleDependsOnSelf: cross-cycle dependency on the current node
	//
	// 	- CrossCycleDependsOnOtherNode: cross-cycle dependency on other nodes
	//
	// 	- Normal: same-cycle scheduling dependency
	//
	// This parameter is required.
	//
	// example:
	//
	// Normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The identifier of the output of the ancestor task. This parameter is returned only if `same-cycle scheduling dependencies` and the node input are configured.
	//
	// example:
	//
	// pre.odps_sql_demo_0
	UpstreamOutput *string `json:"UpstreamOutput,omitempty" xml:"UpstreamOutput,omitempty"`
	// The ancestor task ID. This parameter is returned only if `cross-cycle scheduling dependencies` or `same-cycle scheduling dependencies` and the node input are not configured.
	//
	// example:
	//
	// 1234
	UpstreamTaskId *int64 `json:"UpstreamTaskId,omitempty" xml:"UpstreamTaskId,omitempty"`
}

func (s UpdateWorkflowRequestTasksDependencies) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTasksDependencies) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTasksDependencies) SetType(v string) *UpdateWorkflowRequestTasksDependencies {
	s.Type = &v
	return s
}

func (s *UpdateWorkflowRequestTasksDependencies) SetUpstreamOutput(v string) *UpdateWorkflowRequestTasksDependencies {
	s.UpstreamOutput = &v
	return s
}

func (s *UpdateWorkflowRequestTasksDependencies) SetUpstreamTaskId(v int64) *UpdateWorkflowRequestTasksDependencies {
	s.UpstreamTaskId = &v
	return s
}

type UpdateWorkflowRequestTasksInputs struct {
	// The variables.
	Variables []*UpdateWorkflowRequestTasksInputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s UpdateWorkflowRequestTasksInputs) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTasksInputs) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTasksInputs) SetVariables(v []*UpdateWorkflowRequestTasksInputsVariables) *UpdateWorkflowRequestTasksInputs {
	s.Variables = v
	return s
}

type UpdateWorkflowRequestTasksInputsVariables struct {
	// The name of the variable.
	//
	// example:
	//
	// key1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type. Valid values:
	//
	// 	- Constant: constant
	//
	// 	- PassThrough: node output
	//
	// 	- System: variable
	//
	// 	- NodeOutput: script output
	//
	// This parameter is required.
	//
	// example:
	//
	// Constant
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateWorkflowRequestTasksInputsVariables) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTasksInputsVariables) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTasksInputsVariables) SetName(v string) *UpdateWorkflowRequestTasksInputsVariables {
	s.Name = &v
	return s
}

func (s *UpdateWorkflowRequestTasksInputsVariables) SetType(v string) *UpdateWorkflowRequestTasksInputsVariables {
	s.Type = &v
	return s
}

func (s *UpdateWorkflowRequestTasksInputsVariables) SetValue(v string) *UpdateWorkflowRequestTasksInputsVariables {
	s.Value = &v
	return s
}

type UpdateWorkflowRequestTasksOutputs struct {
	// The task outputs.
	TaskOutputs []*UpdateWorkflowRequestTasksOutputsTaskOutputs `json:"TaskOutputs,omitempty" xml:"TaskOutputs,omitempty" type:"Repeated"`
	// The variables.
	Variables []*UpdateWorkflowRequestTasksOutputsVariables `json:"Variables,omitempty" xml:"Variables,omitempty" type:"Repeated"`
}

func (s UpdateWorkflowRequestTasksOutputs) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTasksOutputs) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTasksOutputs) SetTaskOutputs(v []*UpdateWorkflowRequestTasksOutputsTaskOutputs) *UpdateWorkflowRequestTasksOutputs {
	s.TaskOutputs = v
	return s
}

func (s *UpdateWorkflowRequestTasksOutputs) SetVariables(v []*UpdateWorkflowRequestTasksOutputsVariables) *UpdateWorkflowRequestTasksOutputs {
	s.Variables = v
	return s
}

type UpdateWorkflowRequestTasksOutputsTaskOutputs struct {
	// The identifier of the output.
	//
	// example:
	//
	// pre.odps_sql_demo_0
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s UpdateWorkflowRequestTasksOutputsTaskOutputs) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTasksOutputsTaskOutputs) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTasksOutputsTaskOutputs) SetOutput(v string) *UpdateWorkflowRequestTasksOutputsTaskOutputs {
	s.Output = &v
	return s
}

type UpdateWorkflowRequestTasksOutputsVariables struct {
	// The name of the variable.
	//
	// example:
	//
	// key1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type. Valid values:
	//
	// 	- Constant: constant
	//
	// 	- PassThrough: node output
	//
	// 	- System: variable
	//
	// 	- NodeOutput: script output
	//
	// This parameter is required.
	//
	// example:
	//
	// Constant
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateWorkflowRequestTasksOutputsVariables) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTasksOutputsVariables) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTasksOutputsVariables) SetName(v string) *UpdateWorkflowRequestTasksOutputsVariables {
	s.Name = &v
	return s
}

func (s *UpdateWorkflowRequestTasksOutputsVariables) SetType(v string) *UpdateWorkflowRequestTasksOutputsVariables {
	s.Type = &v
	return s
}

func (s *UpdateWorkflowRequestTasksOutputsVariables) SetValue(v string) *UpdateWorkflowRequestTasksOutputsVariables {
	s.Value = &v
	return s
}

type UpdateWorkflowRequestTasksRuntimeResource struct {
	// The default number of compute units (CUs) configured for task running.
	//
	// example:
	//
	// 0.25
	Cu *string `json:"Cu,omitempty" xml:"Cu,omitempty"`
	// The ID of the image configured for task running.
	//
	// example:
	//
	// i-xxxxxx
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// The ID of the resource group for scheduling configured for task running.
	//
	// This parameter is required.
	//
	// example:
	//
	// S_res_group_524258031846018_1684XXXXXXXXX
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s UpdateWorkflowRequestTasksRuntimeResource) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTasksRuntimeResource) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTasksRuntimeResource) SetCu(v string) *UpdateWorkflowRequestTasksRuntimeResource {
	s.Cu = &v
	return s
}

func (s *UpdateWorkflowRequestTasksRuntimeResource) SetImage(v string) *UpdateWorkflowRequestTasksRuntimeResource {
	s.Image = &v
	return s
}

func (s *UpdateWorkflowRequestTasksRuntimeResource) SetResourceGroupId(v string) *UpdateWorkflowRequestTasksRuntimeResource {
	s.ResourceGroupId = &v
	return s
}

type UpdateWorkflowRequestTasksScript struct {
	// The script content.
	//
	// example:
	//
	// echo "helloWorld"
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The script parameters.
	//
	// example:
	//
	// para1=$bizdate
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
}

func (s UpdateWorkflowRequestTasksScript) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTasksScript) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTasksScript) SetContent(v string) *UpdateWorkflowRequestTasksScript {
	s.Content = &v
	return s
}

func (s *UpdateWorkflowRequestTasksScript) SetParameters(v string) *UpdateWorkflowRequestTasksScript {
	s.Parameters = &v
	return s
}

type UpdateWorkflowRequestTasksTags struct {
	// The tag key.
	//
	// This parameter is required.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UpdateWorkflowRequestTasksTags) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTasksTags) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTasksTags) SetKey(v string) *UpdateWorkflowRequestTasksTags {
	s.Key = &v
	return s
}

func (s *UpdateWorkflowRequestTasksTags) SetValue(v string) *UpdateWorkflowRequestTasksTags {
	s.Value = &v
	return s
}

type UpdateWorkflowRequestTasksTrigger struct {
	// The running mode of the task after it is triggered. This parameter takes effect only if the Type parameter is set to Scheduler. Valid values:
	//
	// 	- Pause
	//
	// 	- Skip
	//
	// 	- Normal
	//
	// This parameter is required.
	//
	// example:
	//
	// Normal
	Recurrence *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateWorkflowRequestTasksTrigger) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTasksTrigger) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTasksTrigger) SetRecurrence(v string) *UpdateWorkflowRequestTasksTrigger {
	s.Recurrence = &v
	return s
}

func (s *UpdateWorkflowRequestTasksTrigger) SetType(v string) *UpdateWorkflowRequestTasksTrigger {
	s.Type = &v
	return s
}

type UpdateWorkflowRequestTrigger struct {
	// The CRON expression. This parameter takes effect only if the Type parameter is set to Scheduler.
	//
	// example:
	//
	// 00 00 00 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The end time of the time range during which the workflow is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler. The value of this parameter is in the `yyyy-mm-dd hh:mm:ss` format.
	//
	// example:
	//
	// 9999-01-01 00:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The start time of the time range during which the workflow is periodically scheduled. This parameter takes effect only if the Type parameter is set to Scheduler. The value of this parameter is in the `yyyy-mm-dd hh:mm:ss` format.
	//
	// example:
	//
	// 1970-01-01 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The trigger type. Valid values:
	//
	// 	- Scheduler: scheduling cycle-based trigger
	//
	// 	- Manual: manual trigger
	//
	// This parameter is required.
	//
	// example:
	//
	// Scheduler
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateWorkflowRequestTrigger) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowRequestTrigger) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowRequestTrigger) SetCron(v string) *UpdateWorkflowRequestTrigger {
	s.Cron = &v
	return s
}

func (s *UpdateWorkflowRequestTrigger) SetEndTime(v string) *UpdateWorkflowRequestTrigger {
	s.EndTime = &v
	return s
}

func (s *UpdateWorkflowRequestTrigger) SetStartTime(v string) *UpdateWorkflowRequestTrigger {
	s.StartTime = &v
	return s
}

func (s *UpdateWorkflowRequestTrigger) SetType(v string) *UpdateWorkflowRequestTrigger {
	s.Type = &v
	return s
}

type UpdateWorkflowShrinkRequest struct {
	// The unique code of the client. This parameter is used to create a workflow asynchronously and implement the idempotence of the workflow. If you do not specify this parameter when you create the workflow, the system automatically generates a unique code. The unique code is uniquely associated with the workflow ID. If you specify this parameter when you update or delete the workflow, the value of this parameter must be the unique code that is used to create the workflow.
	//
	// example:
	//
	// Workflow_0bc5213917368545132902xxxxxxxx
	ClientUniqueCode *string `json:"ClientUniqueCode,omitempty" xml:"ClientUniqueCode,omitempty"`
	// The dependency information.
	DependenciesShrink *string `json:"Dependencies,omitempty" xml:"Dependencies,omitempty"`
	// The description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment of the workspace. Valid values:
	//
	// 	- Prod: production environment
	//
	// 	- Dev: development environment
	//
	// example:
	//
	// Prod
	EnvType *string `json:"EnvType,omitempty" xml:"EnvType,omitempty"`
	// The workflow ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1234
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	InstanceMode *string `json:"InstanceMode,omitempty" xml:"InstanceMode,omitempty"`
	// The name of the workflow.
	//
	// This parameter is required.
	//
	// example:
	//
	// My Workflow
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The output information.
	OutputsShrink *string `json:"Outputs,omitempty" xml:"Outputs,omitempty"`
	// The account ID of the owner.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Owner *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	// The parameters.
	//
	// example:
	//
	// para1=$bizdate para2=$[yyyymmdd]
	Parameters *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	// The tags.
	TagsShrink *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The tasks.
	TasksShrink *string `json:"Tasks,omitempty" xml:"Tasks,omitempty"`
	// The trigger method.
	//
	// This parameter is required.
	TriggerShrink *string `json:"Trigger,omitempty" xml:"Trigger,omitempty"`
}

func (s UpdateWorkflowShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowShrinkRequest) SetClientUniqueCode(v string) *UpdateWorkflowShrinkRequest {
	s.ClientUniqueCode = &v
	return s
}

func (s *UpdateWorkflowShrinkRequest) SetDependenciesShrink(v string) *UpdateWorkflowShrinkRequest {
	s.DependenciesShrink = &v
	return s
}

func (s *UpdateWorkflowShrinkRequest) SetDescription(v string) *UpdateWorkflowShrinkRequest {
	s.Description = &v
	return s
}

func (s *UpdateWorkflowShrinkRequest) SetEnvType(v string) *UpdateWorkflowShrinkRequest {
	s.EnvType = &v
	return s
}

func (s *UpdateWorkflowShrinkRequest) SetId(v int64) *UpdateWorkflowShrinkRequest {
	s.Id = &v
	return s
}

func (s *UpdateWorkflowShrinkRequest) SetInstanceMode(v string) *UpdateWorkflowShrinkRequest {
	s.InstanceMode = &v
	return s
}

func (s *UpdateWorkflowShrinkRequest) SetName(v string) *UpdateWorkflowShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateWorkflowShrinkRequest) SetOutputsShrink(v string) *UpdateWorkflowShrinkRequest {
	s.OutputsShrink = &v
	return s
}

func (s *UpdateWorkflowShrinkRequest) SetOwner(v string) *UpdateWorkflowShrinkRequest {
	s.Owner = &v
	return s
}

func (s *UpdateWorkflowShrinkRequest) SetParameters(v string) *UpdateWorkflowShrinkRequest {
	s.Parameters = &v
	return s
}

func (s *UpdateWorkflowShrinkRequest) SetTagsShrink(v string) *UpdateWorkflowShrinkRequest {
	s.TagsShrink = &v
	return s
}

func (s *UpdateWorkflowShrinkRequest) SetTasksShrink(v string) *UpdateWorkflowShrinkRequest {
	s.TasksShrink = &v
	return s
}

func (s *UpdateWorkflowShrinkRequest) SetTriggerShrink(v string) *UpdateWorkflowShrinkRequest {
	s.TriggerShrink = &v
	return s
}

type UpdateWorkflowResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 22C97E95-F023-56B5-8852-B1A77A17XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowResponseBody) SetRequestId(v string) *UpdateWorkflowResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateWorkflowResponseBody) SetSuccess(v bool) *UpdateWorkflowResponseBody {
	s.Success = &v
	return s
}

type UpdateWorkflowResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowResponse) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowResponse) SetHeaders(v map[string]*string) *UpdateWorkflowResponse {
	s.Headers = v
	return s
}

func (s *UpdateWorkflowResponse) SetStatusCode(v int32) *UpdateWorkflowResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateWorkflowResponse) SetBody(v *UpdateWorkflowResponseBody) *UpdateWorkflowResponse {
	s.Body = v
	return s
}

type UpdateWorkflowDefinitionRequest struct {
	// The ID of the workflow.
	//
	// This parameter is required.
	//
	// example:
	//
	// 652567824470354XXXX
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The DataWorks workspace ID. You can log on to the [DataWorks console](https://workbench.data.aliyun.com/console) and go to the Workspace page to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10001
	ProjectId *int64 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// The FlowSpec field information about the workflow. For more information, see [FlowSpec](https://github.com/aliyun/dataworks-spec/blob/master/README_zh_CN.md).
	//
	// This parameter is required.
	//
	// example:
	//
	// {
	//
	//     "kind": "CycleWorkflow",
	//
	//     "version": "1.1.0",
	//
	//     "spec": {
	//
	//         "name": "OpenAPI Test Workflow Demo",
	//
	//         "type": "CycleWorkflow",
	//
	//         "id": "652567824470354XXXX",
	//
	//         "workflows": [
	//
	//             {
	//
	//                 "id": "652567824470354XXXX",
	//
	//                 "script": {
	//
	//                     "path": "XX/OpenAPI_Test/Workflow_Test/OpenAPI_Test_Workflow_Demo",
	//
	//                     "runtime": {
	//
	//                         "command": "WORKFLOW"
	//
	//                     }
	//
	//                 },
	//
	//                 "trigger": {
	//
	//                     "type": "Scheduler",
	//
	//                     "cron": "00 02 00 	- 	- ?",
	//
	//                     "startTime": "1970-01-01 00:00:00",
	//
	//                     "endTime": "9999-01-01 00:00:00",
	//
	//                     "timezone": "Asia/Shanghai",
	//
	//                     "delaySeconds": 0
	//
	//                 },
	//
	//                 "strategy": {
	//
	//                     "timeout": 0,
	//
	//                     "instanceMode": "T+1",
	//
	//                     "rerunMode": "Allowed",
	//
	//                     "rerunTimes": 3,
	//
	//                     "rerunInterval": 180000,
	//
	//                     "failureStrategy": "Break"
	//
	//                 },
	//
	//                 "name": "OpenAPI Test Workflow Demo",
	//
	//                 "inputs": {},
	//
	//                 "outputs": {
	//
	//                     "nodeOutputs": [
	//
	//                         {
	//
	//                             "data": "workflow_output",
	//
	//                             "artifactType": "NodeOutput",
	//
	//                             "refTableName": "OpenAPI_Test_Workflow_Demo"
	//
	//                         }
	//
	//                     ]
	//
	//                 },
	//
	//                 "nodes": [],
	//
	//                 "dependencies": []
	//
	//             }
	//
	//         ]
	//
	//     }
	//
	// }
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s UpdateWorkflowDefinitionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowDefinitionRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowDefinitionRequest) SetId(v int64) *UpdateWorkflowDefinitionRequest {
	s.Id = &v
	return s
}

func (s *UpdateWorkflowDefinitionRequest) SetProjectId(v int64) *UpdateWorkflowDefinitionRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateWorkflowDefinitionRequest) SetSpec(v string) *UpdateWorkflowDefinitionRequest {
	s.Spec = &v
	return s
}

type UpdateWorkflowDefinitionResponseBody struct {
	// The request ID. You can locate logs and troubleshoot issues based on the ID.
	//
	// example:
	//
	// 20BF7E80-668A-5620-8AD8-879B8FEAXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateWorkflowDefinitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowDefinitionResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowDefinitionResponseBody) SetRequestId(v string) *UpdateWorkflowDefinitionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateWorkflowDefinitionResponseBody) SetSuccess(v bool) *UpdateWorkflowDefinitionResponseBody {
	s.Success = &v
	return s
}

type UpdateWorkflowDefinitionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateWorkflowDefinitionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWorkflowDefinitionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkflowDefinitionResponse) GoString() string {
	return s.String()
}

func (s *UpdateWorkflowDefinitionResponse) SetHeaders(v map[string]*string) *UpdateWorkflowDefinitionResponse {
	s.Headers = v
	return s
}

func (s *UpdateWorkflowDefinitionResponse) SetStatusCode(v int32) *UpdateWorkflowDefinitionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateWorkflowDefinitionResponse) SetBody(v *UpdateWorkflowDefinitionResponseBody) *UpdateWorkflowDefinitionResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-1":        tea.String("dataworks.ap-northeast-1.aliyuncs.com"),
		"ap-south-1":            tea.String("dataworks.ap-south-1.aliyuncs.com"),
		"ap-southeast-1":        tea.String("dataworks.ap-southeast-1.aliyuncs.com"),
		"ap-southeast-2":        tea.String("dataworks.ap-southeast-2.aliyuncs.com"),
		"ap-southeast-3":        tea.String("dataworks.ap-southeast-3.aliyuncs.com"),
		"ap-southeast-5":        tea.String("dataworks.ap-southeast-5.aliyuncs.com"),
		"cn-beijing":            tea.String("dataworks.cn-beijing.aliyuncs.com"),
		"cn-chengdu":            tea.String("dataworks.cn-chengdu.aliyuncs.com"),
		"cn-hangzhou":           tea.String("dataworks.cn-hangzhou.aliyuncs.com"),
		"cn-hongkong":           tea.String("dataworks.cn-hongkong.aliyuncs.com"),
		"cn-huhehaote":          tea.String("dataworks.aliyuncs.com"),
		"cn-qingdao":            tea.String("dataworks.aliyuncs.com"),
		"cn-shanghai":           tea.String("dataworks.cn-shanghai.aliyuncs.com"),
		"cn-shenzhen":           tea.String("dataworks.cn-shenzhen.aliyuncs.com"),
		"cn-zhangjiakou":        tea.String("dataworks.aliyuncs.com"),
		"eu-central-1":          tea.String("dataworks.eu-central-1.aliyuncs.com"),
		"eu-west-1":             tea.String("dataworks.eu-west-1.aliyuncs.com"),
		"me-east-1":             tea.String("dataworks.me-east-1.aliyuncs.com"),
		"us-east-1":             tea.String("dataworks.us-east-1.aliyuncs.com"),
		"us-west-1":             tea.String("dataworks.us-west-1.aliyuncs.com"),
		"cn-hangzhou-finance":   tea.String("dataworks.aliyuncs.com"),
		"cn-shenzhen-finance-1": tea.String("dataworks.aliyuncs.com"),
		"cn-shanghai-finance-1": tea.String("dataworks.aliyuncs.com"),
		"cn-north-2-gov-1":      tea.String("dataworks.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("dataworks-public"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Terminates the process for deploying or undeploying an entity. The process is not deleted and can still be queried by calling query operations.
//
// @param request - AbolishPipelineRunRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AbolishPipelineRunResponse
func (client *Client) AbolishPipelineRunWithOptions(request *AbolishPipelineRunRequest, runtime *util.RuntimeOptions) (_result *AbolishPipelineRunResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AbolishPipelineRun"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AbolishPipelineRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Terminates the process for deploying or undeploying an entity. The process is not deleted and can still be queried by calling query operations.
//
// @param request - AbolishPipelineRunRequest
//
// @return AbolishPipelineRunResponse
func (client *Client) AbolishPipelineRun(request *AbolishPipelineRunRequest) (_result *AbolishPipelineRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AbolishPipelineRunResponse{}
	_body, _err := client.AbolishPipelineRunWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 从集合中移除实体对象
//
// @param request - AddEntityIntoMetaCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddEntityIntoMetaCollectionResponse
func (client *Client) AddEntityIntoMetaCollectionWithOptions(request *AddEntityIntoMetaCollectionRequest, runtime *util.RuntimeOptions) (_result *AddEntityIntoMetaCollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.MetaCollectionId)) {
		query["MetaCollectionId"] = request.MetaCollectionId
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddEntityIntoMetaCollection"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddEntityIntoMetaCollectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 从集合中移除实体对象
//
// @param request - AddEntityIntoMetaCollectionRequest
//
// @return AddEntityIntoMetaCollectionResponse
func (client *Client) AddEntityIntoMetaCollection(request *AddEntityIntoMetaCollectionRequest) (_result *AddEntityIntoMetaCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddEntityIntoMetaCollectionResponse{}
	_body, _err := client.AddEntityIntoMetaCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Associates a resource group with a workspace.
//
// Description:
//
// 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
//
// 2.  Your account must be assigned one of the following roles of the desired workspace:
//
//   - Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
//
// @param request - AssociateProjectToResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AssociateProjectToResourceGroupResponse
func (client *Client) AssociateProjectToResourceGroupWithOptions(request *AssociateProjectToResourceGroupRequest, runtime *util.RuntimeOptions) (_result *AssociateProjectToResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		body["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AssociateProjectToResourceGroup"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AssociateProjectToResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Associates a resource group with a workspace.
//
// Description:
//
// 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
//
// 2.  Your account must be assigned one of the following roles of the desired workspace:
//
//   - Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
//
// @param request - AssociateProjectToResourceGroupRequest
//
// @return AssociateProjectToResourceGroupResponse
func (client *Client) AssociateProjectToResourceGroup(request *AssociateProjectToResourceGroupRequest) (_result *AssociateProjectToResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateProjectToResourceGroupResponse{}
	_body, _err := client.AssociateProjectToResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Associates monitoring rules with a data quality monitoring task.
//
// @param tmpReq - AttachDataQualityRulesToEvaluationTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachDataQualityRulesToEvaluationTaskResponse
func (client *Client) AttachDataQualityRulesToEvaluationTaskWithOptions(tmpReq *AttachDataQualityRulesToEvaluationTaskRequest, runtime *util.RuntimeOptions) (_result *AttachDataQualityRulesToEvaluationTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AttachDataQualityRulesToEvaluationTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DataQualityRuleIds)) {
		request.DataQualityRuleIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DataQualityRuleIds, tea.String("DataQualityRuleIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataQualityEvaluationTaskId)) {
		body["DataQualityEvaluationTaskId"] = request.DataQualityEvaluationTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.DataQualityRuleIdsShrink)) {
		body["DataQualityRuleIds"] = request.DataQualityRuleIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachDataQualityRulesToEvaluationTask"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AttachDataQualityRulesToEvaluationTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Associates monitoring rules with a data quality monitoring task.
//
// @param request - AttachDataQualityRulesToEvaluationTaskRequest
//
// @return AttachDataQualityRulesToEvaluationTaskResponse
func (client *Client) AttachDataQualityRulesToEvaluationTask(request *AttachDataQualityRulesToEvaluationTaskRequest) (_result *AttachDataQualityRulesToEvaluationTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachDataQualityRulesToEvaluationTaskResponse{}
	_body, _err := client.AttachDataQualityRulesToEvaluationTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Performs incremental updates on multiple tasks at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - BatchUpdateTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchUpdateTasksResponse
func (client *Client) BatchUpdateTasksWithOptions(tmpReq *BatchUpdateTasksRequest, runtime *util.RuntimeOptions) (_result *BatchUpdateTasksResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &BatchUpdateTasksShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Tasks)) {
		request.TasksShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tasks, tea.String("Tasks"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.TasksShrink)) {
		body["Tasks"] = request.TasksShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchUpdateTasks"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchUpdateTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Performs incremental updates on multiple tasks at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - BatchUpdateTasksRequest
//
// @return BatchUpdateTasksResponse
func (client *Client) BatchUpdateTasks(request *BatchUpdateTasksRequest) (_result *BatchUpdateTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchUpdateTasksResponse{}
	_body, _err := client.BatchUpdateTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Clones an existing data source.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
//
// @param request - CloneDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CloneDataSourceResponse
func (client *Client) CloneDataSourceWithOptions(request *CloneDataSourceRequest, runtime *util.RuntimeOptions) (_result *CloneDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CloneDataSourceName)) {
		query["CloneDataSourceName"] = request.CloneDataSourceName
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CloneDataSource"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CloneDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Clones an existing data source.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
//
// @param request - CloneDataSourceRequest
//
// @return CloneDataSourceResponse
func (client *Client) CloneDataSource(request *CloneDataSourceRequest) (_result *CloneDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloneDataSourceResponse{}
	_body, _err := client.CloneDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a custom monitoring alert rule.
//
// @param tmpReq - CreateAlertRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAlertRuleResponse
func (client *Client) CreateAlertRuleWithOptions(tmpReq *CreateAlertRuleRequest, runtime *util.RuntimeOptions) (_result *CreateAlertRuleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateAlertRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Notification)) {
		request.NotificationShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Notification, tea.String("Notification"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TriggerCondition)) {
		request.TriggerConditionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TriggerCondition, tea.String("TriggerCondition"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Enabled)) {
		query["Enabled"] = request.Enabled
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NotificationShrink)) {
		query["Notification"] = request.NotificationShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		query["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerConditionShrink)) {
		query["TriggerCondition"] = request.TriggerConditionShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAlertRule"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAlertRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a custom monitoring alert rule.
//
// @param request - CreateAlertRuleRequest
//
// @return CreateAlertRuleResponse
func (client *Client) CreateAlertRule(request *CreateAlertRuleRequest) (_result *CreateAlertRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAlertRuleResponse{}
	_body, _err := client.CreateAlertRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateBusinessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateBusinessResponse
func (client *Client) CreateBusinessWithOptions(request *CreateBusinessRequest, runtime *util.RuntimeOptions) (_result *CreateBusinessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessName)) {
		body["BusinessName"] = request.BusinessName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.UseType)) {
		body["UseType"] = request.UseType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBusiness"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBusinessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateBusinessRequest
//
// @return CreateBusinessResponse
func (client *Client) CreateBusiness(request *CreateBusinessRequest) (_result *CreateBusinessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBusinessResponse{}
	_body, _err := client.CreateBusinessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an alert rule for a synchronization task.
//
// @param tmpReq - CreateDIAlarmRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDIAlarmRuleResponse
func (client *Client) CreateDIAlarmRuleWithOptions(tmpReq *CreateDIAlarmRuleRequest, runtime *util.RuntimeOptions) (_result *CreateDIAlarmRuleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateDIAlarmRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.NotificationSettings)) {
		request.NotificationSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.NotificationSettings, tea.String("NotificationSettings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TriggerConditions)) {
		request.TriggerConditionsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TriggerConditions, tea.String("TriggerConditions"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDIAlarmRule"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDIAlarmRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an alert rule for a synchronization task.
//
// @param request - CreateDIAlarmRuleRequest
//
// @return CreateDIAlarmRuleResponse
func (client *Client) CreateDIAlarmRule(request *CreateDIAlarmRuleRequest) (_result *CreateDIAlarmRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDIAlarmRuleResponse{}
	_body, _err := client.CreateDIAlarmRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a new-version synchronization task.
//
// Description:
//
//	  This API operation is available for all DataWorks editions.
//
//		- You can call this API operation to create a synchronization task. When you call this API operation, you must configure parameters such as SourceDataSourceSettings, DestinationDataSourceSettings, MigrationType, TransformationRules, TableMappings, and JobSettings. The SourceDataSourceSettings parameter defines the settings related to the source. The DestinationDataSourceSettings parameter defines the settings related to the destination. The MigrationType parameter defines the synchronization task type. The TransformationRules parameter defines the transformation rules for objects involved in the synchronization task. The TableMappings parameter defines the mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. The JobSettings parameter defines the settings for the dimension of the synchronization task, including policies for data type mappings between source fields and destination fields and settings for periodic scheduling.
//
// @param tmpReq - CreateDIJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDIJobResponse
func (client *Client) CreateDIJobWithOptions(tmpReq *CreateDIJobRequest, runtime *util.RuntimeOptions) (_result *CreateDIJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateDIJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DestinationDataSourceSettings)) {
		request.DestinationDataSourceSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DestinationDataSourceSettings, tea.String("DestinationDataSourceSettings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.JobSettings)) {
		request.JobSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.JobSettings, tea.String("JobSettings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ResourceSettings)) {
		request.ResourceSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ResourceSettings, tea.String("ResourceSettings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SourceDataSourceSettings)) {
		request.SourceDataSourceSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SourceDataSourceSettings, tea.String("SourceDataSourceSettings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TableMappings)) {
		request.TableMappingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TableMappings, tea.String("TableMappings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TransformationRules)) {
		request.TransformationRulesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TransformationRules, tea.String("TransformationRules"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDIJob"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDIJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a new-version synchronization task.
//
// Description:
//
//	  This API operation is available for all DataWorks editions.
//
//		- You can call this API operation to create a synchronization task. When you call this API operation, you must configure parameters such as SourceDataSourceSettings, DestinationDataSourceSettings, MigrationType, TransformationRules, TableMappings, and JobSettings. The SourceDataSourceSettings parameter defines the settings related to the source. The DestinationDataSourceSettings parameter defines the settings related to the destination. The MigrationType parameter defines the synchronization task type. The TransformationRules parameter defines the transformation rules for objects involved in the synchronization task. The TableMappings parameter defines the mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. The JobSettings parameter defines the settings for the dimension of the synchronization task, including policies for data type mappings between source fields and destination fields and settings for periodic scheduling.
//
// @param request - CreateDIJobRequest
//
// @return CreateDIJobResponse
func (client *Client) CreateDIJob(request *CreateDIJobRequest) (_result *CreateDIJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDIJobResponse{}
	_body, _err := client.CreateDIJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a tag.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param tmpReq - CreateDataAssetTagRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDataAssetTagResponse
func (client *Client) CreateDataAssetTagWithOptions(tmpReq *CreateDataAssetTagRequest, runtime *util.RuntimeOptions) (_result *CreateDataAssetTagResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateDataAssetTagShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Managers)) {
		request.ManagersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Managers, tea.String("Managers"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Values)) {
		request.ValuesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Values, tea.String("Values"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Key)) {
		query["Key"] = request.Key
	}

	if !tea.BoolValue(util.IsUnset(request.ManagersShrink)) {
		query["Managers"] = request.ManagersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ValueType)) {
		query["ValueType"] = request.ValueType
	}

	if !tea.BoolValue(util.IsUnset(request.ValuesShrink)) {
		query["Values"] = request.ValuesShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataAssetTag"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDataAssetTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a tag.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param request - CreateDataAssetTagRequest
//
// @return CreateDataAssetTagResponse
func (client *Client) CreateDataAssetTag(request *CreateDataAssetTagRequest) (_result *CreateDataAssetTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataAssetTagResponse{}
	_body, _err := client.CreateDataAssetTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a monitor in DataWorks Data Quality.
//
// Description:
//
// This API operation is supported in all DataWorks editions.
//
// @param tmpReq - CreateDataQualityEvaluationTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDataQualityEvaluationTaskResponse
func (client *Client) CreateDataQualityEvaluationTaskWithOptions(tmpReq *CreateDataQualityEvaluationTaskRequest, runtime *util.RuntimeOptions) (_result *CreateDataQualityEvaluationTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateDataQualityEvaluationTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DataQualityRules)) {
		request.DataQualityRulesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DataQualityRules, tea.String("DataQualityRules"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Hooks)) {
		request.HooksShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Hooks, tea.String("Hooks"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Notifications)) {
		request.NotificationsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Notifications, tea.String("Notifications"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Target)) {
		request.TargetShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Target, tea.String("Target"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Trigger)) {
		request.TriggerShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Trigger, tea.String("Trigger"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataQualityRulesShrink)) {
		body["DataQualityRules"] = request.DataQualityRulesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		body["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.HooksShrink)) {
		body["Hooks"] = request.HooksShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NotificationsShrink)) {
		body["Notifications"] = request.NotificationsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RuntimeConf)) {
		body["RuntimeConf"] = request.RuntimeConf
	}

	if !tea.BoolValue(util.IsUnset(request.TargetShrink)) {
		body["Target"] = request.TargetShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerShrink)) {
		body["Trigger"] = request.TriggerShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataQualityEvaluationTask"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDataQualityEvaluationTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a monitor in DataWorks Data Quality.
//
// Description:
//
// This API operation is supported in all DataWorks editions.
//
// @param request - CreateDataQualityEvaluationTaskRequest
//
// @return CreateDataQualityEvaluationTaskResponse
func (client *Client) CreateDataQualityEvaluationTask(request *CreateDataQualityEvaluationTaskRequest) (_result *CreateDataQualityEvaluationTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataQualityEvaluationTaskResponse{}
	_body, _err := client.CreateDataQualityEvaluationTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a monitor instance.
//
// @param tmpReq - CreateDataQualityEvaluationTaskInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDataQualityEvaluationTaskInstanceResponse
func (client *Client) CreateDataQualityEvaluationTaskInstanceWithOptions(tmpReq *CreateDataQualityEvaluationTaskInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateDataQualityEvaluationTaskInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateDataQualityEvaluationTaskInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RuntimeResource)) {
		request.RuntimeResourceShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RuntimeResource, tea.String("RuntimeResource"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataQualityEvaluationTaskId)) {
		body["DataQualityEvaluationTaskId"] = request.DataQualityEvaluationTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Parameters)) {
		body["Parameters"] = request.Parameters
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RuntimeResourceShrink)) {
		body["RuntimeResource"] = request.RuntimeResourceShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataQualityEvaluationTaskInstance"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDataQualityEvaluationTaskInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a monitor instance.
//
// @param request - CreateDataQualityEvaluationTaskInstanceRequest
//
// @return CreateDataQualityEvaluationTaskInstanceResponse
func (client *Client) CreateDataQualityEvaluationTaskInstance(request *CreateDataQualityEvaluationTaskInstanceRequest) (_result *CreateDataQualityEvaluationTaskInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataQualityEvaluationTaskInstanceResponse{}
	_body, _err := client.CreateDataQualityEvaluationTaskInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a data quality monitoring rule.
//
// @param tmpReq - CreateDataQualityRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDataQualityRuleResponse
func (client *Client) CreateDataQualityRuleWithOptions(tmpReq *CreateDataQualityRuleRequest, runtime *util.RuntimeOptions) (_result *CreateDataQualityRuleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateDataQualityRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CheckingConfig)) {
		request.CheckingConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CheckingConfig, tea.String("CheckingConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ErrorHandlers)) {
		request.ErrorHandlersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ErrorHandlers, tea.String("ErrorHandlers"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SamplingConfig)) {
		request.SamplingConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SamplingConfig, tea.String("SamplingConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Target)) {
		request.TargetShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Target, tea.String("Target"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckingConfigShrink)) {
		body["CheckingConfig"] = request.CheckingConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Enabled)) {
		body["Enabled"] = request.Enabled
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorHandlersShrink)) {
		body["ErrorHandlers"] = request.ErrorHandlersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SamplingConfigShrink)) {
		body["SamplingConfig"] = request.SamplingConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Severity)) {
		body["Severity"] = request.Severity
	}

	if !tea.BoolValue(util.IsUnset(request.TargetShrink)) {
		body["Target"] = request.TargetShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		body["TemplateCode"] = request.TemplateCode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataQualityRule"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDataQualityRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a data quality monitoring rule.
//
// @param request - CreateDataQualityRuleRequest
//
// @return CreateDataQualityRuleResponse
func (client *Client) CreateDataQualityRule(request *CreateDataQualityRuleRequest) (_result *CreateDataQualityRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataQualityRuleResponse{}
	_body, _err := client.CreateDataQualityRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a data quality monitoring rule template.
//
// @param tmpReq - CreateDataQualityRuleTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDataQualityRuleTemplateResponse
func (client *Client) CreateDataQualityRuleTemplateWithOptions(tmpReq *CreateDataQualityRuleTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateDataQualityRuleTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateDataQualityRuleTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CheckingConfig)) {
		request.CheckingConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CheckingConfig, tea.String("CheckingConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SamplingConfig)) {
		request.SamplingConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SamplingConfig, tea.String("SamplingConfig"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckingConfigShrink)) {
		body["CheckingConfig"] = request.CheckingConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryPath)) {
		body["DirectoryPath"] = request.DirectoryPath
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SamplingConfigShrink)) {
		body["SamplingConfig"] = request.SamplingConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.VisibleScope)) {
		body["VisibleScope"] = request.VisibleScope
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataQualityRuleTemplate"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDataQualityRuleTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a data quality monitoring rule template.
//
// @param request - CreateDataQualityRuleTemplateRequest
//
// @return CreateDataQualityRuleTemplateResponse
func (client *Client) CreateDataQualityRuleTemplate(request *CreateDataQualityRuleTemplateRequest) (_result *CreateDataQualityRuleTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataQualityRuleTemplateResponse{}
	_body, _err := client.CreateDataQualityRuleTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a data source to the development environment or production environment of a workspace.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
//
// @param request - CreateDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDataSourceResponse
func (client *Client) CreateDataSourceWithOptions(request *CreateDataSourceRequest, runtime *util.RuntimeOptions) (_result *CreateDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConnectionProperties)) {
		query["ConnectionProperties"] = request.ConnectionProperties
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectionPropertiesMode)) {
		query["ConnectionPropertiesMode"] = request.ConnectionPropertiesMode
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataSource"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a data source to the development environment or production environment of a workspace.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
//
// @param request - CreateDataSourceRequest
//
// @return CreateDataSourceResponse
func (client *Client) CreateDataSource(request *CreateDataSourceRequest) (_result *CreateDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataSourceResponse{}
	_body, _err := client.CreateDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a rule for sharing a data source to other workspaces or RAM users.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  If you want to share a data source from Workspace A to Workspace B, you must have the permissions to share the data source in both workspaces. You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
//
// @param request - CreateDataSourceSharedRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDataSourceSharedRuleResponse
func (client *Client) CreateDataSourceSharedRuleWithOptions(request *CreateDataSourceSharedRuleRequest, runtime *util.RuntimeOptions) (_result *CreateDataSourceSharedRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.SharedUser)) {
		query["SharedUser"] = request.SharedUser
	}

	if !tea.BoolValue(util.IsUnset(request.TargetProjectId)) {
		query["TargetProjectId"] = request.TargetProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataSourceSharedRule"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDataSourceSharedRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a rule for sharing a data source to other workspaces or RAM users.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  If you want to share a data source from Workspace A to Workspace B, you must have the permissions to share the data source in both workspaces. You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
//
// @param request - CreateDataSourceSharedRuleRequest
//
// @return CreateDataSourceSharedRuleResponse
func (client *Client) CreateDataSourceSharedRule(request *CreateDataSourceSharedRuleRequest) (_result *CreateDataSourceSharedRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataSourceSharedRuleResponse{}
	_body, _err := client.CreateDataSourceSharedRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFileResponse
func (client *Client) CreateFileWithOptions(request *CreateFileRequest, runtime *util.RuntimeOptions) (_result *CreateFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdvancedSettings)) {
		body["AdvancedSettings"] = request.AdvancedSettings
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyScheduleImmediately)) {
		body["ApplyScheduleImmediately"] = request.ApplyScheduleImmediately
	}

	if !tea.BoolValue(util.IsUnset(request.AutoParsing)) {
		body["AutoParsing"] = request.AutoParsing
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRerunIntervalMillis)) {
		body["AutoRerunIntervalMillis"] = request.AutoRerunIntervalMillis
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRerunTimes)) {
		body["AutoRerunTimes"] = request.AutoRerunTimes
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectionName)) {
		body["ConnectionName"] = request.ConnectionName
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFolderIfNotExists)) {
		body["CreateFolderIfNotExists"] = request.CreateFolderIfNotExists
	}

	if !tea.BoolValue(util.IsUnset(request.CronExpress)) {
		body["CronExpress"] = request.CronExpress
	}

	if !tea.BoolValue(util.IsUnset(request.CycleType)) {
		body["CycleType"] = request.CycleType
	}

	if !tea.BoolValue(util.IsUnset(request.DependentNodeIdList)) {
		body["DependentNodeIdList"] = request.DependentNodeIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DependentType)) {
		body["DependentType"] = request.DependentType
	}

	if !tea.BoolValue(util.IsUnset(request.EndEffectDate)) {
		body["EndEffectDate"] = request.EndEffectDate
	}

	if !tea.BoolValue(util.IsUnset(request.FileDescription)) {
		body["FileDescription"] = request.FileDescription
	}

	if !tea.BoolValue(util.IsUnset(request.FileFolderPath)) {
		body["FileFolderPath"] = request.FileFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		body["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FileType)) {
		body["FileType"] = request.FileType
	}

	if !tea.BoolValue(util.IsUnset(request.IgnoreParentSkipRunningProperty)) {
		body["IgnoreParentSkipRunningProperty"] = request.IgnoreParentSkipRunningProperty
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		body["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InputList)) {
		body["InputList"] = request.InputList
	}

	if !tea.BoolValue(util.IsUnset(request.InputParameters)) {
		body["InputParameters"] = request.InputParameters
	}

	if !tea.BoolValue(util.IsUnset(request.OutputParameters)) {
		body["OutputParameters"] = request.OutputParameters
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.ParaValue)) {
		body["ParaValue"] = request.ParaValue
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.RerunMode)) {
		body["RerunMode"] = request.RerunMode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		body["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupIdentifier)) {
		body["ResourceGroupIdentifier"] = request.ResourceGroupIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.SchedulerType)) {
		body["SchedulerType"] = request.SchedulerType
	}

	if !tea.BoolValue(util.IsUnset(request.StartEffectDate)) {
		body["StartEffectDate"] = request.StartEffectDate
	}

	if !tea.BoolValue(util.IsUnset(request.StartImmediately)) {
		body["StartImmediately"] = request.StartImmediately
	}

	if !tea.BoolValue(util.IsUnset(request.Stop)) {
		body["Stop"] = request.Stop
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		body["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFile"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateFileRequest
//
// @return CreateFileResponse
func (client *Client) CreateFile(request *CreateFileRequest) (_result *CreateFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFileResponse{}
	_body, _err := client.CreateFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateFolderRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFolderResponse
func (client *Client) CreateFolderWithOptions(request *CreateFolderRequest, runtime *util.RuntimeOptions) (_result *CreateFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FolderPath)) {
		body["FolderPath"] = request.FolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFolder"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFolderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateFolderRequest
//
// @return CreateFolderResponse
func (client *Client) CreateFolder(request *CreateFolderRequest) (_result *CreateFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFolderResponse{}
	_body, _err := client.CreateFolderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a user-defined function (UDF) in DataStudio. The information about the UDF is described by using FlowSpec.
//
// Description:
//
// >  You cannot use this API operation to create multiple UDFs at a time. If you specify multiple UDFs by using FlowSpec, the system creates only the first specified UDF.
//
// @param request - CreateFunctionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFunctionResponse
func (client *Client) CreateFunctionWithOptions(request *CreateFunctionRequest, runtime *util.RuntimeOptions) (_result *CreateFunctionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		body["Spec"] = request.Spec
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFunction"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFunctionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a user-defined function (UDF) in DataStudio. The information about the UDF is described by using FlowSpec.
//
// Description:
//
// >  You cannot use this API operation to create multiple UDFs at a time. If you specify multiple UDFs by using FlowSpec, the system creates only the first specified UDF.
//
// @param request - CreateFunctionRequest
//
// @return CreateFunctionResponse
func (client *Client) CreateFunction(request *CreateFunctionRequest) (_result *CreateFunctionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFunctionResponse{}
	_body, _err := client.CreateFunctionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 注册血缘关系
//
// @param tmpReq - CreateLineageRelationshipRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLineageRelationshipResponse
func (client *Client) CreateLineageRelationshipWithOptions(tmpReq *CreateLineageRelationshipRequest, runtime *util.RuntimeOptions) (_result *CreateLineageRelationshipResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateLineageRelationshipShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DstEntity)) {
		request.DstEntityShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DstEntity, tea.String("DstEntity"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SrcEntity)) {
		request.SrcEntityShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SrcEntity, tea.String("SrcEntity"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Task)) {
		request.TaskShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Task, tea.String("Task"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DstEntityShrink)) {
		query["DstEntity"] = request.DstEntityShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SrcEntityShrink)) {
		query["SrcEntity"] = request.SrcEntityShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TaskShrink)) {
		query["Task"] = request.TaskShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLineageRelationship"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLineageRelationshipResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 注册血缘关系
//
// @param request - CreateLineageRelationshipRequest
//
// @return CreateLineageRelationshipResponse
func (client *Client) CreateLineageRelationship(request *CreateLineageRelationshipRequest) (_result *CreateLineageRelationshipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLineageRelationshipResponse{}
	_body, _err := client.CreateLineageRelationshipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建集合
//
// @param request - CreateMetaCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMetaCollectionResponse
func (client *Client) CreateMetaCollectionWithOptions(request *CreateMetaCollectionRequest, runtime *util.RuntimeOptions) (_result *CreateMetaCollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMetaCollection"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMetaCollectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建集合
//
// @param request - CreateMetaCollectionRequest
//
// @return CreateMetaCollectionResponse
func (client *Client) CreateMetaCollection(request *CreateMetaCollectionRequest) (_result *CreateMetaCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMetaCollectionResponse{}
	_body, _err := client.CreateMetaCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a network and associates the network with a general resource group.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - CreateNetworkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateNetworkResponse
func (client *Client) CreateNetworkWithOptions(request *CreateNetworkRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		body["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		body["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		body["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.VswitchId)) {
		body["VswitchId"] = request.VswitchId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNetwork"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateNetworkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a network and associates the network with a general resource group.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - CreateNetworkRequest
//
// @return CreateNetworkResponse
func (client *Client) CreateNetwork(request *CreateNetworkRequest) (_result *CreateNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkResponse{}
	_body, _err := client.CreateNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a node in DataStudio. The information about the node is described by using FlowSpec.
//
// Description:
//
// >  You cannot use this API operation to create multiple nodes at a time. If you specify multiple nodes by using FlowSpec, the system creates only the first specified node.
//
// @param request - CreateNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateNodeResponse
func (client *Client) CreateNodeWithOptions(request *CreateNodeRequest, runtime *util.RuntimeOptions) (_result *CreateNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContainerId)) {
		body["ContainerId"] = request.ContainerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Scene)) {
		body["Scene"] = request.Scene
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		body["Spec"] = request.Spec
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNode"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a node in DataStudio. The information about the node is described by using FlowSpec.
//
// Description:
//
// >  You cannot use this API operation to create multiple nodes at a time. If you specify multiple nodes by using FlowSpec, the system creates only the first specified node.
//
// @param request - CreateNodeRequest
//
// @return CreateNodeResponse
func (client *Client) CreateNode(request *CreateNodeRequest) (_result *CreateNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNodeResponse{}
	_body, _err := client.CreateNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a process for deploying or undeploying an entity in Data Studio.
//
// Description:
//
// >  You cannot use this API operation to create a process for multiple entities at a time. If you specify multiple entities in a request, the system creates a process only for the first entity.
//
// @param tmpReq - CreatePipelineRunRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePipelineRunResponse
func (client *Client) CreatePipelineRunWithOptions(tmpReq *CreatePipelineRunRequest, runtime *util.RuntimeOptions) (_result *CreatePipelineRunResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreatePipelineRunShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ObjectIds)) {
		request.ObjectIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ObjectIds, tea.String("ObjectIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectIdsShrink)) {
		body["ObjectIds"] = request.ObjectIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePipelineRun"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePipelineRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a process for deploying or undeploying an entity in Data Studio.
//
// Description:
//
// >  You cannot use this API operation to create a process for multiple entities at a time. If you specify multiple entities in a request, the system creates a process only for the first entity.
//
// @param request - CreatePipelineRunRequest
//
// @return CreatePipelineRunResponse
func (client *Client) CreatePipelineRun(request *CreatePipelineRunRequest) (_result *CreatePipelineRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePipelineRunResponse{}
	_body, _err := client.CreatePipelineRunWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a workspace.
//
// @param tmpReq - CreateProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateProjectResponse
func (client *Client) CreateProjectWithOptions(tmpReq *CreateProjectRequest, runtime *util.RuntimeOptions) (_result *CreateProjectResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateProjectShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AliyunResourceTags)) {
		request.AliyunResourceTagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AliyunResourceTags, tea.String("AliyunResourceTags"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunResourceGroupId)) {
		body["AliyunResourceGroupId"] = request.AliyunResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.AliyunResourceTagsShrink)) {
		body["AliyunResourceTags"] = request.AliyunResourceTagsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DevEnvironmentEnabled)) {
		body["DevEnvironmentEnabled"] = request.DevEnvironmentEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.DevRoleDisabled)) {
		body["DevRoleDisabled"] = request.DevRoleDisabled
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		body["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PaiTaskEnabled)) {
		body["PaiTaskEnabled"] = request.PaiTaskEnabled
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateProject"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a workspace.
//
// @param request - CreateProjectRequest
//
// @return CreateProjectResponse
func (client *Client) CreateProject(request *CreateProjectRequest) (_result *CreateProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProjectResponse{}
	_body, _err := client.CreateProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a workspace member and assigns a workspace-level role to the member.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - CreateProjectMemberRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateProjectMemberResponse
func (client *Client) CreateProjectMemberWithOptions(tmpReq *CreateProjectMemberRequest, runtime *util.RuntimeOptions) (_result *CreateProjectMemberResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateProjectMemberShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RoleCodes)) {
		request.RoleCodesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RoleCodes, tea.String("RoleCodes"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleCodesShrink)) {
		body["RoleCodes"] = request.RoleCodesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateProjectMember"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateProjectMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a workspace member and assigns a workspace-level role to the member.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - CreateProjectMemberRequest
//
// @return CreateProjectMemberResponse
func (client *Client) CreateProjectMember(request *CreateProjectMemberRequest) (_result *CreateProjectMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProjectMemberResponse{}
	_body, _err := client.CreateProjectMemberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// >  You cannot use this API operation to create multiple file resources at a time. If you specify multiple file resources by using FlowSpec, the system creates only the first specified resource.
//
// Description:
//
// # Private
//
// @param request - CreateResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateResourceResponse
func (client *Client) CreateResourceWithOptions(request *CreateResourceRequest, runtime *util.RuntimeOptions) (_result *CreateResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceFile)) {
		body["ResourceFile"] = request.ResourceFile
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		body["Spec"] = request.Spec
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateResource"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// >  You cannot use this API operation to create multiple file resources at a time. If you specify multiple file resources by using FlowSpec, the system creates only the first specified resource.
//
// Description:
//
// # Private
//
// @param request - CreateResourceRequest
//
// @return CreateResourceResponse
func (client *Client) CreateResource(request *CreateResourceRequest) (_result *CreateResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateResourceResponse{}
	_body, _err := client.CreateResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateResourceAdvance(request *CreateResourceAdvanceRequest, runtime *util.RuntimeOptions) (_result *CreateResourceResponse, _err error) {
	// Step 0: init client
	accessKeyId, _err := client.Credential.GetAccessKeyId()
	if _err != nil {
		return _result, _err
	}

	accessKeySecret, _err := client.Credential.GetAccessKeySecret()
	if _err != nil {
		return _result, _err
	}

	securityToken, _err := client.Credential.GetSecurityToken()
	if _err != nil {
		return _result, _err
	}

	credentialType := client.Credential.GetType()
	openPlatformEndpoint := client.OpenPlatformEndpoint
	if tea.BoolValue(util.Empty(openPlatformEndpoint)) {
		openPlatformEndpoint = tea.String("openplatform.aliyuncs.com")
	}

	if tea.BoolValue(util.IsUnset(credentialType)) {
		credentialType = tea.String("access_key")
	}

	authConfig := &openapi.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		SecurityToken:   securityToken,
		Type:            credentialType,
		Endpoint:        openPlatformEndpoint,
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	authClient, _err := openplatform.NewClient(authConfig)
	if _err != nil {
		return _result, _err
	}

	authRequest := &openplatform.AuthorizeFileUploadRequest{
		Product:  tea.String("dataworks-public"),
		RegionId: client.RegionId,
	}
	authResponse := &openplatform.AuthorizeFileUploadResponse{}
	ossConfig := &oss.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		Type:            tea.String("access_key"),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	ossClient, _err := oss.NewClient(ossConfig)
	if _err != nil {
		return _result, _err
	}

	fileObj := &fileform.FileField{}
	ossHeader := &oss.PostObjectRequestHeader{}
	uploadRequest := &oss.PostObjectRequest{}
	ossRuntime := &ossutil.RuntimeOptions{}
	openapiutil.Convert(runtime, ossRuntime)
	createResourceReq := &CreateResourceRequest{}
	openapiutil.Convert(request, createResourceReq)
	if !tea.BoolValue(util.IsUnset(request.ResourceFileObject)) {
		authResponse, _err = authClient.AuthorizeFileUploadWithOptions(authRequest, runtime)
		if _err != nil {
			return _result, _err
		}

		ossConfig.AccessKeyId = authResponse.Body.AccessKeyId
		ossConfig.Endpoint = openapiutil.GetEndpoint(authResponse.Body.Endpoint, authResponse.Body.UseAccelerate, client.EndpointType)
		ossClient, _err = oss.NewClient(ossConfig)
		if _err != nil {
			return _result, _err
		}

		fileObj = &fileform.FileField{
			Filename:    authResponse.Body.ObjectKey,
			Content:     request.ResourceFileObject,
			ContentType: tea.String(""),
		}
		ossHeader = &oss.PostObjectRequestHeader{
			AccessKeyId:         authResponse.Body.AccessKeyId,
			Policy:              authResponse.Body.EncodedPolicy,
			Signature:           authResponse.Body.Signature,
			Key:                 authResponse.Body.ObjectKey,
			File:                fileObj,
			SuccessActionStatus: tea.String("201"),
		}
		uploadRequest = &oss.PostObjectRequest{
			BucketName: authResponse.Body.Bucket,
			Header:     ossHeader,
		}
		_, _err = ossClient.PostObject(uploadRequest, ossRuntime)
		if _err != nil {
			return _result, _err
		}
		createResourceReq.ResourceFile = tea.String("http://" + tea.StringValue(authResponse.Body.Bucket) + "." + tea.StringValue(authResponse.Body.Endpoint) + "/" + tea.StringValue(authResponse.Body.ObjectKey))
	}

	createResourceResp, _err := client.CreateResourceWithOptions(createResourceReq, runtime)
	if _err != nil {
		return _result, _err
	}

	_result = createResourceResp
	return _result, _err
}

// Summary:
//
// Creates a resource file in DataStudio. The following types are supported: JAR, Archive, File, and Python.
//
// @param request - CreateResourceFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateResourceFileResponse
func (client *Client) CreateResourceFileWithOptions(request *CreateResourceFileRequest, runtime *util.RuntimeOptions) (_result *CreateResourceFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.FileDescription)) {
		body["FileDescription"] = request.FileDescription
	}

	if !tea.BoolValue(util.IsUnset(request.FileFolderPath)) {
		body["FileFolderPath"] = request.FileFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		body["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FileType)) {
		body["FileType"] = request.FileType
	}

	if !tea.BoolValue(util.IsUnset(request.OriginResourceName)) {
		body["OriginResourceName"] = request.OriginResourceName
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterToCalcEngine)) {
		body["RegisterToCalcEngine"] = request.RegisterToCalcEngine
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceFile)) {
		body["ResourceFile"] = request.ResourceFile
	}

	if !tea.BoolValue(util.IsUnset(request.StorageURL)) {
		body["StorageURL"] = request.StorageURL
	}

	if !tea.BoolValue(util.IsUnset(request.UploadMode)) {
		body["UploadMode"] = request.UploadMode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateResourceFile"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateResourceFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a resource file in DataStudio. The following types are supported: JAR, Archive, File, and Python.
//
// @param request - CreateResourceFileRequest
//
// @return CreateResourceFileResponse
func (client *Client) CreateResourceFile(request *CreateResourceFileRequest) (_result *CreateResourceFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateResourceFileResponse{}
	_body, _err := client.CreateResourceFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateResourceFileAdvance(request *CreateResourceFileAdvanceRequest, runtime *util.RuntimeOptions) (_result *CreateResourceFileResponse, _err error) {
	// Step 0: init client
	accessKeyId, _err := client.Credential.GetAccessKeyId()
	if _err != nil {
		return _result, _err
	}

	accessKeySecret, _err := client.Credential.GetAccessKeySecret()
	if _err != nil {
		return _result, _err
	}

	securityToken, _err := client.Credential.GetSecurityToken()
	if _err != nil {
		return _result, _err
	}

	credentialType := client.Credential.GetType()
	openPlatformEndpoint := client.OpenPlatformEndpoint
	if tea.BoolValue(util.Empty(openPlatformEndpoint)) {
		openPlatformEndpoint = tea.String("openplatform.aliyuncs.com")
	}

	if tea.BoolValue(util.IsUnset(credentialType)) {
		credentialType = tea.String("access_key")
	}

	authConfig := &openapi.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		SecurityToken:   securityToken,
		Type:            credentialType,
		Endpoint:        openPlatformEndpoint,
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	authClient, _err := openplatform.NewClient(authConfig)
	if _err != nil {
		return _result, _err
	}

	authRequest := &openplatform.AuthorizeFileUploadRequest{
		Product:  tea.String("dataworks-public"),
		RegionId: client.RegionId,
	}
	authResponse := &openplatform.AuthorizeFileUploadResponse{}
	ossConfig := &oss.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		Type:            tea.String("access_key"),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	ossClient, _err := oss.NewClient(ossConfig)
	if _err != nil {
		return _result, _err
	}

	fileObj := &fileform.FileField{}
	ossHeader := &oss.PostObjectRequestHeader{}
	uploadRequest := &oss.PostObjectRequest{}
	ossRuntime := &ossutil.RuntimeOptions{}
	openapiutil.Convert(runtime, ossRuntime)
	createResourceFileReq := &CreateResourceFileRequest{}
	openapiutil.Convert(request, createResourceFileReq)
	if !tea.BoolValue(util.IsUnset(request.ResourceFileObject)) {
		authResponse, _err = authClient.AuthorizeFileUploadWithOptions(authRequest, runtime)
		if _err != nil {
			return _result, _err
		}

		ossConfig.AccessKeyId = authResponse.Body.AccessKeyId
		ossConfig.Endpoint = openapiutil.GetEndpoint(authResponse.Body.Endpoint, authResponse.Body.UseAccelerate, client.EndpointType)
		ossClient, _err = oss.NewClient(ossConfig)
		if _err != nil {
			return _result, _err
		}

		fileObj = &fileform.FileField{
			Filename:    authResponse.Body.ObjectKey,
			Content:     request.ResourceFileObject,
			ContentType: tea.String(""),
		}
		ossHeader = &oss.PostObjectRequestHeader{
			AccessKeyId:         authResponse.Body.AccessKeyId,
			Policy:              authResponse.Body.EncodedPolicy,
			Signature:           authResponse.Body.Signature,
			Key:                 authResponse.Body.ObjectKey,
			File:                fileObj,
			SuccessActionStatus: tea.String("201"),
		}
		uploadRequest = &oss.PostObjectRequest{
			BucketName: authResponse.Body.Bucket,
			Header:     ossHeader,
		}
		_, _err = ossClient.PostObject(uploadRequest, ossRuntime)
		if _err != nil {
			return _result, _err
		}
		createResourceFileReq.ResourceFile = tea.String("http://" + tea.StringValue(authResponse.Body.Bucket) + "." + tea.StringValue(authResponse.Body.Endpoint) + "/" + tea.StringValue(authResponse.Body.ObjectKey))
	}

	createResourceFileResp, _err := client.CreateResourceFileWithOptions(createResourceFileReq, runtime)
	if _err != nil {
		return _result, _err
	}

	_result = createResourceFileResp
	return _result, _err
}

// Summary:
//
// Creates a serverless resource group.
//
// Description:
//
// 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
//
// 2.  **Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
//
// @param tmpReq - CreateResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateResourceGroupResponse
func (client *Client) CreateResourceGroupWithOptions(tmpReq *CreateResourceGroupRequest, runtime *util.RuntimeOptions) (_result *CreateResourceGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateResourceGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AliyunResourceTags)) {
		request.AliyunResourceTagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AliyunResourceTags, tea.String("AliyunResourceTags"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunResourceGroupId)) {
		body["AliyunResourceGroupId"] = request.AliyunResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.AliyunResourceTagsShrink)) {
		body["AliyunResourceTags"] = request.AliyunResourceTagsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenewEnabled)) {
		body["AutoRenewEnabled"] = request.AutoRenewEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		body["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PaymentDuration)) {
		body["PaymentDuration"] = request.PaymentDuration
	}

	if !tea.BoolValue(util.IsUnset(request.PaymentDurationUnit)) {
		body["PaymentDurationUnit"] = request.PaymentDurationUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PaymentType)) {
		body["PaymentType"] = request.PaymentType
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		body["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		body["Spec"] = request.Spec
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		body["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.VswitchId)) {
		body["VswitchId"] = request.VswitchId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateResourceGroup"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a serverless resource group.
//
// Description:
//
// 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
//
// 2.  **Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
//
// @param request - CreateResourceGroupRequest
//
// @return CreateResourceGroupResponse
func (client *Client) CreateResourceGroup(request *CreateResourceGroupRequest) (_result *CreateResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateResourceGroupResponse{}
	_body, _err := client.CreateResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a route for a network.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - CreateRouteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRouteResponse
func (client *Client) CreateRouteWithOptions(request *CreateRouteRequest, runtime *util.RuntimeOptions) (_result *CreateRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationCidr)) {
		body["DestinationCidr"] = request.DestinationCidr
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		body["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		body["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRoute"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a route for a network.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - CreateRouteRequest
//
// @return CreateRouteResponse
func (client *Client) CreateRoute(request *CreateRouteRequest) (_result *CreateRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRouteResponse{}
	_body, _err := client.CreateRouteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateUdfFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateUdfFileResponse
func (client *Client) CreateUdfFileWithOptions(request *CreateUdfFileRequest, runtime *util.RuntimeOptions) (_result *CreateUdfFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClassName)) {
		body["ClassName"] = request.ClassName
	}

	if !tea.BoolValue(util.IsUnset(request.CmdDescription)) {
		body["CmdDescription"] = request.CmdDescription
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFolderIfNotExists)) {
		body["CreateFolderIfNotExists"] = request.CreateFolderIfNotExists
	}

	if !tea.BoolValue(util.IsUnset(request.Example)) {
		body["Example"] = request.Example
	}

	if !tea.BoolValue(util.IsUnset(request.FileFolderPath)) {
		body["FileFolderPath"] = request.FileFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		body["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionType)) {
		body["FunctionType"] = request.FunctionType
	}

	if !tea.BoolValue(util.IsUnset(request.ParameterDescription)) {
		body["ParameterDescription"] = request.ParameterDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.Resources)) {
		body["Resources"] = request.Resources
	}

	if !tea.BoolValue(util.IsUnset(request.ReturnValue)) {
		body["ReturnValue"] = request.ReturnValue
	}

	if !tea.BoolValue(util.IsUnset(request.UdfDescription)) {
		body["UdfDescription"] = request.UdfDescription
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUdfFile"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUdfFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateUdfFileRequest
//
// @return CreateUdfFileResponse
func (client *Client) CreateUdfFile(request *CreateUdfFileRequest) (_result *CreateUdfFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUdfFileResponse{}
	_body, _err := client.CreateUdfFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a workflow in a directory of DataStudio.
//
// Description:
//
// > You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system creates only the first specified workflow. Other specified workflows and the nodes in the workflows are ignored. You can call the CreateNode operation to create a node.
//
// @param request - CreateWorkflowDefinitionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWorkflowDefinitionResponse
func (client *Client) CreateWorkflowDefinitionWithOptions(request *CreateWorkflowDefinitionRequest, runtime *util.RuntimeOptions) (_result *CreateWorkflowDefinitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		body["Spec"] = request.Spec
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWorkflowDefinition"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWorkflowDefinitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a workflow in a directory of DataStudio.
//
// Description:
//
// > You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system creates only the first specified workflow. Other specified workflows and the nodes in the workflows are ignored. You can call the CreateNode operation to create a node.
//
// @param request - CreateWorkflowDefinitionRequest
//
// @return CreateWorkflowDefinitionResponse
func (client *Client) CreateWorkflowDefinition(request *CreateWorkflowDefinitionRequest) (_result *CreateWorkflowDefinitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateWorkflowDefinitionResponse{}
	_body, _err := client.CreateWorkflowDefinitionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a workflow instance, such as a data backfill workflow instance, based on configurations.
//
// @param tmpReq - CreateWorkflowInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWorkflowInstancesResponse
func (client *Client) CreateWorkflowInstancesWithOptions(tmpReq *CreateWorkflowInstancesRequest, runtime *util.RuntimeOptions) (_result *CreateWorkflowInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateWorkflowInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DefaultRunProperties)) {
		request.DefaultRunPropertiesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DefaultRunProperties, tea.String("DefaultRunProperties"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Periods)) {
		request.PeriodsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Periods, tea.String("Periods"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoStartEnabled)) {
		body["AutoStartEnabled"] = request.AutoStartEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultRunPropertiesShrink)) {
		body["DefaultRunProperties"] = request.DefaultRunPropertiesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodsShrink)) {
		body["Periods"] = request.PeriodsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskParameters)) {
		body["TaskParameters"] = request.TaskParameters
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WorkflowId)) {
		body["WorkflowId"] = request.WorkflowId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkflowParameters)) {
		body["WorkflowParameters"] = request.WorkflowParameters
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWorkflowInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWorkflowInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a workflow instance, such as a data backfill workflow instance, based on configurations.
//
// @param request - CreateWorkflowInstancesRequest
//
// @return CreateWorkflowInstancesResponse
func (client *Client) CreateWorkflowInstances(request *CreateWorkflowInstancesRequest) (_result *CreateWorkflowInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateWorkflowInstancesResponse{}
	_body, _err := client.CreateWorkflowInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a custom monitoring alert rule.
//
// @param request - DeleteAlertRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAlertRuleResponse
func (client *Client) DeleteAlertRuleWithOptions(request *DeleteAlertRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteAlertRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAlertRule"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAlertRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a custom monitoring alert rule.
//
// @param request - DeleteAlertRuleRequest
//
// @return DeleteAlertRuleResponse
func (client *Client) DeleteAlertRule(request *DeleteAlertRuleRequest) (_result *DeleteAlertRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAlertRuleResponse{}
	_body, _err := client.DeleteAlertRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteBusinessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBusinessResponse
func (client *Client) DeleteBusinessWithOptions(request *DeleteBusinessRequest, runtime *util.RuntimeOptions) (_result *DeleteBusinessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessId)) {
		body["BusinessId"] = request.BusinessId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBusiness"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteBusinessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteBusinessRequest
//
// @return DeleteBusinessResponse
func (client *Client) DeleteBusiness(request *DeleteBusinessRequest) (_result *DeleteBusinessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBusinessResponse{}
	_body, _err := client.DeleteBusinessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a certificate file.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M.
//
// @param request - DeleteCertificateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCertificateResponse
func (client *Client) DeleteCertificateWithOptions(request *DeleteCertificateRequest, runtime *util.RuntimeOptions) (_result *DeleteCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCertificate"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a certificate file.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M.
//
// @param request - DeleteCertificateRequest
//
// @return DeleteCertificateResponse
func (client *Client) DeleteCertificate(request *DeleteCertificateRequest) (_result *DeleteCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCertificateResponse{}
	_body, _err := client.DeleteCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an alert rule configured for a synchronization task.
//
// @param request - DeleteDIAlarmRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDIAlarmRuleResponse
func (client *Client) DeleteDIAlarmRuleWithOptions(request *DeleteDIAlarmRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteDIAlarmRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDIAlarmRule"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDIAlarmRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an alert rule configured for a synchronization task.
//
// @param request - DeleteDIAlarmRuleRequest
//
// @return DeleteDIAlarmRuleResponse
func (client *Client) DeleteDIAlarmRule(request *DeleteDIAlarmRuleRequest) (_result *DeleteDIAlarmRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDIAlarmRuleResponse{}
	_body, _err := client.DeleteDIAlarmRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a new-version synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteDIJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDIJobResponse
func (client *Client) DeleteDIJobWithOptions(request *DeleteDIJobRequest, runtime *util.RuntimeOptions) (_result *DeleteDIJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDIJob"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDIJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a new-version synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteDIJobRequest
//
// @return DeleteDIJobResponse
func (client *Client) DeleteDIJob(request *DeleteDIJobRequest) (_result *DeleteDIJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDIJobResponse{}
	_body, _err := client.DeleteDIJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a tag.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param tmpReq - DeleteDataAssetTagRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDataAssetTagResponse
func (client *Client) DeleteDataAssetTagWithOptions(tmpReq *DeleteDataAssetTagRequest, runtime *util.RuntimeOptions) (_result *DeleteDataAssetTagResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteDataAssetTagShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Values)) {
		request.ValuesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Values, tea.String("Values"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Key)) {
		query["Key"] = request.Key
	}

	if !tea.BoolValue(util.IsUnset(request.ValuesShrink)) {
		query["Values"] = request.ValuesShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataAssetTag"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataAssetTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a tag.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param request - DeleteDataAssetTagRequest
//
// @return DeleteDataAssetTagResponse
func (client *Client) DeleteDataAssetTag(request *DeleteDataAssetTagRequest) (_result *DeleteDataAssetTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataAssetTagResponse{}
	_body, _err := client.DeleteDataAssetTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a data quality monitoring task.
//
// @param request - DeleteDataQualityEvaluationTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDataQualityEvaluationTaskResponse
func (client *Client) DeleteDataQualityEvaluationTaskWithOptions(request *DeleteDataQualityEvaluationTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteDataQualityEvaluationTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataQualityEvaluationTask"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataQualityEvaluationTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a data quality monitoring task.
//
// @param request - DeleteDataQualityEvaluationTaskRequest
//
// @return DeleteDataQualityEvaluationTaskResponse
func (client *Client) DeleteDataQualityEvaluationTask(request *DeleteDataQualityEvaluationTaskRequest) (_result *DeleteDataQualityEvaluationTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataQualityEvaluationTaskResponse{}
	_body, _err := client.DeleteDataQualityEvaluationTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a data quality monitoring rule.
//
// @param request - DeleteDataQualityRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDataQualityRuleResponse
func (client *Client) DeleteDataQualityRuleWithOptions(request *DeleteDataQualityRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteDataQualityRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataQualityRule"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataQualityRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a data quality monitoring rule.
//
// @param request - DeleteDataQualityRuleRequest
//
// @return DeleteDataQualityRuleResponse
func (client *Client) DeleteDataQualityRule(request *DeleteDataQualityRuleRequest) (_result *DeleteDataQualityRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataQualityRuleResponse{}
	_body, _err := client.DeleteDataQualityRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a data quality monitoring rule template.
//
// @param request - DeleteDataQualityRuleTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDataQualityRuleTemplateResponse
func (client *Client) DeleteDataQualityRuleTemplateWithOptions(request *DeleteDataQualityRuleTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteDataQualityRuleTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Code)) {
		query["Code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataQualityRuleTemplate"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataQualityRuleTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a data quality monitoring rule template.
//
// @param request - DeleteDataQualityRuleTemplateRequest
//
// @return DeleteDataQualityRuleTemplateResponse
func (client *Client) DeleteDataQualityRuleTemplate(request *DeleteDataQualityRuleTemplateRequest) (_result *DeleteDataQualityRuleTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataQualityRuleTemplateResponse{}
	_body, _err := client.DeleteDataQualityRuleTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes a data source by ID.
//
// Description:
//
// 1.  This API operation is available for all Dataworks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
//
// @param request - DeleteDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDataSourceResponse
func (client *Client) DeleteDataSourceWithOptions(request *DeleteDataSourceRequest, runtime *util.RuntimeOptions) (_result *DeleteDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataSource"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes a data source by ID.
//
// Description:
//
// 1.  This API operation is available for all Dataworks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
//
// @param request - DeleteDataSourceRequest
//
// @return DeleteDataSourceResponse
func (client *Client) DeleteDataSource(request *DeleteDataSourceRequest) (_result *DeleteDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataSourceResponse{}
	_body, _err := client.DeleteDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a sharing rule of a data source by ID.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  If you want to delete a sharing rule of a data source from Workspace A to Workspace B, you must have the permissions to share the data source in Workspace A or Workspace B. You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
//
// @param request - DeleteDataSourceSharedRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDataSourceSharedRuleResponse
func (client *Client) DeleteDataSourceSharedRuleWithOptions(request *DeleteDataSourceSharedRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteDataSourceSharedRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataSourceSharedRule"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataSourceSharedRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a sharing rule of a data source by ID.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  If you want to delete a sharing rule of a data source from Workspace A to Workspace B, you must have the permissions to share the data source in Workspace A or Workspace B. You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
//
// @param request - DeleteDataSourceSharedRuleRequest
//
// @return DeleteDataSourceSharedRuleResponse
func (client *Client) DeleteDataSourceSharedRule(request *DeleteDataSourceSharedRuleRequest) (_result *DeleteDataSourceSharedRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataSourceSharedRuleResponse{}
	_body, _err := client.DeleteDataSourceSharedRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFileResponse
func (client *Client) DeleteFileWithOptions(request *DeleteFileRequest, runtime *util.RuntimeOptions) (_result *DeleteFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFile"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteFileRequest
//
// @return DeleteFileResponse
func (client *Client) DeleteFile(request *DeleteFileRequest) (_result *DeleteFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFileResponse{}
	_body, _err := client.DeleteFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteFolderRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFolderResponse
func (client *Client) DeleteFolderWithOptions(request *DeleteFolderRequest, runtime *util.RuntimeOptions) (_result *DeleteFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FolderId)) {
		body["FolderId"] = request.FolderId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFolder"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFolderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteFolderRequest
//
// @return DeleteFolderResponse
func (client *Client) DeleteFolder(request *DeleteFolderRequest) (_result *DeleteFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFolderResponse{}
	_body, _err := client.DeleteFolderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a user-defined function (UDF) in DataStudio.
//
// Description:
//
// >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
//
// @param request - DeleteFunctionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFunctionResponse
func (client *Client) DeleteFunctionWithOptions(request *DeleteFunctionRequest, runtime *util.RuntimeOptions) (_result *DeleteFunctionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFunction"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFunctionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a user-defined function (UDF) in DataStudio.
//
// Description:
//
// >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
//
// @param request - DeleteFunctionRequest
//
// @return DeleteFunctionResponse
func (client *Client) DeleteFunction(request *DeleteFunctionRequest) (_result *DeleteFunctionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFunctionResponse{}
	_body, _err := client.DeleteFunctionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除血缘关系
//
// @param request - DeleteLineageRelationshipRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLineageRelationshipResponse
func (client *Client) DeleteLineageRelationshipWithOptions(request *DeleteLineageRelationshipRequest, runtime *util.RuntimeOptions) (_result *DeleteLineageRelationshipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLineageRelationship"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLineageRelationshipResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除血缘关系
//
// @param request - DeleteLineageRelationshipRequest
//
// @return DeleteLineageRelationshipResponse
func (client *Client) DeleteLineageRelationship(request *DeleteLineageRelationshipRequest) (_result *DeleteLineageRelationshipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLineageRelationshipResponse{}
	_body, _err := client.DeleteLineageRelationshipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除集合
//
// @param request - DeleteMetaCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMetaCollectionResponse
func (client *Client) DeleteMetaCollectionWithOptions(request *DeleteMetaCollectionRequest, runtime *util.RuntimeOptions) (_result *DeleteMetaCollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMetaCollection"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMetaCollectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除集合
//
// @param request - DeleteMetaCollectionRequest
//
// @return DeleteMetaCollectionResponse
func (client *Client) DeleteMetaCollection(request *DeleteMetaCollectionRequest) (_result *DeleteMetaCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMetaCollectionResponse{}
	_body, _err := client.DeleteMetaCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disassociates and deletes a network from a general resource group.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteNetworkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNetworkResponse
func (client *Client) DeleteNetworkWithOptions(request *DeleteNetworkRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNetwork"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNetworkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disassociates and deletes a network from a general resource group.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteNetworkRequest
//
// @return DeleteNetworkResponse
func (client *Client) DeleteNetwork(request *DeleteNetworkRequest) (_result *DeleteNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkResponse{}
	_body, _err := client.DeleteNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a node from DataStudio.
//
// Description:
//
// >  A node that is deployed cannot be deleted. If you want to delete such a node, you must first undeploy the node.
//
// @param request - DeleteNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNodeResponse
func (client *Client) DeleteNodeWithOptions(request *DeleteNodeRequest, runtime *util.RuntimeOptions) (_result *DeleteNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNode"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a node from DataStudio.
//
// Description:
//
// >  A node that is deployed cannot be deleted. If you want to delete such a node, you must first undeploy the node.
//
// @param request - DeleteNodeRequest
//
// @return DeleteNodeResponse
func (client *Client) DeleteNode(request *DeleteNodeRequest) (_result *DeleteNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNodeResponse{}
	_body, _err := client.DeleteNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a DataWorks workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteProjectResponse
func (client *Client) DeleteProjectWithOptions(request *DeleteProjectRequest, runtime *util.RuntimeOptions) (_result *DeleteProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteProject"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a DataWorks workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteProjectRequest
//
// @return DeleteProjectResponse
func (client *Client) DeleteProject(request *DeleteProjectRequest) (_result *DeleteProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProjectResponse{}
	_body, _err := client.DeleteProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes a workspace member and the workspace-level roles that are assigned to the member.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteProjectMemberRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteProjectMemberResponse
func (client *Client) DeleteProjectMemberWithOptions(request *DeleteProjectMemberRequest, runtime *util.RuntimeOptions) (_result *DeleteProjectMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteProjectMember"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteProjectMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes a workspace member and the workspace-level roles that are assigned to the member.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteProjectMemberRequest
//
// @return DeleteProjectMemberResponse
func (client *Client) DeleteProjectMember(request *DeleteProjectMemberRequest) (_result *DeleteProjectMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProjectMemberResponse{}
	_body, _err := client.DeleteProjectMemberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a file resource from DataStudio.
//
// Description:
//
// >  A file resource that is deployed cannot be deleted. If you want to delete such a file resource, you must first undeploy the file resource.
//
// @param request - DeleteResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteResourceResponse
func (client *Client) DeleteResourceWithOptions(request *DeleteResourceRequest, runtime *util.RuntimeOptions) (_result *DeleteResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteResource"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a file resource from DataStudio.
//
// Description:
//
// >  A file resource that is deployed cannot be deleted. If you want to delete such a file resource, you must first undeploy the file resource.
//
// @param request - DeleteResourceRequest
//
// @return DeleteResourceResponse
func (client *Client) DeleteResource(request *DeleteResourceRequest) (_result *DeleteResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteResourceResponse{}
	_body, _err := client.DeleteResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a serverless resource group.
//
// Description:
//
// 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
//
// 2.  **Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
//
// @param request - DeleteResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteResourceGroupResponse
func (client *Client) DeleteResourceGroupWithOptions(request *DeleteResourceGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteResourceGroup"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a serverless resource group.
//
// Description:
//
// 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
//
// 2.  **Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
//
// @param request - DeleteResourceGroupRequest
//
// @return DeleteResourceGroupResponse
func (client *Client) DeleteResourceGroup(request *DeleteResourceGroupRequest) (_result *DeleteResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteResourceGroupResponse{}
	_body, _err := client.DeleteResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a route from a network resource.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteRouteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRouteResponse
func (client *Client) DeleteRouteWithOptions(request *DeleteRouteRequest, runtime *util.RuntimeOptions) (_result *DeleteRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRoute"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a route from a network resource.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteRouteRequest
//
// @return DeleteRouteResponse
func (client *Client) DeleteRoute(request *DeleteRouteRequest) (_result *DeleteRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRouteResponse{}
	_body, _err := client.DeleteRouteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTaskResponse
func (client *Client) DeleteTaskWithOptions(request *DeleteTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		query["ProjectEnv"] = request.ProjectEnv
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTask"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteTaskRequest
//
// @return DeleteTaskResponse
func (client *Client) DeleteTask(request *DeleteTaskRequest) (_result *DeleteTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTaskResponse{}
	_body, _err := client.DeleteTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a workflow.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteWorkflowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteWorkflowResponse
func (client *Client) DeleteWorkflowWithOptions(request *DeleteWorkflowRequest, runtime *util.RuntimeOptions) (_result *DeleteWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientUniqueCode)) {
		body["ClientUniqueCode"] = request.ClientUniqueCode
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWorkflow"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWorkflowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a workflow.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - DeleteWorkflowRequest
//
// @return DeleteWorkflowResponse
func (client *Client) DeleteWorkflow(request *DeleteWorkflowRequest) (_result *DeleteWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteWorkflowResponse{}
	_body, _err := client.DeleteWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a workflow from DataStudio.
//
// Description:
//
// >  A workflow that is deployed cannot be deleted. If you want to delete such a workflow, you must first undeploy the workflow.
//
// @param request - DeleteWorkflowDefinitionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteWorkflowDefinitionResponse
func (client *Client) DeleteWorkflowDefinitionWithOptions(request *DeleteWorkflowDefinitionRequest, runtime *util.RuntimeOptions) (_result *DeleteWorkflowDefinitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWorkflowDefinition"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWorkflowDefinitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a workflow from DataStudio.
//
// Description:
//
// >  A workflow that is deployed cannot be deleted. If you want to delete such a workflow, you must first undeploy the workflow.
//
// @param request - DeleteWorkflowDefinitionRequest
//
// @return DeleteWorkflowDefinitionResponse
func (client *Client) DeleteWorkflowDefinition(request *DeleteWorkflowDefinitionRequest) (_result *DeleteWorkflowDefinitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteWorkflowDefinitionResponse{}
	_body, _err := client.DeleteWorkflowDefinitionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeployFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeployFileResponse
func (client *Client) DeployFileWithOptions(request *DeployFileRequest, runtime *util.RuntimeOptions) (_result *DeployFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeployFile"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeployFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeployFileRequest
//
// @return DeployFileResponse
func (client *Client) DeployFile(request *DeployFileRequest) (_result *DeployFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeployFileResponse{}
	_body, _err := client.DeployFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disassociates monitoring rules from a data quality monitoring task.
//
// @param tmpReq - DetachDataQualityRulesFromEvaluationTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachDataQualityRulesFromEvaluationTaskResponse
func (client *Client) DetachDataQualityRulesFromEvaluationTaskWithOptions(tmpReq *DetachDataQualityRulesFromEvaluationTaskRequest, runtime *util.RuntimeOptions) (_result *DetachDataQualityRulesFromEvaluationTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DetachDataQualityRulesFromEvaluationTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DataQualityRuleIds)) {
		request.DataQualityRuleIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DataQualityRuleIds, tea.String("DataQualityRuleIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataQualityEvaluationTaskId)) {
		body["DataQualityEvaluationTaskId"] = request.DataQualityEvaluationTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.DataQualityRuleIdsShrink)) {
		body["DataQualityRuleIds"] = request.DataQualityRuleIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachDataQualityRulesFromEvaluationTask"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DetachDataQualityRulesFromEvaluationTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disassociates monitoring rules from a data quality monitoring task.
//
// @param request - DetachDataQualityRulesFromEvaluationTaskRequest
//
// @return DetachDataQualityRulesFromEvaluationTaskResponse
func (client *Client) DetachDataQualityRulesFromEvaluationTask(request *DetachDataQualityRulesFromEvaluationTaskRequest) (_result *DetachDataQualityRulesFromEvaluationTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachDataQualityRulesFromEvaluationTaskResponse{}
	_body, _err := client.DetachDataQualityRulesFromEvaluationTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disassociates a resource group from a workspace.
//
// Description:
//
// 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
//
// 2.  Your account must be assigned one of the following roles of the desired workspace:
//
//   - Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
//
// @param request - DissociateProjectFromResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DissociateProjectFromResourceGroupResponse
func (client *Client) DissociateProjectFromResourceGroupWithOptions(request *DissociateProjectFromResourceGroupRequest, runtime *util.RuntimeOptions) (_result *DissociateProjectFromResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		body["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DissociateProjectFromResourceGroup"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DissociateProjectFromResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disassociates a resource group from a workspace.
//
// Description:
//
// 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
//
// 2.  Your account must be assigned one of the following roles of the desired workspace:
//
//   - Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
//
// @param request - DissociateProjectFromResourceGroupRequest
//
// @return DissociateProjectFromResourceGroupResponse
func (client *Client) DissociateProjectFromResourceGroup(request *DissociateProjectFromResourceGroupRequest) (_result *DissociateProjectFromResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DissociateProjectFromResourceGroupResponse{}
	_body, _err := client.DissociateProjectFromResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - EstablishRelationTableToBusinessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EstablishRelationTableToBusinessResponse
func (client *Client) EstablishRelationTableToBusinessWithOptions(request *EstablishRelationTableToBusinessRequest, runtime *util.RuntimeOptions) (_result *EstablishRelationTableToBusinessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessId)) {
		body["BusinessId"] = request.BusinessId
	}

	if !tea.BoolValue(util.IsUnset(request.FolderId)) {
		body["FolderId"] = request.FolderId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.TableGuid)) {
		body["TableGuid"] = request.TableGuid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("EstablishRelationTableToBusiness"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EstablishRelationTableToBusinessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - EstablishRelationTableToBusinessRequest
//
// @return EstablishRelationTableToBusinessResponse
func (client *Client) EstablishRelationTableToBusiness(request *EstablishRelationTableToBusinessRequest) (_result *EstablishRelationTableToBusinessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EstablishRelationTableToBusinessResponse{}
	_body, _err := client.EstablishRelationTableToBusinessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Executes a stage in a process.
//
// Description:
//
// >  The stages in a process are sequential. For more information, see the GetDeployment operation. Skipping or repeating a stage is not allowed.
//
// >  The execution of a stage is asynchronous. The response of this operation indicates only whether a stage is triggered but does not indicate whether the execution of the stage is successful. You can call the GetDeployment operation to check whether the execution is successful.
//
// @param request - ExecPipelineRunStageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExecPipelineRunStageResponse
func (client *Client) ExecPipelineRunStageWithOptions(request *ExecPipelineRunStageRequest, runtime *util.RuntimeOptions) (_result *ExecPipelineRunStageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Code)) {
		body["Code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExecPipelineRunStage"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExecPipelineRunStageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Executes a stage in a process.
//
// Description:
//
// >  The stages in a process are sequential. For more information, see the GetDeployment operation. Skipping or repeating a stage is not allowed.
//
// >  The execution of a stage is asynchronous. The response of this operation indicates only whether a stage is triggered but does not indicate whether the execution of the stage is successful. You can call the GetDeployment operation to check whether the execution is successful.
//
// @param request - ExecPipelineRunStageRequest
//
// @return ExecPipelineRunStageResponse
func (client *Client) ExecPipelineRunStage(request *ExecPipelineRunStageRequest) (_result *ExecPipelineRunStageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExecPipelineRunStageResponse{}
	_body, _err := client.ExecPipelineRunStageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create a temporary workflow instance based on configurations.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - ExecuteAdhocWorkflowInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExecuteAdhocWorkflowInstanceResponse
func (client *Client) ExecuteAdhocWorkflowInstanceWithOptions(tmpReq *ExecuteAdhocWorkflowInstanceRequest, runtime *util.RuntimeOptions) (_result *ExecuteAdhocWorkflowInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ExecuteAdhocWorkflowInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Tasks)) {
		request.TasksShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tasks, tea.String("Tasks"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizDate)) {
		body["BizDate"] = request.BizDate
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TasksShrink)) {
		body["Tasks"] = request.TasksShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExecuteAdhocWorkflowInstance"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExecuteAdhocWorkflowInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Create a temporary workflow instance based on configurations.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ExecuteAdhocWorkflowInstanceRequest
//
// @return ExecuteAdhocWorkflowInstanceResponse
func (client *Client) ExecuteAdhocWorkflowInstance(request *ExecuteAdhocWorkflowInstanceRequest) (_result *ExecuteAdhocWorkflowInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExecuteAdhocWorkflowInstanceResponse{}
	_body, _err := client.ExecuteAdhocWorkflowInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a custom alert monitoring rule.
//
// @param request - GetAlertRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAlertRuleResponse
func (client *Client) GetAlertRuleWithOptions(request *GetAlertRuleRequest, runtime *util.RuntimeOptions) (_result *GetAlertRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAlertRule"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAlertRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a custom alert monitoring rule.
//
// @param request - GetAlertRuleRequest
//
// @return GetAlertRuleResponse
func (client *Client) GetAlertRule(request *GetAlertRuleRequest) (_result *GetAlertRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAlertRuleResponse{}
	_body, _err := client.GetAlertRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetBusinessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetBusinessResponse
func (client *Client) GetBusinessWithOptions(request *GetBusinessRequest, runtime *util.RuntimeOptions) (_result *GetBusinessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessId)) {
		body["BusinessId"] = request.BusinessId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusiness"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetBusinessRequest
//
// @return GetBusinessResponse
func (client *Client) GetBusiness(request *GetBusinessRequest) (_result *GetBusinessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessResponse{}
	_body, _err := client.GetBusinessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取数据目录详情
//
// @param request - GetCatalogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCatalogResponse
func (client *Client) GetCatalogWithOptions(request *GetCatalogRequest, runtime *util.RuntimeOptions) (_result *GetCatalogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCatalog"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCatalogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取数据目录详情
//
// @param request - GetCatalogRequest
//
// @return GetCatalogResponse
func (client *Client) GetCatalog(request *GetCatalogRequest) (_result *GetCatalogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCatalogResponse{}
	_body, _err := client.GetCatalogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a certificate file.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M.
//
// @param request - GetCertificateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCertificateResponse
func (client *Client) GetCertificateWithOptions(request *GetCertificateRequest, runtime *util.RuntimeOptions) (_result *GetCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCertificate"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a certificate file.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M.
//
// @param request - GetCertificateRequest
//
// @return GetCertificateResponse
func (client *Client) GetCertificate(request *GetCertificateRequest) (_result *GetCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCertificateResponse{}
	_body, _err := client.GetCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取字段详情
//
// @param request - GetColumnRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetColumnResponse
func (client *Client) GetColumnWithOptions(request *GetColumnRequest, runtime *util.RuntimeOptions) (_result *GetColumnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetColumn"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetColumnResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取字段详情
//
// @param request - GetColumnRequest
//
// @return GetColumnResponse
func (client *Client) GetColumn(request *GetColumnRequest) (_result *GetColumnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetColumnResponse{}
	_body, _err := client.GetColumnWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the result of asynchronously creating a workflow instance.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetCreateWorkflowInstancesResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCreateWorkflowInstancesResultResponse
func (client *Client) GetCreateWorkflowInstancesResultWithOptions(request *GetCreateWorkflowInstancesResultRequest, runtime *util.RuntimeOptions) (_result *GetCreateWorkflowInstancesResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCreateWorkflowInstancesResult"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCreateWorkflowInstancesResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the result of asynchronously creating a workflow instance.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetCreateWorkflowInstancesResultRequest
//
// @return GetCreateWorkflowInstancesResultResponse
func (client *Client) GetCreateWorkflowInstancesResult(request *GetCreateWorkflowInstancesResultRequest) (_result *GetCreateWorkflowInstancesResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCreateWorkflowInstancesResultResponse{}
	_body, _err := client.GetCreateWorkflowInstancesResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetDIJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDIJobResponse
func (client *Client) GetDIJobWithOptions(request *GetDIJobRequest, runtime *util.RuntimeOptions) (_result *GetDIJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDIJob"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDIJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetDIJobRequest
//
// @return GetDIJobResponse
func (client *Client) GetDIJob(request *GetDIJobRequest) (_result *GetDIJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDIJobResponse{}
	_body, _err := client.GetDIJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains logs generated for a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetDIJobLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDIJobLogResponse
func (client *Client) GetDIJobLogWithOptions(request *GetDIJobLogRequest, runtime *util.RuntimeOptions) (_result *GetDIJobLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDIJobLog"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDIJobLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains logs generated for a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetDIJobLogRequest
//
// @return GetDIJobLogResponse
func (client *Client) GetDIJobLog(request *GetDIJobLogRequest) (_result *GetDIJobLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDIJobLogResponse{}
	_body, _err := client.GetDIJobLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a monitor.
//
// @param request - GetDataQualityEvaluationTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDataQualityEvaluationTaskResponse
func (client *Client) GetDataQualityEvaluationTaskWithOptions(request *GetDataQualityEvaluationTaskRequest, runtime *util.RuntimeOptions) (_result *GetDataQualityEvaluationTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataQualityEvaluationTask"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataQualityEvaluationTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a monitor.
//
// @param request - GetDataQualityEvaluationTaskRequest
//
// @return GetDataQualityEvaluationTaskResponse
func (client *Client) GetDataQualityEvaluationTask(request *GetDataQualityEvaluationTaskRequest) (_result *GetDataQualityEvaluationTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataQualityEvaluationTaskResponse{}
	_body, _err := client.GetDataQualityEvaluationTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a monitor instance.
//
// @param request - GetDataQualityEvaluationTaskInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDataQualityEvaluationTaskInstanceResponse
func (client *Client) GetDataQualityEvaluationTaskInstanceWithOptions(request *GetDataQualityEvaluationTaskInstanceRequest, runtime *util.RuntimeOptions) (_result *GetDataQualityEvaluationTaskInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataQualityEvaluationTaskInstance"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataQualityEvaluationTaskInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a monitor instance.
//
// @param request - GetDataQualityEvaluationTaskInstanceRequest
//
// @return GetDataQualityEvaluationTaskInstanceResponse
func (client *Client) GetDataQualityEvaluationTaskInstance(request *GetDataQualityEvaluationTaskInstanceRequest) (_result *GetDataQualityEvaluationTaskInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataQualityEvaluationTaskInstanceResponse{}
	_body, _err := client.GetDataQualityEvaluationTaskInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a data quality monitoring rule.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetDataQualityRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDataQualityRuleResponse
func (client *Client) GetDataQualityRuleWithOptions(request *GetDataQualityRuleRequest, runtime *util.RuntimeOptions) (_result *GetDataQualityRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataQualityRule"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataQualityRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a data quality monitoring rule.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetDataQualityRuleRequest
//
// @return GetDataQualityRuleResponse
func (client *Client) GetDataQualityRule(request *GetDataQualityRuleRequest) (_result *GetDataQualityRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataQualityRuleResponse{}
	_body, _err := client.GetDataQualityRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a data quality monitoring rule template.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetDataQualityRuleTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDataQualityRuleTemplateResponse
func (client *Client) GetDataQualityRuleTemplateWithOptions(request *GetDataQualityRuleTemplateRequest, runtime *util.RuntimeOptions) (_result *GetDataQualityRuleTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataQualityRuleTemplate"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataQualityRuleTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a data quality monitoring rule template.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetDataQualityRuleTemplateRequest
//
// @return GetDataQualityRuleTemplateResponse
func (client *Client) GetDataQualityRuleTemplate(request *GetDataQualityRuleTemplateRequest) (_result *GetDataQualityRuleTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataQualityRuleTemplateResponse{}
	_body, _err := client.GetDataQualityRuleTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a data source by ID.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Workspace Administrator, Deployment, Development, Project Owner, and O\\&M
//
// @param request - GetDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDataSourceResponse
func (client *Client) GetDataSourceWithOptions(request *GetDataSourceRequest, runtime *util.RuntimeOptions) (_result *GetDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataSource"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a data source by ID.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Workspace Administrator, Deployment, Development, Project Owner, and O\\&M
//
// @param request - GetDataSourceRequest
//
// @return GetDataSourceResponse
func (client *Client) GetDataSource(request *GetDataSourceRequest) (_result *GetDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataSourceResponse{}
	_body, _err := client.GetDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取数据库详情
//
// @param request - GetDatabaseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDatabaseResponse
func (client *Client) GetDatabaseWithOptions(request *GetDatabaseRequest, runtime *util.RuntimeOptions) (_result *GetDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDatabase"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDatabaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取数据库详情
//
// @param request - GetDatabaseRequest
//
// @return GetDatabaseResponse
func (client *Client) GetDatabase(request *GetDatabaseRequest) (_result *GetDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDatabaseResponse{}
	_body, _err := client.GetDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetDeploymentPackageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDeploymentPackageResponse
func (client *Client) GetDeploymentPackageWithOptions(request *GetDeploymentPackageRequest, runtime *util.RuntimeOptions) (_result *GetDeploymentPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeploymentId)) {
		body["DeploymentId"] = request.DeploymentId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDeploymentPackage"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDeploymentPackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetDeploymentPackageRequest
//
// @return GetDeploymentPackageResponse
func (client *Client) GetDeploymentPackage(request *GetDeploymentPackageRequest) (_result *GetDeploymentPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeploymentPackageResponse{}
	_body, _err := client.GetDeploymentPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a file.
//
// @param request - GetFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFileResponse
func (client *Client) GetFileWithOptions(request *GetFileRequest, runtime *util.RuntimeOptions) (_result *GetFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFile"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a file.
//
// @param request - GetFileRequest
//
// @return GetFileResponse
func (client *Client) GetFile(request *GetFileRequest) (_result *GetFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFileResponse{}
	_body, _err := client.GetFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a file version.
//
// @param request - GetFileVersionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFileVersionResponse
func (client *Client) GetFileVersionWithOptions(request *GetFileVersionRequest, runtime *util.RuntimeOptions) (_result *GetFileVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.FileVersion)) {
		body["FileVersion"] = request.FileVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFileVersion"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFileVersionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a file version.
//
// @param request - GetFileVersionRequest
//
// @return GetFileVersionResponse
func (client *Client) GetFileVersion(request *GetFileVersionRequest) (_result *GetFileVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFileVersionResponse{}
	_body, _err := client.GetFileVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetFolderRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFolderResponse
func (client *Client) GetFolderWithOptions(request *GetFolderRequest, runtime *util.RuntimeOptions) (_result *GetFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FolderId)) {
		body["FolderId"] = request.FolderId
	}

	if !tea.BoolValue(util.IsUnset(request.FolderPath)) {
		body["FolderPath"] = request.FolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFolder"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFolderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetFolderRequest
//
// @return GetFolderResponse
func (client *Client) GetFolder(request *GetFolderRequest) (_result *GetFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFolderResponse{}
	_body, _err := client.GetFolderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a user-defined function (UDF) in DataStudio.
//
// @param request - GetFunctionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFunctionResponse
func (client *Client) GetFunctionWithOptions(request *GetFunctionRequest, runtime *util.RuntimeOptions) (_result *GetFunctionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFunction"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFunctionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a user-defined function (UDF) in DataStudio.
//
// @param request - GetFunctionRequest
//
// @return GetFunctionResponse
func (client *Client) GetFunction(request *GetFunctionRequest) (_result *GetFunctionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFunctionResponse{}
	_body, _err := client.GetFunctionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the data snapshot of an extension point based on the ID of a message in DataWorks OpenEvent when the related extension point event is triggered.
//
// @param request - GetIDEEventDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetIDEEventDetailResponse
func (client *Client) GetIDEEventDetailWithOptions(request *GetIDEEventDetailRequest, runtime *util.RuntimeOptions) (_result *GetIDEEventDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MessageId)) {
		body["MessageId"] = request.MessageId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetIDEEventDetail"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetIDEEventDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the data snapshot of an extension point based on the ID of a message in DataWorks OpenEvent when the related extension point event is triggered.
//
// @param request - GetIDEEventDetailRequest
//
// @return GetIDEEventDetailResponse
func (client *Client) GetIDEEventDetail(request *GetIDEEventDetailRequest) (_result *GetIDEEventDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetIDEEventDetailResponse{}
	_body, _err := client.GetIDEEventDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the status information of an asynchronous task. After you call an asynchronous operation, an asynchronous task is generated. You can call the GetJobStatus operation to query the status of the asynchronous task.
//
// @param request - GetJobStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetJobStatusResponse
func (client *Client) GetJobStatusWithOptions(request *GetJobStatusRequest, runtime *util.RuntimeOptions) (_result *GetJobStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetJobStatus"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetJobStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status information of an asynchronous task. After you call an asynchronous operation, an asynchronous task is generated. You can call the GetJobStatus operation to query the status of the asynchronous task.
//
// @param request - GetJobStatusRequest
//
// @return GetJobStatusResponse
func (client *Client) GetJobStatus(request *GetJobStatusRequest) (_result *GetJobStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetJobStatusResponse{}
	_body, _err := client.GetJobStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取血缘关系详情
//
// @param request - GetLineageRelationshipRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLineageRelationshipResponse
func (client *Client) GetLineageRelationshipWithOptions(request *GetLineageRelationshipRequest, runtime *util.RuntimeOptions) (_result *GetLineageRelationshipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLineageRelationship"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLineageRelationshipResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取血缘关系详情
//
// @param request - GetLineageRelationshipRequest
//
// @return GetLineageRelationshipResponse
func (client *Client) GetLineageRelationship(request *GetLineageRelationshipRequest) (_result *GetLineageRelationshipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLineageRelationshipResponse{}
	_body, _err := client.GetLineageRelationshipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 请求collection详情
//
// @param request - GetMetaCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMetaCollectionResponse
func (client *Client) GetMetaCollectionWithOptions(request *GetMetaCollectionRequest, runtime *util.RuntimeOptions) (_result *GetMetaCollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetaCollection"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetaCollectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 请求collection详情
//
// @param request - GetMetaCollectionRequest
//
// @return GetMetaCollectionResponse
func (client *Client) GetMetaCollection(request *GetMetaCollectionRequest) (_result *GetMetaCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetaCollectionResponse{}
	_body, _err := client.GetMetaCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a network resource.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetNetworkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetNetworkResponse
func (client *Client) GetNetworkWithOptions(request *GetNetworkRequest, runtime *util.RuntimeOptions) (_result *GetNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNetwork"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNetworkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a network resource.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetNetworkRequest
//
// @return GetNetworkResponse
func (client *Client) GetNetwork(request *GetNetworkRequest) (_result *GetNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNetworkResponse{}
	_body, _err := client.GetNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a node in DataStudio.
//
// @param request - GetNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetNodeResponse
func (client *Client) GetNodeWithOptions(request *GetNodeRequest, runtime *util.RuntimeOptions) (_result *GetNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNode"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a node in DataStudio.
//
// @param request - GetNodeRequest
//
// @return GetNodeResponse
func (client *Client) GetNode(request *GetNodeRequest) (_result *GetNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNodeResponse{}
	_body, _err := client.GetNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取数据表的分区详情
//
// @param request - GetPartitionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPartitionResponse
func (client *Client) GetPartitionWithOptions(request *GetPartitionRequest, runtime *util.RuntimeOptions) (_result *GetPartitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPartition"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPartitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取数据表的分区详情
//
// @param request - GetPartitionRequest
//
// @return GetPartitionResponse
func (client *Client) GetPartition(request *GetPartitionRequest) (_result *GetPartitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPartitionResponse{}
	_body, _err := client.GetPartitionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a process for deploying or undeploying an entity.
//
// @param request - GetPipelineRunRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPipelineRunResponse
func (client *Client) GetPipelineRunWithOptions(request *GetPipelineRunRequest, runtime *util.RuntimeOptions) (_result *GetPipelineRunResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPipelineRun"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPipelineRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a process for deploying or undeploying an entity.
//
// @param request - GetPipelineRunRequest
//
// @return GetPipelineRunResponse
func (client *Client) GetPipelineRun(request *GetPipelineRunRequest) (_result *GetPipelineRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPipelineRunResponse{}
	_body, _err := client.GetPipelineRunWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a DataWorks workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetProjectResponse
func (client *Client) GetProjectWithOptions(request *GetProjectRequest, runtime *util.RuntimeOptions) (_result *GetProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetProject"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a DataWorks workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetProjectRequest
//
// @return GetProjectResponse
func (client *Client) GetProject(request *GetProjectRequest) (_result *GetProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetProjectResponse{}
	_body, _err := client.GetProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details about a member in a workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetProjectMemberRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetProjectMemberResponse
func (client *Client) GetProjectMemberWithOptions(request *GetProjectMemberRequest, runtime *util.RuntimeOptions) (_result *GetProjectMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetProjectMember"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProjectMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about a member in a workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetProjectMemberRequest
//
// @return GetProjectMemberResponse
func (client *Client) GetProjectMember(request *GetProjectMemberRequest) (_result *GetProjectMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetProjectMemberResponse{}
	_body, _err := client.GetProjectMemberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a role in a DataWorks workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetProjectRoleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetProjectRoleResponse
func (client *Client) GetProjectRoleWithOptions(request *GetProjectRoleRequest, runtime *util.RuntimeOptions) (_result *GetProjectRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Code)) {
		query["Code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetProjectRole"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProjectRoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a role in a DataWorks workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetProjectRoleRequest
//
// @return GetProjectRoleResponse
func (client *Client) GetProjectRole(request *GetProjectRoleRequest) (_result *GetProjectRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetProjectRoleResponse{}
	_body, _err := client.GetProjectRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询异步重跑工作流实例的结果
//
// @param request - GetRerunWorkflowInstancesResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRerunWorkflowInstancesResultResponse
func (client *Client) GetRerunWorkflowInstancesResultWithOptions(request *GetRerunWorkflowInstancesResultRequest, runtime *util.RuntimeOptions) (_result *GetRerunWorkflowInstancesResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperationId)) {
		query["OperationId"] = request.OperationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRerunWorkflowInstancesResult"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRerunWorkflowInstancesResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询异步重跑工作流实例的结果
//
// @param request - GetRerunWorkflowInstancesResultRequest
//
// @return GetRerunWorkflowInstancesResultResponse
func (client *Client) GetRerunWorkflowInstancesResult(request *GetRerunWorkflowInstancesResultRequest) (_result *GetRerunWorkflowInstancesResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRerunWorkflowInstancesResultResponse{}
	_body, _err := client.GetRerunWorkflowInstancesResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a file resource.
//
// @param request - GetResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetResourceResponse
func (client *Client) GetResourceWithOptions(request *GetResourceRequest, runtime *util.RuntimeOptions) (_result *GetResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetResource"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a file resource.
//
// @param request - GetResourceRequest
//
// @return GetResourceResponse
func (client *Client) GetResource(request *GetResourceRequest) (_result *GetResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetResourceResponse{}
	_body, _err := client.GetResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a resource group based on its ID.
//
// Description:
//
// You can use this API operation only in DataWorks Basic Edition or an advanced edition.
//
// @param request - GetResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetResourceGroupResponse
func (client *Client) GetResourceGroupWithOptions(request *GetResourceGroupRequest, runtime *util.RuntimeOptions) (_result *GetResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetResourceGroup"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a resource group based on its ID.
//
// Description:
//
// You can use this API operation only in DataWorks Basic Edition or an advanced edition.
//
// @param request - GetResourceGroupRequest
//
// @return GetResourceGroupResponse
func (client *Client) GetResourceGroup(request *GetResourceGroupRequest) (_result *GetResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetResourceGroupResponse{}
	_body, _err := client.GetResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a route based on its ID.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetRouteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRouteResponse
func (client *Client) GetRouteWithOptions(request *GetRouteRequest, runtime *util.RuntimeOptions) (_result *GetRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRoute"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a route based on its ID.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetRouteRequest
//
// @return GetRouteResponse
func (client *Client) GetRoute(request *GetRouteRequest) (_result *GetRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRouteResponse{}
	_body, _err := client.GetRouteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a schema in Data Map. You can call this API operation to query the information only about MaxCompute and Hologres schemas.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this API operation to query the information only about MaxCompute and Hologres schemas.
//
// @param request - GetSchemaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSchemaResponse
func (client *Client) GetSchemaWithOptions(request *GetSchemaRequest, runtime *util.RuntimeOptions) (_result *GetSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSchema"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSchemaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a schema in Data Map. You can call this API operation to query the information only about MaxCompute and Hologres schemas.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this API operation to query the information only about MaxCompute and Hologres schemas.
//
// @param request - GetSchemaRequest
//
// @return GetSchemaResponse
func (client *Client) GetSchema(request *GetSchemaRequest) (_result *GetSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSchemaResponse{}
	_body, _err := client.GetSchemaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取表详情
//
// @param request - GetTableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTableResponse
func (client *Client) GetTableWithOptions(request *GetTableRequest, runtime *util.RuntimeOptions) (_result *GetTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTable"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取表详情
//
// @param request - GetTableRequest
//
// @return GetTableResponse
func (client *Client) GetTable(request *GetTableRequest) (_result *GetTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTableResponse{}
	_body, _err := client.GetTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a task.
//
// @param request - GetTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTaskResponse
func (client *Client) GetTaskWithOptions(request *GetTaskRequest, runtime *util.RuntimeOptions) (_result *GetTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTask"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a task.
//
// @param request - GetTaskRequest
//
// @return GetTaskResponse
func (client *Client) GetTask(request *GetTaskRequest) (_result *GetTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTaskResponse{}
	_body, _err := client.GetTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about an instance.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetTaskInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTaskInstanceResponse
func (client *Client) GetTaskInstanceWithOptions(request *GetTaskInstanceRequest, runtime *util.RuntimeOptions) (_result *GetTaskInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTaskInstance"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTaskInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about an instance.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetTaskInstanceRequest
//
// @return GetTaskInstanceResponse
func (client *Client) GetTaskInstance(request *GetTaskInstanceRequest) (_result *GetTaskInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTaskInstanceResponse{}
	_body, _err := client.GetTaskInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the run log generated during a specific run of an instance.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetTaskInstanceLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTaskInstanceLogResponse
func (client *Client) GetTaskInstanceLogWithOptions(request *GetTaskInstanceLogRequest, runtime *util.RuntimeOptions) (_result *GetTaskInstanceLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTaskInstanceLog"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTaskInstanceLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the run log generated during a specific run of an instance.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetTaskInstanceLogRequest
//
// @return GetTaskInstanceLogResponse
func (client *Client) GetTaskInstanceLog(request *GetTaskInstanceLogRequest) (_result *GetTaskInstanceLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTaskInstanceLogResponse{}
	_body, _err := client.GetTaskInstanceLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a workflow.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetWorkflowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkflowResponse
func (client *Client) GetWorkflowWithOptions(request *GetWorkflowRequest, runtime *util.RuntimeOptions) (_result *GetWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkflow"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkflowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a workflow.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetWorkflowRequest
//
// @return GetWorkflowResponse
func (client *Client) GetWorkflow(request *GetWorkflowRequest) (_result *GetWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetWorkflowResponse{}
	_body, _err := client.GetWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a workflow.
//
// @param request - GetWorkflowDefinitionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkflowDefinitionResponse
func (client *Client) GetWorkflowDefinitionWithOptions(request *GetWorkflowDefinitionRequest, runtime *util.RuntimeOptions) (_result *GetWorkflowDefinitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkflowDefinition"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkflowDefinitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a workflow.
//
// @param request - GetWorkflowDefinitionRequest
//
// @return GetWorkflowDefinitionResponse
func (client *Client) GetWorkflowDefinition(request *GetWorkflowDefinitionRequest) (_result *GetWorkflowDefinitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetWorkflowDefinitionResponse{}
	_body, _err := client.GetWorkflowDefinitionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a workflow instance.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetWorkflowInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkflowInstanceResponse
func (client *Client) GetWorkflowInstanceWithOptions(request *GetWorkflowInstanceRequest, runtime *util.RuntimeOptions) (_result *GetWorkflowInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkflowInstance"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkflowInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a workflow instance.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GetWorkflowInstanceRequest
//
// @return GetWorkflowInstanceResponse
func (client *Client) GetWorkflowInstance(request *GetWorkflowInstanceRequest) (_result *GetWorkflowInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetWorkflowInstanceResponse{}
	_body, _err := client.GetWorkflowInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Assigns roles to members in a workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - GrantMemberProjectRolesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GrantMemberProjectRolesResponse
func (client *Client) GrantMemberProjectRolesWithOptions(tmpReq *GrantMemberProjectRolesRequest, runtime *util.RuntimeOptions) (_result *GrantMemberProjectRolesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GrantMemberProjectRolesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RoleCodes)) {
		request.RoleCodesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RoleCodes, tea.String("RoleCodes"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleCodesShrink)) {
		body["RoleCodes"] = request.RoleCodesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GrantMemberProjectRoles"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GrantMemberProjectRolesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Assigns roles to members in a workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - GrantMemberProjectRolesRequest
//
// @return GrantMemberProjectRolesResponse
func (client *Client) GrantMemberProjectRoles(request *GrantMemberProjectRolesRequest) (_result *GrantMemberProjectRolesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GrantMemberProjectRolesResponse{}
	_body, _err := client.GrantMemberProjectRolesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Imports a certificate file.
//
// @param request - ImportCertificateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportCertificateResponse
func (client *Client) ImportCertificateWithOptions(request *ImportCertificateRequest, runtime *util.RuntimeOptions) (_result *ImportCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CertificateFile)) {
		query["CertificateFile"] = request.CertificateFile
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportCertificate"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Imports a certificate file.
//
// @param request - ImportCertificateRequest
//
// @return ImportCertificateResponse
func (client *Client) ImportCertificate(request *ImportCertificateRequest) (_result *ImportCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportCertificateResponse{}
	_body, _err := client.ImportCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportCertificateAdvance(request *ImportCertificateAdvanceRequest, runtime *util.RuntimeOptions) (_result *ImportCertificateResponse, _err error) {
	// Step 0: init client
	accessKeyId, _err := client.Credential.GetAccessKeyId()
	if _err != nil {
		return _result, _err
	}

	accessKeySecret, _err := client.Credential.GetAccessKeySecret()
	if _err != nil {
		return _result, _err
	}

	securityToken, _err := client.Credential.GetSecurityToken()
	if _err != nil {
		return _result, _err
	}

	credentialType := client.Credential.GetType()
	openPlatformEndpoint := client.OpenPlatformEndpoint
	if tea.BoolValue(util.Empty(openPlatformEndpoint)) {
		openPlatformEndpoint = tea.String("openplatform.aliyuncs.com")
	}

	if tea.BoolValue(util.IsUnset(credentialType)) {
		credentialType = tea.String("access_key")
	}

	authConfig := &openapi.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		SecurityToken:   securityToken,
		Type:            credentialType,
		Endpoint:        openPlatformEndpoint,
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	authClient, _err := openplatform.NewClient(authConfig)
	if _err != nil {
		return _result, _err
	}

	authRequest := &openplatform.AuthorizeFileUploadRequest{
		Product:  tea.String("dataworks-public"),
		RegionId: client.RegionId,
	}
	authResponse := &openplatform.AuthorizeFileUploadResponse{}
	ossConfig := &oss.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		Type:            tea.String("access_key"),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	ossClient, _err := oss.NewClient(ossConfig)
	if _err != nil {
		return _result, _err
	}

	fileObj := &fileform.FileField{}
	ossHeader := &oss.PostObjectRequestHeader{}
	uploadRequest := &oss.PostObjectRequest{}
	ossRuntime := &ossutil.RuntimeOptions{}
	openapiutil.Convert(runtime, ossRuntime)
	importCertificateReq := &ImportCertificateRequest{}
	openapiutil.Convert(request, importCertificateReq)
	if !tea.BoolValue(util.IsUnset(request.CertificateFileObject)) {
		authResponse, _err = authClient.AuthorizeFileUploadWithOptions(authRequest, runtime)
		if _err != nil {
			return _result, _err
		}

		ossConfig.AccessKeyId = authResponse.Body.AccessKeyId
		ossConfig.Endpoint = openapiutil.GetEndpoint(authResponse.Body.Endpoint, authResponse.Body.UseAccelerate, client.EndpointType)
		ossClient, _err = oss.NewClient(ossConfig)
		if _err != nil {
			return _result, _err
		}

		fileObj = &fileform.FileField{
			Filename:    authResponse.Body.ObjectKey,
			Content:     request.CertificateFileObject,
			ContentType: tea.String(""),
		}
		ossHeader = &oss.PostObjectRequestHeader{
			AccessKeyId:         authResponse.Body.AccessKeyId,
			Policy:              authResponse.Body.EncodedPolicy,
			Signature:           authResponse.Body.Signature,
			Key:                 authResponse.Body.ObjectKey,
			File:                fileObj,
			SuccessActionStatus: tea.String("201"),
		}
		uploadRequest = &oss.PostObjectRequest{
			BucketName: authResponse.Body.Bucket,
			Header:     ossHeader,
		}
		_, _err = ossClient.PostObject(uploadRequest, ossRuntime)
		if _err != nil {
			return _result, _err
		}
		importCertificateReq.CertificateFile = tea.String("http://" + tea.StringValue(authResponse.Body.Bucket) + "." + tea.StringValue(authResponse.Body.Endpoint) + "/" + tea.StringValue(authResponse.Body.ObjectKey))
	}

	importCertificateResp, _err := client.ImportCertificateWithOptions(importCertificateReq, runtime)
	if _err != nil {
		return _result, _err
	}

	_result = importCertificateResp
	return _result, _err
}

// Summary:
//
// Imports a workflow and its child nodes that are specified by the FlowSpec field to DataStudio.
//
// Description:
//
// >
//
//   - You cannot use this API operation to import multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system imports only the first specified workflow.
//
//   - ImportWorkflowDefinition is an asynchronous operation. After you send a request, an asynchronous task is generated, and the system returns the ID of the asynchronous task. You can call the GetJobStatus operation to query the status of the asynchronous task.
//
// @param request - ImportWorkflowDefinitionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportWorkflowDefinitionResponse
func (client *Client) ImportWorkflowDefinitionWithOptions(request *ImportWorkflowDefinitionRequest, runtime *util.RuntimeOptions) (_result *ImportWorkflowDefinitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		body["Spec"] = request.Spec
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportWorkflowDefinition"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportWorkflowDefinitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Imports a workflow and its child nodes that are specified by the FlowSpec field to DataStudio.
//
// Description:
//
// >
//
//   - You cannot use this API operation to import multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system imports only the first specified workflow.
//
//   - ImportWorkflowDefinition is an asynchronous operation. After you send a request, an asynchronous task is generated, and the system returns the ID of the asynchronous task. You can call the GetJobStatus operation to query the status of the asynchronous task.
//
// @param request - ImportWorkflowDefinitionRequest
//
// @return ImportWorkflowDefinitionResponse
func (client *Client) ImportWorkflowDefinition(request *ImportWorkflowDefinitionRequest) (_result *ImportWorkflowDefinitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportWorkflowDefinitionResponse{}
	_body, _err := client.ImportWorkflowDefinitionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of custom monitoring alert rules.
//
// @param tmpReq - ListAlertRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAlertRulesResponse
func (client *Client) ListAlertRulesWithOptions(tmpReq *ListAlertRulesRequest, runtime *util.RuntimeOptions) (_result *ListAlertRulesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListAlertRulesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TaskIds)) {
		request.TaskIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TaskIds, tea.String("TaskIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Types)) {
		request.TypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Types, tea.String("Types"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		query["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Receiver)) {
		query["Receiver"] = request.Receiver
	}

	if !tea.BoolValue(util.IsUnset(request.TaskIdsShrink)) {
		query["TaskIds"] = request.TaskIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TypesShrink)) {
		query["Types"] = request.TypesShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAlertRules"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAlertRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of custom monitoring alert rules.
//
// @param request - ListAlertRulesRequest
//
// @return ListAlertRulesResponse
func (client *Client) ListAlertRules(request *ListAlertRulesRequest) (_result *ListAlertRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAlertRulesResponse{}
	_body, _err := client.ListAlertRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListBusinessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListBusinessResponse
func (client *Client) ListBusinessWithOptions(request *ListBusinessRequest, runtime *util.RuntimeOptions) (_result *ListBusinessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListBusiness"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListBusinessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListBusinessRequest
//
// @return ListBusinessResponse
func (client *Client) ListBusiness(request *ListBusinessRequest) (_result *ListBusinessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBusinessResponse{}
	_body, _err := client.ListBusinessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询数据目录列表
//
// @param tmpReq - ListCatalogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCatalogsResponse
func (client *Client) ListCatalogsWithOptions(tmpReq *ListCatalogsRequest, runtime *util.RuntimeOptions) (_result *ListCatalogsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListCatalogsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Types)) {
		request.TypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Types, tea.String("Types"), tea.String("simple"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCatalogs"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCatalogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询数据目录列表
//
// @param request - ListCatalogsRequest
//
// @return ListCatalogsResponse
func (client *Client) ListCatalogs(request *ListCatalogsRequest) (_result *ListCatalogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCatalogsResponse{}
	_body, _err := client.ListCatalogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of certificate files.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator.
//
// @param request - ListCertificatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCertificatesResponse
func (client *Client) ListCertificatesWithOptions(request *ListCertificatesRequest, runtime *util.RuntimeOptions) (_result *ListCertificatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCertificates"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCertificatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of certificate files.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator.
//
// @param request - ListCertificatesRequest
//
// @return ListCertificatesResponse
func (client *Client) ListCertificates(request *ListCertificatesRequest) (_result *ListCertificatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCertificatesResponse{}
	_body, _err := client.ListCertificatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询字段列表
//
// @param request - ListColumnsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListColumnsResponse
func (client *Client) ListColumnsWithOptions(request *ListColumnsRequest, runtime *util.RuntimeOptions) (_result *ListColumnsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListColumns"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListColumnsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询字段列表
//
// @param request - ListColumnsRequest
//
// @return ListColumnsResponse
func (client *Client) ListColumns(request *ListColumnsRequest) (_result *ListColumnsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListColumnsResponse{}
	_body, _err := client.ListColumnsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询元数据采集器类型列表
//
// @param request - ListCrawlerTypesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCrawlerTypesResponse
func (client *Client) ListCrawlerTypesWithOptions(runtime *util.RuntimeOptions) (_result *ListCrawlerTypesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListCrawlerTypes"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCrawlerTypesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询元数据采集器类型列表
//
// @return ListCrawlerTypesResponse
func (client *Client) ListCrawlerTypes() (_result *ListCrawlerTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCrawlerTypesResponse{}
	_body, _err := client.ListCrawlerTypesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Views alert rules configured for a synchronization task.
//
// @param request - ListDIAlarmRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDIAlarmRulesResponse
func (client *Client) ListDIAlarmRulesWithOptions(request *ListDIAlarmRulesRequest, runtime *util.RuntimeOptions) (_result *ListDIAlarmRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDIAlarmRules"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDIAlarmRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Views alert rules configured for a synchronization task.
//
// @param request - ListDIAlarmRulesRequest
//
// @return ListDIAlarmRulesResponse
func (client *Client) ListDIAlarmRules(request *ListDIAlarmRulesRequest) (_result *ListDIAlarmRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDIAlarmRulesResponse{}
	_body, _err := client.ListDIAlarmRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries events for a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDIJobEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDIJobEventsResponse
func (client *Client) ListDIJobEventsWithOptions(request *ListDIJobEventsRequest, runtime *util.RuntimeOptions) (_result *ListDIJobEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDIJobEvents"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDIJobEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries events for a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDIJobEventsRequest
//
// @return ListDIJobEventsResponse
func (client *Client) ListDIJobEvents(request *ListDIJobEventsRequest) (_result *ListDIJobEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDIJobEventsResponse{}
	_body, _err := client.ListDIJobEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries metrics for a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - ListDIJobMetricsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDIJobMetricsResponse
func (client *Client) ListDIJobMetricsWithOptions(tmpReq *ListDIJobMetricsRequest, runtime *util.RuntimeOptions) (_result *ListDIJobMetricsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListDIJobMetricsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.MetricName)) {
		request.MetricNameShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MetricName, tea.String("MetricName"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDIJobMetrics"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDIJobMetricsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries metrics for a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDIJobMetricsRequest
//
// @return ListDIJobMetricsResponse
func (client *Client) ListDIJobMetrics(request *ListDIJobMetricsRequest) (_result *ListDIJobMetricsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDIJobMetricsResponse{}
	_body, _err := client.ListDIJobMetricsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the running information about a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDIJobRunDetailsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDIJobRunDetailsResponse
func (client *Client) ListDIJobRunDetailsWithOptions(request *ListDIJobRunDetailsRequest, runtime *util.RuntimeOptions) (_result *ListDIJobRunDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDIJobRunDetails"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDIJobRunDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the running information about a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDIJobRunDetailsRequest
//
// @return ListDIJobRunDetailsResponse
func (client *Client) ListDIJobRunDetails(request *ListDIJobRunDetailsRequest) (_result *ListDIJobRunDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDIJobRunDetailsResponse{}
	_body, _err := client.ListDIJobRunDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of new-version synchronization tasks in Data Integration. A new-version synchronization task can be a real-time synchronization task used to synchronize full or incremental data in a database, a batch synchronization task used to synchronize full or incremental data in a database, or a real-time synchronization task used to synchronize incremental data in a single table.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDIJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDIJobsResponse
func (client *Client) ListDIJobsWithOptions(request *ListDIJobsRequest, runtime *util.RuntimeOptions) (_result *ListDIJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDIJobs"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDIJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of new-version synchronization tasks in Data Integration. A new-version synchronization task can be a real-time synchronization task used to synchronize full or incremental data in a database, a batch synchronization task used to synchronize full or incremental data in a database, or a real-time synchronization task used to synchronize incremental data in a single table.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDIJobsRequest
//
// @return ListDIJobsResponse
func (client *Client) ListDIJobs(request *ListDIJobsRequest) (_result *ListDIJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDIJobsResponse{}
	_body, _err := client.ListDIJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of tags.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param request - ListDataAssetTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDataAssetTagsResponse
func (client *Client) ListDataAssetTagsWithOptions(request *ListDataAssetTagsRequest, runtime *util.RuntimeOptions) (_result *ListDataAssetTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataAssetTags"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataAssetTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of tags.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param request - ListDataAssetTagsRequest
//
// @return ListDataAssetTagsResponse
func (client *Client) ListDataAssetTags(request *ListDataAssetTagsRequest) (_result *ListDataAssetTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataAssetTagsResponse{}
	_body, _err := client.ListDataAssetTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about DataWorks data assets to which tags are added by page.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param tmpReq - ListDataAssetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDataAssetsResponse
func (client *Client) ListDataAssetsWithOptions(tmpReq *ListDataAssetsRequest, runtime *util.RuntimeOptions) (_result *ListDataAssetsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListDataAssetsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DataAssetIds)) {
		request.DataAssetIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DataAssetIds, tea.String("DataAssetIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Tags)) {
		request.TagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tags, tea.String("Tags"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataAssets"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataAssetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about DataWorks data assets to which tags are added by page.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param request - ListDataAssetsRequest
//
// @return ListDataAssetsResponse
func (client *Client) ListDataAssets(request *ListDataAssetsRequest) (_result *ListDataAssetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataAssetsResponse{}
	_body, _err := client.ListDataAssetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of instances generated by a data quality monitoring task by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDataQualityEvaluationTaskInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDataQualityEvaluationTaskInstancesResponse
func (client *Client) ListDataQualityEvaluationTaskInstancesWithOptions(request *ListDataQualityEvaluationTaskInstancesRequest, runtime *util.RuntimeOptions) (_result *ListDataQualityEvaluationTaskInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataQualityEvaluationTaskInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataQualityEvaluationTaskInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of instances generated by a data quality monitoring task by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDataQualityEvaluationTaskInstancesRequest
//
// @return ListDataQualityEvaluationTaskInstancesResponse
func (client *Client) ListDataQualityEvaluationTaskInstances(request *ListDataQualityEvaluationTaskInstancesRequest) (_result *ListDataQualityEvaluationTaskInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataQualityEvaluationTaskInstancesResponse{}
	_body, _err := client.ListDataQualityEvaluationTaskInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of data quality monitoring tasks by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDataQualityEvaluationTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDataQualityEvaluationTasksResponse
func (client *Client) ListDataQualityEvaluationTasksWithOptions(request *ListDataQualityEvaluationTasksRequest, runtime *util.RuntimeOptions) (_result *ListDataQualityEvaluationTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataQualityEvaluationTasks"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataQualityEvaluationTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of data quality monitoring tasks by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDataQualityEvaluationTasksRequest
//
// @return ListDataQualityEvaluationTasksResponse
func (client *Client) ListDataQualityEvaluationTasks(request *ListDataQualityEvaluationTasksRequest) (_result *ListDataQualityEvaluationTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataQualityEvaluationTasksResponse{}
	_body, _err := client.ListDataQualityEvaluationTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDataQualityResultsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDataQualityResultsResponse
func (client *Client) ListDataQualityResultsWithOptions(request *ListDataQualityResultsRequest, runtime *util.RuntimeOptions) (_result *ListDataQualityResultsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataQualityResults"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataQualityResultsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDataQualityResultsRequest
//
// @return ListDataQualityResultsResponse
func (client *Client) ListDataQualityResults(request *ListDataQualityResultsRequest) (_result *ListDataQualityResultsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataQualityResultsResponse{}
	_body, _err := client.ListDataQualityResultsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of data quality monitoring rule templates.
//
// @param request - ListDataQualityRuleTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDataQualityRuleTemplatesResponse
func (client *Client) ListDataQualityRuleTemplatesWithOptions(request *ListDataQualityRuleTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListDataQualityRuleTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataQualityRuleTemplates"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataQualityRuleTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of data quality monitoring rule templates.
//
// @param request - ListDataQualityRuleTemplatesRequest
//
// @return ListDataQualityRuleTemplatesResponse
func (client *Client) ListDataQualityRuleTemplates(request *ListDataQualityRuleTemplatesRequest) (_result *ListDataQualityRuleTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataQualityRuleTemplatesResponse{}
	_body, _err := client.ListDataQualityRuleTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of data quality monitoring rules by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDataQualityRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDataQualityRulesResponse
func (client *Client) ListDataQualityRulesWithOptions(request *ListDataQualityRulesRequest, runtime *util.RuntimeOptions) (_result *ListDataQualityRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataQualityRules"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataQualityRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of data quality monitoring rules by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDataQualityRulesRequest
//
// @return ListDataQualityRulesResponse
func (client *Client) ListDataQualityRules(request *ListDataQualityRulesRequest) (_result *ListDataQualityRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataQualityRulesResponse{}
	_body, _err := client.ListDataQualityRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of sharing rules of a data source.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  If you want to query the sharing rules of a data source that is associated with Workspace A, you must have the permissions to share the data source in Workspace A. You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
//
// @param request - ListDataSourceSharedRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDataSourceSharedRulesResponse
func (client *Client) ListDataSourceSharedRulesWithOptions(request *ListDataSourceSharedRulesRequest, runtime *util.RuntimeOptions) (_result *ListDataSourceSharedRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataSourceSharedRules"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataSourceSharedRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of sharing rules of a data source.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  If you want to query the sharing rules of a data source that is associated with Workspace A, you must have the permissions to share the data source in Workspace A. You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
//
// @param request - ListDataSourceSharedRulesRequest
//
// @return ListDataSourceSharedRulesResponse
func (client *Client) ListDataSourceSharedRules(request *ListDataSourceSharedRulesRequest) (_result *ListDataSourceSharedRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataSourceSharedRulesResponse{}
	_body, _err := client.ListDataSourceSharedRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of data sources based on the business information of data sources.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator
//
// @param tmpReq - ListDataSourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDataSourcesResponse
func (client *Client) ListDataSourcesWithOptions(tmpReq *ListDataSourcesRequest, runtime *util.RuntimeOptions) (_result *ListDataSourcesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListDataSourcesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Types)) {
		request.TypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Types, tea.String("Types"), tea.String("simple"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDataSources"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDataSourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of data sources based on the business information of data sources.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator
//
// @param request - ListDataSourcesRequest
//
// @return ListDataSourcesResponse
func (client *Client) ListDataSources(request *ListDataSourcesRequest) (_result *ListDataSourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataSourcesResponse{}
	_body, _err := client.ListDataSourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询数据库列表
//
// @param request - ListDatabasesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDatabasesResponse
func (client *Client) ListDatabasesWithOptions(request *ListDatabasesRequest, runtime *util.RuntimeOptions) (_result *ListDatabasesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDatabases"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDatabasesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询数据库列表
//
// @param request - ListDatabasesRequest
//
// @return ListDatabasesResponse
func (client *Client) ListDatabases(request *ListDatabasesRequest) (_result *ListDatabasesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDatabasesResponse{}
	_body, _err := client.ListDatabasesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of versions of files to be deployed.
//
// @param tmpReq - ListDeploymentPackageFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDeploymentPackageFilesResponse
func (client *Client) ListDeploymentPackageFilesWithOptions(tmpReq *ListDeploymentPackageFilesRequest, runtime *util.RuntimeOptions) (_result *ListDeploymentPackageFilesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListDeploymentPackageFilesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.FileIds)) {
		request.FileIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FileIds, tea.String("FileIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessId)) {
		query["BusinessId"] = request.BusinessId
	}

	if !tea.BoolValue(util.IsUnset(request.ChangeType)) {
		query["ChangeType"] = request.ChangeType
	}

	if !tea.BoolValue(util.IsUnset(request.CommitFrom)) {
		query["CommitFrom"] = request.CommitFrom
	}

	if !tea.BoolValue(util.IsUnset(request.CommitTo)) {
		query["CommitTo"] = request.CommitTo
	}

	if !tea.BoolValue(util.IsUnset(request.CommitUserId)) {
		query["CommitUserId"] = request.CommitUserId
	}

	if !tea.BoolValue(util.IsUnset(request.FileIdsShrink)) {
		query["FileIds"] = request.FileIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FileType)) {
		query["FileType"] = request.FileType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SolutionId)) {
		query["SolutionId"] = request.SolutionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDeploymentPackageFiles"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDeploymentPackageFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of versions of files to be deployed.
//
// @param request - ListDeploymentPackageFilesRequest
//
// @return ListDeploymentPackageFilesResponse
func (client *Client) ListDeploymentPackageFiles(request *ListDeploymentPackageFilesRequest) (_result *ListDeploymentPackageFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDeploymentPackageFilesResponse{}
	_body, _err := client.ListDeploymentPackageFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询发布包列表
//
// @param request - ListDeploymentPackagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDeploymentPackagesResponse
func (client *Client) ListDeploymentPackagesWithOptions(request *ListDeploymentPackagesRequest, runtime *util.RuntimeOptions) (_result *ListDeploymentPackagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Creator)) {
		body["Creator"] = request.Creator
	}

	if !tea.BoolValue(util.IsUnset(request.EndCreateTime)) {
		body["EndCreateTime"] = request.EndCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndExecuteTime)) {
		body["EndExecuteTime"] = request.EndExecuteTime
	}

	if !tea.BoolValue(util.IsUnset(request.Executor)) {
		body["Executor"] = request.Executor
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDeploymentPackages"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDeploymentPackagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询发布包列表
//
// @param request - ListDeploymentPackagesRequest
//
// @return ListDeploymentPackagesResponse
func (client *Client) ListDeploymentPackages(request *ListDeploymentPackagesRequest) (_result *ListDeploymentPackagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDeploymentPackagesResponse{}
	_body, _err := client.ListDeploymentPackagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of descendant instances of an instance by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDownstreamTaskInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDownstreamTaskInstancesResponse
func (client *Client) ListDownstreamTaskInstancesWithOptions(request *ListDownstreamTaskInstancesRequest, runtime *util.RuntimeOptions) (_result *ListDownstreamTaskInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDownstreamTaskInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDownstreamTaskInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of descendant instances of an instance by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListDownstreamTaskInstancesRequest
//
// @return ListDownstreamTaskInstancesResponse
func (client *Client) ListDownstreamTaskInstances(request *ListDownstreamTaskInstancesRequest) (_result *ListDownstreamTaskInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDownstreamTaskInstancesResponse{}
	_body, _err := client.ListDownstreamTaskInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of descendant tasks of a task by page.
//
// @param request - ListDownstreamTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDownstreamTasksResponse
func (client *Client) ListDownstreamTasksWithOptions(request *ListDownstreamTasksRequest, runtime *util.RuntimeOptions) (_result *ListDownstreamTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDownstreamTasks"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDownstreamTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of descendant tasks of a task by page.
//
// @param request - ListDownstreamTasksRequest
//
// @return ListDownstreamTasksResponse
func (client *Client) ListDownstreamTasks(request *ListDownstreamTasksRequest) (_result *ListDownstreamTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDownstreamTasksResponse{}
	_body, _err := client.ListDownstreamTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询集合中的实体列表
//
// @param request - ListEntitiesInMetaCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEntitiesInMetaCollectionResponse
func (client *Client) ListEntitiesInMetaCollectionWithOptions(request *ListEntitiesInMetaCollectionRequest, runtime *util.RuntimeOptions) (_result *ListEntitiesInMetaCollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEntitiesInMetaCollection"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEntitiesInMetaCollectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询集合中的实体列表
//
// @param request - ListEntitiesInMetaCollectionRequest
//
// @return ListEntitiesInMetaCollectionResponse
func (client *Client) ListEntitiesInMetaCollection(request *ListEntitiesInMetaCollectionRequest) (_result *ListEntitiesInMetaCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEntitiesInMetaCollectionResponse{}
	_body, _err := client.ListEntitiesInMetaCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListFileVersionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFileVersionsResponse
func (client *Client) ListFileVersionsWithOptions(request *ListFileVersionsRequest, runtime *util.RuntimeOptions) (_result *ListFileVersionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFileVersions"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFileVersionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListFileVersionsRequest
//
// @return ListFileVersionsResponse
func (client *Client) ListFileVersions(request *ListFileVersionsRequest) (_result *ListFileVersionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFileVersionsResponse{}
	_body, _err := client.ListFileVersionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFilesResponse
func (client *Client) ListFilesWithOptions(request *ListFilesRequest, runtime *util.RuntimeOptions) (_result *ListFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommitStatus)) {
		body["CommitStatus"] = request.CommitStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ExactFileName)) {
		body["ExactFileName"] = request.ExactFileName
	}

	if !tea.BoolValue(util.IsUnset(request.FileFolderPath)) {
		body["FileFolderPath"] = request.FileFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.FileIdIn)) {
		body["FileIdIn"] = request.FileIdIn
	}

	if !tea.BoolValue(util.IsUnset(request.FileTypes)) {
		body["FileTypes"] = request.FileTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.LastEditUser)) {
		body["LastEditUser"] = request.LastEditUser
	}

	if !tea.BoolValue(util.IsUnset(request.NeedAbsoluteFolderPath)) {
		body["NeedAbsoluteFolderPath"] = request.NeedAbsoluteFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.NeedContent)) {
		body["NeedContent"] = request.NeedContent
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.UseType)) {
		body["UseType"] = request.UseType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFiles"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListFilesRequest
//
// @return ListFilesResponse
func (client *Client) ListFiles(request *ListFilesRequest) (_result *ListFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFilesResponse{}
	_body, _err := client.ListFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListFoldersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFoldersResponse
func (client *Client) ListFoldersWithOptions(request *ListFoldersRequest, runtime *util.RuntimeOptions) (_result *ListFoldersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentFolderPath)) {
		body["ParentFolderPath"] = request.ParentFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFolders"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFoldersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListFoldersRequest
//
// @return ListFoldersResponse
func (client *Client) ListFolders(request *ListFoldersRequest) (_result *ListFoldersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFoldersResponse{}
	_body, _err := client.ListFoldersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of user-defined functions (UDFs) in DataStudio. You can also specify filter conditions to query specific UDFs.
//
// @param request - ListFunctionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFunctionsResponse
func (client *Client) ListFunctionsWithOptions(request *ListFunctionsRequest, runtime *util.RuntimeOptions) (_result *ListFunctionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFunctions"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFunctionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of user-defined functions (UDFs) in DataStudio. You can also specify filter conditions to query specific UDFs.
//
// @param request - ListFunctionsRequest
//
// @return ListFunctionsResponse
func (client *Client) ListFunctions(request *ListFunctionsRequest) (_result *ListFunctionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFunctionsResponse{}
	_body, _err := client.ListFunctionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询血缘关系
//
// @param request - ListLineageRelationshipsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLineageRelationshipsResponse
func (client *Client) ListLineageRelationshipsWithOptions(request *ListLineageRelationshipsRequest, runtime *util.RuntimeOptions) (_result *ListLineageRelationshipsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLineageRelationships"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLineageRelationshipsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询血缘关系
//
// @param request - ListLineageRelationshipsRequest
//
// @return ListLineageRelationshipsResponse
func (client *Client) ListLineageRelationships(request *ListLineageRelationshipsRequest) (_result *ListLineageRelationshipsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLineageRelationshipsResponse{}
	_body, _err := client.ListLineageRelationshipsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询实体血缘
//
// @param request - ListLineagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLineagesResponse
func (client *Client) ListLineagesWithOptions(request *ListLineagesRequest, runtime *util.RuntimeOptions) (_result *ListLineagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLineages"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLineagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询实体血缘
//
// @param request - ListLineagesRequest
//
// @return ListLineagesResponse
func (client *Client) ListLineages(request *ListLineagesRequest) (_result *ListLineagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLineagesResponse{}
	_body, _err := client.ListLineagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询Collection列表
//
// @param request - ListMetaCollectionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMetaCollectionsResponse
func (client *Client) ListMetaCollectionsWithOptions(request *ListMetaCollectionsRequest, runtime *util.RuntimeOptions) (_result *ListMetaCollectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMetaCollections"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMetaCollectionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询Collection列表
//
// @param request - ListMetaCollectionsRequest
//
// @return ListMetaCollectionsResponse
func (client *Client) ListMetaCollections(request *ListMetaCollectionsRequest) (_result *ListMetaCollectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMetaCollectionsResponse{}
	_body, _err := client.ListMetaCollectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of network resources of a serverless resource group.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListNetworksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListNetworksResponse
func (client *Client) ListNetworksWithOptions(request *ListNetworksRequest, runtime *util.RuntimeOptions) (_result *ListNetworksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNetworks"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNetworksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of network resources of a serverless resource group.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListNetworksRequest
//
// @return ListNetworksResponse
func (client *Client) ListNetworks(request *ListNetworksRequest) (_result *ListNetworksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNetworksResponse{}
	_body, _err := client.ListNetworksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of descendant nodes of a node in DataStudio.
//
// @param request - ListNodeDependenciesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListNodeDependenciesResponse
func (client *Client) ListNodeDependenciesWithOptions(request *ListNodeDependenciesRequest, runtime *util.RuntimeOptions) (_result *ListNodeDependenciesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNodeDependencies"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNodeDependenciesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of descendant nodes of a node in DataStudio.
//
// @param request - ListNodeDependenciesRequest
//
// @return ListNodeDependenciesResponse
func (client *Client) ListNodeDependencies(request *ListNodeDependenciesRequest) (_result *ListNodeDependenciesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNodeDependenciesResponse{}
	_body, _err := client.ListNodeDependenciesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of nodes in DataStudio. You can also specify filter conditions to query specific nodes.
//
// @param request - ListNodesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListNodesResponse
func (client *Client) ListNodesWithOptions(request *ListNodesRequest, runtime *util.RuntimeOptions) (_result *ListNodesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNodes"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of nodes in DataStudio. You can also specify filter conditions to query specific nodes.
//
// @param request - ListNodesRequest
//
// @return ListNodesResponse
func (client *Client) ListNodes(request *ListNodesRequest) (_result *ListNodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNodesResponse{}
	_body, _err := client.ListNodesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询数据表的分区列表
//
// @param request - ListPartitionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPartitionsResponse
func (client *Client) ListPartitionsWithOptions(request *ListPartitionsRequest, runtime *util.RuntimeOptions) (_result *ListPartitionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPartitions"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPartitionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询数据表的分区列表
//
// @param request - ListPartitionsRequest
//
// @return ListPartitionsResponse
func (client *Client) ListPartitions(request *ListPartitionsRequest) (_result *ListPartitionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPartitionsResponse{}
	_body, _err := client.ListPartitionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 通过发布流程的ID获取发布内容
//
// @param request - ListPipelineRunItemsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPipelineRunItemsResponse
func (client *Client) ListPipelineRunItemsWithOptions(request *ListPipelineRunItemsRequest, runtime *util.RuntimeOptions) (_result *ListPipelineRunItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPipelineRunItems"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPipelineRunItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 通过发布流程的ID获取发布内容
//
// @param request - ListPipelineRunItemsRequest
//
// @return ListPipelineRunItemsResponse
func (client *Client) ListPipelineRunItems(request *ListPipelineRunItemsRequest) (_result *ListPipelineRunItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPipelineRunItemsResponse{}
	_body, _err := client.ListPipelineRunItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of processes that are used to deploy or undeploy entities in DataStudio. You can also specify filter conditions to query specific processes.
//
// @param request - ListPipelineRunsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPipelineRunsResponse
func (client *Client) ListPipelineRunsWithOptions(request *ListPipelineRunsRequest, runtime *util.RuntimeOptions) (_result *ListPipelineRunsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPipelineRuns"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPipelineRunsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of processes that are used to deploy or undeploy entities in DataStudio. You can also specify filter conditions to query specific processes.
//
// @param request - ListPipelineRunsRequest
//
// @return ListPipelineRunsResponse
func (client *Client) ListPipelineRuns(request *ListPipelineRunsRequest) (_result *ListPipelineRunsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPipelineRunsResponse{}
	_body, _err := client.ListPipelineRunsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries details about members in a workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - ListProjectMembersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListProjectMembersResponse
func (client *Client) ListProjectMembersWithOptions(tmpReq *ListProjectMembersRequest, runtime *util.RuntimeOptions) (_result *ListProjectMembersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListProjectMembersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RoleCodes)) {
		request.RoleCodesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RoleCodes, tea.String("RoleCodes"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.UserIds)) {
		request.UserIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserIds, tea.String("UserIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleCodesShrink)) {
		body["RoleCodes"] = request.RoleCodesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserIdsShrink)) {
		body["UserIds"] = request.UserIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjectMembers"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries details about members in a workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListProjectMembersRequest
//
// @return ListProjectMembersResponse
func (client *Client) ListProjectMembers(request *ListProjectMembersRequest) (_result *ListProjectMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProjectMembersResponse{}
	_body, _err := client.ListProjectMembersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about roles in a DataWorks workspace by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - ListProjectRolesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListProjectRolesResponse
func (client *Client) ListProjectRolesWithOptions(tmpReq *ListProjectRolesRequest, runtime *util.RuntimeOptions) (_result *ListProjectRolesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListProjectRolesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Codes)) {
		request.CodesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Codes, tea.String("Codes"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Names)) {
		request.NamesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Names, tea.String("Names"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CodesShrink)) {
		body["Codes"] = request.CodesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NamesShrink)) {
		body["Names"] = request.NamesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjectRoles"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectRolesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about roles in a DataWorks workspace by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListProjectRolesRequest
//
// @return ListProjectRolesResponse
func (client *Client) ListProjectRoles(request *ListProjectRolesRequest) (_result *ListProjectRolesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProjectRolesResponse{}
	_body, _err := client.ListProjectRolesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of DataWorks workspaces of the tenant to which your account belongs.
//
// @param tmpReq - ListProjectsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListProjectsResponse
func (client *Client) ListProjectsWithOptions(tmpReq *ListProjectsRequest, runtime *util.RuntimeOptions) (_result *ListProjectsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListProjectsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AliyunResourceTags)) {
		request.AliyunResourceTagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AliyunResourceTags, tea.String("AliyunResourceTags"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Names)) {
		request.NamesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Names, tea.String("Names"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunResourceGroupId)) {
		body["AliyunResourceGroupId"] = request.AliyunResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.AliyunResourceTagsShrink)) {
		body["AliyunResourceTags"] = request.AliyunResourceTagsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DevEnvironmentEnabled)) {
		body["DevEnvironmentEnabled"] = request.DevEnvironmentEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.DevRoleDisabled)) {
		body["DevRoleDisabled"] = request.DevRoleDisabled
	}

	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		body["Ids"] = request.IdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NamesShrink)) {
		body["Names"] = request.NamesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PaiTaskEnabled)) {
		body["PaiTaskEnabled"] = request.PaiTaskEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjects"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of DataWorks workspaces of the tenant to which your account belongs.
//
// @param request - ListProjectsRequest
//
// @return ListProjectsResponse
func (client *Client) ListProjects(request *ListProjectsRequest) (_result *ListProjectsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProjectsResponse{}
	_body, _err := client.ListProjectsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of resource groups.
//
// @param tmpReq - ListResourceGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListResourceGroupsResponse
func (client *Client) ListResourceGroupsWithOptions(tmpReq *ListResourceGroupsRequest, runtime *util.RuntimeOptions) (_result *ListResourceGroupsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListResourceGroupsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AliyunResourceTags)) {
		request.AliyunResourceTagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AliyunResourceTags, tea.String("AliyunResourceTags"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ResourceGroupTypes)) {
		request.ResourceGroupTypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ResourceGroupTypes, tea.String("ResourceGroupTypes"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Statuses)) {
		request.StatusesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Statuses, tea.String("Statuses"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListResourceGroups"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListResourceGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of resource groups.
//
// @param request - ListResourceGroupsRequest
//
// @return ListResourceGroupsResponse
func (client *Client) ListResourceGroups(request *ListResourceGroupsRequest) (_result *ListResourceGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListResourceGroupsResponse{}
	_body, _err := client.ListResourceGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of file resources in DataStudio. You can also specify filter conditions to query specific file resources.
//
// @param request - ListResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListResourcesResponse
func (client *Client) ListResourcesWithOptions(request *ListResourcesRequest, runtime *util.RuntimeOptions) (_result *ListResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListResources"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of file resources in DataStudio. You can also specify filter conditions to query specific file resources.
//
// @param request - ListResourcesRequest
//
// @return ListResourcesResponse
func (client *Client) ListResources(request *ListResourcesRequest) (_result *ListResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListResourcesResponse{}
	_body, _err := client.ListResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of routes of a network resource.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListRoutesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRoutesResponse
func (client *Client) ListRoutesWithOptions(request *ListRoutesRequest, runtime *util.RuntimeOptions) (_result *ListRoutesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRoutes"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRoutesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of routes of a network resource.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListRoutesRequest
//
// @return ListRoutesResponse
func (client *Client) ListRoutes(request *ListRoutesRequest) (_result *ListRoutesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRoutesResponse{}
	_body, _err := client.ListRoutesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询模式列表
//
// @param tmpReq - ListSchemasRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSchemasResponse
func (client *Client) ListSchemasWithOptions(tmpReq *ListSchemasRequest, runtime *util.RuntimeOptions) (_result *ListSchemasResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListSchemasShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Types)) {
		request.TypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Types, tea.String("Types"), tea.String("simple"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSchemas"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSchemasResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询模式列表
//
// @param request - ListSchemasRequest
//
// @return ListSchemasResponse
func (client *Client) ListSchemas(request *ListSchemasRequest) (_result *ListSchemasResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSchemasResponse{}
	_body, _err := client.ListSchemasWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询数据表列表
//
// @param tmpReq - ListTablesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTablesResponse
func (client *Client) ListTablesWithOptions(tmpReq *ListTablesRequest, runtime *util.RuntimeOptions) (_result *ListTablesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListTablesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TableTypes)) {
		request.TableTypesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TableTypes, tea.String("TableTypes"), tea.String("simple"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTables"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTablesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询数据表列表
//
// @param request - ListTablesRequest
//
// @return ListTablesResponse
func (client *Client) ListTables(request *ListTablesRequest) (_result *ListTablesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTablesResponse{}
	_body, _err := client.ListTablesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of operation logs of an instance by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// You can call this operation to query only the operation logs generated within the previous 31 days.
//
// @param request - ListTaskInstanceOperationLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTaskInstanceOperationLogsResponse
func (client *Client) ListTaskInstanceOperationLogsWithOptions(request *ListTaskInstanceOperationLogsRequest, runtime *util.RuntimeOptions) (_result *ListTaskInstanceOperationLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTaskInstanceOperationLogs"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTaskInstanceOperationLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of operation logs of an instance by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// You can call this operation to query only the operation logs generated within the previous 31 days.
//
// @param request - ListTaskInstanceOperationLogsRequest
//
// @return ListTaskInstanceOperationLogsResponse
func (client *Client) ListTaskInstanceOperationLogs(request *ListTaskInstanceOperationLogsRequest) (_result *ListTaskInstanceOperationLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTaskInstanceOperationLogsResponse{}
	_body, _err := client.ListTaskInstanceOperationLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of instances. You can also specify filter conditions to query specific instances.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - ListTaskInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTaskInstancesResponse
func (client *Client) ListTaskInstancesWithOptions(tmpReq *ListTaskInstancesRequest, runtime *util.RuntimeOptions) (_result *ListTaskInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListTaskInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TaskIds)) {
		request.TaskIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TaskIds, tea.String("TaskIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizdate)) {
		body["Bizdate"] = request.Bizdate
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		body["Ids"] = request.IdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RuntimeResource)) {
		body["RuntimeResource"] = request.RuntimeResource
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		body["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskIdsShrink)) {
		body["TaskIds"] = request.TaskIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		body["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		body["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerRecurrence)) {
		body["TriggerRecurrence"] = request.TriggerRecurrence
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerType)) {
		body["TriggerType"] = request.TriggerType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkflowId)) {
		body["WorkflowId"] = request.WorkflowId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkflowInstanceId)) {
		body["WorkflowInstanceId"] = request.WorkflowInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkflowInstanceType)) {
		body["WorkflowInstanceType"] = request.WorkflowInstanceType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTaskInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTaskInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of instances. You can also specify filter conditions to query specific instances.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListTaskInstancesRequest
//
// @return ListTaskInstancesResponse
func (client *Client) ListTaskInstances(request *ListTaskInstancesRequest) (_result *ListTaskInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTaskInstancesResponse{}
	_body, _err := client.ListTaskInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of operation logs of a task by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// You can call this operation to query only the operation logs generated within the previous 31 days.
//
// @param request - ListTaskOperationLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTaskOperationLogsResponse
func (client *Client) ListTaskOperationLogsWithOptions(request *ListTaskOperationLogsRequest, runtime *util.RuntimeOptions) (_result *ListTaskOperationLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTaskOperationLogs"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTaskOperationLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of operation logs of a task by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// You can call this operation to query only the operation logs generated within the previous 31 days.
//
// @param request - ListTaskOperationLogsRequest
//
// @return ListTaskOperationLogsResponse
func (client *Client) ListTaskOperationLogs(request *ListTaskOperationLogsRequest) (_result *ListTaskOperationLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTaskOperationLogsResponse{}
	_body, _err := client.ListTaskOperationLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of tasks by page. You can also specify filter conditions to query tasks.
//
// @param tmpReq - ListTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTasksResponse
func (client *Client) ListTasksWithOptions(tmpReq *ListTasksRequest, runtime *util.RuntimeOptions) (_result *ListTasksResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListTasksShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		body["Ids"] = request.IdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectEnv)) {
		body["ProjectEnv"] = request.ProjectEnv
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RuntimeResource)) {
		body["RuntimeResource"] = request.RuntimeResource
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		body["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		body["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerRecurrence)) {
		body["TriggerRecurrence"] = request.TriggerRecurrence
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerType)) {
		body["TriggerType"] = request.TriggerType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkflowId)) {
		body["WorkflowId"] = request.WorkflowId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTasks"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of tasks by page. You can also specify filter conditions to query tasks.
//
// @param request - ListTasksRequest
//
// @return ListTasksResponse
func (client *Client) ListTasks(request *ListTasksRequest) (_result *ListTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTasksResponse{}
	_body, _err := client.ListTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of ancestor instances of an instance by page.
//
// @param request - ListUpstreamTaskInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUpstreamTaskInstancesResponse
func (client *Client) ListUpstreamTaskInstancesWithOptions(request *ListUpstreamTaskInstancesRequest, runtime *util.RuntimeOptions) (_result *ListUpstreamTaskInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUpstreamTaskInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUpstreamTaskInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of ancestor instances of an instance by page.
//
// @param request - ListUpstreamTaskInstancesRequest
//
// @return ListUpstreamTaskInstancesResponse
func (client *Client) ListUpstreamTaskInstances(request *ListUpstreamTaskInstancesRequest) (_result *ListUpstreamTaskInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUpstreamTaskInstancesResponse{}
	_body, _err := client.ListUpstreamTaskInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of ancestor tasks of a task by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListUpstreamTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUpstreamTasksResponse
func (client *Client) ListUpstreamTasksWithOptions(request *ListUpstreamTasksRequest, runtime *util.RuntimeOptions) (_result *ListUpstreamTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUpstreamTasks"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUpstreamTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of ancestor tasks of a task by page.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListUpstreamTasksRequest
//
// @return ListUpstreamTasksResponse
func (client *Client) ListUpstreamTasks(request *ListUpstreamTasksRequest) (_result *ListUpstreamTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUpstreamTasksResponse{}
	_body, _err := client.ListUpstreamTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of workflows in DataStudio. You can also specify filter conditions to query specific workflows.
//
// @param request - ListWorkflowDefinitionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWorkflowDefinitionsResponse
func (client *Client) ListWorkflowDefinitionsWithOptions(request *ListWorkflowDefinitionsRequest, runtime *util.RuntimeOptions) (_result *ListWorkflowDefinitionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWorkflowDefinitions"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWorkflowDefinitionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of workflows in DataStudio. You can also specify filter conditions to query specific workflows.
//
// @param request - ListWorkflowDefinitionsRequest
//
// @return ListWorkflowDefinitionsResponse
func (client *Client) ListWorkflowDefinitions(request *ListWorkflowDefinitionsRequest) (_result *ListWorkflowDefinitionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListWorkflowDefinitionsResponse{}
	_body, _err := client.ListWorkflowDefinitionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of workflow instances by page. You can also specify filter conditions to query workflow instances.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - ListWorkflowInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWorkflowInstancesResponse
func (client *Client) ListWorkflowInstancesWithOptions(tmpReq *ListWorkflowInstancesRequest, runtime *util.RuntimeOptions) (_result *ListWorkflowInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListWorkflowInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizDate)) {
		body["BizDate"] = request.BizDate
	}

	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		body["Ids"] = request.IdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		body["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WorkflowId)) {
		body["WorkflowId"] = request.WorkflowId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWorkflowInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWorkflowInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of workflow instances by page. You can also specify filter conditions to query workflow instances.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListWorkflowInstancesRequest
//
// @return ListWorkflowInstancesResponse
func (client *Client) ListWorkflowInstances(request *ListWorkflowInstancesRequest) (_result *ListWorkflowInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListWorkflowInstancesResponse{}
	_body, _err := client.ListWorkflowInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of workflows by page. You can also specify filter conditions to query workflows.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - ListWorkflowsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWorkflowsResponse
func (client *Client) ListWorkflowsWithOptions(tmpReq *ListWorkflowsRequest, runtime *util.RuntimeOptions) (_result *ListWorkflowsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListWorkflowsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		body["Ids"] = request.IdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		body["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerType)) {
		body["TriggerType"] = request.TriggerType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWorkflows"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWorkflowsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of workflows by page. You can also specify filter conditions to query workflows.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ListWorkflowsRequest
//
// @return ListWorkflowsResponse
func (client *Client) ListWorkflows(request *ListWorkflowsRequest) (_result *ListWorkflowsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListWorkflowsResponse{}
	_body, _err := client.ListWorkflowsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Moves a user-defined function (UDF) to a path in DataStudio.
//
// @param request - MoveFunctionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MoveFunctionResponse
func (client *Client) MoveFunctionWithOptions(request *MoveFunctionRequest, runtime *util.RuntimeOptions) (_result *MoveFunctionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		body["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("MoveFunction"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &MoveFunctionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Moves a user-defined function (UDF) to a path in DataStudio.
//
// @param request - MoveFunctionRequest
//
// @return MoveFunctionResponse
func (client *Client) MoveFunction(request *MoveFunctionRequest) (_result *MoveFunctionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MoveFunctionResponse{}
	_body, _err := client.MoveFunctionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Moves a node to a path in DataStudio.
//
// @param request - MoveNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MoveNodeResponse
func (client *Client) MoveNodeWithOptions(request *MoveNodeRequest, runtime *util.RuntimeOptions) (_result *MoveNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		body["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("MoveNode"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &MoveNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Moves a node to a path in DataStudio.
//
// @param request - MoveNodeRequest
//
// @return MoveNodeResponse
func (client *Client) MoveNode(request *MoveNodeRequest) (_result *MoveNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MoveNodeResponse{}
	_body, _err := client.MoveNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Moves a file resource to a path in DataStudio.
//
// @param request - MoveResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MoveResourceResponse
func (client *Client) MoveResourceWithOptions(request *MoveResourceRequest, runtime *util.RuntimeOptions) (_result *MoveResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		body["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("MoveResource"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &MoveResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Moves a file resource to a path in DataStudio.
//
// @param request - MoveResourceRequest
//
// @return MoveResourceResponse
func (client *Client) MoveResource(request *MoveResourceRequest) (_result *MoveResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MoveResourceResponse{}
	_body, _err := client.MoveResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Moves a workflow to a path in DataStudio.
//
// @param request - MoveWorkflowDefinitionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MoveWorkflowDefinitionResponse
func (client *Client) MoveWorkflowDefinitionWithOptions(request *MoveWorkflowDefinitionRequest, runtime *util.RuntimeOptions) (_result *MoveWorkflowDefinitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		body["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("MoveWorkflowDefinition"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &MoveWorkflowDefinitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Moves a workflow to a path in DataStudio.
//
// @param request - MoveWorkflowDefinitionRequest
//
// @return MoveWorkflowDefinitionResponse
func (client *Client) MoveWorkflowDefinition(request *MoveWorkflowDefinitionRequest) (_result *MoveWorkflowDefinitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MoveWorkflowDefinitionResponse{}
	_body, _err := client.MoveWorkflowDefinitionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 从集合中移除实体对象
//
// @param request - RemoveEntityFromMetaCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveEntityFromMetaCollectionResponse
func (client *Client) RemoveEntityFromMetaCollectionWithOptions(request *RemoveEntityFromMetaCollectionRequest, runtime *util.RuntimeOptions) (_result *RemoveEntityFromMetaCollectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.MetaCollectionId)) {
		query["MetaCollectionId"] = request.MetaCollectionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveEntityFromMetaCollection"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveEntityFromMetaCollectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 从集合中移除实体对象
//
// @param request - RemoveEntityFromMetaCollectionRequest
//
// @return RemoveEntityFromMetaCollectionResponse
func (client *Client) RemoveEntityFromMetaCollection(request *RemoveEntityFromMetaCollectionRequest) (_result *RemoveEntityFromMetaCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveEntityFromMetaCollectionResponse{}
	_body, _err := client.RemoveEntityFromMetaCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes multiple upstream dependencies of an instance at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - RemoveTaskInstanceDependenciesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveTaskInstanceDependenciesResponse
func (client *Client) RemoveTaskInstanceDependenciesWithOptions(tmpReq *RemoveTaskInstanceDependenciesRequest, runtime *util.RuntimeOptions) (_result *RemoveTaskInstanceDependenciesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RemoveTaskInstanceDependenciesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.UpstreamTaskInstanceIds)) {
		request.UpstreamTaskInstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UpstreamTaskInstanceIds, tea.String("UpstreamTaskInstanceIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.UpstreamTaskInstanceIdsShrink)) {
		body["UpstreamTaskInstanceIds"] = request.UpstreamTaskInstanceIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveTaskInstanceDependencies"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveTaskInstanceDependenciesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes multiple upstream dependencies of an instance at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - RemoveTaskInstanceDependenciesRequest
//
// @return RemoveTaskInstanceDependenciesResponse
func (client *Client) RemoveTaskInstanceDependencies(request *RemoveTaskInstanceDependenciesRequest) (_result *RemoveTaskInstanceDependenciesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveTaskInstanceDependenciesResponse{}
	_body, _err := client.RemoveTaskInstanceDependenciesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Renames a user-defined function (UDF) in DataStudio.
//
// @param request - RenameFunctionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenameFunctionResponse
func (client *Client) RenameFunctionWithOptions(request *RenameFunctionRequest, runtime *util.RuntimeOptions) (_result *RenameFunctionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RenameFunction"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenameFunctionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Renames a user-defined function (UDF) in DataStudio.
//
// @param request - RenameFunctionRequest
//
// @return RenameFunctionResponse
func (client *Client) RenameFunction(request *RenameFunctionRequest) (_result *RenameFunctionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenameFunctionResponse{}
	_body, _err := client.RenameFunctionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Renames a node in DataStudio.
//
// @param request - RenameNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenameNodeResponse
func (client *Client) RenameNodeWithOptions(request *RenameNodeRequest, runtime *util.RuntimeOptions) (_result *RenameNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RenameNode"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenameNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Renames a node in DataStudio.
//
// @param request - RenameNodeRequest
//
// @return RenameNodeResponse
func (client *Client) RenameNode(request *RenameNodeRequest) (_result *RenameNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenameNodeResponse{}
	_body, _err := client.RenameNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Renames a file resource in DataStudio.
//
// @param request - RenameResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenameResourceResponse
func (client *Client) RenameResourceWithOptions(request *RenameResourceRequest, runtime *util.RuntimeOptions) (_result *RenameResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RenameResource"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenameResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Renames a file resource in DataStudio.
//
// @param request - RenameResourceRequest
//
// @return RenameResourceResponse
func (client *Client) RenameResource(request *RenameResourceRequest) (_result *RenameResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenameResourceResponse{}
	_body, _err := client.RenameResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Renames a workflow in DataStudio.
//
// @param request - RenameWorkflowDefinitionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenameWorkflowDefinitionResponse
func (client *Client) RenameWorkflowDefinitionWithOptions(request *RenameWorkflowDefinitionRequest, runtime *util.RuntimeOptions) (_result *RenameWorkflowDefinitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenameWorkflowDefinition"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenameWorkflowDefinitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Renames a workflow in DataStudio.
//
// @param request - RenameWorkflowDefinitionRequest
//
// @return RenameWorkflowDefinitionResponse
func (client *Client) RenameWorkflowDefinition(request *RenameWorkflowDefinitionRequest) (_result *RenameWorkflowDefinitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenameWorkflowDefinitionResponse{}
	_body, _err := client.RenameWorkflowDefinitionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Reruns multiple instances at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - RerunTaskInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RerunTaskInstancesResponse
func (client *Client) RerunTaskInstancesWithOptions(tmpReq *RerunTaskInstancesRequest, runtime *util.RuntimeOptions) (_result *RerunTaskInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RerunTaskInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		body["Ids"] = request.IdsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RerunTaskInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RerunTaskInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Reruns multiple instances at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - RerunTaskInstancesRequest
//
// @return RerunTaskInstancesResponse
func (client *Client) RerunTaskInstances(request *RerunTaskInstancesRequest) (_result *RerunTaskInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RerunTaskInstancesResponse{}
	_body, _err := client.RerunTaskInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 重跑工作流实例
//
// @param tmpReq - RerunWorkflowInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RerunWorkflowInstancesResponse
func (client *Client) RerunWorkflowInstancesWithOptions(tmpReq *RerunWorkflowInstancesRequest, runtime *util.RuntimeOptions) (_result *RerunWorkflowInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RerunWorkflowInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Filter)) {
		request.FilterShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Filter, tea.String("Filter"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizdate)) {
		body["Bizdate"] = request.Bizdate
	}

	if !tea.BoolValue(util.IsUnset(request.EndTriggerTime)) {
		body["EndTriggerTime"] = request.EndTriggerTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.FilterShrink)) {
		body["Filter"] = request.FilterShrink
	}

	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		body["Ids"] = request.IdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTriggerTime)) {
		body["StartTriggerTime"] = request.StartTriggerTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WorkflowId)) {
		body["WorkflowId"] = request.WorkflowId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RerunWorkflowInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RerunWorkflowInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 重跑工作流实例
//
// @param request - RerunWorkflowInstancesRequest
//
// @return RerunWorkflowInstancesResponse
func (client *Client) RerunWorkflowInstances(request *RerunWorkflowInstancesRequest) (_result *RerunWorkflowInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RerunWorkflowInstancesResponse{}
	_body, _err := client.RerunWorkflowInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resumes multiple suspended instances at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - ResumeTaskInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResumeTaskInstancesResponse
func (client *Client) ResumeTaskInstancesWithOptions(tmpReq *ResumeTaskInstancesRequest, runtime *util.RuntimeOptions) (_result *ResumeTaskInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ResumeTaskInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		body["Ids"] = request.IdsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ResumeTaskInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResumeTaskInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Resumes multiple suspended instances at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - ResumeTaskInstancesRequest
//
// @return ResumeTaskInstancesResponse
func (client *Client) ResumeTaskInstances(request *ResumeTaskInstancesRequest) (_result *ResumeTaskInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeTaskInstancesResponse{}
	_body, _err := client.ResumeTaskInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Revokes roles that are assigned to a member in a workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - RevokeMemberProjectRolesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RevokeMemberProjectRolesResponse
func (client *Client) RevokeMemberProjectRolesWithOptions(tmpReq *RevokeMemberProjectRolesRequest, runtime *util.RuntimeOptions) (_result *RevokeMemberProjectRolesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RevokeMemberProjectRolesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RoleCodes)) {
		request.RoleCodesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RoleCodes, tea.String("RoleCodes"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleCodesShrink)) {
		body["RoleCodes"] = request.RoleCodesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokeMemberProjectRoles"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RevokeMemberProjectRolesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Revokes roles that are assigned to a member in a workspace.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - RevokeMemberProjectRolesRequest
//
// @return RevokeMemberProjectRolesResponse
func (client *Client) RevokeMemberProjectRoles(request *RevokeMemberProjectRolesRequest) (_result *RevokeMemberProjectRolesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeMemberProjectRolesResponse{}
	_body, _err := client.RevokeMemberProjectRolesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sets the statuses of multiple instances to successful at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - SetSuccessTaskInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetSuccessTaskInstancesResponse
func (client *Client) SetSuccessTaskInstancesWithOptions(tmpReq *SetSuccessTaskInstancesRequest, runtime *util.RuntimeOptions) (_result *SetSuccessTaskInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetSuccessTaskInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		body["Ids"] = request.IdsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SetSuccessTaskInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetSuccessTaskInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sets the statuses of multiple instances to successful at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - SetSuccessTaskInstancesRequest
//
// @return SetSuccessTaskInstancesResponse
func (client *Client) SetSuccessTaskInstances(request *SetSuccessTaskInstancesRequest) (_result *SetSuccessTaskInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetSuccessTaskInstancesResponse{}
	_body, _err := client.SetSuccessTaskInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts a new-version synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - StartDIJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartDIJobResponse
func (client *Client) StartDIJobWithOptions(tmpReq *StartDIJobRequest, runtime *util.RuntimeOptions) (_result *StartDIJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StartDIJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RealtimeStartSettings)) {
		request.RealtimeStartSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RealtimeStartSettings, tea.String("RealtimeStartSettings"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartDIJob"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartDIJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts a new-version synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - StartDIJobRequest
//
// @return StartDIJobResponse
func (client *Client) StartDIJob(request *StartDIJobRequest) (_result *StartDIJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartDIJobResponse{}
	_body, _err := client.StartDIJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts multiple workflow instances at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - StartWorkflowInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartWorkflowInstancesResponse
func (client *Client) StartWorkflowInstancesWithOptions(tmpReq *StartWorkflowInstancesRequest, runtime *util.RuntimeOptions) (_result *StartWorkflowInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StartWorkflowInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		body["Ids"] = request.IdsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartWorkflowInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartWorkflowInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts multiple workflow instances at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - StartWorkflowInstancesRequest
//
// @return StartWorkflowInstancesResponse
func (client *Client) StartWorkflowInstances(request *StartWorkflowInstancesRequest) (_result *StartWorkflowInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartWorkflowInstancesResponse{}
	_body, _err := client.StartWorkflowInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - StopDIJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopDIJobResponse
func (client *Client) StopDIJobWithOptions(request *StopDIJobRequest, runtime *util.RuntimeOptions) (_result *StopDIJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopDIJob"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopDIJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - StopDIJobRequest
//
// @return StopDIJobResponse
func (client *Client) StopDIJob(request *StopDIJobRequest) (_result *StopDIJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopDIJobResponse{}
	_body, _err := client.StopDIJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops multiple instances at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - StopTaskInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopTaskInstancesResponse
func (client *Client) StopTaskInstancesWithOptions(tmpReq *StopTaskInstancesRequest, runtime *util.RuntimeOptions) (_result *StopTaskInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StopTaskInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		body["Ids"] = request.IdsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StopTaskInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopTaskInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops multiple instances at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - StopTaskInstancesRequest
//
// @return StopTaskInstancesResponse
func (client *Client) StopTaskInstances(request *StopTaskInstancesRequest) (_result *StopTaskInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopTaskInstancesResponse{}
	_body, _err := client.StopTaskInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops multiple workflow instances at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - StopWorkflowInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopWorkflowInstancesResponse
func (client *Client) StopWorkflowInstancesWithOptions(tmpReq *StopWorkflowInstancesRequest, runtime *util.RuntimeOptions) (_result *StopWorkflowInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StopWorkflowInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		body["Ids"] = request.IdsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StopWorkflowInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopWorkflowInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops multiple workflow instances at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - StopWorkflowInstancesRequest
//
// @return StopWorkflowInstancesResponse
func (client *Client) StopWorkflowInstances(request *StopWorkflowInstancesRequest) (_result *StopWorkflowInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopWorkflowInstancesResponse{}
	_body, _err := client.StopWorkflowInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SubmitFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitFileResponse
func (client *Client) SubmitFileWithOptions(request *SubmitFileRequest, runtime *util.RuntimeOptions) (_result *SubmitFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.SkipAllDeployFileExtensions)) {
		body["SkipAllDeployFileExtensions"] = request.SkipAllDeployFileExtensions
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitFile"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SubmitFileRequest
//
// @return SubmitFileResponse
func (client *Client) SubmitFile(request *SubmitFileRequest) (_result *SubmitFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitFileResponse{}
	_body, _err := client.SubmitFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Suspends multiple instances at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - SuspendTaskInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SuspendTaskInstancesResponse
func (client *Client) SuspendTaskInstancesWithOptions(tmpReq *SuspendTaskInstancesRequest, runtime *util.RuntimeOptions) (_result *SuspendTaskInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SuspendTaskInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Ids)) {
		request.IdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Ids, tea.String("Ids"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.IdsShrink)) {
		body["Ids"] = request.IdsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SuspendTaskInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SuspendTaskInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Suspends multiple instances at a time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - SuspendTaskInstancesRequest
//
// @return SuspendTaskInstancesResponse
func (client *Client) SuspendTaskInstances(request *SuspendTaskInstancesRequest) (_result *SuspendTaskInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SuspendTaskInstancesResponse{}
	_body, _err := client.SuspendTaskInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds tags to data assets.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param tmpReq - TagDataAssetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagDataAssetsResponse
func (client *Client) TagDataAssetsWithOptions(tmpReq *TagDataAssetsRequest, runtime *util.RuntimeOptions) (_result *TagDataAssetsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &TagDataAssetsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DataAssetIds)) {
		request.DataAssetIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DataAssetIds, tea.String("DataAssetIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Tags)) {
		request.TagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tags, tea.String("Tags"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoTraceEnabled)) {
		query["AutoTraceEnabled"] = request.AutoTraceEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.DataAssetIdsShrink)) {
		query["DataAssetIds"] = request.DataAssetIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DataAssetType)) {
		query["DataAssetType"] = request.DataAssetType
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TagsShrink)) {
		query["Tags"] = request.TagsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagDataAssets"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagDataAssetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds tags to data assets.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param request - TagDataAssetsRequest
//
// @return TagDataAssetsResponse
func (client *Client) TagDataAssets(request *TagDataAssetsRequest) (_result *TagDataAssetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagDataAssetsResponse{}
	_body, _err := client.TagDataAssetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Tests the connectivity between a data source and a resource group.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  Your account must be assigned one of the following roles of the desired workspace: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M
//
// @param request - TestDataSourceConnectivityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TestDataSourceConnectivityResponse
func (client *Client) TestDataSourceConnectivityWithOptions(request *TestDataSourceConnectivityRequest, runtime *util.RuntimeOptions) (_result *TestDataSourceConnectivityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TestDataSourceConnectivity"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TestDataSourceConnectivityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Tests the connectivity between a data source and a resource group.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  Your account must be assigned one of the following roles of the desired workspace: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M
//
// @param request - TestDataSourceConnectivityRequest
//
// @return TestDataSourceConnectivityResponse
func (client *Client) TestDataSourceConnectivity(request *TestDataSourceConnectivityRequest) (_result *TestDataSourceConnectivityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TestDataSourceConnectivityResponse{}
	_body, _err := client.TestDataSourceConnectivityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Triggers a task to run by using an HTTP Trigger node at a specified time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - TriggerSchedulerTaskInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TriggerSchedulerTaskInstanceResponse
func (client *Client) TriggerSchedulerTaskInstanceWithOptions(request *TriggerSchedulerTaskInstanceRequest, runtime *util.RuntimeOptions) (_result *TriggerSchedulerTaskInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerTime)) {
		body["TriggerTime"] = request.TriggerTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("TriggerSchedulerTaskInstance"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TriggerSchedulerTaskInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Triggers a task to run by using an HTTP Trigger node at a specified time.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - TriggerSchedulerTaskInstanceRequest
//
// @return TriggerSchedulerTaskInstanceResponse
func (client *Client) TriggerSchedulerTaskInstance(request *TriggerSchedulerTaskInstanceRequest) (_result *TriggerSchedulerTaskInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TriggerSchedulerTaskInstanceResponse{}
	_body, _err := client.TriggerSchedulerTaskInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes tags from data assets.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param tmpReq - UnTagDataAssetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnTagDataAssetsResponse
func (client *Client) UnTagDataAssetsWithOptions(tmpReq *UnTagDataAssetsRequest, runtime *util.RuntimeOptions) (_result *UnTagDataAssetsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UnTagDataAssetsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DataAssetIds)) {
		request.DataAssetIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DataAssetIds, tea.String("DataAssetIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Tags)) {
		request.TagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tags, tea.String("Tags"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataAssetIdsShrink)) {
		query["DataAssetIds"] = request.DataAssetIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DataAssetType)) {
		query["DataAssetType"] = request.DataAssetType
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		query["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TagsShrink)) {
		query["Tags"] = request.TagsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnTagDataAssets"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnTagDataAssetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes tags from data assets.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param request - UnTagDataAssetsRequest
//
// @return UnTagDataAssetsResponse
func (client *Client) UnTagDataAssets(request *UnTagDataAssetsRequest) (_result *UnTagDataAssetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnTagDataAssetsResponse{}
	_body, _err := client.UnTagDataAssetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the information about a custom alert monitoring rule.
//
// @param tmpReq - UpdateAlertRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAlertRuleResponse
func (client *Client) UpdateAlertRuleWithOptions(tmpReq *UpdateAlertRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateAlertRuleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateAlertRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Notification)) {
		request.NotificationShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Notification, tea.String("Notification"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TriggerCondition)) {
		request.TriggerConditionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TriggerCondition, tea.String("TriggerCondition"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Enabled)) {
		query["Enabled"] = request.Enabled
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NotificationShrink)) {
		query["Notification"] = request.NotificationShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		query["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerConditionShrink)) {
		query["TriggerCondition"] = request.TriggerConditionShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAlertRule"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAlertRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the information about a custom alert monitoring rule.
//
// @param request - UpdateAlertRuleRequest
//
// @return UpdateAlertRuleResponse
func (client *Client) UpdateAlertRule(request *UpdateAlertRuleRequest) (_result *UpdateAlertRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAlertRuleResponse{}
	_body, _err := client.UpdateAlertRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a workflow.
//
// @param request - UpdateBusinessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateBusinessResponse
func (client *Client) UpdateBusinessWithOptions(request *UpdateBusinessRequest, runtime *util.RuntimeOptions) (_result *UpdateBusinessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessId)) {
		body["BusinessId"] = request.BusinessId
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessName)) {
		body["BusinessName"] = request.BusinessName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateBusiness"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateBusinessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a workflow.
//
// @param request - UpdateBusinessRequest
//
// @return UpdateBusinessResponse
func (client *Client) UpdateBusiness(request *UpdateBusinessRequest) (_result *UpdateBusinessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateBusinessResponse{}
	_body, _err := client.UpdateBusinessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新字段业务元数据
//
// @param request - UpdateColumnBusinessMetadataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateColumnBusinessMetadataResponse
func (client *Client) UpdateColumnBusinessMetadataWithOptions(request *UpdateColumnBusinessMetadataRequest, runtime *util.RuntimeOptions) (_result *UpdateColumnBusinessMetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateColumnBusinessMetadata"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateColumnBusinessMetadataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新字段业务元数据
//
// @param request - UpdateColumnBusinessMetadataRequest
//
// @return UpdateColumnBusinessMetadataResponse
func (client *Client) UpdateColumnBusinessMetadata(request *UpdateColumnBusinessMetadataRequest) (_result *UpdateColumnBusinessMetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateColumnBusinessMetadataResponse{}
	_body, _err := client.UpdateColumnBusinessMetadataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates an alert rule configured for a synchronization task.
//
// @param tmpReq - UpdateDIAlarmRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDIAlarmRuleResponse
func (client *Client) UpdateDIAlarmRuleWithOptions(tmpReq *UpdateDIAlarmRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateDIAlarmRuleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateDIAlarmRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.NotificationSettings)) {
		request.NotificationSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.NotificationSettings, tea.String("NotificationSettings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TriggerConditions)) {
		request.TriggerConditionsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TriggerConditions, tea.String("TriggerConditions"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDIAlarmRule"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDIAlarmRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates an alert rule configured for a synchronization task.
//
// @param request - UpdateDIAlarmRuleRequest
//
// @return UpdateDIAlarmRuleResponse
func (client *Client) UpdateDIAlarmRule(request *UpdateDIAlarmRuleRequest) (_result *UpdateDIAlarmRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDIAlarmRuleResponse{}
	_body, _err := client.UpdateDIAlarmRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - UpdateDIJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDIJobResponse
func (client *Client) UpdateDIJobWithOptions(tmpReq *UpdateDIJobRequest, runtime *util.RuntimeOptions) (_result *UpdateDIJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateDIJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.JobSettings)) {
		request.JobSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.JobSettings, tea.String("JobSettings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ResourceSettings)) {
		request.ResourceSettingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ResourceSettings, tea.String("ResourceSettings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TableMappings)) {
		request.TableMappingsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TableMappings, tea.String("TableMappings"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TransformationRules)) {
		request.TransformationRulesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TransformationRules, tea.String("TransformationRules"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDIJob"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDIJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a synchronization task.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - UpdateDIJobRequest
//
// @return UpdateDIJobResponse
func (client *Client) UpdateDIJob(request *UpdateDIJobRequest) (_result *UpdateDIJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDIJobResponse{}
	_body, _err := client.UpdateDIJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a tag.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param tmpReq - UpdateDataAssetTagRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDataAssetTagResponse
func (client *Client) UpdateDataAssetTagWithOptions(tmpReq *UpdateDataAssetTagRequest, runtime *util.RuntimeOptions) (_result *UpdateDataAssetTagResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateDataAssetTagShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Managers)) {
		request.ManagersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Managers, tea.String("Managers"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Values)) {
		request.ValuesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Values, tea.String("Values"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Key)) {
		query["Key"] = request.Key
	}

	if !tea.BoolValue(util.IsUnset(request.ManagersShrink)) {
		query["Managers"] = request.ManagersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ValuesShrink)) {
		query["Values"] = request.ValuesShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDataAssetTag"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDataAssetTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a tag.
//
// Description:
//
// This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
//
// @param request - UpdateDataAssetTagRequest
//
// @return UpdateDataAssetTagResponse
func (client *Client) UpdateDataAssetTag(request *UpdateDataAssetTagRequest) (_result *UpdateDataAssetTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDataAssetTagResponse{}
	_body, _err := client.UpdateDataAssetTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a monitor.
//
// Description:
//
// This API operation is supported in all DataWorks editions.
//
// @param tmpReq - UpdateDataQualityEvaluationTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDataQualityEvaluationTaskResponse
func (client *Client) UpdateDataQualityEvaluationTaskWithOptions(tmpReq *UpdateDataQualityEvaluationTaskRequest, runtime *util.RuntimeOptions) (_result *UpdateDataQualityEvaluationTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateDataQualityEvaluationTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DataQualityRules)) {
		request.DataQualityRulesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DataQualityRules, tea.String("DataQualityRules"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Hooks)) {
		request.HooksShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Hooks, tea.String("Hooks"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Notifications)) {
		request.NotificationsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Notifications, tea.String("Notifications"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Target)) {
		request.TargetShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Target, tea.String("Target"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Trigger)) {
		request.TriggerShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Trigger, tea.String("Trigger"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataQualityRulesShrink)) {
		body["DataQualityRules"] = request.DataQualityRulesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		body["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.HooksShrink)) {
		body["Hooks"] = request.HooksShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NotificationsShrink)) {
		body["Notifications"] = request.NotificationsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RuntimeConf)) {
		body["RuntimeConf"] = request.RuntimeConf
	}

	if !tea.BoolValue(util.IsUnset(request.TargetShrink)) {
		body["Target"] = request.TargetShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerShrink)) {
		body["Trigger"] = request.TriggerShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDataQualityEvaluationTask"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDataQualityEvaluationTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a monitor.
//
// Description:
//
// This API operation is supported in all DataWorks editions.
//
// @param request - UpdateDataQualityEvaluationTaskRequest
//
// @return UpdateDataQualityEvaluationTaskResponse
func (client *Client) UpdateDataQualityEvaluationTask(request *UpdateDataQualityEvaluationTaskRequest) (_result *UpdateDataQualityEvaluationTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDataQualityEvaluationTaskResponse{}
	_body, _err := client.UpdateDataQualityEvaluationTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a data quality monitoring rule.
//
// @param tmpReq - UpdateDataQualityRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDataQualityRuleResponse
func (client *Client) UpdateDataQualityRuleWithOptions(tmpReq *UpdateDataQualityRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateDataQualityRuleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateDataQualityRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CheckingConfig)) {
		request.CheckingConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CheckingConfig, tea.String("CheckingConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ErrorHandlers)) {
		request.ErrorHandlersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ErrorHandlers, tea.String("ErrorHandlers"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SamplingConfig)) {
		request.SamplingConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SamplingConfig, tea.String("SamplingConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckingConfigShrink)) {
		body["CheckingConfig"] = request.CheckingConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Enabled)) {
		body["Enabled"] = request.Enabled
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorHandlersShrink)) {
		body["ErrorHandlers"] = request.ErrorHandlersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.SamplingConfigShrink)) {
		body["SamplingConfig"] = request.SamplingConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Severity)) {
		body["Severity"] = request.Severity
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		body["TemplateCode"] = request.TemplateCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDataQualityRule"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDataQualityRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a data quality monitoring rule.
//
// @param request - UpdateDataQualityRuleRequest
//
// @return UpdateDataQualityRuleResponse
func (client *Client) UpdateDataQualityRule(request *UpdateDataQualityRuleRequest) (_result *UpdateDataQualityRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDataQualityRuleResponse{}
	_body, _err := client.UpdateDataQualityRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a data quality monitoring rule template.
//
// @param tmpReq - UpdateDataQualityRuleTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDataQualityRuleTemplateResponse
func (client *Client) UpdateDataQualityRuleTemplateWithOptions(tmpReq *UpdateDataQualityRuleTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateDataQualityRuleTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateDataQualityRuleTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CheckingConfig)) {
		request.CheckingConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CheckingConfig, tea.String("CheckingConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SamplingConfig)) {
		request.SamplingConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SamplingConfig, tea.String("SamplingConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckingConfigShrink)) {
		body["CheckingConfig"] = request.CheckingConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Code)) {
		body["Code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryPath)) {
		body["DirectoryPath"] = request.DirectoryPath
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.SamplingConfigShrink)) {
		body["SamplingConfig"] = request.SamplingConfigShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDataQualityRuleTemplate"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDataQualityRuleTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a data quality monitoring rule template.
//
// @param request - UpdateDataQualityRuleTemplateRequest
//
// @return UpdateDataQualityRuleTemplateResponse
func (client *Client) UpdateDataQualityRuleTemplate(request *UpdateDataQualityRuleTemplateRequest) (_result *UpdateDataQualityRuleTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDataQualityRuleTemplateResponse{}
	_body, _err := client.UpdateDataQualityRuleTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a data source by ID.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Tenant Administrator, Workspace Administrator, Workspace Owner, and O\\&M
//
// @param request - UpdateDataSourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateDataSourceResponse
func (client *Client) UpdateDataSourceWithOptions(request *UpdateDataSourceRequest, runtime *util.RuntimeOptions) (_result *UpdateDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConnectionProperties)) {
		query["ConnectionProperties"] = request.ConnectionProperties
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectionPropertiesMode)) {
		query["ConnectionPropertiesMode"] = request.ConnectionPropertiesMode
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDataSource"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDataSourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a data source by ID.
//
// Description:
//
// 1.  This API operation is available for all DataWorks editions.
//
// 2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
//
//   - Tenant Owner, Tenant Administrator, Workspace Administrator, Workspace Owner, and O\\&M
//
// @param request - UpdateDataSourceRequest
//
// @return UpdateDataSourceResponse
func (client *Client) UpdateDataSource(request *UpdateDataSourceRequest) (_result *UpdateDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDataSourceResponse{}
	_body, _err := client.UpdateDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateFileResponse
func (client *Client) UpdateFileWithOptions(request *UpdateFileRequest, runtime *util.RuntimeOptions) (_result *UpdateFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdvancedSettings)) {
		body["AdvancedSettings"] = request.AdvancedSettings
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyScheduleImmediately)) {
		body["ApplyScheduleImmediately"] = request.ApplyScheduleImmediately
	}

	if !tea.BoolValue(util.IsUnset(request.AutoParsing)) {
		body["AutoParsing"] = request.AutoParsing
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRerunIntervalMillis)) {
		body["AutoRerunIntervalMillis"] = request.AutoRerunIntervalMillis
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRerunTimes)) {
		body["AutoRerunTimes"] = request.AutoRerunTimes
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectionName)) {
		body["ConnectionName"] = request.ConnectionName
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.CronExpress)) {
		body["CronExpress"] = request.CronExpress
	}

	if !tea.BoolValue(util.IsUnset(request.CycleType)) {
		body["CycleType"] = request.CycleType
	}

	if !tea.BoolValue(util.IsUnset(request.DependentNodeIdList)) {
		body["DependentNodeIdList"] = request.DependentNodeIdList
	}

	if !tea.BoolValue(util.IsUnset(request.DependentType)) {
		body["DependentType"] = request.DependentType
	}

	if !tea.BoolValue(util.IsUnset(request.EndEffectDate)) {
		body["EndEffectDate"] = request.EndEffectDate
	}

	if !tea.BoolValue(util.IsUnset(request.FileDescription)) {
		body["FileDescription"] = request.FileDescription
	}

	if !tea.BoolValue(util.IsUnset(request.FileFolderPath)) {
		body["FileFolderPath"] = request.FileFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		body["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.IgnoreParentSkipRunningProperty)) {
		body["IgnoreParentSkipRunningProperty"] = request.IgnoreParentSkipRunningProperty
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		body["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InputList)) {
		body["InputList"] = request.InputList
	}

	if !tea.BoolValue(util.IsUnset(request.InputParameters)) {
		body["InputParameters"] = request.InputParameters
	}

	if !tea.BoolValue(util.IsUnset(request.OutputList)) {
		body["OutputList"] = request.OutputList
	}

	if !tea.BoolValue(util.IsUnset(request.OutputParameters)) {
		body["OutputParameters"] = request.OutputParameters
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.ParaValue)) {
		body["ParaValue"] = request.ParaValue
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.RerunMode)) {
		body["RerunMode"] = request.RerunMode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupIdentifier)) {
		body["ResourceGroupIdentifier"] = request.ResourceGroupIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.SchedulerType)) {
		body["SchedulerType"] = request.SchedulerType
	}

	if !tea.BoolValue(util.IsUnset(request.StartEffectDate)) {
		body["StartEffectDate"] = request.StartEffectDate
	}

	if !tea.BoolValue(util.IsUnset(request.StartImmediately)) {
		body["StartImmediately"] = request.StartImmediately
	}

	if !tea.BoolValue(util.IsUnset(request.Stop)) {
		body["Stop"] = request.Stop
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		body["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateFile"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateFileRequest
//
// @return UpdateFileResponse
func (client *Client) UpdateFile(request *UpdateFileRequest) (_result *UpdateFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateFileResponse{}
	_body, _err := client.UpdateFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateFolderRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateFolderResponse
func (client *Client) UpdateFolderWithOptions(request *UpdateFolderRequest, runtime *util.RuntimeOptions) (_result *UpdateFolderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FolderId)) {
		body["FolderId"] = request.FolderId
	}

	if !tea.BoolValue(util.IsUnset(request.FolderName)) {
		body["FolderName"] = request.FolderName
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateFolder"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateFolderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateFolderRequest
//
// @return UpdateFolderResponse
func (client *Client) UpdateFolder(request *UpdateFolderRequest) (_result *UpdateFolderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateFolderResponse{}
	_body, _err := client.UpdateFolderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the basic information about a user-defined function (UDF) in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
//
// @param request - UpdateFunctionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateFunctionResponse
func (client *Client) UpdateFunctionWithOptions(request *UpdateFunctionRequest, runtime *util.RuntimeOptions) (_result *UpdateFunctionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		body["Spec"] = request.Spec
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateFunction"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateFunctionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the basic information about a user-defined function (UDF) in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
//
// @param request - UpdateFunctionRequest
//
// @return UpdateFunctionResponse
func (client *Client) UpdateFunction(request *UpdateFunctionRequest) (_result *UpdateFunctionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateFunctionResponse{}
	_body, _err := client.UpdateFunctionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 回调扩展点消息的检查结果
//
// @param request - UpdateIDEEventResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateIDEEventResultResponse
func (client *Client) UpdateIDEEventResultWithOptions(request *UpdateIDEEventResultRequest, runtime *util.RuntimeOptions) (_result *UpdateIDEEventResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckResult)) {
		body["CheckResult"] = request.CheckResult
	}

	if !tea.BoolValue(util.IsUnset(request.CheckResultTip)) {
		body["CheckResultTip"] = request.CheckResultTip
	}

	if !tea.BoolValue(util.IsUnset(request.ExtensionCode)) {
		body["ExtensionCode"] = request.ExtensionCode
	}

	if !tea.BoolValue(util.IsUnset(request.MessageId)) {
		body["MessageId"] = request.MessageId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateIDEEventResult"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateIDEEventResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 回调扩展点消息的检查结果
//
// @param request - UpdateIDEEventResultRequest
//
// @return UpdateIDEEventResultResponse
func (client *Client) UpdateIDEEventResult(request *UpdateIDEEventResultRequest) (_result *UpdateIDEEventResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateIDEEventResultResponse{}
	_body, _err := client.UpdateIDEEventResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新集合
//
// @param tmpReq - UpdateMetaCollectionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMetaCollectionResponse
func (client *Client) UpdateMetaCollectionWithOptions(tmpReq *UpdateMetaCollectionRequest, runtime *util.RuntimeOptions) (_result *UpdateMetaCollectionResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateMetaCollectionShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Administrators)) {
		request.AdministratorsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Administrators, tea.String("Administrators"), tea.String("simple"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdministratorsShrink)) {
		query["Administrators"] = request.AdministratorsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMetaCollection"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMetaCollectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新集合
//
// @param request - UpdateMetaCollectionRequest
//
// @return UpdateMetaCollectionResponse
func (client *Client) UpdateMetaCollection(request *UpdateMetaCollectionRequest) (_result *UpdateMetaCollectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMetaCollectionResponse{}
	_body, _err := client.UpdateMetaCollectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the basic information about a node in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
//
// @param request - UpdateNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateNodeResponse
func (client *Client) UpdateNodeWithOptions(request *UpdateNodeRequest, runtime *util.RuntimeOptions) (_result *UpdateNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		body["Spec"] = request.Spec
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateNode"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the basic information about a node in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
//
// @param request - UpdateNodeRequest
//
// @return UpdateNodeResponse
func (client *Client) UpdateNode(request *UpdateNodeRequest) (_result *UpdateNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateNodeResponse{}
	_body, _err := client.UpdateNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a DataWorks workspace.
//
// @param request - UpdateProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateProjectResponse
func (client *Client) UpdateProjectWithOptions(request *UpdateProjectRequest, runtime *util.RuntimeOptions) (_result *UpdateProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DevEnvironmentEnabled)) {
		body["DevEnvironmentEnabled"] = request.DevEnvironmentEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.DevRoleDisabled)) {
		body["DevRoleDisabled"] = request.DevRoleDisabled
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		body["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.PaiTaskEnabled)) {
		body["PaiTaskEnabled"] = request.PaiTaskEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateProject"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a DataWorks workspace.
//
// @param request - UpdateProjectRequest
//
// @return UpdateProjectResponse
func (client *Client) UpdateProject(request *UpdateProjectRequest) (_result *UpdateProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProjectResponse{}
	_body, _err := client.UpdateProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the basic information about a file resource in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
//
// @param request - UpdateResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateResourceResponse
func (client *Client) UpdateResourceWithOptions(request *UpdateResourceRequest, runtime *util.RuntimeOptions) (_result *UpdateResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceFile)) {
		body["ResourceFile"] = request.ResourceFile
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		body["Spec"] = request.Spec
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateResource"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the basic information about a file resource in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
//
// @param request - UpdateResourceRequest
//
// @return UpdateResourceResponse
func (client *Client) UpdateResource(request *UpdateResourceRequest) (_result *UpdateResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateResourceResponse{}
	_body, _err := client.UpdateResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateResourceAdvance(request *UpdateResourceAdvanceRequest, runtime *util.RuntimeOptions) (_result *UpdateResourceResponse, _err error) {
	// Step 0: init client
	accessKeyId, _err := client.Credential.GetAccessKeyId()
	if _err != nil {
		return _result, _err
	}

	accessKeySecret, _err := client.Credential.GetAccessKeySecret()
	if _err != nil {
		return _result, _err
	}

	securityToken, _err := client.Credential.GetSecurityToken()
	if _err != nil {
		return _result, _err
	}

	credentialType := client.Credential.GetType()
	openPlatformEndpoint := client.OpenPlatformEndpoint
	if tea.BoolValue(util.Empty(openPlatformEndpoint)) {
		openPlatformEndpoint = tea.String("openplatform.aliyuncs.com")
	}

	if tea.BoolValue(util.IsUnset(credentialType)) {
		credentialType = tea.String("access_key")
	}

	authConfig := &openapi.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		SecurityToken:   securityToken,
		Type:            credentialType,
		Endpoint:        openPlatformEndpoint,
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	authClient, _err := openplatform.NewClient(authConfig)
	if _err != nil {
		return _result, _err
	}

	authRequest := &openplatform.AuthorizeFileUploadRequest{
		Product:  tea.String("dataworks-public"),
		RegionId: client.RegionId,
	}
	authResponse := &openplatform.AuthorizeFileUploadResponse{}
	ossConfig := &oss.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		Type:            tea.String("access_key"),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	ossClient, _err := oss.NewClient(ossConfig)
	if _err != nil {
		return _result, _err
	}

	fileObj := &fileform.FileField{}
	ossHeader := &oss.PostObjectRequestHeader{}
	uploadRequest := &oss.PostObjectRequest{}
	ossRuntime := &ossutil.RuntimeOptions{}
	openapiutil.Convert(runtime, ossRuntime)
	updateResourceReq := &UpdateResourceRequest{}
	openapiutil.Convert(request, updateResourceReq)
	if !tea.BoolValue(util.IsUnset(request.ResourceFileObject)) {
		authResponse, _err = authClient.AuthorizeFileUploadWithOptions(authRequest, runtime)
		if _err != nil {
			return _result, _err
		}

		ossConfig.AccessKeyId = authResponse.Body.AccessKeyId
		ossConfig.Endpoint = openapiutil.GetEndpoint(authResponse.Body.Endpoint, authResponse.Body.UseAccelerate, client.EndpointType)
		ossClient, _err = oss.NewClient(ossConfig)
		if _err != nil {
			return _result, _err
		}

		fileObj = &fileform.FileField{
			Filename:    authResponse.Body.ObjectKey,
			Content:     request.ResourceFileObject,
			ContentType: tea.String(""),
		}
		ossHeader = &oss.PostObjectRequestHeader{
			AccessKeyId:         authResponse.Body.AccessKeyId,
			Policy:              authResponse.Body.EncodedPolicy,
			Signature:           authResponse.Body.Signature,
			Key:                 authResponse.Body.ObjectKey,
			File:                fileObj,
			SuccessActionStatus: tea.String("201"),
		}
		uploadRequest = &oss.PostObjectRequest{
			BucketName: authResponse.Body.Bucket,
			Header:     ossHeader,
		}
		_, _err = ossClient.PostObject(uploadRequest, ossRuntime)
		if _err != nil {
			return _result, _err
		}
		updateResourceReq.ResourceFile = tea.String("http://" + tea.StringValue(authResponse.Body.Bucket) + "." + tea.StringValue(authResponse.Body.Endpoint) + "/" + tea.StringValue(authResponse.Body.ObjectKey))
	}

	updateResourceResp, _err := client.UpdateResourceWithOptions(updateResourceReq, runtime)
	if _err != nil {
		return _result, _err
	}

	_result = updateResourceResp
	return _result, _err
}

// Summary:
//
// Updates basic information about a resource group.
//
// Description:
//
// You can use this API operation only in DataWorks Basic Edition or an advanced edition.
//
// @param request - UpdateResourceGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateResourceGroupResponse
func (client *Client) UpdateResourceGroupWithOptions(request *UpdateResourceGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunResourceGroupId)) {
		body["AliyunResourceGroupId"] = request.AliyunResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		body["Remark"] = request.Remark
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateResourceGroup"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates basic information about a resource group.
//
// Description:
//
// You can use this API operation only in DataWorks Basic Edition or an advanced edition.
//
// @param request - UpdateResourceGroupRequest
//
// @return UpdateResourceGroupResponse
func (client *Client) UpdateResourceGroup(request *UpdateResourceGroupRequest) (_result *UpdateResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateResourceGroupResponse{}
	_body, _err := client.UpdateResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the information about a route.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - UpdateRouteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateRouteResponse
func (client *Client) UpdateRouteWithOptions(request *UpdateRouteRequest, runtime *util.RuntimeOptions) (_result *UpdateRouteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationCidr)) {
		body["DestinationCidr"] = request.DestinationCidr
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateRoute"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateRouteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the information about a route.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - UpdateRouteRequest
//
// @return UpdateRouteResponse
func (client *Client) UpdateRoute(request *UpdateRouteRequest) (_result *UpdateRouteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateRouteResponse{}
	_body, _err := client.UpdateRouteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新数据表业务元数据
//
// @param request - UpdateTableBusinessMetadataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateTableBusinessMetadataResponse
func (client *Client) UpdateTableBusinessMetadataWithOptions(request *UpdateTableBusinessMetadataRequest, runtime *util.RuntimeOptions) (_result *UpdateTableBusinessMetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Readme)) {
		body["Readme"] = request.Readme
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTableBusinessMetadata"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTableBusinessMetadataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新数据表业务元数据
//
// @param request - UpdateTableBusinessMetadataRequest
//
// @return UpdateTableBusinessMetadataResponse
func (client *Client) UpdateTableBusinessMetadata(request *UpdateTableBusinessMetadataRequest) (_result *UpdateTableBusinessMetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTableBusinessMetadataResponse{}
	_body, _err := client.UpdateTableBusinessMetadataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a specified task in full update mode.
//
// @param tmpReq - UpdateTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateTaskResponse
func (client *Client) UpdateTaskWithOptions(tmpReq *UpdateTaskRequest, runtime *util.RuntimeOptions) (_result *UpdateTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DataSource)) {
		request.DataSourceShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DataSource, tea.String("DataSource"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Dependencies)) {
		request.DependenciesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Dependencies, tea.String("Dependencies"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Inputs)) {
		request.InputsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Inputs, tea.String("Inputs"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Outputs)) {
		request.OutputsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Outputs, tea.String("Outputs"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.RuntimeResource)) {
		request.RuntimeResourceShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RuntimeResource, tea.String("RuntimeResource"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Script)) {
		request.ScriptShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Script, tea.String("Script"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Tags)) {
		request.TagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tags, tea.String("Tags"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Trigger)) {
		request.TriggerShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Trigger, tea.String("Trigger"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientUniqueCode)) {
		body["ClientUniqueCode"] = request.ClientUniqueCode
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceShrink)) {
		body["DataSource"] = request.DataSourceShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DependenciesShrink)) {
		body["Dependencies"] = request.DependenciesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.InputsShrink)) {
		body["Inputs"] = request.InputsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceMode)) {
		body["InstanceMode"] = request.InstanceMode
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputsShrink)) {
		body["Outputs"] = request.OutputsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.RerunInterval)) {
		body["RerunInterval"] = request.RerunInterval
	}

	if !tea.BoolValue(util.IsUnset(request.RerunMode)) {
		body["RerunMode"] = request.RerunMode
	}

	if !tea.BoolValue(util.IsUnset(request.RerunTimes)) {
		body["RerunTimes"] = request.RerunTimes
	}

	if !tea.BoolValue(util.IsUnset(request.RuntimeResourceShrink)) {
		body["RuntimeResource"] = request.RuntimeResourceShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptShrink)) {
		body["Script"] = request.ScriptShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TagsShrink)) {
		body["Tags"] = request.TagsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		body["Timeout"] = request.Timeout
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerShrink)) {
		body["Trigger"] = request.TriggerShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTask"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a specified task in full update mode.
//
// @param request - UpdateTaskRequest
//
// @return UpdateTaskResponse
func (client *Client) UpdateTask(request *UpdateTaskRequest) (_result *UpdateTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTaskResponse{}
	_body, _err := client.UpdateTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies properties configured for multiple instances at a time. The properties include the priority, resource group for scheduling, and data source.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - UpdateTaskInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateTaskInstancesResponse
func (client *Client) UpdateTaskInstancesWithOptions(tmpReq *UpdateTaskInstancesRequest, runtime *util.RuntimeOptions) (_result *UpdateTaskInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateTaskInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TaskInstances)) {
		request.TaskInstancesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TaskInstances, tea.String("TaskInstances"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		body["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.TaskInstancesShrink)) {
		body["TaskInstances"] = request.TaskInstancesShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTaskInstances"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTaskInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies properties configured for multiple instances at a time. The properties include the priority, resource group for scheduling, and data source.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - UpdateTaskInstancesRequest
//
// @return UpdateTaskInstancesResponse
func (client *Client) UpdateTaskInstances(request *UpdateTaskInstancesRequest) (_result *UpdateTaskInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTaskInstancesResponse{}
	_body, _err := client.UpdateTaskInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateUdfFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateUdfFileResponse
func (client *Client) UpdateUdfFileWithOptions(request *UpdateUdfFileRequest, runtime *util.RuntimeOptions) (_result *UpdateUdfFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClassName)) {
		body["ClassName"] = request.ClassName
	}

	if !tea.BoolValue(util.IsUnset(request.CmdDescription)) {
		body["CmdDescription"] = request.CmdDescription
	}

	if !tea.BoolValue(util.IsUnset(request.Example)) {
		body["Example"] = request.Example
	}

	if !tea.BoolValue(util.IsUnset(request.FileFolderPath)) {
		body["FileFolderPath"] = request.FileFolderPath
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		body["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionType)) {
		body["FunctionType"] = request.FunctionType
	}

	if !tea.BoolValue(util.IsUnset(request.ParameterDescription)) {
		body["ParameterDescription"] = request.ParameterDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIdentifier)) {
		body["ProjectIdentifier"] = request.ProjectIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.Resources)) {
		body["Resources"] = request.Resources
	}

	if !tea.BoolValue(util.IsUnset(request.ReturnValue)) {
		body["ReturnValue"] = request.ReturnValue
	}

	if !tea.BoolValue(util.IsUnset(request.UdfDescription)) {
		body["UdfDescription"] = request.UdfDescription
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateUdfFile"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateUdfFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateUdfFileRequest
//
// @return UpdateUdfFileResponse
func (client *Client) UpdateUdfFile(request *UpdateUdfFileRequest) (_result *UpdateUdfFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateUdfFileResponse{}
	_body, _err := client.UpdateUdfFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates a specified workflow in full update mode.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param tmpReq - UpdateWorkflowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWorkflowResponse
func (client *Client) UpdateWorkflowWithOptions(tmpReq *UpdateWorkflowRequest, runtime *util.RuntimeOptions) (_result *UpdateWorkflowResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateWorkflowShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Dependencies)) {
		request.DependenciesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Dependencies, tea.String("Dependencies"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Outputs)) {
		request.OutputsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Outputs, tea.String("Outputs"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Tags)) {
		request.TagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tags, tea.String("Tags"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Tasks)) {
		request.TasksShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tasks, tea.String("Tasks"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Trigger)) {
		request.TriggerShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Trigger, tea.String("Trigger"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientUniqueCode)) {
		body["ClientUniqueCode"] = request.ClientUniqueCode
	}

	if !tea.BoolValue(util.IsUnset(request.DependenciesShrink)) {
		body["Dependencies"] = request.DependenciesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnvType)) {
		body["EnvType"] = request.EnvType
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceMode)) {
		body["InstanceMode"] = request.InstanceMode
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputsShrink)) {
		body["Outputs"] = request.OutputsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		body["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.Parameters)) {
		body["Parameters"] = request.Parameters
	}

	if !tea.BoolValue(util.IsUnset(request.TagsShrink)) {
		body["Tags"] = request.TagsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TasksShrink)) {
		body["Tasks"] = request.TasksShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerShrink)) {
		body["Trigger"] = request.TriggerShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWorkflow"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWorkflowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates a specified workflow in full update mode.
//
// Description:
//
// This API operation is available for all DataWorks editions.
//
// @param request - UpdateWorkflowRequest
//
// @return UpdateWorkflowResponse
func (client *Client) UpdateWorkflow(request *UpdateWorkflowRequest) (_result *UpdateWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateWorkflowResponse{}
	_body, _err := client.UpdateWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the basic information about a workflow in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
//
// Description:
//
// >  You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows in the FlowSpec filed, only the first workflow is created. Other specified workflows and the nodes in the workflows are ignored. You can call the UpdateNode operation to update a node.
//
// @param request - UpdateWorkflowDefinitionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWorkflowDefinitionResponse
func (client *Client) UpdateWorkflowDefinitionWithOptions(request *UpdateWorkflowDefinitionRequest, runtime *util.RuntimeOptions) (_result *UpdateWorkflowDefinitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		body["Spec"] = request.Spec
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWorkflowDefinition"),
		Version:     tea.String("2024-05-18"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWorkflowDefinitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the basic information about a workflow in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
//
// Description:
//
// >  You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows in the FlowSpec filed, only the first workflow is created. Other specified workflows and the nodes in the workflows are ignored. You can call the UpdateNode operation to update a node.
//
// @param request - UpdateWorkflowDefinitionRequest
//
// @return UpdateWorkflowDefinitionResponse
func (client *Client) UpdateWorkflowDefinition(request *UpdateWorkflowDefinitionRequest) (_result *UpdateWorkflowDefinitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateWorkflowDefinitionResponse{}
	_body, _err := client.UpdateWorkflowDefinitionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
